
RTOS_V2_Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007804  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08007994  08007994  00017994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bcc  08007bcc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007bcc  08007bcc  00017bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bd4  08007bd4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bd4  08007bd4  00017bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bd8  08007bd8  00017bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007bdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022ac  20000078  08007c54  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002324  08007c54  00022324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ca94  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037bd  00000000  00000000  0003cb3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001728  00000000  00000000  00040300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e0  00000000  00000000  00041a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000484f  00000000  00000000  00043008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c17  00000000  00000000  00047857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe61e  00000000  00000000  0006046e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015ea8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006998  00000000  00000000  0015eadc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800797c 	.word	0x0800797c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800797c 	.word	0x0800797c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800057c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000580:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000584:	f003 0301 	and.w	r3, r3, #1
 8000588:	2b00      	cmp	r3, #0
 800058a:	d013      	beq.n	80005b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000594:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00b      	beq.n	80005b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800059c:	e000      	b.n	80005a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800059e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0f9      	beq.n	800059e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	b2d2      	uxtb	r2, r2
 80005b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b4:	687b      	ldr	r3, [r7, #4]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b086      	sub	sp, #24
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	60f8      	str	r0, [r7, #12]
 80005ca:	60b9      	str	r1, [r7, #8]
 80005cc:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
 80005d6:	e009      	b.n	80005ec <_write+0x2a>
    ITM_SendChar((*ptr++));
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	1c5a      	adds	r2, r3, #1
 80005dc:	60ba      	str	r2, [r7, #8]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ffc7 	bl	8000574 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	3301      	adds	r3, #1
 80005ea:	617b      	str	r3, [r7, #20]
 80005ec:	697a      	ldr	r2, [r7, #20]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	dbf1      	blt.n	80005d8 <_write+0x16>
  return len;
 80005f4:	687b      	ldr	r3, [r7, #4]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3718      	adds	r7, #24
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fb98 	bl	8000d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f844 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f8c4 	bl	8000798 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000610:	f000 f892 	bl	8000738 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000614:	f003 f992 	bl	800393c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (3, sizeof(Data_t), &myQueue01_attributes);
 8000618:	4a11      	ldr	r2, [pc, #68]	; (8000660 <main+0x60>)
 800061a:	2102      	movs	r1, #2
 800061c:	2003      	movs	r0, #3
 800061e:	f003 fa69 	bl	8003af4 <osMessageQueueNew>
 8000622:	4603      	mov	r3, r0
 8000624:	4a0f      	ldr	r2, [pc, #60]	; (8000664 <main+0x64>)
 8000626:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Sender1 */
  Sender1Handle = osThreadNew(StartSender1, &(xStructsToSend[0]), &Sender1_attributes);
 8000628:	4a0f      	ldr	r2, [pc, #60]	; (8000668 <main+0x68>)
 800062a:	4910      	ldr	r1, [pc, #64]	; (800066c <main+0x6c>)
 800062c:	4810      	ldr	r0, [pc, #64]	; (8000670 <main+0x70>)
 800062e:	f003 f9cf 	bl	80039d0 <osThreadNew>
 8000632:	4603      	mov	r3, r0
 8000634:	4a0f      	ldr	r2, [pc, #60]	; (8000674 <main+0x74>)
 8000636:	6013      	str	r3, [r2, #0]

  /* creation of Sender2 */
  Sender2Handle = osThreadNew(StartSender2, &(xStructsToSend[1]), &Sender2_attributes);
 8000638:	4a0f      	ldr	r2, [pc, #60]	; (8000678 <main+0x78>)
 800063a:	4910      	ldr	r1, [pc, #64]	; (800067c <main+0x7c>)
 800063c:	4810      	ldr	r0, [pc, #64]	; (8000680 <main+0x80>)
 800063e:	f003 f9c7 	bl	80039d0 <osThreadNew>
 8000642:	4603      	mov	r3, r0
 8000644:	4a0f      	ldr	r2, [pc, #60]	; (8000684 <main+0x84>)
 8000646:	6013      	str	r3, [r2, #0]

  /* creation of Receiver */
  ReceiverHandle = osThreadNew(StartReceiver, NULL, &Receiver_attributes);
 8000648:	4a0f      	ldr	r2, [pc, #60]	; (8000688 <main+0x88>)
 800064a:	2100      	movs	r1, #0
 800064c:	480f      	ldr	r0, [pc, #60]	; (800068c <main+0x8c>)
 800064e:	f003 f9bf 	bl	80039d0 <osThreadNew>
 8000652:	4603      	mov	r3, r0
 8000654:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <main+0x90>)
 8000656:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000658:	f003 f994 	bl	8003984 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065c:	e7fe      	b.n	800065c <main+0x5c>
 800065e:	bf00      	nop
 8000660:	08007ad4 	.word	0x08007ad4
 8000664:	20000124 	.word	0x20000124
 8000668:	08007a68 	.word	0x08007a68
 800066c:	20000000 	.word	0x20000000
 8000670:	08000865 	.word	0x08000865
 8000674:	20000118 	.word	0x20000118
 8000678:	08007a8c 	.word	0x08007a8c
 800067c:	20000002 	.word	0x20000002
 8000680:	08000899 	.word	0x08000899
 8000684:	2000011c 	.word	0x2000011c
 8000688:	08007ab0 	.word	0x08007ab0
 800068c:	080008cd 	.word	0x080008cd
 8000690:	20000120 	.word	0x20000120

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b096      	sub	sp, #88	; 0x58
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	2244      	movs	r2, #68	; 0x44
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f006 f9eb 	bl	8006a7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	463b      	mov	r3, r7
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ba:	f000 fe2f 	bl	800131c <HAL_PWREx_ControlVoltageScaling>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006c4:	f000 f950 	bl	8000968 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c8:	2302      	movs	r3, #2
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d2:	2310      	movs	r3, #16
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d6:	2302      	movs	r3, #2
 80006d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006da:	2302      	movs	r3, #2
 80006dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006de:	2301      	movs	r3, #1
 80006e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006e2:	230a      	movs	r3, #10
 80006e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006e6:	2307      	movs	r3, #7
 80006e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 fe66 	bl	80013c8 <HAL_RCC_OscConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000702:	f000 f931 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000706:	230f      	movs	r3, #15
 8000708:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070a:	2303      	movs	r3, #3
 800070c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800071a:	463b      	mov	r3, r7
 800071c:	2104      	movs	r1, #4
 800071e:	4618      	mov	r0, r3
 8000720:	f001 fa2e 	bl	8001b80 <HAL_RCC_ClockConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800072a:	f000 f91d 	bl	8000968 <Error_Handler>
  }
}
 800072e:	bf00      	nop
 8000730:	3758      	adds	r7, #88	; 0x58
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800073e:	4a15      	ldr	r2, [pc, #84]	; (8000794 <MX_USART2_UART_Init+0x5c>)
 8000740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800077c:	f002 fbe4 	bl	8002f48 <HAL_UART_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000786:	f000 f8ef 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000094 	.word	0x20000094
 8000794:	40004400 	.word	0x40004400

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	4b2b      	ldr	r3, [pc, #172]	; (800085c <MX_GPIO_Init+0xc4>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	4a2a      	ldr	r2, [pc, #168]	; (800085c <MX_GPIO_Init+0xc4>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ba:	4b28      	ldr	r3, [pc, #160]	; (800085c <MX_GPIO_Init+0xc4>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	4b25      	ldr	r3, [pc, #148]	; (800085c <MX_GPIO_Init+0xc4>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	4a24      	ldr	r2, [pc, #144]	; (800085c <MX_GPIO_Init+0xc4>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d2:	4b22      	ldr	r3, [pc, #136]	; (800085c <MX_GPIO_Init+0xc4>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b1f      	ldr	r3, [pc, #124]	; (800085c <MX_GPIO_Init+0xc4>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	4a1e      	ldr	r2, [pc, #120]	; (800085c <MX_GPIO_Init+0xc4>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ea:	4b1c      	ldr	r3, [pc, #112]	; (800085c <MX_GPIO_Init+0xc4>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	4b19      	ldr	r3, [pc, #100]	; (800085c <MX_GPIO_Init+0xc4>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	4a18      	ldr	r2, [pc, #96]	; (800085c <MX_GPIO_Init+0xc4>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000802:	4b16      	ldr	r3, [pc, #88]	; (800085c <MX_GPIO_Init+0xc4>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2120      	movs	r1, #32
 8000812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000816:	f000 fd5b 	bl	80012d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800081a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000820:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	480b      	ldr	r0, [pc, #44]	; (8000860 <MX_GPIO_Init+0xc8>)
 8000832:	f000 fba3 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000836:	2320      	movs	r3, #32
 8000838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000850:	f000 fb94 	bl	8000f7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000854:	bf00      	nop
 8000856:	3728      	adds	r7, #40	; 0x28
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40021000 	.word	0x40021000
 8000860:	48000800 	.word	0x48000800

08000864 <StartSender1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSender1 */
void StartSender1(void *argument)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  BaseType_t osStatus_t;
  const TickType_t xTicksToWait = pdMS_TO_TICKS( 100 );
 800086c:	2364      	movs	r3, #100	; 0x64
 800086e:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	osStatus_t = osMessageQueuePut( myQueue01Handle, argument, 0, xTicksToWait);
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <StartSender1+0x2c>)
 8000872:	6818      	ldr	r0, [r3, #0]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2200      	movs	r2, #0
 8000878:	6879      	ldr	r1, [r7, #4]
 800087a:	f003 f9af 	bl	8003bdc <osMessageQueuePut>
 800087e:	60b8      	str	r0, [r7, #8]
    if( osStatus_t != osOK )
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d0f4      	beq.n	8000870 <StartSender1+0xc>
	  {
	  /* The send operation could not complete, even after waiting for 100ms.
	  This must be an error as the receiving task should make space in the
	  queue as soon as both sending tasks are in the Blocked state. */
	  printf("%s", "Could not send to the queue.\r\n");
 8000886:	4803      	ldr	r0, [pc, #12]	; (8000894 <StartSender1+0x30>)
 8000888:	f006 fa1c 	bl	8006cc4 <puts>
	osStatus_t = osMessageQueuePut( myQueue01Handle, argument, 0, xTicksToWait);
 800088c:	e7f0      	b.n	8000870 <StartSender1+0xc>
 800088e:	bf00      	nop
 8000890:	20000124 	.word	0x20000124
 8000894:	080079bc 	.word	0x080079bc

08000898 <StartSender2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSender2 */
void StartSender2(void *argument)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSender2 */
  /* Infinite loop */
  BaseType_t osStatus_t;
  const TickType_t xTicksToWait = pdMS_TO_TICKS( 100 );
 80008a0:	2364      	movs	r3, #100	; 0x64
 80008a2:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	osStatus_t = osMessageQueuePut( myQueue01Handle, argument, 0, xTicksToWait);
 80008a4:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <StartSender2+0x2c>)
 80008a6:	6818      	ldr	r0, [r3, #0]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	2200      	movs	r2, #0
 80008ac:	6879      	ldr	r1, [r7, #4]
 80008ae:	f003 f995 	bl	8003bdc <osMessageQueuePut>
 80008b2:	60b8      	str	r0, [r7, #8]
    if( osStatus_t != osOK )
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d0f4      	beq.n	80008a4 <StartSender2+0xc>
	  {
	    /* The send operation could not complete, even after waiting for 100ms.
	  	This must be an error as the receiving task should make space in the
	  	queue as soon as both sending tasks are in the Blocked state. */
	  	printf("%s", "Could not send to the queue.\r\n");
 80008ba:	4803      	ldr	r0, [pc, #12]	; (80008c8 <StartSender2+0x30>)
 80008bc:	f006 fa02 	bl	8006cc4 <puts>
	osStatus_t = osMessageQueuePut( myQueue01Handle, argument, 0, xTicksToWait);
 80008c0:	e7f0      	b.n	80008a4 <StartSender2+0xc>
 80008c2:	bf00      	nop
 80008c4:	20000124 	.word	0x20000124
 80008c8:	080079bc 	.word	0x080079bc

080008cc <StartReceiver>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiver */
void StartReceiver(void *argument)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  Data_t xReceivedStructure;
  BaseType_t osStatus_t;
  for(;;)
  {
    if( osMessageQueueGetCount(myQueue01Handle) != 3 )
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <StartReceiver+0x60>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f003 fa3d 	bl	8003d58 <osMessageQueueGetCount>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b03      	cmp	r3, #3
 80008e2:	d002      	beq.n	80008ea <StartReceiver+0x1e>
	  {
	    printf("Queue should have been full!\r\n");
 80008e4:	4812      	ldr	r0, [pc, #72]	; (8000930 <StartReceiver+0x64>)
 80008e6:	f006 f9ed 	bl	8006cc4 <puts>
	  }
    osStatus_t = osMessageQueueGet(myQueue01Handle, &(xReceivedStructure), 0, 0);
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <StartReceiver+0x60>)
 80008ec:	6818      	ldr	r0, [r3, #0]
 80008ee:	f107 0108 	add.w	r1, r7, #8
 80008f2:	2300      	movs	r3, #0
 80008f4:	2200      	movs	r2, #0
 80008f6:	f003 f9d1 	bl	8003c9c <osMessageQueueGet>
 80008fa:	60f8      	str	r0, [r7, #12]
    if( osStatus_t == osOK )
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d110      	bne.n	8000924 <StartReceiver+0x58>
      {
        /* Data was successfully received from the queue, print out the received
        value and the source of the value. */
        if( xReceivedStructure.eDataSource == eSender1 )
 8000902:	7a7b      	ldrb	r3, [r7, #9]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d106      	bne.n	8000916 <StartReceiver+0x4a>
          {
            printf("%s%d\n", "From Sender 1 = ", xReceivedStructure.ucValue );
 8000908:	7a3b      	ldrb	r3, [r7, #8]
 800090a:	461a      	mov	r2, r3
 800090c:	4909      	ldr	r1, [pc, #36]	; (8000934 <StartReceiver+0x68>)
 800090e:	480a      	ldr	r0, [pc, #40]	; (8000938 <StartReceiver+0x6c>)
 8000910:	f006 f952 	bl	8006bb8 <iprintf>
 8000914:	e7de      	b.n	80008d4 <StartReceiver+0x8>
          }
        else
          {
        	printf("%s%d\n", "From Sender 2 = ", xReceivedStructure.ucValue );
 8000916:	7a3b      	ldrb	r3, [r7, #8]
 8000918:	461a      	mov	r2, r3
 800091a:	4908      	ldr	r1, [pc, #32]	; (800093c <StartReceiver+0x70>)
 800091c:	4806      	ldr	r0, [pc, #24]	; (8000938 <StartReceiver+0x6c>)
 800091e:	f006 f94b 	bl	8006bb8 <iprintf>
 8000922:	e7d7      	b.n	80008d4 <StartReceiver+0x8>
      }
    else
      {
        /* Nothing was received from the queue. This must be an error as this
        task should only run when the queue is full. */
    	printf("%s", "Could not receive from the queue.\r\n" );
 8000924:	4806      	ldr	r0, [pc, #24]	; (8000940 <StartReceiver+0x74>)
 8000926:	f006 f9cd 	bl	8006cc4 <puts>
    if( osMessageQueueGetCount(myQueue01Handle) != 3 )
 800092a:	e7d3      	b.n	80008d4 <StartReceiver+0x8>
 800092c:	20000124 	.word	0x20000124
 8000930:	080079dc 	.word	0x080079dc
 8000934:	080079fc 	.word	0x080079fc
 8000938:	08007a10 	.word	0x08007a10
 800093c:	08007a18 	.word	0x08007a18
 8000940:	08007a2c 	.word	0x08007a2c

08000944 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d101      	bne.n	800095a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000956:	f000 fa0f 	bl	8000d78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40001000 	.word	0x40001000

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <HAL_MspInit+0x4c>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097e:	4a10      	ldr	r2, [pc, #64]	; (80009c0 <HAL_MspInit+0x4c>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6613      	str	r3, [r2, #96]	; 0x60
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <HAL_MspInit+0x4c>)
 8000988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <HAL_MspInit+0x4c>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <HAL_MspInit+0x4c>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099c:	6593      	str	r3, [r2, #88]	; 0x58
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <HAL_MspInit+0x4c>)
 80009a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	210f      	movs	r1, #15
 80009ae:	f06f 0001 	mvn.w	r0, #1
 80009b2:	f000 fab9 	bl	8000f28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40021000 	.word	0x40021000

080009c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b0ac      	sub	sp, #176	; 0xb0
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2288      	movs	r2, #136	; 0x88
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f006 f84a 	bl	8006a7e <memset>
  if(huart->Instance==USART2)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a21      	ldr	r2, [pc, #132]	; (8000a74 <HAL_UART_MspInit+0xb0>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d13b      	bne.n	8000a6c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4618      	mov	r0, r3
 8000a02:	f001 fb13 	bl	800202c <HAL_RCCEx_PeriphCLKConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a0c:	f7ff ffac 	bl	8000968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a10:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <HAL_UART_MspInit+0xb4>)
 8000a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a14:	4a18      	ldr	r2, [pc, #96]	; (8000a78 <HAL_UART_MspInit+0xb4>)
 8000a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <HAL_UART_MspInit+0xb4>)
 8000a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a28:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <HAL_UART_MspInit+0xb4>)
 8000a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2c:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <HAL_UART_MspInit+0xb4>)
 8000a2e:	f043 0301 	orr.w	r3, r3, #1
 8000a32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a34:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <HAL_UART_MspInit+0xb4>)
 8000a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a40:	230c      	movs	r3, #12
 8000a42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a52:	2303      	movs	r3, #3
 8000a54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a58:	2307      	movs	r3, #7
 8000a5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a62:	4619      	mov	r1, r3
 8000a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a68:	f000 fa88 	bl	8000f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a6c:	bf00      	nop
 8000a6e:	37b0      	adds	r7, #176	; 0xb0
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40004400 	.word	0x40004400
 8000a78:	40021000 	.word	0x40021000

08000a7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08e      	sub	sp, #56	; 0x38
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a84:	2300      	movs	r3, #0
 8000a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a8a:	4b34      	ldr	r3, [pc, #208]	; (8000b5c <HAL_InitTick+0xe0>)
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8e:	4a33      	ldr	r2, [pc, #204]	; (8000b5c <HAL_InitTick+0xe0>)
 8000a90:	f043 0310 	orr.w	r3, r3, #16
 8000a94:	6593      	str	r3, [r2, #88]	; 0x58
 8000a96:	4b31      	ldr	r3, [pc, #196]	; (8000b5c <HAL_InitTick+0xe0>)
 8000a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9a:	f003 0310 	and.w	r3, r3, #16
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aa2:	f107 0210 	add.w	r2, r7, #16
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f001 fa2b 	bl	8001f08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ab2:	6a3b      	ldr	r3, [r7, #32]
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d103      	bne.n	8000ac4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000abc:	f001 f9f8 	bl	8001eb0 <HAL_RCC_GetPCLK1Freq>
 8000ac0:	6378      	str	r0, [r7, #52]	; 0x34
 8000ac2:	e004      	b.n	8000ace <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ac4:	f001 f9f4 	bl	8001eb0 <HAL_RCC_GetPCLK1Freq>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad0:	4a23      	ldr	r2, [pc, #140]	; (8000b60 <HAL_InitTick+0xe4>)
 8000ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad6:	0c9b      	lsrs	r3, r3, #18
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000adc:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <HAL_InitTick+0xe8>)
 8000ade:	4a22      	ldr	r2, [pc, #136]	; (8000b68 <HAL_InitTick+0xec>)
 8000ae0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ae2:	4b20      	ldr	r3, [pc, #128]	; (8000b64 <HAL_InitTick+0xe8>)
 8000ae4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ae8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000aea:	4a1e      	ldr	r2, [pc, #120]	; (8000b64 <HAL_InitTick+0xe8>)
 8000aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aee:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000af0:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <HAL_InitTick+0xe8>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af6:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <HAL_InitTick+0xe8>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afc:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <HAL_InitTick+0xe8>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b02:	4818      	ldr	r0, [pc, #96]	; (8000b64 <HAL_InitTick+0xe8>)
 8000b04:	f001 ff4e 	bl	80029a4 <HAL_TIM_Base_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d11b      	bne.n	8000b4e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b16:	4813      	ldr	r0, [pc, #76]	; (8000b64 <HAL_InitTick+0xe8>)
 8000b18:	f001 ffa6 	bl	8002a68 <HAL_TIM_Base_Start_IT>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d111      	bne.n	8000b4e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b2a:	2036      	movs	r0, #54	; 0x36
 8000b2c:	f000 fa18 	bl	8000f60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b0f      	cmp	r3, #15
 8000b34:	d808      	bhi.n	8000b48 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b36:	2200      	movs	r2, #0
 8000b38:	6879      	ldr	r1, [r7, #4]
 8000b3a:	2036      	movs	r0, #54	; 0x36
 8000b3c:	f000 f9f4 	bl	8000f28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b40:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <HAL_InitTick+0xf0>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6013      	str	r3, [r2, #0]
 8000b46:	e002      	b.n	8000b4e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3738      	adds	r7, #56	; 0x38
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	431bde83 	.word	0x431bde83
 8000b64:	20000128 	.word	0x20000128
 8000b68:	40001000 	.word	0x40001000
 8000b6c:	20000008 	.word	0x20000008

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <NMI_Handler+0x4>

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <TIM6_DAC_IRQHandler+0x10>)
 8000ba2:	f001 ffd1 	bl	8002b48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000128 	.word	0x20000128

08000bb0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	e00a      	b.n	8000bd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bc2:	f3af 8000 	nop.w
 8000bc6:	4601      	mov	r1, r0
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	60ba      	str	r2, [r7, #8]
 8000bce:	b2ca      	uxtb	r2, r1
 8000bd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	dbf0      	blt.n	8000bc2 <_read+0x12>
  }

  return len;
 8000be0:	687b      	ldr	r3, [r7, #4]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c12:	605a      	str	r2, [r3, #4]
  return 0;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <_isatty>:

int _isatty(int file)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c2a:	2301      	movs	r3, #1
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c5c:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <_sbrk+0x5c>)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <_sbrk+0x60>)
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <_sbrk+0x64>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <_sbrk+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d207      	bcs.n	8000c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c84:	f005 fdca 	bl	800681c <__errno>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c92:	e009      	b.n	8000ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <_sbrk+0x64>)
 8000ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20018000 	.word	0x20018000
 8000cb4:	00000400 	.word	0x00000400
 8000cb8:	20000174 	.word	0x20000174
 8000cbc:	20002328 	.word	0x20002328

08000cc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <SystemInit+0x20>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <SystemInit+0x20>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ce8:	f7ff ffea 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cec:	480c      	ldr	r0, [pc, #48]	; (8000d20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cee:	490d      	ldr	r1, [pc, #52]	; (8000d24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <LoopForever+0xe>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d04:	4c0a      	ldr	r4, [pc, #40]	; (8000d30 <LoopForever+0x16>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d12:	f005 fe7f 	bl	8006a14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d16:	f7ff fc73 	bl	8000600 <main>

08000d1a <LoopForever>:

LoopForever:
    b LoopForever
 8000d1a:	e7fe      	b.n	8000d1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d28:	08007bdc 	.word	0x08007bdc
  ldr r2, =_sbss
 8000d2c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d30:	20002324 	.word	0x20002324

08000d34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC1_2_IRQHandler>
	...

08000d38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <HAL_Init+0x3c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <HAL_Init+0x3c>)
 8000d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4e:	2003      	movs	r0, #3
 8000d50:	f000 f8df 	bl	8000f12 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d54:	200f      	movs	r0, #15
 8000d56:	f7ff fe91 	bl	8000a7c <HAL_InitTick>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d002      	beq.n	8000d66 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	e001      	b.n	8000d6a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d66:	f7ff fe05 	bl	8000974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40022000 	.word	0x40022000

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	2000000c 	.word	0x2000000c
 8000d9c:	20000178 	.word	0x20000178

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000178 	.word	0x20000178

08000db8 <__NVIC_SetPriorityGrouping>:
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_GetPriorityGrouping>:
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_EnableIRQ>:
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	db0b      	blt.n	8000e46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f003 021f 	and.w	r2, r3, #31
 8000e34:	4907      	ldr	r1, [pc, #28]	; (8000e54 <__NVIC_EnableIRQ+0x38>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000e100 	.word	0xe000e100

08000e58 <__NVIC_SetPriority>:
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	db0a      	blt.n	8000e82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	490c      	ldr	r1, [pc, #48]	; (8000ea4 <__NVIC_SetPriority+0x4c>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	0112      	lsls	r2, r2, #4
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e80:	e00a      	b.n	8000e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <__NVIC_SetPriority+0x50>)
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	f003 030f 	and.w	r3, r3, #15
 8000e8e:	3b04      	subs	r3, #4
 8000e90:	0112      	lsls	r2, r2, #4
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	440b      	add	r3, r1
 8000e96:	761a      	strb	r2, [r3, #24]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000e100 	.word	0xe000e100
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <NVIC_EncodePriority>:
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f1c3 0307 	rsb	r3, r3, #7
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	bf28      	it	cs
 8000eca:	2304      	movcs	r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	2b06      	cmp	r3, #6
 8000ed4:	d902      	bls.n	8000edc <NVIC_EncodePriority+0x30>
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3b03      	subs	r3, #3
 8000eda:	e000      	b.n	8000ede <NVIC_EncodePriority+0x32>
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43da      	mvns	r2, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	401a      	ands	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	43d9      	mvns	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	4313      	orrs	r3, r2
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3724      	adds	r7, #36	; 0x24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ff4c 	bl	8000db8 <__NVIC_SetPriorityGrouping>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f3a:	f7ff ff61 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8000f3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	68b9      	ldr	r1, [r7, #8]
 8000f44:	6978      	ldr	r0, [r7, #20]
 8000f46:	f7ff ffb1 	bl	8000eac <NVIC_EncodePriority>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f50:	4611      	mov	r1, r2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ff80 	bl	8000e58 <__NVIC_SetPriority>
}
 8000f58:	bf00      	nop
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ff54 	bl	8000e1c <__NVIC_EnableIRQ>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f8a:	e17f      	b.n	800128c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	2101      	movs	r1, #1
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	fa01 f303 	lsl.w	r3, r1, r3
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 8171 	beq.w	8001286 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d005      	beq.n	8000fbc <HAL_GPIO_Init+0x40>
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d130      	bne.n	800101e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	68da      	ldr	r2, [r3, #12]
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	091b      	lsrs	r3, r3, #4
 8001008:	f003 0201 	and.w	r2, r3, #1
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	2b03      	cmp	r3, #3
 8001028:	d118      	bne.n	800105c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001030:	2201      	movs	r2, #1
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	08db      	lsrs	r3, r3, #3
 8001046:	f003 0201 	and.w	r2, r3, #1
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b03      	cmp	r3, #3
 8001066:	d017      	beq.n	8001098 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d123      	bne.n	80010ec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	08da      	lsrs	r2, r3, #3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3208      	adds	r2, #8
 80010ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	f003 0307 	and.w	r3, r3, #7
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	220f      	movs	r2, #15
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	691a      	ldr	r2, [r3, #16]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	08da      	lsrs	r2, r3, #3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3208      	adds	r2, #8
 80010e6:	6939      	ldr	r1, [r7, #16]
 80010e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	2203      	movs	r2, #3
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0203 	and.w	r2, r3, #3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001128:	2b00      	cmp	r3, #0
 800112a:	f000 80ac 	beq.w	8001286 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	4b5f      	ldr	r3, [pc, #380]	; (80012ac <HAL_GPIO_Init+0x330>)
 8001130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001132:	4a5e      	ldr	r2, [pc, #376]	; (80012ac <HAL_GPIO_Init+0x330>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6613      	str	r3, [r2, #96]	; 0x60
 800113a:	4b5c      	ldr	r3, [pc, #368]	; (80012ac <HAL_GPIO_Init+0x330>)
 800113c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001146:	4a5a      	ldr	r2, [pc, #360]	; (80012b0 <HAL_GPIO_Init+0x334>)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	3302      	adds	r3, #2
 800114e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001152:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	220f      	movs	r2, #15
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001170:	d025      	beq.n	80011be <HAL_GPIO_Init+0x242>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a4f      	ldr	r2, [pc, #316]	; (80012b4 <HAL_GPIO_Init+0x338>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d01f      	beq.n	80011ba <HAL_GPIO_Init+0x23e>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a4e      	ldr	r2, [pc, #312]	; (80012b8 <HAL_GPIO_Init+0x33c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d019      	beq.n	80011b6 <HAL_GPIO_Init+0x23a>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4d      	ldr	r2, [pc, #308]	; (80012bc <HAL_GPIO_Init+0x340>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d013      	beq.n	80011b2 <HAL_GPIO_Init+0x236>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4c      	ldr	r2, [pc, #304]	; (80012c0 <HAL_GPIO_Init+0x344>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d00d      	beq.n	80011ae <HAL_GPIO_Init+0x232>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4b      	ldr	r2, [pc, #300]	; (80012c4 <HAL_GPIO_Init+0x348>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d007      	beq.n	80011aa <HAL_GPIO_Init+0x22e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4a      	ldr	r2, [pc, #296]	; (80012c8 <HAL_GPIO_Init+0x34c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d101      	bne.n	80011a6 <HAL_GPIO_Init+0x22a>
 80011a2:	2306      	movs	r3, #6
 80011a4:	e00c      	b.n	80011c0 <HAL_GPIO_Init+0x244>
 80011a6:	2307      	movs	r3, #7
 80011a8:	e00a      	b.n	80011c0 <HAL_GPIO_Init+0x244>
 80011aa:	2305      	movs	r3, #5
 80011ac:	e008      	b.n	80011c0 <HAL_GPIO_Init+0x244>
 80011ae:	2304      	movs	r3, #4
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x244>
 80011b2:	2303      	movs	r3, #3
 80011b4:	e004      	b.n	80011c0 <HAL_GPIO_Init+0x244>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e002      	b.n	80011c0 <HAL_GPIO_Init+0x244>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <HAL_GPIO_Init+0x244>
 80011be:	2300      	movs	r3, #0
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	f002 0203 	and.w	r2, r2, #3
 80011c6:	0092      	lsls	r2, r2, #2
 80011c8:	4093      	lsls	r3, r2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011d0:	4937      	ldr	r1, [pc, #220]	; (80012b0 <HAL_GPIO_Init+0x334>)
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	089b      	lsrs	r3, r3, #2
 80011d6:	3302      	adds	r3, #2
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011de:	4b3b      	ldr	r3, [pc, #236]	; (80012cc <HAL_GPIO_Init+0x350>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001202:	4a32      	ldr	r2, [pc, #200]	; (80012cc <HAL_GPIO_Init+0x350>)
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001208:	4b30      	ldr	r3, [pc, #192]	; (80012cc <HAL_GPIO_Init+0x350>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	43db      	mvns	r3, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800122c:	4a27      	ldr	r2, [pc, #156]	; (80012cc <HAL_GPIO_Init+0x350>)
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001232:	4b26      	ldr	r3, [pc, #152]	; (80012cc <HAL_GPIO_Init+0x350>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	43db      	mvns	r3, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4313      	orrs	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001256:	4a1d      	ldr	r2, [pc, #116]	; (80012cc <HAL_GPIO_Init+0x350>)
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <HAL_GPIO_Init+0x350>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	43db      	mvns	r3, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001280:	4a12      	ldr	r2, [pc, #72]	; (80012cc <HAL_GPIO_Init+0x350>)
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	3301      	adds	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa22 f303 	lsr.w	r3, r2, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	f47f ae78 	bne.w	8000f8c <HAL_GPIO_Init+0x10>
  }
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	371c      	adds	r7, #28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010000 	.word	0x40010000
 80012b4:	48000400 	.word	0x48000400
 80012b8:	48000800 	.word	0x48000800
 80012bc:	48000c00 	.word	0x48000c00
 80012c0:	48001000 	.word	0x48001000
 80012c4:	48001400 	.word	0x48001400
 80012c8:	48001800 	.word	0x48001800
 80012cc:	40010400 	.word	0x40010400

080012d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	807b      	strh	r3, [r7, #2]
 80012dc:	4613      	mov	r3, r2
 80012de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e0:	787b      	ldrb	r3, [r7, #1]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012ec:	e002      	b.n	80012f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ee:	887a      	ldrh	r2, [r7, #2]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <HAL_PWREx_GetVoltageRange+0x18>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40007000 	.word	0x40007000

0800131c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800132a:	d130      	bne.n	800138e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800132c:	4b23      	ldr	r3, [pc, #140]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001338:	d038      	beq.n	80013ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800133a:	4b20      	ldr	r3, [pc, #128]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001342:	4a1e      	ldr	r2, [pc, #120]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001344:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001348:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800134a:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2232      	movs	r2, #50	; 0x32
 8001350:	fb02 f303 	mul.w	r3, r2, r3
 8001354:	4a1b      	ldr	r2, [pc, #108]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001356:	fba2 2303 	umull	r2, r3, r2, r3
 800135a:	0c9b      	lsrs	r3, r3, #18
 800135c:	3301      	adds	r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001360:	e002      	b.n	8001368 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	3b01      	subs	r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001374:	d102      	bne.n	800137c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f2      	bne.n	8001362 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001388:	d110      	bne.n	80013ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e00f      	b.n	80013ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800139a:	d007      	beq.n	80013ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013a4:	4a05      	ldr	r2, [pc, #20]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40007000 	.word	0x40007000
 80013c0:	20000004 	.word	0x20000004
 80013c4:	431bde83 	.word	0x431bde83

080013c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e3ca      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013da:	4b97      	ldr	r3, [pc, #604]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013e4:	4b94      	ldr	r3, [pc, #592]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 80e4 	beq.w	80015c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d007      	beq.n	8001412 <HAL_RCC_OscConfig+0x4a>
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	2b0c      	cmp	r3, #12
 8001406:	f040 808b 	bne.w	8001520 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	2b01      	cmp	r3, #1
 800140e:	f040 8087 	bne.w	8001520 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001412:	4b89      	ldr	r3, [pc, #548]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d005      	beq.n	800142a <HAL_RCC_OscConfig+0x62>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e3a2      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a1a      	ldr	r2, [r3, #32]
 800142e:	4b82      	ldr	r3, [pc, #520]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b00      	cmp	r3, #0
 8001438:	d004      	beq.n	8001444 <HAL_RCC_OscConfig+0x7c>
 800143a:	4b7f      	ldr	r3, [pc, #508]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001442:	e005      	b.n	8001450 <HAL_RCC_OscConfig+0x88>
 8001444:	4b7c      	ldr	r3, [pc, #496]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800144a:	091b      	lsrs	r3, r3, #4
 800144c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001450:	4293      	cmp	r3, r2
 8001452:	d223      	bcs.n	800149c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	4618      	mov	r0, r3
 800145a:	f000 fd87 	bl	8001f6c <RCC_SetFlashLatencyFromMSIRange>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e383      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001468:	4b73      	ldr	r3, [pc, #460]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a72      	ldr	r2, [pc, #456]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800146e:	f043 0308 	orr.w	r3, r3, #8
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b70      	ldr	r3, [pc, #448]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	496d      	ldr	r1, [pc, #436]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001482:	4313      	orrs	r3, r2
 8001484:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001486:	4b6c      	ldr	r3, [pc, #432]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	021b      	lsls	r3, r3, #8
 8001494:	4968      	ldr	r1, [pc, #416]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001496:	4313      	orrs	r3, r2
 8001498:	604b      	str	r3, [r1, #4]
 800149a:	e025      	b.n	80014e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800149c:	4b66      	ldr	r3, [pc, #408]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a65      	ldr	r2, [pc, #404]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 80014a2:	f043 0308 	orr.w	r3, r3, #8
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b63      	ldr	r3, [pc, #396]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	4960      	ldr	r1, [pc, #384]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ba:	4b5f      	ldr	r3, [pc, #380]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	021b      	lsls	r3, r3, #8
 80014c8:	495b      	ldr	r1, [pc, #364]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d109      	bne.n	80014e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 fd47 	bl	8001f6c <RCC_SetFlashLatencyFromMSIRange>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e343      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014e8:	f000 fc4a 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 80014ec:	4602      	mov	r2, r0
 80014ee:	4b52      	ldr	r3, [pc, #328]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	f003 030f 	and.w	r3, r3, #15
 80014f8:	4950      	ldr	r1, [pc, #320]	; (800163c <HAL_RCC_OscConfig+0x274>)
 80014fa:	5ccb      	ldrb	r3, [r1, r3]
 80014fc:	f003 031f 	and.w	r3, r3, #31
 8001500:	fa22 f303 	lsr.w	r3, r2, r3
 8001504:	4a4e      	ldr	r2, [pc, #312]	; (8001640 <HAL_RCC_OscConfig+0x278>)
 8001506:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001508:	4b4e      	ldr	r3, [pc, #312]	; (8001644 <HAL_RCC_OscConfig+0x27c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fab5 	bl	8000a7c <HAL_InitTick>
 8001512:	4603      	mov	r3, r0
 8001514:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d052      	beq.n	80015c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	e327      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d032      	beq.n	800158e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001528:	4b43      	ldr	r3, [pc, #268]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a42      	ldr	r2, [pc, #264]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001534:	f7ff fc34 	bl	8000da0 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800153c:	f7ff fc30 	bl	8000da0 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e310      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800154e:	4b3a      	ldr	r3, [pc, #232]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800155a:	4b37      	ldr	r3, [pc, #220]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a36      	ldr	r2, [pc, #216]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001560:	f043 0308 	orr.w	r3, r3, #8
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	4b34      	ldr	r3, [pc, #208]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	4931      	ldr	r1, [pc, #196]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001574:	4313      	orrs	r3, r2
 8001576:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001578:	4b2f      	ldr	r3, [pc, #188]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	492c      	ldr	r1, [pc, #176]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]
 800158c:	e01a      	b.n	80015c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800158e:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a29      	ldr	r2, [pc, #164]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001594:	f023 0301 	bic.w	r3, r3, #1
 8001598:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800159a:	f7ff fc01 	bl	8000da0 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015a2:	f7ff fbfd 	bl	8000da0 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e2dd      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015b4:	4b20      	ldr	r3, [pc, #128]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f0      	bne.n	80015a2 <HAL_RCC_OscConfig+0x1da>
 80015c0:	e000      	b.n	80015c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d074      	beq.n	80016ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	2b08      	cmp	r3, #8
 80015d4:	d005      	beq.n	80015e2 <HAL_RCC_OscConfig+0x21a>
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	2b0c      	cmp	r3, #12
 80015da:	d10e      	bne.n	80015fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d10b      	bne.n	80015fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d064      	beq.n	80016b8 <HAL_RCC_OscConfig+0x2f0>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d160      	bne.n	80016b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e2ba      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001602:	d106      	bne.n	8001612 <HAL_RCC_OscConfig+0x24a>
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0b      	ldr	r2, [pc, #44]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800160a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	e026      	b.n	8001660 <HAL_RCC_OscConfig+0x298>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800161a:	d115      	bne.n	8001648 <HAL_RCC_OscConfig+0x280>
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a05      	ldr	r2, [pc, #20]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001622:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a02      	ldr	r2, [pc, #8]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800162e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	e014      	b.n	8001660 <HAL_RCC_OscConfig+0x298>
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000
 800163c:	08007aec 	.word	0x08007aec
 8001640:	20000004 	.word	0x20000004
 8001644:	20000008 	.word	0x20000008
 8001648:	4ba0      	ldr	r3, [pc, #640]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a9f      	ldr	r2, [pc, #636]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 800164e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	4b9d      	ldr	r3, [pc, #628]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a9c      	ldr	r2, [pc, #624]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 800165a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800165e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d013      	beq.n	8001690 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff fb9a 	bl	8000da0 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001670:	f7ff fb96 	bl	8000da0 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	; 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e276      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001682:	4b92      	ldr	r3, [pc, #584]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x2a8>
 800168e:	e014      	b.n	80016ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001690:	f7ff fb86 	bl	8000da0 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff fb82 	bl	8000da0 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	; 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e262      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016aa:	4b88      	ldr	r3, [pc, #544]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x2d0>
 80016b6:	e000      	b.n	80016ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d060      	beq.n	8001788 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_OscConfig+0x310>
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	2b0c      	cmp	r3, #12
 80016d0:	d119      	bne.n	8001706 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d116      	bne.n	8001706 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016d8:	4b7c      	ldr	r3, [pc, #496]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_OscConfig+0x328>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e23f      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f0:	4b76      	ldr	r3, [pc, #472]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	061b      	lsls	r3, r3, #24
 80016fe:	4973      	ldr	r1, [pc, #460]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001700:	4313      	orrs	r3, r2
 8001702:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001704:	e040      	b.n	8001788 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d023      	beq.n	8001756 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800170e:	4b6f      	ldr	r3, [pc, #444]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a6e      	ldr	r2, [pc, #440]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171a:	f7ff fb41 	bl	8000da0 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001722:	f7ff fb3d 	bl	8000da0 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e21d      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001734:	4b65      	ldr	r3, [pc, #404]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001740:	4b62      	ldr	r3, [pc, #392]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	061b      	lsls	r3, r3, #24
 800174e:	495f      	ldr	r1, [pc, #380]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
 8001754:	e018      	b.n	8001788 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001756:	4b5d      	ldr	r3, [pc, #372]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a5c      	ldr	r2, [pc, #368]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 800175c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001762:	f7ff fb1d 	bl	8000da0 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800176a:	f7ff fb19 	bl	8000da0 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e1f9      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800177c:	4b53      	ldr	r3, [pc, #332]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1f0      	bne.n	800176a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	2b00      	cmp	r3, #0
 8001792:	d03c      	beq.n	800180e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d01c      	beq.n	80017d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179c:	4b4b      	ldr	r3, [pc, #300]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 800179e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017a2:	4a4a      	ldr	r2, [pc, #296]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ac:	f7ff faf8 	bl	8000da0 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b4:	f7ff faf4 	bl	8000da0 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e1d4      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017c6:	4b41      	ldr	r3, [pc, #260]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 80017c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0ef      	beq.n	80017b4 <HAL_RCC_OscConfig+0x3ec>
 80017d4:	e01b      	b.n	800180e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d6:	4b3d      	ldr	r3, [pc, #244]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 80017d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017dc:	4a3b      	ldr	r2, [pc, #236]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e6:	f7ff fadb 	bl	8000da0 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ee:	f7ff fad7 	bl	8000da0 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e1b7      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001800:	4b32      	ldr	r3, [pc, #200]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1ef      	bne.n	80017ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 80a6 	beq.w	8001968 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181c:	2300      	movs	r3, #0
 800181e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001820:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10d      	bne.n	8001848 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800182c:	4b27      	ldr	r3, [pc, #156]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 800182e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001830:	4a26      	ldr	r2, [pc, #152]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001836:	6593      	str	r3, [r2, #88]	; 0x58
 8001838:	4b24      	ldr	r3, [pc, #144]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 800183a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001844:	2301      	movs	r3, #1
 8001846:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001848:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <HAL_RCC_OscConfig+0x508>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001850:	2b00      	cmp	r3, #0
 8001852:	d118      	bne.n	8001886 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001854:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <HAL_RCC_OscConfig+0x508>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a1d      	ldr	r2, [pc, #116]	; (80018d0 <HAL_RCC_OscConfig+0x508>)
 800185a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001860:	f7ff fa9e 	bl	8000da0 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001868:	f7ff fa9a 	bl	8000da0 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e17a      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <HAL_RCC_OscConfig+0x508>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d108      	bne.n	80018a0 <HAL_RCC_OscConfig+0x4d8>
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001894:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800189e:	e029      	b.n	80018f4 <HAL_RCC_OscConfig+0x52c>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b05      	cmp	r3, #5
 80018a6:	d115      	bne.n	80018d4 <HAL_RCC_OscConfig+0x50c>
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 80018aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ae:	4a07      	ldr	r2, [pc, #28]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 80018ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018be:	4a03      	ldr	r2, [pc, #12]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018c8:	e014      	b.n	80018f4 <HAL_RCC_OscConfig+0x52c>
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40007000 	.word	0x40007000
 80018d4:	4b9c      	ldr	r3, [pc, #624]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 80018d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018da:	4a9b      	ldr	r2, [pc, #620]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 80018dc:	f023 0301 	bic.w	r3, r3, #1
 80018e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018e4:	4b98      	ldr	r3, [pc, #608]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 80018e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ea:	4a97      	ldr	r2, [pc, #604]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 80018ec:	f023 0304 	bic.w	r3, r3, #4
 80018f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d016      	beq.n	800192a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fc:	f7ff fa50 	bl	8000da0 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001902:	e00a      	b.n	800191a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001904:	f7ff fa4c 	bl	8000da0 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e12a      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800191a:	4b8b      	ldr	r3, [pc, #556]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 800191c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0ed      	beq.n	8001904 <HAL_RCC_OscConfig+0x53c>
 8001928:	e015      	b.n	8001956 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192a:	f7ff fa39 	bl	8000da0 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001930:	e00a      	b.n	8001948 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001932:	f7ff fa35 	bl	8000da0 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001940:	4293      	cmp	r3, r2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e113      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001948:	4b7f      	ldr	r3, [pc, #508]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 800194a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1ed      	bne.n	8001932 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001956:	7ffb      	ldrb	r3, [r7, #31]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d105      	bne.n	8001968 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800195c:	4b7a      	ldr	r3, [pc, #488]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 800195e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001960:	4a79      	ldr	r2, [pc, #484]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001966:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80fe 	beq.w	8001b6e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	2b02      	cmp	r3, #2
 8001978:	f040 80d0 	bne.w	8001b1c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800197c:	4b72      	ldr	r3, [pc, #456]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f003 0203 	and.w	r2, r3, #3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198c:	429a      	cmp	r2, r3
 800198e:	d130      	bne.n	80019f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	3b01      	subs	r3, #1
 800199c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800199e:	429a      	cmp	r2, r3
 80019a0:	d127      	bne.n	80019f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d11f      	bne.n	80019f2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019bc:	2a07      	cmp	r2, #7
 80019be:	bf14      	ite	ne
 80019c0:	2201      	movne	r2, #1
 80019c2:	2200      	moveq	r2, #0
 80019c4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d113      	bne.n	80019f2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d4:	085b      	lsrs	r3, r3, #1
 80019d6:	3b01      	subs	r3, #1
 80019d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019da:	429a      	cmp	r2, r3
 80019dc:	d109      	bne.n	80019f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	085b      	lsrs	r3, r3, #1
 80019ea:	3b01      	subs	r3, #1
 80019ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d06e      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	2b0c      	cmp	r3, #12
 80019f6:	d069      	beq.n	8001acc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019f8:	4b53      	ldr	r3, [pc, #332]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d105      	bne.n	8001a10 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a04:	4b50      	ldr	r3, [pc, #320]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e0ad      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a14:	4b4c      	ldr	r3, [pc, #304]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a4b      	ldr	r2, [pc, #300]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a1e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a20:	f7ff f9be 	bl	8000da0 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a28:	f7ff f9ba 	bl	8000da0 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e09a      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a3a:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a46:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	4b40      	ldr	r3, [pc, #256]	; (8001b4c <HAL_RCC_OscConfig+0x784>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a56:	3a01      	subs	r2, #1
 8001a58:	0112      	lsls	r2, r2, #4
 8001a5a:	4311      	orrs	r1, r2
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a60:	0212      	lsls	r2, r2, #8
 8001a62:	4311      	orrs	r1, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a68:	0852      	lsrs	r2, r2, #1
 8001a6a:	3a01      	subs	r2, #1
 8001a6c:	0552      	lsls	r2, r2, #21
 8001a6e:	4311      	orrs	r1, r2
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a74:	0852      	lsrs	r2, r2, #1
 8001a76:	3a01      	subs	r2, #1
 8001a78:	0652      	lsls	r2, r2, #25
 8001a7a:	4311      	orrs	r1, r2
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a80:	0912      	lsrs	r2, r2, #4
 8001a82:	0452      	lsls	r2, r2, #17
 8001a84:	430a      	orrs	r2, r1
 8001a86:	4930      	ldr	r1, [pc, #192]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a8c:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a2d      	ldr	r2, [pc, #180]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a98:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4a2a      	ldr	r2, [pc, #168]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aa2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001aa4:	f7ff f97c 	bl	8000da0 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aac:	f7ff f978 	bl	8000da0 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e058      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001abe:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aca:	e050      	b.n	8001b6e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e04f      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d148      	bne.n	8001b6e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001adc:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a19      	ldr	r2, [pc, #100]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ae8:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	4a16      	ldr	r2, [pc, #88]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001af2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001af4:	f7ff f954 	bl	8000da0 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afc:	f7ff f950 	bl	8000da0 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e030      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x734>
 8001b1a:	e028      	b.n	8001b6e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	2b0c      	cmp	r3, #12
 8001b20:	d023      	beq.n	8001b6a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a08      	ldr	r2, [pc, #32]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001b28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2e:	f7ff f937 	bl	8000da0 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b34:	e00c      	b.n	8001b50 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b36:	f7ff f933 	bl	8000da0 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d905      	bls.n	8001b50 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e013      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_RCC_OscConfig+0x7b0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1ec      	bne.n	8001b36 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_RCC_OscConfig+0x7b0>)
 8001b5e:	68da      	ldr	r2, [r3, #12]
 8001b60:	4905      	ldr	r1, [pc, #20]	; (8001b78 <HAL_RCC_OscConfig+0x7b0>)
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_RCC_OscConfig+0x7b4>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	60cb      	str	r3, [r1, #12]
 8001b68:	e001      	b.n	8001b6e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3720      	adds	r7, #32
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	feeefffc 	.word	0xfeeefffc

08001b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0e7      	b.n	8001d64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b94:	4b75      	ldr	r3, [pc, #468]	; (8001d6c <HAL_RCC_ClockConfig+0x1ec>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d910      	bls.n	8001bc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba2:	4b72      	ldr	r3, [pc, #456]	; (8001d6c <HAL_RCC_ClockConfig+0x1ec>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 0207 	bic.w	r2, r3, #7
 8001baa:	4970      	ldr	r1, [pc, #448]	; (8001d6c <HAL_RCC_ClockConfig+0x1ec>)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb2:	4b6e      	ldr	r3, [pc, #440]	; (8001d6c <HAL_RCC_ClockConfig+0x1ec>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d001      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0cf      	b.n	8001d64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d010      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	4b66      	ldr	r3, [pc, #408]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d908      	bls.n	8001bf2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be0:	4b63      	ldr	r3, [pc, #396]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	4960      	ldr	r1, [pc, #384]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d04c      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	d107      	bne.n	8001c16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c06:	4b5a      	ldr	r3, [pc, #360]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d121      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e0a6      	b.n	8001d64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d107      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c1e:	4b54      	ldr	r3, [pc, #336]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d115      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e09a      	b.n	8001d64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d107      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c36:	4b4e      	ldr	r3, [pc, #312]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d109      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e08e      	b.n	8001d64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c46:	4b4a      	ldr	r3, [pc, #296]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e086      	b.n	8001d64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c56:	4b46      	ldr	r3, [pc, #280]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f023 0203 	bic.w	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	4943      	ldr	r1, [pc, #268]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c68:	f7ff f89a 	bl	8000da0 <HAL_GetTick>
 8001c6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6e:	e00a      	b.n	8001c86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c70:	f7ff f896 	bl	8000da0 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e06e      	b.n	8001d64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c86:	4b3a      	ldr	r3, [pc, #232]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 020c 	and.w	r2, r3, #12
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d1eb      	bne.n	8001c70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d010      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	4b31      	ldr	r3, [pc, #196]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d208      	bcs.n	8001cc6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb4:	4b2e      	ldr	r3, [pc, #184]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	492b      	ldr	r1, [pc, #172]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc6:	4b29      	ldr	r3, [pc, #164]	; (8001d6c <HAL_RCC_ClockConfig+0x1ec>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d210      	bcs.n	8001cf6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd4:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <HAL_RCC_ClockConfig+0x1ec>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f023 0207 	bic.w	r2, r3, #7
 8001cdc:	4923      	ldr	r1, [pc, #140]	; (8001d6c <HAL_RCC_ClockConfig+0x1ec>)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce4:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <HAL_RCC_ClockConfig+0x1ec>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d001      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e036      	b.n	8001d64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d008      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d02:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	4918      	ldr	r1, [pc, #96]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d009      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4910      	ldr	r1, [pc, #64]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d34:	f000 f824 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	091b      	lsrs	r3, r3, #4
 8001d40:	f003 030f 	and.w	r3, r3, #15
 8001d44:	490b      	ldr	r1, [pc, #44]	; (8001d74 <HAL_RCC_ClockConfig+0x1f4>)
 8001d46:	5ccb      	ldrb	r3, [r1, r3]
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d50:	4a09      	ldr	r2, [pc, #36]	; (8001d78 <HAL_RCC_ClockConfig+0x1f8>)
 8001d52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_RCC_ClockConfig+0x1fc>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fe8f 	bl	8000a7c <HAL_InitTick>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d62:	7afb      	ldrb	r3, [r7, #11]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40022000 	.word	0x40022000
 8001d70:	40021000 	.word	0x40021000
 8001d74:	08007aec 	.word	0x08007aec
 8001d78:	20000004 	.word	0x20000004
 8001d7c:	20000008 	.word	0x20000008

08001d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b089      	sub	sp, #36	; 0x24
 8001d84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d8e:	4b3e      	ldr	r3, [pc, #248]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d98:	4b3b      	ldr	r3, [pc, #236]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_GetSysClockFreq+0x34>
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	2b0c      	cmp	r3, #12
 8001dac:	d121      	bne.n	8001df2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d11e      	bne.n	8001df2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001db4:	4b34      	ldr	r3, [pc, #208]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d107      	bne.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001dc0:	4b31      	ldr	r3, [pc, #196]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc6:	0a1b      	lsrs	r3, r3, #8
 8001dc8:	f003 030f 	and.w	r3, r3, #15
 8001dcc:	61fb      	str	r3, [r7, #28]
 8001dce:	e005      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001dd0:	4b2d      	ldr	r3, [pc, #180]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ddc:	4a2b      	ldr	r2, [pc, #172]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10d      	bne.n	8001e08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001df0:	e00a      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d102      	bne.n	8001dfe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001df8:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dfa:	61bb      	str	r3, [r7, #24]
 8001dfc:	e004      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e04:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2b0c      	cmp	r3, #12
 8001e0c:	d134      	bne.n	8001e78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e0e:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d003      	beq.n	8001e26 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d003      	beq.n	8001e2c <HAL_RCC_GetSysClockFreq+0xac>
 8001e24:	e005      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e26:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e28:	617b      	str	r3, [r7, #20]
      break;
 8001e2a:	e005      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e2c:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e2e:	617b      	str	r3, [r7, #20]
      break;
 8001e30:	e002      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	617b      	str	r3, [r7, #20]
      break;
 8001e36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	091b      	lsrs	r3, r3, #4
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	3301      	adds	r3, #1
 8001e44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	0a1b      	lsrs	r3, r3, #8
 8001e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	fb03 f202 	mul.w	r2, r3, r2
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	0e5b      	lsrs	r3, r3, #25
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	3301      	adds	r3, #1
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e78:	69bb      	ldr	r3, [r7, #24]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3724      	adds	r7, #36	; 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	08007b04 	.word	0x08007b04
 8001e90:	00f42400 	.word	0x00f42400
 8001e94:	007a1200 	.word	0x007a1200

08001e98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <HAL_RCC_GetHCLKFreq+0x14>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000004 	.word	0x20000004

08001eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001eb4:	f7ff fff0 	bl	8001e98 <HAL_RCC_GetHCLKFreq>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	0a1b      	lsrs	r3, r3, #8
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	4904      	ldr	r1, [pc, #16]	; (8001ed8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ec6:	5ccb      	ldrb	r3, [r1, r3]
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	08007afc 	.word	0x08007afc

08001edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ee0:	f7ff ffda 	bl	8001e98 <HAL_RCC_GetHCLKFreq>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	0adb      	lsrs	r3, r3, #11
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	4904      	ldr	r1, [pc, #16]	; (8001f04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ef2:	5ccb      	ldrb	r3, [r1, r3]
 8001ef4:	f003 031f 	and.w	r3, r3, #31
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000
 8001f04:	08007afc 	.word	0x08007afc

08001f08 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	220f      	movs	r2, #15
 8001f16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_RCC_GetClockConfig+0x5c>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 0203 	and.w	r2, r3, #3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001f24:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <HAL_RCC_GetClockConfig+0x5c>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_RCC_GetClockConfig+0x5c>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <HAL_RCC_GetClockConfig+0x5c>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	08db      	lsrs	r3, r3, #3
 8001f42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <HAL_RCC_GetClockConfig+0x60>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0207 	and.w	r2, r3, #7
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	601a      	str	r2, [r3, #0]
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40022000 	.word	0x40022000

08001f6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f74:	2300      	movs	r3, #0
 8001f76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f78:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f84:	f7ff f9bc 	bl	8001300 <HAL_PWREx_GetVoltageRange>
 8001f88:	6178      	str	r0, [r7, #20]
 8001f8a:	e014      	b.n	8001fb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f8c:	4b25      	ldr	r3, [pc, #148]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f90:	4a24      	ldr	r2, [pc, #144]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f96:	6593      	str	r3, [r2, #88]	; 0x58
 8001f98:	4b22      	ldr	r3, [pc, #136]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fa4:	f7ff f9ac 	bl	8001300 <HAL_PWREx_GetVoltageRange>
 8001fa8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001faa:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fae:	4a1d      	ldr	r2, [pc, #116]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fbc:	d10b      	bne.n	8001fd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b80      	cmp	r3, #128	; 0x80
 8001fc2:	d919      	bls.n	8001ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2ba0      	cmp	r3, #160	; 0xa0
 8001fc8:	d902      	bls.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fca:	2302      	movs	r3, #2
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	e013      	b.n	8001ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	e010      	b.n	8001ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b80      	cmp	r3, #128	; 0x80
 8001fda:	d902      	bls.n	8001fe2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fdc:	2303      	movs	r3, #3
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	e00a      	b.n	8001ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b80      	cmp	r3, #128	; 0x80
 8001fe6:	d102      	bne.n	8001fee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fe8:	2302      	movs	r3, #2
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	e004      	b.n	8001ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b70      	cmp	r3, #112	; 0x70
 8001ff2:	d101      	bne.n	8001ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f023 0207 	bic.w	r2, r3, #7
 8002000:	4909      	ldr	r1, [pc, #36]	; (8002028 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002008:	4b07      	ldr	r3, [pc, #28]	; (8002028 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	429a      	cmp	r2, r3
 8002014:	d001      	beq.n	800201a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40021000 	.word	0x40021000
 8002028:	40022000 	.word	0x40022000

0800202c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002034:	2300      	movs	r3, #0
 8002036:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002038:	2300      	movs	r3, #0
 800203a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002044:	2b00      	cmp	r3, #0
 8002046:	d041      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800204c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002050:	d02a      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002052:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002056:	d824      	bhi.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002058:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800205c:	d008      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800205e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002062:	d81e      	bhi.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002068:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800206c:	d010      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800206e:	e018      	b.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002070:	4b86      	ldr	r3, [pc, #536]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4a85      	ldr	r2, [pc, #532]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800207c:	e015      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3304      	adds	r3, #4
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f000 fabb 	bl	8002600 <RCCEx_PLLSAI1_Config>
 800208a:	4603      	mov	r3, r0
 800208c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800208e:	e00c      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3320      	adds	r3, #32
 8002094:	2100      	movs	r1, #0
 8002096:	4618      	mov	r0, r3
 8002098:	f000 fba6 	bl	80027e8 <RCCEx_PLLSAI2_Config>
 800209c:	4603      	mov	r3, r0
 800209e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020a0:	e003      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	74fb      	strb	r3, [r7, #19]
      break;
 80020a6:	e000      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80020a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020aa:	7cfb      	ldrb	r3, [r7, #19]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10b      	bne.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020b0:	4b76      	ldr	r3, [pc, #472]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020be:	4973      	ldr	r1, [pc, #460]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020c6:	e001      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020c8:	7cfb      	ldrb	r3, [r7, #19]
 80020ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d041      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020e0:	d02a      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80020e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020e6:	d824      	bhi.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020ec:	d008      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020f2:	d81e      	bhi.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00a      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80020f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020fc:	d010      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020fe:	e018      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002100:	4b62      	ldr	r3, [pc, #392]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	4a61      	ldr	r2, [pc, #388]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800210c:	e015      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3304      	adds	r3, #4
 8002112:	2100      	movs	r1, #0
 8002114:	4618      	mov	r0, r3
 8002116:	f000 fa73 	bl	8002600 <RCCEx_PLLSAI1_Config>
 800211a:	4603      	mov	r3, r0
 800211c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800211e:	e00c      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3320      	adds	r3, #32
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f000 fb5e 	bl	80027e8 <RCCEx_PLLSAI2_Config>
 800212c:	4603      	mov	r3, r0
 800212e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002130:	e003      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	74fb      	strb	r3, [r7, #19]
      break;
 8002136:	e000      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002138:	bf00      	nop
    }

    if(ret == HAL_OK)
 800213a:	7cfb      	ldrb	r3, [r7, #19]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10b      	bne.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002140:	4b52      	ldr	r3, [pc, #328]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002146:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800214e:	494f      	ldr	r1, [pc, #316]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002156:	e001      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002158:	7cfb      	ldrb	r3, [r7, #19]
 800215a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80a0 	beq.w	80022aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800216a:	2300      	movs	r3, #0
 800216c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800216e:	4b47      	ldr	r3, [pc, #284]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800217e:	2300      	movs	r3, #0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00d      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002184:	4b41      	ldr	r3, [pc, #260]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002188:	4a40      	ldr	r2, [pc, #256]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218e:	6593      	str	r3, [r2, #88]	; 0x58
 8002190:	4b3e      	ldr	r3, [pc, #248]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219c:	2301      	movs	r3, #1
 800219e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a0:	4b3b      	ldr	r3, [pc, #236]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a3a      	ldr	r2, [pc, #232]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021ac:	f7fe fdf8 	bl	8000da0 <HAL_GetTick>
 80021b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021b2:	e009      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b4:	f7fe fdf4 	bl	8000da0 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d902      	bls.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	74fb      	strb	r3, [r7, #19]
        break;
 80021c6:	e005      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021c8:	4b31      	ldr	r3, [pc, #196]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0ef      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80021d4:	7cfb      	ldrb	r3, [r7, #19]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d15c      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021da:	4b2c      	ldr	r3, [pc, #176]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01f      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d019      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021f8:	4b24      	ldr	r3, [pc, #144]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002202:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002204:	4b21      	ldr	r3, [pc, #132]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	4a20      	ldr	r2, [pc, #128]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002214:	4b1d      	ldr	r3, [pc, #116]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221a:	4a1c      	ldr	r2, [pc, #112]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002224:	4a19      	ldr	r2, [pc, #100]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d016      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002236:	f7fe fdb3 	bl	8000da0 <HAL_GetTick>
 800223a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800223c:	e00b      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223e:	f7fe fdaf 	bl	8000da0 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	f241 3288 	movw	r2, #5000	; 0x1388
 800224c:	4293      	cmp	r3, r2
 800224e:	d902      	bls.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	74fb      	strb	r3, [r7, #19]
            break;
 8002254:	e006      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002256:	4b0d      	ldr	r3, [pc, #52]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0ec      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002264:	7cfb      	ldrb	r3, [r7, #19]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10c      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800226a:	4b08      	ldr	r3, [pc, #32]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002270:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800227a:	4904      	ldr	r1, [pc, #16]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002282:	e009      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002284:	7cfb      	ldrb	r3, [r7, #19]
 8002286:	74bb      	strb	r3, [r7, #18]
 8002288:	e006      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000
 8002290:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002294:	7cfb      	ldrb	r3, [r7, #19]
 8002296:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002298:	7c7b      	ldrb	r3, [r7, #17]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d105      	bne.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229e:	4b9e      	ldr	r3, [pc, #632]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a2:	4a9d      	ldr	r2, [pc, #628]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022b6:	4b98      	ldr	r3, [pc, #608]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022bc:	f023 0203 	bic.w	r2, r3, #3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c4:	4994      	ldr	r1, [pc, #592]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00a      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022d8:	4b8f      	ldr	r3, [pc, #572]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	f023 020c 	bic.w	r2, r3, #12
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e6:	498c      	ldr	r1, [pc, #560]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022fa:	4b87      	ldr	r3, [pc, #540]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002300:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	4983      	ldr	r1, [pc, #524]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800231c:	4b7e      	ldr	r3, [pc, #504]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002322:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	497b      	ldr	r1, [pc, #492]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800233e:	4b76      	ldr	r3, [pc, #472]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002344:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800234c:	4972      	ldr	r1, [pc, #456]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002360:	4b6d      	ldr	r3, [pc, #436]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236e:	496a      	ldr	r1, [pc, #424]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002382:	4b65      	ldr	r3, [pc, #404]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002388:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002390:	4961      	ldr	r1, [pc, #388]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023a4:	4b5c      	ldr	r3, [pc, #368]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b2:	4959      	ldr	r1, [pc, #356]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00a      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023c6:	4b54      	ldr	r3, [pc, #336]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d4:	4950      	ldr	r1, [pc, #320]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00a      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023e8:	4b4b      	ldr	r3, [pc, #300]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f6:	4948      	ldr	r1, [pc, #288]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00a      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800240a:	4b43      	ldr	r3, [pc, #268]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002410:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002418:	493f      	ldr	r1, [pc, #252]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d028      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800242c:	4b3a      	ldr	r3, [pc, #232]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800243a:	4937      	ldr	r1, [pc, #220]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002446:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800244a:	d106      	bne.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800244c:	4b32      	ldr	r3, [pc, #200]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4a31      	ldr	r2, [pc, #196]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002456:	60d3      	str	r3, [r2, #12]
 8002458:	e011      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800245e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002462:	d10c      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3304      	adds	r3, #4
 8002468:	2101      	movs	r1, #1
 800246a:	4618      	mov	r0, r3
 800246c:	f000 f8c8 	bl	8002600 <RCCEx_PLLSAI1_Config>
 8002470:	4603      	mov	r3, r0
 8002472:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002474:	7cfb      	ldrb	r3, [r7, #19]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800247a:	7cfb      	ldrb	r3, [r7, #19]
 800247c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d028      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800248a:	4b23      	ldr	r3, [pc, #140]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002490:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002498:	491f      	ldr	r1, [pc, #124]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024a8:	d106      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024aa:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	4a1a      	ldr	r2, [pc, #104]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024b4:	60d3      	str	r3, [r2, #12]
 80024b6:	e011      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024c0:	d10c      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3304      	adds	r3, #4
 80024c6:	2101      	movs	r1, #1
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 f899 	bl	8002600 <RCCEx_PLLSAI1_Config>
 80024ce:	4603      	mov	r3, r0
 80024d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024d2:	7cfb      	ldrb	r3, [r7, #19]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80024d8:	7cfb      	ldrb	r3, [r7, #19]
 80024da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d02b      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f6:	4908      	ldr	r1, [pc, #32]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002502:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002506:	d109      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4a02      	ldr	r2, [pc, #8]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002512:	60d3      	str	r3, [r2, #12]
 8002514:	e014      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002516:	bf00      	nop
 8002518:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002520:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002524:	d10c      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3304      	adds	r3, #4
 800252a:	2101      	movs	r1, #1
 800252c:	4618      	mov	r0, r3
 800252e:	f000 f867 	bl	8002600 <RCCEx_PLLSAI1_Config>
 8002532:	4603      	mov	r3, r0
 8002534:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002536:	7cfb      	ldrb	r3, [r7, #19]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800253c:	7cfb      	ldrb	r3, [r7, #19]
 800253e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d02f      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800254c:	4b2b      	ldr	r3, [pc, #172]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800254e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002552:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800255a:	4928      	ldr	r1, [pc, #160]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002566:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800256a:	d10d      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3304      	adds	r3, #4
 8002570:	2102      	movs	r1, #2
 8002572:	4618      	mov	r0, r3
 8002574:	f000 f844 	bl	8002600 <RCCEx_PLLSAI1_Config>
 8002578:	4603      	mov	r3, r0
 800257a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800257c:	7cfb      	ldrb	r3, [r7, #19]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d014      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002582:	7cfb      	ldrb	r3, [r7, #19]
 8002584:	74bb      	strb	r3, [r7, #18]
 8002586:	e011      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800258c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002590:	d10c      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3320      	adds	r3, #32
 8002596:	2102      	movs	r1, #2
 8002598:	4618      	mov	r0, r3
 800259a:	f000 f925 	bl	80027e8 <RCCEx_PLLSAI2_Config>
 800259e:	4603      	mov	r3, r0
 80025a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025a2:	7cfb      	ldrb	r3, [r7, #19]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80025a8:	7cfb      	ldrb	r3, [r7, #19]
 80025aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025b8:	4b10      	ldr	r3, [pc, #64]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025c6:	490d      	ldr	r1, [pc, #52]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00b      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025ea:	4904      	ldr	r1, [pc, #16]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40021000 	.word	0x40021000

08002600 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800260e:	4b75      	ldr	r3, [pc, #468]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d018      	beq.n	800264c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800261a:	4b72      	ldr	r3, [pc, #456]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f003 0203 	and.w	r2, r3, #3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d10d      	bne.n	8002646 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
       ||
 800262e:	2b00      	cmp	r3, #0
 8002630:	d009      	beq.n	8002646 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002632:	4b6c      	ldr	r3, [pc, #432]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	091b      	lsrs	r3, r3, #4
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
       ||
 8002642:	429a      	cmp	r2, r3
 8002644:	d047      	beq.n	80026d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	73fb      	strb	r3, [r7, #15]
 800264a:	e044      	b.n	80026d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b03      	cmp	r3, #3
 8002652:	d018      	beq.n	8002686 <RCCEx_PLLSAI1_Config+0x86>
 8002654:	2b03      	cmp	r3, #3
 8002656:	d825      	bhi.n	80026a4 <RCCEx_PLLSAI1_Config+0xa4>
 8002658:	2b01      	cmp	r3, #1
 800265a:	d002      	beq.n	8002662 <RCCEx_PLLSAI1_Config+0x62>
 800265c:	2b02      	cmp	r3, #2
 800265e:	d009      	beq.n	8002674 <RCCEx_PLLSAI1_Config+0x74>
 8002660:	e020      	b.n	80026a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002662:	4b60      	ldr	r3, [pc, #384]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d11d      	bne.n	80026aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002672:	e01a      	b.n	80026aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002674:	4b5b      	ldr	r3, [pc, #364]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267c:	2b00      	cmp	r3, #0
 800267e:	d116      	bne.n	80026ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002684:	e013      	b.n	80026ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002686:	4b57      	ldr	r3, [pc, #348]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10f      	bne.n	80026b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002692:	4b54      	ldr	r3, [pc, #336]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026a2:	e006      	b.n	80026b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
      break;
 80026a8:	e004      	b.n	80026b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026aa:	bf00      	nop
 80026ac:	e002      	b.n	80026b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026ae:	bf00      	nop
 80026b0:	e000      	b.n	80026b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10d      	bne.n	80026d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026ba:	4b4a      	ldr	r3, [pc, #296]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6819      	ldr	r1, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	430b      	orrs	r3, r1
 80026d0:	4944      	ldr	r1, [pc, #272]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d17d      	bne.n	80027d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026dc:	4b41      	ldr	r3, [pc, #260]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a40      	ldr	r2, [pc, #256]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e8:	f7fe fb5a 	bl	8000da0 <HAL_GetTick>
 80026ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026ee:	e009      	b.n	8002704 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026f0:	f7fe fb56 	bl	8000da0 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d902      	bls.n	8002704 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	73fb      	strb	r3, [r7, #15]
        break;
 8002702:	e005      	b.n	8002710 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002704:	4b37      	ldr	r3, [pc, #220]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1ef      	bne.n	80026f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d160      	bne.n	80027d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d111      	bne.n	8002740 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800271c:	4b31      	ldr	r3, [pc, #196]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6892      	ldr	r2, [r2, #8]
 800272c:	0211      	lsls	r1, r2, #8
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68d2      	ldr	r2, [r2, #12]
 8002732:	0912      	lsrs	r2, r2, #4
 8002734:	0452      	lsls	r2, r2, #17
 8002736:	430a      	orrs	r2, r1
 8002738:	492a      	ldr	r1, [pc, #168]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800273a:	4313      	orrs	r3, r2
 800273c:	610b      	str	r3, [r1, #16]
 800273e:	e027      	b.n	8002790 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d112      	bne.n	800276c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002746:	4b27      	ldr	r3, [pc, #156]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800274e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6892      	ldr	r2, [r2, #8]
 8002756:	0211      	lsls	r1, r2, #8
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6912      	ldr	r2, [r2, #16]
 800275c:	0852      	lsrs	r2, r2, #1
 800275e:	3a01      	subs	r2, #1
 8002760:	0552      	lsls	r2, r2, #21
 8002762:	430a      	orrs	r2, r1
 8002764:	491f      	ldr	r1, [pc, #124]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002766:	4313      	orrs	r3, r2
 8002768:	610b      	str	r3, [r1, #16]
 800276a:	e011      	b.n	8002790 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800276c:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002774:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6892      	ldr	r2, [r2, #8]
 800277c:	0211      	lsls	r1, r2, #8
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6952      	ldr	r2, [r2, #20]
 8002782:	0852      	lsrs	r2, r2, #1
 8002784:	3a01      	subs	r2, #1
 8002786:	0652      	lsls	r2, r2, #25
 8002788:	430a      	orrs	r2, r1
 800278a:	4916      	ldr	r1, [pc, #88]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800278c:	4313      	orrs	r3, r2
 800278e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002790:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a13      	ldr	r2, [pc, #76]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002796:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800279a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279c:	f7fe fb00 	bl	8000da0 <HAL_GetTick>
 80027a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027a2:	e009      	b.n	80027b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027a4:	f7fe fafc 	bl	8000da0 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d902      	bls.n	80027b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	73fb      	strb	r3, [r7, #15]
          break;
 80027b6:	e005      	b.n	80027c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027b8:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0ef      	beq.n	80027a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027cc:	691a      	ldr	r2, [r3, #16]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	4904      	ldr	r1, [pc, #16]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40021000 	.word	0x40021000

080027e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027f6:	4b6a      	ldr	r3, [pc, #424]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d018      	beq.n	8002834 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002802:	4b67      	ldr	r3, [pc, #412]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f003 0203 	and.w	r2, r3, #3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d10d      	bne.n	800282e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
       ||
 8002816:	2b00      	cmp	r3, #0
 8002818:	d009      	beq.n	800282e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800281a:	4b61      	ldr	r3, [pc, #388]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	091b      	lsrs	r3, r3, #4
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
       ||
 800282a:	429a      	cmp	r2, r3
 800282c:	d047      	beq.n	80028be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
 8002832:	e044      	b.n	80028be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d018      	beq.n	800286e <RCCEx_PLLSAI2_Config+0x86>
 800283c:	2b03      	cmp	r3, #3
 800283e:	d825      	bhi.n	800288c <RCCEx_PLLSAI2_Config+0xa4>
 8002840:	2b01      	cmp	r3, #1
 8002842:	d002      	beq.n	800284a <RCCEx_PLLSAI2_Config+0x62>
 8002844:	2b02      	cmp	r3, #2
 8002846:	d009      	beq.n	800285c <RCCEx_PLLSAI2_Config+0x74>
 8002848:	e020      	b.n	800288c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800284a:	4b55      	ldr	r3, [pc, #340]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d11d      	bne.n	8002892 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800285a:	e01a      	b.n	8002892 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800285c:	4b50      	ldr	r3, [pc, #320]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002864:	2b00      	cmp	r3, #0
 8002866:	d116      	bne.n	8002896 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800286c:	e013      	b.n	8002896 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800286e:	4b4c      	ldr	r3, [pc, #304]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10f      	bne.n	800289a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800287a:	4b49      	ldr	r3, [pc, #292]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800288a:	e006      	b.n	800289a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
      break;
 8002890:	e004      	b.n	800289c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002892:	bf00      	nop
 8002894:	e002      	b.n	800289c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002896:	bf00      	nop
 8002898:	e000      	b.n	800289c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800289a:	bf00      	nop
    }

    if(status == HAL_OK)
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10d      	bne.n	80028be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028a2:	4b3f      	ldr	r3, [pc, #252]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6819      	ldr	r1, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	430b      	orrs	r3, r1
 80028b8:	4939      	ldr	r1, [pc, #228]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d167      	bne.n	8002994 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80028c4:	4b36      	ldr	r3, [pc, #216]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a35      	ldr	r2, [pc, #212]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028d0:	f7fe fa66 	bl	8000da0 <HAL_GetTick>
 80028d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028d6:	e009      	b.n	80028ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028d8:	f7fe fa62 	bl	8000da0 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d902      	bls.n	80028ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	73fb      	strb	r3, [r7, #15]
        break;
 80028ea:	e005      	b.n	80028f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028ec:	4b2c      	ldr	r3, [pc, #176]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1ef      	bne.n	80028d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d14a      	bne.n	8002994 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d111      	bne.n	8002928 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002904:	4b26      	ldr	r3, [pc, #152]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800290c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6892      	ldr	r2, [r2, #8]
 8002914:	0211      	lsls	r1, r2, #8
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	68d2      	ldr	r2, [r2, #12]
 800291a:	0912      	lsrs	r2, r2, #4
 800291c:	0452      	lsls	r2, r2, #17
 800291e:	430a      	orrs	r2, r1
 8002920:	491f      	ldr	r1, [pc, #124]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002922:	4313      	orrs	r3, r2
 8002924:	614b      	str	r3, [r1, #20]
 8002926:	e011      	b.n	800294c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002928:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002930:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6892      	ldr	r2, [r2, #8]
 8002938:	0211      	lsls	r1, r2, #8
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6912      	ldr	r2, [r2, #16]
 800293e:	0852      	lsrs	r2, r2, #1
 8002940:	3a01      	subs	r2, #1
 8002942:	0652      	lsls	r2, r2, #25
 8002944:	430a      	orrs	r2, r1
 8002946:	4916      	ldr	r1, [pc, #88]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002948:	4313      	orrs	r3, r2
 800294a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800294c:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a13      	ldr	r2, [pc, #76]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002956:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002958:	f7fe fa22 	bl	8000da0 <HAL_GetTick>
 800295c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800295e:	e009      	b.n	8002974 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002960:	f7fe fa1e 	bl	8000da0 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d902      	bls.n	8002974 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	73fb      	strb	r3, [r7, #15]
          break;
 8002972:	e005      	b.n	8002980 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002974:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0ef      	beq.n	8002960 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002980:	7bfb      	ldrb	r3, [r7, #15]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002986:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	4904      	ldr	r1, [pc, #16]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002990:	4313      	orrs	r3, r2
 8002992:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002994:	7bfb      	ldrb	r3, [r7, #15]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000

080029a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e049      	b.n	8002a4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d106      	bne.n	80029d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f841 	bl	8002a52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3304      	adds	r3, #4
 80029e0:	4619      	mov	r1, r3
 80029e2:	4610      	mov	r0, r2
 80029e4:	f000 f9f8 	bl	8002dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d001      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e04f      	b.n	8002b20 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0201 	orr.w	r2, r2, #1
 8002a96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a23      	ldr	r2, [pc, #140]	; (8002b2c <HAL_TIM_Base_Start_IT+0xc4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d01d      	beq.n	8002ade <HAL_TIM_Base_Start_IT+0x76>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aaa:	d018      	beq.n	8002ade <HAL_TIM_Base_Start_IT+0x76>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a1f      	ldr	r2, [pc, #124]	; (8002b30 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d013      	beq.n	8002ade <HAL_TIM_Base_Start_IT+0x76>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a1e      	ldr	r2, [pc, #120]	; (8002b34 <HAL_TIM_Base_Start_IT+0xcc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d00e      	beq.n	8002ade <HAL_TIM_Base_Start_IT+0x76>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a1c      	ldr	r2, [pc, #112]	; (8002b38 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d009      	beq.n	8002ade <HAL_TIM_Base_Start_IT+0x76>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a1b      	ldr	r2, [pc, #108]	; (8002b3c <HAL_TIM_Base_Start_IT+0xd4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d004      	beq.n	8002ade <HAL_TIM_Base_Start_IT+0x76>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a19      	ldr	r2, [pc, #100]	; (8002b40 <HAL_TIM_Base_Start_IT+0xd8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d115      	bne.n	8002b0a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	4b17      	ldr	r3, [pc, #92]	; (8002b44 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2b06      	cmp	r3, #6
 8002aee:	d015      	beq.n	8002b1c <HAL_TIM_Base_Start_IT+0xb4>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af6:	d011      	beq.n	8002b1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0201 	orr.w	r2, r2, #1
 8002b06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b08:	e008      	b.n	8002b1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0201 	orr.w	r2, r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	e000      	b.n	8002b1e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	40012c00 	.word	0x40012c00
 8002b30:	40000400 	.word	0x40000400
 8002b34:	40000800 	.word	0x40000800
 8002b38:	40000c00 	.word	0x40000c00
 8002b3c:	40013400 	.word	0x40013400
 8002b40:	40014000 	.word	0x40014000
 8002b44:	00010007 	.word	0x00010007

08002b48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d122      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d11b      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f06f 0202 	mvn.w	r2, #2
 8002b74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f905 	bl	8002d9a <HAL_TIM_IC_CaptureCallback>
 8002b90:	e005      	b.n	8002b9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f8f7 	bl	8002d86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f908 	bl	8002dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d122      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d11b      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0204 	mvn.w	r2, #4
 8002bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2202      	movs	r2, #2
 8002bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f8db 	bl	8002d9a <HAL_TIM_IC_CaptureCallback>
 8002be4:	e005      	b.n	8002bf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f8cd 	bl	8002d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f8de 	bl	8002dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d122      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d11b      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f06f 0208 	mvn.w	r2, #8
 8002c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2204      	movs	r2, #4
 8002c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f8b1 	bl	8002d9a <HAL_TIM_IC_CaptureCallback>
 8002c38:	e005      	b.n	8002c46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f8a3 	bl	8002d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f8b4 	bl	8002dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b10      	cmp	r3, #16
 8002c58:	d122      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b10      	cmp	r3, #16
 8002c66:	d11b      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0210 	mvn.w	r2, #16
 8002c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2208      	movs	r2, #8
 8002c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f887 	bl	8002d9a <HAL_TIM_IC_CaptureCallback>
 8002c8c:	e005      	b.n	8002c9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f879 	bl	8002d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f88a 	bl	8002dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d10e      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d107      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0201 	mvn.w	r2, #1
 8002cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fd fe3c 	bl	8000944 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd6:	2b80      	cmp	r3, #128	; 0x80
 8002cd8:	d10e      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce4:	2b80      	cmp	r3, #128	; 0x80
 8002ce6:	d107      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f914 	bl	8002f20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d06:	d10e      	bne.n	8002d26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d12:	2b80      	cmp	r3, #128	; 0x80
 8002d14:	d107      	bne.n	8002d26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f907 	bl	8002f34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d30:	2b40      	cmp	r3, #64	; 0x40
 8002d32:	d10e      	bne.n	8002d52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3e:	2b40      	cmp	r3, #64	; 0x40
 8002d40:	d107      	bne.n	8002d52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f838 	bl	8002dc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	f003 0320 	and.w	r3, r3, #32
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	d10e      	bne.n	8002d7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f003 0320 	and.w	r3, r3, #32
 8002d6a:	2b20      	cmp	r3, #32
 8002d6c:	d107      	bne.n	8002d7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f06f 0220 	mvn.w	r2, #32
 8002d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f8c7 	bl	8002f0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
	...

08002dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a40      	ldr	r2, [pc, #256]	; (8002eec <TIM_Base_SetConfig+0x114>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d013      	beq.n	8002e18 <TIM_Base_SetConfig+0x40>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df6:	d00f      	beq.n	8002e18 <TIM_Base_SetConfig+0x40>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a3d      	ldr	r2, [pc, #244]	; (8002ef0 <TIM_Base_SetConfig+0x118>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d00b      	beq.n	8002e18 <TIM_Base_SetConfig+0x40>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a3c      	ldr	r2, [pc, #240]	; (8002ef4 <TIM_Base_SetConfig+0x11c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d007      	beq.n	8002e18 <TIM_Base_SetConfig+0x40>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a3b      	ldr	r2, [pc, #236]	; (8002ef8 <TIM_Base_SetConfig+0x120>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d003      	beq.n	8002e18 <TIM_Base_SetConfig+0x40>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a3a      	ldr	r2, [pc, #232]	; (8002efc <TIM_Base_SetConfig+0x124>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d108      	bne.n	8002e2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a2f      	ldr	r2, [pc, #188]	; (8002eec <TIM_Base_SetConfig+0x114>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d01f      	beq.n	8002e72 <TIM_Base_SetConfig+0x9a>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e38:	d01b      	beq.n	8002e72 <TIM_Base_SetConfig+0x9a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a2c      	ldr	r2, [pc, #176]	; (8002ef0 <TIM_Base_SetConfig+0x118>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d017      	beq.n	8002e72 <TIM_Base_SetConfig+0x9a>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a2b      	ldr	r2, [pc, #172]	; (8002ef4 <TIM_Base_SetConfig+0x11c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d013      	beq.n	8002e72 <TIM_Base_SetConfig+0x9a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a2a      	ldr	r2, [pc, #168]	; (8002ef8 <TIM_Base_SetConfig+0x120>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d00f      	beq.n	8002e72 <TIM_Base_SetConfig+0x9a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a29      	ldr	r2, [pc, #164]	; (8002efc <TIM_Base_SetConfig+0x124>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00b      	beq.n	8002e72 <TIM_Base_SetConfig+0x9a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a28      	ldr	r2, [pc, #160]	; (8002f00 <TIM_Base_SetConfig+0x128>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d007      	beq.n	8002e72 <TIM_Base_SetConfig+0x9a>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a27      	ldr	r2, [pc, #156]	; (8002f04 <TIM_Base_SetConfig+0x12c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d003      	beq.n	8002e72 <TIM_Base_SetConfig+0x9a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a26      	ldr	r2, [pc, #152]	; (8002f08 <TIM_Base_SetConfig+0x130>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d108      	bne.n	8002e84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a10      	ldr	r2, [pc, #64]	; (8002eec <TIM_Base_SetConfig+0x114>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d00f      	beq.n	8002ed0 <TIM_Base_SetConfig+0xf8>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a12      	ldr	r2, [pc, #72]	; (8002efc <TIM_Base_SetConfig+0x124>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00b      	beq.n	8002ed0 <TIM_Base_SetConfig+0xf8>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a11      	ldr	r2, [pc, #68]	; (8002f00 <TIM_Base_SetConfig+0x128>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d007      	beq.n	8002ed0 <TIM_Base_SetConfig+0xf8>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a10      	ldr	r2, [pc, #64]	; (8002f04 <TIM_Base_SetConfig+0x12c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d003      	beq.n	8002ed0 <TIM_Base_SetConfig+0xf8>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a0f      	ldr	r2, [pc, #60]	; (8002f08 <TIM_Base_SetConfig+0x130>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d103      	bne.n	8002ed8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	615a      	str	r2, [r3, #20]
}
 8002ede:	bf00      	nop
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40012c00 	.word	0x40012c00
 8002ef0:	40000400 	.word	0x40000400
 8002ef4:	40000800 	.word	0x40000800
 8002ef8:	40000c00 	.word	0x40000c00
 8002efc:	40013400 	.word	0x40013400
 8002f00:	40014000 	.word	0x40014000
 8002f04:	40014400 	.word	0x40014400
 8002f08:	40014800 	.word	0x40014800

08002f0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e040      	b.n	8002fdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7fd fd2a 	bl	80009c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2224      	movs	r2, #36	; 0x24
 8002f74:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0201 	bic.w	r2, r2, #1
 8002f84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f82c 	bl	8002fe4 <UART_SetConfig>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e022      	b.n	8002fdc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fad8 	bl	8003554 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 fb5f 	bl	8003698 <UART_CheckIdleState>
 8002fda:	4603      	mov	r3, r0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fe8:	b08a      	sub	sp, #40	; 0x28
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	431a      	orrs	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	4313      	orrs	r3, r2
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	4ba4      	ldr	r3, [pc, #656]	; (80032a4 <UART_SetConfig+0x2c0>)
 8003014:	4013      	ands	r3, r2
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	6812      	ldr	r2, [r2, #0]
 800301a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800301c:	430b      	orrs	r3, r1
 800301e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a99      	ldr	r2, [pc, #612]	; (80032a8 <UART_SetConfig+0x2c4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d004      	beq.n	8003050 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304c:	4313      	orrs	r3, r2
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003060:	430a      	orrs	r2, r1
 8003062:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a90      	ldr	r2, [pc, #576]	; (80032ac <UART_SetConfig+0x2c8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d126      	bne.n	80030bc <UART_SetConfig+0xd8>
 800306e:	4b90      	ldr	r3, [pc, #576]	; (80032b0 <UART_SetConfig+0x2cc>)
 8003070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003074:	f003 0303 	and.w	r3, r3, #3
 8003078:	2b03      	cmp	r3, #3
 800307a:	d81b      	bhi.n	80030b4 <UART_SetConfig+0xd0>
 800307c:	a201      	add	r2, pc, #4	; (adr r2, 8003084 <UART_SetConfig+0xa0>)
 800307e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003082:	bf00      	nop
 8003084:	08003095 	.word	0x08003095
 8003088:	080030a5 	.word	0x080030a5
 800308c:	0800309d 	.word	0x0800309d
 8003090:	080030ad 	.word	0x080030ad
 8003094:	2301      	movs	r3, #1
 8003096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800309a:	e116      	b.n	80032ca <UART_SetConfig+0x2e6>
 800309c:	2302      	movs	r3, #2
 800309e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030a2:	e112      	b.n	80032ca <UART_SetConfig+0x2e6>
 80030a4:	2304      	movs	r3, #4
 80030a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030aa:	e10e      	b.n	80032ca <UART_SetConfig+0x2e6>
 80030ac:	2308      	movs	r3, #8
 80030ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030b2:	e10a      	b.n	80032ca <UART_SetConfig+0x2e6>
 80030b4:	2310      	movs	r3, #16
 80030b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ba:	e106      	b.n	80032ca <UART_SetConfig+0x2e6>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a7c      	ldr	r2, [pc, #496]	; (80032b4 <UART_SetConfig+0x2d0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d138      	bne.n	8003138 <UART_SetConfig+0x154>
 80030c6:	4b7a      	ldr	r3, [pc, #488]	; (80032b0 <UART_SetConfig+0x2cc>)
 80030c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b0c      	cmp	r3, #12
 80030d2:	d82d      	bhi.n	8003130 <UART_SetConfig+0x14c>
 80030d4:	a201      	add	r2, pc, #4	; (adr r2, 80030dc <UART_SetConfig+0xf8>)
 80030d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030da:	bf00      	nop
 80030dc:	08003111 	.word	0x08003111
 80030e0:	08003131 	.word	0x08003131
 80030e4:	08003131 	.word	0x08003131
 80030e8:	08003131 	.word	0x08003131
 80030ec:	08003121 	.word	0x08003121
 80030f0:	08003131 	.word	0x08003131
 80030f4:	08003131 	.word	0x08003131
 80030f8:	08003131 	.word	0x08003131
 80030fc:	08003119 	.word	0x08003119
 8003100:	08003131 	.word	0x08003131
 8003104:	08003131 	.word	0x08003131
 8003108:	08003131 	.word	0x08003131
 800310c:	08003129 	.word	0x08003129
 8003110:	2300      	movs	r3, #0
 8003112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003116:	e0d8      	b.n	80032ca <UART_SetConfig+0x2e6>
 8003118:	2302      	movs	r3, #2
 800311a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800311e:	e0d4      	b.n	80032ca <UART_SetConfig+0x2e6>
 8003120:	2304      	movs	r3, #4
 8003122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003126:	e0d0      	b.n	80032ca <UART_SetConfig+0x2e6>
 8003128:	2308      	movs	r3, #8
 800312a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800312e:	e0cc      	b.n	80032ca <UART_SetConfig+0x2e6>
 8003130:	2310      	movs	r3, #16
 8003132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003136:	e0c8      	b.n	80032ca <UART_SetConfig+0x2e6>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a5e      	ldr	r2, [pc, #376]	; (80032b8 <UART_SetConfig+0x2d4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d125      	bne.n	800318e <UART_SetConfig+0x1aa>
 8003142:	4b5b      	ldr	r3, [pc, #364]	; (80032b0 <UART_SetConfig+0x2cc>)
 8003144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003148:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800314c:	2b30      	cmp	r3, #48	; 0x30
 800314e:	d016      	beq.n	800317e <UART_SetConfig+0x19a>
 8003150:	2b30      	cmp	r3, #48	; 0x30
 8003152:	d818      	bhi.n	8003186 <UART_SetConfig+0x1a2>
 8003154:	2b20      	cmp	r3, #32
 8003156:	d00a      	beq.n	800316e <UART_SetConfig+0x18a>
 8003158:	2b20      	cmp	r3, #32
 800315a:	d814      	bhi.n	8003186 <UART_SetConfig+0x1a2>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d002      	beq.n	8003166 <UART_SetConfig+0x182>
 8003160:	2b10      	cmp	r3, #16
 8003162:	d008      	beq.n	8003176 <UART_SetConfig+0x192>
 8003164:	e00f      	b.n	8003186 <UART_SetConfig+0x1a2>
 8003166:	2300      	movs	r3, #0
 8003168:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800316c:	e0ad      	b.n	80032ca <UART_SetConfig+0x2e6>
 800316e:	2302      	movs	r3, #2
 8003170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003174:	e0a9      	b.n	80032ca <UART_SetConfig+0x2e6>
 8003176:	2304      	movs	r3, #4
 8003178:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800317c:	e0a5      	b.n	80032ca <UART_SetConfig+0x2e6>
 800317e:	2308      	movs	r3, #8
 8003180:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003184:	e0a1      	b.n	80032ca <UART_SetConfig+0x2e6>
 8003186:	2310      	movs	r3, #16
 8003188:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800318c:	e09d      	b.n	80032ca <UART_SetConfig+0x2e6>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a4a      	ldr	r2, [pc, #296]	; (80032bc <UART_SetConfig+0x2d8>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d125      	bne.n	80031e4 <UART_SetConfig+0x200>
 8003198:	4b45      	ldr	r3, [pc, #276]	; (80032b0 <UART_SetConfig+0x2cc>)
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031a2:	2bc0      	cmp	r3, #192	; 0xc0
 80031a4:	d016      	beq.n	80031d4 <UART_SetConfig+0x1f0>
 80031a6:	2bc0      	cmp	r3, #192	; 0xc0
 80031a8:	d818      	bhi.n	80031dc <UART_SetConfig+0x1f8>
 80031aa:	2b80      	cmp	r3, #128	; 0x80
 80031ac:	d00a      	beq.n	80031c4 <UART_SetConfig+0x1e0>
 80031ae:	2b80      	cmp	r3, #128	; 0x80
 80031b0:	d814      	bhi.n	80031dc <UART_SetConfig+0x1f8>
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <UART_SetConfig+0x1d8>
 80031b6:	2b40      	cmp	r3, #64	; 0x40
 80031b8:	d008      	beq.n	80031cc <UART_SetConfig+0x1e8>
 80031ba:	e00f      	b.n	80031dc <UART_SetConfig+0x1f8>
 80031bc:	2300      	movs	r3, #0
 80031be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031c2:	e082      	b.n	80032ca <UART_SetConfig+0x2e6>
 80031c4:	2302      	movs	r3, #2
 80031c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ca:	e07e      	b.n	80032ca <UART_SetConfig+0x2e6>
 80031cc:	2304      	movs	r3, #4
 80031ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031d2:	e07a      	b.n	80032ca <UART_SetConfig+0x2e6>
 80031d4:	2308      	movs	r3, #8
 80031d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031da:	e076      	b.n	80032ca <UART_SetConfig+0x2e6>
 80031dc:	2310      	movs	r3, #16
 80031de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031e2:	e072      	b.n	80032ca <UART_SetConfig+0x2e6>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a35      	ldr	r2, [pc, #212]	; (80032c0 <UART_SetConfig+0x2dc>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d12a      	bne.n	8003244 <UART_SetConfig+0x260>
 80031ee:	4b30      	ldr	r3, [pc, #192]	; (80032b0 <UART_SetConfig+0x2cc>)
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031fc:	d01a      	beq.n	8003234 <UART_SetConfig+0x250>
 80031fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003202:	d81b      	bhi.n	800323c <UART_SetConfig+0x258>
 8003204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003208:	d00c      	beq.n	8003224 <UART_SetConfig+0x240>
 800320a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800320e:	d815      	bhi.n	800323c <UART_SetConfig+0x258>
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <UART_SetConfig+0x238>
 8003214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003218:	d008      	beq.n	800322c <UART_SetConfig+0x248>
 800321a:	e00f      	b.n	800323c <UART_SetConfig+0x258>
 800321c:	2300      	movs	r3, #0
 800321e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003222:	e052      	b.n	80032ca <UART_SetConfig+0x2e6>
 8003224:	2302      	movs	r3, #2
 8003226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800322a:	e04e      	b.n	80032ca <UART_SetConfig+0x2e6>
 800322c:	2304      	movs	r3, #4
 800322e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003232:	e04a      	b.n	80032ca <UART_SetConfig+0x2e6>
 8003234:	2308      	movs	r3, #8
 8003236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800323a:	e046      	b.n	80032ca <UART_SetConfig+0x2e6>
 800323c:	2310      	movs	r3, #16
 800323e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003242:	e042      	b.n	80032ca <UART_SetConfig+0x2e6>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a17      	ldr	r2, [pc, #92]	; (80032a8 <UART_SetConfig+0x2c4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d13a      	bne.n	80032c4 <UART_SetConfig+0x2e0>
 800324e:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <UART_SetConfig+0x2cc>)
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003254:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003258:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800325c:	d01a      	beq.n	8003294 <UART_SetConfig+0x2b0>
 800325e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003262:	d81b      	bhi.n	800329c <UART_SetConfig+0x2b8>
 8003264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003268:	d00c      	beq.n	8003284 <UART_SetConfig+0x2a0>
 800326a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800326e:	d815      	bhi.n	800329c <UART_SetConfig+0x2b8>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <UART_SetConfig+0x298>
 8003274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003278:	d008      	beq.n	800328c <UART_SetConfig+0x2a8>
 800327a:	e00f      	b.n	800329c <UART_SetConfig+0x2b8>
 800327c:	2300      	movs	r3, #0
 800327e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003282:	e022      	b.n	80032ca <UART_SetConfig+0x2e6>
 8003284:	2302      	movs	r3, #2
 8003286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800328a:	e01e      	b.n	80032ca <UART_SetConfig+0x2e6>
 800328c:	2304      	movs	r3, #4
 800328e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003292:	e01a      	b.n	80032ca <UART_SetConfig+0x2e6>
 8003294:	2308      	movs	r3, #8
 8003296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800329a:	e016      	b.n	80032ca <UART_SetConfig+0x2e6>
 800329c:	2310      	movs	r3, #16
 800329e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032a2:	e012      	b.n	80032ca <UART_SetConfig+0x2e6>
 80032a4:	efff69f3 	.word	0xefff69f3
 80032a8:	40008000 	.word	0x40008000
 80032ac:	40013800 	.word	0x40013800
 80032b0:	40021000 	.word	0x40021000
 80032b4:	40004400 	.word	0x40004400
 80032b8:	40004800 	.word	0x40004800
 80032bc:	40004c00 	.word	0x40004c00
 80032c0:	40005000 	.word	0x40005000
 80032c4:	2310      	movs	r3, #16
 80032c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a9f      	ldr	r2, [pc, #636]	; (800354c <UART_SetConfig+0x568>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d17a      	bne.n	80033ca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d824      	bhi.n	8003326 <UART_SetConfig+0x342>
 80032dc:	a201      	add	r2, pc, #4	; (adr r2, 80032e4 <UART_SetConfig+0x300>)
 80032de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e2:	bf00      	nop
 80032e4:	08003309 	.word	0x08003309
 80032e8:	08003327 	.word	0x08003327
 80032ec:	08003311 	.word	0x08003311
 80032f0:	08003327 	.word	0x08003327
 80032f4:	08003317 	.word	0x08003317
 80032f8:	08003327 	.word	0x08003327
 80032fc:	08003327 	.word	0x08003327
 8003300:	08003327 	.word	0x08003327
 8003304:	0800331f 	.word	0x0800331f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003308:	f7fe fdd2 	bl	8001eb0 <HAL_RCC_GetPCLK1Freq>
 800330c:	61f8      	str	r0, [r7, #28]
        break;
 800330e:	e010      	b.n	8003332 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003310:	4b8f      	ldr	r3, [pc, #572]	; (8003550 <UART_SetConfig+0x56c>)
 8003312:	61fb      	str	r3, [r7, #28]
        break;
 8003314:	e00d      	b.n	8003332 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003316:	f7fe fd33 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 800331a:	61f8      	str	r0, [r7, #28]
        break;
 800331c:	e009      	b.n	8003332 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800331e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003322:	61fb      	str	r3, [r7, #28]
        break;
 8003324:	e005      	b.n	8003332 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003330:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80fb 	beq.w	8003530 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	4413      	add	r3, r2
 8003344:	69fa      	ldr	r2, [r7, #28]
 8003346:	429a      	cmp	r2, r3
 8003348:	d305      	bcc.n	8003356 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003350:	69fa      	ldr	r2, [r7, #28]
 8003352:	429a      	cmp	r2, r3
 8003354:	d903      	bls.n	800335e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800335c:	e0e8      	b.n	8003530 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	2200      	movs	r2, #0
 8003362:	461c      	mov	r4, r3
 8003364:	4615      	mov	r5, r2
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	022b      	lsls	r3, r5, #8
 8003370:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003374:	0222      	lsls	r2, r4, #8
 8003376:	68f9      	ldr	r1, [r7, #12]
 8003378:	6849      	ldr	r1, [r1, #4]
 800337a:	0849      	lsrs	r1, r1, #1
 800337c:	2000      	movs	r0, #0
 800337e:	4688      	mov	r8, r1
 8003380:	4681      	mov	r9, r0
 8003382:	eb12 0a08 	adds.w	sl, r2, r8
 8003386:	eb43 0b09 	adc.w	fp, r3, r9
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	603b      	str	r3, [r7, #0]
 8003392:	607a      	str	r2, [r7, #4]
 8003394:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003398:	4650      	mov	r0, sl
 800339a:	4659      	mov	r1, fp
 800339c:	f7fc ff68 	bl	8000270 <__aeabi_uldivmod>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4613      	mov	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033ae:	d308      	bcc.n	80033c2 <UART_SetConfig+0x3de>
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033b6:	d204      	bcs.n	80033c2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	60da      	str	r2, [r3, #12]
 80033c0:	e0b6      	b.n	8003530 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033c8:	e0b2      	b.n	8003530 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033d2:	d15e      	bne.n	8003492 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80033d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d828      	bhi.n	800342e <UART_SetConfig+0x44a>
 80033dc:	a201      	add	r2, pc, #4	; (adr r2, 80033e4 <UART_SetConfig+0x400>)
 80033de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e2:	bf00      	nop
 80033e4:	08003409 	.word	0x08003409
 80033e8:	08003411 	.word	0x08003411
 80033ec:	08003419 	.word	0x08003419
 80033f0:	0800342f 	.word	0x0800342f
 80033f4:	0800341f 	.word	0x0800341f
 80033f8:	0800342f 	.word	0x0800342f
 80033fc:	0800342f 	.word	0x0800342f
 8003400:	0800342f 	.word	0x0800342f
 8003404:	08003427 	.word	0x08003427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003408:	f7fe fd52 	bl	8001eb0 <HAL_RCC_GetPCLK1Freq>
 800340c:	61f8      	str	r0, [r7, #28]
        break;
 800340e:	e014      	b.n	800343a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003410:	f7fe fd64 	bl	8001edc <HAL_RCC_GetPCLK2Freq>
 8003414:	61f8      	str	r0, [r7, #28]
        break;
 8003416:	e010      	b.n	800343a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003418:	4b4d      	ldr	r3, [pc, #308]	; (8003550 <UART_SetConfig+0x56c>)
 800341a:	61fb      	str	r3, [r7, #28]
        break;
 800341c:	e00d      	b.n	800343a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800341e:	f7fe fcaf 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8003422:	61f8      	str	r0, [r7, #28]
        break;
 8003424:	e009      	b.n	800343a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800342a:	61fb      	str	r3, [r7, #28]
        break;
 800342c:	e005      	b.n	800343a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003438:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d077      	beq.n	8003530 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	005a      	lsls	r2, r3, #1
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	085b      	lsrs	r3, r3, #1
 800344a:	441a      	add	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	fbb2 f3f3 	udiv	r3, r2, r3
 8003454:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	2b0f      	cmp	r3, #15
 800345a:	d916      	bls.n	800348a <UART_SetConfig+0x4a6>
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003462:	d212      	bcs.n	800348a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	b29b      	uxth	r3, r3
 8003468:	f023 030f 	bic.w	r3, r3, #15
 800346c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	085b      	lsrs	r3, r3, #1
 8003472:	b29b      	uxth	r3, r3
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	b29a      	uxth	r2, r3
 800347a:	8afb      	ldrh	r3, [r7, #22]
 800347c:	4313      	orrs	r3, r2
 800347e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	8afa      	ldrh	r2, [r7, #22]
 8003486:	60da      	str	r2, [r3, #12]
 8003488:	e052      	b.n	8003530 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003490:	e04e      	b.n	8003530 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003492:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003496:	2b08      	cmp	r3, #8
 8003498:	d827      	bhi.n	80034ea <UART_SetConfig+0x506>
 800349a:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <UART_SetConfig+0x4bc>)
 800349c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a0:	080034c5 	.word	0x080034c5
 80034a4:	080034cd 	.word	0x080034cd
 80034a8:	080034d5 	.word	0x080034d5
 80034ac:	080034eb 	.word	0x080034eb
 80034b0:	080034db 	.word	0x080034db
 80034b4:	080034eb 	.word	0x080034eb
 80034b8:	080034eb 	.word	0x080034eb
 80034bc:	080034eb 	.word	0x080034eb
 80034c0:	080034e3 	.word	0x080034e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034c4:	f7fe fcf4 	bl	8001eb0 <HAL_RCC_GetPCLK1Freq>
 80034c8:	61f8      	str	r0, [r7, #28]
        break;
 80034ca:	e014      	b.n	80034f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034cc:	f7fe fd06 	bl	8001edc <HAL_RCC_GetPCLK2Freq>
 80034d0:	61f8      	str	r0, [r7, #28]
        break;
 80034d2:	e010      	b.n	80034f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034d4:	4b1e      	ldr	r3, [pc, #120]	; (8003550 <UART_SetConfig+0x56c>)
 80034d6:	61fb      	str	r3, [r7, #28]
        break;
 80034d8:	e00d      	b.n	80034f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034da:	f7fe fc51 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 80034de:	61f8      	str	r0, [r7, #28]
        break;
 80034e0:	e009      	b.n	80034f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034e6:	61fb      	str	r3, [r7, #28]
        break;
 80034e8:	e005      	b.n	80034f6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80034f4:	bf00      	nop
    }

    if (pclk != 0U)
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d019      	beq.n	8003530 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	085a      	lsrs	r2, r3, #1
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	441a      	add	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	fbb2 f3f3 	udiv	r3, r2, r3
 800350e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	2b0f      	cmp	r3, #15
 8003514:	d909      	bls.n	800352a <UART_SetConfig+0x546>
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351c:	d205      	bcs.n	800352a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	60da      	str	r2, [r3, #12]
 8003528:	e002      	b.n	8003530 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800353c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003540:	4618      	mov	r0, r3
 8003542:	3728      	adds	r7, #40	; 0x28
 8003544:	46bd      	mov	sp, r7
 8003546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800354a:	bf00      	nop
 800354c:	40008000 	.word	0x40008000
 8003550:	00f42400 	.word	0x00f42400

08003554 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00a      	beq.n	800357e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	f003 0320 	and.w	r3, r3, #32
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003630:	2b00      	cmp	r3, #0
 8003632:	d01a      	beq.n	800366a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003652:	d10a      	bne.n	800366a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	605a      	str	r2, [r3, #4]
  }
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af02      	add	r7, sp, #8
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036a8:	f7fd fb7a 	bl	8000da0 <HAL_GetTick>
 80036ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d10e      	bne.n	80036da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f82d 	bl	800372a <UART_WaitOnFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e023      	b.n	8003722 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d10e      	bne.n	8003706 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f817 	bl	800372a <UART_WaitOnFlagUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e00d      	b.n	8003722 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2220      	movs	r2, #32
 800370a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2220      	movs	r2, #32
 8003710:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b09c      	sub	sp, #112	; 0x70
 800372e:	af00      	add	r7, sp, #0
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	603b      	str	r3, [r7, #0]
 8003736:	4613      	mov	r3, r2
 8003738:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800373a:	e0a5      	b.n	8003888 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800373c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800373e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003742:	f000 80a1 	beq.w	8003888 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003746:	f7fd fb2b 	bl	8000da0 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003752:	429a      	cmp	r2, r3
 8003754:	d302      	bcc.n	800375c <UART_WaitOnFlagUntilTimeout+0x32>
 8003756:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003758:	2b00      	cmp	r3, #0
 800375a:	d13e      	bne.n	80037da <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003764:	e853 3f00 	ldrex	r3, [r3]
 8003768:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800376a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800376c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003770:	667b      	str	r3, [r7, #100]	; 0x64
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800377a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800377c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003780:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003782:	e841 2300 	strex	r3, r2, [r1]
 8003786:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1e6      	bne.n	800375c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3308      	adds	r3, #8
 8003794:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003798:	e853 3f00 	ldrex	r3, [r3]
 800379c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800379e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a0:	f023 0301 	bic.w	r3, r3, #1
 80037a4:	663b      	str	r3, [r7, #96]	; 0x60
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3308      	adds	r3, #8
 80037ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80037b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80037b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037b6:	e841 2300 	strex	r3, r2, [r1]
 80037ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80037bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1e5      	bne.n	800378e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2220      	movs	r2, #32
 80037c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2220      	movs	r2, #32
 80037cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e067      	b.n	80038aa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d04f      	beq.n	8003888 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037f6:	d147      	bne.n	8003888 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003800:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380a:	e853 3f00 	ldrex	r3, [r3]
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003816:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003820:	637b      	str	r3, [r7, #52]	; 0x34
 8003822:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003824:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003828:	e841 2300 	strex	r3, r2, [r1]
 800382c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800382e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e6      	bne.n	8003802 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	3308      	adds	r3, #8
 800383a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	e853 3f00 	ldrex	r3, [r3]
 8003842:	613b      	str	r3, [r7, #16]
   return(result);
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f023 0301 	bic.w	r3, r3, #1
 800384a:	66bb      	str	r3, [r7, #104]	; 0x68
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3308      	adds	r3, #8
 8003852:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003854:	623a      	str	r2, [r7, #32]
 8003856:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003858:	69f9      	ldr	r1, [r7, #28]
 800385a:	6a3a      	ldr	r2, [r7, #32]
 800385c:	e841 2300 	strex	r3, r2, [r1]
 8003860:	61bb      	str	r3, [r7, #24]
   return(result);
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1e5      	bne.n	8003834 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2220      	movs	r2, #32
 800386c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2220      	movs	r2, #32
 8003872:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e010      	b.n	80038aa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69da      	ldr	r2, [r3, #28]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	4013      	ands	r3, r2
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	429a      	cmp	r2, r3
 8003896:	bf0c      	ite	eq
 8003898:	2301      	moveq	r3, #1
 800389a:	2300      	movne	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	461a      	mov	r2, r3
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	f43f af4a 	beq.w	800373c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3770      	adds	r7, #112	; 0x70
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <__NVIC_SetPriority>:
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	6039      	str	r1, [r7, #0]
 80038be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	db0a      	blt.n	80038de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	490c      	ldr	r1, [pc, #48]	; (8003900 <__NVIC_SetPriority+0x4c>)
 80038ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d2:	0112      	lsls	r2, r2, #4
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	440b      	add	r3, r1
 80038d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80038dc:	e00a      	b.n	80038f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <__NVIC_SetPriority+0x50>)
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	3b04      	subs	r3, #4
 80038ec:	0112      	lsls	r2, r2, #4
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	440b      	add	r3, r1
 80038f2:	761a      	strb	r2, [r3, #24]
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	e000e100 	.word	0xe000e100
 8003904:	e000ed00 	.word	0xe000ed00

08003908 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800390c:	4b05      	ldr	r3, [pc, #20]	; (8003924 <SysTick_Handler+0x1c>)
 800390e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003910:	f001 ff20 	bl	8005754 <xTaskGetSchedulerState>
 8003914:	4603      	mov	r3, r0
 8003916:	2b01      	cmp	r3, #1
 8003918:	d001      	beq.n	800391e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800391a:	f002 fd05 	bl	8006328 <xPortSysTickHandler>
  }
}
 800391e:	bf00      	nop
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	e000e010 	.word	0xe000e010

08003928 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800392c:	2100      	movs	r1, #0
 800392e:	f06f 0004 	mvn.w	r0, #4
 8003932:	f7ff ffbf 	bl	80038b4 <__NVIC_SetPriority>
#endif
}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003942:	f3ef 8305 	mrs	r3, IPSR
 8003946:	603b      	str	r3, [r7, #0]
  return(result);
 8003948:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800394e:	f06f 0305 	mvn.w	r3, #5
 8003952:	607b      	str	r3, [r7, #4]
 8003954:	e00c      	b.n	8003970 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003956:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <osKernelInitialize+0x44>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d105      	bne.n	800396a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800395e:	4b08      	ldr	r3, [pc, #32]	; (8003980 <osKernelInitialize+0x44>)
 8003960:	2201      	movs	r2, #1
 8003962:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003964:	2300      	movs	r3, #0
 8003966:	607b      	str	r3, [r7, #4]
 8003968:	e002      	b.n	8003970 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800396a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800396e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003970:	687b      	ldr	r3, [r7, #4]
}
 8003972:	4618      	mov	r0, r3
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	2000017c 	.word	0x2000017c

08003984 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800398a:	f3ef 8305 	mrs	r3, IPSR
 800398e:	603b      	str	r3, [r7, #0]
  return(result);
 8003990:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003996:	f06f 0305 	mvn.w	r3, #5
 800399a:	607b      	str	r3, [r7, #4]
 800399c:	e010      	b.n	80039c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800399e:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <osKernelStart+0x48>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d109      	bne.n	80039ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80039a6:	f7ff ffbf 	bl	8003928 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80039aa:	4b08      	ldr	r3, [pc, #32]	; (80039cc <osKernelStart+0x48>)
 80039ac:	2202      	movs	r2, #2
 80039ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80039b0:	f001 fa74 	bl	8004e9c <vTaskStartScheduler>
      stat = osOK;
 80039b4:	2300      	movs	r3, #0
 80039b6:	607b      	str	r3, [r7, #4]
 80039b8:	e002      	b.n	80039c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80039ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80039c0:	687b      	ldr	r3, [r7, #4]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	2000017c 	.word	0x2000017c

080039d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08e      	sub	sp, #56	; 0x38
 80039d4:	af04      	add	r7, sp, #16
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80039dc:	2300      	movs	r3, #0
 80039de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039e0:	f3ef 8305 	mrs	r3, IPSR
 80039e4:	617b      	str	r3, [r7, #20]
  return(result);
 80039e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d17e      	bne.n	8003aea <osThreadNew+0x11a>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d07b      	beq.n	8003aea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80039f2:	2380      	movs	r3, #128	; 0x80
 80039f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80039f6:	2318      	movs	r3, #24
 80039f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80039fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a02:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d045      	beq.n	8003a96 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <osThreadNew+0x48>
        name = attr->name;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d008      	beq.n	8003a3e <osThreadNew+0x6e>
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	2b38      	cmp	r3, #56	; 0x38
 8003a30:	d805      	bhi.n	8003a3e <osThreadNew+0x6e>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <osThreadNew+0x72>
        return (NULL);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	e054      	b.n	8003aec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	089b      	lsrs	r3, r3, #2
 8003a50:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00e      	beq.n	8003a78 <osThreadNew+0xa8>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	2bbb      	cmp	r3, #187	; 0xbb
 8003a60:	d90a      	bls.n	8003a78 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d006      	beq.n	8003a78 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <osThreadNew+0xa8>
        mem = 1;
 8003a72:	2301      	movs	r3, #1
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	e010      	b.n	8003a9a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10c      	bne.n	8003a9a <osThreadNew+0xca>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d108      	bne.n	8003a9a <osThreadNew+0xca>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d104      	bne.n	8003a9a <osThreadNew+0xca>
          mem = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61bb      	str	r3, [r7, #24]
 8003a94:	e001      	b.n	8003a9a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d110      	bne.n	8003ac2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003aa8:	9202      	str	r2, [sp, #8]
 8003aaa:	9301      	str	r3, [sp, #4]
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	6a3a      	ldr	r2, [r7, #32]
 8003ab4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f001 f838 	bl	8004b2c <xTaskCreateStatic>
 8003abc:	4603      	mov	r3, r0
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	e013      	b.n	8003aea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d110      	bne.n	8003aea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	f107 0310 	add.w	r3, r7, #16
 8003ad0:	9301      	str	r3, [sp, #4]
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f001 f883 	bl	8004be6 <xTaskCreate>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d001      	beq.n	8003aea <osThreadNew+0x11a>
            hTask = NULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003aea:	693b      	ldr	r3, [r7, #16]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3728      	adds	r7, #40	; 0x28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08a      	sub	sp, #40	; 0x28
 8003af8:	af02      	add	r7, sp, #8
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b04:	f3ef 8305 	mrs	r3, IPSR
 8003b08:	613b      	str	r3, [r7, #16]
  return(result);
 8003b0a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d15f      	bne.n	8003bd0 <osMessageQueueNew+0xdc>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d05c      	beq.n	8003bd0 <osMessageQueueNew+0xdc>
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d059      	beq.n	8003bd0 <osMessageQueueNew+0xdc>
    mem = -1;
 8003b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b20:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d029      	beq.n	8003b7c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d012      	beq.n	8003b56 <osMessageQueueNew+0x62>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	2b4f      	cmp	r3, #79	; 0x4f
 8003b36:	d90e      	bls.n	8003b56 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	695a      	ldr	r2, [r3, #20]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	68b9      	ldr	r1, [r7, #8]
 8003b48:	fb01 f303 	mul.w	r3, r1, r3
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d302      	bcc.n	8003b56 <osMessageQueueNew+0x62>
        mem = 1;
 8003b50:	2301      	movs	r3, #1
 8003b52:	61bb      	str	r3, [r7, #24]
 8003b54:	e014      	b.n	8003b80 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d110      	bne.n	8003b80 <osMessageQueueNew+0x8c>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10c      	bne.n	8003b80 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d108      	bne.n	8003b80 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d104      	bne.n	8003b80 <osMessageQueueNew+0x8c>
          mem = 0;
 8003b76:	2300      	movs	r3, #0
 8003b78:	61bb      	str	r3, [r7, #24]
 8003b7a:	e001      	b.n	8003b80 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d10b      	bne.n	8003b9e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2100      	movs	r1, #0
 8003b90:	9100      	str	r1, [sp, #0]
 8003b92:	68b9      	ldr	r1, [r7, #8]
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 fa4f 	bl	8004038 <xQueueGenericCreateStatic>
 8003b9a:	61f8      	str	r0, [r7, #28]
 8003b9c:	e008      	b.n	8003bb0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d105      	bne.n	8003bb0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	68b9      	ldr	r1, [r7, #8]
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 fabd 	bl	8004128 <xQueueGenericCreate>
 8003bae:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00c      	beq.n	8003bd0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <osMessageQueueNew+0xd0>
        name = attr->name;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	e001      	b.n	8003bc8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003bc8:	6979      	ldr	r1, [r7, #20]
 8003bca:	69f8      	ldr	r0, [r7, #28]
 8003bcc:	f000 ff50 	bl	8004a70 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003bd0:	69fb      	ldr	r3, [r7, #28]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3720      	adds	r7, #32
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	4613      	mov	r3, r2
 8003bea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bf4:	f3ef 8305 	mrs	r3, IPSR
 8003bf8:	617b      	str	r3, [r7, #20]
  return(result);
 8003bfa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d028      	beq.n	8003c52 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <osMessageQueuePut+0x36>
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <osMessageQueuePut+0x36>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003c12:	f06f 0303 	mvn.w	r3, #3
 8003c16:	61fb      	str	r3, [r7, #28]
 8003c18:	e038      	b.n	8003c8c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003c1e:	f107 0210 	add.w	r2, r7, #16
 8003c22:	2300      	movs	r3, #0
 8003c24:	68b9      	ldr	r1, [r7, #8]
 8003c26:	69b8      	ldr	r0, [r7, #24]
 8003c28:	f000 fbda 	bl	80043e0 <xQueueGenericSendFromISR>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d003      	beq.n	8003c3a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003c32:	f06f 0302 	mvn.w	r3, #2
 8003c36:	61fb      	str	r3, [r7, #28]
 8003c38:	e028      	b.n	8003c8c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d025      	beq.n	8003c8c <osMessageQueuePut+0xb0>
 8003c40:	4b15      	ldr	r3, [pc, #84]	; (8003c98 <osMessageQueuePut+0xbc>)
 8003c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	e01c      	b.n	8003c8c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <osMessageQueuePut+0x82>
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d103      	bne.n	8003c66 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003c5e:	f06f 0303 	mvn.w	r3, #3
 8003c62:	61fb      	str	r3, [r7, #28]
 8003c64:	e012      	b.n	8003c8c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003c66:	2300      	movs	r3, #0
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	68b9      	ldr	r1, [r7, #8]
 8003c6c:	69b8      	ldr	r0, [r7, #24]
 8003c6e:	f000 fab9 	bl	80041e4 <xQueueGenericSend>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d009      	beq.n	8003c8c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003c7e:	f06f 0301 	mvn.w	r3, #1
 8003c82:	61fb      	str	r3, [r7, #28]
 8003c84:	e002      	b.n	8003c8c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003c86:	f06f 0302 	mvn.w	r3, #2
 8003c8a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003c8c:	69fb      	ldr	r3, [r7, #28]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3720      	adds	r7, #32
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	e000ed04 	.word	0xe000ed04

08003c9c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cb2:	f3ef 8305 	mrs	r3, IPSR
 8003cb6:	617b      	str	r3, [r7, #20]
  return(result);
 8003cb8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d028      	beq.n	8003d10 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <osMessageQueueGet+0x34>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <osMessageQueueGet+0x34>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003cd0:	f06f 0303 	mvn.w	r3, #3
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	e037      	b.n	8003d48 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003cdc:	f107 0310 	add.w	r3, r7, #16
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	68b9      	ldr	r1, [r7, #8]
 8003ce4:	69b8      	ldr	r0, [r7, #24]
 8003ce6:	f000 fcf7 	bl	80046d8 <xQueueReceiveFromISR>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d003      	beq.n	8003cf8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003cf0:	f06f 0302 	mvn.w	r3, #2
 8003cf4:	61fb      	str	r3, [r7, #28]
 8003cf6:	e027      	b.n	8003d48 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d024      	beq.n	8003d48 <osMessageQueueGet+0xac>
 8003cfe:	4b15      	ldr	r3, [pc, #84]	; (8003d54 <osMessageQueueGet+0xb8>)
 8003d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	e01b      	b.n	8003d48 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <osMessageQueueGet+0x80>
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d103      	bne.n	8003d24 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003d1c:	f06f 0303 	mvn.w	r3, #3
 8003d20:	61fb      	str	r3, [r7, #28]
 8003d22:	e011      	b.n	8003d48 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	68b9      	ldr	r1, [r7, #8]
 8003d28:	69b8      	ldr	r0, [r7, #24]
 8003d2a:	f000 fbf5 	bl	8004518 <xQueueReceive>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d009      	beq.n	8003d48 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003d3a:	f06f 0301 	mvn.w	r3, #1
 8003d3e:	61fb      	str	r3, [r7, #28]
 8003d40:	e002      	b.n	8003d48 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003d42:	f06f 0302 	mvn.w	r3, #2
 8003d46:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003d48:	69fb      	ldr	r3, [r7, #28]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3720      	adds	r7, #32
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	e000ed04 	.word	0xe000ed04

08003d58 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d102      	bne.n	8003d70 <osMessageQueueGetCount+0x18>
    count = 0U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	e00e      	b.n	8003d8e <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d70:	f3ef 8305 	mrs	r3, IPSR
 8003d74:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d76:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d004      	beq.n	8003d86 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8003d7c:	6938      	ldr	r0, [r7, #16]
 8003d7e:	f000 fd49 	bl	8004814 <uxQueueMessagesWaitingFromISR>
 8003d82:	6178      	str	r0, [r7, #20]
 8003d84:	e003      	b.n	8003d8e <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8003d86:	6938      	ldr	r0, [r7, #16]
 8003d88:	f000 fd26 	bl	80047d8 <uxQueueMessagesWaiting>
 8003d8c:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8003d8e:	697b      	ldr	r3, [r7, #20]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4a07      	ldr	r2, [pc, #28]	; (8003dc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003da8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	4a06      	ldr	r2, [pc, #24]	; (8003dc8 <vApplicationGetIdleTaskMemory+0x30>)
 8003dae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2280      	movs	r2, #128	; 0x80
 8003db4:	601a      	str	r2, [r3, #0]
}
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	20000180 	.word	0x20000180
 8003dc8:	2000023c 	.word	0x2000023c

08003dcc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4a07      	ldr	r2, [pc, #28]	; (8003df8 <vApplicationGetTimerTaskMemory+0x2c>)
 8003ddc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	4a06      	ldr	r2, [pc, #24]	; (8003dfc <vApplicationGetTimerTaskMemory+0x30>)
 8003de2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dea:	601a      	str	r2, [r3, #0]
}
 8003dec:	bf00      	nop
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	2000043c 	.word	0x2000043c
 8003dfc:	200004f8 	.word	0x200004f8

08003e00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f103 0208 	add.w	r2, r3, #8
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f103 0208 	add.w	r2, r3, #8
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f103 0208 	add.w	r2, r3, #8
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b085      	sub	sp, #20
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	601a      	str	r2, [r3, #0]
}
 8003e96:	bf00      	nop
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b085      	sub	sp, #20
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eb8:	d103      	bne.n	8003ec2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	e00c      	b.n	8003edc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3308      	adds	r3, #8
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	e002      	b.n	8003ed0 <vListInsert+0x2e>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d2f6      	bcs.n	8003eca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	601a      	str	r2, [r3, #0]
}
 8003f08:	bf00      	nop
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6892      	ldr	r2, [r2, #8]
 8003f2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6852      	ldr	r2, [r2, #4]
 8003f34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d103      	bne.n	8003f48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	1e5a      	subs	r2, r3, #1
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10a      	bne.n	8003f92 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f80:	f383 8811 	msr	BASEPRI, r3
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f8e:	bf00      	nop
 8003f90:	e7fe      	b.n	8003f90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f92:	f002 f937 	bl	8006204 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9e:	68f9      	ldr	r1, [r7, #12]
 8003fa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fa2:	fb01 f303 	mul.w	r3, r1, r3
 8003fa6:	441a      	add	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	68f9      	ldr	r1, [r7, #12]
 8003fc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fc8:	fb01 f303 	mul.w	r3, r1, r3
 8003fcc:	441a      	add	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	22ff      	movs	r2, #255	; 0xff
 8003fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	22ff      	movs	r2, #255	; 0xff
 8003fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d114      	bne.n	8004012 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d01a      	beq.n	8004026 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	3310      	adds	r3, #16
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f001 f9eb 	bl	80053d0 <xTaskRemoveFromEventList>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d012      	beq.n	8004026 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004000:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <xQueueGenericReset+0xcc>)
 8004002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	e009      	b.n	8004026 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3310      	adds	r3, #16
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff fef2 	bl	8003e00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	3324      	adds	r3, #36	; 0x24
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff feed 	bl	8003e00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004026:	f002 f91d 	bl	8006264 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800402a:	2301      	movs	r3, #1
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	e000ed04 	.word	0xe000ed04

08004038 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004038:	b580      	push	{r7, lr}
 800403a:	b08e      	sub	sp, #56	; 0x38
 800403c:	af02      	add	r7, sp, #8
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10a      	bne.n	8004062 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800404c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800405e:	bf00      	nop
 8004060:	e7fe      	b.n	8004060 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10a      	bne.n	800407e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	627b      	str	r3, [r7, #36]	; 0x24
}
 800407a:	bf00      	nop
 800407c:	e7fe      	b.n	800407c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <xQueueGenericCreateStatic+0x52>
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <xQueueGenericCreateStatic+0x56>
 800408a:	2301      	movs	r3, #1
 800408c:	e000      	b.n	8004090 <xQueueGenericCreateStatic+0x58>
 800408e:	2300      	movs	r3, #0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10a      	bne.n	80040aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	623b      	str	r3, [r7, #32]
}
 80040a6:	bf00      	nop
 80040a8:	e7fe      	b.n	80040a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d102      	bne.n	80040b6 <xQueueGenericCreateStatic+0x7e>
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <xQueueGenericCreateStatic+0x82>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <xQueueGenericCreateStatic+0x84>
 80040ba:	2300      	movs	r3, #0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10a      	bne.n	80040d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	61fb      	str	r3, [r7, #28]
}
 80040d2:	bf00      	nop
 80040d4:	e7fe      	b.n	80040d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80040d6:	2350      	movs	r3, #80	; 0x50
 80040d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b50      	cmp	r3, #80	; 0x50
 80040de:	d00a      	beq.n	80040f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80040e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	61bb      	str	r3, [r7, #24]
}
 80040f2:	bf00      	nop
 80040f4:	e7fe      	b.n	80040f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80040f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80040fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00d      	beq.n	800411e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800410a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800410e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	4613      	mov	r3, r2
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	68b9      	ldr	r1, [r7, #8]
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 f83f 	bl	800419c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800411e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004120:	4618      	mov	r0, r3
 8004122:	3730      	adds	r7, #48	; 0x30
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08a      	sub	sp, #40	; 0x28
 800412c:	af02      	add	r7, sp, #8
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	4613      	mov	r3, r2
 8004134:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10a      	bne.n	8004152 <xQueueGenericCreate+0x2a>
	__asm volatile
 800413c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	613b      	str	r3, [r7, #16]
}
 800414e:	bf00      	nop
 8004150:	e7fe      	b.n	8004150 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	fb02 f303 	mul.w	r3, r2, r3
 800415a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	3350      	adds	r3, #80	; 0x50
 8004160:	4618      	mov	r0, r3
 8004162:	f002 f971 	bl	8006448 <pvPortMalloc>
 8004166:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d011      	beq.n	8004192 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	3350      	adds	r3, #80	; 0x50
 8004176:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004180:	79fa      	ldrb	r2, [r7, #7]
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	4613      	mov	r3, r2
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 f805 	bl	800419c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004192:	69bb      	ldr	r3, [r7, #24]
	}
 8004194:	4618      	mov	r0, r3
 8004196:	3720      	adds	r7, #32
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d103      	bne.n	80041b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	e002      	b.n	80041be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80041ca:	2101      	movs	r1, #1
 80041cc:	69b8      	ldr	r0, [r7, #24]
 80041ce:	f7ff fecb 	bl	8003f68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	78fa      	ldrb	r2, [r7, #3]
 80041d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80041da:	bf00      	nop
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08e      	sub	sp, #56	; 0x38
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80041f2:	2300      	movs	r3, #0
 80041f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10a      	bne.n	8004216 <xQueueGenericSend+0x32>
	__asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004212:	bf00      	nop
 8004214:	e7fe      	b.n	8004214 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d103      	bne.n	8004224 <xQueueGenericSend+0x40>
 800421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <xQueueGenericSend+0x44>
 8004224:	2301      	movs	r3, #1
 8004226:	e000      	b.n	800422a <xQueueGenericSend+0x46>
 8004228:	2300      	movs	r3, #0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10a      	bne.n	8004244 <xQueueGenericSend+0x60>
	__asm volatile
 800422e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004240:	bf00      	nop
 8004242:	e7fe      	b.n	8004242 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d103      	bne.n	8004252 <xQueueGenericSend+0x6e>
 800424a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424e:	2b01      	cmp	r3, #1
 8004250:	d101      	bne.n	8004256 <xQueueGenericSend+0x72>
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <xQueueGenericSend+0x74>
 8004256:	2300      	movs	r3, #0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10a      	bne.n	8004272 <xQueueGenericSend+0x8e>
	__asm volatile
 800425c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	623b      	str	r3, [r7, #32]
}
 800426e:	bf00      	nop
 8004270:	e7fe      	b.n	8004270 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004272:	f001 fa6f 	bl	8005754 <xTaskGetSchedulerState>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d102      	bne.n	8004282 <xQueueGenericSend+0x9e>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <xQueueGenericSend+0xa2>
 8004282:	2301      	movs	r3, #1
 8004284:	e000      	b.n	8004288 <xQueueGenericSend+0xa4>
 8004286:	2300      	movs	r3, #0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10a      	bne.n	80042a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800428c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004290:	f383 8811 	msr	BASEPRI, r3
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	61fb      	str	r3, [r7, #28]
}
 800429e:	bf00      	nop
 80042a0:	e7fe      	b.n	80042a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042a2:	f001 ffaf 	bl	8006204 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d302      	bcc.n	80042b8 <xQueueGenericSend+0xd4>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d129      	bne.n	800430c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	68b9      	ldr	r1, [r7, #8]
 80042bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042be:	f000 fac7 	bl	8004850 <prvCopyDataToQueue>
 80042c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d010      	beq.n	80042ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ce:	3324      	adds	r3, #36	; 0x24
 80042d0:	4618      	mov	r0, r3
 80042d2:	f001 f87d 	bl	80053d0 <xTaskRemoveFromEventList>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d013      	beq.n	8004304 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80042dc:	4b3f      	ldr	r3, [pc, #252]	; (80043dc <xQueueGenericSend+0x1f8>)
 80042de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	e00a      	b.n	8004304 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80042ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d007      	beq.n	8004304 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80042f4:	4b39      	ldr	r3, [pc, #228]	; (80043dc <xQueueGenericSend+0x1f8>)
 80042f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004304:	f001 ffae 	bl	8006264 <vPortExitCritical>
				return pdPASS;
 8004308:	2301      	movs	r3, #1
 800430a:	e063      	b.n	80043d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d103      	bne.n	800431a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004312:	f001 ffa7 	bl	8006264 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004316:	2300      	movs	r3, #0
 8004318:	e05c      	b.n	80043d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800431a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431c:	2b00      	cmp	r3, #0
 800431e:	d106      	bne.n	800432e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004320:	f107 0314 	add.w	r3, r7, #20
 8004324:	4618      	mov	r0, r3
 8004326:	f001 f8b7 	bl	8005498 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800432a:	2301      	movs	r3, #1
 800432c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800432e:	f001 ff99 	bl	8006264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004332:	f000 fe23 	bl	8004f7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004336:	f001 ff65 	bl	8006204 <vPortEnterCritical>
 800433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004340:	b25b      	sxtb	r3, r3
 8004342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004346:	d103      	bne.n	8004350 <xQueueGenericSend+0x16c>
 8004348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004352:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004356:	b25b      	sxtb	r3, r3
 8004358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800435c:	d103      	bne.n	8004366 <xQueueGenericSend+0x182>
 800435e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004366:	f001 ff7d 	bl	8006264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800436a:	1d3a      	adds	r2, r7, #4
 800436c:	f107 0314 	add.w	r3, r7, #20
 8004370:	4611      	mov	r1, r2
 8004372:	4618      	mov	r0, r3
 8004374:	f001 f8a6 	bl	80054c4 <xTaskCheckForTimeOut>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d124      	bne.n	80043c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800437e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004380:	f000 fb5e 	bl	8004a40 <prvIsQueueFull>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d018      	beq.n	80043bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438c:	3310      	adds	r3, #16
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	4611      	mov	r1, r2
 8004392:	4618      	mov	r0, r3
 8004394:	f000 ffcc 	bl	8005330 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800439a:	f000 fae9 	bl	8004970 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800439e:	f000 fdfb 	bl	8004f98 <xTaskResumeAll>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f47f af7c 	bne.w	80042a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80043aa:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <xQueueGenericSend+0x1f8>)
 80043ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	e772      	b.n	80042a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80043bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043be:	f000 fad7 	bl	8004970 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043c2:	f000 fde9 	bl	8004f98 <xTaskResumeAll>
 80043c6:	e76c      	b.n	80042a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80043c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043ca:	f000 fad1 	bl	8004970 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043ce:	f000 fde3 	bl	8004f98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80043d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3738      	adds	r7, #56	; 0x38
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	e000ed04 	.word	0xe000ed04

080043e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b090      	sub	sp, #64	; 0x40
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80043f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10a      	bne.n	800440e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80043f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fc:	f383 8811 	msr	BASEPRI, r3
 8004400:	f3bf 8f6f 	isb	sy
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800440a:	bf00      	nop
 800440c:	e7fe      	b.n	800440c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d103      	bne.n	800441c <xQueueGenericSendFromISR+0x3c>
 8004414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <xQueueGenericSendFromISR+0x40>
 800441c:	2301      	movs	r3, #1
 800441e:	e000      	b.n	8004422 <xQueueGenericSendFromISR+0x42>
 8004420:	2300      	movs	r3, #0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10a      	bne.n	800443c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004438:	bf00      	nop
 800443a:	e7fe      	b.n	800443a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	2b02      	cmp	r3, #2
 8004440:	d103      	bne.n	800444a <xQueueGenericSendFromISR+0x6a>
 8004442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004446:	2b01      	cmp	r3, #1
 8004448:	d101      	bne.n	800444e <xQueueGenericSendFromISR+0x6e>
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <xQueueGenericSendFromISR+0x70>
 800444e:	2300      	movs	r3, #0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10a      	bne.n	800446a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004458:	f383 8811 	msr	BASEPRI, r3
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	623b      	str	r3, [r7, #32]
}
 8004466:	bf00      	nop
 8004468:	e7fe      	b.n	8004468 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800446a:	f001 ffad 	bl	80063c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800446e:	f3ef 8211 	mrs	r2, BASEPRI
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	61fa      	str	r2, [r7, #28]
 8004484:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004486:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004488:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800448a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800448e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004492:	429a      	cmp	r2, r3
 8004494:	d302      	bcc.n	800449c <xQueueGenericSendFromISR+0xbc>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b02      	cmp	r3, #2
 800449a:	d12f      	bne.n	80044fc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800449c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	68b9      	ldr	r1, [r7, #8]
 80044b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80044b2:	f000 f9cd 	bl	8004850 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80044b6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80044ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044be:	d112      	bne.n	80044e6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d016      	beq.n	80044f6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ca:	3324      	adds	r3, #36	; 0x24
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 ff7f 	bl	80053d0 <xTaskRemoveFromEventList>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00e      	beq.n	80044f6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00b      	beq.n	80044f6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	e007      	b.n	80044f6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044ea:	3301      	adds	r3, #1
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	b25a      	sxtb	r2, r3
 80044f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80044f6:	2301      	movs	r3, #1
 80044f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80044fa:	e001      	b.n	8004500 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80044fc:	2300      	movs	r3, #0
 80044fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004502:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800450a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800450c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800450e:	4618      	mov	r0, r3
 8004510:	3740      	adds	r7, #64	; 0x40
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b08c      	sub	sp, #48	; 0x30
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004524:	2300      	movs	r3, #0
 8004526:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10a      	bne.n	8004548 <xQueueReceive+0x30>
	__asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	623b      	str	r3, [r7, #32]
}
 8004544:	bf00      	nop
 8004546:	e7fe      	b.n	8004546 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d103      	bne.n	8004556 <xQueueReceive+0x3e>
 800454e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <xQueueReceive+0x42>
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <xQueueReceive+0x44>
 800455a:	2300      	movs	r3, #0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10a      	bne.n	8004576 <xQueueReceive+0x5e>
	__asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	61fb      	str	r3, [r7, #28]
}
 8004572:	bf00      	nop
 8004574:	e7fe      	b.n	8004574 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004576:	f001 f8ed 	bl	8005754 <xTaskGetSchedulerState>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d102      	bne.n	8004586 <xQueueReceive+0x6e>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <xQueueReceive+0x72>
 8004586:	2301      	movs	r3, #1
 8004588:	e000      	b.n	800458c <xQueueReceive+0x74>
 800458a:	2300      	movs	r3, #0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10a      	bne.n	80045a6 <xQueueReceive+0x8e>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	61bb      	str	r3, [r7, #24]
}
 80045a2:	bf00      	nop
 80045a4:	e7fe      	b.n	80045a4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045a6:	f001 fe2d 	bl	8006204 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d01f      	beq.n	80045f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80045b6:	68b9      	ldr	r1, [r7, #8]
 80045b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ba:	f000 f9b3 	bl	8004924 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	1e5a      	subs	r2, r3, #1
 80045c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00f      	beq.n	80045ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d0:	3310      	adds	r3, #16
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fefc 	bl	80053d0 <xTaskRemoveFromEventList>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d007      	beq.n	80045ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045de:	4b3d      	ldr	r3, [pc, #244]	; (80046d4 <xQueueReceive+0x1bc>)
 80045e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80045ee:	f001 fe39 	bl	8006264 <vPortExitCritical>
				return pdPASS;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e069      	b.n	80046ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d103      	bne.n	8004604 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045fc:	f001 fe32 	bl	8006264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004600:	2300      	movs	r3, #0
 8004602:	e062      	b.n	80046ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800460a:	f107 0310 	add.w	r3, r7, #16
 800460e:	4618      	mov	r0, r3
 8004610:	f000 ff42 	bl	8005498 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004614:	2301      	movs	r3, #1
 8004616:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004618:	f001 fe24 	bl	8006264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800461c:	f000 fcae 	bl	8004f7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004620:	f001 fdf0 	bl	8006204 <vPortEnterCritical>
 8004624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004626:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800462a:	b25b      	sxtb	r3, r3
 800462c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004630:	d103      	bne.n	800463a <xQueueReceive+0x122>
 8004632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004640:	b25b      	sxtb	r3, r3
 8004642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004646:	d103      	bne.n	8004650 <xQueueReceive+0x138>
 8004648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004650:	f001 fe08 	bl	8006264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004654:	1d3a      	adds	r2, r7, #4
 8004656:	f107 0310 	add.w	r3, r7, #16
 800465a:	4611      	mov	r1, r2
 800465c:	4618      	mov	r0, r3
 800465e:	f000 ff31 	bl	80054c4 <xTaskCheckForTimeOut>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d123      	bne.n	80046b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800466a:	f000 f9d3 	bl	8004a14 <prvIsQueueEmpty>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d017      	beq.n	80046a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004676:	3324      	adds	r3, #36	; 0x24
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	4611      	mov	r1, r2
 800467c:	4618      	mov	r0, r3
 800467e:	f000 fe57 	bl	8005330 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004682:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004684:	f000 f974 	bl	8004970 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004688:	f000 fc86 	bl	8004f98 <xTaskResumeAll>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d189      	bne.n	80045a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004692:	4b10      	ldr	r3, [pc, #64]	; (80046d4 <xQueueReceive+0x1bc>)
 8004694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	e780      	b.n	80045a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80046a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046a6:	f000 f963 	bl	8004970 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046aa:	f000 fc75 	bl	8004f98 <xTaskResumeAll>
 80046ae:	e77a      	b.n	80045a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80046b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046b2:	f000 f95d 	bl	8004970 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046b6:	f000 fc6f 	bl	8004f98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046bc:	f000 f9aa 	bl	8004a14 <prvIsQueueEmpty>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f43f af6f 	beq.w	80045a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3730      	adds	r7, #48	; 0x30
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	e000ed04 	.word	0xe000ed04

080046d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b08e      	sub	sp, #56	; 0x38
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10a      	bne.n	8004704 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80046ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	623b      	str	r3, [r7, #32]
}
 8004700:	bf00      	nop
 8004702:	e7fe      	b.n	8004702 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d103      	bne.n	8004712 <xQueueReceiveFromISR+0x3a>
 800470a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <xQueueReceiveFromISR+0x3e>
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <xQueueReceiveFromISR+0x40>
 8004716:	2300      	movs	r3, #0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10a      	bne.n	8004732 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800471c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	61fb      	str	r3, [r7, #28]
}
 800472e:	bf00      	nop
 8004730:	e7fe      	b.n	8004730 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004732:	f001 fe49 	bl	80063c8 <vPortValidateInterruptPriority>
	__asm volatile
 8004736:	f3ef 8211 	mrs	r2, BASEPRI
 800473a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473e:	f383 8811 	msr	BASEPRI, r3
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	f3bf 8f4f 	dsb	sy
 800474a:	61ba      	str	r2, [r7, #24]
 800474c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800474e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004750:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004756:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	2b00      	cmp	r3, #0
 800475c:	d02f      	beq.n	80047be <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004760:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004768:	68b9      	ldr	r1, [r7, #8]
 800476a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800476c:	f000 f8da 	bl	8004924 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004772:	1e5a      	subs	r2, r3, #1
 8004774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004776:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004778:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800477c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004780:	d112      	bne.n	80047a8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d016      	beq.n	80047b8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	3310      	adds	r3, #16
 800478e:	4618      	mov	r0, r3
 8004790:	f000 fe1e 	bl	80053d0 <xTaskRemoveFromEventList>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00e      	beq.n	80047b8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00b      	beq.n	80047b8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	e007      	b.n	80047b8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80047a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047ac:	3301      	adds	r3, #1
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	b25a      	sxtb	r2, r3
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80047b8:	2301      	movs	r3, #1
 80047ba:	637b      	str	r3, [r7, #52]	; 0x34
 80047bc:	e001      	b.n	80047c2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80047be:	2300      	movs	r3, #0
 80047c0:	637b      	str	r3, [r7, #52]	; 0x34
 80047c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f383 8811 	msr	BASEPRI, r3
}
 80047cc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3738      	adds	r7, #56	; 0x38
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10a      	bne.n	80047fc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80047e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ea:	f383 8811 	msr	BASEPRI, r3
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	f3bf 8f4f 	dsb	sy
 80047f6:	60bb      	str	r3, [r7, #8]
}
 80047f8:	bf00      	nop
 80047fa:	e7fe      	b.n	80047fa <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80047fc:	f001 fd02 	bl	8006204 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004804:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8004806:	f001 fd2d 	bl	8006264 <vPortExitCritical>

	return uxReturn;
 800480a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10a      	bne.n	800483c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	60fb      	str	r3, [r7, #12]
}
 8004838:	bf00      	nop
 800483a:	e7fe      	b.n	800483a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004840:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8004842:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004844:	4618      	mov	r0, r3
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800485c:	2300      	movs	r3, #0
 800485e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004864:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10d      	bne.n	800488a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d14d      	bne.n	8004912 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	4618      	mov	r0, r3
 800487c:	f000 ff88 	bl	8005790 <xTaskPriorityDisinherit>
 8004880:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	609a      	str	r2, [r3, #8]
 8004888:	e043      	b.n	8004912 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d119      	bne.n	80048c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6858      	ldr	r0, [r3, #4]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004898:	461a      	mov	r2, r3
 800489a:	68b9      	ldr	r1, [r7, #8]
 800489c:	f002 f8e1 	bl	8006a62 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	441a      	add	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d32b      	bcc.n	8004912 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	605a      	str	r2, [r3, #4]
 80048c2:	e026      	b.n	8004912 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	68d8      	ldr	r0, [r3, #12]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048cc:	461a      	mov	r2, r3
 80048ce:	68b9      	ldr	r1, [r7, #8]
 80048d0:	f002 f8c7 	bl	8006a62 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	68da      	ldr	r2, [r3, #12]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	425b      	negs	r3, r3
 80048de:	441a      	add	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d207      	bcs.n	8004900 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f8:	425b      	negs	r3, r3
 80048fa:	441a      	add	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d105      	bne.n	8004912 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	3b01      	subs	r3, #1
 8004910:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800491a:	697b      	ldr	r3, [r7, #20]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	2b00      	cmp	r3, #0
 8004934:	d018      	beq.n	8004968 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	441a      	add	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	429a      	cmp	r2, r3
 800494e:	d303      	bcc.n	8004958 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68d9      	ldr	r1, [r3, #12]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	461a      	mov	r2, r3
 8004962:	6838      	ldr	r0, [r7, #0]
 8004964:	f002 f87d 	bl	8006a62 <memcpy>
	}
}
 8004968:	bf00      	nop
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004978:	f001 fc44 	bl	8006204 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004982:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004984:	e011      	b.n	80049aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	2b00      	cmp	r3, #0
 800498c:	d012      	beq.n	80049b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	3324      	adds	r3, #36	; 0x24
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fd1c 	bl	80053d0 <xTaskRemoveFromEventList>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800499e:	f000 fdf3 	bl	8005588 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	dce9      	bgt.n	8004986 <prvUnlockQueue+0x16>
 80049b2:	e000      	b.n	80049b6 <prvUnlockQueue+0x46>
					break;
 80049b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	22ff      	movs	r2, #255	; 0xff
 80049ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80049be:	f001 fc51 	bl	8006264 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80049c2:	f001 fc1f 	bl	8006204 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049ce:	e011      	b.n	80049f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d012      	beq.n	80049fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3310      	adds	r3, #16
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 fcf7 	bl	80053d0 <xTaskRemoveFromEventList>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80049e8:	f000 fdce 	bl	8005588 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80049ec:	7bbb      	ldrb	r3, [r7, #14]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	dce9      	bgt.n	80049d0 <prvUnlockQueue+0x60>
 80049fc:	e000      	b.n	8004a00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80049fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	22ff      	movs	r2, #255	; 0xff
 8004a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004a08:	f001 fc2c 	bl	8006264 <vPortExitCritical>
}
 8004a0c:	bf00      	nop
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a1c:	f001 fbf2 	bl	8006204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d102      	bne.n	8004a2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	e001      	b.n	8004a32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a32:	f001 fc17 	bl	8006264 <vPortExitCritical>

	return xReturn;
 8004a36:	68fb      	ldr	r3, [r7, #12]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a48:	f001 fbdc 	bl	8006204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d102      	bne.n	8004a5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	e001      	b.n	8004a62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a62:	f001 fbff 	bl	8006264 <vPortExitCritical>

	return xReturn;
 8004a66:	68fb      	ldr	r3, [r7, #12]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	e014      	b.n	8004aaa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a80:	4a0f      	ldr	r2, [pc, #60]	; (8004ac0 <vQueueAddToRegistry+0x50>)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10b      	bne.n	8004aa4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a8c:	490c      	ldr	r1, [pc, #48]	; (8004ac0 <vQueueAddToRegistry+0x50>)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a96:	4a0a      	ldr	r2, [pc, #40]	; (8004ac0 <vQueueAddToRegistry+0x50>)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	4413      	add	r3, r2
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004aa2:	e006      	b.n	8004ab2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b07      	cmp	r3, #7
 8004aae:	d9e7      	bls.n	8004a80 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ab0:	bf00      	nop
 8004ab2:	bf00      	nop
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	200008f8 	.word	0x200008f8

08004ac4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ad4:	f001 fb96 	bl	8006204 <vPortEnterCritical>
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ade:	b25b      	sxtb	r3, r3
 8004ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ae4:	d103      	bne.n	8004aee <vQueueWaitForMessageRestricted+0x2a>
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004af4:	b25b      	sxtb	r3, r3
 8004af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004afa:	d103      	bne.n	8004b04 <vQueueWaitForMessageRestricted+0x40>
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b04:	f001 fbae 	bl	8006264 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d106      	bne.n	8004b1e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	3324      	adds	r3, #36	; 0x24
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	68b9      	ldr	r1, [r7, #8]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 fc2d 	bl	8005378 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b1e:	6978      	ldr	r0, [r7, #20]
 8004b20:	f7ff ff26 	bl	8004970 <prvUnlockQueue>
	}
 8004b24:	bf00      	nop
 8004b26:	3718      	adds	r7, #24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08e      	sub	sp, #56	; 0x38
 8004b30:	af04      	add	r7, sp, #16
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10a      	bne.n	8004b56 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	623b      	str	r3, [r7, #32]
}
 8004b52:	bf00      	nop
 8004b54:	e7fe      	b.n	8004b54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10a      	bne.n	8004b72 <xTaskCreateStatic+0x46>
	__asm volatile
 8004b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	61fb      	str	r3, [r7, #28]
}
 8004b6e:	bf00      	nop
 8004b70:	e7fe      	b.n	8004b70 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b72:	23bc      	movs	r3, #188	; 0xbc
 8004b74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	2bbc      	cmp	r3, #188	; 0xbc
 8004b7a:	d00a      	beq.n	8004b92 <xTaskCreateStatic+0x66>
	__asm volatile
 8004b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	61bb      	str	r3, [r7, #24]
}
 8004b8e:	bf00      	nop
 8004b90:	e7fe      	b.n	8004b90 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b92:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d01e      	beq.n	8004bd8 <xTaskCreateStatic+0xac>
 8004b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d01b      	beq.n	8004bd8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ba8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	2202      	movs	r2, #2
 8004bae:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	9303      	str	r3, [sp, #12]
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	9302      	str	r3, [sp, #8]
 8004bba:	f107 0314 	add.w	r3, r7, #20
 8004bbe:	9301      	str	r3, [sp, #4]
 8004bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	68b9      	ldr	r1, [r7, #8]
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 f850 	bl	8004c70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bd2:	f000 f8f3 	bl	8004dbc <prvAddNewTaskToReadyList>
 8004bd6:	e001      	b.n	8004bdc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004bdc:	697b      	ldr	r3, [r7, #20]
	}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3728      	adds	r7, #40	; 0x28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b08c      	sub	sp, #48	; 0x30
 8004bea:	af04      	add	r7, sp, #16
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	603b      	str	r3, [r7, #0]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004bf6:	88fb      	ldrh	r3, [r7, #6]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f001 fc24 	bl	8006448 <pvPortMalloc>
 8004c00:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00e      	beq.n	8004c26 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c08:	20bc      	movs	r0, #188	; 0xbc
 8004c0a:	f001 fc1d 	bl	8006448 <pvPortMalloc>
 8004c0e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	631a      	str	r2, [r3, #48]	; 0x30
 8004c1c:	e005      	b.n	8004c2a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c1e:	6978      	ldr	r0, [r7, #20]
 8004c20:	f001 fcde 	bl	80065e0 <vPortFree>
 8004c24:	e001      	b.n	8004c2a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c26:	2300      	movs	r3, #0
 8004c28:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d017      	beq.n	8004c60 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c38:	88fa      	ldrh	r2, [r7, #6]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	9303      	str	r3, [sp, #12]
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	9302      	str	r3, [sp, #8]
 8004c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c44:	9301      	str	r3, [sp, #4]
 8004c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	68b9      	ldr	r1, [r7, #8]
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 f80e 	bl	8004c70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c54:	69f8      	ldr	r0, [r7, #28]
 8004c56:	f000 f8b1 	bl	8004dbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	61bb      	str	r3, [r7, #24]
 8004c5e:	e002      	b.n	8004c66 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c64:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c66:	69bb      	ldr	r3, [r7, #24]
	}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3720      	adds	r7, #32
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b088      	sub	sp, #32
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	461a      	mov	r2, r3
 8004c88:	21a5      	movs	r1, #165	; 0xa5
 8004c8a:	f001 fef8 	bl	8006a7e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	f023 0307 	bic.w	r3, r3, #7
 8004ca6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	617b      	str	r3, [r7, #20]
}
 8004cc4:	bf00      	nop
 8004cc6:	e7fe      	b.n	8004cc6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d01f      	beq.n	8004d0e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61fb      	str	r3, [r7, #28]
 8004cd2:	e012      	b.n	8004cfa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	4413      	add	r3, r2
 8004cda:	7819      	ldrb	r1, [r3, #0]
 8004cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	3334      	adds	r3, #52	; 0x34
 8004ce4:	460a      	mov	r2, r1
 8004ce6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	4413      	add	r3, r2
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d006      	beq.n	8004d02 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	61fb      	str	r3, [r7, #28]
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	2b0f      	cmp	r3, #15
 8004cfe:	d9e9      	bls.n	8004cd4 <prvInitialiseNewTask+0x64>
 8004d00:	e000      	b.n	8004d04 <prvInitialiseNewTask+0x94>
			{
				break;
 8004d02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d0c:	e003      	b.n	8004d16 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d18:	2b37      	cmp	r3, #55	; 0x37
 8004d1a:	d901      	bls.n	8004d20 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d1c:	2337      	movs	r3, #55	; 0x37
 8004d1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2e:	2200      	movs	r2, #0
 8004d30:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d34:	3304      	adds	r3, #4
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7ff f882 	bl	8003e40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3e:	3318      	adds	r3, #24
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff f87d 	bl	8003e40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	3354      	adds	r3, #84	; 0x54
 8004d70:	2260      	movs	r2, #96	; 0x60
 8004d72:	2100      	movs	r1, #0
 8004d74:	4618      	mov	r0, r3
 8004d76:	f001 fe82 	bl	8006a7e <memset>
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7c:	4a0c      	ldr	r2, [pc, #48]	; (8004db0 <prvInitialiseNewTask+0x140>)
 8004d7e:	659a      	str	r2, [r3, #88]	; 0x58
 8004d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d82:	4a0c      	ldr	r2, [pc, #48]	; (8004db4 <prvInitialiseNewTask+0x144>)
 8004d84:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d88:	4a0b      	ldr	r2, [pc, #44]	; (8004db8 <prvInitialiseNewTask+0x148>)
 8004d8a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	68f9      	ldr	r1, [r7, #12]
 8004d90:	69b8      	ldr	r0, [r7, #24]
 8004d92:	f001 f90d 	bl	8005fb0 <pxPortInitialiseStack>
 8004d96:	4602      	mov	r2, r0
 8004d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004da6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004da8:	bf00      	nop
 8004daa:	3720      	adds	r7, #32
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	08007b54 	.word	0x08007b54
 8004db4:	08007b74 	.word	0x08007b74
 8004db8:	08007b34 	.word	0x08007b34

08004dbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004dc4:	f001 fa1e 	bl	8006204 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004dc8:	4b2d      	ldr	r3, [pc, #180]	; (8004e80 <prvAddNewTaskToReadyList+0xc4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	4a2c      	ldr	r2, [pc, #176]	; (8004e80 <prvAddNewTaskToReadyList+0xc4>)
 8004dd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004dd2:	4b2c      	ldr	r3, [pc, #176]	; (8004e84 <prvAddNewTaskToReadyList+0xc8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d109      	bne.n	8004dee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004dda:	4a2a      	ldr	r2, [pc, #168]	; (8004e84 <prvAddNewTaskToReadyList+0xc8>)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004de0:	4b27      	ldr	r3, [pc, #156]	; (8004e80 <prvAddNewTaskToReadyList+0xc4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d110      	bne.n	8004e0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004de8:	f000 fbf2 	bl	80055d0 <prvInitialiseTaskLists>
 8004dec:	e00d      	b.n	8004e0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004dee:	4b26      	ldr	r3, [pc, #152]	; (8004e88 <prvAddNewTaskToReadyList+0xcc>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004df6:	4b23      	ldr	r3, [pc, #140]	; (8004e84 <prvAddNewTaskToReadyList+0xc8>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d802      	bhi.n	8004e0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e04:	4a1f      	ldr	r2, [pc, #124]	; (8004e84 <prvAddNewTaskToReadyList+0xc8>)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e0a:	4b20      	ldr	r3, [pc, #128]	; (8004e8c <prvAddNewTaskToReadyList+0xd0>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	4a1e      	ldr	r2, [pc, #120]	; (8004e8c <prvAddNewTaskToReadyList+0xd0>)
 8004e12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e14:	4b1d      	ldr	r3, [pc, #116]	; (8004e8c <prvAddNewTaskToReadyList+0xd0>)
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e20:	4b1b      	ldr	r3, [pc, #108]	; (8004e90 <prvAddNewTaskToReadyList+0xd4>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d903      	bls.n	8004e30 <prvAddNewTaskToReadyList+0x74>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2c:	4a18      	ldr	r2, [pc, #96]	; (8004e90 <prvAddNewTaskToReadyList+0xd4>)
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e34:	4613      	mov	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4a15      	ldr	r2, [pc, #84]	; (8004e94 <prvAddNewTaskToReadyList+0xd8>)
 8004e3e:	441a      	add	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3304      	adds	r3, #4
 8004e44:	4619      	mov	r1, r3
 8004e46:	4610      	mov	r0, r2
 8004e48:	f7ff f807 	bl	8003e5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e4c:	f001 fa0a 	bl	8006264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e50:	4b0d      	ldr	r3, [pc, #52]	; (8004e88 <prvAddNewTaskToReadyList+0xcc>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00e      	beq.n	8004e76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e58:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <prvAddNewTaskToReadyList+0xc8>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d207      	bcs.n	8004e76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e66:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <prvAddNewTaskToReadyList+0xdc>)
 8004e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e76:	bf00      	nop
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20000e0c 	.word	0x20000e0c
 8004e84:	20000938 	.word	0x20000938
 8004e88:	20000e18 	.word	0x20000e18
 8004e8c:	20000e28 	.word	0x20000e28
 8004e90:	20000e14 	.word	0x20000e14
 8004e94:	2000093c 	.word	0x2000093c
 8004e98:	e000ed04 	.word	0xe000ed04

08004e9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08a      	sub	sp, #40	; 0x28
 8004ea0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004eaa:	463a      	mov	r2, r7
 8004eac:	1d39      	adds	r1, r7, #4
 8004eae:	f107 0308 	add.w	r3, r7, #8
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fe ff70 	bl	8003d98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004eb8:	6839      	ldr	r1, [r7, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	9202      	str	r2, [sp, #8]
 8004ec0:	9301      	str	r3, [sp, #4]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	460a      	mov	r2, r1
 8004eca:	4924      	ldr	r1, [pc, #144]	; (8004f5c <vTaskStartScheduler+0xc0>)
 8004ecc:	4824      	ldr	r0, [pc, #144]	; (8004f60 <vTaskStartScheduler+0xc4>)
 8004ece:	f7ff fe2d 	bl	8004b2c <xTaskCreateStatic>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	4a23      	ldr	r2, [pc, #140]	; (8004f64 <vTaskStartScheduler+0xc8>)
 8004ed6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ed8:	4b22      	ldr	r3, [pc, #136]	; (8004f64 <vTaskStartScheduler+0xc8>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	e001      	b.n	8004eea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d102      	bne.n	8004ef6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004ef0:	f000 fd10 	bl	8005914 <xTimerCreateTimerTask>
 8004ef4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d11b      	bne.n	8004f34 <vTaskStartScheduler+0x98>
	__asm volatile
 8004efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	613b      	str	r3, [r7, #16]
}
 8004f0e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f10:	4b15      	ldr	r3, [pc, #84]	; (8004f68 <vTaskStartScheduler+0xcc>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3354      	adds	r3, #84	; 0x54
 8004f16:	4a15      	ldr	r2, [pc, #84]	; (8004f6c <vTaskStartScheduler+0xd0>)
 8004f18:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f1a:	4b15      	ldr	r3, [pc, #84]	; (8004f70 <vTaskStartScheduler+0xd4>)
 8004f1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f22:	4b14      	ldr	r3, [pc, #80]	; (8004f74 <vTaskStartScheduler+0xd8>)
 8004f24:	2201      	movs	r2, #1
 8004f26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f28:	4b13      	ldr	r3, [pc, #76]	; (8004f78 <vTaskStartScheduler+0xdc>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f2e:	f001 f8c7 	bl	80060c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f32:	e00e      	b.n	8004f52 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f3a:	d10a      	bne.n	8004f52 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	60fb      	str	r3, [r7, #12]
}
 8004f4e:	bf00      	nop
 8004f50:	e7fe      	b.n	8004f50 <vTaskStartScheduler+0xb4>
}
 8004f52:	bf00      	nop
 8004f54:	3718      	adds	r7, #24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	08007a50 	.word	0x08007a50
 8004f60:	080055a1 	.word	0x080055a1
 8004f64:	20000e30 	.word	0x20000e30
 8004f68:	20000938 	.word	0x20000938
 8004f6c:	20000014 	.word	0x20000014
 8004f70:	20000e2c 	.word	0x20000e2c
 8004f74:	20000e18 	.word	0x20000e18
 8004f78:	20000e10 	.word	0x20000e10

08004f7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004f80:	4b04      	ldr	r3, [pc, #16]	; (8004f94 <vTaskSuspendAll+0x18>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	3301      	adds	r3, #1
 8004f86:	4a03      	ldr	r2, [pc, #12]	; (8004f94 <vTaskSuspendAll+0x18>)
 8004f88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004f8a:	bf00      	nop
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	20000e34 	.word	0x20000e34

08004f98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004fa6:	4b42      	ldr	r3, [pc, #264]	; (80050b0 <xTaskResumeAll+0x118>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10a      	bne.n	8004fc4 <xTaskResumeAll+0x2c>
	__asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	603b      	str	r3, [r7, #0]
}
 8004fc0:	bf00      	nop
 8004fc2:	e7fe      	b.n	8004fc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004fc4:	f001 f91e 	bl	8006204 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004fc8:	4b39      	ldr	r3, [pc, #228]	; (80050b0 <xTaskResumeAll+0x118>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	4a38      	ldr	r2, [pc, #224]	; (80050b0 <xTaskResumeAll+0x118>)
 8004fd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fd2:	4b37      	ldr	r3, [pc, #220]	; (80050b0 <xTaskResumeAll+0x118>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d162      	bne.n	80050a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004fda:	4b36      	ldr	r3, [pc, #216]	; (80050b4 <xTaskResumeAll+0x11c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d05e      	beq.n	80050a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fe2:	e02f      	b.n	8005044 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fe4:	4b34      	ldr	r3, [pc, #208]	; (80050b8 <xTaskResumeAll+0x120>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	3318      	adds	r3, #24
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fe ff8f 	bl	8003f14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fe ff8a 	bl	8003f14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005004:	4b2d      	ldr	r3, [pc, #180]	; (80050bc <xTaskResumeAll+0x124>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d903      	bls.n	8005014 <xTaskResumeAll+0x7c>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	4a2a      	ldr	r2, [pc, #168]	; (80050bc <xTaskResumeAll+0x124>)
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4a27      	ldr	r2, [pc, #156]	; (80050c0 <xTaskResumeAll+0x128>)
 8005022:	441a      	add	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	3304      	adds	r3, #4
 8005028:	4619      	mov	r1, r3
 800502a:	4610      	mov	r0, r2
 800502c:	f7fe ff15 	bl	8003e5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005034:	4b23      	ldr	r3, [pc, #140]	; (80050c4 <xTaskResumeAll+0x12c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503a:	429a      	cmp	r2, r3
 800503c:	d302      	bcc.n	8005044 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800503e:	4b22      	ldr	r3, [pc, #136]	; (80050c8 <xTaskResumeAll+0x130>)
 8005040:	2201      	movs	r2, #1
 8005042:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005044:	4b1c      	ldr	r3, [pc, #112]	; (80050b8 <xTaskResumeAll+0x120>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1cb      	bne.n	8004fe4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005052:	f000 fb5f 	bl	8005714 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005056:	4b1d      	ldr	r3, [pc, #116]	; (80050cc <xTaskResumeAll+0x134>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d010      	beq.n	8005084 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005062:	f000 f847 	bl	80050f4 <xTaskIncrementTick>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800506c:	4b16      	ldr	r3, [pc, #88]	; (80050c8 <xTaskResumeAll+0x130>)
 800506e:	2201      	movs	r2, #1
 8005070:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3b01      	subs	r3, #1
 8005076:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1f1      	bne.n	8005062 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800507e:	4b13      	ldr	r3, [pc, #76]	; (80050cc <xTaskResumeAll+0x134>)
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005084:	4b10      	ldr	r3, [pc, #64]	; (80050c8 <xTaskResumeAll+0x130>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d009      	beq.n	80050a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800508c:	2301      	movs	r3, #1
 800508e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005090:	4b0f      	ldr	r3, [pc, #60]	; (80050d0 <xTaskResumeAll+0x138>)
 8005092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050a0:	f001 f8e0 	bl	8006264 <vPortExitCritical>

	return xAlreadyYielded;
 80050a4:	68bb      	ldr	r3, [r7, #8]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	20000e34 	.word	0x20000e34
 80050b4:	20000e0c 	.word	0x20000e0c
 80050b8:	20000dcc 	.word	0x20000dcc
 80050bc:	20000e14 	.word	0x20000e14
 80050c0:	2000093c 	.word	0x2000093c
 80050c4:	20000938 	.word	0x20000938
 80050c8:	20000e20 	.word	0x20000e20
 80050cc:	20000e1c 	.word	0x20000e1c
 80050d0:	e000ed04 	.word	0xe000ed04

080050d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80050da:	4b05      	ldr	r3, [pc, #20]	; (80050f0 <xTaskGetTickCount+0x1c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80050e0:	687b      	ldr	r3, [r7, #4]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	20000e10 	.word	0x20000e10

080050f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80050fa:	2300      	movs	r3, #0
 80050fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050fe:	4b4f      	ldr	r3, [pc, #316]	; (800523c <xTaskIncrementTick+0x148>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	f040 808f 	bne.w	8005226 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005108:	4b4d      	ldr	r3, [pc, #308]	; (8005240 <xTaskIncrementTick+0x14c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3301      	adds	r3, #1
 800510e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005110:	4a4b      	ldr	r2, [pc, #300]	; (8005240 <xTaskIncrementTick+0x14c>)
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d120      	bne.n	800515e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800511c:	4b49      	ldr	r3, [pc, #292]	; (8005244 <xTaskIncrementTick+0x150>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <xTaskIncrementTick+0x48>
	__asm volatile
 8005126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	603b      	str	r3, [r7, #0]
}
 8005138:	bf00      	nop
 800513a:	e7fe      	b.n	800513a <xTaskIncrementTick+0x46>
 800513c:	4b41      	ldr	r3, [pc, #260]	; (8005244 <xTaskIncrementTick+0x150>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	60fb      	str	r3, [r7, #12]
 8005142:	4b41      	ldr	r3, [pc, #260]	; (8005248 <xTaskIncrementTick+0x154>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a3f      	ldr	r2, [pc, #252]	; (8005244 <xTaskIncrementTick+0x150>)
 8005148:	6013      	str	r3, [r2, #0]
 800514a:	4a3f      	ldr	r2, [pc, #252]	; (8005248 <xTaskIncrementTick+0x154>)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	4b3e      	ldr	r3, [pc, #248]	; (800524c <xTaskIncrementTick+0x158>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3301      	adds	r3, #1
 8005156:	4a3d      	ldr	r2, [pc, #244]	; (800524c <xTaskIncrementTick+0x158>)
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	f000 fadb 	bl	8005714 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800515e:	4b3c      	ldr	r3, [pc, #240]	; (8005250 <xTaskIncrementTick+0x15c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	429a      	cmp	r2, r3
 8005166:	d349      	bcc.n	80051fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005168:	4b36      	ldr	r3, [pc, #216]	; (8005244 <xTaskIncrementTick+0x150>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d104      	bne.n	800517c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005172:	4b37      	ldr	r3, [pc, #220]	; (8005250 <xTaskIncrementTick+0x15c>)
 8005174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005178:	601a      	str	r2, [r3, #0]
					break;
 800517a:	e03f      	b.n	80051fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800517c:	4b31      	ldr	r3, [pc, #196]	; (8005244 <xTaskIncrementTick+0x150>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	429a      	cmp	r2, r3
 8005192:	d203      	bcs.n	800519c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005194:	4a2e      	ldr	r2, [pc, #184]	; (8005250 <xTaskIncrementTick+0x15c>)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800519a:	e02f      	b.n	80051fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	3304      	adds	r3, #4
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7fe feb7 	bl	8003f14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d004      	beq.n	80051b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	3318      	adds	r3, #24
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fe feae 	bl	8003f14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051bc:	4b25      	ldr	r3, [pc, #148]	; (8005254 <xTaskIncrementTick+0x160>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d903      	bls.n	80051cc <xTaskIncrementTick+0xd8>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	4a22      	ldr	r2, [pc, #136]	; (8005254 <xTaskIncrementTick+0x160>)
 80051ca:	6013      	str	r3, [r2, #0]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d0:	4613      	mov	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4a1f      	ldr	r2, [pc, #124]	; (8005258 <xTaskIncrementTick+0x164>)
 80051da:	441a      	add	r2, r3
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	3304      	adds	r3, #4
 80051e0:	4619      	mov	r1, r3
 80051e2:	4610      	mov	r0, r2
 80051e4:	f7fe fe39 	bl	8003e5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ec:	4b1b      	ldr	r3, [pc, #108]	; (800525c <xTaskIncrementTick+0x168>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d3b8      	bcc.n	8005168 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80051f6:	2301      	movs	r3, #1
 80051f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051fa:	e7b5      	b.n	8005168 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80051fc:	4b17      	ldr	r3, [pc, #92]	; (800525c <xTaskIncrementTick+0x168>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005202:	4915      	ldr	r1, [pc, #84]	; (8005258 <xTaskIncrementTick+0x164>)
 8005204:	4613      	mov	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	440b      	add	r3, r1
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d901      	bls.n	8005218 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005214:	2301      	movs	r3, #1
 8005216:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005218:	4b11      	ldr	r3, [pc, #68]	; (8005260 <xTaskIncrementTick+0x16c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d007      	beq.n	8005230 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005220:	2301      	movs	r3, #1
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	e004      	b.n	8005230 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005226:	4b0f      	ldr	r3, [pc, #60]	; (8005264 <xTaskIncrementTick+0x170>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	3301      	adds	r3, #1
 800522c:	4a0d      	ldr	r2, [pc, #52]	; (8005264 <xTaskIncrementTick+0x170>)
 800522e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005230:	697b      	ldr	r3, [r7, #20]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20000e34 	.word	0x20000e34
 8005240:	20000e10 	.word	0x20000e10
 8005244:	20000dc4 	.word	0x20000dc4
 8005248:	20000dc8 	.word	0x20000dc8
 800524c:	20000e24 	.word	0x20000e24
 8005250:	20000e2c 	.word	0x20000e2c
 8005254:	20000e14 	.word	0x20000e14
 8005258:	2000093c 	.word	0x2000093c
 800525c:	20000938 	.word	0x20000938
 8005260:	20000e20 	.word	0x20000e20
 8005264:	20000e1c 	.word	0x20000e1c

08005268 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800526e:	4b2a      	ldr	r3, [pc, #168]	; (8005318 <vTaskSwitchContext+0xb0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005276:	4b29      	ldr	r3, [pc, #164]	; (800531c <vTaskSwitchContext+0xb4>)
 8005278:	2201      	movs	r2, #1
 800527a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800527c:	e046      	b.n	800530c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800527e:	4b27      	ldr	r3, [pc, #156]	; (800531c <vTaskSwitchContext+0xb4>)
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005284:	4b26      	ldr	r3, [pc, #152]	; (8005320 <vTaskSwitchContext+0xb8>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	e010      	b.n	80052ae <vTaskSwitchContext+0x46>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10a      	bne.n	80052a8 <vTaskSwitchContext+0x40>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	607b      	str	r3, [r7, #4]
}
 80052a4:	bf00      	nop
 80052a6:	e7fe      	b.n	80052a6 <vTaskSwitchContext+0x3e>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	491d      	ldr	r1, [pc, #116]	; (8005324 <vTaskSwitchContext+0xbc>)
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	4613      	mov	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	440b      	add	r3, r1
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d0e4      	beq.n	800528c <vTaskSwitchContext+0x24>
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4a15      	ldr	r2, [pc, #84]	; (8005324 <vTaskSwitchContext+0xbc>)
 80052ce:	4413      	add	r3, r2
 80052d0:	60bb      	str	r3, [r7, #8]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	605a      	str	r2, [r3, #4]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	3308      	adds	r3, #8
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d104      	bne.n	80052f2 <vTaskSwitchContext+0x8a>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	605a      	str	r2, [r3, #4]
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4a0b      	ldr	r2, [pc, #44]	; (8005328 <vTaskSwitchContext+0xc0>)
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	4a08      	ldr	r2, [pc, #32]	; (8005320 <vTaskSwitchContext+0xb8>)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005302:	4b09      	ldr	r3, [pc, #36]	; (8005328 <vTaskSwitchContext+0xc0>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3354      	adds	r3, #84	; 0x54
 8005308:	4a08      	ldr	r2, [pc, #32]	; (800532c <vTaskSwitchContext+0xc4>)
 800530a:	6013      	str	r3, [r2, #0]
}
 800530c:	bf00      	nop
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	20000e34 	.word	0x20000e34
 800531c:	20000e20 	.word	0x20000e20
 8005320:	20000e14 	.word	0x20000e14
 8005324:	2000093c 	.word	0x2000093c
 8005328:	20000938 	.word	0x20000938
 800532c:	20000014 	.word	0x20000014

08005330 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10a      	bne.n	8005356 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	60fb      	str	r3, [r7, #12]
}
 8005352:	bf00      	nop
 8005354:	e7fe      	b.n	8005354 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005356:	4b07      	ldr	r3, [pc, #28]	; (8005374 <vTaskPlaceOnEventList+0x44>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3318      	adds	r3, #24
 800535c:	4619      	mov	r1, r3
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7fe fd9f 	bl	8003ea2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005364:	2101      	movs	r1, #1
 8005366:	6838      	ldr	r0, [r7, #0]
 8005368:	f000 fa80 	bl	800586c <prvAddCurrentTaskToDelayedList>
}
 800536c:	bf00      	nop
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	20000938 	.word	0x20000938

08005378 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10a      	bne.n	80053a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	617b      	str	r3, [r7, #20]
}
 800539c:	bf00      	nop
 800539e:	e7fe      	b.n	800539e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053a0:	4b0a      	ldr	r3, [pc, #40]	; (80053cc <vTaskPlaceOnEventListRestricted+0x54>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3318      	adds	r3, #24
 80053a6:	4619      	mov	r1, r3
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f7fe fd56 	bl	8003e5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80053b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	68b8      	ldr	r0, [r7, #8]
 80053be:	f000 fa55 	bl	800586c <prvAddCurrentTaskToDelayedList>
	}
 80053c2:	bf00      	nop
 80053c4:	3718      	adds	r7, #24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20000938 	.word	0x20000938

080053d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10a      	bne.n	80053fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80053e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	60fb      	str	r3, [r7, #12]
}
 80053f8:	bf00      	nop
 80053fa:	e7fe      	b.n	80053fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	3318      	adds	r3, #24
 8005400:	4618      	mov	r0, r3
 8005402:	f7fe fd87 	bl	8003f14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005406:	4b1e      	ldr	r3, [pc, #120]	; (8005480 <xTaskRemoveFromEventList+0xb0>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d11d      	bne.n	800544a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	3304      	adds	r3, #4
 8005412:	4618      	mov	r0, r3
 8005414:	f7fe fd7e 	bl	8003f14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800541c:	4b19      	ldr	r3, [pc, #100]	; (8005484 <xTaskRemoveFromEventList+0xb4>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	429a      	cmp	r2, r3
 8005422:	d903      	bls.n	800542c <xTaskRemoveFromEventList+0x5c>
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005428:	4a16      	ldr	r2, [pc, #88]	; (8005484 <xTaskRemoveFromEventList+0xb4>)
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005430:	4613      	mov	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4a13      	ldr	r2, [pc, #76]	; (8005488 <xTaskRemoveFromEventList+0xb8>)
 800543a:	441a      	add	r2, r3
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	3304      	adds	r3, #4
 8005440:	4619      	mov	r1, r3
 8005442:	4610      	mov	r0, r2
 8005444:	f7fe fd09 	bl	8003e5a <vListInsertEnd>
 8005448:	e005      	b.n	8005456 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	3318      	adds	r3, #24
 800544e:	4619      	mov	r1, r3
 8005450:	480e      	ldr	r0, [pc, #56]	; (800548c <xTaskRemoveFromEventList+0xbc>)
 8005452:	f7fe fd02 	bl	8003e5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800545a:	4b0d      	ldr	r3, [pc, #52]	; (8005490 <xTaskRemoveFromEventList+0xc0>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005460:	429a      	cmp	r2, r3
 8005462:	d905      	bls.n	8005470 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005464:	2301      	movs	r3, #1
 8005466:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005468:	4b0a      	ldr	r3, [pc, #40]	; (8005494 <xTaskRemoveFromEventList+0xc4>)
 800546a:	2201      	movs	r2, #1
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	e001      	b.n	8005474 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005470:	2300      	movs	r3, #0
 8005472:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005474:	697b      	ldr	r3, [r7, #20]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	20000e34 	.word	0x20000e34
 8005484:	20000e14 	.word	0x20000e14
 8005488:	2000093c 	.word	0x2000093c
 800548c:	20000dcc 	.word	0x20000dcc
 8005490:	20000938 	.word	0x20000938
 8005494:	20000e20 	.word	0x20000e20

08005498 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80054a0:	4b06      	ldr	r3, [pc, #24]	; (80054bc <vTaskInternalSetTimeOutState+0x24>)
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80054a8:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <vTaskInternalSetTimeOutState+0x28>)
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	605a      	str	r2, [r3, #4]
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	20000e24 	.word	0x20000e24
 80054c0:	20000e10 	.word	0x20000e10

080054c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b088      	sub	sp, #32
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10a      	bne.n	80054ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80054d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	613b      	str	r3, [r7, #16]
}
 80054e6:	bf00      	nop
 80054e8:	e7fe      	b.n	80054e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10a      	bne.n	8005506 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	60fb      	str	r3, [r7, #12]
}
 8005502:	bf00      	nop
 8005504:	e7fe      	b.n	8005504 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005506:	f000 fe7d 	bl	8006204 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800550a:	4b1d      	ldr	r3, [pc, #116]	; (8005580 <xTaskCheckForTimeOut+0xbc>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005522:	d102      	bne.n	800552a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005524:	2300      	movs	r3, #0
 8005526:	61fb      	str	r3, [r7, #28]
 8005528:	e023      	b.n	8005572 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	4b15      	ldr	r3, [pc, #84]	; (8005584 <xTaskCheckForTimeOut+0xc0>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	429a      	cmp	r2, r3
 8005534:	d007      	beq.n	8005546 <xTaskCheckForTimeOut+0x82>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	429a      	cmp	r2, r3
 800553e:	d302      	bcc.n	8005546 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005540:	2301      	movs	r3, #1
 8005542:	61fb      	str	r3, [r7, #28]
 8005544:	e015      	b.n	8005572 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	429a      	cmp	r2, r3
 800554e:	d20b      	bcs.n	8005568 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	1ad2      	subs	r2, r2, r3
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff ff9b 	bl	8005498 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005562:	2300      	movs	r3, #0
 8005564:	61fb      	str	r3, [r7, #28]
 8005566:	e004      	b.n	8005572 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800556e:	2301      	movs	r3, #1
 8005570:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005572:	f000 fe77 	bl	8006264 <vPortExitCritical>

	return xReturn;
 8005576:	69fb      	ldr	r3, [r7, #28]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3720      	adds	r7, #32
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	20000e10 	.word	0x20000e10
 8005584:	20000e24 	.word	0x20000e24

08005588 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800558c:	4b03      	ldr	r3, [pc, #12]	; (800559c <vTaskMissedYield+0x14>)
 800558e:	2201      	movs	r2, #1
 8005590:	601a      	str	r2, [r3, #0]
}
 8005592:	bf00      	nop
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	20000e20 	.word	0x20000e20

080055a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80055a8:	f000 f852 	bl	8005650 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80055ac:	4b06      	ldr	r3, [pc, #24]	; (80055c8 <prvIdleTask+0x28>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d9f9      	bls.n	80055a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80055b4:	4b05      	ldr	r3, [pc, #20]	; (80055cc <prvIdleTask+0x2c>)
 80055b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80055c4:	e7f0      	b.n	80055a8 <prvIdleTask+0x8>
 80055c6:	bf00      	nop
 80055c8:	2000093c 	.word	0x2000093c
 80055cc:	e000ed04 	.word	0xe000ed04

080055d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055d6:	2300      	movs	r3, #0
 80055d8:	607b      	str	r3, [r7, #4]
 80055da:	e00c      	b.n	80055f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	4613      	mov	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4a12      	ldr	r2, [pc, #72]	; (8005630 <prvInitialiseTaskLists+0x60>)
 80055e8:	4413      	add	r3, r2
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fe fc08 	bl	8003e00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3301      	adds	r3, #1
 80055f4:	607b      	str	r3, [r7, #4]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b37      	cmp	r3, #55	; 0x37
 80055fa:	d9ef      	bls.n	80055dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80055fc:	480d      	ldr	r0, [pc, #52]	; (8005634 <prvInitialiseTaskLists+0x64>)
 80055fe:	f7fe fbff 	bl	8003e00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005602:	480d      	ldr	r0, [pc, #52]	; (8005638 <prvInitialiseTaskLists+0x68>)
 8005604:	f7fe fbfc 	bl	8003e00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005608:	480c      	ldr	r0, [pc, #48]	; (800563c <prvInitialiseTaskLists+0x6c>)
 800560a:	f7fe fbf9 	bl	8003e00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800560e:	480c      	ldr	r0, [pc, #48]	; (8005640 <prvInitialiseTaskLists+0x70>)
 8005610:	f7fe fbf6 	bl	8003e00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005614:	480b      	ldr	r0, [pc, #44]	; (8005644 <prvInitialiseTaskLists+0x74>)
 8005616:	f7fe fbf3 	bl	8003e00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800561a:	4b0b      	ldr	r3, [pc, #44]	; (8005648 <prvInitialiseTaskLists+0x78>)
 800561c:	4a05      	ldr	r2, [pc, #20]	; (8005634 <prvInitialiseTaskLists+0x64>)
 800561e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005620:	4b0a      	ldr	r3, [pc, #40]	; (800564c <prvInitialiseTaskLists+0x7c>)
 8005622:	4a05      	ldr	r2, [pc, #20]	; (8005638 <prvInitialiseTaskLists+0x68>)
 8005624:	601a      	str	r2, [r3, #0]
}
 8005626:	bf00      	nop
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	2000093c 	.word	0x2000093c
 8005634:	20000d9c 	.word	0x20000d9c
 8005638:	20000db0 	.word	0x20000db0
 800563c:	20000dcc 	.word	0x20000dcc
 8005640:	20000de0 	.word	0x20000de0
 8005644:	20000df8 	.word	0x20000df8
 8005648:	20000dc4 	.word	0x20000dc4
 800564c:	20000dc8 	.word	0x20000dc8

08005650 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005656:	e019      	b.n	800568c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005658:	f000 fdd4 	bl	8006204 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800565c:	4b10      	ldr	r3, [pc, #64]	; (80056a0 <prvCheckTasksWaitingTermination+0x50>)
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	3304      	adds	r3, #4
 8005668:	4618      	mov	r0, r3
 800566a:	f7fe fc53 	bl	8003f14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800566e:	4b0d      	ldr	r3, [pc, #52]	; (80056a4 <prvCheckTasksWaitingTermination+0x54>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	3b01      	subs	r3, #1
 8005674:	4a0b      	ldr	r2, [pc, #44]	; (80056a4 <prvCheckTasksWaitingTermination+0x54>)
 8005676:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005678:	4b0b      	ldr	r3, [pc, #44]	; (80056a8 <prvCheckTasksWaitingTermination+0x58>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3b01      	subs	r3, #1
 800567e:	4a0a      	ldr	r2, [pc, #40]	; (80056a8 <prvCheckTasksWaitingTermination+0x58>)
 8005680:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005682:	f000 fdef 	bl	8006264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f810 	bl	80056ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800568c:	4b06      	ldr	r3, [pc, #24]	; (80056a8 <prvCheckTasksWaitingTermination+0x58>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1e1      	bne.n	8005658 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	20000de0 	.word	0x20000de0
 80056a4:	20000e0c 	.word	0x20000e0c
 80056a8:	20000df4 	.word	0x20000df4

080056ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3354      	adds	r3, #84	; 0x54
 80056b8:	4618      	mov	r0, r3
 80056ba:	f001 fb19 	bl	8006cf0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d108      	bne.n	80056da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 ff87 	bl	80065e0 <vPortFree>
				vPortFree( pxTCB );
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 ff84 	bl	80065e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80056d8:	e018      	b.n	800570c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d103      	bne.n	80056ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 ff7b 	bl	80065e0 <vPortFree>
	}
 80056ea:	e00f      	b.n	800570c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d00a      	beq.n	800570c <prvDeleteTCB+0x60>
	__asm volatile
 80056f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	60fb      	str	r3, [r7, #12]
}
 8005708:	bf00      	nop
 800570a:	e7fe      	b.n	800570a <prvDeleteTCB+0x5e>
	}
 800570c:	bf00      	nop
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800571a:	4b0c      	ldr	r3, [pc, #48]	; (800574c <prvResetNextTaskUnblockTime+0x38>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d104      	bne.n	800572e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005724:	4b0a      	ldr	r3, [pc, #40]	; (8005750 <prvResetNextTaskUnblockTime+0x3c>)
 8005726:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800572a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800572c:	e008      	b.n	8005740 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800572e:	4b07      	ldr	r3, [pc, #28]	; (800574c <prvResetNextTaskUnblockTime+0x38>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	4a04      	ldr	r2, [pc, #16]	; (8005750 <prvResetNextTaskUnblockTime+0x3c>)
 800573e:	6013      	str	r3, [r2, #0]
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	20000dc4 	.word	0x20000dc4
 8005750:	20000e2c 	.word	0x20000e2c

08005754 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800575a:	4b0b      	ldr	r3, [pc, #44]	; (8005788 <xTaskGetSchedulerState+0x34>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d102      	bne.n	8005768 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005762:	2301      	movs	r3, #1
 8005764:	607b      	str	r3, [r7, #4]
 8005766:	e008      	b.n	800577a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005768:	4b08      	ldr	r3, [pc, #32]	; (800578c <xTaskGetSchedulerState+0x38>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d102      	bne.n	8005776 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005770:	2302      	movs	r3, #2
 8005772:	607b      	str	r3, [r7, #4]
 8005774:	e001      	b.n	800577a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005776:	2300      	movs	r3, #0
 8005778:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800577a:	687b      	ldr	r3, [r7, #4]
	}
 800577c:	4618      	mov	r0, r3
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	20000e18 	.word	0x20000e18
 800578c:	20000e34 	.word	0x20000e34

08005790 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800579c:	2300      	movs	r3, #0
 800579e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d056      	beq.n	8005854 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80057a6:	4b2e      	ldr	r3, [pc, #184]	; (8005860 <xTaskPriorityDisinherit+0xd0>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d00a      	beq.n	80057c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	60fb      	str	r3, [r7, #12]
}
 80057c2:	bf00      	nop
 80057c4:	e7fe      	b.n	80057c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10a      	bne.n	80057e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80057ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	60bb      	str	r3, [r7, #8]
}
 80057e0:	bf00      	nop
 80057e2:	e7fe      	b.n	80057e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e8:	1e5a      	subs	r2, r3, #1
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d02c      	beq.n	8005854 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d128      	bne.n	8005854 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	3304      	adds	r3, #4
 8005806:	4618      	mov	r0, r3
 8005808:	f7fe fb84 	bl	8003f14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005818:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005824:	4b0f      	ldr	r3, [pc, #60]	; (8005864 <xTaskPriorityDisinherit+0xd4>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	429a      	cmp	r2, r3
 800582a:	d903      	bls.n	8005834 <xTaskPriorityDisinherit+0xa4>
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005830:	4a0c      	ldr	r2, [pc, #48]	; (8005864 <xTaskPriorityDisinherit+0xd4>)
 8005832:	6013      	str	r3, [r2, #0]
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005838:	4613      	mov	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4a09      	ldr	r2, [pc, #36]	; (8005868 <xTaskPriorityDisinherit+0xd8>)
 8005842:	441a      	add	r2, r3
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	3304      	adds	r3, #4
 8005848:	4619      	mov	r1, r3
 800584a:	4610      	mov	r0, r2
 800584c:	f7fe fb05 	bl	8003e5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005850:	2301      	movs	r3, #1
 8005852:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005854:	697b      	ldr	r3, [r7, #20]
	}
 8005856:	4618      	mov	r0, r3
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	20000938 	.word	0x20000938
 8005864:	20000e14 	.word	0x20000e14
 8005868:	2000093c 	.word	0x2000093c

0800586c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005876:	4b21      	ldr	r3, [pc, #132]	; (80058fc <prvAddCurrentTaskToDelayedList+0x90>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800587c:	4b20      	ldr	r3, [pc, #128]	; (8005900 <prvAddCurrentTaskToDelayedList+0x94>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3304      	adds	r3, #4
 8005882:	4618      	mov	r0, r3
 8005884:	f7fe fb46 	bl	8003f14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800588e:	d10a      	bne.n	80058a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d007      	beq.n	80058a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005896:	4b1a      	ldr	r3, [pc, #104]	; (8005900 <prvAddCurrentTaskToDelayedList+0x94>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3304      	adds	r3, #4
 800589c:	4619      	mov	r1, r3
 800589e:	4819      	ldr	r0, [pc, #100]	; (8005904 <prvAddCurrentTaskToDelayedList+0x98>)
 80058a0:	f7fe fadb 	bl	8003e5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80058a4:	e026      	b.n	80058f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4413      	add	r3, r2
 80058ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80058ae:	4b14      	ldr	r3, [pc, #80]	; (8005900 <prvAddCurrentTaskToDelayedList+0x94>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d209      	bcs.n	80058d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058be:	4b12      	ldr	r3, [pc, #72]	; (8005908 <prvAddCurrentTaskToDelayedList+0x9c>)
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	4b0f      	ldr	r3, [pc, #60]	; (8005900 <prvAddCurrentTaskToDelayedList+0x94>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	3304      	adds	r3, #4
 80058c8:	4619      	mov	r1, r3
 80058ca:	4610      	mov	r0, r2
 80058cc:	f7fe fae9 	bl	8003ea2 <vListInsert>
}
 80058d0:	e010      	b.n	80058f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058d2:	4b0e      	ldr	r3, [pc, #56]	; (800590c <prvAddCurrentTaskToDelayedList+0xa0>)
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	4b0a      	ldr	r3, [pc, #40]	; (8005900 <prvAddCurrentTaskToDelayedList+0x94>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3304      	adds	r3, #4
 80058dc:	4619      	mov	r1, r3
 80058de:	4610      	mov	r0, r2
 80058e0:	f7fe fadf 	bl	8003ea2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058e4:	4b0a      	ldr	r3, [pc, #40]	; (8005910 <prvAddCurrentTaskToDelayedList+0xa4>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d202      	bcs.n	80058f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80058ee:	4a08      	ldr	r2, [pc, #32]	; (8005910 <prvAddCurrentTaskToDelayedList+0xa4>)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	6013      	str	r3, [r2, #0]
}
 80058f4:	bf00      	nop
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	20000e10 	.word	0x20000e10
 8005900:	20000938 	.word	0x20000938
 8005904:	20000df8 	.word	0x20000df8
 8005908:	20000dc8 	.word	0x20000dc8
 800590c:	20000dc4 	.word	0x20000dc4
 8005910:	20000e2c 	.word	0x20000e2c

08005914 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b08a      	sub	sp, #40	; 0x28
 8005918:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800591a:	2300      	movs	r3, #0
 800591c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800591e:	f000 fb07 	bl	8005f30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005922:	4b1c      	ldr	r3, [pc, #112]	; (8005994 <xTimerCreateTimerTask+0x80>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d021      	beq.n	800596e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800592a:	2300      	movs	r3, #0
 800592c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800592e:	2300      	movs	r3, #0
 8005930:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005932:	1d3a      	adds	r2, r7, #4
 8005934:	f107 0108 	add.w	r1, r7, #8
 8005938:	f107 030c 	add.w	r3, r7, #12
 800593c:	4618      	mov	r0, r3
 800593e:	f7fe fa45 	bl	8003dcc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	9202      	str	r2, [sp, #8]
 800594a:	9301      	str	r3, [sp, #4]
 800594c:	2302      	movs	r3, #2
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	2300      	movs	r3, #0
 8005952:	460a      	mov	r2, r1
 8005954:	4910      	ldr	r1, [pc, #64]	; (8005998 <xTimerCreateTimerTask+0x84>)
 8005956:	4811      	ldr	r0, [pc, #68]	; (800599c <xTimerCreateTimerTask+0x88>)
 8005958:	f7ff f8e8 	bl	8004b2c <xTaskCreateStatic>
 800595c:	4603      	mov	r3, r0
 800595e:	4a10      	ldr	r2, [pc, #64]	; (80059a0 <xTimerCreateTimerTask+0x8c>)
 8005960:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005962:	4b0f      	ldr	r3, [pc, #60]	; (80059a0 <xTimerCreateTimerTask+0x8c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800596a:	2301      	movs	r3, #1
 800596c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10a      	bne.n	800598a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	613b      	str	r3, [r7, #16]
}
 8005986:	bf00      	nop
 8005988:	e7fe      	b.n	8005988 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800598a:	697b      	ldr	r3, [r7, #20]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20000e68 	.word	0x20000e68
 8005998:	08007a58 	.word	0x08007a58
 800599c:	08005ad9 	.word	0x08005ad9
 80059a0:	20000e6c 	.word	0x20000e6c

080059a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b08a      	sub	sp, #40	; 0x28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80059b2:	2300      	movs	r3, #0
 80059b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10a      	bne.n	80059d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80059bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	623b      	str	r3, [r7, #32]
}
 80059ce:	bf00      	nop
 80059d0:	e7fe      	b.n	80059d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80059d2:	4b1a      	ldr	r3, [pc, #104]	; (8005a3c <xTimerGenericCommand+0x98>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d02a      	beq.n	8005a30 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2b05      	cmp	r3, #5
 80059ea:	dc18      	bgt.n	8005a1e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80059ec:	f7ff feb2 	bl	8005754 <xTaskGetSchedulerState>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d109      	bne.n	8005a0a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80059f6:	4b11      	ldr	r3, [pc, #68]	; (8005a3c <xTimerGenericCommand+0x98>)
 80059f8:	6818      	ldr	r0, [r3, #0]
 80059fa:	f107 0110 	add.w	r1, r7, #16
 80059fe:	2300      	movs	r3, #0
 8005a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a02:	f7fe fbef 	bl	80041e4 <xQueueGenericSend>
 8005a06:	6278      	str	r0, [r7, #36]	; 0x24
 8005a08:	e012      	b.n	8005a30 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005a0a:	4b0c      	ldr	r3, [pc, #48]	; (8005a3c <xTimerGenericCommand+0x98>)
 8005a0c:	6818      	ldr	r0, [r3, #0]
 8005a0e:	f107 0110 	add.w	r1, r7, #16
 8005a12:	2300      	movs	r3, #0
 8005a14:	2200      	movs	r2, #0
 8005a16:	f7fe fbe5 	bl	80041e4 <xQueueGenericSend>
 8005a1a:	6278      	str	r0, [r7, #36]	; 0x24
 8005a1c:	e008      	b.n	8005a30 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005a1e:	4b07      	ldr	r3, [pc, #28]	; (8005a3c <xTimerGenericCommand+0x98>)
 8005a20:	6818      	ldr	r0, [r3, #0]
 8005a22:	f107 0110 	add.w	r1, r7, #16
 8005a26:	2300      	movs	r3, #0
 8005a28:	683a      	ldr	r2, [r7, #0]
 8005a2a:	f7fe fcd9 	bl	80043e0 <xQueueGenericSendFromISR>
 8005a2e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3728      	adds	r7, #40	; 0x28
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20000e68 	.word	0x20000e68

08005a40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b088      	sub	sp, #32
 8005a44:	af02      	add	r7, sp, #8
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a4a:	4b22      	ldr	r3, [pc, #136]	; (8005ad4 <prvProcessExpiredTimer+0x94>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	3304      	adds	r3, #4
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fe fa5b 	bl	8003f14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d022      	beq.n	8005ab2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	699a      	ldr	r2, [r3, #24]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	18d1      	adds	r1, r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	6978      	ldr	r0, [r7, #20]
 8005a7a:	f000 f8d1 	bl	8005c20 <prvInsertTimerInActiveList>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d01f      	beq.n	8005ac4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a84:	2300      	movs	r3, #0
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	2300      	movs	r3, #0
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	6978      	ldr	r0, [r7, #20]
 8005a90:	f7ff ff88 	bl	80059a4 <xTimerGenericCommand>
 8005a94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d113      	bne.n	8005ac4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa0:	f383 8811 	msr	BASEPRI, r3
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	60fb      	str	r3, [r7, #12]
}
 8005aae:	bf00      	nop
 8005ab0:	e7fe      	b.n	8005ab0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ab8:	f023 0301 	bic.w	r3, r3, #1
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	6978      	ldr	r0, [r7, #20]
 8005aca:	4798      	blx	r3
}
 8005acc:	bf00      	nop
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	20000e60 	.word	0x20000e60

08005ad8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ae0:	f107 0308 	add.w	r3, r7, #8
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 f857 	bl	8005b98 <prvGetNextExpireTime>
 8005aea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	4619      	mov	r1, r3
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 f803 	bl	8005afc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005af6:	f000 f8d5 	bl	8005ca4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005afa:	e7f1      	b.n	8005ae0 <prvTimerTask+0x8>

08005afc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005b06:	f7ff fa39 	bl	8004f7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b0a:	f107 0308 	add.w	r3, r7, #8
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 f866 	bl	8005be0 <prvSampleTimeNow>
 8005b14:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d130      	bne.n	8005b7e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10a      	bne.n	8005b38 <prvProcessTimerOrBlockTask+0x3c>
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d806      	bhi.n	8005b38 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005b2a:	f7ff fa35 	bl	8004f98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005b2e:	68f9      	ldr	r1, [r7, #12]
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7ff ff85 	bl	8005a40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005b36:	e024      	b.n	8005b82 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d008      	beq.n	8005b50 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005b3e:	4b13      	ldr	r3, [pc, #76]	; (8005b8c <prvProcessTimerOrBlockTask+0x90>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <prvProcessTimerOrBlockTask+0x50>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e000      	b.n	8005b4e <prvProcessTimerOrBlockTask+0x52>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b50:	4b0f      	ldr	r3, [pc, #60]	; (8005b90 <prvProcessTimerOrBlockTask+0x94>)
 8005b52:	6818      	ldr	r0, [r3, #0]
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	f7fe ffb1 	bl	8004ac4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005b62:	f7ff fa19 	bl	8004f98 <xTaskResumeAll>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10a      	bne.n	8005b82 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005b6c:	4b09      	ldr	r3, [pc, #36]	; (8005b94 <prvProcessTimerOrBlockTask+0x98>)
 8005b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	f3bf 8f6f 	isb	sy
}
 8005b7c:	e001      	b.n	8005b82 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005b7e:	f7ff fa0b 	bl	8004f98 <xTaskResumeAll>
}
 8005b82:	bf00      	nop
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20000e64 	.word	0x20000e64
 8005b90:	20000e68 	.word	0x20000e68
 8005b94:	e000ed04 	.word	0xe000ed04

08005b98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005ba0:	4b0e      	ldr	r3, [pc, #56]	; (8005bdc <prvGetNextExpireTime+0x44>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <prvGetNextExpireTime+0x16>
 8005baa:	2201      	movs	r2, #1
 8005bac:	e000      	b.n	8005bb0 <prvGetNextExpireTime+0x18>
 8005bae:	2200      	movs	r2, #0
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d105      	bne.n	8005bc8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005bbc:	4b07      	ldr	r3, [pc, #28]	; (8005bdc <prvGetNextExpireTime+0x44>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	e001      	b.n	8005bcc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	20000e60 	.word	0x20000e60

08005be0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005be8:	f7ff fa74 	bl	80050d4 <xTaskGetTickCount>
 8005bec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005bee:	4b0b      	ldr	r3, [pc, #44]	; (8005c1c <prvSampleTimeNow+0x3c>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d205      	bcs.n	8005c04 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005bf8:	f000 f936 	bl	8005e68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	e002      	b.n	8005c0a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005c0a:	4a04      	ldr	r2, [pc, #16]	; (8005c1c <prvSampleTimeNow+0x3c>)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005c10:	68fb      	ldr	r3, [r7, #12]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20000e70 	.word	0x20000e70

08005c20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d812      	bhi.n	8005c6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	1ad2      	subs	r2, r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d302      	bcc.n	8005c5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005c54:	2301      	movs	r3, #1
 8005c56:	617b      	str	r3, [r7, #20]
 8005c58:	e01b      	b.n	8005c92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c5a:	4b10      	ldr	r3, [pc, #64]	; (8005c9c <prvInsertTimerInActiveList+0x7c>)
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	3304      	adds	r3, #4
 8005c62:	4619      	mov	r1, r3
 8005c64:	4610      	mov	r0, r2
 8005c66:	f7fe f91c 	bl	8003ea2 <vListInsert>
 8005c6a:	e012      	b.n	8005c92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d206      	bcs.n	8005c82 <prvInsertTimerInActiveList+0x62>
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d302      	bcc.n	8005c82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	617b      	str	r3, [r7, #20]
 8005c80:	e007      	b.n	8005c92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c82:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <prvInsertTimerInActiveList+0x80>)
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	3304      	adds	r3, #4
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	f7fe f908 	bl	8003ea2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005c92:	697b      	ldr	r3, [r7, #20]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	20000e64 	.word	0x20000e64
 8005ca0:	20000e60 	.word	0x20000e60

08005ca4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b08e      	sub	sp, #56	; 0x38
 8005ca8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005caa:	e0ca      	b.n	8005e42 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	da18      	bge.n	8005ce4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005cb2:	1d3b      	adds	r3, r7, #4
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10a      	bne.n	8005cd4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	61fb      	str	r3, [r7, #28]
}
 8005cd0:	bf00      	nop
 8005cd2:	e7fe      	b.n	8005cd2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cda:	6850      	ldr	r0, [r2, #4]
 8005cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cde:	6892      	ldr	r2, [r2, #8]
 8005ce0:	4611      	mov	r1, r2
 8005ce2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f2c0 80aa 	blt.w	8005e40 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d004      	beq.n	8005d02 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7fe f909 	bl	8003f14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d02:	463b      	mov	r3, r7
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7ff ff6b 	bl	8005be0 <prvSampleTimeNow>
 8005d0a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b09      	cmp	r3, #9
 8005d10:	f200 8097 	bhi.w	8005e42 <prvProcessReceivedCommands+0x19e>
 8005d14:	a201      	add	r2, pc, #4	; (adr r2, 8005d1c <prvProcessReceivedCommands+0x78>)
 8005d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1a:	bf00      	nop
 8005d1c:	08005d45 	.word	0x08005d45
 8005d20:	08005d45 	.word	0x08005d45
 8005d24:	08005d45 	.word	0x08005d45
 8005d28:	08005db9 	.word	0x08005db9
 8005d2c:	08005dcd 	.word	0x08005dcd
 8005d30:	08005e17 	.word	0x08005e17
 8005d34:	08005d45 	.word	0x08005d45
 8005d38:	08005d45 	.word	0x08005d45
 8005d3c:	08005db9 	.word	0x08005db9
 8005d40:	08005dcd 	.word	0x08005dcd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d4a:	f043 0301 	orr.w	r3, r3, #1
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	18d1      	adds	r1, r2, r3
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d64:	f7ff ff5c 	bl	8005c20 <prvInsertTimerInActiveList>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d069      	beq.n	8005e42 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d7c:	f003 0304 	and.w	r3, r3, #4
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d05e      	beq.n	8005e42 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	441a      	add	r2, r3
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	2300      	movs	r3, #0
 8005d92:	2100      	movs	r1, #0
 8005d94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d96:	f7ff fe05 	bl	80059a4 <xTimerGenericCommand>
 8005d9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d14f      	bne.n	8005e42 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da6:	f383 8811 	msr	BASEPRI, r3
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	61bb      	str	r3, [r7, #24]
}
 8005db4:	bf00      	nop
 8005db6:	e7fe      	b.n	8005db6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dbe:	f023 0301 	bic.w	r3, r3, #1
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005dca:	e03a      	b.n	8005e42 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dd2:	f043 0301 	orr.w	r3, r3, #1
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10a      	bne.n	8005e02 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	617b      	str	r3, [r7, #20]
}
 8005dfe:	bf00      	nop
 8005e00:	e7fe      	b.n	8005e00 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	18d1      	adds	r1, r2, r3
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e10:	f7ff ff06 	bl	8005c20 <prvInsertTimerInActiveList>
					break;
 8005e14:	e015      	b.n	8005e42 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d103      	bne.n	8005e2c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005e24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e26:	f000 fbdb 	bl	80065e0 <vPortFree>
 8005e2a:	e00a      	b.n	8005e42 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e32:	f023 0301 	bic.w	r3, r3, #1
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005e3e:	e000      	b.n	8005e42 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005e40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e42:	4b08      	ldr	r3, [pc, #32]	; (8005e64 <prvProcessReceivedCommands+0x1c0>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	1d39      	adds	r1, r7, #4
 8005e48:	2200      	movs	r2, #0
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fe fb64 	bl	8004518 <xQueueReceive>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f47f af2a 	bne.w	8005cac <prvProcessReceivedCommands+0x8>
	}
}
 8005e58:	bf00      	nop
 8005e5a:	bf00      	nop
 8005e5c:	3730      	adds	r7, #48	; 0x30
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	20000e68 	.word	0x20000e68

08005e68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b088      	sub	sp, #32
 8005e6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e6e:	e048      	b.n	8005f02 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e70:	4b2d      	ldr	r3, [pc, #180]	; (8005f28 <prvSwitchTimerLists+0xc0>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e7a:	4b2b      	ldr	r3, [pc, #172]	; (8005f28 <prvSwitchTimerLists+0xc0>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	3304      	adds	r3, #4
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7fe f843 	bl	8003f14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e9c:	f003 0304 	and.w	r3, r3, #4
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d02e      	beq.n	8005f02 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	4413      	add	r3, r2
 8005eac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d90e      	bls.n	8005ed4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ec2:	4b19      	ldr	r3, [pc, #100]	; (8005f28 <prvSwitchTimerLists+0xc0>)
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	3304      	adds	r3, #4
 8005eca:	4619      	mov	r1, r3
 8005ecc:	4610      	mov	r0, r2
 8005ece:	f7fd ffe8 	bl	8003ea2 <vListInsert>
 8005ed2:	e016      	b.n	8005f02 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	2300      	movs	r3, #0
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	2100      	movs	r1, #0
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f7ff fd60 	bl	80059a4 <xTimerGenericCommand>
 8005ee4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10a      	bne.n	8005f02 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	603b      	str	r3, [r7, #0]
}
 8005efe:	bf00      	nop
 8005f00:	e7fe      	b.n	8005f00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f02:	4b09      	ldr	r3, [pc, #36]	; (8005f28 <prvSwitchTimerLists+0xc0>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1b1      	bne.n	8005e70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005f0c:	4b06      	ldr	r3, [pc, #24]	; (8005f28 <prvSwitchTimerLists+0xc0>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005f12:	4b06      	ldr	r3, [pc, #24]	; (8005f2c <prvSwitchTimerLists+0xc4>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a04      	ldr	r2, [pc, #16]	; (8005f28 <prvSwitchTimerLists+0xc0>)
 8005f18:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005f1a:	4a04      	ldr	r2, [pc, #16]	; (8005f2c <prvSwitchTimerLists+0xc4>)
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	6013      	str	r3, [r2, #0]
}
 8005f20:	bf00      	nop
 8005f22:	3718      	adds	r7, #24
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	20000e60 	.word	0x20000e60
 8005f2c:	20000e64 	.word	0x20000e64

08005f30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005f36:	f000 f965 	bl	8006204 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005f3a:	4b15      	ldr	r3, [pc, #84]	; (8005f90 <prvCheckForValidListAndQueue+0x60>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d120      	bne.n	8005f84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005f42:	4814      	ldr	r0, [pc, #80]	; (8005f94 <prvCheckForValidListAndQueue+0x64>)
 8005f44:	f7fd ff5c 	bl	8003e00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005f48:	4813      	ldr	r0, [pc, #76]	; (8005f98 <prvCheckForValidListAndQueue+0x68>)
 8005f4a:	f7fd ff59 	bl	8003e00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005f4e:	4b13      	ldr	r3, [pc, #76]	; (8005f9c <prvCheckForValidListAndQueue+0x6c>)
 8005f50:	4a10      	ldr	r2, [pc, #64]	; (8005f94 <prvCheckForValidListAndQueue+0x64>)
 8005f52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005f54:	4b12      	ldr	r3, [pc, #72]	; (8005fa0 <prvCheckForValidListAndQueue+0x70>)
 8005f56:	4a10      	ldr	r2, [pc, #64]	; (8005f98 <prvCheckForValidListAndQueue+0x68>)
 8005f58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	4b11      	ldr	r3, [pc, #68]	; (8005fa4 <prvCheckForValidListAndQueue+0x74>)
 8005f60:	4a11      	ldr	r2, [pc, #68]	; (8005fa8 <prvCheckForValidListAndQueue+0x78>)
 8005f62:	2110      	movs	r1, #16
 8005f64:	200a      	movs	r0, #10
 8005f66:	f7fe f867 	bl	8004038 <xQueueGenericCreateStatic>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	4a08      	ldr	r2, [pc, #32]	; (8005f90 <prvCheckForValidListAndQueue+0x60>)
 8005f6e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f70:	4b07      	ldr	r3, [pc, #28]	; (8005f90 <prvCheckForValidListAndQueue+0x60>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d005      	beq.n	8005f84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f78:	4b05      	ldr	r3, [pc, #20]	; (8005f90 <prvCheckForValidListAndQueue+0x60>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	490b      	ldr	r1, [pc, #44]	; (8005fac <prvCheckForValidListAndQueue+0x7c>)
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fe fd76 	bl	8004a70 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f84:	f000 f96e 	bl	8006264 <vPortExitCritical>
}
 8005f88:	bf00      	nop
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20000e68 	.word	0x20000e68
 8005f94:	20000e38 	.word	0x20000e38
 8005f98:	20000e4c 	.word	0x20000e4c
 8005f9c:	20000e60 	.word	0x20000e60
 8005fa0:	20000e64 	.word	0x20000e64
 8005fa4:	20000f14 	.word	0x20000f14
 8005fa8:	20000e74 	.word	0x20000e74
 8005fac:	08007a60 	.word	0x08007a60

08005fb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	3b04      	subs	r3, #4
 8005fc0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3b04      	subs	r3, #4
 8005fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f023 0201 	bic.w	r2, r3, #1
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	3b04      	subs	r3, #4
 8005fde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fe0:	4a0c      	ldr	r2, [pc, #48]	; (8006014 <pxPortInitialiseStack+0x64>)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3b14      	subs	r3, #20
 8005fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3b04      	subs	r3, #4
 8005ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f06f 0202 	mvn.w	r2, #2
 8005ffe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	3b20      	subs	r3, #32
 8006004:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006006:	68fb      	ldr	r3, [r7, #12]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	08006019 	.word	0x08006019

08006018 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800601e:	2300      	movs	r3, #0
 8006020:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006022:	4b12      	ldr	r3, [pc, #72]	; (800606c <prvTaskExitError+0x54>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800602a:	d00a      	beq.n	8006042 <prvTaskExitError+0x2a>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	60fb      	str	r3, [r7, #12]
}
 800603e:	bf00      	nop
 8006040:	e7fe      	b.n	8006040 <prvTaskExitError+0x28>
	__asm volatile
 8006042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	60bb      	str	r3, [r7, #8]
}
 8006054:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006056:	bf00      	nop
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0fc      	beq.n	8006058 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800605e:	bf00      	nop
 8006060:	bf00      	nop
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	20000010 	.word	0x20000010

08006070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006070:	4b07      	ldr	r3, [pc, #28]	; (8006090 <pxCurrentTCBConst2>)
 8006072:	6819      	ldr	r1, [r3, #0]
 8006074:	6808      	ldr	r0, [r1, #0]
 8006076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800607a:	f380 8809 	msr	PSP, r0
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f04f 0000 	mov.w	r0, #0
 8006086:	f380 8811 	msr	BASEPRI, r0
 800608a:	4770      	bx	lr
 800608c:	f3af 8000 	nop.w

08006090 <pxCurrentTCBConst2>:
 8006090:	20000938 	.word	0x20000938
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006094:	bf00      	nop
 8006096:	bf00      	nop

08006098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006098:	4808      	ldr	r0, [pc, #32]	; (80060bc <prvPortStartFirstTask+0x24>)
 800609a:	6800      	ldr	r0, [r0, #0]
 800609c:	6800      	ldr	r0, [r0, #0]
 800609e:	f380 8808 	msr	MSP, r0
 80060a2:	f04f 0000 	mov.w	r0, #0
 80060a6:	f380 8814 	msr	CONTROL, r0
 80060aa:	b662      	cpsie	i
 80060ac:	b661      	cpsie	f
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	df00      	svc	0
 80060b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80060ba:	bf00      	nop
 80060bc:	e000ed08 	.word	0xe000ed08

080060c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060c6:	4b46      	ldr	r3, [pc, #280]	; (80061e0 <xPortStartScheduler+0x120>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a46      	ldr	r2, [pc, #280]	; (80061e4 <xPortStartScheduler+0x124>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d10a      	bne.n	80060e6 <xPortStartScheduler+0x26>
	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	613b      	str	r3, [r7, #16]
}
 80060e2:	bf00      	nop
 80060e4:	e7fe      	b.n	80060e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060e6:	4b3e      	ldr	r3, [pc, #248]	; (80061e0 <xPortStartScheduler+0x120>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a3f      	ldr	r2, [pc, #252]	; (80061e8 <xPortStartScheduler+0x128>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d10a      	bne.n	8006106 <xPortStartScheduler+0x46>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	60fb      	str	r3, [r7, #12]
}
 8006102:	bf00      	nop
 8006104:	e7fe      	b.n	8006104 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006106:	4b39      	ldr	r3, [pc, #228]	; (80061ec <xPortStartScheduler+0x12c>)
 8006108:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	b2db      	uxtb	r3, r3
 8006110:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	22ff      	movs	r2, #255	; 0xff
 8006116:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	b2db      	uxtb	r3, r3
 800611e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006120:	78fb      	ldrb	r3, [r7, #3]
 8006122:	b2db      	uxtb	r3, r3
 8006124:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006128:	b2da      	uxtb	r2, r3
 800612a:	4b31      	ldr	r3, [pc, #196]	; (80061f0 <xPortStartScheduler+0x130>)
 800612c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800612e:	4b31      	ldr	r3, [pc, #196]	; (80061f4 <xPortStartScheduler+0x134>)
 8006130:	2207      	movs	r2, #7
 8006132:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006134:	e009      	b.n	800614a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006136:	4b2f      	ldr	r3, [pc, #188]	; (80061f4 <xPortStartScheduler+0x134>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3b01      	subs	r3, #1
 800613c:	4a2d      	ldr	r2, [pc, #180]	; (80061f4 <xPortStartScheduler+0x134>)
 800613e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	b2db      	uxtb	r3, r3
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	b2db      	uxtb	r3, r3
 8006148:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800614a:	78fb      	ldrb	r3, [r7, #3]
 800614c:	b2db      	uxtb	r3, r3
 800614e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006152:	2b80      	cmp	r3, #128	; 0x80
 8006154:	d0ef      	beq.n	8006136 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006156:	4b27      	ldr	r3, [pc, #156]	; (80061f4 <xPortStartScheduler+0x134>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f1c3 0307 	rsb	r3, r3, #7
 800615e:	2b04      	cmp	r3, #4
 8006160:	d00a      	beq.n	8006178 <xPortStartScheduler+0xb8>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	60bb      	str	r3, [r7, #8]
}
 8006174:	bf00      	nop
 8006176:	e7fe      	b.n	8006176 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006178:	4b1e      	ldr	r3, [pc, #120]	; (80061f4 <xPortStartScheduler+0x134>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	021b      	lsls	r3, r3, #8
 800617e:	4a1d      	ldr	r2, [pc, #116]	; (80061f4 <xPortStartScheduler+0x134>)
 8006180:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006182:	4b1c      	ldr	r3, [pc, #112]	; (80061f4 <xPortStartScheduler+0x134>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800618a:	4a1a      	ldr	r2, [pc, #104]	; (80061f4 <xPortStartScheduler+0x134>)
 800618c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	b2da      	uxtb	r2, r3
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006196:	4b18      	ldr	r3, [pc, #96]	; (80061f8 <xPortStartScheduler+0x138>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a17      	ldr	r2, [pc, #92]	; (80061f8 <xPortStartScheduler+0x138>)
 800619c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061a2:	4b15      	ldr	r3, [pc, #84]	; (80061f8 <xPortStartScheduler+0x138>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a14      	ldr	r2, [pc, #80]	; (80061f8 <xPortStartScheduler+0x138>)
 80061a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80061ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80061ae:	f000 f8dd 	bl	800636c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061b2:	4b12      	ldr	r3, [pc, #72]	; (80061fc <xPortStartScheduler+0x13c>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80061b8:	f000 f8fc 	bl	80063b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061bc:	4b10      	ldr	r3, [pc, #64]	; (8006200 <xPortStartScheduler+0x140>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a0f      	ldr	r2, [pc, #60]	; (8006200 <xPortStartScheduler+0x140>)
 80061c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061c8:	f7ff ff66 	bl	8006098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061cc:	f7ff f84c 	bl	8005268 <vTaskSwitchContext>
	prvTaskExitError();
 80061d0:	f7ff ff22 	bl	8006018 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3718      	adds	r7, #24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	e000ed00 	.word	0xe000ed00
 80061e4:	410fc271 	.word	0x410fc271
 80061e8:	410fc270 	.word	0x410fc270
 80061ec:	e000e400 	.word	0xe000e400
 80061f0:	20000f64 	.word	0x20000f64
 80061f4:	20000f68 	.word	0x20000f68
 80061f8:	e000ed20 	.word	0xe000ed20
 80061fc:	20000010 	.word	0x20000010
 8006200:	e000ef34 	.word	0xe000ef34

08006204 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
	__asm volatile
 800620a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620e:	f383 8811 	msr	BASEPRI, r3
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	607b      	str	r3, [r7, #4]
}
 800621c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800621e:	4b0f      	ldr	r3, [pc, #60]	; (800625c <vPortEnterCritical+0x58>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3301      	adds	r3, #1
 8006224:	4a0d      	ldr	r2, [pc, #52]	; (800625c <vPortEnterCritical+0x58>)
 8006226:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006228:	4b0c      	ldr	r3, [pc, #48]	; (800625c <vPortEnterCritical+0x58>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d10f      	bne.n	8006250 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006230:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <vPortEnterCritical+0x5c>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <vPortEnterCritical+0x4c>
	__asm volatile
 800623a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	603b      	str	r3, [r7, #0]
}
 800624c:	bf00      	nop
 800624e:	e7fe      	b.n	800624e <vPortEnterCritical+0x4a>
	}
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	20000010 	.word	0x20000010
 8006260:	e000ed04 	.word	0xe000ed04

08006264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800626a:	4b12      	ldr	r3, [pc, #72]	; (80062b4 <vPortExitCritical+0x50>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10a      	bne.n	8006288 <vPortExitCritical+0x24>
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	607b      	str	r3, [r7, #4]
}
 8006284:	bf00      	nop
 8006286:	e7fe      	b.n	8006286 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006288:	4b0a      	ldr	r3, [pc, #40]	; (80062b4 <vPortExitCritical+0x50>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	3b01      	subs	r3, #1
 800628e:	4a09      	ldr	r2, [pc, #36]	; (80062b4 <vPortExitCritical+0x50>)
 8006290:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006292:	4b08      	ldr	r3, [pc, #32]	; (80062b4 <vPortExitCritical+0x50>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d105      	bne.n	80062a6 <vPortExitCritical+0x42>
 800629a:	2300      	movs	r3, #0
 800629c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	f383 8811 	msr	BASEPRI, r3
}
 80062a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80062a6:	bf00      	nop
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	20000010 	.word	0x20000010
	...

080062c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062c0:	f3ef 8009 	mrs	r0, PSP
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	4b15      	ldr	r3, [pc, #84]	; (8006320 <pxCurrentTCBConst>)
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	f01e 0f10 	tst.w	lr, #16
 80062d0:	bf08      	it	eq
 80062d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062da:	6010      	str	r0, [r2, #0]
 80062dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062e4:	f380 8811 	msr	BASEPRI, r0
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f7fe ffba 	bl	8005268 <vTaskSwitchContext>
 80062f4:	f04f 0000 	mov.w	r0, #0
 80062f8:	f380 8811 	msr	BASEPRI, r0
 80062fc:	bc09      	pop	{r0, r3}
 80062fe:	6819      	ldr	r1, [r3, #0]
 8006300:	6808      	ldr	r0, [r1, #0]
 8006302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006306:	f01e 0f10 	tst.w	lr, #16
 800630a:	bf08      	it	eq
 800630c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006310:	f380 8809 	msr	PSP, r0
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	f3af 8000 	nop.w

08006320 <pxCurrentTCBConst>:
 8006320:	20000938 	.word	0x20000938
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006324:	bf00      	nop
 8006326:	bf00      	nop

08006328 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	607b      	str	r3, [r7, #4]
}
 8006340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006342:	f7fe fed7 	bl	80050f4 <xTaskIncrementTick>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800634c:	4b06      	ldr	r3, [pc, #24]	; (8006368 <xPortSysTickHandler+0x40>)
 800634e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	2300      	movs	r3, #0
 8006356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	f383 8811 	msr	BASEPRI, r3
}
 800635e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006360:	bf00      	nop
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	e000ed04 	.word	0xe000ed04

0800636c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006370:	4b0b      	ldr	r3, [pc, #44]	; (80063a0 <vPortSetupTimerInterrupt+0x34>)
 8006372:	2200      	movs	r2, #0
 8006374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006376:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <vPortSetupTimerInterrupt+0x38>)
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800637c:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <vPortSetupTimerInterrupt+0x3c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a0a      	ldr	r2, [pc, #40]	; (80063ac <vPortSetupTimerInterrupt+0x40>)
 8006382:	fba2 2303 	umull	r2, r3, r2, r3
 8006386:	099b      	lsrs	r3, r3, #6
 8006388:	4a09      	ldr	r2, [pc, #36]	; (80063b0 <vPortSetupTimerInterrupt+0x44>)
 800638a:	3b01      	subs	r3, #1
 800638c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800638e:	4b04      	ldr	r3, [pc, #16]	; (80063a0 <vPortSetupTimerInterrupt+0x34>)
 8006390:	2207      	movs	r2, #7
 8006392:	601a      	str	r2, [r3, #0]
}
 8006394:	bf00      	nop
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	e000e010 	.word	0xe000e010
 80063a4:	e000e018 	.word	0xe000e018
 80063a8:	20000004 	.word	0x20000004
 80063ac:	10624dd3 	.word	0x10624dd3
 80063b0:	e000e014 	.word	0xe000e014

080063b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80063b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80063c4 <vPortEnableVFP+0x10>
 80063b8:	6801      	ldr	r1, [r0, #0]
 80063ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80063be:	6001      	str	r1, [r0, #0]
 80063c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063c2:	bf00      	nop
 80063c4:	e000ed88 	.word	0xe000ed88

080063c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063ce:	f3ef 8305 	mrs	r3, IPSR
 80063d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2b0f      	cmp	r3, #15
 80063d8:	d914      	bls.n	8006404 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063da:	4a17      	ldr	r2, [pc, #92]	; (8006438 <vPortValidateInterruptPriority+0x70>)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	4413      	add	r3, r2
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80063e4:	4b15      	ldr	r3, [pc, #84]	; (800643c <vPortValidateInterruptPriority+0x74>)
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	7afa      	ldrb	r2, [r7, #11]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d20a      	bcs.n	8006404 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	607b      	str	r3, [r7, #4]
}
 8006400:	bf00      	nop
 8006402:	e7fe      	b.n	8006402 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006404:	4b0e      	ldr	r3, [pc, #56]	; (8006440 <vPortValidateInterruptPriority+0x78>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800640c:	4b0d      	ldr	r3, [pc, #52]	; (8006444 <vPortValidateInterruptPriority+0x7c>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	429a      	cmp	r2, r3
 8006412:	d90a      	bls.n	800642a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	603b      	str	r3, [r7, #0]
}
 8006426:	bf00      	nop
 8006428:	e7fe      	b.n	8006428 <vPortValidateInterruptPriority+0x60>
	}
 800642a:	bf00      	nop
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	e000e3f0 	.word	0xe000e3f0
 800643c:	20000f64 	.word	0x20000f64
 8006440:	e000ed0c 	.word	0xe000ed0c
 8006444:	20000f68 	.word	0x20000f68

08006448 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b08a      	sub	sp, #40	; 0x28
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006450:	2300      	movs	r3, #0
 8006452:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006454:	f7fe fd92 	bl	8004f7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006458:	4b5b      	ldr	r3, [pc, #364]	; (80065c8 <pvPortMalloc+0x180>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006460:	f000 f920 	bl	80066a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006464:	4b59      	ldr	r3, [pc, #356]	; (80065cc <pvPortMalloc+0x184>)
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4013      	ands	r3, r2
 800646c:	2b00      	cmp	r3, #0
 800646e:	f040 8093 	bne.w	8006598 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d01d      	beq.n	80064b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006478:	2208      	movs	r2, #8
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4413      	add	r3, r2
 800647e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	2b00      	cmp	r3, #0
 8006488:	d014      	beq.n	80064b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f023 0307 	bic.w	r3, r3, #7
 8006490:	3308      	adds	r3, #8
 8006492:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f003 0307 	and.w	r3, r3, #7
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <pvPortMalloc+0x6c>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	617b      	str	r3, [r7, #20]
}
 80064b0:	bf00      	nop
 80064b2:	e7fe      	b.n	80064b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d06e      	beq.n	8006598 <pvPortMalloc+0x150>
 80064ba:	4b45      	ldr	r3, [pc, #276]	; (80065d0 <pvPortMalloc+0x188>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d869      	bhi.n	8006598 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064c4:	4b43      	ldr	r3, [pc, #268]	; (80065d4 <pvPortMalloc+0x18c>)
 80064c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064c8:	4b42      	ldr	r3, [pc, #264]	; (80065d4 <pvPortMalloc+0x18c>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064ce:	e004      	b.n	80064da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d903      	bls.n	80064ec <pvPortMalloc+0xa4>
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1f1      	bne.n	80064d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064ec:	4b36      	ldr	r3, [pc, #216]	; (80065c8 <pvPortMalloc+0x180>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d050      	beq.n	8006598 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2208      	movs	r2, #8
 80064fc:	4413      	add	r3, r2
 80064fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	1ad2      	subs	r2, r2, r3
 8006510:	2308      	movs	r3, #8
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	429a      	cmp	r2, r3
 8006516:	d91f      	bls.n	8006558 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4413      	add	r3, r2
 800651e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	f003 0307 	and.w	r3, r3, #7
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00a      	beq.n	8006540 <pvPortMalloc+0xf8>
	__asm volatile
 800652a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	613b      	str	r3, [r7, #16]
}
 800653c:	bf00      	nop
 800653e:	e7fe      	b.n	800653e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	1ad2      	subs	r2, r2, r3
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006552:	69b8      	ldr	r0, [r7, #24]
 8006554:	f000 f908 	bl	8006768 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006558:	4b1d      	ldr	r3, [pc, #116]	; (80065d0 <pvPortMalloc+0x188>)
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	4a1b      	ldr	r2, [pc, #108]	; (80065d0 <pvPortMalloc+0x188>)
 8006564:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006566:	4b1a      	ldr	r3, [pc, #104]	; (80065d0 <pvPortMalloc+0x188>)
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	4b1b      	ldr	r3, [pc, #108]	; (80065d8 <pvPortMalloc+0x190>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	429a      	cmp	r2, r3
 8006570:	d203      	bcs.n	800657a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006572:	4b17      	ldr	r3, [pc, #92]	; (80065d0 <pvPortMalloc+0x188>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a18      	ldr	r2, [pc, #96]	; (80065d8 <pvPortMalloc+0x190>)
 8006578:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	4b13      	ldr	r3, [pc, #76]	; (80065cc <pvPortMalloc+0x184>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	431a      	orrs	r2, r3
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	2200      	movs	r2, #0
 800658c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800658e:	4b13      	ldr	r3, [pc, #76]	; (80065dc <pvPortMalloc+0x194>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3301      	adds	r3, #1
 8006594:	4a11      	ldr	r2, [pc, #68]	; (80065dc <pvPortMalloc+0x194>)
 8006596:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006598:	f7fe fcfe 	bl	8004f98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	f003 0307 	and.w	r3, r3, #7
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <pvPortMalloc+0x174>
	__asm volatile
 80065a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	60fb      	str	r3, [r7, #12]
}
 80065b8:	bf00      	nop
 80065ba:	e7fe      	b.n	80065ba <pvPortMalloc+0x172>
	return pvReturn;
 80065bc:	69fb      	ldr	r3, [r7, #28]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3728      	adds	r7, #40	; 0x28
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	200022fc 	.word	0x200022fc
 80065cc:	20002310 	.word	0x20002310
 80065d0:	20002300 	.word	0x20002300
 80065d4:	200022f4 	.word	0x200022f4
 80065d8:	20002304 	.word	0x20002304
 80065dc:	20002308 	.word	0x20002308

080065e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d04d      	beq.n	800668e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065f2:	2308      	movs	r3, #8
 80065f4:	425b      	negs	r3, r3
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	4413      	add	r3, r2
 80065fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	4b24      	ldr	r3, [pc, #144]	; (8006698 <vPortFree+0xb8>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4013      	ands	r3, r2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10a      	bne.n	8006624 <vPortFree+0x44>
	__asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	60fb      	str	r3, [r7, #12]
}
 8006620:	bf00      	nop
 8006622:	e7fe      	b.n	8006622 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00a      	beq.n	8006642 <vPortFree+0x62>
	__asm volatile
 800662c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006630:	f383 8811 	msr	BASEPRI, r3
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	60bb      	str	r3, [r7, #8]
}
 800663e:	bf00      	nop
 8006640:	e7fe      	b.n	8006640 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	4b14      	ldr	r3, [pc, #80]	; (8006698 <vPortFree+0xb8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4013      	ands	r3, r2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d01e      	beq.n	800668e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d11a      	bne.n	800668e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	4b0e      	ldr	r3, [pc, #56]	; (8006698 <vPortFree+0xb8>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	43db      	mvns	r3, r3
 8006662:	401a      	ands	r2, r3
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006668:	f7fe fc88 	bl	8004f7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	4b0a      	ldr	r3, [pc, #40]	; (800669c <vPortFree+0xbc>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4413      	add	r3, r2
 8006676:	4a09      	ldr	r2, [pc, #36]	; (800669c <vPortFree+0xbc>)
 8006678:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800667a:	6938      	ldr	r0, [r7, #16]
 800667c:	f000 f874 	bl	8006768 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006680:	4b07      	ldr	r3, [pc, #28]	; (80066a0 <vPortFree+0xc0>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	3301      	adds	r3, #1
 8006686:	4a06      	ldr	r2, [pc, #24]	; (80066a0 <vPortFree+0xc0>)
 8006688:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800668a:	f7fe fc85 	bl	8004f98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800668e:	bf00      	nop
 8006690:	3718      	adds	r7, #24
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	20002310 	.word	0x20002310
 800669c:	20002300 	.word	0x20002300
 80066a0:	2000230c 	.word	0x2000230c

080066a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80066aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80066ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066b0:	4b27      	ldr	r3, [pc, #156]	; (8006750 <prvHeapInit+0xac>)
 80066b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00c      	beq.n	80066d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3307      	adds	r3, #7
 80066c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0307 	bic.w	r3, r3, #7
 80066ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	4a1f      	ldr	r2, [pc, #124]	; (8006750 <prvHeapInit+0xac>)
 80066d4:	4413      	add	r3, r2
 80066d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066dc:	4a1d      	ldr	r2, [pc, #116]	; (8006754 <prvHeapInit+0xb0>)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066e2:	4b1c      	ldr	r3, [pc, #112]	; (8006754 <prvHeapInit+0xb0>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	4413      	add	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066f0:	2208      	movs	r2, #8
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	1a9b      	subs	r3, r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 0307 	bic.w	r3, r3, #7
 80066fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4a15      	ldr	r2, [pc, #84]	; (8006758 <prvHeapInit+0xb4>)
 8006704:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006706:	4b14      	ldr	r3, [pc, #80]	; (8006758 <prvHeapInit+0xb4>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2200      	movs	r2, #0
 800670c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800670e:	4b12      	ldr	r3, [pc, #72]	; (8006758 <prvHeapInit+0xb4>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	1ad2      	subs	r2, r2, r3
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006724:	4b0c      	ldr	r3, [pc, #48]	; (8006758 <prvHeapInit+0xb4>)
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	4a0a      	ldr	r2, [pc, #40]	; (800675c <prvHeapInit+0xb8>)
 8006732:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	4a09      	ldr	r2, [pc, #36]	; (8006760 <prvHeapInit+0xbc>)
 800673a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800673c:	4b09      	ldr	r3, [pc, #36]	; (8006764 <prvHeapInit+0xc0>)
 800673e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006742:	601a      	str	r2, [r3, #0]
}
 8006744:	bf00      	nop
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	20000f6c 	.word	0x20000f6c
 8006754:	200022f4 	.word	0x200022f4
 8006758:	200022fc 	.word	0x200022fc
 800675c:	20002304 	.word	0x20002304
 8006760:	20002300 	.word	0x20002300
 8006764:	20002310 	.word	0x20002310

08006768 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006770:	4b28      	ldr	r3, [pc, #160]	; (8006814 <prvInsertBlockIntoFreeList+0xac>)
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	e002      	b.n	800677c <prvInsertBlockIntoFreeList+0x14>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	429a      	cmp	r2, r3
 8006784:	d8f7      	bhi.n	8006776 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	4413      	add	r3, r2
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	429a      	cmp	r2, r3
 8006796:	d108      	bne.n	80067aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	441a      	add	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	441a      	add	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d118      	bne.n	80067f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	4b15      	ldr	r3, [pc, #84]	; (8006818 <prvInsertBlockIntoFreeList+0xb0>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d00d      	beq.n	80067e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	441a      	add	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	e008      	b.n	80067f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067e6:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <prvInsertBlockIntoFreeList+0xb0>)
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	e003      	b.n	80067f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d002      	beq.n	8006806 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006806:	bf00      	nop
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	200022f4 	.word	0x200022f4
 8006818:	200022fc 	.word	0x200022fc

0800681c <__errno>:
 800681c:	4b01      	ldr	r3, [pc, #4]	; (8006824 <__errno+0x8>)
 800681e:	6818      	ldr	r0, [r3, #0]
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	20000014 	.word	0x20000014

08006828 <std>:
 8006828:	2300      	movs	r3, #0
 800682a:	b510      	push	{r4, lr}
 800682c:	4604      	mov	r4, r0
 800682e:	e9c0 3300 	strd	r3, r3, [r0]
 8006832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006836:	6083      	str	r3, [r0, #8]
 8006838:	8181      	strh	r1, [r0, #12]
 800683a:	6643      	str	r3, [r0, #100]	; 0x64
 800683c:	81c2      	strh	r2, [r0, #14]
 800683e:	6183      	str	r3, [r0, #24]
 8006840:	4619      	mov	r1, r3
 8006842:	2208      	movs	r2, #8
 8006844:	305c      	adds	r0, #92	; 0x5c
 8006846:	f000 f91a 	bl	8006a7e <memset>
 800684a:	4b05      	ldr	r3, [pc, #20]	; (8006860 <std+0x38>)
 800684c:	6263      	str	r3, [r4, #36]	; 0x24
 800684e:	4b05      	ldr	r3, [pc, #20]	; (8006864 <std+0x3c>)
 8006850:	62a3      	str	r3, [r4, #40]	; 0x28
 8006852:	4b05      	ldr	r3, [pc, #20]	; (8006868 <std+0x40>)
 8006854:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006856:	4b05      	ldr	r3, [pc, #20]	; (800686c <std+0x44>)
 8006858:	6224      	str	r4, [r4, #32]
 800685a:	6323      	str	r3, [r4, #48]	; 0x30
 800685c:	bd10      	pop	{r4, pc}
 800685e:	bf00      	nop
 8006860:	08006dc9 	.word	0x08006dc9
 8006864:	08006deb 	.word	0x08006deb
 8006868:	08006e23 	.word	0x08006e23
 800686c:	08006e47 	.word	0x08006e47

08006870 <_cleanup_r>:
 8006870:	4901      	ldr	r1, [pc, #4]	; (8006878 <_cleanup_r+0x8>)
 8006872:	f000 b8af 	b.w	80069d4 <_fwalk_reent>
 8006876:	bf00      	nop
 8006878:	08007121 	.word	0x08007121

0800687c <__sfmoreglue>:
 800687c:	b570      	push	{r4, r5, r6, lr}
 800687e:	2268      	movs	r2, #104	; 0x68
 8006880:	1e4d      	subs	r5, r1, #1
 8006882:	4355      	muls	r5, r2
 8006884:	460e      	mov	r6, r1
 8006886:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800688a:	f000 f921 	bl	8006ad0 <_malloc_r>
 800688e:	4604      	mov	r4, r0
 8006890:	b140      	cbz	r0, 80068a4 <__sfmoreglue+0x28>
 8006892:	2100      	movs	r1, #0
 8006894:	e9c0 1600 	strd	r1, r6, [r0]
 8006898:	300c      	adds	r0, #12
 800689a:	60a0      	str	r0, [r4, #8]
 800689c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80068a0:	f000 f8ed 	bl	8006a7e <memset>
 80068a4:	4620      	mov	r0, r4
 80068a6:	bd70      	pop	{r4, r5, r6, pc}

080068a8 <__sfp_lock_acquire>:
 80068a8:	4801      	ldr	r0, [pc, #4]	; (80068b0 <__sfp_lock_acquire+0x8>)
 80068aa:	f000 b8d8 	b.w	8006a5e <__retarget_lock_acquire_recursive>
 80068ae:	bf00      	nop
 80068b0:	20002315 	.word	0x20002315

080068b4 <__sfp_lock_release>:
 80068b4:	4801      	ldr	r0, [pc, #4]	; (80068bc <__sfp_lock_release+0x8>)
 80068b6:	f000 b8d3 	b.w	8006a60 <__retarget_lock_release_recursive>
 80068ba:	bf00      	nop
 80068bc:	20002315 	.word	0x20002315

080068c0 <__sinit_lock_acquire>:
 80068c0:	4801      	ldr	r0, [pc, #4]	; (80068c8 <__sinit_lock_acquire+0x8>)
 80068c2:	f000 b8cc 	b.w	8006a5e <__retarget_lock_acquire_recursive>
 80068c6:	bf00      	nop
 80068c8:	20002316 	.word	0x20002316

080068cc <__sinit_lock_release>:
 80068cc:	4801      	ldr	r0, [pc, #4]	; (80068d4 <__sinit_lock_release+0x8>)
 80068ce:	f000 b8c7 	b.w	8006a60 <__retarget_lock_release_recursive>
 80068d2:	bf00      	nop
 80068d4:	20002316 	.word	0x20002316

080068d8 <__sinit>:
 80068d8:	b510      	push	{r4, lr}
 80068da:	4604      	mov	r4, r0
 80068dc:	f7ff fff0 	bl	80068c0 <__sinit_lock_acquire>
 80068e0:	69a3      	ldr	r3, [r4, #24]
 80068e2:	b11b      	cbz	r3, 80068ec <__sinit+0x14>
 80068e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068e8:	f7ff bff0 	b.w	80068cc <__sinit_lock_release>
 80068ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80068f0:	6523      	str	r3, [r4, #80]	; 0x50
 80068f2:	4b13      	ldr	r3, [pc, #76]	; (8006940 <__sinit+0x68>)
 80068f4:	4a13      	ldr	r2, [pc, #76]	; (8006944 <__sinit+0x6c>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80068fa:	42a3      	cmp	r3, r4
 80068fc:	bf04      	itt	eq
 80068fe:	2301      	moveq	r3, #1
 8006900:	61a3      	streq	r3, [r4, #24]
 8006902:	4620      	mov	r0, r4
 8006904:	f000 f820 	bl	8006948 <__sfp>
 8006908:	6060      	str	r0, [r4, #4]
 800690a:	4620      	mov	r0, r4
 800690c:	f000 f81c 	bl	8006948 <__sfp>
 8006910:	60a0      	str	r0, [r4, #8]
 8006912:	4620      	mov	r0, r4
 8006914:	f000 f818 	bl	8006948 <__sfp>
 8006918:	2200      	movs	r2, #0
 800691a:	60e0      	str	r0, [r4, #12]
 800691c:	2104      	movs	r1, #4
 800691e:	6860      	ldr	r0, [r4, #4]
 8006920:	f7ff ff82 	bl	8006828 <std>
 8006924:	68a0      	ldr	r0, [r4, #8]
 8006926:	2201      	movs	r2, #1
 8006928:	2109      	movs	r1, #9
 800692a:	f7ff ff7d 	bl	8006828 <std>
 800692e:	68e0      	ldr	r0, [r4, #12]
 8006930:	2202      	movs	r2, #2
 8006932:	2112      	movs	r1, #18
 8006934:	f7ff ff78 	bl	8006828 <std>
 8006938:	2301      	movs	r3, #1
 800693a:	61a3      	str	r3, [r4, #24]
 800693c:	e7d2      	b.n	80068e4 <__sinit+0xc>
 800693e:	bf00      	nop
 8006940:	08007b94 	.word	0x08007b94
 8006944:	08006871 	.word	0x08006871

08006948 <__sfp>:
 8006948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694a:	4607      	mov	r7, r0
 800694c:	f7ff ffac 	bl	80068a8 <__sfp_lock_acquire>
 8006950:	4b1e      	ldr	r3, [pc, #120]	; (80069cc <__sfp+0x84>)
 8006952:	681e      	ldr	r6, [r3, #0]
 8006954:	69b3      	ldr	r3, [r6, #24]
 8006956:	b913      	cbnz	r3, 800695e <__sfp+0x16>
 8006958:	4630      	mov	r0, r6
 800695a:	f7ff ffbd 	bl	80068d8 <__sinit>
 800695e:	3648      	adds	r6, #72	; 0x48
 8006960:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006964:	3b01      	subs	r3, #1
 8006966:	d503      	bpl.n	8006970 <__sfp+0x28>
 8006968:	6833      	ldr	r3, [r6, #0]
 800696a:	b30b      	cbz	r3, 80069b0 <__sfp+0x68>
 800696c:	6836      	ldr	r6, [r6, #0]
 800696e:	e7f7      	b.n	8006960 <__sfp+0x18>
 8006970:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006974:	b9d5      	cbnz	r5, 80069ac <__sfp+0x64>
 8006976:	4b16      	ldr	r3, [pc, #88]	; (80069d0 <__sfp+0x88>)
 8006978:	60e3      	str	r3, [r4, #12]
 800697a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800697e:	6665      	str	r5, [r4, #100]	; 0x64
 8006980:	f000 f86c 	bl	8006a5c <__retarget_lock_init_recursive>
 8006984:	f7ff ff96 	bl	80068b4 <__sfp_lock_release>
 8006988:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800698c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006990:	6025      	str	r5, [r4, #0]
 8006992:	61a5      	str	r5, [r4, #24]
 8006994:	2208      	movs	r2, #8
 8006996:	4629      	mov	r1, r5
 8006998:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800699c:	f000 f86f 	bl	8006a7e <memset>
 80069a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80069a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80069a8:	4620      	mov	r0, r4
 80069aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069ac:	3468      	adds	r4, #104	; 0x68
 80069ae:	e7d9      	b.n	8006964 <__sfp+0x1c>
 80069b0:	2104      	movs	r1, #4
 80069b2:	4638      	mov	r0, r7
 80069b4:	f7ff ff62 	bl	800687c <__sfmoreglue>
 80069b8:	4604      	mov	r4, r0
 80069ba:	6030      	str	r0, [r6, #0]
 80069bc:	2800      	cmp	r0, #0
 80069be:	d1d5      	bne.n	800696c <__sfp+0x24>
 80069c0:	f7ff ff78 	bl	80068b4 <__sfp_lock_release>
 80069c4:	230c      	movs	r3, #12
 80069c6:	603b      	str	r3, [r7, #0]
 80069c8:	e7ee      	b.n	80069a8 <__sfp+0x60>
 80069ca:	bf00      	nop
 80069cc:	08007b94 	.word	0x08007b94
 80069d0:	ffff0001 	.word	0xffff0001

080069d4 <_fwalk_reent>:
 80069d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069d8:	4606      	mov	r6, r0
 80069da:	4688      	mov	r8, r1
 80069dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069e0:	2700      	movs	r7, #0
 80069e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069e6:	f1b9 0901 	subs.w	r9, r9, #1
 80069ea:	d505      	bpl.n	80069f8 <_fwalk_reent+0x24>
 80069ec:	6824      	ldr	r4, [r4, #0]
 80069ee:	2c00      	cmp	r4, #0
 80069f0:	d1f7      	bne.n	80069e2 <_fwalk_reent+0xe>
 80069f2:	4638      	mov	r0, r7
 80069f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069f8:	89ab      	ldrh	r3, [r5, #12]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d907      	bls.n	8006a0e <_fwalk_reent+0x3a>
 80069fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a02:	3301      	adds	r3, #1
 8006a04:	d003      	beq.n	8006a0e <_fwalk_reent+0x3a>
 8006a06:	4629      	mov	r1, r5
 8006a08:	4630      	mov	r0, r6
 8006a0a:	47c0      	blx	r8
 8006a0c:	4307      	orrs	r7, r0
 8006a0e:	3568      	adds	r5, #104	; 0x68
 8006a10:	e7e9      	b.n	80069e6 <_fwalk_reent+0x12>
	...

08006a14 <__libc_init_array>:
 8006a14:	b570      	push	{r4, r5, r6, lr}
 8006a16:	4d0d      	ldr	r5, [pc, #52]	; (8006a4c <__libc_init_array+0x38>)
 8006a18:	4c0d      	ldr	r4, [pc, #52]	; (8006a50 <__libc_init_array+0x3c>)
 8006a1a:	1b64      	subs	r4, r4, r5
 8006a1c:	10a4      	asrs	r4, r4, #2
 8006a1e:	2600      	movs	r6, #0
 8006a20:	42a6      	cmp	r6, r4
 8006a22:	d109      	bne.n	8006a38 <__libc_init_array+0x24>
 8006a24:	4d0b      	ldr	r5, [pc, #44]	; (8006a54 <__libc_init_array+0x40>)
 8006a26:	4c0c      	ldr	r4, [pc, #48]	; (8006a58 <__libc_init_array+0x44>)
 8006a28:	f000 ffa8 	bl	800797c <_init>
 8006a2c:	1b64      	subs	r4, r4, r5
 8006a2e:	10a4      	asrs	r4, r4, #2
 8006a30:	2600      	movs	r6, #0
 8006a32:	42a6      	cmp	r6, r4
 8006a34:	d105      	bne.n	8006a42 <__libc_init_array+0x2e>
 8006a36:	bd70      	pop	{r4, r5, r6, pc}
 8006a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a3c:	4798      	blx	r3
 8006a3e:	3601      	adds	r6, #1
 8006a40:	e7ee      	b.n	8006a20 <__libc_init_array+0xc>
 8006a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a46:	4798      	blx	r3
 8006a48:	3601      	adds	r6, #1
 8006a4a:	e7f2      	b.n	8006a32 <__libc_init_array+0x1e>
 8006a4c:	08007bd4 	.word	0x08007bd4
 8006a50:	08007bd4 	.word	0x08007bd4
 8006a54:	08007bd4 	.word	0x08007bd4
 8006a58:	08007bd8 	.word	0x08007bd8

08006a5c <__retarget_lock_init_recursive>:
 8006a5c:	4770      	bx	lr

08006a5e <__retarget_lock_acquire_recursive>:
 8006a5e:	4770      	bx	lr

08006a60 <__retarget_lock_release_recursive>:
 8006a60:	4770      	bx	lr

08006a62 <memcpy>:
 8006a62:	440a      	add	r2, r1
 8006a64:	4291      	cmp	r1, r2
 8006a66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006a6a:	d100      	bne.n	8006a6e <memcpy+0xc>
 8006a6c:	4770      	bx	lr
 8006a6e:	b510      	push	{r4, lr}
 8006a70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a78:	4291      	cmp	r1, r2
 8006a7a:	d1f9      	bne.n	8006a70 <memcpy+0xe>
 8006a7c:	bd10      	pop	{r4, pc}

08006a7e <memset>:
 8006a7e:	4402      	add	r2, r0
 8006a80:	4603      	mov	r3, r0
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d100      	bne.n	8006a88 <memset+0xa>
 8006a86:	4770      	bx	lr
 8006a88:	f803 1b01 	strb.w	r1, [r3], #1
 8006a8c:	e7f9      	b.n	8006a82 <memset+0x4>
	...

08006a90 <sbrk_aligned>:
 8006a90:	b570      	push	{r4, r5, r6, lr}
 8006a92:	4e0e      	ldr	r6, [pc, #56]	; (8006acc <sbrk_aligned+0x3c>)
 8006a94:	460c      	mov	r4, r1
 8006a96:	6831      	ldr	r1, [r6, #0]
 8006a98:	4605      	mov	r5, r0
 8006a9a:	b911      	cbnz	r1, 8006aa2 <sbrk_aligned+0x12>
 8006a9c:	f000 f984 	bl	8006da8 <_sbrk_r>
 8006aa0:	6030      	str	r0, [r6, #0]
 8006aa2:	4621      	mov	r1, r4
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	f000 f97f 	bl	8006da8 <_sbrk_r>
 8006aaa:	1c43      	adds	r3, r0, #1
 8006aac:	d00a      	beq.n	8006ac4 <sbrk_aligned+0x34>
 8006aae:	1cc4      	adds	r4, r0, #3
 8006ab0:	f024 0403 	bic.w	r4, r4, #3
 8006ab4:	42a0      	cmp	r0, r4
 8006ab6:	d007      	beq.n	8006ac8 <sbrk_aligned+0x38>
 8006ab8:	1a21      	subs	r1, r4, r0
 8006aba:	4628      	mov	r0, r5
 8006abc:	f000 f974 	bl	8006da8 <_sbrk_r>
 8006ac0:	3001      	adds	r0, #1
 8006ac2:	d101      	bne.n	8006ac8 <sbrk_aligned+0x38>
 8006ac4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006ac8:	4620      	mov	r0, r4
 8006aca:	bd70      	pop	{r4, r5, r6, pc}
 8006acc:	2000231c 	.word	0x2000231c

08006ad0 <_malloc_r>:
 8006ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad4:	1ccd      	adds	r5, r1, #3
 8006ad6:	f025 0503 	bic.w	r5, r5, #3
 8006ada:	3508      	adds	r5, #8
 8006adc:	2d0c      	cmp	r5, #12
 8006ade:	bf38      	it	cc
 8006ae0:	250c      	movcc	r5, #12
 8006ae2:	2d00      	cmp	r5, #0
 8006ae4:	4607      	mov	r7, r0
 8006ae6:	db01      	blt.n	8006aec <_malloc_r+0x1c>
 8006ae8:	42a9      	cmp	r1, r5
 8006aea:	d905      	bls.n	8006af8 <_malloc_r+0x28>
 8006aec:	230c      	movs	r3, #12
 8006aee:	603b      	str	r3, [r7, #0]
 8006af0:	2600      	movs	r6, #0
 8006af2:	4630      	mov	r0, r6
 8006af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006af8:	4e2e      	ldr	r6, [pc, #184]	; (8006bb4 <_malloc_r+0xe4>)
 8006afa:	f000 fbc5 	bl	8007288 <__malloc_lock>
 8006afe:	6833      	ldr	r3, [r6, #0]
 8006b00:	461c      	mov	r4, r3
 8006b02:	bb34      	cbnz	r4, 8006b52 <_malloc_r+0x82>
 8006b04:	4629      	mov	r1, r5
 8006b06:	4638      	mov	r0, r7
 8006b08:	f7ff ffc2 	bl	8006a90 <sbrk_aligned>
 8006b0c:	1c43      	adds	r3, r0, #1
 8006b0e:	4604      	mov	r4, r0
 8006b10:	d14d      	bne.n	8006bae <_malloc_r+0xde>
 8006b12:	6834      	ldr	r4, [r6, #0]
 8006b14:	4626      	mov	r6, r4
 8006b16:	2e00      	cmp	r6, #0
 8006b18:	d140      	bne.n	8006b9c <_malloc_r+0xcc>
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	4631      	mov	r1, r6
 8006b1e:	4638      	mov	r0, r7
 8006b20:	eb04 0803 	add.w	r8, r4, r3
 8006b24:	f000 f940 	bl	8006da8 <_sbrk_r>
 8006b28:	4580      	cmp	r8, r0
 8006b2a:	d13a      	bne.n	8006ba2 <_malloc_r+0xd2>
 8006b2c:	6821      	ldr	r1, [r4, #0]
 8006b2e:	3503      	adds	r5, #3
 8006b30:	1a6d      	subs	r5, r5, r1
 8006b32:	f025 0503 	bic.w	r5, r5, #3
 8006b36:	3508      	adds	r5, #8
 8006b38:	2d0c      	cmp	r5, #12
 8006b3a:	bf38      	it	cc
 8006b3c:	250c      	movcc	r5, #12
 8006b3e:	4629      	mov	r1, r5
 8006b40:	4638      	mov	r0, r7
 8006b42:	f7ff ffa5 	bl	8006a90 <sbrk_aligned>
 8006b46:	3001      	adds	r0, #1
 8006b48:	d02b      	beq.n	8006ba2 <_malloc_r+0xd2>
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	442b      	add	r3, r5
 8006b4e:	6023      	str	r3, [r4, #0]
 8006b50:	e00e      	b.n	8006b70 <_malloc_r+0xa0>
 8006b52:	6822      	ldr	r2, [r4, #0]
 8006b54:	1b52      	subs	r2, r2, r5
 8006b56:	d41e      	bmi.n	8006b96 <_malloc_r+0xc6>
 8006b58:	2a0b      	cmp	r2, #11
 8006b5a:	d916      	bls.n	8006b8a <_malloc_r+0xba>
 8006b5c:	1961      	adds	r1, r4, r5
 8006b5e:	42a3      	cmp	r3, r4
 8006b60:	6025      	str	r5, [r4, #0]
 8006b62:	bf18      	it	ne
 8006b64:	6059      	strne	r1, [r3, #4]
 8006b66:	6863      	ldr	r3, [r4, #4]
 8006b68:	bf08      	it	eq
 8006b6a:	6031      	streq	r1, [r6, #0]
 8006b6c:	5162      	str	r2, [r4, r5]
 8006b6e:	604b      	str	r3, [r1, #4]
 8006b70:	4638      	mov	r0, r7
 8006b72:	f104 060b 	add.w	r6, r4, #11
 8006b76:	f000 fb8d 	bl	8007294 <__malloc_unlock>
 8006b7a:	f026 0607 	bic.w	r6, r6, #7
 8006b7e:	1d23      	adds	r3, r4, #4
 8006b80:	1af2      	subs	r2, r6, r3
 8006b82:	d0b6      	beq.n	8006af2 <_malloc_r+0x22>
 8006b84:	1b9b      	subs	r3, r3, r6
 8006b86:	50a3      	str	r3, [r4, r2]
 8006b88:	e7b3      	b.n	8006af2 <_malloc_r+0x22>
 8006b8a:	6862      	ldr	r2, [r4, #4]
 8006b8c:	42a3      	cmp	r3, r4
 8006b8e:	bf0c      	ite	eq
 8006b90:	6032      	streq	r2, [r6, #0]
 8006b92:	605a      	strne	r2, [r3, #4]
 8006b94:	e7ec      	b.n	8006b70 <_malloc_r+0xa0>
 8006b96:	4623      	mov	r3, r4
 8006b98:	6864      	ldr	r4, [r4, #4]
 8006b9a:	e7b2      	b.n	8006b02 <_malloc_r+0x32>
 8006b9c:	4634      	mov	r4, r6
 8006b9e:	6876      	ldr	r6, [r6, #4]
 8006ba0:	e7b9      	b.n	8006b16 <_malloc_r+0x46>
 8006ba2:	230c      	movs	r3, #12
 8006ba4:	603b      	str	r3, [r7, #0]
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	f000 fb74 	bl	8007294 <__malloc_unlock>
 8006bac:	e7a1      	b.n	8006af2 <_malloc_r+0x22>
 8006bae:	6025      	str	r5, [r4, #0]
 8006bb0:	e7de      	b.n	8006b70 <_malloc_r+0xa0>
 8006bb2:	bf00      	nop
 8006bb4:	20002318 	.word	0x20002318

08006bb8 <iprintf>:
 8006bb8:	b40f      	push	{r0, r1, r2, r3}
 8006bba:	4b0a      	ldr	r3, [pc, #40]	; (8006be4 <iprintf+0x2c>)
 8006bbc:	b513      	push	{r0, r1, r4, lr}
 8006bbe:	681c      	ldr	r4, [r3, #0]
 8006bc0:	b124      	cbz	r4, 8006bcc <iprintf+0x14>
 8006bc2:	69a3      	ldr	r3, [r4, #24]
 8006bc4:	b913      	cbnz	r3, 8006bcc <iprintf+0x14>
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	f7ff fe86 	bl	80068d8 <__sinit>
 8006bcc:	ab05      	add	r3, sp, #20
 8006bce:	9a04      	ldr	r2, [sp, #16]
 8006bd0:	68a1      	ldr	r1, [r4, #8]
 8006bd2:	9301      	str	r3, [sp, #4]
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	f000 fbd9 	bl	800738c <_vfiprintf_r>
 8006bda:	b002      	add	sp, #8
 8006bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006be0:	b004      	add	sp, #16
 8006be2:	4770      	bx	lr
 8006be4:	20000014 	.word	0x20000014

08006be8 <_puts_r>:
 8006be8:	b570      	push	{r4, r5, r6, lr}
 8006bea:	460e      	mov	r6, r1
 8006bec:	4605      	mov	r5, r0
 8006bee:	b118      	cbz	r0, 8006bf8 <_puts_r+0x10>
 8006bf0:	6983      	ldr	r3, [r0, #24]
 8006bf2:	b90b      	cbnz	r3, 8006bf8 <_puts_r+0x10>
 8006bf4:	f7ff fe70 	bl	80068d8 <__sinit>
 8006bf8:	69ab      	ldr	r3, [r5, #24]
 8006bfa:	68ac      	ldr	r4, [r5, #8]
 8006bfc:	b913      	cbnz	r3, 8006c04 <_puts_r+0x1c>
 8006bfe:	4628      	mov	r0, r5
 8006c00:	f7ff fe6a 	bl	80068d8 <__sinit>
 8006c04:	4b2c      	ldr	r3, [pc, #176]	; (8006cb8 <_puts_r+0xd0>)
 8006c06:	429c      	cmp	r4, r3
 8006c08:	d120      	bne.n	8006c4c <_puts_r+0x64>
 8006c0a:	686c      	ldr	r4, [r5, #4]
 8006c0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c0e:	07db      	lsls	r3, r3, #31
 8006c10:	d405      	bmi.n	8006c1e <_puts_r+0x36>
 8006c12:	89a3      	ldrh	r3, [r4, #12]
 8006c14:	0598      	lsls	r0, r3, #22
 8006c16:	d402      	bmi.n	8006c1e <_puts_r+0x36>
 8006c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c1a:	f7ff ff20 	bl	8006a5e <__retarget_lock_acquire_recursive>
 8006c1e:	89a3      	ldrh	r3, [r4, #12]
 8006c20:	0719      	lsls	r1, r3, #28
 8006c22:	d51d      	bpl.n	8006c60 <_puts_r+0x78>
 8006c24:	6923      	ldr	r3, [r4, #16]
 8006c26:	b1db      	cbz	r3, 8006c60 <_puts_r+0x78>
 8006c28:	3e01      	subs	r6, #1
 8006c2a:	68a3      	ldr	r3, [r4, #8]
 8006c2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c30:	3b01      	subs	r3, #1
 8006c32:	60a3      	str	r3, [r4, #8]
 8006c34:	bb39      	cbnz	r1, 8006c86 <_puts_r+0x9e>
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	da38      	bge.n	8006cac <_puts_r+0xc4>
 8006c3a:	4622      	mov	r2, r4
 8006c3c:	210a      	movs	r1, #10
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f000 f906 	bl	8006e50 <__swbuf_r>
 8006c44:	3001      	adds	r0, #1
 8006c46:	d011      	beq.n	8006c6c <_puts_r+0x84>
 8006c48:	250a      	movs	r5, #10
 8006c4a:	e011      	b.n	8006c70 <_puts_r+0x88>
 8006c4c:	4b1b      	ldr	r3, [pc, #108]	; (8006cbc <_puts_r+0xd4>)
 8006c4e:	429c      	cmp	r4, r3
 8006c50:	d101      	bne.n	8006c56 <_puts_r+0x6e>
 8006c52:	68ac      	ldr	r4, [r5, #8]
 8006c54:	e7da      	b.n	8006c0c <_puts_r+0x24>
 8006c56:	4b1a      	ldr	r3, [pc, #104]	; (8006cc0 <_puts_r+0xd8>)
 8006c58:	429c      	cmp	r4, r3
 8006c5a:	bf08      	it	eq
 8006c5c:	68ec      	ldreq	r4, [r5, #12]
 8006c5e:	e7d5      	b.n	8006c0c <_puts_r+0x24>
 8006c60:	4621      	mov	r1, r4
 8006c62:	4628      	mov	r0, r5
 8006c64:	f000 f958 	bl	8006f18 <__swsetup_r>
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d0dd      	beq.n	8006c28 <_puts_r+0x40>
 8006c6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006c70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c72:	07da      	lsls	r2, r3, #31
 8006c74:	d405      	bmi.n	8006c82 <_puts_r+0x9a>
 8006c76:	89a3      	ldrh	r3, [r4, #12]
 8006c78:	059b      	lsls	r3, r3, #22
 8006c7a:	d402      	bmi.n	8006c82 <_puts_r+0x9a>
 8006c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c7e:	f7ff feef 	bl	8006a60 <__retarget_lock_release_recursive>
 8006c82:	4628      	mov	r0, r5
 8006c84:	bd70      	pop	{r4, r5, r6, pc}
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	da04      	bge.n	8006c94 <_puts_r+0xac>
 8006c8a:	69a2      	ldr	r2, [r4, #24]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	dc06      	bgt.n	8006c9e <_puts_r+0xb6>
 8006c90:	290a      	cmp	r1, #10
 8006c92:	d004      	beq.n	8006c9e <_puts_r+0xb6>
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	1c5a      	adds	r2, r3, #1
 8006c98:	6022      	str	r2, [r4, #0]
 8006c9a:	7019      	strb	r1, [r3, #0]
 8006c9c:	e7c5      	b.n	8006c2a <_puts_r+0x42>
 8006c9e:	4622      	mov	r2, r4
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	f000 f8d5 	bl	8006e50 <__swbuf_r>
 8006ca6:	3001      	adds	r0, #1
 8006ca8:	d1bf      	bne.n	8006c2a <_puts_r+0x42>
 8006caa:	e7df      	b.n	8006c6c <_puts_r+0x84>
 8006cac:	6823      	ldr	r3, [r4, #0]
 8006cae:	250a      	movs	r5, #10
 8006cb0:	1c5a      	adds	r2, r3, #1
 8006cb2:	6022      	str	r2, [r4, #0]
 8006cb4:	701d      	strb	r5, [r3, #0]
 8006cb6:	e7db      	b.n	8006c70 <_puts_r+0x88>
 8006cb8:	08007b54 	.word	0x08007b54
 8006cbc:	08007b74 	.word	0x08007b74
 8006cc0:	08007b34 	.word	0x08007b34

08006cc4 <puts>:
 8006cc4:	4b02      	ldr	r3, [pc, #8]	; (8006cd0 <puts+0xc>)
 8006cc6:	4601      	mov	r1, r0
 8006cc8:	6818      	ldr	r0, [r3, #0]
 8006cca:	f7ff bf8d 	b.w	8006be8 <_puts_r>
 8006cce:	bf00      	nop
 8006cd0:	20000014 	.word	0x20000014

08006cd4 <cleanup_glue>:
 8006cd4:	b538      	push	{r3, r4, r5, lr}
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	6809      	ldr	r1, [r1, #0]
 8006cda:	4605      	mov	r5, r0
 8006cdc:	b109      	cbz	r1, 8006ce2 <cleanup_glue+0xe>
 8006cde:	f7ff fff9 	bl	8006cd4 <cleanup_glue>
 8006ce2:	4621      	mov	r1, r4
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cea:	f000 bad9 	b.w	80072a0 <_free_r>
	...

08006cf0 <_reclaim_reent>:
 8006cf0:	4b2c      	ldr	r3, [pc, #176]	; (8006da4 <_reclaim_reent+0xb4>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4283      	cmp	r3, r0
 8006cf6:	b570      	push	{r4, r5, r6, lr}
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	d051      	beq.n	8006da0 <_reclaim_reent+0xb0>
 8006cfc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006cfe:	b143      	cbz	r3, 8006d12 <_reclaim_reent+0x22>
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d14a      	bne.n	8006d9c <_reclaim_reent+0xac>
 8006d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d08:	6819      	ldr	r1, [r3, #0]
 8006d0a:	b111      	cbz	r1, 8006d12 <_reclaim_reent+0x22>
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f000 fac7 	bl	80072a0 <_free_r>
 8006d12:	6961      	ldr	r1, [r4, #20]
 8006d14:	b111      	cbz	r1, 8006d1c <_reclaim_reent+0x2c>
 8006d16:	4620      	mov	r0, r4
 8006d18:	f000 fac2 	bl	80072a0 <_free_r>
 8006d1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006d1e:	b111      	cbz	r1, 8006d26 <_reclaim_reent+0x36>
 8006d20:	4620      	mov	r0, r4
 8006d22:	f000 fabd 	bl	80072a0 <_free_r>
 8006d26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006d28:	b111      	cbz	r1, 8006d30 <_reclaim_reent+0x40>
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	f000 fab8 	bl	80072a0 <_free_r>
 8006d30:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006d32:	b111      	cbz	r1, 8006d3a <_reclaim_reent+0x4a>
 8006d34:	4620      	mov	r0, r4
 8006d36:	f000 fab3 	bl	80072a0 <_free_r>
 8006d3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006d3c:	b111      	cbz	r1, 8006d44 <_reclaim_reent+0x54>
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f000 faae 	bl	80072a0 <_free_r>
 8006d44:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006d46:	b111      	cbz	r1, 8006d4e <_reclaim_reent+0x5e>
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f000 faa9 	bl	80072a0 <_free_r>
 8006d4e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006d50:	b111      	cbz	r1, 8006d58 <_reclaim_reent+0x68>
 8006d52:	4620      	mov	r0, r4
 8006d54:	f000 faa4 	bl	80072a0 <_free_r>
 8006d58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d5a:	b111      	cbz	r1, 8006d62 <_reclaim_reent+0x72>
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f000 fa9f 	bl	80072a0 <_free_r>
 8006d62:	69a3      	ldr	r3, [r4, #24]
 8006d64:	b1e3      	cbz	r3, 8006da0 <_reclaim_reent+0xb0>
 8006d66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006d68:	4620      	mov	r0, r4
 8006d6a:	4798      	blx	r3
 8006d6c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006d6e:	b1b9      	cbz	r1, 8006da0 <_reclaim_reent+0xb0>
 8006d70:	4620      	mov	r0, r4
 8006d72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006d76:	f7ff bfad 	b.w	8006cd4 <cleanup_glue>
 8006d7a:	5949      	ldr	r1, [r1, r5]
 8006d7c:	b941      	cbnz	r1, 8006d90 <_reclaim_reent+0xa0>
 8006d7e:	3504      	adds	r5, #4
 8006d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d82:	2d80      	cmp	r5, #128	; 0x80
 8006d84:	68d9      	ldr	r1, [r3, #12]
 8006d86:	d1f8      	bne.n	8006d7a <_reclaim_reent+0x8a>
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f000 fa89 	bl	80072a0 <_free_r>
 8006d8e:	e7ba      	b.n	8006d06 <_reclaim_reent+0x16>
 8006d90:	680e      	ldr	r6, [r1, #0]
 8006d92:	4620      	mov	r0, r4
 8006d94:	f000 fa84 	bl	80072a0 <_free_r>
 8006d98:	4631      	mov	r1, r6
 8006d9a:	e7ef      	b.n	8006d7c <_reclaim_reent+0x8c>
 8006d9c:	2500      	movs	r5, #0
 8006d9e:	e7ef      	b.n	8006d80 <_reclaim_reent+0x90>
 8006da0:	bd70      	pop	{r4, r5, r6, pc}
 8006da2:	bf00      	nop
 8006da4:	20000014 	.word	0x20000014

08006da8 <_sbrk_r>:
 8006da8:	b538      	push	{r3, r4, r5, lr}
 8006daa:	4d06      	ldr	r5, [pc, #24]	; (8006dc4 <_sbrk_r+0x1c>)
 8006dac:	2300      	movs	r3, #0
 8006dae:	4604      	mov	r4, r0
 8006db0:	4608      	mov	r0, r1
 8006db2:	602b      	str	r3, [r5, #0]
 8006db4:	f7f9 ff4e 	bl	8000c54 <_sbrk>
 8006db8:	1c43      	adds	r3, r0, #1
 8006dba:	d102      	bne.n	8006dc2 <_sbrk_r+0x1a>
 8006dbc:	682b      	ldr	r3, [r5, #0]
 8006dbe:	b103      	cbz	r3, 8006dc2 <_sbrk_r+0x1a>
 8006dc0:	6023      	str	r3, [r4, #0]
 8006dc2:	bd38      	pop	{r3, r4, r5, pc}
 8006dc4:	20002320 	.word	0x20002320

08006dc8 <__sread>:
 8006dc8:	b510      	push	{r4, lr}
 8006dca:	460c      	mov	r4, r1
 8006dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dd0:	f000 fda0 	bl	8007914 <_read_r>
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	bfab      	itete	ge
 8006dd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006dda:	89a3      	ldrhlt	r3, [r4, #12]
 8006ddc:	181b      	addge	r3, r3, r0
 8006dde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006de2:	bfac      	ite	ge
 8006de4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006de6:	81a3      	strhlt	r3, [r4, #12]
 8006de8:	bd10      	pop	{r4, pc}

08006dea <__swrite>:
 8006dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dee:	461f      	mov	r7, r3
 8006df0:	898b      	ldrh	r3, [r1, #12]
 8006df2:	05db      	lsls	r3, r3, #23
 8006df4:	4605      	mov	r5, r0
 8006df6:	460c      	mov	r4, r1
 8006df8:	4616      	mov	r6, r2
 8006dfa:	d505      	bpl.n	8006e08 <__swrite+0x1e>
 8006dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e00:	2302      	movs	r3, #2
 8006e02:	2200      	movs	r2, #0
 8006e04:	f000 f9c8 	bl	8007198 <_lseek_r>
 8006e08:	89a3      	ldrh	r3, [r4, #12]
 8006e0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e12:	81a3      	strh	r3, [r4, #12]
 8006e14:	4632      	mov	r2, r6
 8006e16:	463b      	mov	r3, r7
 8006e18:	4628      	mov	r0, r5
 8006e1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e1e:	f000 b869 	b.w	8006ef4 <_write_r>

08006e22 <__sseek>:
 8006e22:	b510      	push	{r4, lr}
 8006e24:	460c      	mov	r4, r1
 8006e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e2a:	f000 f9b5 	bl	8007198 <_lseek_r>
 8006e2e:	1c43      	adds	r3, r0, #1
 8006e30:	89a3      	ldrh	r3, [r4, #12]
 8006e32:	bf15      	itete	ne
 8006e34:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e3e:	81a3      	strheq	r3, [r4, #12]
 8006e40:	bf18      	it	ne
 8006e42:	81a3      	strhne	r3, [r4, #12]
 8006e44:	bd10      	pop	{r4, pc}

08006e46 <__sclose>:
 8006e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e4a:	f000 b8d3 	b.w	8006ff4 <_close_r>
	...

08006e50 <__swbuf_r>:
 8006e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e52:	460e      	mov	r6, r1
 8006e54:	4614      	mov	r4, r2
 8006e56:	4605      	mov	r5, r0
 8006e58:	b118      	cbz	r0, 8006e62 <__swbuf_r+0x12>
 8006e5a:	6983      	ldr	r3, [r0, #24]
 8006e5c:	b90b      	cbnz	r3, 8006e62 <__swbuf_r+0x12>
 8006e5e:	f7ff fd3b 	bl	80068d8 <__sinit>
 8006e62:	4b21      	ldr	r3, [pc, #132]	; (8006ee8 <__swbuf_r+0x98>)
 8006e64:	429c      	cmp	r4, r3
 8006e66:	d12b      	bne.n	8006ec0 <__swbuf_r+0x70>
 8006e68:	686c      	ldr	r4, [r5, #4]
 8006e6a:	69a3      	ldr	r3, [r4, #24]
 8006e6c:	60a3      	str	r3, [r4, #8]
 8006e6e:	89a3      	ldrh	r3, [r4, #12]
 8006e70:	071a      	lsls	r2, r3, #28
 8006e72:	d52f      	bpl.n	8006ed4 <__swbuf_r+0x84>
 8006e74:	6923      	ldr	r3, [r4, #16]
 8006e76:	b36b      	cbz	r3, 8006ed4 <__swbuf_r+0x84>
 8006e78:	6923      	ldr	r3, [r4, #16]
 8006e7a:	6820      	ldr	r0, [r4, #0]
 8006e7c:	1ac0      	subs	r0, r0, r3
 8006e7e:	6963      	ldr	r3, [r4, #20]
 8006e80:	b2f6      	uxtb	r6, r6
 8006e82:	4283      	cmp	r3, r0
 8006e84:	4637      	mov	r7, r6
 8006e86:	dc04      	bgt.n	8006e92 <__swbuf_r+0x42>
 8006e88:	4621      	mov	r1, r4
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	f000 f948 	bl	8007120 <_fflush_r>
 8006e90:	bb30      	cbnz	r0, 8006ee0 <__swbuf_r+0x90>
 8006e92:	68a3      	ldr	r3, [r4, #8]
 8006e94:	3b01      	subs	r3, #1
 8006e96:	60a3      	str	r3, [r4, #8]
 8006e98:	6823      	ldr	r3, [r4, #0]
 8006e9a:	1c5a      	adds	r2, r3, #1
 8006e9c:	6022      	str	r2, [r4, #0]
 8006e9e:	701e      	strb	r6, [r3, #0]
 8006ea0:	6963      	ldr	r3, [r4, #20]
 8006ea2:	3001      	adds	r0, #1
 8006ea4:	4283      	cmp	r3, r0
 8006ea6:	d004      	beq.n	8006eb2 <__swbuf_r+0x62>
 8006ea8:	89a3      	ldrh	r3, [r4, #12]
 8006eaa:	07db      	lsls	r3, r3, #31
 8006eac:	d506      	bpl.n	8006ebc <__swbuf_r+0x6c>
 8006eae:	2e0a      	cmp	r6, #10
 8006eb0:	d104      	bne.n	8006ebc <__swbuf_r+0x6c>
 8006eb2:	4621      	mov	r1, r4
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	f000 f933 	bl	8007120 <_fflush_r>
 8006eba:	b988      	cbnz	r0, 8006ee0 <__swbuf_r+0x90>
 8006ebc:	4638      	mov	r0, r7
 8006ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ec0:	4b0a      	ldr	r3, [pc, #40]	; (8006eec <__swbuf_r+0x9c>)
 8006ec2:	429c      	cmp	r4, r3
 8006ec4:	d101      	bne.n	8006eca <__swbuf_r+0x7a>
 8006ec6:	68ac      	ldr	r4, [r5, #8]
 8006ec8:	e7cf      	b.n	8006e6a <__swbuf_r+0x1a>
 8006eca:	4b09      	ldr	r3, [pc, #36]	; (8006ef0 <__swbuf_r+0xa0>)
 8006ecc:	429c      	cmp	r4, r3
 8006ece:	bf08      	it	eq
 8006ed0:	68ec      	ldreq	r4, [r5, #12]
 8006ed2:	e7ca      	b.n	8006e6a <__swbuf_r+0x1a>
 8006ed4:	4621      	mov	r1, r4
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	f000 f81e 	bl	8006f18 <__swsetup_r>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d0cb      	beq.n	8006e78 <__swbuf_r+0x28>
 8006ee0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006ee4:	e7ea      	b.n	8006ebc <__swbuf_r+0x6c>
 8006ee6:	bf00      	nop
 8006ee8:	08007b54 	.word	0x08007b54
 8006eec:	08007b74 	.word	0x08007b74
 8006ef0:	08007b34 	.word	0x08007b34

08006ef4 <_write_r>:
 8006ef4:	b538      	push	{r3, r4, r5, lr}
 8006ef6:	4d07      	ldr	r5, [pc, #28]	; (8006f14 <_write_r+0x20>)
 8006ef8:	4604      	mov	r4, r0
 8006efa:	4608      	mov	r0, r1
 8006efc:	4611      	mov	r1, r2
 8006efe:	2200      	movs	r2, #0
 8006f00:	602a      	str	r2, [r5, #0]
 8006f02:	461a      	mov	r2, r3
 8006f04:	f7f9 fb5d 	bl	80005c2 <_write>
 8006f08:	1c43      	adds	r3, r0, #1
 8006f0a:	d102      	bne.n	8006f12 <_write_r+0x1e>
 8006f0c:	682b      	ldr	r3, [r5, #0]
 8006f0e:	b103      	cbz	r3, 8006f12 <_write_r+0x1e>
 8006f10:	6023      	str	r3, [r4, #0]
 8006f12:	bd38      	pop	{r3, r4, r5, pc}
 8006f14:	20002320 	.word	0x20002320

08006f18 <__swsetup_r>:
 8006f18:	4b32      	ldr	r3, [pc, #200]	; (8006fe4 <__swsetup_r+0xcc>)
 8006f1a:	b570      	push	{r4, r5, r6, lr}
 8006f1c:	681d      	ldr	r5, [r3, #0]
 8006f1e:	4606      	mov	r6, r0
 8006f20:	460c      	mov	r4, r1
 8006f22:	b125      	cbz	r5, 8006f2e <__swsetup_r+0x16>
 8006f24:	69ab      	ldr	r3, [r5, #24]
 8006f26:	b913      	cbnz	r3, 8006f2e <__swsetup_r+0x16>
 8006f28:	4628      	mov	r0, r5
 8006f2a:	f7ff fcd5 	bl	80068d8 <__sinit>
 8006f2e:	4b2e      	ldr	r3, [pc, #184]	; (8006fe8 <__swsetup_r+0xd0>)
 8006f30:	429c      	cmp	r4, r3
 8006f32:	d10f      	bne.n	8006f54 <__swsetup_r+0x3c>
 8006f34:	686c      	ldr	r4, [r5, #4]
 8006f36:	89a3      	ldrh	r3, [r4, #12]
 8006f38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f3c:	0719      	lsls	r1, r3, #28
 8006f3e:	d42c      	bmi.n	8006f9a <__swsetup_r+0x82>
 8006f40:	06dd      	lsls	r5, r3, #27
 8006f42:	d411      	bmi.n	8006f68 <__swsetup_r+0x50>
 8006f44:	2309      	movs	r3, #9
 8006f46:	6033      	str	r3, [r6, #0]
 8006f48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f4c:	81a3      	strh	r3, [r4, #12]
 8006f4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f52:	e03e      	b.n	8006fd2 <__swsetup_r+0xba>
 8006f54:	4b25      	ldr	r3, [pc, #148]	; (8006fec <__swsetup_r+0xd4>)
 8006f56:	429c      	cmp	r4, r3
 8006f58:	d101      	bne.n	8006f5e <__swsetup_r+0x46>
 8006f5a:	68ac      	ldr	r4, [r5, #8]
 8006f5c:	e7eb      	b.n	8006f36 <__swsetup_r+0x1e>
 8006f5e:	4b24      	ldr	r3, [pc, #144]	; (8006ff0 <__swsetup_r+0xd8>)
 8006f60:	429c      	cmp	r4, r3
 8006f62:	bf08      	it	eq
 8006f64:	68ec      	ldreq	r4, [r5, #12]
 8006f66:	e7e6      	b.n	8006f36 <__swsetup_r+0x1e>
 8006f68:	0758      	lsls	r0, r3, #29
 8006f6a:	d512      	bpl.n	8006f92 <__swsetup_r+0x7a>
 8006f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f6e:	b141      	cbz	r1, 8006f82 <__swsetup_r+0x6a>
 8006f70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f74:	4299      	cmp	r1, r3
 8006f76:	d002      	beq.n	8006f7e <__swsetup_r+0x66>
 8006f78:	4630      	mov	r0, r6
 8006f7a:	f000 f991 	bl	80072a0 <_free_r>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	6363      	str	r3, [r4, #52]	; 0x34
 8006f82:	89a3      	ldrh	r3, [r4, #12]
 8006f84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f88:	81a3      	strh	r3, [r4, #12]
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	6063      	str	r3, [r4, #4]
 8006f8e:	6923      	ldr	r3, [r4, #16]
 8006f90:	6023      	str	r3, [r4, #0]
 8006f92:	89a3      	ldrh	r3, [r4, #12]
 8006f94:	f043 0308 	orr.w	r3, r3, #8
 8006f98:	81a3      	strh	r3, [r4, #12]
 8006f9a:	6923      	ldr	r3, [r4, #16]
 8006f9c:	b94b      	cbnz	r3, 8006fb2 <__swsetup_r+0x9a>
 8006f9e:	89a3      	ldrh	r3, [r4, #12]
 8006fa0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fa8:	d003      	beq.n	8006fb2 <__swsetup_r+0x9a>
 8006faa:	4621      	mov	r1, r4
 8006fac:	4630      	mov	r0, r6
 8006fae:	f000 f92b 	bl	8007208 <__smakebuf_r>
 8006fb2:	89a0      	ldrh	r0, [r4, #12]
 8006fb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fb8:	f010 0301 	ands.w	r3, r0, #1
 8006fbc:	d00a      	beq.n	8006fd4 <__swsetup_r+0xbc>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	60a3      	str	r3, [r4, #8]
 8006fc2:	6963      	ldr	r3, [r4, #20]
 8006fc4:	425b      	negs	r3, r3
 8006fc6:	61a3      	str	r3, [r4, #24]
 8006fc8:	6923      	ldr	r3, [r4, #16]
 8006fca:	b943      	cbnz	r3, 8006fde <__swsetup_r+0xc6>
 8006fcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006fd0:	d1ba      	bne.n	8006f48 <__swsetup_r+0x30>
 8006fd2:	bd70      	pop	{r4, r5, r6, pc}
 8006fd4:	0781      	lsls	r1, r0, #30
 8006fd6:	bf58      	it	pl
 8006fd8:	6963      	ldrpl	r3, [r4, #20]
 8006fda:	60a3      	str	r3, [r4, #8]
 8006fdc:	e7f4      	b.n	8006fc8 <__swsetup_r+0xb0>
 8006fde:	2000      	movs	r0, #0
 8006fe0:	e7f7      	b.n	8006fd2 <__swsetup_r+0xba>
 8006fe2:	bf00      	nop
 8006fe4:	20000014 	.word	0x20000014
 8006fe8:	08007b54 	.word	0x08007b54
 8006fec:	08007b74 	.word	0x08007b74
 8006ff0:	08007b34 	.word	0x08007b34

08006ff4 <_close_r>:
 8006ff4:	b538      	push	{r3, r4, r5, lr}
 8006ff6:	4d06      	ldr	r5, [pc, #24]	; (8007010 <_close_r+0x1c>)
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	4604      	mov	r4, r0
 8006ffc:	4608      	mov	r0, r1
 8006ffe:	602b      	str	r3, [r5, #0]
 8007000:	f7f9 fdf3 	bl	8000bea <_close>
 8007004:	1c43      	adds	r3, r0, #1
 8007006:	d102      	bne.n	800700e <_close_r+0x1a>
 8007008:	682b      	ldr	r3, [r5, #0]
 800700a:	b103      	cbz	r3, 800700e <_close_r+0x1a>
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	bd38      	pop	{r3, r4, r5, pc}
 8007010:	20002320 	.word	0x20002320

08007014 <__sflush_r>:
 8007014:	898a      	ldrh	r2, [r1, #12]
 8007016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800701a:	4605      	mov	r5, r0
 800701c:	0710      	lsls	r0, r2, #28
 800701e:	460c      	mov	r4, r1
 8007020:	d458      	bmi.n	80070d4 <__sflush_r+0xc0>
 8007022:	684b      	ldr	r3, [r1, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	dc05      	bgt.n	8007034 <__sflush_r+0x20>
 8007028:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800702a:	2b00      	cmp	r3, #0
 800702c:	dc02      	bgt.n	8007034 <__sflush_r+0x20>
 800702e:	2000      	movs	r0, #0
 8007030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007034:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007036:	2e00      	cmp	r6, #0
 8007038:	d0f9      	beq.n	800702e <__sflush_r+0x1a>
 800703a:	2300      	movs	r3, #0
 800703c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007040:	682f      	ldr	r7, [r5, #0]
 8007042:	602b      	str	r3, [r5, #0]
 8007044:	d032      	beq.n	80070ac <__sflush_r+0x98>
 8007046:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007048:	89a3      	ldrh	r3, [r4, #12]
 800704a:	075a      	lsls	r2, r3, #29
 800704c:	d505      	bpl.n	800705a <__sflush_r+0x46>
 800704e:	6863      	ldr	r3, [r4, #4]
 8007050:	1ac0      	subs	r0, r0, r3
 8007052:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007054:	b10b      	cbz	r3, 800705a <__sflush_r+0x46>
 8007056:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007058:	1ac0      	subs	r0, r0, r3
 800705a:	2300      	movs	r3, #0
 800705c:	4602      	mov	r2, r0
 800705e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007060:	6a21      	ldr	r1, [r4, #32]
 8007062:	4628      	mov	r0, r5
 8007064:	47b0      	blx	r6
 8007066:	1c43      	adds	r3, r0, #1
 8007068:	89a3      	ldrh	r3, [r4, #12]
 800706a:	d106      	bne.n	800707a <__sflush_r+0x66>
 800706c:	6829      	ldr	r1, [r5, #0]
 800706e:	291d      	cmp	r1, #29
 8007070:	d82c      	bhi.n	80070cc <__sflush_r+0xb8>
 8007072:	4a2a      	ldr	r2, [pc, #168]	; (800711c <__sflush_r+0x108>)
 8007074:	40ca      	lsrs	r2, r1
 8007076:	07d6      	lsls	r6, r2, #31
 8007078:	d528      	bpl.n	80070cc <__sflush_r+0xb8>
 800707a:	2200      	movs	r2, #0
 800707c:	6062      	str	r2, [r4, #4]
 800707e:	04d9      	lsls	r1, r3, #19
 8007080:	6922      	ldr	r2, [r4, #16]
 8007082:	6022      	str	r2, [r4, #0]
 8007084:	d504      	bpl.n	8007090 <__sflush_r+0x7c>
 8007086:	1c42      	adds	r2, r0, #1
 8007088:	d101      	bne.n	800708e <__sflush_r+0x7a>
 800708a:	682b      	ldr	r3, [r5, #0]
 800708c:	b903      	cbnz	r3, 8007090 <__sflush_r+0x7c>
 800708e:	6560      	str	r0, [r4, #84]	; 0x54
 8007090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007092:	602f      	str	r7, [r5, #0]
 8007094:	2900      	cmp	r1, #0
 8007096:	d0ca      	beq.n	800702e <__sflush_r+0x1a>
 8007098:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800709c:	4299      	cmp	r1, r3
 800709e:	d002      	beq.n	80070a6 <__sflush_r+0x92>
 80070a0:	4628      	mov	r0, r5
 80070a2:	f000 f8fd 	bl	80072a0 <_free_r>
 80070a6:	2000      	movs	r0, #0
 80070a8:	6360      	str	r0, [r4, #52]	; 0x34
 80070aa:	e7c1      	b.n	8007030 <__sflush_r+0x1c>
 80070ac:	6a21      	ldr	r1, [r4, #32]
 80070ae:	2301      	movs	r3, #1
 80070b0:	4628      	mov	r0, r5
 80070b2:	47b0      	blx	r6
 80070b4:	1c41      	adds	r1, r0, #1
 80070b6:	d1c7      	bne.n	8007048 <__sflush_r+0x34>
 80070b8:	682b      	ldr	r3, [r5, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d0c4      	beq.n	8007048 <__sflush_r+0x34>
 80070be:	2b1d      	cmp	r3, #29
 80070c0:	d001      	beq.n	80070c6 <__sflush_r+0xb2>
 80070c2:	2b16      	cmp	r3, #22
 80070c4:	d101      	bne.n	80070ca <__sflush_r+0xb6>
 80070c6:	602f      	str	r7, [r5, #0]
 80070c8:	e7b1      	b.n	800702e <__sflush_r+0x1a>
 80070ca:	89a3      	ldrh	r3, [r4, #12]
 80070cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070d0:	81a3      	strh	r3, [r4, #12]
 80070d2:	e7ad      	b.n	8007030 <__sflush_r+0x1c>
 80070d4:	690f      	ldr	r7, [r1, #16]
 80070d6:	2f00      	cmp	r7, #0
 80070d8:	d0a9      	beq.n	800702e <__sflush_r+0x1a>
 80070da:	0793      	lsls	r3, r2, #30
 80070dc:	680e      	ldr	r6, [r1, #0]
 80070de:	bf08      	it	eq
 80070e0:	694b      	ldreq	r3, [r1, #20]
 80070e2:	600f      	str	r7, [r1, #0]
 80070e4:	bf18      	it	ne
 80070e6:	2300      	movne	r3, #0
 80070e8:	eba6 0807 	sub.w	r8, r6, r7
 80070ec:	608b      	str	r3, [r1, #8]
 80070ee:	f1b8 0f00 	cmp.w	r8, #0
 80070f2:	dd9c      	ble.n	800702e <__sflush_r+0x1a>
 80070f4:	6a21      	ldr	r1, [r4, #32]
 80070f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80070f8:	4643      	mov	r3, r8
 80070fa:	463a      	mov	r2, r7
 80070fc:	4628      	mov	r0, r5
 80070fe:	47b0      	blx	r6
 8007100:	2800      	cmp	r0, #0
 8007102:	dc06      	bgt.n	8007112 <__sflush_r+0xfe>
 8007104:	89a3      	ldrh	r3, [r4, #12]
 8007106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800710a:	81a3      	strh	r3, [r4, #12]
 800710c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007110:	e78e      	b.n	8007030 <__sflush_r+0x1c>
 8007112:	4407      	add	r7, r0
 8007114:	eba8 0800 	sub.w	r8, r8, r0
 8007118:	e7e9      	b.n	80070ee <__sflush_r+0xda>
 800711a:	bf00      	nop
 800711c:	20400001 	.word	0x20400001

08007120 <_fflush_r>:
 8007120:	b538      	push	{r3, r4, r5, lr}
 8007122:	690b      	ldr	r3, [r1, #16]
 8007124:	4605      	mov	r5, r0
 8007126:	460c      	mov	r4, r1
 8007128:	b913      	cbnz	r3, 8007130 <_fflush_r+0x10>
 800712a:	2500      	movs	r5, #0
 800712c:	4628      	mov	r0, r5
 800712e:	bd38      	pop	{r3, r4, r5, pc}
 8007130:	b118      	cbz	r0, 800713a <_fflush_r+0x1a>
 8007132:	6983      	ldr	r3, [r0, #24]
 8007134:	b90b      	cbnz	r3, 800713a <_fflush_r+0x1a>
 8007136:	f7ff fbcf 	bl	80068d8 <__sinit>
 800713a:	4b14      	ldr	r3, [pc, #80]	; (800718c <_fflush_r+0x6c>)
 800713c:	429c      	cmp	r4, r3
 800713e:	d11b      	bne.n	8007178 <_fflush_r+0x58>
 8007140:	686c      	ldr	r4, [r5, #4]
 8007142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d0ef      	beq.n	800712a <_fflush_r+0xa>
 800714a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800714c:	07d0      	lsls	r0, r2, #31
 800714e:	d404      	bmi.n	800715a <_fflush_r+0x3a>
 8007150:	0599      	lsls	r1, r3, #22
 8007152:	d402      	bmi.n	800715a <_fflush_r+0x3a>
 8007154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007156:	f7ff fc82 	bl	8006a5e <__retarget_lock_acquire_recursive>
 800715a:	4628      	mov	r0, r5
 800715c:	4621      	mov	r1, r4
 800715e:	f7ff ff59 	bl	8007014 <__sflush_r>
 8007162:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007164:	07da      	lsls	r2, r3, #31
 8007166:	4605      	mov	r5, r0
 8007168:	d4e0      	bmi.n	800712c <_fflush_r+0xc>
 800716a:	89a3      	ldrh	r3, [r4, #12]
 800716c:	059b      	lsls	r3, r3, #22
 800716e:	d4dd      	bmi.n	800712c <_fflush_r+0xc>
 8007170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007172:	f7ff fc75 	bl	8006a60 <__retarget_lock_release_recursive>
 8007176:	e7d9      	b.n	800712c <_fflush_r+0xc>
 8007178:	4b05      	ldr	r3, [pc, #20]	; (8007190 <_fflush_r+0x70>)
 800717a:	429c      	cmp	r4, r3
 800717c:	d101      	bne.n	8007182 <_fflush_r+0x62>
 800717e:	68ac      	ldr	r4, [r5, #8]
 8007180:	e7df      	b.n	8007142 <_fflush_r+0x22>
 8007182:	4b04      	ldr	r3, [pc, #16]	; (8007194 <_fflush_r+0x74>)
 8007184:	429c      	cmp	r4, r3
 8007186:	bf08      	it	eq
 8007188:	68ec      	ldreq	r4, [r5, #12]
 800718a:	e7da      	b.n	8007142 <_fflush_r+0x22>
 800718c:	08007b54 	.word	0x08007b54
 8007190:	08007b74 	.word	0x08007b74
 8007194:	08007b34 	.word	0x08007b34

08007198 <_lseek_r>:
 8007198:	b538      	push	{r3, r4, r5, lr}
 800719a:	4d07      	ldr	r5, [pc, #28]	; (80071b8 <_lseek_r+0x20>)
 800719c:	4604      	mov	r4, r0
 800719e:	4608      	mov	r0, r1
 80071a0:	4611      	mov	r1, r2
 80071a2:	2200      	movs	r2, #0
 80071a4:	602a      	str	r2, [r5, #0]
 80071a6:	461a      	mov	r2, r3
 80071a8:	f7f9 fd46 	bl	8000c38 <_lseek>
 80071ac:	1c43      	adds	r3, r0, #1
 80071ae:	d102      	bne.n	80071b6 <_lseek_r+0x1e>
 80071b0:	682b      	ldr	r3, [r5, #0]
 80071b2:	b103      	cbz	r3, 80071b6 <_lseek_r+0x1e>
 80071b4:	6023      	str	r3, [r4, #0]
 80071b6:	bd38      	pop	{r3, r4, r5, pc}
 80071b8:	20002320 	.word	0x20002320

080071bc <__swhatbuf_r>:
 80071bc:	b570      	push	{r4, r5, r6, lr}
 80071be:	460e      	mov	r6, r1
 80071c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071c4:	2900      	cmp	r1, #0
 80071c6:	b096      	sub	sp, #88	; 0x58
 80071c8:	4614      	mov	r4, r2
 80071ca:	461d      	mov	r5, r3
 80071cc:	da08      	bge.n	80071e0 <__swhatbuf_r+0x24>
 80071ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	602a      	str	r2, [r5, #0]
 80071d6:	061a      	lsls	r2, r3, #24
 80071d8:	d410      	bmi.n	80071fc <__swhatbuf_r+0x40>
 80071da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071de:	e00e      	b.n	80071fe <__swhatbuf_r+0x42>
 80071e0:	466a      	mov	r2, sp
 80071e2:	f000 fba9 	bl	8007938 <_fstat_r>
 80071e6:	2800      	cmp	r0, #0
 80071e8:	dbf1      	blt.n	80071ce <__swhatbuf_r+0x12>
 80071ea:	9a01      	ldr	r2, [sp, #4]
 80071ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80071f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80071f4:	425a      	negs	r2, r3
 80071f6:	415a      	adcs	r2, r3
 80071f8:	602a      	str	r2, [r5, #0]
 80071fa:	e7ee      	b.n	80071da <__swhatbuf_r+0x1e>
 80071fc:	2340      	movs	r3, #64	; 0x40
 80071fe:	2000      	movs	r0, #0
 8007200:	6023      	str	r3, [r4, #0]
 8007202:	b016      	add	sp, #88	; 0x58
 8007204:	bd70      	pop	{r4, r5, r6, pc}
	...

08007208 <__smakebuf_r>:
 8007208:	898b      	ldrh	r3, [r1, #12]
 800720a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800720c:	079d      	lsls	r5, r3, #30
 800720e:	4606      	mov	r6, r0
 8007210:	460c      	mov	r4, r1
 8007212:	d507      	bpl.n	8007224 <__smakebuf_r+0x1c>
 8007214:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007218:	6023      	str	r3, [r4, #0]
 800721a:	6123      	str	r3, [r4, #16]
 800721c:	2301      	movs	r3, #1
 800721e:	6163      	str	r3, [r4, #20]
 8007220:	b002      	add	sp, #8
 8007222:	bd70      	pop	{r4, r5, r6, pc}
 8007224:	ab01      	add	r3, sp, #4
 8007226:	466a      	mov	r2, sp
 8007228:	f7ff ffc8 	bl	80071bc <__swhatbuf_r>
 800722c:	9900      	ldr	r1, [sp, #0]
 800722e:	4605      	mov	r5, r0
 8007230:	4630      	mov	r0, r6
 8007232:	f7ff fc4d 	bl	8006ad0 <_malloc_r>
 8007236:	b948      	cbnz	r0, 800724c <__smakebuf_r+0x44>
 8007238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800723c:	059a      	lsls	r2, r3, #22
 800723e:	d4ef      	bmi.n	8007220 <__smakebuf_r+0x18>
 8007240:	f023 0303 	bic.w	r3, r3, #3
 8007244:	f043 0302 	orr.w	r3, r3, #2
 8007248:	81a3      	strh	r3, [r4, #12]
 800724a:	e7e3      	b.n	8007214 <__smakebuf_r+0xc>
 800724c:	4b0d      	ldr	r3, [pc, #52]	; (8007284 <__smakebuf_r+0x7c>)
 800724e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007250:	89a3      	ldrh	r3, [r4, #12]
 8007252:	6020      	str	r0, [r4, #0]
 8007254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007258:	81a3      	strh	r3, [r4, #12]
 800725a:	9b00      	ldr	r3, [sp, #0]
 800725c:	6163      	str	r3, [r4, #20]
 800725e:	9b01      	ldr	r3, [sp, #4]
 8007260:	6120      	str	r0, [r4, #16]
 8007262:	b15b      	cbz	r3, 800727c <__smakebuf_r+0x74>
 8007264:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007268:	4630      	mov	r0, r6
 800726a:	f000 fb77 	bl	800795c <_isatty_r>
 800726e:	b128      	cbz	r0, 800727c <__smakebuf_r+0x74>
 8007270:	89a3      	ldrh	r3, [r4, #12]
 8007272:	f023 0303 	bic.w	r3, r3, #3
 8007276:	f043 0301 	orr.w	r3, r3, #1
 800727a:	81a3      	strh	r3, [r4, #12]
 800727c:	89a0      	ldrh	r0, [r4, #12]
 800727e:	4305      	orrs	r5, r0
 8007280:	81a5      	strh	r5, [r4, #12]
 8007282:	e7cd      	b.n	8007220 <__smakebuf_r+0x18>
 8007284:	08006871 	.word	0x08006871

08007288 <__malloc_lock>:
 8007288:	4801      	ldr	r0, [pc, #4]	; (8007290 <__malloc_lock+0x8>)
 800728a:	f7ff bbe8 	b.w	8006a5e <__retarget_lock_acquire_recursive>
 800728e:	bf00      	nop
 8007290:	20002314 	.word	0x20002314

08007294 <__malloc_unlock>:
 8007294:	4801      	ldr	r0, [pc, #4]	; (800729c <__malloc_unlock+0x8>)
 8007296:	f7ff bbe3 	b.w	8006a60 <__retarget_lock_release_recursive>
 800729a:	bf00      	nop
 800729c:	20002314 	.word	0x20002314

080072a0 <_free_r>:
 80072a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072a2:	2900      	cmp	r1, #0
 80072a4:	d044      	beq.n	8007330 <_free_r+0x90>
 80072a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072aa:	9001      	str	r0, [sp, #4]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f1a1 0404 	sub.w	r4, r1, #4
 80072b2:	bfb8      	it	lt
 80072b4:	18e4      	addlt	r4, r4, r3
 80072b6:	f7ff ffe7 	bl	8007288 <__malloc_lock>
 80072ba:	4a1e      	ldr	r2, [pc, #120]	; (8007334 <_free_r+0x94>)
 80072bc:	9801      	ldr	r0, [sp, #4]
 80072be:	6813      	ldr	r3, [r2, #0]
 80072c0:	b933      	cbnz	r3, 80072d0 <_free_r+0x30>
 80072c2:	6063      	str	r3, [r4, #4]
 80072c4:	6014      	str	r4, [r2, #0]
 80072c6:	b003      	add	sp, #12
 80072c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072cc:	f7ff bfe2 	b.w	8007294 <__malloc_unlock>
 80072d0:	42a3      	cmp	r3, r4
 80072d2:	d908      	bls.n	80072e6 <_free_r+0x46>
 80072d4:	6825      	ldr	r5, [r4, #0]
 80072d6:	1961      	adds	r1, r4, r5
 80072d8:	428b      	cmp	r3, r1
 80072da:	bf01      	itttt	eq
 80072dc:	6819      	ldreq	r1, [r3, #0]
 80072de:	685b      	ldreq	r3, [r3, #4]
 80072e0:	1949      	addeq	r1, r1, r5
 80072e2:	6021      	streq	r1, [r4, #0]
 80072e4:	e7ed      	b.n	80072c2 <_free_r+0x22>
 80072e6:	461a      	mov	r2, r3
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	b10b      	cbz	r3, 80072f0 <_free_r+0x50>
 80072ec:	42a3      	cmp	r3, r4
 80072ee:	d9fa      	bls.n	80072e6 <_free_r+0x46>
 80072f0:	6811      	ldr	r1, [r2, #0]
 80072f2:	1855      	adds	r5, r2, r1
 80072f4:	42a5      	cmp	r5, r4
 80072f6:	d10b      	bne.n	8007310 <_free_r+0x70>
 80072f8:	6824      	ldr	r4, [r4, #0]
 80072fa:	4421      	add	r1, r4
 80072fc:	1854      	adds	r4, r2, r1
 80072fe:	42a3      	cmp	r3, r4
 8007300:	6011      	str	r1, [r2, #0]
 8007302:	d1e0      	bne.n	80072c6 <_free_r+0x26>
 8007304:	681c      	ldr	r4, [r3, #0]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	6053      	str	r3, [r2, #4]
 800730a:	4421      	add	r1, r4
 800730c:	6011      	str	r1, [r2, #0]
 800730e:	e7da      	b.n	80072c6 <_free_r+0x26>
 8007310:	d902      	bls.n	8007318 <_free_r+0x78>
 8007312:	230c      	movs	r3, #12
 8007314:	6003      	str	r3, [r0, #0]
 8007316:	e7d6      	b.n	80072c6 <_free_r+0x26>
 8007318:	6825      	ldr	r5, [r4, #0]
 800731a:	1961      	adds	r1, r4, r5
 800731c:	428b      	cmp	r3, r1
 800731e:	bf04      	itt	eq
 8007320:	6819      	ldreq	r1, [r3, #0]
 8007322:	685b      	ldreq	r3, [r3, #4]
 8007324:	6063      	str	r3, [r4, #4]
 8007326:	bf04      	itt	eq
 8007328:	1949      	addeq	r1, r1, r5
 800732a:	6021      	streq	r1, [r4, #0]
 800732c:	6054      	str	r4, [r2, #4]
 800732e:	e7ca      	b.n	80072c6 <_free_r+0x26>
 8007330:	b003      	add	sp, #12
 8007332:	bd30      	pop	{r4, r5, pc}
 8007334:	20002318 	.word	0x20002318

08007338 <__sfputc_r>:
 8007338:	6893      	ldr	r3, [r2, #8]
 800733a:	3b01      	subs	r3, #1
 800733c:	2b00      	cmp	r3, #0
 800733e:	b410      	push	{r4}
 8007340:	6093      	str	r3, [r2, #8]
 8007342:	da08      	bge.n	8007356 <__sfputc_r+0x1e>
 8007344:	6994      	ldr	r4, [r2, #24]
 8007346:	42a3      	cmp	r3, r4
 8007348:	db01      	blt.n	800734e <__sfputc_r+0x16>
 800734a:	290a      	cmp	r1, #10
 800734c:	d103      	bne.n	8007356 <__sfputc_r+0x1e>
 800734e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007352:	f7ff bd7d 	b.w	8006e50 <__swbuf_r>
 8007356:	6813      	ldr	r3, [r2, #0]
 8007358:	1c58      	adds	r0, r3, #1
 800735a:	6010      	str	r0, [r2, #0]
 800735c:	7019      	strb	r1, [r3, #0]
 800735e:	4608      	mov	r0, r1
 8007360:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007364:	4770      	bx	lr

08007366 <__sfputs_r>:
 8007366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007368:	4606      	mov	r6, r0
 800736a:	460f      	mov	r7, r1
 800736c:	4614      	mov	r4, r2
 800736e:	18d5      	adds	r5, r2, r3
 8007370:	42ac      	cmp	r4, r5
 8007372:	d101      	bne.n	8007378 <__sfputs_r+0x12>
 8007374:	2000      	movs	r0, #0
 8007376:	e007      	b.n	8007388 <__sfputs_r+0x22>
 8007378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800737c:	463a      	mov	r2, r7
 800737e:	4630      	mov	r0, r6
 8007380:	f7ff ffda 	bl	8007338 <__sfputc_r>
 8007384:	1c43      	adds	r3, r0, #1
 8007386:	d1f3      	bne.n	8007370 <__sfputs_r+0xa>
 8007388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800738c <_vfiprintf_r>:
 800738c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007390:	460d      	mov	r5, r1
 8007392:	b09d      	sub	sp, #116	; 0x74
 8007394:	4614      	mov	r4, r2
 8007396:	4698      	mov	r8, r3
 8007398:	4606      	mov	r6, r0
 800739a:	b118      	cbz	r0, 80073a4 <_vfiprintf_r+0x18>
 800739c:	6983      	ldr	r3, [r0, #24]
 800739e:	b90b      	cbnz	r3, 80073a4 <_vfiprintf_r+0x18>
 80073a0:	f7ff fa9a 	bl	80068d8 <__sinit>
 80073a4:	4b89      	ldr	r3, [pc, #548]	; (80075cc <_vfiprintf_r+0x240>)
 80073a6:	429d      	cmp	r5, r3
 80073a8:	d11b      	bne.n	80073e2 <_vfiprintf_r+0x56>
 80073aa:	6875      	ldr	r5, [r6, #4]
 80073ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073ae:	07d9      	lsls	r1, r3, #31
 80073b0:	d405      	bmi.n	80073be <_vfiprintf_r+0x32>
 80073b2:	89ab      	ldrh	r3, [r5, #12]
 80073b4:	059a      	lsls	r2, r3, #22
 80073b6:	d402      	bmi.n	80073be <_vfiprintf_r+0x32>
 80073b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073ba:	f7ff fb50 	bl	8006a5e <__retarget_lock_acquire_recursive>
 80073be:	89ab      	ldrh	r3, [r5, #12]
 80073c0:	071b      	lsls	r3, r3, #28
 80073c2:	d501      	bpl.n	80073c8 <_vfiprintf_r+0x3c>
 80073c4:	692b      	ldr	r3, [r5, #16]
 80073c6:	b9eb      	cbnz	r3, 8007404 <_vfiprintf_r+0x78>
 80073c8:	4629      	mov	r1, r5
 80073ca:	4630      	mov	r0, r6
 80073cc:	f7ff fda4 	bl	8006f18 <__swsetup_r>
 80073d0:	b1c0      	cbz	r0, 8007404 <_vfiprintf_r+0x78>
 80073d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073d4:	07dc      	lsls	r4, r3, #31
 80073d6:	d50e      	bpl.n	80073f6 <_vfiprintf_r+0x6a>
 80073d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073dc:	b01d      	add	sp, #116	; 0x74
 80073de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e2:	4b7b      	ldr	r3, [pc, #492]	; (80075d0 <_vfiprintf_r+0x244>)
 80073e4:	429d      	cmp	r5, r3
 80073e6:	d101      	bne.n	80073ec <_vfiprintf_r+0x60>
 80073e8:	68b5      	ldr	r5, [r6, #8]
 80073ea:	e7df      	b.n	80073ac <_vfiprintf_r+0x20>
 80073ec:	4b79      	ldr	r3, [pc, #484]	; (80075d4 <_vfiprintf_r+0x248>)
 80073ee:	429d      	cmp	r5, r3
 80073f0:	bf08      	it	eq
 80073f2:	68f5      	ldreq	r5, [r6, #12]
 80073f4:	e7da      	b.n	80073ac <_vfiprintf_r+0x20>
 80073f6:	89ab      	ldrh	r3, [r5, #12]
 80073f8:	0598      	lsls	r0, r3, #22
 80073fa:	d4ed      	bmi.n	80073d8 <_vfiprintf_r+0x4c>
 80073fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073fe:	f7ff fb2f 	bl	8006a60 <__retarget_lock_release_recursive>
 8007402:	e7e9      	b.n	80073d8 <_vfiprintf_r+0x4c>
 8007404:	2300      	movs	r3, #0
 8007406:	9309      	str	r3, [sp, #36]	; 0x24
 8007408:	2320      	movs	r3, #32
 800740a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800740e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007412:	2330      	movs	r3, #48	; 0x30
 8007414:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80075d8 <_vfiprintf_r+0x24c>
 8007418:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800741c:	f04f 0901 	mov.w	r9, #1
 8007420:	4623      	mov	r3, r4
 8007422:	469a      	mov	sl, r3
 8007424:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007428:	b10a      	cbz	r2, 800742e <_vfiprintf_r+0xa2>
 800742a:	2a25      	cmp	r2, #37	; 0x25
 800742c:	d1f9      	bne.n	8007422 <_vfiprintf_r+0x96>
 800742e:	ebba 0b04 	subs.w	fp, sl, r4
 8007432:	d00b      	beq.n	800744c <_vfiprintf_r+0xc0>
 8007434:	465b      	mov	r3, fp
 8007436:	4622      	mov	r2, r4
 8007438:	4629      	mov	r1, r5
 800743a:	4630      	mov	r0, r6
 800743c:	f7ff ff93 	bl	8007366 <__sfputs_r>
 8007440:	3001      	adds	r0, #1
 8007442:	f000 80aa 	beq.w	800759a <_vfiprintf_r+0x20e>
 8007446:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007448:	445a      	add	r2, fp
 800744a:	9209      	str	r2, [sp, #36]	; 0x24
 800744c:	f89a 3000 	ldrb.w	r3, [sl]
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 80a2 	beq.w	800759a <_vfiprintf_r+0x20e>
 8007456:	2300      	movs	r3, #0
 8007458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800745c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007460:	f10a 0a01 	add.w	sl, sl, #1
 8007464:	9304      	str	r3, [sp, #16]
 8007466:	9307      	str	r3, [sp, #28]
 8007468:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800746c:	931a      	str	r3, [sp, #104]	; 0x68
 800746e:	4654      	mov	r4, sl
 8007470:	2205      	movs	r2, #5
 8007472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007476:	4858      	ldr	r0, [pc, #352]	; (80075d8 <_vfiprintf_r+0x24c>)
 8007478:	f7f8 feaa 	bl	80001d0 <memchr>
 800747c:	9a04      	ldr	r2, [sp, #16]
 800747e:	b9d8      	cbnz	r0, 80074b8 <_vfiprintf_r+0x12c>
 8007480:	06d1      	lsls	r1, r2, #27
 8007482:	bf44      	itt	mi
 8007484:	2320      	movmi	r3, #32
 8007486:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800748a:	0713      	lsls	r3, r2, #28
 800748c:	bf44      	itt	mi
 800748e:	232b      	movmi	r3, #43	; 0x2b
 8007490:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007494:	f89a 3000 	ldrb.w	r3, [sl]
 8007498:	2b2a      	cmp	r3, #42	; 0x2a
 800749a:	d015      	beq.n	80074c8 <_vfiprintf_r+0x13c>
 800749c:	9a07      	ldr	r2, [sp, #28]
 800749e:	4654      	mov	r4, sl
 80074a0:	2000      	movs	r0, #0
 80074a2:	f04f 0c0a 	mov.w	ip, #10
 80074a6:	4621      	mov	r1, r4
 80074a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074ac:	3b30      	subs	r3, #48	; 0x30
 80074ae:	2b09      	cmp	r3, #9
 80074b0:	d94e      	bls.n	8007550 <_vfiprintf_r+0x1c4>
 80074b2:	b1b0      	cbz	r0, 80074e2 <_vfiprintf_r+0x156>
 80074b4:	9207      	str	r2, [sp, #28]
 80074b6:	e014      	b.n	80074e2 <_vfiprintf_r+0x156>
 80074b8:	eba0 0308 	sub.w	r3, r0, r8
 80074bc:	fa09 f303 	lsl.w	r3, r9, r3
 80074c0:	4313      	orrs	r3, r2
 80074c2:	9304      	str	r3, [sp, #16]
 80074c4:	46a2      	mov	sl, r4
 80074c6:	e7d2      	b.n	800746e <_vfiprintf_r+0xe2>
 80074c8:	9b03      	ldr	r3, [sp, #12]
 80074ca:	1d19      	adds	r1, r3, #4
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	9103      	str	r1, [sp, #12]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	bfbb      	ittet	lt
 80074d4:	425b      	neglt	r3, r3
 80074d6:	f042 0202 	orrlt.w	r2, r2, #2
 80074da:	9307      	strge	r3, [sp, #28]
 80074dc:	9307      	strlt	r3, [sp, #28]
 80074de:	bfb8      	it	lt
 80074e0:	9204      	strlt	r2, [sp, #16]
 80074e2:	7823      	ldrb	r3, [r4, #0]
 80074e4:	2b2e      	cmp	r3, #46	; 0x2e
 80074e6:	d10c      	bne.n	8007502 <_vfiprintf_r+0x176>
 80074e8:	7863      	ldrb	r3, [r4, #1]
 80074ea:	2b2a      	cmp	r3, #42	; 0x2a
 80074ec:	d135      	bne.n	800755a <_vfiprintf_r+0x1ce>
 80074ee:	9b03      	ldr	r3, [sp, #12]
 80074f0:	1d1a      	adds	r2, r3, #4
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	9203      	str	r2, [sp, #12]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	bfb8      	it	lt
 80074fa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80074fe:	3402      	adds	r4, #2
 8007500:	9305      	str	r3, [sp, #20]
 8007502:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80075e8 <_vfiprintf_r+0x25c>
 8007506:	7821      	ldrb	r1, [r4, #0]
 8007508:	2203      	movs	r2, #3
 800750a:	4650      	mov	r0, sl
 800750c:	f7f8 fe60 	bl	80001d0 <memchr>
 8007510:	b140      	cbz	r0, 8007524 <_vfiprintf_r+0x198>
 8007512:	2340      	movs	r3, #64	; 0x40
 8007514:	eba0 000a 	sub.w	r0, r0, sl
 8007518:	fa03 f000 	lsl.w	r0, r3, r0
 800751c:	9b04      	ldr	r3, [sp, #16]
 800751e:	4303      	orrs	r3, r0
 8007520:	3401      	adds	r4, #1
 8007522:	9304      	str	r3, [sp, #16]
 8007524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007528:	482c      	ldr	r0, [pc, #176]	; (80075dc <_vfiprintf_r+0x250>)
 800752a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800752e:	2206      	movs	r2, #6
 8007530:	f7f8 fe4e 	bl	80001d0 <memchr>
 8007534:	2800      	cmp	r0, #0
 8007536:	d03f      	beq.n	80075b8 <_vfiprintf_r+0x22c>
 8007538:	4b29      	ldr	r3, [pc, #164]	; (80075e0 <_vfiprintf_r+0x254>)
 800753a:	bb1b      	cbnz	r3, 8007584 <_vfiprintf_r+0x1f8>
 800753c:	9b03      	ldr	r3, [sp, #12]
 800753e:	3307      	adds	r3, #7
 8007540:	f023 0307 	bic.w	r3, r3, #7
 8007544:	3308      	adds	r3, #8
 8007546:	9303      	str	r3, [sp, #12]
 8007548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800754a:	443b      	add	r3, r7
 800754c:	9309      	str	r3, [sp, #36]	; 0x24
 800754e:	e767      	b.n	8007420 <_vfiprintf_r+0x94>
 8007550:	fb0c 3202 	mla	r2, ip, r2, r3
 8007554:	460c      	mov	r4, r1
 8007556:	2001      	movs	r0, #1
 8007558:	e7a5      	b.n	80074a6 <_vfiprintf_r+0x11a>
 800755a:	2300      	movs	r3, #0
 800755c:	3401      	adds	r4, #1
 800755e:	9305      	str	r3, [sp, #20]
 8007560:	4619      	mov	r1, r3
 8007562:	f04f 0c0a 	mov.w	ip, #10
 8007566:	4620      	mov	r0, r4
 8007568:	f810 2b01 	ldrb.w	r2, [r0], #1
 800756c:	3a30      	subs	r2, #48	; 0x30
 800756e:	2a09      	cmp	r2, #9
 8007570:	d903      	bls.n	800757a <_vfiprintf_r+0x1ee>
 8007572:	2b00      	cmp	r3, #0
 8007574:	d0c5      	beq.n	8007502 <_vfiprintf_r+0x176>
 8007576:	9105      	str	r1, [sp, #20]
 8007578:	e7c3      	b.n	8007502 <_vfiprintf_r+0x176>
 800757a:	fb0c 2101 	mla	r1, ip, r1, r2
 800757e:	4604      	mov	r4, r0
 8007580:	2301      	movs	r3, #1
 8007582:	e7f0      	b.n	8007566 <_vfiprintf_r+0x1da>
 8007584:	ab03      	add	r3, sp, #12
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	462a      	mov	r2, r5
 800758a:	4b16      	ldr	r3, [pc, #88]	; (80075e4 <_vfiprintf_r+0x258>)
 800758c:	a904      	add	r1, sp, #16
 800758e:	4630      	mov	r0, r6
 8007590:	f3af 8000 	nop.w
 8007594:	4607      	mov	r7, r0
 8007596:	1c78      	adds	r0, r7, #1
 8007598:	d1d6      	bne.n	8007548 <_vfiprintf_r+0x1bc>
 800759a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800759c:	07d9      	lsls	r1, r3, #31
 800759e:	d405      	bmi.n	80075ac <_vfiprintf_r+0x220>
 80075a0:	89ab      	ldrh	r3, [r5, #12]
 80075a2:	059a      	lsls	r2, r3, #22
 80075a4:	d402      	bmi.n	80075ac <_vfiprintf_r+0x220>
 80075a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075a8:	f7ff fa5a 	bl	8006a60 <__retarget_lock_release_recursive>
 80075ac:	89ab      	ldrh	r3, [r5, #12]
 80075ae:	065b      	lsls	r3, r3, #25
 80075b0:	f53f af12 	bmi.w	80073d8 <_vfiprintf_r+0x4c>
 80075b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075b6:	e711      	b.n	80073dc <_vfiprintf_r+0x50>
 80075b8:	ab03      	add	r3, sp, #12
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	462a      	mov	r2, r5
 80075be:	4b09      	ldr	r3, [pc, #36]	; (80075e4 <_vfiprintf_r+0x258>)
 80075c0:	a904      	add	r1, sp, #16
 80075c2:	4630      	mov	r0, r6
 80075c4:	f000 f880 	bl	80076c8 <_printf_i>
 80075c8:	e7e4      	b.n	8007594 <_vfiprintf_r+0x208>
 80075ca:	bf00      	nop
 80075cc:	08007b54 	.word	0x08007b54
 80075d0:	08007b74 	.word	0x08007b74
 80075d4:	08007b34 	.word	0x08007b34
 80075d8:	08007b98 	.word	0x08007b98
 80075dc:	08007ba2 	.word	0x08007ba2
 80075e0:	00000000 	.word	0x00000000
 80075e4:	08007367 	.word	0x08007367
 80075e8:	08007b9e 	.word	0x08007b9e

080075ec <_printf_common>:
 80075ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075f0:	4616      	mov	r6, r2
 80075f2:	4699      	mov	r9, r3
 80075f4:	688a      	ldr	r2, [r1, #8]
 80075f6:	690b      	ldr	r3, [r1, #16]
 80075f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075fc:	4293      	cmp	r3, r2
 80075fe:	bfb8      	it	lt
 8007600:	4613      	movlt	r3, r2
 8007602:	6033      	str	r3, [r6, #0]
 8007604:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007608:	4607      	mov	r7, r0
 800760a:	460c      	mov	r4, r1
 800760c:	b10a      	cbz	r2, 8007612 <_printf_common+0x26>
 800760e:	3301      	adds	r3, #1
 8007610:	6033      	str	r3, [r6, #0]
 8007612:	6823      	ldr	r3, [r4, #0]
 8007614:	0699      	lsls	r1, r3, #26
 8007616:	bf42      	ittt	mi
 8007618:	6833      	ldrmi	r3, [r6, #0]
 800761a:	3302      	addmi	r3, #2
 800761c:	6033      	strmi	r3, [r6, #0]
 800761e:	6825      	ldr	r5, [r4, #0]
 8007620:	f015 0506 	ands.w	r5, r5, #6
 8007624:	d106      	bne.n	8007634 <_printf_common+0x48>
 8007626:	f104 0a19 	add.w	sl, r4, #25
 800762a:	68e3      	ldr	r3, [r4, #12]
 800762c:	6832      	ldr	r2, [r6, #0]
 800762e:	1a9b      	subs	r3, r3, r2
 8007630:	42ab      	cmp	r3, r5
 8007632:	dc26      	bgt.n	8007682 <_printf_common+0x96>
 8007634:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007638:	1e13      	subs	r3, r2, #0
 800763a:	6822      	ldr	r2, [r4, #0]
 800763c:	bf18      	it	ne
 800763e:	2301      	movne	r3, #1
 8007640:	0692      	lsls	r2, r2, #26
 8007642:	d42b      	bmi.n	800769c <_printf_common+0xb0>
 8007644:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007648:	4649      	mov	r1, r9
 800764a:	4638      	mov	r0, r7
 800764c:	47c0      	blx	r8
 800764e:	3001      	adds	r0, #1
 8007650:	d01e      	beq.n	8007690 <_printf_common+0xa4>
 8007652:	6823      	ldr	r3, [r4, #0]
 8007654:	68e5      	ldr	r5, [r4, #12]
 8007656:	6832      	ldr	r2, [r6, #0]
 8007658:	f003 0306 	and.w	r3, r3, #6
 800765c:	2b04      	cmp	r3, #4
 800765e:	bf08      	it	eq
 8007660:	1aad      	subeq	r5, r5, r2
 8007662:	68a3      	ldr	r3, [r4, #8]
 8007664:	6922      	ldr	r2, [r4, #16]
 8007666:	bf0c      	ite	eq
 8007668:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800766c:	2500      	movne	r5, #0
 800766e:	4293      	cmp	r3, r2
 8007670:	bfc4      	itt	gt
 8007672:	1a9b      	subgt	r3, r3, r2
 8007674:	18ed      	addgt	r5, r5, r3
 8007676:	2600      	movs	r6, #0
 8007678:	341a      	adds	r4, #26
 800767a:	42b5      	cmp	r5, r6
 800767c:	d11a      	bne.n	80076b4 <_printf_common+0xc8>
 800767e:	2000      	movs	r0, #0
 8007680:	e008      	b.n	8007694 <_printf_common+0xa8>
 8007682:	2301      	movs	r3, #1
 8007684:	4652      	mov	r2, sl
 8007686:	4649      	mov	r1, r9
 8007688:	4638      	mov	r0, r7
 800768a:	47c0      	blx	r8
 800768c:	3001      	adds	r0, #1
 800768e:	d103      	bne.n	8007698 <_printf_common+0xac>
 8007690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007698:	3501      	adds	r5, #1
 800769a:	e7c6      	b.n	800762a <_printf_common+0x3e>
 800769c:	18e1      	adds	r1, r4, r3
 800769e:	1c5a      	adds	r2, r3, #1
 80076a0:	2030      	movs	r0, #48	; 0x30
 80076a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076a6:	4422      	add	r2, r4
 80076a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076b0:	3302      	adds	r3, #2
 80076b2:	e7c7      	b.n	8007644 <_printf_common+0x58>
 80076b4:	2301      	movs	r3, #1
 80076b6:	4622      	mov	r2, r4
 80076b8:	4649      	mov	r1, r9
 80076ba:	4638      	mov	r0, r7
 80076bc:	47c0      	blx	r8
 80076be:	3001      	adds	r0, #1
 80076c0:	d0e6      	beq.n	8007690 <_printf_common+0xa4>
 80076c2:	3601      	adds	r6, #1
 80076c4:	e7d9      	b.n	800767a <_printf_common+0x8e>
	...

080076c8 <_printf_i>:
 80076c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076cc:	7e0f      	ldrb	r7, [r1, #24]
 80076ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076d0:	2f78      	cmp	r7, #120	; 0x78
 80076d2:	4691      	mov	r9, r2
 80076d4:	4680      	mov	r8, r0
 80076d6:	460c      	mov	r4, r1
 80076d8:	469a      	mov	sl, r3
 80076da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80076de:	d807      	bhi.n	80076f0 <_printf_i+0x28>
 80076e0:	2f62      	cmp	r7, #98	; 0x62
 80076e2:	d80a      	bhi.n	80076fa <_printf_i+0x32>
 80076e4:	2f00      	cmp	r7, #0
 80076e6:	f000 80d8 	beq.w	800789a <_printf_i+0x1d2>
 80076ea:	2f58      	cmp	r7, #88	; 0x58
 80076ec:	f000 80a3 	beq.w	8007836 <_printf_i+0x16e>
 80076f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80076f8:	e03a      	b.n	8007770 <_printf_i+0xa8>
 80076fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80076fe:	2b15      	cmp	r3, #21
 8007700:	d8f6      	bhi.n	80076f0 <_printf_i+0x28>
 8007702:	a101      	add	r1, pc, #4	; (adr r1, 8007708 <_printf_i+0x40>)
 8007704:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007708:	08007761 	.word	0x08007761
 800770c:	08007775 	.word	0x08007775
 8007710:	080076f1 	.word	0x080076f1
 8007714:	080076f1 	.word	0x080076f1
 8007718:	080076f1 	.word	0x080076f1
 800771c:	080076f1 	.word	0x080076f1
 8007720:	08007775 	.word	0x08007775
 8007724:	080076f1 	.word	0x080076f1
 8007728:	080076f1 	.word	0x080076f1
 800772c:	080076f1 	.word	0x080076f1
 8007730:	080076f1 	.word	0x080076f1
 8007734:	08007881 	.word	0x08007881
 8007738:	080077a5 	.word	0x080077a5
 800773c:	08007863 	.word	0x08007863
 8007740:	080076f1 	.word	0x080076f1
 8007744:	080076f1 	.word	0x080076f1
 8007748:	080078a3 	.word	0x080078a3
 800774c:	080076f1 	.word	0x080076f1
 8007750:	080077a5 	.word	0x080077a5
 8007754:	080076f1 	.word	0x080076f1
 8007758:	080076f1 	.word	0x080076f1
 800775c:	0800786b 	.word	0x0800786b
 8007760:	682b      	ldr	r3, [r5, #0]
 8007762:	1d1a      	adds	r2, r3, #4
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	602a      	str	r2, [r5, #0]
 8007768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800776c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007770:	2301      	movs	r3, #1
 8007772:	e0a3      	b.n	80078bc <_printf_i+0x1f4>
 8007774:	6820      	ldr	r0, [r4, #0]
 8007776:	6829      	ldr	r1, [r5, #0]
 8007778:	0606      	lsls	r6, r0, #24
 800777a:	f101 0304 	add.w	r3, r1, #4
 800777e:	d50a      	bpl.n	8007796 <_printf_i+0xce>
 8007780:	680e      	ldr	r6, [r1, #0]
 8007782:	602b      	str	r3, [r5, #0]
 8007784:	2e00      	cmp	r6, #0
 8007786:	da03      	bge.n	8007790 <_printf_i+0xc8>
 8007788:	232d      	movs	r3, #45	; 0x2d
 800778a:	4276      	negs	r6, r6
 800778c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007790:	485e      	ldr	r0, [pc, #376]	; (800790c <_printf_i+0x244>)
 8007792:	230a      	movs	r3, #10
 8007794:	e019      	b.n	80077ca <_printf_i+0x102>
 8007796:	680e      	ldr	r6, [r1, #0]
 8007798:	602b      	str	r3, [r5, #0]
 800779a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800779e:	bf18      	it	ne
 80077a0:	b236      	sxthne	r6, r6
 80077a2:	e7ef      	b.n	8007784 <_printf_i+0xbc>
 80077a4:	682b      	ldr	r3, [r5, #0]
 80077a6:	6820      	ldr	r0, [r4, #0]
 80077a8:	1d19      	adds	r1, r3, #4
 80077aa:	6029      	str	r1, [r5, #0]
 80077ac:	0601      	lsls	r1, r0, #24
 80077ae:	d501      	bpl.n	80077b4 <_printf_i+0xec>
 80077b0:	681e      	ldr	r6, [r3, #0]
 80077b2:	e002      	b.n	80077ba <_printf_i+0xf2>
 80077b4:	0646      	lsls	r6, r0, #25
 80077b6:	d5fb      	bpl.n	80077b0 <_printf_i+0xe8>
 80077b8:	881e      	ldrh	r6, [r3, #0]
 80077ba:	4854      	ldr	r0, [pc, #336]	; (800790c <_printf_i+0x244>)
 80077bc:	2f6f      	cmp	r7, #111	; 0x6f
 80077be:	bf0c      	ite	eq
 80077c0:	2308      	moveq	r3, #8
 80077c2:	230a      	movne	r3, #10
 80077c4:	2100      	movs	r1, #0
 80077c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077ca:	6865      	ldr	r5, [r4, #4]
 80077cc:	60a5      	str	r5, [r4, #8]
 80077ce:	2d00      	cmp	r5, #0
 80077d0:	bfa2      	ittt	ge
 80077d2:	6821      	ldrge	r1, [r4, #0]
 80077d4:	f021 0104 	bicge.w	r1, r1, #4
 80077d8:	6021      	strge	r1, [r4, #0]
 80077da:	b90e      	cbnz	r6, 80077e0 <_printf_i+0x118>
 80077dc:	2d00      	cmp	r5, #0
 80077de:	d04d      	beq.n	800787c <_printf_i+0x1b4>
 80077e0:	4615      	mov	r5, r2
 80077e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80077e6:	fb03 6711 	mls	r7, r3, r1, r6
 80077ea:	5dc7      	ldrb	r7, [r0, r7]
 80077ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80077f0:	4637      	mov	r7, r6
 80077f2:	42bb      	cmp	r3, r7
 80077f4:	460e      	mov	r6, r1
 80077f6:	d9f4      	bls.n	80077e2 <_printf_i+0x11a>
 80077f8:	2b08      	cmp	r3, #8
 80077fa:	d10b      	bne.n	8007814 <_printf_i+0x14c>
 80077fc:	6823      	ldr	r3, [r4, #0]
 80077fe:	07de      	lsls	r6, r3, #31
 8007800:	d508      	bpl.n	8007814 <_printf_i+0x14c>
 8007802:	6923      	ldr	r3, [r4, #16]
 8007804:	6861      	ldr	r1, [r4, #4]
 8007806:	4299      	cmp	r1, r3
 8007808:	bfde      	ittt	le
 800780a:	2330      	movle	r3, #48	; 0x30
 800780c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007810:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007814:	1b52      	subs	r2, r2, r5
 8007816:	6122      	str	r2, [r4, #16]
 8007818:	f8cd a000 	str.w	sl, [sp]
 800781c:	464b      	mov	r3, r9
 800781e:	aa03      	add	r2, sp, #12
 8007820:	4621      	mov	r1, r4
 8007822:	4640      	mov	r0, r8
 8007824:	f7ff fee2 	bl	80075ec <_printf_common>
 8007828:	3001      	adds	r0, #1
 800782a:	d14c      	bne.n	80078c6 <_printf_i+0x1fe>
 800782c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007830:	b004      	add	sp, #16
 8007832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007836:	4835      	ldr	r0, [pc, #212]	; (800790c <_printf_i+0x244>)
 8007838:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800783c:	6829      	ldr	r1, [r5, #0]
 800783e:	6823      	ldr	r3, [r4, #0]
 8007840:	f851 6b04 	ldr.w	r6, [r1], #4
 8007844:	6029      	str	r1, [r5, #0]
 8007846:	061d      	lsls	r5, r3, #24
 8007848:	d514      	bpl.n	8007874 <_printf_i+0x1ac>
 800784a:	07df      	lsls	r7, r3, #31
 800784c:	bf44      	itt	mi
 800784e:	f043 0320 	orrmi.w	r3, r3, #32
 8007852:	6023      	strmi	r3, [r4, #0]
 8007854:	b91e      	cbnz	r6, 800785e <_printf_i+0x196>
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	f023 0320 	bic.w	r3, r3, #32
 800785c:	6023      	str	r3, [r4, #0]
 800785e:	2310      	movs	r3, #16
 8007860:	e7b0      	b.n	80077c4 <_printf_i+0xfc>
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	f043 0320 	orr.w	r3, r3, #32
 8007868:	6023      	str	r3, [r4, #0]
 800786a:	2378      	movs	r3, #120	; 0x78
 800786c:	4828      	ldr	r0, [pc, #160]	; (8007910 <_printf_i+0x248>)
 800786e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007872:	e7e3      	b.n	800783c <_printf_i+0x174>
 8007874:	0659      	lsls	r1, r3, #25
 8007876:	bf48      	it	mi
 8007878:	b2b6      	uxthmi	r6, r6
 800787a:	e7e6      	b.n	800784a <_printf_i+0x182>
 800787c:	4615      	mov	r5, r2
 800787e:	e7bb      	b.n	80077f8 <_printf_i+0x130>
 8007880:	682b      	ldr	r3, [r5, #0]
 8007882:	6826      	ldr	r6, [r4, #0]
 8007884:	6961      	ldr	r1, [r4, #20]
 8007886:	1d18      	adds	r0, r3, #4
 8007888:	6028      	str	r0, [r5, #0]
 800788a:	0635      	lsls	r5, r6, #24
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	d501      	bpl.n	8007894 <_printf_i+0x1cc>
 8007890:	6019      	str	r1, [r3, #0]
 8007892:	e002      	b.n	800789a <_printf_i+0x1d2>
 8007894:	0670      	lsls	r0, r6, #25
 8007896:	d5fb      	bpl.n	8007890 <_printf_i+0x1c8>
 8007898:	8019      	strh	r1, [r3, #0]
 800789a:	2300      	movs	r3, #0
 800789c:	6123      	str	r3, [r4, #16]
 800789e:	4615      	mov	r5, r2
 80078a0:	e7ba      	b.n	8007818 <_printf_i+0x150>
 80078a2:	682b      	ldr	r3, [r5, #0]
 80078a4:	1d1a      	adds	r2, r3, #4
 80078a6:	602a      	str	r2, [r5, #0]
 80078a8:	681d      	ldr	r5, [r3, #0]
 80078aa:	6862      	ldr	r2, [r4, #4]
 80078ac:	2100      	movs	r1, #0
 80078ae:	4628      	mov	r0, r5
 80078b0:	f7f8 fc8e 	bl	80001d0 <memchr>
 80078b4:	b108      	cbz	r0, 80078ba <_printf_i+0x1f2>
 80078b6:	1b40      	subs	r0, r0, r5
 80078b8:	6060      	str	r0, [r4, #4]
 80078ba:	6863      	ldr	r3, [r4, #4]
 80078bc:	6123      	str	r3, [r4, #16]
 80078be:	2300      	movs	r3, #0
 80078c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078c4:	e7a8      	b.n	8007818 <_printf_i+0x150>
 80078c6:	6923      	ldr	r3, [r4, #16]
 80078c8:	462a      	mov	r2, r5
 80078ca:	4649      	mov	r1, r9
 80078cc:	4640      	mov	r0, r8
 80078ce:	47d0      	blx	sl
 80078d0:	3001      	adds	r0, #1
 80078d2:	d0ab      	beq.n	800782c <_printf_i+0x164>
 80078d4:	6823      	ldr	r3, [r4, #0]
 80078d6:	079b      	lsls	r3, r3, #30
 80078d8:	d413      	bmi.n	8007902 <_printf_i+0x23a>
 80078da:	68e0      	ldr	r0, [r4, #12]
 80078dc:	9b03      	ldr	r3, [sp, #12]
 80078de:	4298      	cmp	r0, r3
 80078e0:	bfb8      	it	lt
 80078e2:	4618      	movlt	r0, r3
 80078e4:	e7a4      	b.n	8007830 <_printf_i+0x168>
 80078e6:	2301      	movs	r3, #1
 80078e8:	4632      	mov	r2, r6
 80078ea:	4649      	mov	r1, r9
 80078ec:	4640      	mov	r0, r8
 80078ee:	47d0      	blx	sl
 80078f0:	3001      	adds	r0, #1
 80078f2:	d09b      	beq.n	800782c <_printf_i+0x164>
 80078f4:	3501      	adds	r5, #1
 80078f6:	68e3      	ldr	r3, [r4, #12]
 80078f8:	9903      	ldr	r1, [sp, #12]
 80078fa:	1a5b      	subs	r3, r3, r1
 80078fc:	42ab      	cmp	r3, r5
 80078fe:	dcf2      	bgt.n	80078e6 <_printf_i+0x21e>
 8007900:	e7eb      	b.n	80078da <_printf_i+0x212>
 8007902:	2500      	movs	r5, #0
 8007904:	f104 0619 	add.w	r6, r4, #25
 8007908:	e7f5      	b.n	80078f6 <_printf_i+0x22e>
 800790a:	bf00      	nop
 800790c:	08007ba9 	.word	0x08007ba9
 8007910:	08007bba 	.word	0x08007bba

08007914 <_read_r>:
 8007914:	b538      	push	{r3, r4, r5, lr}
 8007916:	4d07      	ldr	r5, [pc, #28]	; (8007934 <_read_r+0x20>)
 8007918:	4604      	mov	r4, r0
 800791a:	4608      	mov	r0, r1
 800791c:	4611      	mov	r1, r2
 800791e:	2200      	movs	r2, #0
 8007920:	602a      	str	r2, [r5, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	f7f9 f944 	bl	8000bb0 <_read>
 8007928:	1c43      	adds	r3, r0, #1
 800792a:	d102      	bne.n	8007932 <_read_r+0x1e>
 800792c:	682b      	ldr	r3, [r5, #0]
 800792e:	b103      	cbz	r3, 8007932 <_read_r+0x1e>
 8007930:	6023      	str	r3, [r4, #0]
 8007932:	bd38      	pop	{r3, r4, r5, pc}
 8007934:	20002320 	.word	0x20002320

08007938 <_fstat_r>:
 8007938:	b538      	push	{r3, r4, r5, lr}
 800793a:	4d07      	ldr	r5, [pc, #28]	; (8007958 <_fstat_r+0x20>)
 800793c:	2300      	movs	r3, #0
 800793e:	4604      	mov	r4, r0
 8007940:	4608      	mov	r0, r1
 8007942:	4611      	mov	r1, r2
 8007944:	602b      	str	r3, [r5, #0]
 8007946:	f7f9 f95c 	bl	8000c02 <_fstat>
 800794a:	1c43      	adds	r3, r0, #1
 800794c:	d102      	bne.n	8007954 <_fstat_r+0x1c>
 800794e:	682b      	ldr	r3, [r5, #0]
 8007950:	b103      	cbz	r3, 8007954 <_fstat_r+0x1c>
 8007952:	6023      	str	r3, [r4, #0]
 8007954:	bd38      	pop	{r3, r4, r5, pc}
 8007956:	bf00      	nop
 8007958:	20002320 	.word	0x20002320

0800795c <_isatty_r>:
 800795c:	b538      	push	{r3, r4, r5, lr}
 800795e:	4d06      	ldr	r5, [pc, #24]	; (8007978 <_isatty_r+0x1c>)
 8007960:	2300      	movs	r3, #0
 8007962:	4604      	mov	r4, r0
 8007964:	4608      	mov	r0, r1
 8007966:	602b      	str	r3, [r5, #0]
 8007968:	f7f9 f95b 	bl	8000c22 <_isatty>
 800796c:	1c43      	adds	r3, r0, #1
 800796e:	d102      	bne.n	8007976 <_isatty_r+0x1a>
 8007970:	682b      	ldr	r3, [r5, #0]
 8007972:	b103      	cbz	r3, 8007976 <_isatty_r+0x1a>
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	bd38      	pop	{r3, r4, r5, pc}
 8007978:	20002320 	.word	0x20002320

0800797c <_init>:
 800797c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797e:	bf00      	nop
 8007980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007982:	bc08      	pop	{r3}
 8007984:	469e      	mov	lr, r3
 8007986:	4770      	bx	lr

08007988 <_fini>:
 8007988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798a:	bf00      	nop
 800798c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800798e:	bc08      	pop	{r3}
 8007990:	469e      	mov	lr, r3
 8007992:	4770      	bx	lr
