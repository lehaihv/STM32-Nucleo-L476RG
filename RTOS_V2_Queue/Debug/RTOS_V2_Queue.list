
RTOS_V2_Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ca4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  08009e38  08009e38  00019e38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3b4  0800a3b4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3b4  0800a3b4  0001a3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3bc  0800a3bc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3bc  0800a3bc  0001a3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3c0  0800a3c0  0001a3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a3c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022ac  200001e4  0800a5a8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002490  0800a5a8  00022490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ca94  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037bd  00000000  00000000  0003cca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001728  00000000  00000000  00040468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e0  00000000  00000000  00041b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000484f  00000000  00000000  00043170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000193a9  00000000  00000000  000479bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe60d  00000000  00000000  00060d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015f375  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007260  00000000  00000000  0015f3c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e1c 	.word	0x08009e1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08009e1c 	.word	0x08009e1c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000eb4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000eb8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d013      	beq.n	8000eec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ec4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ec8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ecc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d00b      	beq.n	8000eec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ed4:	e000      	b.n	8000ed8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ed6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ed8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d0f9      	beq.n	8000ed6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ee2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000eec:	687b      	ldr	r3, [r7, #4]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	60f8      	str	r0, [r7, #12]
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	e009      	b.n	8000f24 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	60ba      	str	r2, [r7, #8]
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ffc7 	bl	8000eac <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	3301      	adds	r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697a      	ldr	r2, [r7, #20]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	dbf1      	blt.n	8000f10 <_write+0x16>
  return len;
 8000f2c:	687b      	ldr	r3, [r7, #4]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3c:	f000 fbba 	bl	80016b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f40:	f000 f844 	bl	8000fcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f44:	f000 f8c4 	bl	80010d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f48:	f000 f892 	bl	8001070 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f4c:	f003 f9b4 	bl	80042b8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (3, sizeof(Data_t), &myQueue01_attributes);
 8000f50:	4a11      	ldr	r2, [pc, #68]	; (8000f98 <main+0x60>)
 8000f52:	2102      	movs	r1, #2
 8000f54:	2003      	movs	r0, #3
 8000f56:	f003 fa8b 	bl	8004470 <osMessageQueueNew>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4a0f      	ldr	r2, [pc, #60]	; (8000f9c <main+0x64>)
 8000f5e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Sender1 */
  Sender1Handle = osThreadNew(StartSender1, &(xStructsToSend[0]), &Sender1_attributes);
 8000f60:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <main+0x68>)
 8000f62:	4910      	ldr	r1, [pc, #64]	; (8000fa4 <main+0x6c>)
 8000f64:	4810      	ldr	r0, [pc, #64]	; (8000fa8 <main+0x70>)
 8000f66:	f003 f9f1 	bl	800434c <osThreadNew>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <main+0x74>)
 8000f6e:	6013      	str	r3, [r2, #0]

  /* creation of Sender2 */
  Sender2Handle = osThreadNew(StartSender2, &(xStructsToSend[1]), &Sender2_attributes);
 8000f70:	4a0f      	ldr	r2, [pc, #60]	; (8000fb0 <main+0x78>)
 8000f72:	4910      	ldr	r1, [pc, #64]	; (8000fb4 <main+0x7c>)
 8000f74:	4810      	ldr	r0, [pc, #64]	; (8000fb8 <main+0x80>)
 8000f76:	f003 f9e9 	bl	800434c <osThreadNew>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a0f      	ldr	r2, [pc, #60]	; (8000fbc <main+0x84>)
 8000f7e:	6013      	str	r3, [r2, #0]

  /* creation of Receiver */
  ReceiverHandle = osThreadNew(StartReceiver, NULL, &Receiver_attributes);
 8000f80:	4a0f      	ldr	r2, [pc, #60]	; (8000fc0 <main+0x88>)
 8000f82:	2100      	movs	r1, #0
 8000f84:	480f      	ldr	r0, [pc, #60]	; (8000fc4 <main+0x8c>)
 8000f86:	f003 f9e1 	bl	800434c <osThreadNew>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <main+0x90>)
 8000f8e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f90:	f003 f9b6 	bl	8004300 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <main+0x5c>
 8000f96:	bf00      	nop
 8000f98:	08009f78 	.word	0x08009f78
 8000f9c:	20000290 	.word	0x20000290
 8000fa0:	08009f0c 	.word	0x08009f0c
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	0800119d 	.word	0x0800119d
 8000fac:	20000284 	.word	0x20000284
 8000fb0:	08009f30 	.word	0x08009f30
 8000fb4:	20000002 	.word	0x20000002
 8000fb8:	080011d1 	.word	0x080011d1
 8000fbc:	20000288 	.word	0x20000288
 8000fc0:	08009f54 	.word	0x08009f54
 8000fc4:	08001205 	.word	0x08001205
 8000fc8:	2000028c 	.word	0x2000028c

08000fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b096      	sub	sp, #88	; 0x58
 8000fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	2244      	movs	r2, #68	; 0x44
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f006 fa0f 	bl	80073fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fee:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ff2:	f000 fe51 	bl	8001c98 <HAL_PWREx_ControlVoltageScaling>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ffc:	f000 f950 	bl	80012a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001000:	2302      	movs	r3, #2
 8001002:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001004:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001008:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100a:	2310      	movs	r3, #16
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100e:	2302      	movs	r3, #2
 8001010:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001012:	2302      	movs	r3, #2
 8001014:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001016:	2301      	movs	r3, #1
 8001018:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800101a:	230a      	movs	r3, #10
 800101c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800101e:	2307      	movs	r3, #7
 8001020:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001022:	2302      	movs	r3, #2
 8001024:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001026:	2302      	movs	r3, #2
 8001028:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4618      	mov	r0, r3
 8001030:	f000 fe88 	bl	8001d44 <HAL_RCC_OscConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800103a:	f000 f931 	bl	80012a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103e:	230f      	movs	r3, #15
 8001040:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001042:	2303      	movs	r3, #3
 8001044:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001052:	463b      	mov	r3, r7
 8001054:	2104      	movs	r1, #4
 8001056:	4618      	mov	r0, r3
 8001058:	f001 fa50 	bl	80024fc <HAL_RCC_ClockConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001062:	f000 f91d 	bl	80012a0 <Error_Handler>
  }
}
 8001066:	bf00      	nop
 8001068:	3758      	adds	r7, #88	; 0x58
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 8001076:	4a15      	ldr	r2, [pc, #84]	; (80010cc <MX_USART2_UART_Init+0x5c>)
 8001078:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 800107c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001080:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 8001096:	220c      	movs	r2, #12
 8001098:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 80010b4:	f002 fc06 	bl	80038c4 <HAL_UART_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010be:	f000 f8ef 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000200 	.word	0x20000200
 80010cc:	40004400 	.word	0x40004400

080010d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e6:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <MX_GPIO_Init+0xc4>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	4a2a      	ldr	r2, [pc, #168]	; (8001194 <MX_GPIO_Init+0xc4>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f2:	4b28      	ldr	r3, [pc, #160]	; (8001194 <MX_GPIO_Init+0xc4>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fe:	4b25      	ldr	r3, [pc, #148]	; (8001194 <MX_GPIO_Init+0xc4>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	4a24      	ldr	r2, [pc, #144]	; (8001194 <MX_GPIO_Init+0xc4>)
 8001104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110a:	4b22      	ldr	r3, [pc, #136]	; (8001194 <MX_GPIO_Init+0xc4>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <MX_GPIO_Init+0xc4>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	4a1e      	ldr	r2, [pc, #120]	; (8001194 <MX_GPIO_Init+0xc4>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <MX_GPIO_Init+0xc4>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <MX_GPIO_Init+0xc4>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	4a18      	ldr	r2, [pc, #96]	; (8001194 <MX_GPIO_Init+0xc4>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <MX_GPIO_Init+0xc4>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	2120      	movs	r1, #32
 800114a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114e:	f000 fd7d 	bl	8001c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001152:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001158:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800115c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	480b      	ldr	r0, [pc, #44]	; (8001198 <MX_GPIO_Init+0xc8>)
 800116a:	f000 fbc5 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800116e:	2320      	movs	r3, #32
 8001170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	2301      	movs	r3, #1
 8001174:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001188:	f000 fbb6 	bl	80018f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800118c:	bf00      	nop
 800118e:	3728      	adds	r7, #40	; 0x28
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40021000 	.word	0x40021000
 8001198:	48000800 	.word	0x48000800

0800119c <StartSender1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSender1 */
void StartSender1(void *argument)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  BaseType_t osStatus_t;
  const TickType_t xTicksToWait = pdMS_TO_TICKS( 100 );
 80011a4:	2364      	movs	r3, #100	; 0x64
 80011a6:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	osStatus_t = osMessageQueuePut( myQueue01Handle, argument, 0, xTicksToWait);
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <StartSender1+0x2c>)
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2200      	movs	r2, #0
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	f003 f9d1 	bl	8004558 <osMessageQueuePut>
 80011b6:	60b8      	str	r0, [r7, #8]
    if( osStatus_t != osOK )
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0f4      	beq.n	80011a8 <StartSender1+0xc>
	  {
	  /* The send operation could not complete, even after waiting for 100ms.
	  This must be an error as the receiving task should make space in the
	  queue as soon as both sending tasks are in the Blocked state. */
	  printf("%s", "Could not send to the queue.\r\n");
 80011be:	4803      	ldr	r0, [pc, #12]	; (80011cc <StartSender1+0x30>)
 80011c0:	f006 feaa 	bl	8007f18 <puts>
	osStatus_t = osMessageQueuePut( myQueue01Handle, argument, 0, xTicksToWait);
 80011c4:	e7f0      	b.n	80011a8 <StartSender1+0xc>
 80011c6:	bf00      	nop
 80011c8:	20000290 	.word	0x20000290
 80011cc:	08009e60 	.word	0x08009e60

080011d0 <StartSender2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSender2 */
void StartSender2(void *argument)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSender2 */
  /* Infinite loop */
  BaseType_t osStatus_t;
  const TickType_t xTicksToWait = pdMS_TO_TICKS( 100 );
 80011d8:	2364      	movs	r3, #100	; 0x64
 80011da:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	osStatus_t = osMessageQueuePut( myQueue01Handle, argument, 0, xTicksToWait);
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <StartSender2+0x2c>)
 80011de:	6818      	ldr	r0, [r3, #0]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2200      	movs	r2, #0
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	f003 f9b7 	bl	8004558 <osMessageQueuePut>
 80011ea:	60b8      	str	r0, [r7, #8]
    if( osStatus_t != osOK )
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f4      	beq.n	80011dc <StartSender2+0xc>
	  {
	    /* The send operation could not complete, even after waiting for 100ms.
	  	This must be an error as the receiving task should make space in the
	  	queue as soon as both sending tasks are in the Blocked state. */
	  	printf("%s", "Could not send to the queue.\r\n");
 80011f2:	4803      	ldr	r0, [pc, #12]	; (8001200 <StartSender2+0x30>)
 80011f4:	f006 fe90 	bl	8007f18 <puts>
	osStatus_t = osMessageQueuePut( myQueue01Handle, argument, 0, xTicksToWait);
 80011f8:	e7f0      	b.n	80011dc <StartSender2+0xc>
 80011fa:	bf00      	nop
 80011fc:	20000290 	.word	0x20000290
 8001200:	08009e60 	.word	0x08009e60

08001204 <StartReceiver>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiver */
void StartReceiver(void *argument)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  Data_t xReceivedStructure;
  BaseType_t osStatus_t;
  for(;;)
  {
    if( osMessageQueueGetCount(myQueue01Handle) != 3 )
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <StartReceiver+0x60>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f003 fa5f 	bl	80046d4 <osMessageQueueGetCount>
 8001216:	4603      	mov	r3, r0
 8001218:	2b03      	cmp	r3, #3
 800121a:	d002      	beq.n	8001222 <StartReceiver+0x1e>
	  {
	    printf("Queue should have been full!\r\n");
 800121c:	4812      	ldr	r0, [pc, #72]	; (8001268 <StartReceiver+0x64>)
 800121e:	f006 fe7b 	bl	8007f18 <puts>
	  }
    osStatus_t = osMessageQueueGet(myQueue01Handle, &(xReceivedStructure), 0, 0);
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <StartReceiver+0x60>)
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	f107 0108 	add.w	r1, r7, #8
 800122a:	2300      	movs	r3, #0
 800122c:	2200      	movs	r2, #0
 800122e:	f003 f9f3 	bl	8004618 <osMessageQueueGet>
 8001232:	60f8      	str	r0, [r7, #12]
    if( osStatus_t == osOK )
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d110      	bne.n	800125c <StartReceiver+0x58>
      {
        /* Data was successfully received from the queue, print out the received
        value and the source of the value. */
        if( xReceivedStructure.eDataSource == eSender1 )
 800123a:	7a7b      	ldrb	r3, [r7, #9]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d106      	bne.n	800124e <StartReceiver+0x4a>
          {
            printf("%s%d\n", "From Sender 1 = ", xReceivedStructure.ucValue );
 8001240:	7a3b      	ldrb	r3, [r7, #8]
 8001242:	461a      	mov	r2, r3
 8001244:	4909      	ldr	r1, [pc, #36]	; (800126c <StartReceiver+0x68>)
 8001246:	480a      	ldr	r0, [pc, #40]	; (8001270 <StartReceiver+0x6c>)
 8001248:	f006 fde0 	bl	8007e0c <iprintf>
 800124c:	e7de      	b.n	800120c <StartReceiver+0x8>
          }
        else
          {
        	printf("%s%d\n", "From Sender 2 = ", xReceivedStructure.ucValue );
 800124e:	7a3b      	ldrb	r3, [r7, #8]
 8001250:	461a      	mov	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	; (8001274 <StartReceiver+0x70>)
 8001254:	4806      	ldr	r0, [pc, #24]	; (8001270 <StartReceiver+0x6c>)
 8001256:	f006 fdd9 	bl	8007e0c <iprintf>
 800125a:	e7d7      	b.n	800120c <StartReceiver+0x8>
      }
    else
      {
        /* Nothing was received from the queue. This must be an error as this
        task should only run when the queue is full. */
    	printf("%s", "Could not receive from the queue.\r\n" );
 800125c:	4806      	ldr	r0, [pc, #24]	; (8001278 <StartReceiver+0x74>)
 800125e:	f006 fe5b 	bl	8007f18 <puts>
    if( osMessageQueueGetCount(myQueue01Handle) != 3 )
 8001262:	e7d3      	b.n	800120c <StartReceiver+0x8>
 8001264:	20000290 	.word	0x20000290
 8001268:	08009e80 	.word	0x08009e80
 800126c:	08009ea0 	.word	0x08009ea0
 8001270:	08009eb4 	.word	0x08009eb4
 8001274:	08009ebc 	.word	0x08009ebc
 8001278:	08009ed0 	.word	0x08009ed0

0800127c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a04      	ldr	r2, [pc, #16]	; (800129c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d101      	bne.n	8001292 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800128e:	f000 fa31 	bl	80016f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40001000 	.word	0x40001000

080012a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a4:	b672      	cpsid	i
}
 80012a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <Error_Handler+0x8>
	...

080012ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <HAL_MspInit+0x4c>)
 80012b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b6:	4a10      	ldr	r2, [pc, #64]	; (80012f8 <HAL_MspInit+0x4c>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6613      	str	r3, [r2, #96]	; 0x60
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <HAL_MspInit+0x4c>)
 80012c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <HAL_MspInit+0x4c>)
 80012cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <HAL_MspInit+0x4c>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	6593      	str	r3, [r2, #88]	; 0x58
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HAL_MspInit+0x4c>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	210f      	movs	r1, #15
 80012e6:	f06f 0001 	mvn.w	r0, #1
 80012ea:	f000 fadb 	bl	80018a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000

080012fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b0ac      	sub	sp, #176	; 0xb0
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2288      	movs	r2, #136	; 0x88
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f006 f86e 	bl	80073fe <memset>
  if(huart->Instance==USART2)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a21      	ldr	r2, [pc, #132]	; (80013ac <HAL_UART_MspInit+0xb0>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d13b      	bne.n	80013a4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800132c:	2302      	movs	r3, #2
 800132e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001330:	2300      	movs	r3, #0
 8001332:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4618      	mov	r0, r3
 800133a:	f001 fb35 	bl	80029a8 <HAL_RCCEx_PeriphCLKConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001344:	f7ff ffac 	bl	80012a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <HAL_UART_MspInit+0xb4>)
 800134a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134c:	4a18      	ldr	r2, [pc, #96]	; (80013b0 <HAL_UART_MspInit+0xb4>)
 800134e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001352:	6593      	str	r3, [r2, #88]	; 0x58
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <HAL_UART_MspInit+0xb4>)
 8001356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <HAL_UART_MspInit+0xb4>)
 8001362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001364:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <HAL_UART_MspInit+0xb4>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136c:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <HAL_UART_MspInit+0xb4>)
 800136e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001378:	230c      	movs	r3, #12
 800137a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001390:	2307      	movs	r3, #7
 8001392:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800139a:	4619      	mov	r1, r3
 800139c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a0:	f000 faaa 	bl	80018f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013a4:	bf00      	nop
 80013a6:	37b0      	adds	r7, #176	; 0xb0
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40004400 	.word	0x40004400
 80013b0:	40021000 	.word	0x40021000

080013b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08e      	sub	sp, #56	; 0x38
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80013bc:	2300      	movs	r3, #0
 80013be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013c2:	4b34      	ldr	r3, [pc, #208]	; (8001494 <HAL_InitTick+0xe0>)
 80013c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c6:	4a33      	ldr	r2, [pc, #204]	; (8001494 <HAL_InitTick+0xe0>)
 80013c8:	f043 0310 	orr.w	r3, r3, #16
 80013cc:	6593      	str	r3, [r2, #88]	; 0x58
 80013ce:	4b31      	ldr	r3, [pc, #196]	; (8001494 <HAL_InitTick+0xe0>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013da:	f107 0210 	add.w	r2, r7, #16
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f001 fa4d 	bl	8002884 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013ea:	6a3b      	ldr	r3, [r7, #32]
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d103      	bne.n	80013fc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013f4:	f001 fa1a 	bl	800282c <HAL_RCC_GetPCLK1Freq>
 80013f8:	6378      	str	r0, [r7, #52]	; 0x34
 80013fa:	e004      	b.n	8001406 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013fc:	f001 fa16 	bl	800282c <HAL_RCC_GetPCLK1Freq>
 8001400:	4603      	mov	r3, r0
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001408:	4a23      	ldr	r2, [pc, #140]	; (8001498 <HAL_InitTick+0xe4>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	0c9b      	lsrs	r3, r3, #18
 8001410:	3b01      	subs	r3, #1
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001414:	4b21      	ldr	r3, [pc, #132]	; (800149c <HAL_InitTick+0xe8>)
 8001416:	4a22      	ldr	r2, [pc, #136]	; (80014a0 <HAL_InitTick+0xec>)
 8001418:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800141a:	4b20      	ldr	r3, [pc, #128]	; (800149c <HAL_InitTick+0xe8>)
 800141c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001420:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001422:	4a1e      	ldr	r2, [pc, #120]	; (800149c <HAL_InitTick+0xe8>)
 8001424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001426:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001428:	4b1c      	ldr	r3, [pc, #112]	; (800149c <HAL_InitTick+0xe8>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142e:	4b1b      	ldr	r3, [pc, #108]	; (800149c <HAL_InitTick+0xe8>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <HAL_InitTick+0xe8>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800143a:	4818      	ldr	r0, [pc, #96]	; (800149c <HAL_InitTick+0xe8>)
 800143c:	f001 ff70 	bl	8003320 <HAL_TIM_Base_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001446:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11b      	bne.n	8001486 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800144e:	4813      	ldr	r0, [pc, #76]	; (800149c <HAL_InitTick+0xe8>)
 8001450:	f001 ffc8 	bl	80033e4 <HAL_TIM_Base_Start_IT>
 8001454:	4603      	mov	r3, r0
 8001456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800145a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800145e:	2b00      	cmp	r3, #0
 8001460:	d111      	bne.n	8001486 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001462:	2036      	movs	r0, #54	; 0x36
 8001464:	f000 fa3a 	bl	80018dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b0f      	cmp	r3, #15
 800146c:	d808      	bhi.n	8001480 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800146e:	2200      	movs	r2, #0
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	2036      	movs	r0, #54	; 0x36
 8001474:	f000 fa16 	bl	80018a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001478:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <HAL_InitTick+0xf0>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	e002      	b.n	8001486 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001486:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800148a:	4618      	mov	r0, r3
 800148c:	3738      	adds	r7, #56	; 0x38
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40021000 	.word	0x40021000
 8001498:	431bde83 	.word	0x431bde83
 800149c:	20000294 	.word	0x20000294
 80014a0:	40001000 	.word	0x40001000
 80014a4:	20000008 	.word	0x20000008

080014a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <NMI_Handler+0x4>

080014ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <HardFault_Handler+0x4>

080014b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <MemManage_Handler+0x4>

080014ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <BusFault_Handler+0x4>

080014c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <UsageFault_Handler+0x4>

080014c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <TIM6_DAC_IRQHandler+0x10>)
 80014da:	f001 fff3 	bl	80034c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000294 	.word	0x20000294

080014e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return 1;
 80014ec:	2301      	movs	r3, #1
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <_kill>:

int _kill(int pid, int sig)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001502:	f005 fe4b 	bl	800719c <__errno>
 8001506:	4603      	mov	r3, r0
 8001508:	2216      	movs	r2, #22
 800150a:	601a      	str	r2, [r3, #0]
  return -1;
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <_exit>:

void _exit (int status)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001520:	f04f 31ff 	mov.w	r1, #4294967295
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ffe7 	bl	80014f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800152a:	e7fe      	b.n	800152a <_exit+0x12>

0800152c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	e00a      	b.n	8001554 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800153e:	f3af 8000 	nop.w
 8001542:	4601      	mov	r1, r0
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	60ba      	str	r2, [r7, #8]
 800154a:	b2ca      	uxtb	r2, r1
 800154c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	3301      	adds	r3, #1
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	429a      	cmp	r2, r3
 800155a:	dbf0      	blt.n	800153e <_read+0x12>
  }

  return len;
 800155c:	687b      	ldr	r3, [r7, #4]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800156e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800158e:	605a      	str	r2, [r3, #4]
  return 0;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <_isatty>:

int _isatty(int file)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015a6:	2301      	movs	r3, #1
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d8:	4a14      	ldr	r2, [pc, #80]	; (800162c <_sbrk+0x5c>)
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <_sbrk+0x60>)
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d102      	bne.n	80015f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <_sbrk+0x64>)
 80015ee:	4a12      	ldr	r2, [pc, #72]	; (8001638 <_sbrk+0x68>)
 80015f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <_sbrk+0x64>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d207      	bcs.n	8001610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001600:	f005 fdcc 	bl	800719c <__errno>
 8001604:	4603      	mov	r3, r0
 8001606:	220c      	movs	r2, #12
 8001608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	e009      	b.n	8001624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <_sbrk+0x64>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001616:	4b07      	ldr	r3, [pc, #28]	; (8001634 <_sbrk+0x64>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <_sbrk+0x64>)
 8001620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001622:	68fb      	ldr	r3, [r7, #12]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20018000 	.word	0x20018000
 8001630:	00000400 	.word	0x00000400
 8001634:	200002e0 	.word	0x200002e0
 8001638:	20002490 	.word	0x20002490

0800163c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <SystemInit+0x20>)
 8001642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <SystemInit+0x20>)
 8001648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800164c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001698 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001664:	f7ff ffea 	bl	800163c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001668:	480c      	ldr	r0, [pc, #48]	; (800169c <LoopForever+0x6>)
  ldr r1, =_edata
 800166a:	490d      	ldr	r1, [pc, #52]	; (80016a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800166c:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <LoopForever+0xe>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001670:	e002      	b.n	8001678 <LoopCopyDataInit>

08001672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001676:	3304      	adds	r3, #4

08001678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800167c:	d3f9      	bcc.n	8001672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167e:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001680:	4c0a      	ldr	r4, [pc, #40]	; (80016ac <LoopForever+0x16>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001684:	e001      	b.n	800168a <LoopFillZerobss>

08001686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001688:	3204      	adds	r2, #4

0800168a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800168c:	d3fb      	bcc.n	8001686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800168e:	f005 fe81 	bl	8007394 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001692:	f7ff fc51 	bl	8000f38 <main>

08001696 <LoopForever>:

LoopForever:
    b LoopForever
 8001696:	e7fe      	b.n	8001696 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001698:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80016a4:	0800a3c4 	.word	0x0800a3c4
  ldr r2, =_sbss
 80016a8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80016ac:	20002490 	.word	0x20002490

080016b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <ADC1_2_IRQHandler>
	...

080016b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <HAL_Init+0x3c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <HAL_Init+0x3c>)
 80016c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ca:	2003      	movs	r0, #3
 80016cc:	f000 f8df 	bl	800188e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016d0:	200f      	movs	r0, #15
 80016d2:	f7ff fe6f 	bl	80013b4 <HAL_InitTick>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	71fb      	strb	r3, [r7, #7]
 80016e0:	e001      	b.n	80016e6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016e2:	f7ff fde3 	bl	80012ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016e6:	79fb      	ldrb	r3, [r7, #7]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40022000 	.word	0x40022000

080016f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_IncTick+0x20>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	461a      	mov	r2, r3
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_IncTick+0x24>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4413      	add	r3, r2
 8001704:	4a04      	ldr	r2, [pc, #16]	; (8001718 <HAL_IncTick+0x24>)
 8001706:	6013      	str	r3, [r2, #0]
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	2000000c 	.word	0x2000000c
 8001718:	200002e4 	.word	0x200002e4

0800171c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return uwTick;
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <HAL_GetTick+0x14>)
 8001722:	681b      	ldr	r3, [r3, #0]
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	200002e4 	.word	0x200002e4

08001734 <__NVIC_SetPriorityGrouping>:
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001750:	4013      	ands	r3, r2
 8001752:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800175c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001766:	4a04      	ldr	r2, [pc, #16]	; (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	60d3      	str	r3, [r2, #12]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <__NVIC_GetPriorityGrouping>:
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <__NVIC_GetPriorityGrouping+0x18>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	0a1b      	lsrs	r3, r3, #8
 8001786:	f003 0307 	and.w	r3, r3, #7
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <__NVIC_EnableIRQ>:
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	db0b      	blt.n	80017c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	f003 021f 	and.w	r2, r3, #31
 80017b0:	4907      	ldr	r1, [pc, #28]	; (80017d0 <__NVIC_EnableIRQ+0x38>)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	095b      	lsrs	r3, r3, #5
 80017b8:	2001      	movs	r0, #1
 80017ba:	fa00 f202 	lsl.w	r2, r0, r2
 80017be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000e100 	.word	0xe000e100

080017d4 <__NVIC_SetPriority>:
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	db0a      	blt.n	80017fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	490c      	ldr	r1, [pc, #48]	; (8001820 <__NVIC_SetPriority+0x4c>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	0112      	lsls	r2, r2, #4
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	440b      	add	r3, r1
 80017f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80017fc:	e00a      	b.n	8001814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4908      	ldr	r1, [pc, #32]	; (8001824 <__NVIC_SetPriority+0x50>)
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	3b04      	subs	r3, #4
 800180c:	0112      	lsls	r2, r2, #4
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	440b      	add	r3, r1
 8001812:	761a      	strb	r2, [r3, #24]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000e100 	.word	0xe000e100
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <NVIC_EncodePriority>:
{
 8001828:	b480      	push	{r7}
 800182a:	b089      	sub	sp, #36	; 0x24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f1c3 0307 	rsb	r3, r3, #7
 8001842:	2b04      	cmp	r3, #4
 8001844:	bf28      	it	cs
 8001846:	2304      	movcs	r3, #4
 8001848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3304      	adds	r3, #4
 800184e:	2b06      	cmp	r3, #6
 8001850:	d902      	bls.n	8001858 <NVIC_EncodePriority+0x30>
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3b03      	subs	r3, #3
 8001856:	e000      	b.n	800185a <NVIC_EncodePriority+0x32>
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	f04f 32ff 	mov.w	r2, #4294967295
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43da      	mvns	r2, r3
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	401a      	ands	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001870:	f04f 31ff 	mov.w	r1, #4294967295
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	fa01 f303 	lsl.w	r3, r1, r3
 800187a:	43d9      	mvns	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	4313      	orrs	r3, r2
}
 8001882:	4618      	mov	r0, r3
 8001884:	3724      	adds	r7, #36	; 0x24
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff ff4c 	bl	8001734 <__NVIC_SetPriorityGrouping>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018b6:	f7ff ff61 	bl	800177c <__NVIC_GetPriorityGrouping>
 80018ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	68b9      	ldr	r1, [r7, #8]
 80018c0:	6978      	ldr	r0, [r7, #20]
 80018c2:	f7ff ffb1 	bl	8001828 <NVIC_EncodePriority>
 80018c6:	4602      	mov	r2, r0
 80018c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018cc:	4611      	mov	r1, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ff80 	bl	80017d4 <__NVIC_SetPriority>
}
 80018d4:	bf00      	nop
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ff54 	bl	8001798 <__NVIC_EnableIRQ>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b087      	sub	sp, #28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001906:	e17f      	b.n	8001c08 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	2101      	movs	r1, #1
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	fa01 f303 	lsl.w	r3, r1, r3
 8001914:	4013      	ands	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 8171 	beq.w	8001c02 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	2b01      	cmp	r3, #1
 800192a:	d005      	beq.n	8001938 <HAL_GPIO_Init+0x40>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d130      	bne.n	800199a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	2203      	movs	r2, #3
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800196e:	2201      	movs	r2, #1
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	091b      	lsrs	r3, r3, #4
 8001984:	f003 0201 	and.w	r2, r3, #1
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d118      	bne.n	80019d8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80019ac:	2201      	movs	r2, #1
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	08db      	lsrs	r3, r3, #3
 80019c2:	f003 0201 	and.w	r2, r3, #1
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d017      	beq.n	8001a14 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	2203      	movs	r2, #3
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d123      	bne.n	8001a68 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	08da      	lsrs	r2, r3, #3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3208      	adds	r2, #8
 8001a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	220f      	movs	r2, #15
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	08da      	lsrs	r2, r3, #3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3208      	adds	r2, #8
 8001a62:	6939      	ldr	r1, [r7, #16]
 8001a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0203 	and.w	r2, r3, #3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80ac 	beq.w	8001c02 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aaa:	4b5f      	ldr	r3, [pc, #380]	; (8001c28 <HAL_GPIO_Init+0x330>)
 8001aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aae:	4a5e      	ldr	r2, [pc, #376]	; (8001c28 <HAL_GPIO_Init+0x330>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ab6:	4b5c      	ldr	r3, [pc, #368]	; (8001c28 <HAL_GPIO_Init+0x330>)
 8001ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ac2:	4a5a      	ldr	r2, [pc, #360]	; (8001c2c <HAL_GPIO_Init+0x334>)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	089b      	lsrs	r3, r3, #2
 8001ac8:	3302      	adds	r3, #2
 8001aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ace:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	220f      	movs	r2, #15
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001aec:	d025      	beq.n	8001b3a <HAL_GPIO_Init+0x242>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a4f      	ldr	r2, [pc, #316]	; (8001c30 <HAL_GPIO_Init+0x338>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d01f      	beq.n	8001b36 <HAL_GPIO_Init+0x23e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a4e      	ldr	r2, [pc, #312]	; (8001c34 <HAL_GPIO_Init+0x33c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d019      	beq.n	8001b32 <HAL_GPIO_Init+0x23a>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a4d      	ldr	r2, [pc, #308]	; (8001c38 <HAL_GPIO_Init+0x340>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d013      	beq.n	8001b2e <HAL_GPIO_Init+0x236>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a4c      	ldr	r2, [pc, #304]	; (8001c3c <HAL_GPIO_Init+0x344>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d00d      	beq.n	8001b2a <HAL_GPIO_Init+0x232>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a4b      	ldr	r2, [pc, #300]	; (8001c40 <HAL_GPIO_Init+0x348>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d007      	beq.n	8001b26 <HAL_GPIO_Init+0x22e>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a4a      	ldr	r2, [pc, #296]	; (8001c44 <HAL_GPIO_Init+0x34c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d101      	bne.n	8001b22 <HAL_GPIO_Init+0x22a>
 8001b1e:	2306      	movs	r3, #6
 8001b20:	e00c      	b.n	8001b3c <HAL_GPIO_Init+0x244>
 8001b22:	2307      	movs	r3, #7
 8001b24:	e00a      	b.n	8001b3c <HAL_GPIO_Init+0x244>
 8001b26:	2305      	movs	r3, #5
 8001b28:	e008      	b.n	8001b3c <HAL_GPIO_Init+0x244>
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x244>
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e004      	b.n	8001b3c <HAL_GPIO_Init+0x244>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e002      	b.n	8001b3c <HAL_GPIO_Init+0x244>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_GPIO_Init+0x244>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	f002 0203 	and.w	r2, r2, #3
 8001b42:	0092      	lsls	r2, r2, #2
 8001b44:	4093      	lsls	r3, r2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b4c:	4937      	ldr	r1, [pc, #220]	; (8001c2c <HAL_GPIO_Init+0x334>)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	089b      	lsrs	r3, r3, #2
 8001b52:	3302      	adds	r3, #2
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b5a:	4b3b      	ldr	r3, [pc, #236]	; (8001c48 <HAL_GPIO_Init+0x350>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b7e:	4a32      	ldr	r2, [pc, #200]	; (8001c48 <HAL_GPIO_Init+0x350>)
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b84:	4b30      	ldr	r3, [pc, #192]	; (8001c48 <HAL_GPIO_Init+0x350>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ba8:	4a27      	ldr	r2, [pc, #156]	; (8001c48 <HAL_GPIO_Init+0x350>)
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bae:	4b26      	ldr	r3, [pc, #152]	; (8001c48 <HAL_GPIO_Init+0x350>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bd2:	4a1d      	ldr	r2, [pc, #116]	; (8001c48 <HAL_GPIO_Init+0x350>)
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bd8:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <HAL_GPIO_Init+0x350>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bfc:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <HAL_GPIO_Init+0x350>)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	3301      	adds	r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f47f ae78 	bne.w	8001908 <HAL_GPIO_Init+0x10>
  }
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	371c      	adds	r7, #28
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40010000 	.word	0x40010000
 8001c30:	48000400 	.word	0x48000400
 8001c34:	48000800 	.word	0x48000800
 8001c38:	48000c00 	.word	0x48000c00
 8001c3c:	48001000 	.word	0x48001000
 8001c40:	48001400 	.word	0x48001400
 8001c44:	48001800 	.word	0x48001800
 8001c48:	40010400 	.word	0x40010400

08001c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	807b      	strh	r3, [r7, #2]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c5c:	787b      	ldrb	r3, [r7, #1]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c62:	887a      	ldrh	r2, [r7, #2]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c68:	e002      	b.n	8001c70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c6a:	887a      	ldrh	r2, [r7, #2]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40007000 	.word	0x40007000

08001c98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ca6:	d130      	bne.n	8001d0a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ca8:	4b23      	ldr	r3, [pc, #140]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cb4:	d038      	beq.n	8001d28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cb6:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cbe:	4a1e      	ldr	r2, [pc, #120]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cc4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cc6:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2232      	movs	r2, #50	; 0x32
 8001ccc:	fb02 f303 	mul.w	r3, r2, r3
 8001cd0:	4a1b      	ldr	r2, [pc, #108]	; (8001d40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd6:	0c9b      	lsrs	r3, r3, #18
 8001cd8:	3301      	adds	r3, #1
 8001cda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cdc:	e002      	b.n	8001ce4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ce4:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf0:	d102      	bne.n	8001cf8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1f2      	bne.n	8001cde <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d04:	d110      	bne.n	8001d28 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e00f      	b.n	8001d2a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d16:	d007      	beq.n	8001d28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d20:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d26:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40007000 	.word	0x40007000
 8001d3c:	20000004 	.word	0x20000004
 8001d40:	431bde83 	.word	0x431bde83

08001d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e3ca      	b.n	80024ec <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d56:	4b97      	ldr	r3, [pc, #604]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d60:	4b94      	ldr	r3, [pc, #592]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 80e4 	beq.w	8001f40 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d007      	beq.n	8001d8e <HAL_RCC_OscConfig+0x4a>
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	2b0c      	cmp	r3, #12
 8001d82:	f040 808b 	bne.w	8001e9c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	f040 8087 	bne.w	8001e9c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d8e:	4b89      	ldr	r3, [pc, #548]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d005      	beq.n	8001da6 <HAL_RCC_OscConfig+0x62>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e3a2      	b.n	80024ec <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a1a      	ldr	r2, [r3, #32]
 8001daa:	4b82      	ldr	r3, [pc, #520]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d004      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x7c>
 8001db6:	4b7f      	ldr	r3, [pc, #508]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dbe:	e005      	b.n	8001dcc <HAL_RCC_OscConfig+0x88>
 8001dc0:	4b7c      	ldr	r3, [pc, #496]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc6:	091b      	lsrs	r3, r3, #4
 8001dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d223      	bcs.n	8001e18 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 fd87 	bl	80028e8 <RCC_SetFlashLatencyFromMSIRange>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e383      	b.n	80024ec <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001de4:	4b73      	ldr	r3, [pc, #460]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a72      	ldr	r2, [pc, #456]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001dea:	f043 0308 	orr.w	r3, r3, #8
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b70      	ldr	r3, [pc, #448]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	496d      	ldr	r1, [pc, #436]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e02:	4b6c      	ldr	r3, [pc, #432]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	021b      	lsls	r3, r3, #8
 8001e10:	4968      	ldr	r1, [pc, #416]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	604b      	str	r3, [r1, #4]
 8001e16:	e025      	b.n	8001e64 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e18:	4b66      	ldr	r3, [pc, #408]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a65      	ldr	r2, [pc, #404]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001e1e:	f043 0308 	orr.w	r3, r3, #8
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	4b63      	ldr	r3, [pc, #396]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	4960      	ldr	r1, [pc, #384]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e36:	4b5f      	ldr	r3, [pc, #380]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	021b      	lsls	r3, r3, #8
 8001e44:	495b      	ldr	r1, [pc, #364]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d109      	bne.n	8001e64 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 fd47 	bl	80028e8 <RCC_SetFlashLatencyFromMSIRange>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e343      	b.n	80024ec <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e64:	f000 fc4a 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	4b52      	ldr	r3, [pc, #328]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	091b      	lsrs	r3, r3, #4
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	4950      	ldr	r1, [pc, #320]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001e76:	5ccb      	ldrb	r3, [r1, r3]
 8001e78:	f003 031f 	and.w	r3, r3, #31
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e80:	4a4e      	ldr	r2, [pc, #312]	; (8001fbc <HAL_RCC_OscConfig+0x278>)
 8001e82:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e84:	4b4e      	ldr	r3, [pc, #312]	; (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fa93 	bl	80013b4 <HAL_InitTick>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d052      	beq.n	8001f3e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	e327      	b.n	80024ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d032      	beq.n	8001f0a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ea4:	4b43      	ldr	r3, [pc, #268]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a42      	ldr	r2, [pc, #264]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001eb0:	f7ff fc34 	bl	800171c <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001eb8:	f7ff fc30 	bl	800171c <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e310      	b.n	80024ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eca:	4b3a      	ldr	r3, [pc, #232]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ed6:	4b37      	ldr	r3, [pc, #220]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a36      	ldr	r2, [pc, #216]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001edc:	f043 0308 	orr.w	r3, r3, #8
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b34      	ldr	r3, [pc, #208]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	4931      	ldr	r1, [pc, #196]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ef4:	4b2f      	ldr	r3, [pc, #188]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	492c      	ldr	r1, [pc, #176]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]
 8001f08:	e01a      	b.n	8001f40 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f0a:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a29      	ldr	r2, [pc, #164]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f16:	f7ff fc01 	bl	800171c <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f1e:	f7ff fbfd 	bl	800171c <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e2dd      	b.n	80024ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f30:	4b20      	ldr	r3, [pc, #128]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f0      	bne.n	8001f1e <HAL_RCC_OscConfig+0x1da>
 8001f3c:	e000      	b.n	8001f40 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f3e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d074      	beq.n	8002036 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d005      	beq.n	8001f5e <HAL_RCC_OscConfig+0x21a>
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	2b0c      	cmp	r3, #12
 8001f56:	d10e      	bne.n	8001f76 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d10b      	bne.n	8001f76 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5e:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d064      	beq.n	8002034 <HAL_RCC_OscConfig+0x2f0>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d160      	bne.n	8002034 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e2ba      	b.n	80024ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f7e:	d106      	bne.n	8001f8e <HAL_RCC_OscConfig+0x24a>
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a0b      	ldr	r2, [pc, #44]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	e026      	b.n	8001fdc <HAL_RCC_OscConfig+0x298>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f96:	d115      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x280>
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a05      	ldr	r2, [pc, #20]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001f9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4b03      	ldr	r3, [pc, #12]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a02      	ldr	r2, [pc, #8]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	e014      	b.n	8001fdc <HAL_RCC_OscConfig+0x298>
 8001fb2:	bf00      	nop
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	08009f90 	.word	0x08009f90
 8001fbc:	20000004 	.word	0x20000004
 8001fc0:	20000008 	.word	0x20000008
 8001fc4:	4ba0      	ldr	r3, [pc, #640]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a9f      	ldr	r2, [pc, #636]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 8001fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	4b9d      	ldr	r3, [pc, #628]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a9c      	ldr	r2, [pc, #624]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 8001fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d013      	beq.n	800200c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe4:	f7ff fb9a 	bl	800171c <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fec:	f7ff fb96 	bl	800171c <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b64      	cmp	r3, #100	; 0x64
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e276      	b.n	80024ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ffe:	4b92      	ldr	r3, [pc, #584]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0x2a8>
 800200a:	e014      	b.n	8002036 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200c:	f7ff fb86 	bl	800171c <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002014:	f7ff fb82 	bl	800171c <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b64      	cmp	r3, #100	; 0x64
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e262      	b.n	80024ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002026:	4b88      	ldr	r3, [pc, #544]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x2d0>
 8002032:	e000      	b.n	8002036 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d060      	beq.n	8002104 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	2b04      	cmp	r3, #4
 8002046:	d005      	beq.n	8002054 <HAL_RCC_OscConfig+0x310>
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	2b0c      	cmp	r3, #12
 800204c:	d119      	bne.n	8002082 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	2b02      	cmp	r3, #2
 8002052:	d116      	bne.n	8002082 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002054:	4b7c      	ldr	r3, [pc, #496]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_RCC_OscConfig+0x328>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e23f      	b.n	80024ec <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206c:	4b76      	ldr	r3, [pc, #472]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	061b      	lsls	r3, r3, #24
 800207a:	4973      	ldr	r1, [pc, #460]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 800207c:	4313      	orrs	r3, r2
 800207e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002080:	e040      	b.n	8002104 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d023      	beq.n	80020d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800208a:	4b6f      	ldr	r3, [pc, #444]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a6e      	ldr	r2, [pc, #440]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 8002090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002094:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002096:	f7ff fb41 	bl	800171c <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209e:	f7ff fb3d 	bl	800171c <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e21d      	b.n	80024ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020b0:	4b65      	ldr	r3, [pc, #404]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f0      	beq.n	800209e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020bc:	4b62      	ldr	r3, [pc, #392]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	061b      	lsls	r3, r3, #24
 80020ca:	495f      	ldr	r1, [pc, #380]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
 80020d0:	e018      	b.n	8002104 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020d2:	4b5d      	ldr	r3, [pc, #372]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a5c      	ldr	r2, [pc, #368]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 80020d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020de:	f7ff fb1d 	bl	800171c <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e6:	f7ff fb19 	bl	800171c <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e1f9      	b.n	80024ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020f8:	4b53      	ldr	r3, [pc, #332]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f0      	bne.n	80020e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	2b00      	cmp	r3, #0
 800210e:	d03c      	beq.n	800218a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d01c      	beq.n	8002152 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002118:	4b4b      	ldr	r3, [pc, #300]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 800211a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800211e:	4a4a      	ldr	r2, [pc, #296]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002128:	f7ff faf8 	bl	800171c <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002130:	f7ff faf4 	bl	800171c <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e1d4      	b.n	80024ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002142:	4b41      	ldr	r3, [pc, #260]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 8002144:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0ef      	beq.n	8002130 <HAL_RCC_OscConfig+0x3ec>
 8002150:	e01b      	b.n	800218a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002152:	4b3d      	ldr	r3, [pc, #244]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 8002154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002158:	4a3b      	ldr	r2, [pc, #236]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 800215a:	f023 0301 	bic.w	r3, r3, #1
 800215e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002162:	f7ff fadb 	bl	800171c <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216a:	f7ff fad7 	bl	800171c <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e1b7      	b.n	80024ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800217c:	4b32      	ldr	r3, [pc, #200]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 800217e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1ef      	bne.n	800216a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 80a6 	beq.w	80022e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002198:	2300      	movs	r3, #0
 800219a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800219c:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 800219e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10d      	bne.n	80021c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a8:	4b27      	ldr	r3, [pc, #156]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 80021aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ac:	4a26      	ldr	r2, [pc, #152]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 80021ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b2:	6593      	str	r3, [r2, #88]	; 0x58
 80021b4:	4b24      	ldr	r3, [pc, #144]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 80021b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021c0:	2301      	movs	r3, #1
 80021c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021c4:	4b21      	ldr	r3, [pc, #132]	; (800224c <HAL_RCC_OscConfig+0x508>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d118      	bne.n	8002202 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021d0:	4b1e      	ldr	r3, [pc, #120]	; (800224c <HAL_RCC_OscConfig+0x508>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a1d      	ldr	r2, [pc, #116]	; (800224c <HAL_RCC_OscConfig+0x508>)
 80021d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021dc:	f7ff fa9e 	bl	800171c <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e4:	f7ff fa9a 	bl	800171c <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e17a      	b.n	80024ec <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <HAL_RCC_OscConfig+0x508>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d108      	bne.n	800221c <HAL_RCC_OscConfig+0x4d8>
 800220a:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 800220c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002210:	4a0d      	ldr	r2, [pc, #52]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800221a:	e029      	b.n	8002270 <HAL_RCC_OscConfig+0x52c>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b05      	cmp	r3, #5
 8002222:	d115      	bne.n	8002250 <HAL_RCC_OscConfig+0x50c>
 8002224:	4b08      	ldr	r3, [pc, #32]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222a:	4a07      	ldr	r2, [pc, #28]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 800222c:	f043 0304 	orr.w	r3, r3, #4
 8002230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002234:	4b04      	ldr	r3, [pc, #16]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 8002236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223a:	4a03      	ldr	r2, [pc, #12]	; (8002248 <HAL_RCC_OscConfig+0x504>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002244:	e014      	b.n	8002270 <HAL_RCC_OscConfig+0x52c>
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	40007000 	.word	0x40007000
 8002250:	4b9c      	ldr	r3, [pc, #624]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 8002252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002256:	4a9b      	ldr	r2, [pc, #620]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 8002258:	f023 0301 	bic.w	r3, r3, #1
 800225c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002260:	4b98      	ldr	r3, [pc, #608]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 8002262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002266:	4a97      	ldr	r2, [pc, #604]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 8002268:	f023 0304 	bic.w	r3, r3, #4
 800226c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d016      	beq.n	80022a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002278:	f7ff fa50 	bl	800171c <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800227e:	e00a      	b.n	8002296 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002280:	f7ff fa4c 	bl	800171c <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	f241 3288 	movw	r2, #5000	; 0x1388
 800228e:	4293      	cmp	r3, r2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e12a      	b.n	80024ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002296:	4b8b      	ldr	r3, [pc, #556]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 8002298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0ed      	beq.n	8002280 <HAL_RCC_OscConfig+0x53c>
 80022a4:	e015      	b.n	80022d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a6:	f7ff fa39 	bl	800171c <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022ac:	e00a      	b.n	80022c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ae:	f7ff fa35 	bl	800171c <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022bc:	4293      	cmp	r3, r2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e113      	b.n	80024ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022c4:	4b7f      	ldr	r3, [pc, #508]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 80022c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1ed      	bne.n	80022ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022d2:	7ffb      	ldrb	r3, [r7, #31]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d105      	bne.n	80022e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d8:	4b7a      	ldr	r3, [pc, #488]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 80022da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022dc:	4a79      	ldr	r2, [pc, #484]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 80022de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022e2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 80fe 	beq.w	80024ea <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	f040 80d0 	bne.w	8002498 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80022f8:	4b72      	ldr	r3, [pc, #456]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f003 0203 	and.w	r2, r3, #3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	429a      	cmp	r2, r3
 800230a:	d130      	bne.n	800236e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	3b01      	subs	r3, #1
 8002318:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800231a:	429a      	cmp	r2, r3
 800231c:	d127      	bne.n	800236e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002328:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800232a:	429a      	cmp	r2, r3
 800232c:	d11f      	bne.n	800236e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002338:	2a07      	cmp	r2, #7
 800233a:	bf14      	ite	ne
 800233c:	2201      	movne	r2, #1
 800233e:	2200      	moveq	r2, #0
 8002340:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002342:	4293      	cmp	r3, r2
 8002344:	d113      	bne.n	800236e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002350:	085b      	lsrs	r3, r3, #1
 8002352:	3b01      	subs	r3, #1
 8002354:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002356:	429a      	cmp	r2, r3
 8002358:	d109      	bne.n	800236e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	085b      	lsrs	r3, r3, #1
 8002366:	3b01      	subs	r3, #1
 8002368:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800236a:	429a      	cmp	r2, r3
 800236c:	d06e      	beq.n	800244c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	2b0c      	cmp	r3, #12
 8002372:	d069      	beq.n	8002448 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002374:	4b53      	ldr	r3, [pc, #332]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d105      	bne.n	800238c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002380:	4b50      	ldr	r3, [pc, #320]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0ad      	b.n	80024ec <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002390:	4b4c      	ldr	r3, [pc, #304]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a4b      	ldr	r2, [pc, #300]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 8002396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800239a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800239c:	f7ff f9be 	bl	800171c <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a4:	f7ff f9ba 	bl	800171c <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e09a      	b.n	80024ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023b6:	4b43      	ldr	r3, [pc, #268]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023c2:	4b40      	ldr	r3, [pc, #256]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	4b40      	ldr	r3, [pc, #256]	; (80024c8 <HAL_RCC_OscConfig+0x784>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023d2:	3a01      	subs	r2, #1
 80023d4:	0112      	lsls	r2, r2, #4
 80023d6:	4311      	orrs	r1, r2
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023dc:	0212      	lsls	r2, r2, #8
 80023de:	4311      	orrs	r1, r2
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023e4:	0852      	lsrs	r2, r2, #1
 80023e6:	3a01      	subs	r2, #1
 80023e8:	0552      	lsls	r2, r2, #21
 80023ea:	4311      	orrs	r1, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023f0:	0852      	lsrs	r2, r2, #1
 80023f2:	3a01      	subs	r2, #1
 80023f4:	0652      	lsls	r2, r2, #25
 80023f6:	4311      	orrs	r1, r2
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023fc:	0912      	lsrs	r2, r2, #4
 80023fe:	0452      	lsls	r2, r2, #17
 8002400:	430a      	orrs	r2, r1
 8002402:	4930      	ldr	r1, [pc, #192]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 8002404:	4313      	orrs	r3, r2
 8002406:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002408:	4b2e      	ldr	r3, [pc, #184]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a2d      	ldr	r2, [pc, #180]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 800240e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002412:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002414:	4b2b      	ldr	r3, [pc, #172]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4a2a      	ldr	r2, [pc, #168]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 800241a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800241e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002420:	f7ff f97c 	bl	800171c <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002428:	f7ff f978 	bl	800171c <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e058      	b.n	80024ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800243a:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002446:	e050      	b.n	80024ea <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e04f      	b.n	80024ec <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800244c:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d148      	bne.n	80024ea <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002458:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a19      	ldr	r2, [pc, #100]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 800245e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002462:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002464:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4a16      	ldr	r2, [pc, #88]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 800246a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800246e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002470:	f7ff f954 	bl	800171c <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002478:	f7ff f950 	bl	800171c <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e030      	b.n	80024ec <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800248a:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0x734>
 8002496:	e028      	b.n	80024ea <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	2b0c      	cmp	r3, #12
 800249c:	d023      	beq.n	80024e6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a08      	ldr	r2, [pc, #32]	; (80024c4 <HAL_RCC_OscConfig+0x780>)
 80024a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024aa:	f7ff f937 	bl	800171c <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b0:	e00c      	b.n	80024cc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b2:	f7ff f933 	bl	800171c <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d905      	bls.n	80024cc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e013      	b.n	80024ec <HAL_RCC_OscConfig+0x7a8>
 80024c4:	40021000 	.word	0x40021000
 80024c8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024cc:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <HAL_RCC_OscConfig+0x7b0>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1ec      	bne.n	80024b2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_RCC_OscConfig+0x7b0>)
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	4905      	ldr	r1, [pc, #20]	; (80024f4 <HAL_RCC_OscConfig+0x7b0>)
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_RCC_OscConfig+0x7b4>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	60cb      	str	r3, [r1, #12]
 80024e4:	e001      	b.n	80024ea <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3720      	adds	r7, #32
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40021000 	.word	0x40021000
 80024f8:	feeefffc 	.word	0xfeeefffc

080024fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0e7      	b.n	80026e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002510:	4b75      	ldr	r3, [pc, #468]	; (80026e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d910      	bls.n	8002540 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251e:	4b72      	ldr	r3, [pc, #456]	; (80026e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 0207 	bic.w	r2, r3, #7
 8002526:	4970      	ldr	r1, [pc, #448]	; (80026e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	4b6e      	ldr	r3, [pc, #440]	; (80026e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0cf      	b.n	80026e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d010      	beq.n	800256e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	4b66      	ldr	r3, [pc, #408]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002558:	429a      	cmp	r2, r3
 800255a:	d908      	bls.n	800256e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800255c:	4b63      	ldr	r3, [pc, #396]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	4960      	ldr	r1, [pc, #384]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d04c      	beq.n	8002614 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b03      	cmp	r3, #3
 8002580:	d107      	bne.n	8002592 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002582:	4b5a      	ldr	r3, [pc, #360]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d121      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e0a6      	b.n	80026e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d107      	bne.n	80025aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800259a:	4b54      	ldr	r3, [pc, #336]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d115      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e09a      	b.n	80026e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d107      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025b2:	4b4e      	ldr	r3, [pc, #312]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d109      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e08e      	b.n	80026e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025c2:	4b4a      	ldr	r3, [pc, #296]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e086      	b.n	80026e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025d2:	4b46      	ldr	r3, [pc, #280]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f023 0203 	bic.w	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	4943      	ldr	r1, [pc, #268]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025e4:	f7ff f89a 	bl	800171c <HAL_GetTick>
 80025e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ea:	e00a      	b.n	8002602 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ec:	f7ff f896 	bl	800171c <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e06e      	b.n	80026e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002602:	4b3a      	ldr	r3, [pc, #232]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 020c 	and.w	r2, r3, #12
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	429a      	cmp	r2, r3
 8002612:	d1eb      	bne.n	80025ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d010      	beq.n	8002642 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	4b31      	ldr	r3, [pc, #196]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800262c:	429a      	cmp	r2, r3
 800262e:	d208      	bcs.n	8002642 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002630:	4b2e      	ldr	r3, [pc, #184]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	492b      	ldr	r1, [pc, #172]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002642:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d210      	bcs.n	8002672 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002650:	4b25      	ldr	r3, [pc, #148]	; (80026e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f023 0207 	bic.w	r2, r3, #7
 8002658:	4923      	ldr	r1, [pc, #140]	; (80026e8 <HAL_RCC_ClockConfig+0x1ec>)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	4313      	orrs	r3, r2
 800265e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002660:	4b21      	ldr	r3, [pc, #132]	; (80026e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d001      	beq.n	8002672 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e036      	b.n	80026e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	2b00      	cmp	r3, #0
 800267c:	d008      	beq.n	8002690 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800267e:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	4918      	ldr	r1, [pc, #96]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 800268c:	4313      	orrs	r3, r2
 800268e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d009      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4910      	ldr	r1, [pc, #64]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026b0:	f000 f824 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 80026b4:	4602      	mov	r2, r0
 80026b6:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	091b      	lsrs	r3, r3, #4
 80026bc:	f003 030f 	and.w	r3, r3, #15
 80026c0:	490b      	ldr	r1, [pc, #44]	; (80026f0 <HAL_RCC_ClockConfig+0x1f4>)
 80026c2:	5ccb      	ldrb	r3, [r1, r3]
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	fa22 f303 	lsr.w	r3, r2, r3
 80026cc:	4a09      	ldr	r2, [pc, #36]	; (80026f4 <HAL_RCC_ClockConfig+0x1f8>)
 80026ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_RCC_ClockConfig+0x1fc>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fe fe6d 	bl	80013b4 <HAL_InitTick>
 80026da:	4603      	mov	r3, r0
 80026dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80026de:	7afb      	ldrb	r3, [r7, #11]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40022000 	.word	0x40022000
 80026ec:	40021000 	.word	0x40021000
 80026f0:	08009f90 	.word	0x08009f90
 80026f4:	20000004 	.word	0x20000004
 80026f8:	20000008 	.word	0x20000008

080026fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b089      	sub	sp, #36	; 0x24
 8002700:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800270a:	4b3e      	ldr	r3, [pc, #248]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002714:	4b3b      	ldr	r3, [pc, #236]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0x34>
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	2b0c      	cmp	r3, #12
 8002728:	d121      	bne.n	800276e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d11e      	bne.n	800276e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002730:	4b34      	ldr	r3, [pc, #208]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	2b00      	cmp	r3, #0
 800273a:	d107      	bne.n	800274c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800273c:	4b31      	ldr	r3, [pc, #196]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 800273e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002742:	0a1b      	lsrs	r3, r3, #8
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	61fb      	str	r3, [r7, #28]
 800274a:	e005      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800274c:	4b2d      	ldr	r3, [pc, #180]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002758:	4a2b      	ldr	r2, [pc, #172]	; (8002808 <HAL_RCC_GetSysClockFreq+0x10c>)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002760:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10d      	bne.n	8002784 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	2b04      	cmp	r3, #4
 8002772:	d102      	bne.n	800277a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002774:	4b25      	ldr	r3, [pc, #148]	; (800280c <HAL_RCC_GetSysClockFreq+0x110>)
 8002776:	61bb      	str	r3, [r7, #24]
 8002778:	e004      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	2b08      	cmp	r3, #8
 800277e:	d101      	bne.n	8002784 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002780:	4b23      	ldr	r3, [pc, #140]	; (8002810 <HAL_RCC_GetSysClockFreq+0x114>)
 8002782:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	2b0c      	cmp	r3, #12
 8002788:	d134      	bne.n	80027f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800278a:	4b1e      	ldr	r3, [pc, #120]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d003      	beq.n	80027a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d003      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0xac>
 80027a0:	e005      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027a2:	4b1a      	ldr	r3, [pc, #104]	; (800280c <HAL_RCC_GetSysClockFreq+0x110>)
 80027a4:	617b      	str	r3, [r7, #20]
      break;
 80027a6:	e005      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_RCC_GetSysClockFreq+0x114>)
 80027aa:	617b      	str	r3, [r7, #20]
      break;
 80027ac:	e002      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	617b      	str	r3, [r7, #20]
      break;
 80027b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027b4:	4b13      	ldr	r3, [pc, #76]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	3301      	adds	r3, #1
 80027c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027c2:	4b10      	ldr	r3, [pc, #64]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	0a1b      	lsrs	r3, r3, #8
 80027c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	fb03 f202 	mul.w	r2, r3, r2
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027da:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	0e5b      	lsrs	r3, r3, #25
 80027e0:	f003 0303 	and.w	r3, r3, #3
 80027e4:	3301      	adds	r3, #1
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027f4:	69bb      	ldr	r3, [r7, #24]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3724      	adds	r7, #36	; 0x24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40021000 	.word	0x40021000
 8002808:	08009fa8 	.word	0x08009fa8
 800280c:	00f42400 	.word	0x00f42400
 8002810:	007a1200 	.word	0x007a1200

08002814 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002818:	4b03      	ldr	r3, [pc, #12]	; (8002828 <HAL_RCC_GetHCLKFreq+0x14>)
 800281a:	681b      	ldr	r3, [r3, #0]
}
 800281c:	4618      	mov	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	20000004 	.word	0x20000004

0800282c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002830:	f7ff fff0 	bl	8002814 <HAL_RCC_GetHCLKFreq>
 8002834:	4602      	mov	r2, r0
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	0a1b      	lsrs	r3, r3, #8
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	4904      	ldr	r1, [pc, #16]	; (8002854 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002842:	5ccb      	ldrb	r3, [r1, r3]
 8002844:	f003 031f 	and.w	r3, r3, #31
 8002848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800284c:	4618      	mov	r0, r3
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40021000 	.word	0x40021000
 8002854:	08009fa0 	.word	0x08009fa0

08002858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800285c:	f7ff ffda 	bl	8002814 <HAL_RCC_GetHCLKFreq>
 8002860:	4602      	mov	r2, r0
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	0adb      	lsrs	r3, r3, #11
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	4904      	ldr	r1, [pc, #16]	; (8002880 <HAL_RCC_GetPCLK2Freq+0x28>)
 800286e:	5ccb      	ldrb	r3, [r1, r3]
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002878:	4618      	mov	r0, r3
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000
 8002880:	08009fa0 	.word	0x08009fa0

08002884 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	220f      	movs	r2, #15
 8002892:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002894:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_RCC_GetClockConfig+0x5c>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0203 	and.w	r2, r3, #3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80028a0:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <HAL_RCC_GetClockConfig+0x5c>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80028ac:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <HAL_RCC_GetClockConfig+0x5c>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80028b8:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <HAL_RCC_GetClockConfig+0x5c>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	08db      	lsrs	r3, r3, #3
 80028be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80028c6:	4b07      	ldr	r3, [pc, #28]	; (80028e4 <HAL_RCC_GetClockConfig+0x60>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0207 	and.w	r2, r3, #7
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	601a      	str	r2, [r3, #0]
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40022000 	.word	0x40022000

080028e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028f0:	2300      	movs	r3, #0
 80028f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028f4:	4b2a      	ldr	r3, [pc, #168]	; (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002900:	f7ff f9bc 	bl	8001c7c <HAL_PWREx_GetVoltageRange>
 8002904:	6178      	str	r0, [r7, #20]
 8002906:	e014      	b.n	8002932 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002908:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800290a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290c:	4a24      	ldr	r2, [pc, #144]	; (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800290e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002912:	6593      	str	r3, [r2, #88]	; 0x58
 8002914:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002920:	f7ff f9ac 	bl	8001c7c <HAL_PWREx_GetVoltageRange>
 8002924:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002926:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292a:	4a1d      	ldr	r2, [pc, #116]	; (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800292c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002930:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002938:	d10b      	bne.n	8002952 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b80      	cmp	r3, #128	; 0x80
 800293e:	d919      	bls.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2ba0      	cmp	r3, #160	; 0xa0
 8002944:	d902      	bls.n	800294c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002946:	2302      	movs	r3, #2
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	e013      	b.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800294c:	2301      	movs	r3, #1
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	e010      	b.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b80      	cmp	r3, #128	; 0x80
 8002956:	d902      	bls.n	800295e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002958:	2303      	movs	r3, #3
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	e00a      	b.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b80      	cmp	r3, #128	; 0x80
 8002962:	d102      	bne.n	800296a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002964:	2302      	movs	r3, #2
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	e004      	b.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b70      	cmp	r3, #112	; 0x70
 800296e:	d101      	bne.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002970:	2301      	movs	r3, #1
 8002972:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f023 0207 	bic.w	r2, r3, #7
 800297c:	4909      	ldr	r1, [pc, #36]	; (80029a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002984:	4b07      	ldr	r3, [pc, #28]	; (80029a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	429a      	cmp	r2, r3
 8002990:	d001      	beq.n	8002996 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40022000 	.word	0x40022000

080029a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029b0:	2300      	movs	r3, #0
 80029b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029b4:	2300      	movs	r3, #0
 80029b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d041      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029cc:	d02a      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80029ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029d2:	d824      	bhi.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029d8:	d008      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029de:	d81e      	bhi.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80029e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029e8:	d010      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029ea:	e018      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029ec:	4b86      	ldr	r3, [pc, #536]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	4a85      	ldr	r2, [pc, #532]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029f8:	e015      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3304      	adds	r3, #4
 80029fe:	2100      	movs	r1, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fabb 	bl	8002f7c <RCCEx_PLLSAI1_Config>
 8002a06:	4603      	mov	r3, r0
 8002a08:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a0a:	e00c      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3320      	adds	r3, #32
 8002a10:	2100      	movs	r1, #0
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 fba6 	bl	8003164 <RCCEx_PLLSAI2_Config>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a1c:	e003      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	74fb      	strb	r3, [r7, #19]
      break;
 8002a22:	e000      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a26:	7cfb      	ldrb	r3, [r7, #19]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10b      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a2c:	4b76      	ldr	r3, [pc, #472]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a3a:	4973      	ldr	r1, [pc, #460]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a42:	e001      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a44:	7cfb      	ldrb	r3, [r7, #19]
 8002a46:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d041      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a5c:	d02a      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002a5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a62:	d824      	bhi.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a68:	d008      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a6e:	d81e      	bhi.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a78:	d010      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a7a:	e018      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a7c:	4b62      	ldr	r3, [pc, #392]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4a61      	ldr	r2, [pc, #388]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a86:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a88:	e015      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 fa73 	bl	8002f7c <RCCEx_PLLSAI1_Config>
 8002a96:	4603      	mov	r3, r0
 8002a98:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a9a:	e00c      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3320      	adds	r3, #32
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fb5e 	bl	8003164 <RCCEx_PLLSAI2_Config>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002aac:	e003      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ab2:	e000      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002ab4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ab6:	7cfb      	ldrb	r3, [r7, #19]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10b      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002abc:	4b52      	ldr	r3, [pc, #328]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aca:	494f      	ldr	r1, [pc, #316]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ad2:	e001      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad4:	7cfb      	ldrb	r3, [r7, #19]
 8002ad6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 80a0 	beq.w	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002aea:	4b47      	ldr	r3, [pc, #284]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002afa:	2300      	movs	r3, #0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00d      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b00:	4b41      	ldr	r3, [pc, #260]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b04:	4a40      	ldr	r2, [pc, #256]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b0c:	4b3e      	ldr	r3, [pc, #248]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b1c:	4b3b      	ldr	r3, [pc, #236]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a3a      	ldr	r2, [pc, #232]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b28:	f7fe fdf8 	bl	800171c <HAL_GetTick>
 8002b2c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b2e:	e009      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b30:	f7fe fdf4 	bl	800171c <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d902      	bls.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	74fb      	strb	r3, [r7, #19]
        break;
 8002b42:	e005      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b44:	4b31      	ldr	r3, [pc, #196]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ef      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002b50:	7cfb      	ldrb	r3, [r7, #19]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d15c      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b56:	4b2c      	ldr	r3, [pc, #176]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b60:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d01f      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d019      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b74:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b80:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b86:	4a20      	ldr	r2, [pc, #128]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b90:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b96:	4a1c      	ldr	r2, [pc, #112]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ba0:	4a19      	ldr	r2, [pc, #100]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d016      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb2:	f7fe fdb3 	bl	800171c <HAL_GetTick>
 8002bb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bb8:	e00b      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bba:	f7fe fdaf 	bl	800171c <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d902      	bls.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	74fb      	strb	r3, [r7, #19]
            break;
 8002bd0:	e006      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0ec      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002be0:	7cfb      	ldrb	r3, [r7, #19]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10c      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bf6:	4904      	ldr	r1, [pc, #16]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bfe:	e009      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c00:	7cfb      	ldrb	r3, [r7, #19]
 8002c02:	74bb      	strb	r3, [r7, #18]
 8002c04:	e006      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002c06:	bf00      	nop
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c10:	7cfb      	ldrb	r3, [r7, #19]
 8002c12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c14:	7c7b      	ldrb	r3, [r7, #17]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d105      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c1a:	4b9e      	ldr	r3, [pc, #632]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1e:	4a9d      	ldr	r2, [pc, #628]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c32:	4b98      	ldr	r3, [pc, #608]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c38:	f023 0203 	bic.w	r2, r3, #3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c40:	4994      	ldr	r1, [pc, #592]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c54:	4b8f      	ldr	r3, [pc, #572]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5a:	f023 020c 	bic.w	r2, r3, #12
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c62:	498c      	ldr	r1, [pc, #560]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c76:	4b87      	ldr	r3, [pc, #540]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	4983      	ldr	r1, [pc, #524]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00a      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c98:	4b7e      	ldr	r3, [pc, #504]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	497b      	ldr	r1, [pc, #492]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cba:	4b76      	ldr	r3, [pc, #472]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc8:	4972      	ldr	r1, [pc, #456]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0320 	and.w	r3, r3, #32
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00a      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cdc:	4b6d      	ldr	r3, [pc, #436]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cea:	496a      	ldr	r1, [pc, #424]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cfe:	4b65      	ldr	r3, [pc, #404]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0c:	4961      	ldr	r1, [pc, #388]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d20:	4b5c      	ldr	r3, [pc, #368]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2e:	4959      	ldr	r1, [pc, #356]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d42:	4b54      	ldr	r3, [pc, #336]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d50:	4950      	ldr	r1, [pc, #320]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00a      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d64:	4b4b      	ldr	r3, [pc, #300]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	4948      	ldr	r1, [pc, #288]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00a      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d86:	4b43      	ldr	r3, [pc, #268]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d94:	493f      	ldr	r1, [pc, #252]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d028      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002da8:	4b3a      	ldr	r3, [pc, #232]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002db6:	4937      	ldr	r1, [pc, #220]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dc6:	d106      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dc8:	4b32      	ldr	r3, [pc, #200]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	4a31      	ldr	r2, [pc, #196]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dd2:	60d3      	str	r3, [r2, #12]
 8002dd4:	e011      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dde:	d10c      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3304      	adds	r3, #4
 8002de4:	2101      	movs	r1, #1
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 f8c8 	bl	8002f7c <RCCEx_PLLSAI1_Config>
 8002dec:	4603      	mov	r3, r0
 8002dee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002df0:	7cfb      	ldrb	r3, [r7, #19]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002df6:	7cfb      	ldrb	r3, [r7, #19]
 8002df8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d028      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e06:	4b23      	ldr	r3, [pc, #140]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e14:	491f      	ldr	r1, [pc, #124]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e24:	d106      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e26:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	4a1a      	ldr	r2, [pc, #104]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e30:	60d3      	str	r3, [r2, #12]
 8002e32:	e011      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e3c:	d10c      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3304      	adds	r3, #4
 8002e42:	2101      	movs	r1, #1
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 f899 	bl	8002f7c <RCCEx_PLLSAI1_Config>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e4e:	7cfb      	ldrb	r3, [r7, #19]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002e54:	7cfb      	ldrb	r3, [r7, #19]
 8002e56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d02b      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e72:	4908      	ldr	r1, [pc, #32]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e82:	d109      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e84:	4b03      	ldr	r3, [pc, #12]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	4a02      	ldr	r2, [pc, #8]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e8e:	60d3      	str	r3, [r2, #12]
 8002e90:	e014      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002e92:	bf00      	nop
 8002e94:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 f867 	bl	8002f7c <RCCEx_PLLSAI1_Config>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eb2:	7cfb      	ldrb	r3, [r7, #19]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002eb8:	7cfb      	ldrb	r3, [r7, #19]
 8002eba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d02f      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ec8:	4b2b      	ldr	r3, [pc, #172]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ece:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ed6:	4928      	ldr	r1, [pc, #160]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ee2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ee6:	d10d      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3304      	adds	r3, #4
 8002eec:	2102      	movs	r1, #2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 f844 	bl	8002f7c <RCCEx_PLLSAI1_Config>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ef8:	7cfb      	ldrb	r3, [r7, #19]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d014      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002efe:	7cfb      	ldrb	r3, [r7, #19]
 8002f00:	74bb      	strb	r3, [r7, #18]
 8002f02:	e011      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f0c:	d10c      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3320      	adds	r3, #32
 8002f12:	2102      	movs	r1, #2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 f925 	bl	8003164 <RCCEx_PLLSAI2_Config>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f1e:	7cfb      	ldrb	r3, [r7, #19]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f24:	7cfb      	ldrb	r3, [r7, #19]
 8002f26:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f34:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f42:	490d      	ldr	r1, [pc, #52]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00b      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f56:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f66:	4904      	ldr	r1, [pc, #16]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40021000 	.word	0x40021000

08002f7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f8a:	4b75      	ldr	r3, [pc, #468]	; (8003160 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d018      	beq.n	8002fc8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f96:	4b72      	ldr	r3, [pc, #456]	; (8003160 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f003 0203 	and.w	r2, r3, #3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d10d      	bne.n	8002fc2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
       ||
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d009      	beq.n	8002fc2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002fae:	4b6c      	ldr	r3, [pc, #432]	; (8003160 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	091b      	lsrs	r3, r3, #4
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
       ||
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d047      	beq.n	8003052 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	73fb      	strb	r3, [r7, #15]
 8002fc6:	e044      	b.n	8003052 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d018      	beq.n	8003002 <RCCEx_PLLSAI1_Config+0x86>
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d825      	bhi.n	8003020 <RCCEx_PLLSAI1_Config+0xa4>
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d002      	beq.n	8002fde <RCCEx_PLLSAI1_Config+0x62>
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d009      	beq.n	8002ff0 <RCCEx_PLLSAI1_Config+0x74>
 8002fdc:	e020      	b.n	8003020 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fde:	4b60      	ldr	r3, [pc, #384]	; (8003160 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d11d      	bne.n	8003026 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fee:	e01a      	b.n	8003026 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ff0:	4b5b      	ldr	r3, [pc, #364]	; (8003160 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d116      	bne.n	800302a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003000:	e013      	b.n	800302a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003002:	4b57      	ldr	r3, [pc, #348]	; (8003160 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10f      	bne.n	800302e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800300e:	4b54      	ldr	r3, [pc, #336]	; (8003160 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d109      	bne.n	800302e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800301e:	e006      	b.n	800302e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	73fb      	strb	r3, [r7, #15]
      break;
 8003024:	e004      	b.n	8003030 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003026:	bf00      	nop
 8003028:	e002      	b.n	8003030 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800302a:	bf00      	nop
 800302c:	e000      	b.n	8003030 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800302e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10d      	bne.n	8003052 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003036:	4b4a      	ldr	r3, [pc, #296]	; (8003160 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6819      	ldr	r1, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	3b01      	subs	r3, #1
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	430b      	orrs	r3, r1
 800304c:	4944      	ldr	r1, [pc, #272]	; (8003160 <RCCEx_PLLSAI1_Config+0x1e4>)
 800304e:	4313      	orrs	r3, r2
 8003050:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d17d      	bne.n	8003154 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003058:	4b41      	ldr	r3, [pc, #260]	; (8003160 <RCCEx_PLLSAI1_Config+0x1e4>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a40      	ldr	r2, [pc, #256]	; (8003160 <RCCEx_PLLSAI1_Config+0x1e4>)
 800305e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003062:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003064:	f7fe fb5a 	bl	800171c <HAL_GetTick>
 8003068:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800306a:	e009      	b.n	8003080 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800306c:	f7fe fb56 	bl	800171c <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d902      	bls.n	8003080 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	73fb      	strb	r3, [r7, #15]
        break;
 800307e:	e005      	b.n	800308c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003080:	4b37      	ldr	r3, [pc, #220]	; (8003160 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1ef      	bne.n	800306c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d160      	bne.n	8003154 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d111      	bne.n	80030bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003098:	4b31      	ldr	r3, [pc, #196]	; (8003160 <RCCEx_PLLSAI1_Config+0x1e4>)
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80030a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6892      	ldr	r2, [r2, #8]
 80030a8:	0211      	lsls	r1, r2, #8
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	68d2      	ldr	r2, [r2, #12]
 80030ae:	0912      	lsrs	r2, r2, #4
 80030b0:	0452      	lsls	r2, r2, #17
 80030b2:	430a      	orrs	r2, r1
 80030b4:	492a      	ldr	r1, [pc, #168]	; (8003160 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	610b      	str	r3, [r1, #16]
 80030ba:	e027      	b.n	800310c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d112      	bne.n	80030e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030c2:	4b27      	ldr	r3, [pc, #156]	; (8003160 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6892      	ldr	r2, [r2, #8]
 80030d2:	0211      	lsls	r1, r2, #8
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6912      	ldr	r2, [r2, #16]
 80030d8:	0852      	lsrs	r2, r2, #1
 80030da:	3a01      	subs	r2, #1
 80030dc:	0552      	lsls	r2, r2, #21
 80030de:	430a      	orrs	r2, r1
 80030e0:	491f      	ldr	r1, [pc, #124]	; (8003160 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	610b      	str	r3, [r1, #16]
 80030e6:	e011      	b.n	800310c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030e8:	4b1d      	ldr	r3, [pc, #116]	; (8003160 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6892      	ldr	r2, [r2, #8]
 80030f8:	0211      	lsls	r1, r2, #8
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6952      	ldr	r2, [r2, #20]
 80030fe:	0852      	lsrs	r2, r2, #1
 8003100:	3a01      	subs	r2, #1
 8003102:	0652      	lsls	r2, r2, #25
 8003104:	430a      	orrs	r2, r1
 8003106:	4916      	ldr	r1, [pc, #88]	; (8003160 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003108:	4313      	orrs	r3, r2
 800310a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800310c:	4b14      	ldr	r3, [pc, #80]	; (8003160 <RCCEx_PLLSAI1_Config+0x1e4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a13      	ldr	r2, [pc, #76]	; (8003160 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003112:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003116:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003118:	f7fe fb00 	bl	800171c <HAL_GetTick>
 800311c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800311e:	e009      	b.n	8003134 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003120:	f7fe fafc 	bl	800171c <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d902      	bls.n	8003134 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	73fb      	strb	r3, [r7, #15]
          break;
 8003132:	e005      	b.n	8003140 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003134:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0ef      	beq.n	8003120 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d106      	bne.n	8003154 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003146:	4b06      	ldr	r3, [pc, #24]	; (8003160 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	4904      	ldr	r1, [pc, #16]	; (8003160 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003150:	4313      	orrs	r3, r2
 8003152:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003154:	7bfb      	ldrb	r3, [r7, #15]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40021000 	.word	0x40021000

08003164 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003172:	4b6a      	ldr	r3, [pc, #424]	; (800331c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d018      	beq.n	80031b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800317e:	4b67      	ldr	r3, [pc, #412]	; (800331c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f003 0203 	and.w	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d10d      	bne.n	80031aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
       ||
 8003192:	2b00      	cmp	r3, #0
 8003194:	d009      	beq.n	80031aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003196:	4b61      	ldr	r3, [pc, #388]	; (800331c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	091b      	lsrs	r3, r3, #4
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
       ||
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d047      	beq.n	800323a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	73fb      	strb	r3, [r7, #15]
 80031ae:	e044      	b.n	800323a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d018      	beq.n	80031ea <RCCEx_PLLSAI2_Config+0x86>
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d825      	bhi.n	8003208 <RCCEx_PLLSAI2_Config+0xa4>
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d002      	beq.n	80031c6 <RCCEx_PLLSAI2_Config+0x62>
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d009      	beq.n	80031d8 <RCCEx_PLLSAI2_Config+0x74>
 80031c4:	e020      	b.n	8003208 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031c6:	4b55      	ldr	r3, [pc, #340]	; (800331c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d11d      	bne.n	800320e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031d6:	e01a      	b.n	800320e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031d8:	4b50      	ldr	r3, [pc, #320]	; (800331c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d116      	bne.n	8003212 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031e8:	e013      	b.n	8003212 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031ea:	4b4c      	ldr	r3, [pc, #304]	; (800331c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10f      	bne.n	8003216 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031f6:	4b49      	ldr	r3, [pc, #292]	; (800331c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d109      	bne.n	8003216 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003206:	e006      	b.n	8003216 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	73fb      	strb	r3, [r7, #15]
      break;
 800320c:	e004      	b.n	8003218 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800320e:	bf00      	nop
 8003210:	e002      	b.n	8003218 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003212:	bf00      	nop
 8003214:	e000      	b.n	8003218 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003216:	bf00      	nop
    }

    if(status == HAL_OK)
 8003218:	7bfb      	ldrb	r3, [r7, #15]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10d      	bne.n	800323a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800321e:	4b3f      	ldr	r3, [pc, #252]	; (800331c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6819      	ldr	r1, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	3b01      	subs	r3, #1
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	430b      	orrs	r3, r1
 8003234:	4939      	ldr	r1, [pc, #228]	; (800331c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003236:	4313      	orrs	r3, r2
 8003238:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d167      	bne.n	8003310 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003240:	4b36      	ldr	r3, [pc, #216]	; (800331c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a35      	ldr	r2, [pc, #212]	; (800331c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800324a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800324c:	f7fe fa66 	bl	800171c <HAL_GetTick>
 8003250:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003252:	e009      	b.n	8003268 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003254:	f7fe fa62 	bl	800171c <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d902      	bls.n	8003268 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	73fb      	strb	r3, [r7, #15]
        break;
 8003266:	e005      	b.n	8003274 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003268:	4b2c      	ldr	r3, [pc, #176]	; (800331c <RCCEx_PLLSAI2_Config+0x1b8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1ef      	bne.n	8003254 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d14a      	bne.n	8003310 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d111      	bne.n	80032a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003280:	4b26      	ldr	r3, [pc, #152]	; (800331c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6892      	ldr	r2, [r2, #8]
 8003290:	0211      	lsls	r1, r2, #8
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	68d2      	ldr	r2, [r2, #12]
 8003296:	0912      	lsrs	r2, r2, #4
 8003298:	0452      	lsls	r2, r2, #17
 800329a:	430a      	orrs	r2, r1
 800329c:	491f      	ldr	r1, [pc, #124]	; (800331c <RCCEx_PLLSAI2_Config+0x1b8>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	614b      	str	r3, [r1, #20]
 80032a2:	e011      	b.n	80032c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032a4:	4b1d      	ldr	r3, [pc, #116]	; (800331c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6892      	ldr	r2, [r2, #8]
 80032b4:	0211      	lsls	r1, r2, #8
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6912      	ldr	r2, [r2, #16]
 80032ba:	0852      	lsrs	r2, r2, #1
 80032bc:	3a01      	subs	r2, #1
 80032be:	0652      	lsls	r2, r2, #25
 80032c0:	430a      	orrs	r2, r1
 80032c2:	4916      	ldr	r1, [pc, #88]	; (800331c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80032c8:	4b14      	ldr	r3, [pc, #80]	; (800331c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a13      	ldr	r2, [pc, #76]	; (800331c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d4:	f7fe fa22 	bl	800171c <HAL_GetTick>
 80032d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032da:	e009      	b.n	80032f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032dc:	f7fe fa1e 	bl	800171c <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d902      	bls.n	80032f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	73fb      	strb	r3, [r7, #15]
          break;
 80032ee:	e005      	b.n	80032fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032f0:	4b0a      	ldr	r3, [pc, #40]	; (800331c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0ef      	beq.n	80032dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d106      	bne.n	8003310 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003302:	4b06      	ldr	r3, [pc, #24]	; (800331c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	4904      	ldr	r1, [pc, #16]	; (800331c <RCCEx_PLLSAI2_Config+0x1b8>)
 800330c:	4313      	orrs	r3, r2
 800330e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003310:	7bfb      	ldrb	r3, [r7, #15]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40021000 	.word	0x40021000

08003320 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e049      	b.n	80033c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f841 	bl	80033ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3304      	adds	r3, #4
 800335c:	4619      	mov	r1, r3
 800335e:	4610      	mov	r0, r2
 8003360:	f000 f9f8 	bl	8003754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
	...

080033e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d001      	beq.n	80033fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e04f      	b.n	800349c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0201 	orr.w	r2, r2, #1
 8003412:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a23      	ldr	r2, [pc, #140]	; (80034a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d01d      	beq.n	800345a <HAL_TIM_Base_Start_IT+0x76>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003426:	d018      	beq.n	800345a <HAL_TIM_Base_Start_IT+0x76>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1f      	ldr	r2, [pc, #124]	; (80034ac <HAL_TIM_Base_Start_IT+0xc8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d013      	beq.n	800345a <HAL_TIM_Base_Start_IT+0x76>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a1e      	ldr	r2, [pc, #120]	; (80034b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00e      	beq.n	800345a <HAL_TIM_Base_Start_IT+0x76>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1c      	ldr	r2, [pc, #112]	; (80034b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d009      	beq.n	800345a <HAL_TIM_Base_Start_IT+0x76>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a1b      	ldr	r2, [pc, #108]	; (80034b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d004      	beq.n	800345a <HAL_TIM_Base_Start_IT+0x76>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a19      	ldr	r2, [pc, #100]	; (80034bc <HAL_TIM_Base_Start_IT+0xd8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d115      	bne.n	8003486 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	4b17      	ldr	r3, [pc, #92]	; (80034c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003462:	4013      	ands	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b06      	cmp	r3, #6
 800346a:	d015      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0xb4>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003472:	d011      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003484:	e008      	b.n	8003498 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f042 0201 	orr.w	r2, r2, #1
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	e000      	b.n	800349a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003498:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	40012c00 	.word	0x40012c00
 80034ac:	40000400 	.word	0x40000400
 80034b0:	40000800 	.word	0x40000800
 80034b4:	40000c00 	.word	0x40000c00
 80034b8:	40013400 	.word	0x40013400
 80034bc:	40014000 	.word	0x40014000
 80034c0:	00010007 	.word	0x00010007

080034c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d122      	bne.n	8003520 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d11b      	bne.n	8003520 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0202 	mvn.w	r2, #2
 80034f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f905 	bl	8003716 <HAL_TIM_IC_CaptureCallback>
 800350c:	e005      	b.n	800351a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f8f7 	bl	8003702 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f908 	bl	800372a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b04      	cmp	r3, #4
 800352c:	d122      	bne.n	8003574 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b04      	cmp	r3, #4
 800353a:	d11b      	bne.n	8003574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f06f 0204 	mvn.w	r2, #4
 8003544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2202      	movs	r2, #2
 800354a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f8db 	bl	8003716 <HAL_TIM_IC_CaptureCallback>
 8003560:	e005      	b.n	800356e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f8cd 	bl	8003702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f8de 	bl	800372a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b08      	cmp	r3, #8
 8003580:	d122      	bne.n	80035c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f003 0308 	and.w	r3, r3, #8
 800358c:	2b08      	cmp	r3, #8
 800358e:	d11b      	bne.n	80035c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0208 	mvn.w	r2, #8
 8003598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2204      	movs	r2, #4
 800359e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f8b1 	bl	8003716 <HAL_TIM_IC_CaptureCallback>
 80035b4:	e005      	b.n	80035c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f8a3 	bl	8003702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f8b4 	bl	800372a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	2b10      	cmp	r3, #16
 80035d4:	d122      	bne.n	800361c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f003 0310 	and.w	r3, r3, #16
 80035e0:	2b10      	cmp	r3, #16
 80035e2:	d11b      	bne.n	800361c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f06f 0210 	mvn.w	r2, #16
 80035ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2208      	movs	r2, #8
 80035f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f887 	bl	8003716 <HAL_TIM_IC_CaptureCallback>
 8003608:	e005      	b.n	8003616 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f879 	bl	8003702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f88a 	bl	800372a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b01      	cmp	r3, #1
 8003628:	d10e      	bne.n	8003648 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b01      	cmp	r3, #1
 8003636:	d107      	bne.n	8003648 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f06f 0201 	mvn.w	r2, #1
 8003640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fd fe1a 	bl	800127c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003652:	2b80      	cmp	r3, #128	; 0x80
 8003654:	d10e      	bne.n	8003674 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003660:	2b80      	cmp	r3, #128	; 0x80
 8003662:	d107      	bne.n	8003674 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800366c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f914 	bl	800389c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003682:	d10e      	bne.n	80036a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368e:	2b80      	cmp	r3, #128	; 0x80
 8003690:	d107      	bne.n	80036a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800369a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f907 	bl	80038b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ac:	2b40      	cmp	r3, #64	; 0x40
 80036ae:	d10e      	bne.n	80036ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ba:	2b40      	cmp	r3, #64	; 0x40
 80036bc:	d107      	bne.n	80036ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f838 	bl	800373e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d10e      	bne.n	80036fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	d107      	bne.n	80036fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f06f 0220 	mvn.w	r2, #32
 80036f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f8c7 	bl	8003888 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
	...

08003754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a40      	ldr	r2, [pc, #256]	; (8003868 <TIM_Base_SetConfig+0x114>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d013      	beq.n	8003794 <TIM_Base_SetConfig+0x40>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003772:	d00f      	beq.n	8003794 <TIM_Base_SetConfig+0x40>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a3d      	ldr	r2, [pc, #244]	; (800386c <TIM_Base_SetConfig+0x118>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d00b      	beq.n	8003794 <TIM_Base_SetConfig+0x40>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a3c      	ldr	r2, [pc, #240]	; (8003870 <TIM_Base_SetConfig+0x11c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d007      	beq.n	8003794 <TIM_Base_SetConfig+0x40>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a3b      	ldr	r2, [pc, #236]	; (8003874 <TIM_Base_SetConfig+0x120>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d003      	beq.n	8003794 <TIM_Base_SetConfig+0x40>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a3a      	ldr	r2, [pc, #232]	; (8003878 <TIM_Base_SetConfig+0x124>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d108      	bne.n	80037a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800379a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a2f      	ldr	r2, [pc, #188]	; (8003868 <TIM_Base_SetConfig+0x114>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d01f      	beq.n	80037ee <TIM_Base_SetConfig+0x9a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b4:	d01b      	beq.n	80037ee <TIM_Base_SetConfig+0x9a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a2c      	ldr	r2, [pc, #176]	; (800386c <TIM_Base_SetConfig+0x118>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d017      	beq.n	80037ee <TIM_Base_SetConfig+0x9a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a2b      	ldr	r2, [pc, #172]	; (8003870 <TIM_Base_SetConfig+0x11c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d013      	beq.n	80037ee <TIM_Base_SetConfig+0x9a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a2a      	ldr	r2, [pc, #168]	; (8003874 <TIM_Base_SetConfig+0x120>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00f      	beq.n	80037ee <TIM_Base_SetConfig+0x9a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a29      	ldr	r2, [pc, #164]	; (8003878 <TIM_Base_SetConfig+0x124>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00b      	beq.n	80037ee <TIM_Base_SetConfig+0x9a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a28      	ldr	r2, [pc, #160]	; (800387c <TIM_Base_SetConfig+0x128>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d007      	beq.n	80037ee <TIM_Base_SetConfig+0x9a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a27      	ldr	r2, [pc, #156]	; (8003880 <TIM_Base_SetConfig+0x12c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d003      	beq.n	80037ee <TIM_Base_SetConfig+0x9a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a26      	ldr	r2, [pc, #152]	; (8003884 <TIM_Base_SetConfig+0x130>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d108      	bne.n	8003800 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a10      	ldr	r2, [pc, #64]	; (8003868 <TIM_Base_SetConfig+0x114>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d00f      	beq.n	800384c <TIM_Base_SetConfig+0xf8>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a12      	ldr	r2, [pc, #72]	; (8003878 <TIM_Base_SetConfig+0x124>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00b      	beq.n	800384c <TIM_Base_SetConfig+0xf8>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a11      	ldr	r2, [pc, #68]	; (800387c <TIM_Base_SetConfig+0x128>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d007      	beq.n	800384c <TIM_Base_SetConfig+0xf8>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a10      	ldr	r2, [pc, #64]	; (8003880 <TIM_Base_SetConfig+0x12c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d003      	beq.n	800384c <TIM_Base_SetConfig+0xf8>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a0f      	ldr	r2, [pc, #60]	; (8003884 <TIM_Base_SetConfig+0x130>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d103      	bne.n	8003854 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	615a      	str	r2, [r3, #20]
}
 800385a:	bf00      	nop
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40012c00 	.word	0x40012c00
 800386c:	40000400 	.word	0x40000400
 8003870:	40000800 	.word	0x40000800
 8003874:	40000c00 	.word	0x40000c00
 8003878:	40013400 	.word	0x40013400
 800387c:	40014000 	.word	0x40014000
 8003880:	40014400 	.word	0x40014400
 8003884:	40014800 	.word	0x40014800

08003888 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e040      	b.n	8003958 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fd fd08 	bl	80012fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2224      	movs	r2, #36	; 0x24
 80038f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0201 	bic.w	r2, r2, #1
 8003900:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f82c 	bl	8003960 <UART_SetConfig>
 8003908:	4603      	mov	r3, r0
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e022      	b.n	8003958 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 fad8 	bl	8003ed0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800392e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800393e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0201 	orr.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 fb5f 	bl	8004014 <UART_CheckIdleState>
 8003956:	4603      	mov	r3, r0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003964:	b08a      	sub	sp, #40	; 0x28
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	431a      	orrs	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	431a      	orrs	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	4313      	orrs	r3, r2
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	4ba4      	ldr	r3, [pc, #656]	; (8003c20 <UART_SetConfig+0x2c0>)
 8003990:	4013      	ands	r3, r2
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	6812      	ldr	r2, [r2, #0]
 8003996:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003998:	430b      	orrs	r3, r1
 800399a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	68da      	ldr	r2, [r3, #12]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a99      	ldr	r2, [pc, #612]	; (8003c24 <UART_SetConfig+0x2c4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d004      	beq.n	80039cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c8:	4313      	orrs	r3, r2
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039dc:	430a      	orrs	r2, r1
 80039de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a90      	ldr	r2, [pc, #576]	; (8003c28 <UART_SetConfig+0x2c8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d126      	bne.n	8003a38 <UART_SetConfig+0xd8>
 80039ea:	4b90      	ldr	r3, [pc, #576]	; (8003c2c <UART_SetConfig+0x2cc>)
 80039ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f0:	f003 0303 	and.w	r3, r3, #3
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d81b      	bhi.n	8003a30 <UART_SetConfig+0xd0>
 80039f8:	a201      	add	r2, pc, #4	; (adr r2, 8003a00 <UART_SetConfig+0xa0>)
 80039fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fe:	bf00      	nop
 8003a00:	08003a11 	.word	0x08003a11
 8003a04:	08003a21 	.word	0x08003a21
 8003a08:	08003a19 	.word	0x08003a19
 8003a0c:	08003a29 	.word	0x08003a29
 8003a10:	2301      	movs	r3, #1
 8003a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a16:	e116      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a1e:	e112      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003a20:	2304      	movs	r3, #4
 8003a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a26:	e10e      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003a28:	2308      	movs	r3, #8
 8003a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a2e:	e10a      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003a30:	2310      	movs	r3, #16
 8003a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a36:	e106      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a7c      	ldr	r2, [pc, #496]	; (8003c30 <UART_SetConfig+0x2d0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d138      	bne.n	8003ab4 <UART_SetConfig+0x154>
 8003a42:	4b7a      	ldr	r3, [pc, #488]	; (8003c2c <UART_SetConfig+0x2cc>)
 8003a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a48:	f003 030c 	and.w	r3, r3, #12
 8003a4c:	2b0c      	cmp	r3, #12
 8003a4e:	d82d      	bhi.n	8003aac <UART_SetConfig+0x14c>
 8003a50:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <UART_SetConfig+0xf8>)
 8003a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a56:	bf00      	nop
 8003a58:	08003a8d 	.word	0x08003a8d
 8003a5c:	08003aad 	.word	0x08003aad
 8003a60:	08003aad 	.word	0x08003aad
 8003a64:	08003aad 	.word	0x08003aad
 8003a68:	08003a9d 	.word	0x08003a9d
 8003a6c:	08003aad 	.word	0x08003aad
 8003a70:	08003aad 	.word	0x08003aad
 8003a74:	08003aad 	.word	0x08003aad
 8003a78:	08003a95 	.word	0x08003a95
 8003a7c:	08003aad 	.word	0x08003aad
 8003a80:	08003aad 	.word	0x08003aad
 8003a84:	08003aad 	.word	0x08003aad
 8003a88:	08003aa5 	.word	0x08003aa5
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a92:	e0d8      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003a94:	2302      	movs	r3, #2
 8003a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9a:	e0d4      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003a9c:	2304      	movs	r3, #4
 8003a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa2:	e0d0      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003aa4:	2308      	movs	r3, #8
 8003aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aaa:	e0cc      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003aac:	2310      	movs	r3, #16
 8003aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab2:	e0c8      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a5e      	ldr	r2, [pc, #376]	; (8003c34 <UART_SetConfig+0x2d4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d125      	bne.n	8003b0a <UART_SetConfig+0x1aa>
 8003abe:	4b5b      	ldr	r3, [pc, #364]	; (8003c2c <UART_SetConfig+0x2cc>)
 8003ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ac8:	2b30      	cmp	r3, #48	; 0x30
 8003aca:	d016      	beq.n	8003afa <UART_SetConfig+0x19a>
 8003acc:	2b30      	cmp	r3, #48	; 0x30
 8003ace:	d818      	bhi.n	8003b02 <UART_SetConfig+0x1a2>
 8003ad0:	2b20      	cmp	r3, #32
 8003ad2:	d00a      	beq.n	8003aea <UART_SetConfig+0x18a>
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	d814      	bhi.n	8003b02 <UART_SetConfig+0x1a2>
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d002      	beq.n	8003ae2 <UART_SetConfig+0x182>
 8003adc:	2b10      	cmp	r3, #16
 8003ade:	d008      	beq.n	8003af2 <UART_SetConfig+0x192>
 8003ae0:	e00f      	b.n	8003b02 <UART_SetConfig+0x1a2>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ae8:	e0ad      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003aea:	2302      	movs	r3, #2
 8003aec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af0:	e0a9      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003af2:	2304      	movs	r3, #4
 8003af4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af8:	e0a5      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003afa:	2308      	movs	r3, #8
 8003afc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b00:	e0a1      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003b02:	2310      	movs	r3, #16
 8003b04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b08:	e09d      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a4a      	ldr	r2, [pc, #296]	; (8003c38 <UART_SetConfig+0x2d8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d125      	bne.n	8003b60 <UART_SetConfig+0x200>
 8003b14:	4b45      	ldr	r3, [pc, #276]	; (8003c2c <UART_SetConfig+0x2cc>)
 8003b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b1e:	2bc0      	cmp	r3, #192	; 0xc0
 8003b20:	d016      	beq.n	8003b50 <UART_SetConfig+0x1f0>
 8003b22:	2bc0      	cmp	r3, #192	; 0xc0
 8003b24:	d818      	bhi.n	8003b58 <UART_SetConfig+0x1f8>
 8003b26:	2b80      	cmp	r3, #128	; 0x80
 8003b28:	d00a      	beq.n	8003b40 <UART_SetConfig+0x1e0>
 8003b2a:	2b80      	cmp	r3, #128	; 0x80
 8003b2c:	d814      	bhi.n	8003b58 <UART_SetConfig+0x1f8>
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <UART_SetConfig+0x1d8>
 8003b32:	2b40      	cmp	r3, #64	; 0x40
 8003b34:	d008      	beq.n	8003b48 <UART_SetConfig+0x1e8>
 8003b36:	e00f      	b.n	8003b58 <UART_SetConfig+0x1f8>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b3e:	e082      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003b40:	2302      	movs	r3, #2
 8003b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b46:	e07e      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003b48:	2304      	movs	r3, #4
 8003b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b4e:	e07a      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003b50:	2308      	movs	r3, #8
 8003b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b56:	e076      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003b58:	2310      	movs	r3, #16
 8003b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b5e:	e072      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a35      	ldr	r2, [pc, #212]	; (8003c3c <UART_SetConfig+0x2dc>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d12a      	bne.n	8003bc0 <UART_SetConfig+0x260>
 8003b6a:	4b30      	ldr	r3, [pc, #192]	; (8003c2c <UART_SetConfig+0x2cc>)
 8003b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b78:	d01a      	beq.n	8003bb0 <UART_SetConfig+0x250>
 8003b7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b7e:	d81b      	bhi.n	8003bb8 <UART_SetConfig+0x258>
 8003b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b84:	d00c      	beq.n	8003ba0 <UART_SetConfig+0x240>
 8003b86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b8a:	d815      	bhi.n	8003bb8 <UART_SetConfig+0x258>
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <UART_SetConfig+0x238>
 8003b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b94:	d008      	beq.n	8003ba8 <UART_SetConfig+0x248>
 8003b96:	e00f      	b.n	8003bb8 <UART_SetConfig+0x258>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b9e:	e052      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ba6:	e04e      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003ba8:	2304      	movs	r3, #4
 8003baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bae:	e04a      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003bb0:	2308      	movs	r3, #8
 8003bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bb6:	e046      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003bb8:	2310      	movs	r3, #16
 8003bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bbe:	e042      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a17      	ldr	r2, [pc, #92]	; (8003c24 <UART_SetConfig+0x2c4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d13a      	bne.n	8003c40 <UART_SetConfig+0x2e0>
 8003bca:	4b18      	ldr	r3, [pc, #96]	; (8003c2c <UART_SetConfig+0x2cc>)
 8003bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bd8:	d01a      	beq.n	8003c10 <UART_SetConfig+0x2b0>
 8003bda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bde:	d81b      	bhi.n	8003c18 <UART_SetConfig+0x2b8>
 8003be0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003be4:	d00c      	beq.n	8003c00 <UART_SetConfig+0x2a0>
 8003be6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bea:	d815      	bhi.n	8003c18 <UART_SetConfig+0x2b8>
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <UART_SetConfig+0x298>
 8003bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf4:	d008      	beq.n	8003c08 <UART_SetConfig+0x2a8>
 8003bf6:	e00f      	b.n	8003c18 <UART_SetConfig+0x2b8>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bfe:	e022      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003c00:	2302      	movs	r3, #2
 8003c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c06:	e01e      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003c08:	2304      	movs	r3, #4
 8003c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c0e:	e01a      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003c10:	2308      	movs	r3, #8
 8003c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c16:	e016      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003c18:	2310      	movs	r3, #16
 8003c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c1e:	e012      	b.n	8003c46 <UART_SetConfig+0x2e6>
 8003c20:	efff69f3 	.word	0xefff69f3
 8003c24:	40008000 	.word	0x40008000
 8003c28:	40013800 	.word	0x40013800
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	40004400 	.word	0x40004400
 8003c34:	40004800 	.word	0x40004800
 8003c38:	40004c00 	.word	0x40004c00
 8003c3c:	40005000 	.word	0x40005000
 8003c40:	2310      	movs	r3, #16
 8003c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a9f      	ldr	r2, [pc, #636]	; (8003ec8 <UART_SetConfig+0x568>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d17a      	bne.n	8003d46 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d824      	bhi.n	8003ca2 <UART_SetConfig+0x342>
 8003c58:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <UART_SetConfig+0x300>)
 8003c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5e:	bf00      	nop
 8003c60:	08003c85 	.word	0x08003c85
 8003c64:	08003ca3 	.word	0x08003ca3
 8003c68:	08003c8d 	.word	0x08003c8d
 8003c6c:	08003ca3 	.word	0x08003ca3
 8003c70:	08003c93 	.word	0x08003c93
 8003c74:	08003ca3 	.word	0x08003ca3
 8003c78:	08003ca3 	.word	0x08003ca3
 8003c7c:	08003ca3 	.word	0x08003ca3
 8003c80:	08003c9b 	.word	0x08003c9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c84:	f7fe fdd2 	bl	800282c <HAL_RCC_GetPCLK1Freq>
 8003c88:	61f8      	str	r0, [r7, #28]
        break;
 8003c8a:	e010      	b.n	8003cae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c8c:	4b8f      	ldr	r3, [pc, #572]	; (8003ecc <UART_SetConfig+0x56c>)
 8003c8e:	61fb      	str	r3, [r7, #28]
        break;
 8003c90:	e00d      	b.n	8003cae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c92:	f7fe fd33 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 8003c96:	61f8      	str	r0, [r7, #28]
        break;
 8003c98:	e009      	b.n	8003cae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c9e:	61fb      	str	r3, [r7, #28]
        break;
 8003ca0:	e005      	b.n	8003cae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80fb 	beq.w	8003eac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	4413      	add	r3, r2
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d305      	bcc.n	8003cd2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ccc:	69fa      	ldr	r2, [r7, #28]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d903      	bls.n	8003cda <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003cd8:	e0e8      	b.n	8003eac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	461c      	mov	r4, r3
 8003ce0:	4615      	mov	r5, r2
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	022b      	lsls	r3, r5, #8
 8003cec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003cf0:	0222      	lsls	r2, r4, #8
 8003cf2:	68f9      	ldr	r1, [r7, #12]
 8003cf4:	6849      	ldr	r1, [r1, #4]
 8003cf6:	0849      	lsrs	r1, r1, #1
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	4688      	mov	r8, r1
 8003cfc:	4681      	mov	r9, r0
 8003cfe:	eb12 0a08 	adds.w	sl, r2, r8
 8003d02:	eb43 0b09 	adc.w	fp, r3, r9
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	603b      	str	r3, [r7, #0]
 8003d0e:	607a      	str	r2, [r7, #4]
 8003d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d14:	4650      	mov	r0, sl
 8003d16:	4659      	mov	r1, fp
 8003d18:	f7fc ff46 	bl	8000ba8 <__aeabi_uldivmod>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4613      	mov	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d2a:	d308      	bcc.n	8003d3e <UART_SetConfig+0x3de>
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d32:	d204      	bcs.n	8003d3e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	60da      	str	r2, [r3, #12]
 8003d3c:	e0b6      	b.n	8003eac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d44:	e0b2      	b.n	8003eac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d4e:	d15e      	bne.n	8003e0e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003d50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d828      	bhi.n	8003daa <UART_SetConfig+0x44a>
 8003d58:	a201      	add	r2, pc, #4	; (adr r2, 8003d60 <UART_SetConfig+0x400>)
 8003d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5e:	bf00      	nop
 8003d60:	08003d85 	.word	0x08003d85
 8003d64:	08003d8d 	.word	0x08003d8d
 8003d68:	08003d95 	.word	0x08003d95
 8003d6c:	08003dab 	.word	0x08003dab
 8003d70:	08003d9b 	.word	0x08003d9b
 8003d74:	08003dab 	.word	0x08003dab
 8003d78:	08003dab 	.word	0x08003dab
 8003d7c:	08003dab 	.word	0x08003dab
 8003d80:	08003da3 	.word	0x08003da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d84:	f7fe fd52 	bl	800282c <HAL_RCC_GetPCLK1Freq>
 8003d88:	61f8      	str	r0, [r7, #28]
        break;
 8003d8a:	e014      	b.n	8003db6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d8c:	f7fe fd64 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 8003d90:	61f8      	str	r0, [r7, #28]
        break;
 8003d92:	e010      	b.n	8003db6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d94:	4b4d      	ldr	r3, [pc, #308]	; (8003ecc <UART_SetConfig+0x56c>)
 8003d96:	61fb      	str	r3, [r7, #28]
        break;
 8003d98:	e00d      	b.n	8003db6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d9a:	f7fe fcaf 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 8003d9e:	61f8      	str	r0, [r7, #28]
        break;
 8003da0:	e009      	b.n	8003db6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003da6:	61fb      	str	r3, [r7, #28]
        break;
 8003da8:	e005      	b.n	8003db6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003db4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d077      	beq.n	8003eac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	005a      	lsls	r2, r3, #1
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	085b      	lsrs	r3, r3, #1
 8003dc6:	441a      	add	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	2b0f      	cmp	r3, #15
 8003dd6:	d916      	bls.n	8003e06 <UART_SetConfig+0x4a6>
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dde:	d212      	bcs.n	8003e06 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	f023 030f 	bic.w	r3, r3, #15
 8003de8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	085b      	lsrs	r3, r3, #1
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	8afb      	ldrh	r3, [r7, #22]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	8afa      	ldrh	r2, [r7, #22]
 8003e02:	60da      	str	r2, [r3, #12]
 8003e04:	e052      	b.n	8003eac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e0c:	e04e      	b.n	8003eac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d827      	bhi.n	8003e66 <UART_SetConfig+0x506>
 8003e16:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <UART_SetConfig+0x4bc>)
 8003e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1c:	08003e41 	.word	0x08003e41
 8003e20:	08003e49 	.word	0x08003e49
 8003e24:	08003e51 	.word	0x08003e51
 8003e28:	08003e67 	.word	0x08003e67
 8003e2c:	08003e57 	.word	0x08003e57
 8003e30:	08003e67 	.word	0x08003e67
 8003e34:	08003e67 	.word	0x08003e67
 8003e38:	08003e67 	.word	0x08003e67
 8003e3c:	08003e5f 	.word	0x08003e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e40:	f7fe fcf4 	bl	800282c <HAL_RCC_GetPCLK1Freq>
 8003e44:	61f8      	str	r0, [r7, #28]
        break;
 8003e46:	e014      	b.n	8003e72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e48:	f7fe fd06 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 8003e4c:	61f8      	str	r0, [r7, #28]
        break;
 8003e4e:	e010      	b.n	8003e72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e50:	4b1e      	ldr	r3, [pc, #120]	; (8003ecc <UART_SetConfig+0x56c>)
 8003e52:	61fb      	str	r3, [r7, #28]
        break;
 8003e54:	e00d      	b.n	8003e72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e56:	f7fe fc51 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 8003e5a:	61f8      	str	r0, [r7, #28]
        break;
 8003e5c:	e009      	b.n	8003e72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e62:	61fb      	str	r3, [r7, #28]
        break;
 8003e64:	e005      	b.n	8003e72 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e70:	bf00      	nop
    }

    if (pclk != 0U)
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d019      	beq.n	8003eac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	085a      	lsrs	r2, r3, #1
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	441a      	add	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	2b0f      	cmp	r3, #15
 8003e90:	d909      	bls.n	8003ea6 <UART_SetConfig+0x546>
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e98:	d205      	bcs.n	8003ea6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60da      	str	r2, [r3, #12]
 8003ea4:	e002      	b.n	8003eac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003eb8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3728      	adds	r7, #40	; 0x28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40008000 	.word	0x40008000
 8003ecc:	00f42400 	.word	0x00f42400

08003ed0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01a      	beq.n	8003fe6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fce:	d10a      	bne.n	8003fe6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	605a      	str	r2, [r3, #4]
  }
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af02      	add	r7, sp, #8
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004024:	f7fd fb7a 	bl	800171c <HAL_GetTick>
 8004028:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b08      	cmp	r3, #8
 8004036:	d10e      	bne.n	8004056 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004038:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f82d 	bl	80040a6 <UART_WaitOnFlagUntilTimeout>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e023      	b.n	800409e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b04      	cmp	r3, #4
 8004062:	d10e      	bne.n	8004082 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004064:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f817 	bl	80040a6 <UART_WaitOnFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e00d      	b.n	800409e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2220      	movs	r2, #32
 8004086:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b09c      	sub	sp, #112	; 0x70
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	603b      	str	r3, [r7, #0]
 80040b2:	4613      	mov	r3, r2
 80040b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040b6:	e0a5      	b.n	8004204 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040be:	f000 80a1 	beq.w	8004204 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c2:	f7fd fb2b 	bl	800171c <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d302      	bcc.n	80040d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80040d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d13e      	bne.n	8004156 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040e0:	e853 3f00 	ldrex	r3, [r3]
 80040e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80040e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040ec:	667b      	str	r3, [r7, #100]	; 0x64
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80040fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040fe:	e841 2300 	strex	r3, r2, [r1]
 8004102:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1e6      	bne.n	80040d8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3308      	adds	r3, #8
 8004110:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004114:	e853 3f00 	ldrex	r3, [r3]
 8004118:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800411a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411c:	f023 0301 	bic.w	r3, r3, #1
 8004120:	663b      	str	r3, [r7, #96]	; 0x60
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3308      	adds	r3, #8
 8004128:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800412a:	64ba      	str	r2, [r7, #72]	; 0x48
 800412c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004130:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004132:	e841 2300 	strex	r3, r2, [r1]
 8004136:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1e5      	bne.n	800410a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2220      	movs	r2, #32
 8004142:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2220      	movs	r2, #32
 8004148:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e067      	b.n	8004226 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d04f      	beq.n	8004204 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800416e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004172:	d147      	bne.n	8004204 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800417c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004186:	e853 3f00 	ldrex	r3, [r3]
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004192:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	461a      	mov	r2, r3
 800419a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419c:	637b      	str	r3, [r7, #52]	; 0x34
 800419e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041a4:	e841 2300 	strex	r3, r2, [r1]
 80041a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1e6      	bne.n	800417e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3308      	adds	r3, #8
 80041b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	e853 3f00 	ldrex	r3, [r3]
 80041be:	613b      	str	r3, [r7, #16]
   return(result);
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f023 0301 	bic.w	r3, r3, #1
 80041c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3308      	adds	r3, #8
 80041ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041d0:	623a      	str	r2, [r7, #32]
 80041d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d4:	69f9      	ldr	r1, [r7, #28]
 80041d6:	6a3a      	ldr	r2, [r7, #32]
 80041d8:	e841 2300 	strex	r3, r2, [r1]
 80041dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e5      	bne.n	80041b0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2220      	movs	r2, #32
 80041ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e010      	b.n	8004226 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69da      	ldr	r2, [r3, #28]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	4013      	ands	r3, r2
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	429a      	cmp	r2, r3
 8004212:	bf0c      	ite	eq
 8004214:	2301      	moveq	r3, #1
 8004216:	2300      	movne	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	461a      	mov	r2, r3
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	429a      	cmp	r2, r3
 8004220:	f43f af4a 	beq.w	80040b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3770      	adds	r7, #112	; 0x70
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <__NVIC_SetPriority>:
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	6039      	str	r1, [r7, #0]
 800423a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800423c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004240:	2b00      	cmp	r3, #0
 8004242:	db0a      	blt.n	800425a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	b2da      	uxtb	r2, r3
 8004248:	490c      	ldr	r1, [pc, #48]	; (800427c <__NVIC_SetPriority+0x4c>)
 800424a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424e:	0112      	lsls	r2, r2, #4
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	440b      	add	r3, r1
 8004254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004258:	e00a      	b.n	8004270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	b2da      	uxtb	r2, r3
 800425e:	4908      	ldr	r1, [pc, #32]	; (8004280 <__NVIC_SetPriority+0x50>)
 8004260:	79fb      	ldrb	r3, [r7, #7]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	3b04      	subs	r3, #4
 8004268:	0112      	lsls	r2, r2, #4
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	440b      	add	r3, r1
 800426e:	761a      	strb	r2, [r3, #24]
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	e000e100 	.word	0xe000e100
 8004280:	e000ed00 	.word	0xe000ed00

08004284 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004288:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <SysTick_Handler+0x1c>)
 800428a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800428c:	f001 ff20 	bl	80060d0 <xTaskGetSchedulerState>
 8004290:	4603      	mov	r3, r0
 8004292:	2b01      	cmp	r3, #1
 8004294:	d001      	beq.n	800429a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004296:	f002 fd07 	bl	8006ca8 <xPortSysTickHandler>
  }
}
 800429a:	bf00      	nop
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	e000e010 	.word	0xe000e010

080042a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80042a8:	2100      	movs	r1, #0
 80042aa:	f06f 0004 	mvn.w	r0, #4
 80042ae:	f7ff ffbf 	bl	8004230 <__NVIC_SetPriority>
#endif
}
 80042b2:	bf00      	nop
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042be:	f3ef 8305 	mrs	r3, IPSR
 80042c2:	603b      	str	r3, [r7, #0]
  return(result);
 80042c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80042ca:	f06f 0305 	mvn.w	r3, #5
 80042ce:	607b      	str	r3, [r7, #4]
 80042d0:	e00c      	b.n	80042ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80042d2:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <osKernelInitialize+0x44>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d105      	bne.n	80042e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80042da:	4b08      	ldr	r3, [pc, #32]	; (80042fc <osKernelInitialize+0x44>)
 80042dc:	2201      	movs	r2, #1
 80042de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	607b      	str	r3, [r7, #4]
 80042e4:	e002      	b.n	80042ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80042e6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80042ec:	687b      	ldr	r3, [r7, #4]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	200002e8 	.word	0x200002e8

08004300 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004306:	f3ef 8305 	mrs	r3, IPSR
 800430a:	603b      	str	r3, [r7, #0]
  return(result);
 800430c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004312:	f06f 0305 	mvn.w	r3, #5
 8004316:	607b      	str	r3, [r7, #4]
 8004318:	e010      	b.n	800433c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800431a:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <osKernelStart+0x48>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d109      	bne.n	8004336 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004322:	f7ff ffbf 	bl	80042a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004326:	4b08      	ldr	r3, [pc, #32]	; (8004348 <osKernelStart+0x48>)
 8004328:	2202      	movs	r2, #2
 800432a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800432c:	f001 fa74 	bl	8005818 <vTaskStartScheduler>
      stat = osOK;
 8004330:	2300      	movs	r3, #0
 8004332:	607b      	str	r3, [r7, #4]
 8004334:	e002      	b.n	800433c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004336:	f04f 33ff 	mov.w	r3, #4294967295
 800433a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800433c:	687b      	ldr	r3, [r7, #4]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	200002e8 	.word	0x200002e8

0800434c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800434c:	b580      	push	{r7, lr}
 800434e:	b08e      	sub	sp, #56	; 0x38
 8004350:	af04      	add	r7, sp, #16
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004358:	2300      	movs	r3, #0
 800435a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800435c:	f3ef 8305 	mrs	r3, IPSR
 8004360:	617b      	str	r3, [r7, #20]
  return(result);
 8004362:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004364:	2b00      	cmp	r3, #0
 8004366:	d17e      	bne.n	8004466 <osThreadNew+0x11a>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d07b      	beq.n	8004466 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800436e:	2380      	movs	r3, #128	; 0x80
 8004370:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004372:	2318      	movs	r3, #24
 8004374:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004376:	2300      	movs	r3, #0
 8004378:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800437a:	f04f 33ff 	mov.w	r3, #4294967295
 800437e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d045      	beq.n	8004412 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <osThreadNew+0x48>
        name = attr->name;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d002      	beq.n	80043a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <osThreadNew+0x6e>
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	2b38      	cmp	r3, #56	; 0x38
 80043ac:	d805      	bhi.n	80043ba <osThreadNew+0x6e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <osThreadNew+0x72>
        return (NULL);
 80043ba:	2300      	movs	r3, #0
 80043bc:	e054      	b.n	8004468 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	089b      	lsrs	r3, r3, #2
 80043cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00e      	beq.n	80043f4 <osThreadNew+0xa8>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	2bbb      	cmp	r3, #187	; 0xbb
 80043dc:	d90a      	bls.n	80043f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d006      	beq.n	80043f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <osThreadNew+0xa8>
        mem = 1;
 80043ee:	2301      	movs	r3, #1
 80043f0:	61bb      	str	r3, [r7, #24]
 80043f2:	e010      	b.n	8004416 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10c      	bne.n	8004416 <osThreadNew+0xca>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d108      	bne.n	8004416 <osThreadNew+0xca>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d104      	bne.n	8004416 <osThreadNew+0xca>
          mem = 0;
 800440c:	2300      	movs	r3, #0
 800440e:	61bb      	str	r3, [r7, #24]
 8004410:	e001      	b.n	8004416 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004412:	2300      	movs	r3, #0
 8004414:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d110      	bne.n	800443e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004424:	9202      	str	r2, [sp, #8]
 8004426:	9301      	str	r3, [sp, #4]
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	6a3a      	ldr	r2, [r7, #32]
 8004430:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f001 f838 	bl	80054a8 <xTaskCreateStatic>
 8004438:	4603      	mov	r3, r0
 800443a:	613b      	str	r3, [r7, #16]
 800443c:	e013      	b.n	8004466 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d110      	bne.n	8004466 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	b29a      	uxth	r2, r3
 8004448:	f107 0310 	add.w	r3, r7, #16
 800444c:	9301      	str	r3, [sp, #4]
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f001 f883 	bl	8005562 <xTaskCreate>
 800445c:	4603      	mov	r3, r0
 800445e:	2b01      	cmp	r3, #1
 8004460:	d001      	beq.n	8004466 <osThreadNew+0x11a>
            hTask = NULL;
 8004462:	2300      	movs	r3, #0
 8004464:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004466:	693b      	ldr	r3, [r7, #16]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3728      	adds	r7, #40	; 0x28
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004470:	b580      	push	{r7, lr}
 8004472:	b08a      	sub	sp, #40	; 0x28
 8004474:	af02      	add	r7, sp, #8
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800447c:	2300      	movs	r3, #0
 800447e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004480:	f3ef 8305 	mrs	r3, IPSR
 8004484:	613b      	str	r3, [r7, #16]
  return(result);
 8004486:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004488:	2b00      	cmp	r3, #0
 800448a:	d15f      	bne.n	800454c <osMessageQueueNew+0xdc>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d05c      	beq.n	800454c <osMessageQueueNew+0xdc>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d059      	beq.n	800454c <osMessageQueueNew+0xdc>
    mem = -1;
 8004498:	f04f 33ff 	mov.w	r3, #4294967295
 800449c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d029      	beq.n	80044f8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d012      	beq.n	80044d2 <osMessageQueueNew+0x62>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	2b4f      	cmp	r3, #79	; 0x4f
 80044b2:	d90e      	bls.n	80044d2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00a      	beq.n	80044d2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	695a      	ldr	r2, [r3, #20]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	68b9      	ldr	r1, [r7, #8]
 80044c4:	fb01 f303 	mul.w	r3, r1, r3
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d302      	bcc.n	80044d2 <osMessageQueueNew+0x62>
        mem = 1;
 80044cc:	2301      	movs	r3, #1
 80044ce:	61bb      	str	r3, [r7, #24]
 80044d0:	e014      	b.n	80044fc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d110      	bne.n	80044fc <osMessageQueueNew+0x8c>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10c      	bne.n	80044fc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d108      	bne.n	80044fc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d104      	bne.n	80044fc <osMessageQueueNew+0x8c>
          mem = 0;
 80044f2:	2300      	movs	r3, #0
 80044f4:	61bb      	str	r3, [r7, #24]
 80044f6:	e001      	b.n	80044fc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80044f8:	2300      	movs	r3, #0
 80044fa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d10b      	bne.n	800451a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691a      	ldr	r2, [r3, #16]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	2100      	movs	r1, #0
 800450c:	9100      	str	r1, [sp, #0]
 800450e:	68b9      	ldr	r1, [r7, #8]
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 fa4f 	bl	80049b4 <xQueueGenericCreateStatic>
 8004516:	61f8      	str	r0, [r7, #28]
 8004518:	e008      	b.n	800452c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d105      	bne.n	800452c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004520:	2200      	movs	r2, #0
 8004522:	68b9      	ldr	r1, [r7, #8]
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 fabd 	bl	8004aa4 <xQueueGenericCreate>
 800452a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00c      	beq.n	800454c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	e001      	b.n	8004544 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004540:	2300      	movs	r3, #0
 8004542:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004544:	6979      	ldr	r1, [r7, #20]
 8004546:	69f8      	ldr	r0, [r7, #28]
 8004548:	f000 ff50 	bl	80053ec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800454c:	69fb      	ldr	r3, [r7, #28]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3720      	adds	r7, #32
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004558:	b580      	push	{r7, lr}
 800455a:	b088      	sub	sp, #32
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	603b      	str	r3, [r7, #0]
 8004564:	4613      	mov	r3, r2
 8004566:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800456c:	2300      	movs	r3, #0
 800456e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004570:	f3ef 8305 	mrs	r3, IPSR
 8004574:	617b      	str	r3, [r7, #20]
  return(result);
 8004576:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004578:	2b00      	cmp	r3, #0
 800457a:	d028      	beq.n	80045ce <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d005      	beq.n	800458e <osMessageQueuePut+0x36>
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <osMessageQueuePut+0x36>
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800458e:	f06f 0303 	mvn.w	r3, #3
 8004592:	61fb      	str	r3, [r7, #28]
 8004594:	e038      	b.n	8004608 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004596:	2300      	movs	r3, #0
 8004598:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800459a:	f107 0210 	add.w	r2, r7, #16
 800459e:	2300      	movs	r3, #0
 80045a0:	68b9      	ldr	r1, [r7, #8]
 80045a2:	69b8      	ldr	r0, [r7, #24]
 80045a4:	f000 fbda 	bl	8004d5c <xQueueGenericSendFromISR>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d003      	beq.n	80045b6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80045ae:	f06f 0302 	mvn.w	r3, #2
 80045b2:	61fb      	str	r3, [r7, #28]
 80045b4:	e028      	b.n	8004608 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d025      	beq.n	8004608 <osMessageQueuePut+0xb0>
 80045bc:	4b15      	ldr	r3, [pc, #84]	; (8004614 <osMessageQueuePut+0xbc>)
 80045be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	e01c      	b.n	8004608 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <osMessageQueuePut+0x82>
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d103      	bne.n	80045e2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80045da:	f06f 0303 	mvn.w	r3, #3
 80045de:	61fb      	str	r3, [r7, #28]
 80045e0:	e012      	b.n	8004608 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80045e2:	2300      	movs	r3, #0
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	69b8      	ldr	r0, [r7, #24]
 80045ea:	f000 fab9 	bl	8004b60 <xQueueGenericSend>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d009      	beq.n	8004608 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80045fa:	f06f 0301 	mvn.w	r3, #1
 80045fe:	61fb      	str	r3, [r7, #28]
 8004600:	e002      	b.n	8004608 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004602:	f06f 0302 	mvn.w	r3, #2
 8004606:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004608:	69fb      	ldr	r3, [r7, #28]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3720      	adds	r7, #32
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	e000ed04 	.word	0xe000ed04

08004618 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004618:	b580      	push	{r7, lr}
 800461a:	b088      	sub	sp, #32
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800462a:	2300      	movs	r3, #0
 800462c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800462e:	f3ef 8305 	mrs	r3, IPSR
 8004632:	617b      	str	r3, [r7, #20]
  return(result);
 8004634:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004636:	2b00      	cmp	r3, #0
 8004638:	d028      	beq.n	800468c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d005      	beq.n	800464c <osMessageQueueGet+0x34>
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <osMessageQueueGet+0x34>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800464c:	f06f 0303 	mvn.w	r3, #3
 8004650:	61fb      	str	r3, [r7, #28]
 8004652:	e037      	b.n	80046c4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004654:	2300      	movs	r3, #0
 8004656:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004658:	f107 0310 	add.w	r3, r7, #16
 800465c:	461a      	mov	r2, r3
 800465e:	68b9      	ldr	r1, [r7, #8]
 8004660:	69b8      	ldr	r0, [r7, #24]
 8004662:	f000 fcf7 	bl	8005054 <xQueueReceiveFromISR>
 8004666:	4603      	mov	r3, r0
 8004668:	2b01      	cmp	r3, #1
 800466a:	d003      	beq.n	8004674 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800466c:	f06f 0302 	mvn.w	r3, #2
 8004670:	61fb      	str	r3, [r7, #28]
 8004672:	e027      	b.n	80046c4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d024      	beq.n	80046c4 <osMessageQueueGet+0xac>
 800467a:	4b15      	ldr	r3, [pc, #84]	; (80046d0 <osMessageQueueGet+0xb8>)
 800467c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	e01b      	b.n	80046c4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <osMessageQueueGet+0x80>
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d103      	bne.n	80046a0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004698:	f06f 0303 	mvn.w	r3, #3
 800469c:	61fb      	str	r3, [r7, #28]
 800469e:	e011      	b.n	80046c4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	68b9      	ldr	r1, [r7, #8]
 80046a4:	69b8      	ldr	r0, [r7, #24]
 80046a6:	f000 fbf5 	bl	8004e94 <xQueueReceive>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d009      	beq.n	80046c4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80046b6:	f06f 0301 	mvn.w	r3, #1
 80046ba:	61fb      	str	r3, [r7, #28]
 80046bc:	e002      	b.n	80046c4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80046be:	f06f 0302 	mvn.w	r3, #2
 80046c2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80046c4:	69fb      	ldr	r3, [r7, #28]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3720      	adds	r7, #32
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	e000ed04 	.word	0xe000ed04

080046d4 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d102      	bne.n	80046ec <osMessageQueueGetCount+0x18>
    count = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	e00e      	b.n	800470a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046ec:	f3ef 8305 	mrs	r3, IPSR
 80046f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80046f2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d004      	beq.n	8004702 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80046f8:	6938      	ldr	r0, [r7, #16]
 80046fa:	f000 fd49 	bl	8005190 <uxQueueMessagesWaitingFromISR>
 80046fe:	6178      	str	r0, [r7, #20]
 8004700:	e003      	b.n	800470a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8004702:	6938      	ldr	r0, [r7, #16]
 8004704:	f000 fd26 	bl	8005154 <uxQueueMessagesWaiting>
 8004708:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800470a:	697b      	ldr	r3, [r7, #20]
}
 800470c:	4618      	mov	r0, r3
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4a07      	ldr	r2, [pc, #28]	; (8004740 <vApplicationGetIdleTaskMemory+0x2c>)
 8004724:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	4a06      	ldr	r2, [pc, #24]	; (8004744 <vApplicationGetIdleTaskMemory+0x30>)
 800472a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2280      	movs	r2, #128	; 0x80
 8004730:	601a      	str	r2, [r3, #0]
}
 8004732:	bf00      	nop
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	200002ec 	.word	0x200002ec
 8004744:	200003a8 	.word	0x200003a8

08004748 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4a07      	ldr	r2, [pc, #28]	; (8004774 <vApplicationGetTimerTaskMemory+0x2c>)
 8004758:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	4a06      	ldr	r2, [pc, #24]	; (8004778 <vApplicationGetTimerTaskMemory+0x30>)
 800475e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004766:	601a      	str	r2, [r3, #0]
}
 8004768:	bf00      	nop
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	200005a8 	.word	0x200005a8
 8004778:	20000664 	.word	0x20000664

0800477c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f103 0208 	add.w	r2, r3, #8
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f04f 32ff 	mov.w	r2, #4294967295
 8004794:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f103 0208 	add.w	r2, r3, #8
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f103 0208 	add.w	r2, r3, #8
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047d6:	b480      	push	{r7}
 80047d8:	b085      	sub	sp, #20
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	601a      	str	r2, [r3, #0]
}
 8004812:	bf00      	nop
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800481e:	b480      	push	{r7}
 8004820:	b085      	sub	sp, #20
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
 8004826:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004834:	d103      	bne.n	800483e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	e00c      	b.n	8004858 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3308      	adds	r3, #8
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	e002      	b.n	800484c <vListInsert+0x2e>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	429a      	cmp	r2, r3
 8004856:	d2f6      	bcs.n	8004846 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	601a      	str	r2, [r3, #0]
}
 8004884:	bf00      	nop
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6892      	ldr	r2, [r2, #8]
 80048a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6852      	ldr	r2, [r2, #4]
 80048b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d103      	bne.n	80048c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	1e5a      	subs	r2, r3, #1
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10a      	bne.n	800490e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fc:	f383 8811 	msr	BASEPRI, r3
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800490a:	bf00      	nop
 800490c:	e7fe      	b.n	800490c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800490e:	f002 f939 	bl	8006b84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491a:	68f9      	ldr	r1, [r7, #12]
 800491c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800491e:	fb01 f303 	mul.w	r3, r1, r3
 8004922:	441a      	add	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493e:	3b01      	subs	r3, #1
 8004940:	68f9      	ldr	r1, [r7, #12]
 8004942:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004944:	fb01 f303 	mul.w	r3, r1, r3
 8004948:	441a      	add	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	22ff      	movs	r2, #255	; 0xff
 8004952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	22ff      	movs	r2, #255	; 0xff
 800495a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d114      	bne.n	800498e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01a      	beq.n	80049a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3310      	adds	r3, #16
 8004970:	4618      	mov	r0, r3
 8004972:	f001 f9eb 	bl	8005d4c <xTaskRemoveFromEventList>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d012      	beq.n	80049a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800497c:	4b0c      	ldr	r3, [pc, #48]	; (80049b0 <xQueueGenericReset+0xcc>)
 800497e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	e009      	b.n	80049a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	3310      	adds	r3, #16
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff fef2 	bl	800477c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	3324      	adds	r3, #36	; 0x24
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff feed 	bl	800477c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80049a2:	f002 f91f 	bl	8006be4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80049a6:	2301      	movs	r3, #1
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	e000ed04 	.word	0xe000ed04

080049b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08e      	sub	sp, #56	; 0x38
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10a      	bne.n	80049de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049da:	bf00      	nop
 80049dc:	e7fe      	b.n	80049dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10a      	bne.n	80049fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80049e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049f6:	bf00      	nop
 80049f8:	e7fe      	b.n	80049f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <xQueueGenericCreateStatic+0x52>
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <xQueueGenericCreateStatic+0x56>
 8004a06:	2301      	movs	r3, #1
 8004a08:	e000      	b.n	8004a0c <xQueueGenericCreateStatic+0x58>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10a      	bne.n	8004a26 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	623b      	str	r3, [r7, #32]
}
 8004a22:	bf00      	nop
 8004a24:	e7fe      	b.n	8004a24 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d102      	bne.n	8004a32 <xQueueGenericCreateStatic+0x7e>
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <xQueueGenericCreateStatic+0x82>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <xQueueGenericCreateStatic+0x84>
 8004a36:	2300      	movs	r3, #0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10a      	bne.n	8004a52 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	61fb      	str	r3, [r7, #28]
}
 8004a4e:	bf00      	nop
 8004a50:	e7fe      	b.n	8004a50 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a52:	2350      	movs	r3, #80	; 0x50
 8004a54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2b50      	cmp	r3, #80	; 0x50
 8004a5a:	d00a      	beq.n	8004a72 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	61bb      	str	r3, [r7, #24]
}
 8004a6e:	bf00      	nop
 8004a70:	e7fe      	b.n	8004a70 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a72:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00d      	beq.n	8004a9a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a86:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	68b9      	ldr	r1, [r7, #8]
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 f83f 	bl	8004b18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3730      	adds	r7, #48	; 0x30
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08a      	sub	sp, #40	; 0x28
 8004aa8:	af02      	add	r7, sp, #8
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10a      	bne.n	8004ace <xQueueGenericCreate+0x2a>
	__asm volatile
 8004ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	613b      	str	r3, [r7, #16]
}
 8004aca:	bf00      	nop
 8004acc:	e7fe      	b.n	8004acc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	fb02 f303 	mul.w	r3, r2, r3
 8004ad6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	3350      	adds	r3, #80	; 0x50
 8004adc:	4618      	mov	r0, r3
 8004ade:	f002 f973 	bl	8006dc8 <pvPortMalloc>
 8004ae2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d011      	beq.n	8004b0e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	3350      	adds	r3, #80	; 0x50
 8004af2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004afc:	79fa      	ldrb	r2, [r7, #7]
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	4613      	mov	r3, r2
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f805 	bl	8004b18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b0e:	69bb      	ldr	r3, [r7, #24]
	}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3720      	adds	r7, #32
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d103      	bne.n	8004b34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	e002      	b.n	8004b3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b46:	2101      	movs	r1, #1
 8004b48:	69b8      	ldr	r0, [r7, #24]
 8004b4a:	f7ff fecb 	bl	80048e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	78fa      	ldrb	r2, [r7, #3]
 8004b52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b56:	bf00      	nop
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b08e      	sub	sp, #56	; 0x38
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10a      	bne.n	8004b92 <xQueueGenericSend+0x32>
	__asm volatile
 8004b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b8e:	bf00      	nop
 8004b90:	e7fe      	b.n	8004b90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d103      	bne.n	8004ba0 <xQueueGenericSend+0x40>
 8004b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <xQueueGenericSend+0x44>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <xQueueGenericSend+0x46>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10a      	bne.n	8004bc0 <xQueueGenericSend+0x60>
	__asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004bbc:	bf00      	nop
 8004bbe:	e7fe      	b.n	8004bbe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d103      	bne.n	8004bce <xQueueGenericSend+0x6e>
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d101      	bne.n	8004bd2 <xQueueGenericSend+0x72>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e000      	b.n	8004bd4 <xQueueGenericSend+0x74>
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10a      	bne.n	8004bee <xQueueGenericSend+0x8e>
	__asm volatile
 8004bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	623b      	str	r3, [r7, #32]
}
 8004bea:	bf00      	nop
 8004bec:	e7fe      	b.n	8004bec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bee:	f001 fa6f 	bl	80060d0 <xTaskGetSchedulerState>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d102      	bne.n	8004bfe <xQueueGenericSend+0x9e>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <xQueueGenericSend+0xa2>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e000      	b.n	8004c04 <xQueueGenericSend+0xa4>
 8004c02:	2300      	movs	r3, #0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10a      	bne.n	8004c1e <xQueueGenericSend+0xbe>
	__asm volatile
 8004c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	61fb      	str	r3, [r7, #28]
}
 8004c1a:	bf00      	nop
 8004c1c:	e7fe      	b.n	8004c1c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c1e:	f001 ffb1 	bl	8006b84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d302      	bcc.n	8004c34 <xQueueGenericSend+0xd4>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d129      	bne.n	8004c88 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c3a:	f000 fac7 	bl	80051cc <prvCopyDataToQueue>
 8004c3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d010      	beq.n	8004c6a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4a:	3324      	adds	r3, #36	; 0x24
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f001 f87d 	bl	8005d4c <xTaskRemoveFromEventList>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d013      	beq.n	8004c80 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c58:	4b3f      	ldr	r3, [pc, #252]	; (8004d58 <xQueueGenericSend+0x1f8>)
 8004c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	e00a      	b.n	8004c80 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d007      	beq.n	8004c80 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c70:	4b39      	ldr	r3, [pc, #228]	; (8004d58 <xQueueGenericSend+0x1f8>)
 8004c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c80:	f001 ffb0 	bl	8006be4 <vPortExitCritical>
				return pdPASS;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e063      	b.n	8004d50 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d103      	bne.n	8004c96 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c8e:	f001 ffa9 	bl	8006be4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	e05c      	b.n	8004d50 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d106      	bne.n	8004caa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c9c:	f107 0314 	add.w	r3, r7, #20
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f001 f8b7 	bl	8005e14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004caa:	f001 ff9b 	bl	8006be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cae:	f000 fe23 	bl	80058f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cb2:	f001 ff67 	bl	8006b84 <vPortEnterCritical>
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cbc:	b25b      	sxtb	r3, r3
 8004cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc2:	d103      	bne.n	8004ccc <xQueueGenericSend+0x16c>
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cd2:	b25b      	sxtb	r3, r3
 8004cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd8:	d103      	bne.n	8004ce2 <xQueueGenericSend+0x182>
 8004cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ce2:	f001 ff7f 	bl	8006be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ce6:	1d3a      	adds	r2, r7, #4
 8004ce8:	f107 0314 	add.w	r3, r7, #20
 8004cec:	4611      	mov	r1, r2
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f001 f8a6 	bl	8005e40 <xTaskCheckForTimeOut>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d124      	bne.n	8004d44 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004cfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cfc:	f000 fb5e 	bl	80053bc <prvIsQueueFull>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d018      	beq.n	8004d38 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d08:	3310      	adds	r3, #16
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 ffcc 	bl	8005cac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d16:	f000 fae9 	bl	80052ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d1a:	f000 fdfb 	bl	8005914 <xTaskResumeAll>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f47f af7c 	bne.w	8004c1e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004d26:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <xQueueGenericSend+0x1f8>)
 8004d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	e772      	b.n	8004c1e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d3a:	f000 fad7 	bl	80052ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d3e:	f000 fde9 	bl	8005914 <xTaskResumeAll>
 8004d42:	e76c      	b.n	8004c1e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d46:	f000 fad1 	bl	80052ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d4a:	f000 fde3 	bl	8005914 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3738      	adds	r7, #56	; 0x38
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	e000ed04 	.word	0xe000ed04

08004d5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b090      	sub	sp, #64	; 0x40
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10a      	bne.n	8004d8a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d78:	f383 8811 	msr	BASEPRI, r3
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d86:	bf00      	nop
 8004d88:	e7fe      	b.n	8004d88 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d103      	bne.n	8004d98 <xQueueGenericSendFromISR+0x3c>
 8004d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <xQueueGenericSendFromISR+0x40>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e000      	b.n	8004d9e <xQueueGenericSendFromISR+0x42>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10a      	bne.n	8004db8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004db4:	bf00      	nop
 8004db6:	e7fe      	b.n	8004db6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d103      	bne.n	8004dc6 <xQueueGenericSendFromISR+0x6a>
 8004dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <xQueueGenericSendFromISR+0x6e>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e000      	b.n	8004dcc <xQueueGenericSendFromISR+0x70>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10a      	bne.n	8004de6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	623b      	str	r3, [r7, #32]
}
 8004de2:	bf00      	nop
 8004de4:	e7fe      	b.n	8004de4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004de6:	f001 ffaf 	bl	8006d48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004dea:	f3ef 8211 	mrs	r2, BASEPRI
 8004dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	61fa      	str	r2, [r7, #28]
 8004e00:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e02:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e04:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d302      	bcc.n	8004e18 <xQueueGenericSendFromISR+0xbc>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d12f      	bne.n	8004e78 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004e2e:	f000 f9cd 	bl	80051cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e32:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3a:	d112      	bne.n	8004e62 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d016      	beq.n	8004e72 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e46:	3324      	adds	r3, #36	; 0x24
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 ff7f 	bl	8005d4c <xTaskRemoveFromEventList>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00e      	beq.n	8004e72 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00b      	beq.n	8004e72 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	e007      	b.n	8004e72 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e66:	3301      	adds	r3, #1
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	b25a      	sxtb	r2, r3
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e72:	2301      	movs	r3, #1
 8004e74:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004e76:	e001      	b.n	8004e7c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e7e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e86:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3740      	adds	r7, #64	; 0x40
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b08c      	sub	sp, #48	; 0x30
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10a      	bne.n	8004ec4 <xQueueReceive+0x30>
	__asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	623b      	str	r3, [r7, #32]
}
 8004ec0:	bf00      	nop
 8004ec2:	e7fe      	b.n	8004ec2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d103      	bne.n	8004ed2 <xQueueReceive+0x3e>
 8004eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <xQueueReceive+0x42>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <xQueueReceive+0x44>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <xQueueReceive+0x5e>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	61fb      	str	r3, [r7, #28]
}
 8004eee:	bf00      	nop
 8004ef0:	e7fe      	b.n	8004ef0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ef2:	f001 f8ed 	bl	80060d0 <xTaskGetSchedulerState>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d102      	bne.n	8004f02 <xQueueReceive+0x6e>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <xQueueReceive+0x72>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <xQueueReceive+0x74>
 8004f06:	2300      	movs	r3, #0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10a      	bne.n	8004f22 <xQueueReceive+0x8e>
	__asm volatile
 8004f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	61bb      	str	r3, [r7, #24]
}
 8004f1e:	bf00      	nop
 8004f20:	e7fe      	b.n	8004f20 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f22:	f001 fe2f 	bl	8006b84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d01f      	beq.n	8004f72 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f32:	68b9      	ldr	r1, [r7, #8]
 8004f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f36:	f000 f9b3 	bl	80052a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	1e5a      	subs	r2, r3, #1
 8004f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00f      	beq.n	8004f6a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4c:	3310      	adds	r3, #16
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fefc 	bl	8005d4c <xTaskRemoveFromEventList>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d007      	beq.n	8004f6a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f5a:	4b3d      	ldr	r3, [pc, #244]	; (8005050 <xQueueReceive+0x1bc>)
 8004f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f6a:	f001 fe3b 	bl	8006be4 <vPortExitCritical>
				return pdPASS;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e069      	b.n	8005046 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d103      	bne.n	8004f80 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f78:	f001 fe34 	bl	8006be4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	e062      	b.n	8005046 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f86:	f107 0310 	add.w	r3, r7, #16
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 ff42 	bl	8005e14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f90:	2301      	movs	r3, #1
 8004f92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f94:	f001 fe26 	bl	8006be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f98:	f000 fcae 	bl	80058f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f9c:	f001 fdf2 	bl	8006b84 <vPortEnterCritical>
 8004fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fa6:	b25b      	sxtb	r3, r3
 8004fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fac:	d103      	bne.n	8004fb6 <xQueueReceive+0x122>
 8004fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fbc:	b25b      	sxtb	r3, r3
 8004fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc2:	d103      	bne.n	8004fcc <xQueueReceive+0x138>
 8004fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fcc:	f001 fe0a 	bl	8006be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fd0:	1d3a      	adds	r2, r7, #4
 8004fd2:	f107 0310 	add.w	r3, r7, #16
 8004fd6:	4611      	mov	r1, r2
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 ff31 	bl	8005e40 <xTaskCheckForTimeOut>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d123      	bne.n	800502c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fe6:	f000 f9d3 	bl	8005390 <prvIsQueueEmpty>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d017      	beq.n	8005020 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff2:	3324      	adds	r3, #36	; 0x24
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 fe57 	bl	8005cac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ffe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005000:	f000 f974 	bl	80052ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005004:	f000 fc86 	bl	8005914 <xTaskResumeAll>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d189      	bne.n	8004f22 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800500e:	4b10      	ldr	r3, [pc, #64]	; (8005050 <xQueueReceive+0x1bc>)
 8005010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	e780      	b.n	8004f22 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005022:	f000 f963 	bl	80052ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005026:	f000 fc75 	bl	8005914 <xTaskResumeAll>
 800502a:	e77a      	b.n	8004f22 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800502c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800502e:	f000 f95d 	bl	80052ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005032:	f000 fc6f 	bl	8005914 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005038:	f000 f9aa 	bl	8005390 <prvIsQueueEmpty>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	f43f af6f 	beq.w	8004f22 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005044:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005046:	4618      	mov	r0, r3
 8005048:	3730      	adds	r7, #48	; 0x30
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	e000ed04 	.word	0xe000ed04

08005054 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b08e      	sub	sp, #56	; 0x38
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10a      	bne.n	8005080 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800506a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506e:	f383 8811 	msr	BASEPRI, r3
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	f3bf 8f4f 	dsb	sy
 800507a:	623b      	str	r3, [r7, #32]
}
 800507c:	bf00      	nop
 800507e:	e7fe      	b.n	800507e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d103      	bne.n	800508e <xQueueReceiveFromISR+0x3a>
 8005086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <xQueueReceiveFromISR+0x3e>
 800508e:	2301      	movs	r3, #1
 8005090:	e000      	b.n	8005094 <xQueueReceiveFromISR+0x40>
 8005092:	2300      	movs	r3, #0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10a      	bne.n	80050ae <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	61fb      	str	r3, [r7, #28]
}
 80050aa:	bf00      	nop
 80050ac:	e7fe      	b.n	80050ac <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050ae:	f001 fe4b 	bl	8006d48 <vPortValidateInterruptPriority>
	__asm volatile
 80050b2:	f3ef 8211 	mrs	r2, BASEPRI
 80050b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	61ba      	str	r2, [r7, #24]
 80050c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80050ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d02f      	beq.n	800513a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80050da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050e4:	68b9      	ldr	r1, [r7, #8]
 80050e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050e8:	f000 f8da 	bl	80052a0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ee:	1e5a      	subs	r2, r3, #1
 80050f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80050f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80050f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fc:	d112      	bne.n	8005124 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d016      	beq.n	8005134 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005108:	3310      	adds	r3, #16
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fe1e 	bl	8005d4c <xTaskRemoveFromEventList>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00e      	beq.n	8005134 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00b      	beq.n	8005134 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	e007      	b.n	8005134 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005128:	3301      	adds	r3, #1
 800512a:	b2db      	uxtb	r3, r3
 800512c:	b25a      	sxtb	r2, r3
 800512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005134:	2301      	movs	r3, #1
 8005136:	637b      	str	r3, [r7, #52]	; 0x34
 8005138:	e001      	b.n	800513e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800513a:	2300      	movs	r3, #0
 800513c:	637b      	str	r3, [r7, #52]	; 0x34
 800513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005140:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f383 8811 	msr	BASEPRI, r3
}
 8005148:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800514a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800514c:	4618      	mov	r0, r3
 800514e:	3738      	adds	r7, #56	; 0x38
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10a      	bne.n	8005178 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8005162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005166:	f383 8811 	msr	BASEPRI, r3
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	60bb      	str	r3, [r7, #8]
}
 8005174:	bf00      	nop
 8005176:	e7fe      	b.n	8005176 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005178:	f001 fd04 	bl	8006b84 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005180:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005182:	f001 fd2f 	bl	8006be4 <vPortExitCritical>

	return uxReturn;
 8005186:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10a      	bne.n	80051b8 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80051a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	60fb      	str	r3, [r7, #12]
}
 80051b4:	bf00      	nop
 80051b6:	e7fe      	b.n	80051b6 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80051be:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80051c0:	4618      	mov	r0, r3
 80051c2:	371c      	adds	r7, #28
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80051d8:	2300      	movs	r3, #0
 80051da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10d      	bne.n	8005206 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d14d      	bne.n	800528e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 ff88 	bl	800610c <xTaskPriorityDisinherit>
 80051fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	609a      	str	r2, [r3, #8]
 8005204:	e043      	b.n	800528e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d119      	bne.n	8005240 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6858      	ldr	r0, [r3, #4]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005214:	461a      	mov	r2, r3
 8005216:	68b9      	ldr	r1, [r7, #8]
 8005218:	f002 f8e3 	bl	80073e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	441a      	add	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	429a      	cmp	r2, r3
 8005234:	d32b      	bcc.n	800528e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	605a      	str	r2, [r3, #4]
 800523e:	e026      	b.n	800528e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	68d8      	ldr	r0, [r3, #12]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005248:	461a      	mov	r2, r3
 800524a:	68b9      	ldr	r1, [r7, #8]
 800524c:	f002 f8c9 	bl	80073e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005258:	425b      	negs	r3, r3
 800525a:	441a      	add	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	429a      	cmp	r2, r3
 800526a:	d207      	bcs.n	800527c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	425b      	negs	r3, r3
 8005276:	441a      	add	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b02      	cmp	r3, #2
 8005280:	d105      	bne.n	800528e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	3b01      	subs	r3, #1
 800528c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005296:	697b      	ldr	r3, [r7, #20]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d018      	beq.n	80052e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	441a      	add	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d303      	bcc.n	80052d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68d9      	ldr	r1, [r3, #12]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052dc:	461a      	mov	r2, r3
 80052de:	6838      	ldr	r0, [r7, #0]
 80052e0:	f002 f87f 	bl	80073e2 <memcpy>
	}
}
 80052e4:	bf00      	nop
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80052f4:	f001 fc46 	bl	8006b84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005300:	e011      	b.n	8005326 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	2b00      	cmp	r3, #0
 8005308:	d012      	beq.n	8005330 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3324      	adds	r3, #36	; 0x24
 800530e:	4618      	mov	r0, r3
 8005310:	f000 fd1c 	bl	8005d4c <xTaskRemoveFromEventList>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800531a:	f000 fdf3 	bl	8005f04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800531e:	7bfb      	ldrb	r3, [r7, #15]
 8005320:	3b01      	subs	r3, #1
 8005322:	b2db      	uxtb	r3, r3
 8005324:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800532a:	2b00      	cmp	r3, #0
 800532c:	dce9      	bgt.n	8005302 <prvUnlockQueue+0x16>
 800532e:	e000      	b.n	8005332 <prvUnlockQueue+0x46>
					break;
 8005330:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	22ff      	movs	r2, #255	; 0xff
 8005336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800533a:	f001 fc53 	bl	8006be4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800533e:	f001 fc21 	bl	8006b84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005348:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800534a:	e011      	b.n	8005370 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d012      	beq.n	800537a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3310      	adds	r3, #16
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fcf7 	bl	8005d4c <xTaskRemoveFromEventList>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005364:	f000 fdce 	bl	8005f04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005368:	7bbb      	ldrb	r3, [r7, #14]
 800536a:	3b01      	subs	r3, #1
 800536c:	b2db      	uxtb	r3, r3
 800536e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005370:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005374:	2b00      	cmp	r3, #0
 8005376:	dce9      	bgt.n	800534c <prvUnlockQueue+0x60>
 8005378:	e000      	b.n	800537c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800537a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	22ff      	movs	r2, #255	; 0xff
 8005380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005384:	f001 fc2e 	bl	8006be4 <vPortExitCritical>
}
 8005388:	bf00      	nop
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005398:	f001 fbf4 	bl	8006b84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d102      	bne.n	80053aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80053a4:	2301      	movs	r3, #1
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	e001      	b.n	80053ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80053aa:	2300      	movs	r3, #0
 80053ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053ae:	f001 fc19 	bl	8006be4 <vPortExitCritical>

	return xReturn;
 80053b2:	68fb      	ldr	r3, [r7, #12]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053c4:	f001 fbde 	bl	8006b84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d102      	bne.n	80053da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80053d4:	2301      	movs	r3, #1
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	e001      	b.n	80053de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80053da:	2300      	movs	r3, #0
 80053dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053de:	f001 fc01 	bl	8006be4 <vPortExitCritical>

	return xReturn;
 80053e2:	68fb      	ldr	r3, [r7, #12]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053f6:	2300      	movs	r3, #0
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	e014      	b.n	8005426 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80053fc:	4a0f      	ldr	r2, [pc, #60]	; (800543c <vQueueAddToRegistry+0x50>)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10b      	bne.n	8005420 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005408:	490c      	ldr	r1, [pc, #48]	; (800543c <vQueueAddToRegistry+0x50>)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005412:	4a0a      	ldr	r2, [pc, #40]	; (800543c <vQueueAddToRegistry+0x50>)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	4413      	add	r3, r2
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800541e:	e006      	b.n	800542e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3301      	adds	r3, #1
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2b07      	cmp	r3, #7
 800542a:	d9e7      	bls.n	80053fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800542c:	bf00      	nop
 800542e:	bf00      	nop
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	20000a64 	.word	0x20000a64

08005440 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005450:	f001 fb98 	bl	8006b84 <vPortEnterCritical>
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800545a:	b25b      	sxtb	r3, r3
 800545c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005460:	d103      	bne.n	800546a <vQueueWaitForMessageRestricted+0x2a>
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005470:	b25b      	sxtb	r3, r3
 8005472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005476:	d103      	bne.n	8005480 <vQueueWaitForMessageRestricted+0x40>
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005480:	f001 fbb0 	bl	8006be4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005488:	2b00      	cmp	r3, #0
 800548a:	d106      	bne.n	800549a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	3324      	adds	r3, #36	; 0x24
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	68b9      	ldr	r1, [r7, #8]
 8005494:	4618      	mov	r0, r3
 8005496:	f000 fc2d 	bl	8005cf4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800549a:	6978      	ldr	r0, [r7, #20]
 800549c:	f7ff ff26 	bl	80052ec <prvUnlockQueue>
	}
 80054a0:	bf00      	nop
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08e      	sub	sp, #56	; 0x38
 80054ac:	af04      	add	r7, sp, #16
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
 80054b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80054b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10a      	bne.n	80054d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80054bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	623b      	str	r3, [r7, #32]
}
 80054ce:	bf00      	nop
 80054d0:	e7fe      	b.n	80054d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80054d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10a      	bne.n	80054ee <xTaskCreateStatic+0x46>
	__asm volatile
 80054d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054dc:	f383 8811 	msr	BASEPRI, r3
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	61fb      	str	r3, [r7, #28]
}
 80054ea:	bf00      	nop
 80054ec:	e7fe      	b.n	80054ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80054ee:	23bc      	movs	r3, #188	; 0xbc
 80054f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	2bbc      	cmp	r3, #188	; 0xbc
 80054f6:	d00a      	beq.n	800550e <xTaskCreateStatic+0x66>
	__asm volatile
 80054f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	61bb      	str	r3, [r7, #24]
}
 800550a:	bf00      	nop
 800550c:	e7fe      	b.n	800550c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800550e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005512:	2b00      	cmp	r3, #0
 8005514:	d01e      	beq.n	8005554 <xTaskCreateStatic+0xac>
 8005516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01b      	beq.n	8005554 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800551c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005524:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	2202      	movs	r2, #2
 800552a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800552e:	2300      	movs	r3, #0
 8005530:	9303      	str	r3, [sp, #12]
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	9302      	str	r3, [sp, #8]
 8005536:	f107 0314 	add.w	r3, r7, #20
 800553a:	9301      	str	r3, [sp, #4]
 800553c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	68b9      	ldr	r1, [r7, #8]
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f850 	bl	80055ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800554c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800554e:	f000 f8f3 	bl	8005738 <prvAddNewTaskToReadyList>
 8005552:	e001      	b.n	8005558 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005554:	2300      	movs	r3, #0
 8005556:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005558:	697b      	ldr	r3, [r7, #20]
	}
 800555a:	4618      	mov	r0, r3
 800555c:	3728      	adds	r7, #40	; 0x28
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005562:	b580      	push	{r7, lr}
 8005564:	b08c      	sub	sp, #48	; 0x30
 8005566:	af04      	add	r7, sp, #16
 8005568:	60f8      	str	r0, [r7, #12]
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	603b      	str	r3, [r7, #0]
 800556e:	4613      	mov	r3, r2
 8005570:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005572:	88fb      	ldrh	r3, [r7, #6]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4618      	mov	r0, r3
 8005578:	f001 fc26 	bl	8006dc8 <pvPortMalloc>
 800557c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00e      	beq.n	80055a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005584:	20bc      	movs	r0, #188	; 0xbc
 8005586:	f001 fc1f 	bl	8006dc8 <pvPortMalloc>
 800558a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	631a      	str	r2, [r3, #48]	; 0x30
 8005598:	e005      	b.n	80055a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800559a:	6978      	ldr	r0, [r7, #20]
 800559c:	f001 fce0 	bl	8006f60 <vPortFree>
 80055a0:	e001      	b.n	80055a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80055a2:	2300      	movs	r3, #0
 80055a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d017      	beq.n	80055dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055b4:	88fa      	ldrh	r2, [r7, #6]
 80055b6:	2300      	movs	r3, #0
 80055b8:	9303      	str	r3, [sp, #12]
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	9302      	str	r3, [sp, #8]
 80055be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c0:	9301      	str	r3, [sp, #4]
 80055c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68b9      	ldr	r1, [r7, #8]
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 f80e 	bl	80055ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055d0:	69f8      	ldr	r0, [r7, #28]
 80055d2:	f000 f8b1 	bl	8005738 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80055d6:	2301      	movs	r3, #1
 80055d8:	61bb      	str	r3, [r7, #24]
 80055da:	e002      	b.n	80055e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80055dc:	f04f 33ff 	mov.w	r3, #4294967295
 80055e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80055e2:	69bb      	ldr	r3, [r7, #24]
	}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3720      	adds	r7, #32
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b088      	sub	sp, #32
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80055fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	461a      	mov	r2, r3
 8005604:	21a5      	movs	r1, #165	; 0xa5
 8005606:	f001 fefa 	bl	80073fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800560a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005614:	3b01      	subs	r3, #1
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	f023 0307 	bic.w	r3, r3, #7
 8005622:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <prvInitialiseNewTask+0x58>
	__asm volatile
 800562e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	617b      	str	r3, [r7, #20]
}
 8005640:	bf00      	nop
 8005642:	e7fe      	b.n	8005642 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d01f      	beq.n	800568a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800564a:	2300      	movs	r3, #0
 800564c:	61fb      	str	r3, [r7, #28]
 800564e:	e012      	b.n	8005676 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	4413      	add	r3, r2
 8005656:	7819      	ldrb	r1, [r3, #0]
 8005658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	4413      	add	r3, r2
 800565e:	3334      	adds	r3, #52	; 0x34
 8005660:	460a      	mov	r2, r1
 8005662:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	4413      	add	r3, r2
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d006      	beq.n	800567e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	3301      	adds	r3, #1
 8005674:	61fb      	str	r3, [r7, #28]
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	2b0f      	cmp	r3, #15
 800567a:	d9e9      	bls.n	8005650 <prvInitialiseNewTask+0x64>
 800567c:	e000      	b.n	8005680 <prvInitialiseNewTask+0x94>
			{
				break;
 800567e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005682:	2200      	movs	r2, #0
 8005684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005688:	e003      	b.n	8005692 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800568a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005694:	2b37      	cmp	r3, #55	; 0x37
 8005696:	d901      	bls.n	800569c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005698:	2337      	movs	r3, #55	; 0x37
 800569a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800569c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80056a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80056a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056aa:	2200      	movs	r2, #0
 80056ac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b0:	3304      	adds	r3, #4
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff f882 	bl	80047bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	3318      	adds	r3, #24
 80056bc:	4618      	mov	r0, r3
 80056be:	f7ff f87d 	bl	80047bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80056ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80056d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056da:	2200      	movs	r2, #0
 80056dc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80056e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ea:	3354      	adds	r3, #84	; 0x54
 80056ec:	2260      	movs	r2, #96	; 0x60
 80056ee:	2100      	movs	r1, #0
 80056f0:	4618      	mov	r0, r3
 80056f2:	f001 fe84 	bl	80073fe <memset>
 80056f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f8:	4a0c      	ldr	r2, [pc, #48]	; (800572c <prvInitialiseNewTask+0x140>)
 80056fa:	659a      	str	r2, [r3, #88]	; 0x58
 80056fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fe:	4a0c      	ldr	r2, [pc, #48]	; (8005730 <prvInitialiseNewTask+0x144>)
 8005700:	65da      	str	r2, [r3, #92]	; 0x5c
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	4a0b      	ldr	r2, [pc, #44]	; (8005734 <prvInitialiseNewTask+0x148>)
 8005706:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	68f9      	ldr	r1, [r7, #12]
 800570c:	69b8      	ldr	r0, [r7, #24]
 800570e:	f001 f90d 	bl	800692c <pxPortInitialiseStack>
 8005712:	4602      	mov	r2, r0
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571a:	2b00      	cmp	r3, #0
 800571c:	d002      	beq.n	8005724 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005722:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005724:	bf00      	nop
 8005726:	3720      	adds	r7, #32
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	08009ff8 	.word	0x08009ff8
 8005730:	0800a018 	.word	0x0800a018
 8005734:	08009fd8 	.word	0x08009fd8

08005738 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005740:	f001 fa20 	bl	8006b84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005744:	4b2d      	ldr	r3, [pc, #180]	; (80057fc <prvAddNewTaskToReadyList+0xc4>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	3301      	adds	r3, #1
 800574a:	4a2c      	ldr	r2, [pc, #176]	; (80057fc <prvAddNewTaskToReadyList+0xc4>)
 800574c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800574e:	4b2c      	ldr	r3, [pc, #176]	; (8005800 <prvAddNewTaskToReadyList+0xc8>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d109      	bne.n	800576a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005756:	4a2a      	ldr	r2, [pc, #168]	; (8005800 <prvAddNewTaskToReadyList+0xc8>)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800575c:	4b27      	ldr	r3, [pc, #156]	; (80057fc <prvAddNewTaskToReadyList+0xc4>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d110      	bne.n	8005786 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005764:	f000 fbf2 	bl	8005f4c <prvInitialiseTaskLists>
 8005768:	e00d      	b.n	8005786 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800576a:	4b26      	ldr	r3, [pc, #152]	; (8005804 <prvAddNewTaskToReadyList+0xcc>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d109      	bne.n	8005786 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005772:	4b23      	ldr	r3, [pc, #140]	; (8005800 <prvAddNewTaskToReadyList+0xc8>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577c:	429a      	cmp	r2, r3
 800577e:	d802      	bhi.n	8005786 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005780:	4a1f      	ldr	r2, [pc, #124]	; (8005800 <prvAddNewTaskToReadyList+0xc8>)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005786:	4b20      	ldr	r3, [pc, #128]	; (8005808 <prvAddNewTaskToReadyList+0xd0>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3301      	adds	r3, #1
 800578c:	4a1e      	ldr	r2, [pc, #120]	; (8005808 <prvAddNewTaskToReadyList+0xd0>)
 800578e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005790:	4b1d      	ldr	r3, [pc, #116]	; (8005808 <prvAddNewTaskToReadyList+0xd0>)
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800579c:	4b1b      	ldr	r3, [pc, #108]	; (800580c <prvAddNewTaskToReadyList+0xd4>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d903      	bls.n	80057ac <prvAddNewTaskToReadyList+0x74>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a8:	4a18      	ldr	r2, [pc, #96]	; (800580c <prvAddNewTaskToReadyList+0xd4>)
 80057aa:	6013      	str	r3, [r2, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b0:	4613      	mov	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4a15      	ldr	r2, [pc, #84]	; (8005810 <prvAddNewTaskToReadyList+0xd8>)
 80057ba:	441a      	add	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	3304      	adds	r3, #4
 80057c0:	4619      	mov	r1, r3
 80057c2:	4610      	mov	r0, r2
 80057c4:	f7ff f807 	bl	80047d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80057c8:	f001 fa0c 	bl	8006be4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80057cc:	4b0d      	ldr	r3, [pc, #52]	; (8005804 <prvAddNewTaskToReadyList+0xcc>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00e      	beq.n	80057f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80057d4:	4b0a      	ldr	r3, [pc, #40]	; (8005800 <prvAddNewTaskToReadyList+0xc8>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057de:	429a      	cmp	r2, r3
 80057e0:	d207      	bcs.n	80057f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80057e2:	4b0c      	ldr	r3, [pc, #48]	; (8005814 <prvAddNewTaskToReadyList+0xdc>)
 80057e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057f2:	bf00      	nop
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	20000f78 	.word	0x20000f78
 8005800:	20000aa4 	.word	0x20000aa4
 8005804:	20000f84 	.word	0x20000f84
 8005808:	20000f94 	.word	0x20000f94
 800580c:	20000f80 	.word	0x20000f80
 8005810:	20000aa8 	.word	0x20000aa8
 8005814:	e000ed04 	.word	0xe000ed04

08005818 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b08a      	sub	sp, #40	; 0x28
 800581c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800581e:	2300      	movs	r3, #0
 8005820:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005822:	2300      	movs	r3, #0
 8005824:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005826:	463a      	mov	r2, r7
 8005828:	1d39      	adds	r1, r7, #4
 800582a:	f107 0308 	add.w	r3, r7, #8
 800582e:	4618      	mov	r0, r3
 8005830:	f7fe ff70 	bl	8004714 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005834:	6839      	ldr	r1, [r7, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	9202      	str	r2, [sp, #8]
 800583c:	9301      	str	r3, [sp, #4]
 800583e:	2300      	movs	r3, #0
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	2300      	movs	r3, #0
 8005844:	460a      	mov	r2, r1
 8005846:	4924      	ldr	r1, [pc, #144]	; (80058d8 <vTaskStartScheduler+0xc0>)
 8005848:	4824      	ldr	r0, [pc, #144]	; (80058dc <vTaskStartScheduler+0xc4>)
 800584a:	f7ff fe2d 	bl	80054a8 <xTaskCreateStatic>
 800584e:	4603      	mov	r3, r0
 8005850:	4a23      	ldr	r2, [pc, #140]	; (80058e0 <vTaskStartScheduler+0xc8>)
 8005852:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005854:	4b22      	ldr	r3, [pc, #136]	; (80058e0 <vTaskStartScheduler+0xc8>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800585c:	2301      	movs	r3, #1
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	e001      	b.n	8005866 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005862:	2300      	movs	r3, #0
 8005864:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d102      	bne.n	8005872 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800586c:	f000 fd10 	bl	8006290 <xTimerCreateTimerTask>
 8005870:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d11b      	bne.n	80058b0 <vTaskStartScheduler+0x98>
	__asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	613b      	str	r3, [r7, #16]
}
 800588a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800588c:	4b15      	ldr	r3, [pc, #84]	; (80058e4 <vTaskStartScheduler+0xcc>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3354      	adds	r3, #84	; 0x54
 8005892:	4a15      	ldr	r2, [pc, #84]	; (80058e8 <vTaskStartScheduler+0xd0>)
 8005894:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005896:	4b15      	ldr	r3, [pc, #84]	; (80058ec <vTaskStartScheduler+0xd4>)
 8005898:	f04f 32ff 	mov.w	r2, #4294967295
 800589c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800589e:	4b14      	ldr	r3, [pc, #80]	; (80058f0 <vTaskStartScheduler+0xd8>)
 80058a0:	2201      	movs	r2, #1
 80058a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058a4:	4b13      	ldr	r3, [pc, #76]	; (80058f4 <vTaskStartScheduler+0xdc>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80058aa:	f001 f8c9 	bl	8006a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80058ae:	e00e      	b.n	80058ce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b6:	d10a      	bne.n	80058ce <vTaskStartScheduler+0xb6>
	__asm volatile
 80058b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	60fb      	str	r3, [r7, #12]
}
 80058ca:	bf00      	nop
 80058cc:	e7fe      	b.n	80058cc <vTaskStartScheduler+0xb4>
}
 80058ce:	bf00      	nop
 80058d0:	3718      	adds	r7, #24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	08009ef4 	.word	0x08009ef4
 80058dc:	08005f1d 	.word	0x08005f1d
 80058e0:	20000f9c 	.word	0x20000f9c
 80058e4:	20000aa4 	.word	0x20000aa4
 80058e8:	20000014 	.word	0x20000014
 80058ec:	20000f98 	.word	0x20000f98
 80058f0:	20000f84 	.word	0x20000f84
 80058f4:	20000f7c 	.word	0x20000f7c

080058f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80058fc:	4b04      	ldr	r3, [pc, #16]	; (8005910 <vTaskSuspendAll+0x18>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3301      	adds	r3, #1
 8005902:	4a03      	ldr	r2, [pc, #12]	; (8005910 <vTaskSuspendAll+0x18>)
 8005904:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005906:	bf00      	nop
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr
 8005910:	20000fa0 	.word	0x20000fa0

08005914 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800591a:	2300      	movs	r3, #0
 800591c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800591e:	2300      	movs	r3, #0
 8005920:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005922:	4b42      	ldr	r3, [pc, #264]	; (8005a2c <xTaskResumeAll+0x118>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10a      	bne.n	8005940 <xTaskResumeAll+0x2c>
	__asm volatile
 800592a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	603b      	str	r3, [r7, #0]
}
 800593c:	bf00      	nop
 800593e:	e7fe      	b.n	800593e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005940:	f001 f920 	bl	8006b84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005944:	4b39      	ldr	r3, [pc, #228]	; (8005a2c <xTaskResumeAll+0x118>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3b01      	subs	r3, #1
 800594a:	4a38      	ldr	r2, [pc, #224]	; (8005a2c <xTaskResumeAll+0x118>)
 800594c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800594e:	4b37      	ldr	r3, [pc, #220]	; (8005a2c <xTaskResumeAll+0x118>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d162      	bne.n	8005a1c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005956:	4b36      	ldr	r3, [pc, #216]	; (8005a30 <xTaskResumeAll+0x11c>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d05e      	beq.n	8005a1c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800595e:	e02f      	b.n	80059c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005960:	4b34      	ldr	r3, [pc, #208]	; (8005a34 <xTaskResumeAll+0x120>)
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	3318      	adds	r3, #24
 800596c:	4618      	mov	r0, r3
 800596e:	f7fe ff8f 	bl	8004890 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	3304      	adds	r3, #4
 8005976:	4618      	mov	r0, r3
 8005978:	f7fe ff8a 	bl	8004890 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005980:	4b2d      	ldr	r3, [pc, #180]	; (8005a38 <xTaskResumeAll+0x124>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	429a      	cmp	r2, r3
 8005986:	d903      	bls.n	8005990 <xTaskResumeAll+0x7c>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598c:	4a2a      	ldr	r2, [pc, #168]	; (8005a38 <xTaskResumeAll+0x124>)
 800598e:	6013      	str	r3, [r2, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005994:	4613      	mov	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4a27      	ldr	r2, [pc, #156]	; (8005a3c <xTaskResumeAll+0x128>)
 800599e:	441a      	add	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	3304      	adds	r3, #4
 80059a4:	4619      	mov	r1, r3
 80059a6:	4610      	mov	r0, r2
 80059a8:	f7fe ff15 	bl	80047d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b0:	4b23      	ldr	r3, [pc, #140]	; (8005a40 <xTaskResumeAll+0x12c>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d302      	bcc.n	80059c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80059ba:	4b22      	ldr	r3, [pc, #136]	; (8005a44 <xTaskResumeAll+0x130>)
 80059bc:	2201      	movs	r2, #1
 80059be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059c0:	4b1c      	ldr	r3, [pc, #112]	; (8005a34 <xTaskResumeAll+0x120>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1cb      	bne.n	8005960 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80059ce:	f000 fb5f 	bl	8006090 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80059d2:	4b1d      	ldr	r3, [pc, #116]	; (8005a48 <xTaskResumeAll+0x134>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d010      	beq.n	8005a00 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80059de:	f000 f847 	bl	8005a70 <xTaskIncrementTick>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80059e8:	4b16      	ldr	r3, [pc, #88]	; (8005a44 <xTaskResumeAll+0x130>)
 80059ea:	2201      	movs	r2, #1
 80059ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3b01      	subs	r3, #1
 80059f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1f1      	bne.n	80059de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80059fa:	4b13      	ldr	r3, [pc, #76]	; (8005a48 <xTaskResumeAll+0x134>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a00:	4b10      	ldr	r3, [pc, #64]	; (8005a44 <xTaskResumeAll+0x130>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d009      	beq.n	8005a1c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a0c:	4b0f      	ldr	r3, [pc, #60]	; (8005a4c <xTaskResumeAll+0x138>)
 8005a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a1c:	f001 f8e2 	bl	8006be4 <vPortExitCritical>

	return xAlreadyYielded;
 8005a20:	68bb      	ldr	r3, [r7, #8]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20000fa0 	.word	0x20000fa0
 8005a30:	20000f78 	.word	0x20000f78
 8005a34:	20000f38 	.word	0x20000f38
 8005a38:	20000f80 	.word	0x20000f80
 8005a3c:	20000aa8 	.word	0x20000aa8
 8005a40:	20000aa4 	.word	0x20000aa4
 8005a44:	20000f8c 	.word	0x20000f8c
 8005a48:	20000f88 	.word	0x20000f88
 8005a4c:	e000ed04 	.word	0xe000ed04

08005a50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a56:	4b05      	ldr	r3, [pc, #20]	; (8005a6c <xTaskGetTickCount+0x1c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a5c:	687b      	ldr	r3, [r7, #4]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	20000f7c 	.word	0x20000f7c

08005a70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a76:	2300      	movs	r3, #0
 8005a78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a7a:	4b4f      	ldr	r3, [pc, #316]	; (8005bb8 <xTaskIncrementTick+0x148>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f040 808f 	bne.w	8005ba2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a84:	4b4d      	ldr	r3, [pc, #308]	; (8005bbc <xTaskIncrementTick+0x14c>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a8c:	4a4b      	ldr	r2, [pc, #300]	; (8005bbc <xTaskIncrementTick+0x14c>)
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d120      	bne.n	8005ada <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a98:	4b49      	ldr	r3, [pc, #292]	; (8005bc0 <xTaskIncrementTick+0x150>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00a      	beq.n	8005ab8 <xTaskIncrementTick+0x48>
	__asm volatile
 8005aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa6:	f383 8811 	msr	BASEPRI, r3
 8005aaa:	f3bf 8f6f 	isb	sy
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	603b      	str	r3, [r7, #0]
}
 8005ab4:	bf00      	nop
 8005ab6:	e7fe      	b.n	8005ab6 <xTaskIncrementTick+0x46>
 8005ab8:	4b41      	ldr	r3, [pc, #260]	; (8005bc0 <xTaskIncrementTick+0x150>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	4b41      	ldr	r3, [pc, #260]	; (8005bc4 <xTaskIncrementTick+0x154>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a3f      	ldr	r2, [pc, #252]	; (8005bc0 <xTaskIncrementTick+0x150>)
 8005ac4:	6013      	str	r3, [r2, #0]
 8005ac6:	4a3f      	ldr	r2, [pc, #252]	; (8005bc4 <xTaskIncrementTick+0x154>)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6013      	str	r3, [r2, #0]
 8005acc:	4b3e      	ldr	r3, [pc, #248]	; (8005bc8 <xTaskIncrementTick+0x158>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	4a3d      	ldr	r2, [pc, #244]	; (8005bc8 <xTaskIncrementTick+0x158>)
 8005ad4:	6013      	str	r3, [r2, #0]
 8005ad6:	f000 fadb 	bl	8006090 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ada:	4b3c      	ldr	r3, [pc, #240]	; (8005bcc <xTaskIncrementTick+0x15c>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d349      	bcc.n	8005b78 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ae4:	4b36      	ldr	r3, [pc, #216]	; (8005bc0 <xTaskIncrementTick+0x150>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d104      	bne.n	8005af8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aee:	4b37      	ldr	r3, [pc, #220]	; (8005bcc <xTaskIncrementTick+0x15c>)
 8005af0:	f04f 32ff 	mov.w	r2, #4294967295
 8005af4:	601a      	str	r2, [r3, #0]
					break;
 8005af6:	e03f      	b.n	8005b78 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005af8:	4b31      	ldr	r3, [pc, #196]	; (8005bc0 <xTaskIncrementTick+0x150>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d203      	bcs.n	8005b18 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b10:	4a2e      	ldr	r2, [pc, #184]	; (8005bcc <xTaskIncrementTick+0x15c>)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b16:	e02f      	b.n	8005b78 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fe feb7 	bl	8004890 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d004      	beq.n	8005b34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	3318      	adds	r3, #24
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7fe feae 	bl	8004890 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b38:	4b25      	ldr	r3, [pc, #148]	; (8005bd0 <xTaskIncrementTick+0x160>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d903      	bls.n	8005b48 <xTaskIncrementTick+0xd8>
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	4a22      	ldr	r2, [pc, #136]	; (8005bd0 <xTaskIncrementTick+0x160>)
 8005b46:	6013      	str	r3, [r2, #0]
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4a1f      	ldr	r2, [pc, #124]	; (8005bd4 <xTaskIncrementTick+0x164>)
 8005b56:	441a      	add	r2, r3
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4610      	mov	r0, r2
 8005b60:	f7fe fe39 	bl	80047d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b68:	4b1b      	ldr	r3, [pc, #108]	; (8005bd8 <xTaskIncrementTick+0x168>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d3b8      	bcc.n	8005ae4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005b72:	2301      	movs	r3, #1
 8005b74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b76:	e7b5      	b.n	8005ae4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b78:	4b17      	ldr	r3, [pc, #92]	; (8005bd8 <xTaskIncrementTick+0x168>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7e:	4915      	ldr	r1, [pc, #84]	; (8005bd4 <xTaskIncrementTick+0x164>)
 8005b80:	4613      	mov	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	440b      	add	r3, r1
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d901      	bls.n	8005b94 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005b90:	2301      	movs	r3, #1
 8005b92:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b94:	4b11      	ldr	r3, [pc, #68]	; (8005bdc <xTaskIncrementTick+0x16c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d007      	beq.n	8005bac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	617b      	str	r3, [r7, #20]
 8005ba0:	e004      	b.n	8005bac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ba2:	4b0f      	ldr	r3, [pc, #60]	; (8005be0 <xTaskIncrementTick+0x170>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	4a0d      	ldr	r2, [pc, #52]	; (8005be0 <xTaskIncrementTick+0x170>)
 8005baa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005bac:	697b      	ldr	r3, [r7, #20]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20000fa0 	.word	0x20000fa0
 8005bbc:	20000f7c 	.word	0x20000f7c
 8005bc0:	20000f30 	.word	0x20000f30
 8005bc4:	20000f34 	.word	0x20000f34
 8005bc8:	20000f90 	.word	0x20000f90
 8005bcc:	20000f98 	.word	0x20000f98
 8005bd0:	20000f80 	.word	0x20000f80
 8005bd4:	20000aa8 	.word	0x20000aa8
 8005bd8:	20000aa4 	.word	0x20000aa4
 8005bdc:	20000f8c 	.word	0x20000f8c
 8005be0:	20000f88 	.word	0x20000f88

08005be4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005bea:	4b2a      	ldr	r3, [pc, #168]	; (8005c94 <vTaskSwitchContext+0xb0>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005bf2:	4b29      	ldr	r3, [pc, #164]	; (8005c98 <vTaskSwitchContext+0xb4>)
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005bf8:	e046      	b.n	8005c88 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005bfa:	4b27      	ldr	r3, [pc, #156]	; (8005c98 <vTaskSwitchContext+0xb4>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c00:	4b26      	ldr	r3, [pc, #152]	; (8005c9c <vTaskSwitchContext+0xb8>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	e010      	b.n	8005c2a <vTaskSwitchContext+0x46>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10a      	bne.n	8005c24 <vTaskSwitchContext+0x40>
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	607b      	str	r3, [r7, #4]
}
 8005c20:	bf00      	nop
 8005c22:	e7fe      	b.n	8005c22 <vTaskSwitchContext+0x3e>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	491d      	ldr	r1, [pc, #116]	; (8005ca0 <vTaskSwitchContext+0xbc>)
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	440b      	add	r3, r1
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0e4      	beq.n	8005c08 <vTaskSwitchContext+0x24>
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	4613      	mov	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4a15      	ldr	r2, [pc, #84]	; (8005ca0 <vTaskSwitchContext+0xbc>)
 8005c4a:	4413      	add	r3, r2
 8005c4c:	60bb      	str	r3, [r7, #8]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	605a      	str	r2, [r3, #4]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	3308      	adds	r3, #8
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d104      	bne.n	8005c6e <vTaskSwitchContext+0x8a>
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	605a      	str	r2, [r3, #4]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	4a0b      	ldr	r2, [pc, #44]	; (8005ca4 <vTaskSwitchContext+0xc0>)
 8005c76:	6013      	str	r3, [r2, #0]
 8005c78:	4a08      	ldr	r2, [pc, #32]	; (8005c9c <vTaskSwitchContext+0xb8>)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c7e:	4b09      	ldr	r3, [pc, #36]	; (8005ca4 <vTaskSwitchContext+0xc0>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3354      	adds	r3, #84	; 0x54
 8005c84:	4a08      	ldr	r2, [pc, #32]	; (8005ca8 <vTaskSwitchContext+0xc4>)
 8005c86:	6013      	str	r3, [r2, #0]
}
 8005c88:	bf00      	nop
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	20000fa0 	.word	0x20000fa0
 8005c98:	20000f8c 	.word	0x20000f8c
 8005c9c:	20000f80 	.word	0x20000f80
 8005ca0:	20000aa8 	.word	0x20000aa8
 8005ca4:	20000aa4 	.word	0x20000aa4
 8005ca8:	20000014 	.word	0x20000014

08005cac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10a      	bne.n	8005cd2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	60fb      	str	r3, [r7, #12]
}
 8005cce:	bf00      	nop
 8005cd0:	e7fe      	b.n	8005cd0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cd2:	4b07      	ldr	r3, [pc, #28]	; (8005cf0 <vTaskPlaceOnEventList+0x44>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3318      	adds	r3, #24
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7fe fd9f 	bl	800481e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	6838      	ldr	r0, [r7, #0]
 8005ce4:	f000 fa80 	bl	80061e8 <prvAddCurrentTaskToDelayedList>
}
 8005ce8:	bf00      	nop
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	20000aa4 	.word	0x20000aa4

08005cf4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10a      	bne.n	8005d1c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0a:	f383 8811 	msr	BASEPRI, r3
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	617b      	str	r3, [r7, #20]
}
 8005d18:	bf00      	nop
 8005d1a:	e7fe      	b.n	8005d1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d1c:	4b0a      	ldr	r3, [pc, #40]	; (8005d48 <vTaskPlaceOnEventListRestricted+0x54>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3318      	adds	r3, #24
 8005d22:	4619      	mov	r1, r3
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f7fe fd56 	bl	80047d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005d30:	f04f 33ff 	mov.w	r3, #4294967295
 8005d34:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	68b8      	ldr	r0, [r7, #8]
 8005d3a:	f000 fa55 	bl	80061e8 <prvAddCurrentTaskToDelayedList>
	}
 8005d3e:	bf00      	nop
 8005d40:	3718      	adds	r7, #24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20000aa4 	.word	0x20000aa4

08005d4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10a      	bne.n	8005d78 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	60fb      	str	r3, [r7, #12]
}
 8005d74:	bf00      	nop
 8005d76:	e7fe      	b.n	8005d76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	3318      	adds	r3, #24
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fe fd87 	bl	8004890 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d82:	4b1e      	ldr	r3, [pc, #120]	; (8005dfc <xTaskRemoveFromEventList+0xb0>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d11d      	bne.n	8005dc6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7fe fd7e 	bl	8004890 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d98:	4b19      	ldr	r3, [pc, #100]	; (8005e00 <xTaskRemoveFromEventList+0xb4>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d903      	bls.n	8005da8 <xTaskRemoveFromEventList+0x5c>
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da4:	4a16      	ldr	r2, [pc, #88]	; (8005e00 <xTaskRemoveFromEventList+0xb4>)
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dac:	4613      	mov	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4a13      	ldr	r2, [pc, #76]	; (8005e04 <xTaskRemoveFromEventList+0xb8>)
 8005db6:	441a      	add	r2, r3
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	3304      	adds	r3, #4
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	4610      	mov	r0, r2
 8005dc0:	f7fe fd09 	bl	80047d6 <vListInsertEnd>
 8005dc4:	e005      	b.n	8005dd2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	3318      	adds	r3, #24
 8005dca:	4619      	mov	r1, r3
 8005dcc:	480e      	ldr	r0, [pc, #56]	; (8005e08 <xTaskRemoveFromEventList+0xbc>)
 8005dce:	f7fe fd02 	bl	80047d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd6:	4b0d      	ldr	r3, [pc, #52]	; (8005e0c <xTaskRemoveFromEventList+0xc0>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d905      	bls.n	8005dec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005de0:	2301      	movs	r3, #1
 8005de2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005de4:	4b0a      	ldr	r3, [pc, #40]	; (8005e10 <xTaskRemoveFromEventList+0xc4>)
 8005de6:	2201      	movs	r2, #1
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	e001      	b.n	8005df0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005dec:	2300      	movs	r3, #0
 8005dee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005df0:	697b      	ldr	r3, [r7, #20]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3718      	adds	r7, #24
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	20000fa0 	.word	0x20000fa0
 8005e00:	20000f80 	.word	0x20000f80
 8005e04:	20000aa8 	.word	0x20000aa8
 8005e08:	20000f38 	.word	0x20000f38
 8005e0c:	20000aa4 	.word	0x20000aa4
 8005e10:	20000f8c 	.word	0x20000f8c

08005e14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e1c:	4b06      	ldr	r3, [pc, #24]	; (8005e38 <vTaskInternalSetTimeOutState+0x24>)
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e24:	4b05      	ldr	r3, [pc, #20]	; (8005e3c <vTaskInternalSetTimeOutState+0x28>)
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	605a      	str	r2, [r3, #4]
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	20000f90 	.word	0x20000f90
 8005e3c:	20000f7c 	.word	0x20000f7c

08005e40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b088      	sub	sp, #32
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10a      	bne.n	8005e66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	613b      	str	r3, [r7, #16]
}
 8005e62:	bf00      	nop
 8005e64:	e7fe      	b.n	8005e64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10a      	bne.n	8005e82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	60fb      	str	r3, [r7, #12]
}
 8005e7e:	bf00      	nop
 8005e80:	e7fe      	b.n	8005e80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005e82:	f000 fe7f 	bl	8006b84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005e86:	4b1d      	ldr	r3, [pc, #116]	; (8005efc <xTaskCheckForTimeOut+0xbc>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9e:	d102      	bne.n	8005ea6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	61fb      	str	r3, [r7, #28]
 8005ea4:	e023      	b.n	8005eee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	4b15      	ldr	r3, [pc, #84]	; (8005f00 <xTaskCheckForTimeOut+0xc0>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d007      	beq.n	8005ec2 <xTaskCheckForTimeOut+0x82>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	69ba      	ldr	r2, [r7, #24]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d302      	bcc.n	8005ec2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	61fb      	str	r3, [r7, #28]
 8005ec0:	e015      	b.n	8005eee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d20b      	bcs.n	8005ee4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	1ad2      	subs	r2, r2, r3
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7ff ff9b 	bl	8005e14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	61fb      	str	r3, [r7, #28]
 8005ee2:	e004      	b.n	8005eee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005eea:	2301      	movs	r3, #1
 8005eec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005eee:	f000 fe79 	bl	8006be4 <vPortExitCritical>

	return xReturn;
 8005ef2:	69fb      	ldr	r3, [r7, #28]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3720      	adds	r7, #32
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	20000f7c 	.word	0x20000f7c
 8005f00:	20000f90 	.word	0x20000f90

08005f04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f04:	b480      	push	{r7}
 8005f06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005f08:	4b03      	ldr	r3, [pc, #12]	; (8005f18 <vTaskMissedYield+0x14>)
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]
}
 8005f0e:	bf00      	nop
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	20000f8c 	.word	0x20000f8c

08005f1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f24:	f000 f852 	bl	8005fcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f28:	4b06      	ldr	r3, [pc, #24]	; (8005f44 <prvIdleTask+0x28>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d9f9      	bls.n	8005f24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f30:	4b05      	ldr	r3, [pc, #20]	; (8005f48 <prvIdleTask+0x2c>)
 8005f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f40:	e7f0      	b.n	8005f24 <prvIdleTask+0x8>
 8005f42:	bf00      	nop
 8005f44:	20000aa8 	.word	0x20000aa8
 8005f48:	e000ed04 	.word	0xe000ed04

08005f4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f52:	2300      	movs	r3, #0
 8005f54:	607b      	str	r3, [r7, #4]
 8005f56:	e00c      	b.n	8005f72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4a12      	ldr	r2, [pc, #72]	; (8005fac <prvInitialiseTaskLists+0x60>)
 8005f64:	4413      	add	r3, r2
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fe fc08 	bl	800477c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	607b      	str	r3, [r7, #4]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b37      	cmp	r3, #55	; 0x37
 8005f76:	d9ef      	bls.n	8005f58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f78:	480d      	ldr	r0, [pc, #52]	; (8005fb0 <prvInitialiseTaskLists+0x64>)
 8005f7a:	f7fe fbff 	bl	800477c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f7e:	480d      	ldr	r0, [pc, #52]	; (8005fb4 <prvInitialiseTaskLists+0x68>)
 8005f80:	f7fe fbfc 	bl	800477c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f84:	480c      	ldr	r0, [pc, #48]	; (8005fb8 <prvInitialiseTaskLists+0x6c>)
 8005f86:	f7fe fbf9 	bl	800477c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f8a:	480c      	ldr	r0, [pc, #48]	; (8005fbc <prvInitialiseTaskLists+0x70>)
 8005f8c:	f7fe fbf6 	bl	800477c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f90:	480b      	ldr	r0, [pc, #44]	; (8005fc0 <prvInitialiseTaskLists+0x74>)
 8005f92:	f7fe fbf3 	bl	800477c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f96:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <prvInitialiseTaskLists+0x78>)
 8005f98:	4a05      	ldr	r2, [pc, #20]	; (8005fb0 <prvInitialiseTaskLists+0x64>)
 8005f9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f9c:	4b0a      	ldr	r3, [pc, #40]	; (8005fc8 <prvInitialiseTaskLists+0x7c>)
 8005f9e:	4a05      	ldr	r2, [pc, #20]	; (8005fb4 <prvInitialiseTaskLists+0x68>)
 8005fa0:	601a      	str	r2, [r3, #0]
}
 8005fa2:	bf00      	nop
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	20000aa8 	.word	0x20000aa8
 8005fb0:	20000f08 	.word	0x20000f08
 8005fb4:	20000f1c 	.word	0x20000f1c
 8005fb8:	20000f38 	.word	0x20000f38
 8005fbc:	20000f4c 	.word	0x20000f4c
 8005fc0:	20000f64 	.word	0x20000f64
 8005fc4:	20000f30 	.word	0x20000f30
 8005fc8:	20000f34 	.word	0x20000f34

08005fcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fd2:	e019      	b.n	8006008 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005fd4:	f000 fdd6 	bl	8006b84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fd8:	4b10      	ldr	r3, [pc, #64]	; (800601c <prvCheckTasksWaitingTermination+0x50>)
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fe fc53 	bl	8004890 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005fea:	4b0d      	ldr	r3, [pc, #52]	; (8006020 <prvCheckTasksWaitingTermination+0x54>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	4a0b      	ldr	r2, [pc, #44]	; (8006020 <prvCheckTasksWaitingTermination+0x54>)
 8005ff2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ff4:	4b0b      	ldr	r3, [pc, #44]	; (8006024 <prvCheckTasksWaitingTermination+0x58>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	4a0a      	ldr	r2, [pc, #40]	; (8006024 <prvCheckTasksWaitingTermination+0x58>)
 8005ffc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ffe:	f000 fdf1 	bl	8006be4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f810 	bl	8006028 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006008:	4b06      	ldr	r3, [pc, #24]	; (8006024 <prvCheckTasksWaitingTermination+0x58>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1e1      	bne.n	8005fd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006010:	bf00      	nop
 8006012:	bf00      	nop
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	20000f4c 	.word	0x20000f4c
 8006020:	20000f78 	.word	0x20000f78
 8006024:	20000f60 	.word	0x20000f60

08006028 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3354      	adds	r3, #84	; 0x54
 8006034:	4618      	mov	r0, r3
 8006036:	f001 ff85 	bl	8007f44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006040:	2b00      	cmp	r3, #0
 8006042:	d108      	bne.n	8006056 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006048:	4618      	mov	r0, r3
 800604a:	f000 ff89 	bl	8006f60 <vPortFree>
				vPortFree( pxTCB );
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 ff86 	bl	8006f60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006054:	e018      	b.n	8006088 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800605c:	2b01      	cmp	r3, #1
 800605e:	d103      	bne.n	8006068 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 ff7d 	bl	8006f60 <vPortFree>
	}
 8006066:	e00f      	b.n	8006088 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800606e:	2b02      	cmp	r3, #2
 8006070:	d00a      	beq.n	8006088 <prvDeleteTCB+0x60>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	60fb      	str	r3, [r7, #12]
}
 8006084:	bf00      	nop
 8006086:	e7fe      	b.n	8006086 <prvDeleteTCB+0x5e>
	}
 8006088:	bf00      	nop
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006096:	4b0c      	ldr	r3, [pc, #48]	; (80060c8 <prvResetNextTaskUnblockTime+0x38>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d104      	bne.n	80060aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80060a0:	4b0a      	ldr	r3, [pc, #40]	; (80060cc <prvResetNextTaskUnblockTime+0x3c>)
 80060a2:	f04f 32ff 	mov.w	r2, #4294967295
 80060a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80060a8:	e008      	b.n	80060bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060aa:	4b07      	ldr	r3, [pc, #28]	; (80060c8 <prvResetNextTaskUnblockTime+0x38>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	4a04      	ldr	r2, [pc, #16]	; (80060cc <prvResetNextTaskUnblockTime+0x3c>)
 80060ba:	6013      	str	r3, [r2, #0]
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr
 80060c8:	20000f30 	.word	0x20000f30
 80060cc:	20000f98 	.word	0x20000f98

080060d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80060d6:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <xTaskGetSchedulerState+0x34>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d102      	bne.n	80060e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80060de:	2301      	movs	r3, #1
 80060e0:	607b      	str	r3, [r7, #4]
 80060e2:	e008      	b.n	80060f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060e4:	4b08      	ldr	r3, [pc, #32]	; (8006108 <xTaskGetSchedulerState+0x38>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d102      	bne.n	80060f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80060ec:	2302      	movs	r3, #2
 80060ee:	607b      	str	r3, [r7, #4]
 80060f0:	e001      	b.n	80060f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80060f2:	2300      	movs	r3, #0
 80060f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80060f6:	687b      	ldr	r3, [r7, #4]
	}
 80060f8:	4618      	mov	r0, r3
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr
 8006104:	20000f84 	.word	0x20000f84
 8006108:	20000fa0 	.word	0x20000fa0

0800610c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006118:	2300      	movs	r3, #0
 800611a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d056      	beq.n	80061d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006122:	4b2e      	ldr	r3, [pc, #184]	; (80061dc <xTaskPriorityDisinherit+0xd0>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	429a      	cmp	r2, r3
 800612a:	d00a      	beq.n	8006142 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	60fb      	str	r3, [r7, #12]
}
 800613e:	bf00      	nop
 8006140:	e7fe      	b.n	8006140 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10a      	bne.n	8006160 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800614a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	60bb      	str	r3, [r7, #8]
}
 800615c:	bf00      	nop
 800615e:	e7fe      	b.n	800615e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006164:	1e5a      	subs	r2, r3, #1
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006172:	429a      	cmp	r2, r3
 8006174:	d02c      	beq.n	80061d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800617a:	2b00      	cmp	r3, #0
 800617c:	d128      	bne.n	80061d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	3304      	adds	r3, #4
 8006182:	4618      	mov	r0, r3
 8006184:	f7fe fb84 	bl	8004890 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006194:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a0:	4b0f      	ldr	r3, [pc, #60]	; (80061e0 <xTaskPriorityDisinherit+0xd4>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d903      	bls.n	80061b0 <xTaskPriorityDisinherit+0xa4>
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ac:	4a0c      	ldr	r2, [pc, #48]	; (80061e0 <xTaskPriorityDisinherit+0xd4>)
 80061ae:	6013      	str	r3, [r2, #0]
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b4:	4613      	mov	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4a09      	ldr	r2, [pc, #36]	; (80061e4 <xTaskPriorityDisinherit+0xd8>)
 80061be:	441a      	add	r2, r3
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	3304      	adds	r3, #4
 80061c4:	4619      	mov	r1, r3
 80061c6:	4610      	mov	r0, r2
 80061c8:	f7fe fb05 	bl	80047d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80061cc:	2301      	movs	r3, #1
 80061ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80061d0:	697b      	ldr	r3, [r7, #20]
	}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	20000aa4 	.word	0x20000aa4
 80061e0:	20000f80 	.word	0x20000f80
 80061e4:	20000aa8 	.word	0x20000aa8

080061e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061f2:	4b21      	ldr	r3, [pc, #132]	; (8006278 <prvAddCurrentTaskToDelayedList+0x90>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061f8:	4b20      	ldr	r3, [pc, #128]	; (800627c <prvAddCurrentTaskToDelayedList+0x94>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3304      	adds	r3, #4
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fe fb46 	bl	8004890 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800620a:	d10a      	bne.n	8006222 <prvAddCurrentTaskToDelayedList+0x3a>
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d007      	beq.n	8006222 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006212:	4b1a      	ldr	r3, [pc, #104]	; (800627c <prvAddCurrentTaskToDelayedList+0x94>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	3304      	adds	r3, #4
 8006218:	4619      	mov	r1, r3
 800621a:	4819      	ldr	r0, [pc, #100]	; (8006280 <prvAddCurrentTaskToDelayedList+0x98>)
 800621c:	f7fe fadb 	bl	80047d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006220:	e026      	b.n	8006270 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4413      	add	r3, r2
 8006228:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800622a:	4b14      	ldr	r3, [pc, #80]	; (800627c <prvAddCurrentTaskToDelayedList+0x94>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	429a      	cmp	r2, r3
 8006238:	d209      	bcs.n	800624e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800623a:	4b12      	ldr	r3, [pc, #72]	; (8006284 <prvAddCurrentTaskToDelayedList+0x9c>)
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	4b0f      	ldr	r3, [pc, #60]	; (800627c <prvAddCurrentTaskToDelayedList+0x94>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3304      	adds	r3, #4
 8006244:	4619      	mov	r1, r3
 8006246:	4610      	mov	r0, r2
 8006248:	f7fe fae9 	bl	800481e <vListInsert>
}
 800624c:	e010      	b.n	8006270 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800624e:	4b0e      	ldr	r3, [pc, #56]	; (8006288 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	4b0a      	ldr	r3, [pc, #40]	; (800627c <prvAddCurrentTaskToDelayedList+0x94>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3304      	adds	r3, #4
 8006258:	4619      	mov	r1, r3
 800625a:	4610      	mov	r0, r2
 800625c:	f7fe fadf 	bl	800481e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006260:	4b0a      	ldr	r3, [pc, #40]	; (800628c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	429a      	cmp	r2, r3
 8006268:	d202      	bcs.n	8006270 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800626a:	4a08      	ldr	r2, [pc, #32]	; (800628c <prvAddCurrentTaskToDelayedList+0xa4>)
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	6013      	str	r3, [r2, #0]
}
 8006270:	bf00      	nop
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	20000f7c 	.word	0x20000f7c
 800627c:	20000aa4 	.word	0x20000aa4
 8006280:	20000f64 	.word	0x20000f64
 8006284:	20000f34 	.word	0x20000f34
 8006288:	20000f30 	.word	0x20000f30
 800628c:	20000f98 	.word	0x20000f98

08006290 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08a      	sub	sp, #40	; 0x28
 8006294:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006296:	2300      	movs	r3, #0
 8006298:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800629a:	f000 fb07 	bl	80068ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800629e:	4b1c      	ldr	r3, [pc, #112]	; (8006310 <xTimerCreateTimerTask+0x80>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d021      	beq.n	80062ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80062a6:	2300      	movs	r3, #0
 80062a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80062ae:	1d3a      	adds	r2, r7, #4
 80062b0:	f107 0108 	add.w	r1, r7, #8
 80062b4:	f107 030c 	add.w	r3, r7, #12
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7fe fa45 	bl	8004748 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	9202      	str	r2, [sp, #8]
 80062c6:	9301      	str	r3, [sp, #4]
 80062c8:	2302      	movs	r3, #2
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	2300      	movs	r3, #0
 80062ce:	460a      	mov	r2, r1
 80062d0:	4910      	ldr	r1, [pc, #64]	; (8006314 <xTimerCreateTimerTask+0x84>)
 80062d2:	4811      	ldr	r0, [pc, #68]	; (8006318 <xTimerCreateTimerTask+0x88>)
 80062d4:	f7ff f8e8 	bl	80054a8 <xTaskCreateStatic>
 80062d8:	4603      	mov	r3, r0
 80062da:	4a10      	ldr	r2, [pc, #64]	; (800631c <xTimerCreateTimerTask+0x8c>)
 80062dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80062de:	4b0f      	ldr	r3, [pc, #60]	; (800631c <xTimerCreateTimerTask+0x8c>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80062e6:	2301      	movs	r3, #1
 80062e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10a      	bne.n	8006306 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80062f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	613b      	str	r3, [r7, #16]
}
 8006302:	bf00      	nop
 8006304:	e7fe      	b.n	8006304 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006306:	697b      	ldr	r3, [r7, #20]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3718      	adds	r7, #24
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	20000fd4 	.word	0x20000fd4
 8006314:	08009efc 	.word	0x08009efc
 8006318:	08006455 	.word	0x08006455
 800631c:	20000fd8 	.word	0x20000fd8

08006320 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b08a      	sub	sp, #40	; 0x28
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
 800632c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800632e:	2300      	movs	r3, #0
 8006330:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10a      	bne.n	800634e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633c:	f383 8811 	msr	BASEPRI, r3
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	623b      	str	r3, [r7, #32]
}
 800634a:	bf00      	nop
 800634c:	e7fe      	b.n	800634c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800634e:	4b1a      	ldr	r3, [pc, #104]	; (80063b8 <xTimerGenericCommand+0x98>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d02a      	beq.n	80063ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2b05      	cmp	r3, #5
 8006366:	dc18      	bgt.n	800639a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006368:	f7ff feb2 	bl	80060d0 <xTaskGetSchedulerState>
 800636c:	4603      	mov	r3, r0
 800636e:	2b02      	cmp	r3, #2
 8006370:	d109      	bne.n	8006386 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006372:	4b11      	ldr	r3, [pc, #68]	; (80063b8 <xTimerGenericCommand+0x98>)
 8006374:	6818      	ldr	r0, [r3, #0]
 8006376:	f107 0110 	add.w	r1, r7, #16
 800637a:	2300      	movs	r3, #0
 800637c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800637e:	f7fe fbef 	bl	8004b60 <xQueueGenericSend>
 8006382:	6278      	str	r0, [r7, #36]	; 0x24
 8006384:	e012      	b.n	80063ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006386:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <xTimerGenericCommand+0x98>)
 8006388:	6818      	ldr	r0, [r3, #0]
 800638a:	f107 0110 	add.w	r1, r7, #16
 800638e:	2300      	movs	r3, #0
 8006390:	2200      	movs	r2, #0
 8006392:	f7fe fbe5 	bl	8004b60 <xQueueGenericSend>
 8006396:	6278      	str	r0, [r7, #36]	; 0x24
 8006398:	e008      	b.n	80063ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800639a:	4b07      	ldr	r3, [pc, #28]	; (80063b8 <xTimerGenericCommand+0x98>)
 800639c:	6818      	ldr	r0, [r3, #0]
 800639e:	f107 0110 	add.w	r1, r7, #16
 80063a2:	2300      	movs	r3, #0
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	f7fe fcd9 	bl	8004d5c <xQueueGenericSendFromISR>
 80063aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80063ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3728      	adds	r7, #40	; 0x28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	20000fd4 	.word	0x20000fd4

080063bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af02      	add	r7, sp, #8
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c6:	4b22      	ldr	r3, [pc, #136]	; (8006450 <prvProcessExpiredTimer+0x94>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	3304      	adds	r3, #4
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fe fa5b 	bl	8004890 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063e0:	f003 0304 	and.w	r3, r3, #4
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d022      	beq.n	800642e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	699a      	ldr	r2, [r3, #24]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	18d1      	adds	r1, r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	6978      	ldr	r0, [r7, #20]
 80063f6:	f000 f8d1 	bl	800659c <prvInsertTimerInActiveList>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d01f      	beq.n	8006440 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006400:	2300      	movs	r3, #0
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	2300      	movs	r3, #0
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	2100      	movs	r1, #0
 800640a:	6978      	ldr	r0, [r7, #20]
 800640c:	f7ff ff88 	bl	8006320 <xTimerGenericCommand>
 8006410:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d113      	bne.n	8006440 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641c:	f383 8811 	msr	BASEPRI, r3
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	60fb      	str	r3, [r7, #12]
}
 800642a:	bf00      	nop
 800642c:	e7fe      	b.n	800642c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006434:	f023 0301 	bic.w	r3, r3, #1
 8006438:	b2da      	uxtb	r2, r3
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	6978      	ldr	r0, [r7, #20]
 8006446:	4798      	blx	r3
}
 8006448:	bf00      	nop
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	20000fcc 	.word	0x20000fcc

08006454 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800645c:	f107 0308 	add.w	r3, r7, #8
 8006460:	4618      	mov	r0, r3
 8006462:	f000 f857 	bl	8006514 <prvGetNextExpireTime>
 8006466:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	4619      	mov	r1, r3
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 f803 	bl	8006478 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006472:	f000 f8d5 	bl	8006620 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006476:	e7f1      	b.n	800645c <prvTimerTask+0x8>

08006478 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006482:	f7ff fa39 	bl	80058f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006486:	f107 0308 	add.w	r3, r7, #8
 800648a:	4618      	mov	r0, r3
 800648c:	f000 f866 	bl	800655c <prvSampleTimeNow>
 8006490:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d130      	bne.n	80064fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10a      	bne.n	80064b4 <prvProcessTimerOrBlockTask+0x3c>
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d806      	bhi.n	80064b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80064a6:	f7ff fa35 	bl	8005914 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80064aa:	68f9      	ldr	r1, [r7, #12]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7ff ff85 	bl	80063bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80064b2:	e024      	b.n	80064fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d008      	beq.n	80064cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80064ba:	4b13      	ldr	r3, [pc, #76]	; (8006508 <prvProcessTimerOrBlockTask+0x90>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <prvProcessTimerOrBlockTask+0x50>
 80064c4:	2301      	movs	r3, #1
 80064c6:	e000      	b.n	80064ca <prvProcessTimerOrBlockTask+0x52>
 80064c8:	2300      	movs	r3, #0
 80064ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80064cc:	4b0f      	ldr	r3, [pc, #60]	; (800650c <prvProcessTimerOrBlockTask+0x94>)
 80064ce:	6818      	ldr	r0, [r3, #0]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	4619      	mov	r1, r3
 80064da:	f7fe ffb1 	bl	8005440 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80064de:	f7ff fa19 	bl	8005914 <xTaskResumeAll>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10a      	bne.n	80064fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80064e8:	4b09      	ldr	r3, [pc, #36]	; (8006510 <prvProcessTimerOrBlockTask+0x98>)
 80064ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	f3bf 8f6f 	isb	sy
}
 80064f8:	e001      	b.n	80064fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80064fa:	f7ff fa0b 	bl	8005914 <xTaskResumeAll>
}
 80064fe:	bf00      	nop
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	20000fd0 	.word	0x20000fd0
 800650c:	20000fd4 	.word	0x20000fd4
 8006510:	e000ed04 	.word	0xe000ed04

08006514 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800651c:	4b0e      	ldr	r3, [pc, #56]	; (8006558 <prvGetNextExpireTime+0x44>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <prvGetNextExpireTime+0x16>
 8006526:	2201      	movs	r2, #1
 8006528:	e000      	b.n	800652c <prvGetNextExpireTime+0x18>
 800652a:	2200      	movs	r2, #0
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d105      	bne.n	8006544 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006538:	4b07      	ldr	r3, [pc, #28]	; (8006558 <prvGetNextExpireTime+0x44>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	60fb      	str	r3, [r7, #12]
 8006542:	e001      	b.n	8006548 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006548:	68fb      	ldr	r3, [r7, #12]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	20000fcc 	.word	0x20000fcc

0800655c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006564:	f7ff fa74 	bl	8005a50 <xTaskGetTickCount>
 8006568:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800656a:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <prvSampleTimeNow+0x3c>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	429a      	cmp	r2, r3
 8006572:	d205      	bcs.n	8006580 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006574:	f000 f936 	bl	80067e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	e002      	b.n	8006586 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006586:	4a04      	ldr	r2, [pc, #16]	; (8006598 <prvSampleTimeNow+0x3c>)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800658c:	68fb      	ldr	r3, [r7, #12]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	20000fdc 	.word	0x20000fdc

0800659c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80065aa:	2300      	movs	r3, #0
 80065ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d812      	bhi.n	80065e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	1ad2      	subs	r2, r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d302      	bcc.n	80065d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80065d0:	2301      	movs	r3, #1
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	e01b      	b.n	800660e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80065d6:	4b10      	ldr	r3, [pc, #64]	; (8006618 <prvInsertTimerInActiveList+0x7c>)
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	3304      	adds	r3, #4
 80065de:	4619      	mov	r1, r3
 80065e0:	4610      	mov	r0, r2
 80065e2:	f7fe f91c 	bl	800481e <vListInsert>
 80065e6:	e012      	b.n	800660e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d206      	bcs.n	80065fe <prvInsertTimerInActiveList+0x62>
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d302      	bcc.n	80065fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80065f8:	2301      	movs	r3, #1
 80065fa:	617b      	str	r3, [r7, #20]
 80065fc:	e007      	b.n	800660e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065fe:	4b07      	ldr	r3, [pc, #28]	; (800661c <prvInsertTimerInActiveList+0x80>)
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	3304      	adds	r3, #4
 8006606:	4619      	mov	r1, r3
 8006608:	4610      	mov	r0, r2
 800660a:	f7fe f908 	bl	800481e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800660e:	697b      	ldr	r3, [r7, #20]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3718      	adds	r7, #24
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	20000fd0 	.word	0x20000fd0
 800661c:	20000fcc 	.word	0x20000fcc

08006620 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b08e      	sub	sp, #56	; 0x38
 8006624:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006626:	e0ca      	b.n	80067be <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	da18      	bge.n	8006660 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800662e:	1d3b      	adds	r3, r7, #4
 8006630:	3304      	adds	r3, #4
 8006632:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10a      	bne.n	8006650 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	61fb      	str	r3, [r7, #28]
}
 800664c:	bf00      	nop
 800664e:	e7fe      	b.n	800664e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006656:	6850      	ldr	r0, [r2, #4]
 8006658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800665a:	6892      	ldr	r2, [r2, #8]
 800665c:	4611      	mov	r1, r2
 800665e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	f2c0 80aa 	blt.w	80067bc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d004      	beq.n	800667e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	3304      	adds	r3, #4
 8006678:	4618      	mov	r0, r3
 800667a:	f7fe f909 	bl	8004890 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800667e:	463b      	mov	r3, r7
 8006680:	4618      	mov	r0, r3
 8006682:	f7ff ff6b 	bl	800655c <prvSampleTimeNow>
 8006686:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b09      	cmp	r3, #9
 800668c:	f200 8097 	bhi.w	80067be <prvProcessReceivedCommands+0x19e>
 8006690:	a201      	add	r2, pc, #4	; (adr r2, 8006698 <prvProcessReceivedCommands+0x78>)
 8006692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006696:	bf00      	nop
 8006698:	080066c1 	.word	0x080066c1
 800669c:	080066c1 	.word	0x080066c1
 80066a0:	080066c1 	.word	0x080066c1
 80066a4:	08006735 	.word	0x08006735
 80066a8:	08006749 	.word	0x08006749
 80066ac:	08006793 	.word	0x08006793
 80066b0:	080066c1 	.word	0x080066c1
 80066b4:	080066c1 	.word	0x080066c1
 80066b8:	08006735 	.word	0x08006735
 80066bc:	08006749 	.word	0x08006749
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066c6:	f043 0301 	orr.w	r3, r3, #1
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	18d1      	adds	r1, r2, r3
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066e0:	f7ff ff5c 	bl	800659c <prvInsertTimerInActiveList>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d069      	beq.n	80067be <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d05e      	beq.n	80067be <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	441a      	add	r2, r3
 8006708:	2300      	movs	r3, #0
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	2300      	movs	r3, #0
 800670e:	2100      	movs	r1, #0
 8006710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006712:	f7ff fe05 	bl	8006320 <xTimerGenericCommand>
 8006716:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006718:	6a3b      	ldr	r3, [r7, #32]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d14f      	bne.n	80067be <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	61bb      	str	r3, [r7, #24]
}
 8006730:	bf00      	nop
 8006732:	e7fe      	b.n	8006732 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800673a:	f023 0301 	bic.w	r3, r3, #1
 800673e:	b2da      	uxtb	r2, r3
 8006740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006742:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006746:	e03a      	b.n	80067be <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800674e:	f043 0301 	orr.w	r3, r3, #1
 8006752:	b2da      	uxtb	r2, r3
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10a      	bne.n	800677e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676c:	f383 8811 	msr	BASEPRI, r3
 8006770:	f3bf 8f6f 	isb	sy
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	617b      	str	r3, [r7, #20]
}
 800677a:	bf00      	nop
 800677c:	e7fe      	b.n	800677c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800677e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006780:	699a      	ldr	r2, [r3, #24]
 8006782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006784:	18d1      	adds	r1, r2, r3
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800678a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800678c:	f7ff ff06 	bl	800659c <prvInsertTimerInActiveList>
					break;
 8006790:	e015      	b.n	80067be <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006794:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b00      	cmp	r3, #0
 800679e:	d103      	bne.n	80067a8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80067a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067a2:	f000 fbdd 	bl	8006f60 <vPortFree>
 80067a6:	e00a      	b.n	80067be <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067ae:	f023 0301 	bic.w	r3, r3, #1
 80067b2:	b2da      	uxtb	r2, r3
 80067b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80067ba:	e000      	b.n	80067be <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80067bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067be:	4b08      	ldr	r3, [pc, #32]	; (80067e0 <prvProcessReceivedCommands+0x1c0>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	1d39      	adds	r1, r7, #4
 80067c4:	2200      	movs	r2, #0
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fe fb64 	bl	8004e94 <xQueueReceive>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f47f af2a 	bne.w	8006628 <prvProcessReceivedCommands+0x8>
	}
}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop
 80067d8:	3730      	adds	r7, #48	; 0x30
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20000fd4 	.word	0x20000fd4

080067e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b088      	sub	sp, #32
 80067e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067ea:	e048      	b.n	800687e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067ec:	4b2d      	ldr	r3, [pc, #180]	; (80068a4 <prvSwitchTimerLists+0xc0>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067f6:	4b2b      	ldr	r3, [pc, #172]	; (80068a4 <prvSwitchTimerLists+0xc0>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	3304      	adds	r3, #4
 8006804:	4618      	mov	r0, r3
 8006806:	f7fe f843 	bl	8004890 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006818:	f003 0304 	and.w	r3, r3, #4
 800681c:	2b00      	cmp	r3, #0
 800681e:	d02e      	beq.n	800687e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	4413      	add	r3, r2
 8006828:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	429a      	cmp	r2, r3
 8006830:	d90e      	bls.n	8006850 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800683e:	4b19      	ldr	r3, [pc, #100]	; (80068a4 <prvSwitchTimerLists+0xc0>)
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	3304      	adds	r3, #4
 8006846:	4619      	mov	r1, r3
 8006848:	4610      	mov	r0, r2
 800684a:	f7fd ffe8 	bl	800481e <vListInsert>
 800684e:	e016      	b.n	800687e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006850:	2300      	movs	r3, #0
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	2300      	movs	r3, #0
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	2100      	movs	r1, #0
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f7ff fd60 	bl	8006320 <xTimerGenericCommand>
 8006860:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10a      	bne.n	800687e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	603b      	str	r3, [r7, #0]
}
 800687a:	bf00      	nop
 800687c:	e7fe      	b.n	800687c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800687e:	4b09      	ldr	r3, [pc, #36]	; (80068a4 <prvSwitchTimerLists+0xc0>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1b1      	bne.n	80067ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006888:	4b06      	ldr	r3, [pc, #24]	; (80068a4 <prvSwitchTimerLists+0xc0>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800688e:	4b06      	ldr	r3, [pc, #24]	; (80068a8 <prvSwitchTimerLists+0xc4>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a04      	ldr	r2, [pc, #16]	; (80068a4 <prvSwitchTimerLists+0xc0>)
 8006894:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006896:	4a04      	ldr	r2, [pc, #16]	; (80068a8 <prvSwitchTimerLists+0xc4>)
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	6013      	str	r3, [r2, #0]
}
 800689c:	bf00      	nop
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	20000fcc 	.word	0x20000fcc
 80068a8:	20000fd0 	.word	0x20000fd0

080068ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80068b2:	f000 f967 	bl	8006b84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80068b6:	4b15      	ldr	r3, [pc, #84]	; (800690c <prvCheckForValidListAndQueue+0x60>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d120      	bne.n	8006900 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80068be:	4814      	ldr	r0, [pc, #80]	; (8006910 <prvCheckForValidListAndQueue+0x64>)
 80068c0:	f7fd ff5c 	bl	800477c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80068c4:	4813      	ldr	r0, [pc, #76]	; (8006914 <prvCheckForValidListAndQueue+0x68>)
 80068c6:	f7fd ff59 	bl	800477c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80068ca:	4b13      	ldr	r3, [pc, #76]	; (8006918 <prvCheckForValidListAndQueue+0x6c>)
 80068cc:	4a10      	ldr	r2, [pc, #64]	; (8006910 <prvCheckForValidListAndQueue+0x64>)
 80068ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80068d0:	4b12      	ldr	r3, [pc, #72]	; (800691c <prvCheckForValidListAndQueue+0x70>)
 80068d2:	4a10      	ldr	r2, [pc, #64]	; (8006914 <prvCheckForValidListAndQueue+0x68>)
 80068d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80068d6:	2300      	movs	r3, #0
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	4b11      	ldr	r3, [pc, #68]	; (8006920 <prvCheckForValidListAndQueue+0x74>)
 80068dc:	4a11      	ldr	r2, [pc, #68]	; (8006924 <prvCheckForValidListAndQueue+0x78>)
 80068de:	2110      	movs	r1, #16
 80068e0:	200a      	movs	r0, #10
 80068e2:	f7fe f867 	bl	80049b4 <xQueueGenericCreateStatic>
 80068e6:	4603      	mov	r3, r0
 80068e8:	4a08      	ldr	r2, [pc, #32]	; (800690c <prvCheckForValidListAndQueue+0x60>)
 80068ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80068ec:	4b07      	ldr	r3, [pc, #28]	; (800690c <prvCheckForValidListAndQueue+0x60>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d005      	beq.n	8006900 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068f4:	4b05      	ldr	r3, [pc, #20]	; (800690c <prvCheckForValidListAndQueue+0x60>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	490b      	ldr	r1, [pc, #44]	; (8006928 <prvCheckForValidListAndQueue+0x7c>)
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fe fd76 	bl	80053ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006900:	f000 f970 	bl	8006be4 <vPortExitCritical>
}
 8006904:	bf00      	nop
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000fd4 	.word	0x20000fd4
 8006910:	20000fa4 	.word	0x20000fa4
 8006914:	20000fb8 	.word	0x20000fb8
 8006918:	20000fcc 	.word	0x20000fcc
 800691c:	20000fd0 	.word	0x20000fd0
 8006920:	20001080 	.word	0x20001080
 8006924:	20000fe0 	.word	0x20000fe0
 8006928:	08009f04 	.word	0x08009f04

0800692c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	3b04      	subs	r3, #4
 800693c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006944:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	3b04      	subs	r3, #4
 800694a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f023 0201 	bic.w	r2, r3, #1
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	3b04      	subs	r3, #4
 800695a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800695c:	4a0c      	ldr	r2, [pc, #48]	; (8006990 <pxPortInitialiseStack+0x64>)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3b14      	subs	r3, #20
 8006966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3b04      	subs	r3, #4
 8006972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f06f 0202 	mvn.w	r2, #2
 800697a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	3b20      	subs	r3, #32
 8006980:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006982:	68fb      	ldr	r3, [r7, #12]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	08006995 	.word	0x08006995

08006994 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800699a:	2300      	movs	r3, #0
 800699c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800699e:	4b12      	ldr	r3, [pc, #72]	; (80069e8 <prvTaskExitError+0x54>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a6:	d00a      	beq.n	80069be <prvTaskExitError+0x2a>
	__asm volatile
 80069a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ac:	f383 8811 	msr	BASEPRI, r3
 80069b0:	f3bf 8f6f 	isb	sy
 80069b4:	f3bf 8f4f 	dsb	sy
 80069b8:	60fb      	str	r3, [r7, #12]
}
 80069ba:	bf00      	nop
 80069bc:	e7fe      	b.n	80069bc <prvTaskExitError+0x28>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	60bb      	str	r3, [r7, #8]
}
 80069d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80069d2:	bf00      	nop
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d0fc      	beq.n	80069d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80069da:	bf00      	nop
 80069dc:	bf00      	nop
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	20000010 	.word	0x20000010
 80069ec:	00000000 	.word	0x00000000

080069f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80069f0:	4b07      	ldr	r3, [pc, #28]	; (8006a10 <pxCurrentTCBConst2>)
 80069f2:	6819      	ldr	r1, [r3, #0]
 80069f4:	6808      	ldr	r0, [r1, #0]
 80069f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fa:	f380 8809 	msr	PSP, r0
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f04f 0000 	mov.w	r0, #0
 8006a06:	f380 8811 	msr	BASEPRI, r0
 8006a0a:	4770      	bx	lr
 8006a0c:	f3af 8000 	nop.w

08006a10 <pxCurrentTCBConst2>:
 8006a10:	20000aa4 	.word	0x20000aa4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a14:	bf00      	nop
 8006a16:	bf00      	nop

08006a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a18:	4808      	ldr	r0, [pc, #32]	; (8006a3c <prvPortStartFirstTask+0x24>)
 8006a1a:	6800      	ldr	r0, [r0, #0]
 8006a1c:	6800      	ldr	r0, [r0, #0]
 8006a1e:	f380 8808 	msr	MSP, r0
 8006a22:	f04f 0000 	mov.w	r0, #0
 8006a26:	f380 8814 	msr	CONTROL, r0
 8006a2a:	b662      	cpsie	i
 8006a2c:	b661      	cpsie	f
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	df00      	svc	0
 8006a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a3a:	bf00      	nop
 8006a3c:	e000ed08 	.word	0xe000ed08

08006a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a46:	4b46      	ldr	r3, [pc, #280]	; (8006b60 <xPortStartScheduler+0x120>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a46      	ldr	r2, [pc, #280]	; (8006b64 <xPortStartScheduler+0x124>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d10a      	bne.n	8006a66 <xPortStartScheduler+0x26>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	613b      	str	r3, [r7, #16]
}
 8006a62:	bf00      	nop
 8006a64:	e7fe      	b.n	8006a64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a66:	4b3e      	ldr	r3, [pc, #248]	; (8006b60 <xPortStartScheduler+0x120>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a3f      	ldr	r2, [pc, #252]	; (8006b68 <xPortStartScheduler+0x128>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d10a      	bne.n	8006a86 <xPortStartScheduler+0x46>
	__asm volatile
 8006a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	60fb      	str	r3, [r7, #12]
}
 8006a82:	bf00      	nop
 8006a84:	e7fe      	b.n	8006a84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a86:	4b39      	ldr	r3, [pc, #228]	; (8006b6c <xPortStartScheduler+0x12c>)
 8006a88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	22ff      	movs	r2, #255	; 0xff
 8006a96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006aa0:	78fb      	ldrb	r3, [r7, #3]
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	4b31      	ldr	r3, [pc, #196]	; (8006b70 <xPortStartScheduler+0x130>)
 8006aac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006aae:	4b31      	ldr	r3, [pc, #196]	; (8006b74 <xPortStartScheduler+0x134>)
 8006ab0:	2207      	movs	r2, #7
 8006ab2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ab4:	e009      	b.n	8006aca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006ab6:	4b2f      	ldr	r3, [pc, #188]	; (8006b74 <xPortStartScheduler+0x134>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3b01      	subs	r3, #1
 8006abc:	4a2d      	ldr	r2, [pc, #180]	; (8006b74 <xPortStartScheduler+0x134>)
 8006abe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ac0:	78fb      	ldrb	r3, [r7, #3]
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	005b      	lsls	r3, r3, #1
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006aca:	78fb      	ldrb	r3, [r7, #3]
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad2:	2b80      	cmp	r3, #128	; 0x80
 8006ad4:	d0ef      	beq.n	8006ab6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ad6:	4b27      	ldr	r3, [pc, #156]	; (8006b74 <xPortStartScheduler+0x134>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f1c3 0307 	rsb	r3, r3, #7
 8006ade:	2b04      	cmp	r3, #4
 8006ae0:	d00a      	beq.n	8006af8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	60bb      	str	r3, [r7, #8]
}
 8006af4:	bf00      	nop
 8006af6:	e7fe      	b.n	8006af6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006af8:	4b1e      	ldr	r3, [pc, #120]	; (8006b74 <xPortStartScheduler+0x134>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	021b      	lsls	r3, r3, #8
 8006afe:	4a1d      	ldr	r2, [pc, #116]	; (8006b74 <xPortStartScheduler+0x134>)
 8006b00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b02:	4b1c      	ldr	r3, [pc, #112]	; (8006b74 <xPortStartScheduler+0x134>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b0a:	4a1a      	ldr	r2, [pc, #104]	; (8006b74 <xPortStartScheduler+0x134>)
 8006b0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	b2da      	uxtb	r2, r3
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b16:	4b18      	ldr	r3, [pc, #96]	; (8006b78 <xPortStartScheduler+0x138>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a17      	ldr	r2, [pc, #92]	; (8006b78 <xPortStartScheduler+0x138>)
 8006b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b22:	4b15      	ldr	r3, [pc, #84]	; (8006b78 <xPortStartScheduler+0x138>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a14      	ldr	r2, [pc, #80]	; (8006b78 <xPortStartScheduler+0x138>)
 8006b28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b2e:	f000 f8dd 	bl	8006cec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b32:	4b12      	ldr	r3, [pc, #72]	; (8006b7c <xPortStartScheduler+0x13c>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b38:	f000 f8fc 	bl	8006d34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b3c:	4b10      	ldr	r3, [pc, #64]	; (8006b80 <xPortStartScheduler+0x140>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a0f      	ldr	r2, [pc, #60]	; (8006b80 <xPortStartScheduler+0x140>)
 8006b42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006b46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b48:	f7ff ff66 	bl	8006a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b4c:	f7ff f84a 	bl	8005be4 <vTaskSwitchContext>
	prvTaskExitError();
 8006b50:	f7ff ff20 	bl	8006994 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	e000ed00 	.word	0xe000ed00
 8006b64:	410fc271 	.word	0x410fc271
 8006b68:	410fc270 	.word	0x410fc270
 8006b6c:	e000e400 	.word	0xe000e400
 8006b70:	200010d0 	.word	0x200010d0
 8006b74:	200010d4 	.word	0x200010d4
 8006b78:	e000ed20 	.word	0xe000ed20
 8006b7c:	20000010 	.word	0x20000010
 8006b80:	e000ef34 	.word	0xe000ef34

08006b84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	607b      	str	r3, [r7, #4]
}
 8006b9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b9e:	4b0f      	ldr	r3, [pc, #60]	; (8006bdc <vPortEnterCritical+0x58>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	4a0d      	ldr	r2, [pc, #52]	; (8006bdc <vPortEnterCritical+0x58>)
 8006ba6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ba8:	4b0c      	ldr	r3, [pc, #48]	; (8006bdc <vPortEnterCritical+0x58>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d10f      	bne.n	8006bd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006bb0:	4b0b      	ldr	r3, [pc, #44]	; (8006be0 <vPortEnterCritical+0x5c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00a      	beq.n	8006bd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	603b      	str	r3, [r7, #0]
}
 8006bcc:	bf00      	nop
 8006bce:	e7fe      	b.n	8006bce <vPortEnterCritical+0x4a>
	}
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	20000010 	.word	0x20000010
 8006be0:	e000ed04 	.word	0xe000ed04

08006be4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006bea:	4b12      	ldr	r3, [pc, #72]	; (8006c34 <vPortExitCritical+0x50>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10a      	bne.n	8006c08 <vPortExitCritical+0x24>
	__asm volatile
 8006bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	607b      	str	r3, [r7, #4]
}
 8006c04:	bf00      	nop
 8006c06:	e7fe      	b.n	8006c06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c08:	4b0a      	ldr	r3, [pc, #40]	; (8006c34 <vPortExitCritical+0x50>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	4a09      	ldr	r2, [pc, #36]	; (8006c34 <vPortExitCritical+0x50>)
 8006c10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c12:	4b08      	ldr	r3, [pc, #32]	; (8006c34 <vPortExitCritical+0x50>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d105      	bne.n	8006c26 <vPortExitCritical+0x42>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	f383 8811 	msr	BASEPRI, r3
}
 8006c24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c26:	bf00      	nop
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	20000010 	.word	0x20000010
	...

08006c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c40:	f3ef 8009 	mrs	r0, PSP
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	4b15      	ldr	r3, [pc, #84]	; (8006ca0 <pxCurrentTCBConst>)
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	f01e 0f10 	tst.w	lr, #16
 8006c50:	bf08      	it	eq
 8006c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c5a:	6010      	str	r0, [r2, #0]
 8006c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c64:	f380 8811 	msr	BASEPRI, r0
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f7fe ffb8 	bl	8005be4 <vTaskSwitchContext>
 8006c74:	f04f 0000 	mov.w	r0, #0
 8006c78:	f380 8811 	msr	BASEPRI, r0
 8006c7c:	bc09      	pop	{r0, r3}
 8006c7e:	6819      	ldr	r1, [r3, #0]
 8006c80:	6808      	ldr	r0, [r1, #0]
 8006c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c86:	f01e 0f10 	tst.w	lr, #16
 8006c8a:	bf08      	it	eq
 8006c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c90:	f380 8809 	msr	PSP, r0
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	f3af 8000 	nop.w

08006ca0 <pxCurrentTCBConst>:
 8006ca0:	20000aa4 	.word	0x20000aa4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ca4:	bf00      	nop
 8006ca6:	bf00      	nop

08006ca8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	607b      	str	r3, [r7, #4]
}
 8006cc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006cc2:	f7fe fed5 	bl	8005a70 <xTaskIncrementTick>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006ccc:	4b06      	ldr	r3, [pc, #24]	; (8006ce8 <xPortSysTickHandler+0x40>)
 8006cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	f383 8811 	msr	BASEPRI, r3
}
 8006cde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ce0:	bf00      	nop
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	e000ed04 	.word	0xe000ed04

08006cec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006cec:	b480      	push	{r7}
 8006cee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006cf0:	4b0b      	ldr	r3, [pc, #44]	; (8006d20 <vPortSetupTimerInterrupt+0x34>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006cf6:	4b0b      	ldr	r3, [pc, #44]	; (8006d24 <vPortSetupTimerInterrupt+0x38>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006cfc:	4b0a      	ldr	r3, [pc, #40]	; (8006d28 <vPortSetupTimerInterrupt+0x3c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a0a      	ldr	r2, [pc, #40]	; (8006d2c <vPortSetupTimerInterrupt+0x40>)
 8006d02:	fba2 2303 	umull	r2, r3, r2, r3
 8006d06:	099b      	lsrs	r3, r3, #6
 8006d08:	4a09      	ldr	r2, [pc, #36]	; (8006d30 <vPortSetupTimerInterrupt+0x44>)
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d0e:	4b04      	ldr	r3, [pc, #16]	; (8006d20 <vPortSetupTimerInterrupt+0x34>)
 8006d10:	2207      	movs	r2, #7
 8006d12:	601a      	str	r2, [r3, #0]
}
 8006d14:	bf00      	nop
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	e000e010 	.word	0xe000e010
 8006d24:	e000e018 	.word	0xe000e018
 8006d28:	20000004 	.word	0x20000004
 8006d2c:	10624dd3 	.word	0x10624dd3
 8006d30:	e000e014 	.word	0xe000e014

08006d34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d44 <vPortEnableVFP+0x10>
 8006d38:	6801      	ldr	r1, [r0, #0]
 8006d3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d3e:	6001      	str	r1, [r0, #0]
 8006d40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d42:	bf00      	nop
 8006d44:	e000ed88 	.word	0xe000ed88

08006d48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d4e:	f3ef 8305 	mrs	r3, IPSR
 8006d52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b0f      	cmp	r3, #15
 8006d58:	d914      	bls.n	8006d84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d5a:	4a17      	ldr	r2, [pc, #92]	; (8006db8 <vPortValidateInterruptPriority+0x70>)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4413      	add	r3, r2
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d64:	4b15      	ldr	r3, [pc, #84]	; (8006dbc <vPortValidateInterruptPriority+0x74>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	7afa      	ldrb	r2, [r7, #11]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d20a      	bcs.n	8006d84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	607b      	str	r3, [r7, #4]
}
 8006d80:	bf00      	nop
 8006d82:	e7fe      	b.n	8006d82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d84:	4b0e      	ldr	r3, [pc, #56]	; (8006dc0 <vPortValidateInterruptPriority+0x78>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006d8c:	4b0d      	ldr	r3, [pc, #52]	; (8006dc4 <vPortValidateInterruptPriority+0x7c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d90a      	bls.n	8006daa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d98:	f383 8811 	msr	BASEPRI, r3
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	603b      	str	r3, [r7, #0]
}
 8006da6:	bf00      	nop
 8006da8:	e7fe      	b.n	8006da8 <vPortValidateInterruptPriority+0x60>
	}
 8006daa:	bf00      	nop
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	e000e3f0 	.word	0xe000e3f0
 8006dbc:	200010d0 	.word	0x200010d0
 8006dc0:	e000ed0c 	.word	0xe000ed0c
 8006dc4:	200010d4 	.word	0x200010d4

08006dc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08a      	sub	sp, #40	; 0x28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006dd4:	f7fe fd90 	bl	80058f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006dd8:	4b5b      	ldr	r3, [pc, #364]	; (8006f48 <pvPortMalloc+0x180>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006de0:	f000 f920 	bl	8007024 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006de4:	4b59      	ldr	r3, [pc, #356]	; (8006f4c <pvPortMalloc+0x184>)
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4013      	ands	r3, r2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f040 8093 	bne.w	8006f18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d01d      	beq.n	8006e34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006df8:	2208      	movs	r2, #8
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f003 0307 	and.w	r3, r3, #7
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d014      	beq.n	8006e34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f023 0307 	bic.w	r3, r3, #7
 8006e10:	3308      	adds	r3, #8
 8006e12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00a      	beq.n	8006e34 <pvPortMalloc+0x6c>
	__asm volatile
 8006e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	617b      	str	r3, [r7, #20]
}
 8006e30:	bf00      	nop
 8006e32:	e7fe      	b.n	8006e32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d06e      	beq.n	8006f18 <pvPortMalloc+0x150>
 8006e3a:	4b45      	ldr	r3, [pc, #276]	; (8006f50 <pvPortMalloc+0x188>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d869      	bhi.n	8006f18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e44:	4b43      	ldr	r3, [pc, #268]	; (8006f54 <pvPortMalloc+0x18c>)
 8006e46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e48:	4b42      	ldr	r3, [pc, #264]	; (8006f54 <pvPortMalloc+0x18c>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e4e:	e004      	b.n	8006e5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d903      	bls.n	8006e6c <pvPortMalloc+0xa4>
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1f1      	bne.n	8006e50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e6c:	4b36      	ldr	r3, [pc, #216]	; (8006f48 <pvPortMalloc+0x180>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d050      	beq.n	8006f18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e76:	6a3b      	ldr	r3, [r7, #32]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2208      	movs	r2, #8
 8006e7c:	4413      	add	r3, r2
 8006e7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	6a3b      	ldr	r3, [r7, #32]
 8006e86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	1ad2      	subs	r2, r2, r3
 8006e90:	2308      	movs	r3, #8
 8006e92:	005b      	lsls	r3, r3, #1
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d91f      	bls.n	8006ed8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	f003 0307 	and.w	r3, r3, #7
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <pvPortMalloc+0xf8>
	__asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	613b      	str	r3, [r7, #16]
}
 8006ebc:	bf00      	nop
 8006ebe:	e7fe      	b.n	8006ebe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	685a      	ldr	r2, [r3, #4]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	1ad2      	subs	r2, r2, r3
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ed2:	69b8      	ldr	r0, [r7, #24]
 8006ed4:	f000 f908 	bl	80070e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ed8:	4b1d      	ldr	r3, [pc, #116]	; (8006f50 <pvPortMalloc+0x188>)
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	4a1b      	ldr	r2, [pc, #108]	; (8006f50 <pvPortMalloc+0x188>)
 8006ee4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ee6:	4b1a      	ldr	r3, [pc, #104]	; (8006f50 <pvPortMalloc+0x188>)
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	4b1b      	ldr	r3, [pc, #108]	; (8006f58 <pvPortMalloc+0x190>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d203      	bcs.n	8006efa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ef2:	4b17      	ldr	r3, [pc, #92]	; (8006f50 <pvPortMalloc+0x188>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a18      	ldr	r2, [pc, #96]	; (8006f58 <pvPortMalloc+0x190>)
 8006ef8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	4b13      	ldr	r3, [pc, #76]	; (8006f4c <pvPortMalloc+0x184>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	431a      	orrs	r2, r3
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f0e:	4b13      	ldr	r3, [pc, #76]	; (8006f5c <pvPortMalloc+0x194>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3301      	adds	r3, #1
 8006f14:	4a11      	ldr	r2, [pc, #68]	; (8006f5c <pvPortMalloc+0x194>)
 8006f16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f18:	f7fe fcfc 	bl	8005914 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	f003 0307 	and.w	r3, r3, #7
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00a      	beq.n	8006f3c <pvPortMalloc+0x174>
	__asm volatile
 8006f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2a:	f383 8811 	msr	BASEPRI, r3
 8006f2e:	f3bf 8f6f 	isb	sy
 8006f32:	f3bf 8f4f 	dsb	sy
 8006f36:	60fb      	str	r3, [r7, #12]
}
 8006f38:	bf00      	nop
 8006f3a:	e7fe      	b.n	8006f3a <pvPortMalloc+0x172>
	return pvReturn;
 8006f3c:	69fb      	ldr	r3, [r7, #28]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3728      	adds	r7, #40	; 0x28
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	20002468 	.word	0x20002468
 8006f4c:	2000247c 	.word	0x2000247c
 8006f50:	2000246c 	.word	0x2000246c
 8006f54:	20002460 	.word	0x20002460
 8006f58:	20002470 	.word	0x20002470
 8006f5c:	20002474 	.word	0x20002474

08006f60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d04d      	beq.n	800700e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f72:	2308      	movs	r3, #8
 8006f74:	425b      	negs	r3, r3
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	4413      	add	r3, r2
 8006f7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	685a      	ldr	r2, [r3, #4]
 8006f84:	4b24      	ldr	r3, [pc, #144]	; (8007018 <vPortFree+0xb8>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4013      	ands	r3, r2
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10a      	bne.n	8006fa4 <vPortFree+0x44>
	__asm volatile
 8006f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	60fb      	str	r3, [r7, #12]
}
 8006fa0:	bf00      	nop
 8006fa2:	e7fe      	b.n	8006fa2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00a      	beq.n	8006fc2 <vPortFree+0x62>
	__asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	60bb      	str	r3, [r7, #8]
}
 8006fbe:	bf00      	nop
 8006fc0:	e7fe      	b.n	8006fc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	685a      	ldr	r2, [r3, #4]
 8006fc6:	4b14      	ldr	r3, [pc, #80]	; (8007018 <vPortFree+0xb8>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d01e      	beq.n	800700e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d11a      	bne.n	800700e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	4b0e      	ldr	r3, [pc, #56]	; (8007018 <vPortFree+0xb8>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	43db      	mvns	r3, r3
 8006fe2:	401a      	ands	r2, r3
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006fe8:	f7fe fc86 	bl	80058f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	4b0a      	ldr	r3, [pc, #40]	; (800701c <vPortFree+0xbc>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	4a09      	ldr	r2, [pc, #36]	; (800701c <vPortFree+0xbc>)
 8006ff8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ffa:	6938      	ldr	r0, [r7, #16]
 8006ffc:	f000 f874 	bl	80070e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007000:	4b07      	ldr	r3, [pc, #28]	; (8007020 <vPortFree+0xc0>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3301      	adds	r3, #1
 8007006:	4a06      	ldr	r2, [pc, #24]	; (8007020 <vPortFree+0xc0>)
 8007008:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800700a:	f7fe fc83 	bl	8005914 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800700e:	bf00      	nop
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	2000247c 	.word	0x2000247c
 800701c:	2000246c 	.word	0x2000246c
 8007020:	20002478 	.word	0x20002478

08007024 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800702a:	f241 3388 	movw	r3, #5000	; 0x1388
 800702e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007030:	4b27      	ldr	r3, [pc, #156]	; (80070d0 <prvHeapInit+0xac>)
 8007032:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f003 0307 	and.w	r3, r3, #7
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00c      	beq.n	8007058 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	3307      	adds	r3, #7
 8007042:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f023 0307 	bic.w	r3, r3, #7
 800704a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	4a1f      	ldr	r2, [pc, #124]	; (80070d0 <prvHeapInit+0xac>)
 8007054:	4413      	add	r3, r2
 8007056:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800705c:	4a1d      	ldr	r2, [pc, #116]	; (80070d4 <prvHeapInit+0xb0>)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007062:	4b1c      	ldr	r3, [pc, #112]	; (80070d4 <prvHeapInit+0xb0>)
 8007064:	2200      	movs	r2, #0
 8007066:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	4413      	add	r3, r2
 800706e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007070:	2208      	movs	r2, #8
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	1a9b      	subs	r3, r3, r2
 8007076:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 0307 	bic.w	r3, r3, #7
 800707e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4a15      	ldr	r2, [pc, #84]	; (80070d8 <prvHeapInit+0xb4>)
 8007084:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007086:	4b14      	ldr	r3, [pc, #80]	; (80070d8 <prvHeapInit+0xb4>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2200      	movs	r2, #0
 800708c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800708e:	4b12      	ldr	r3, [pc, #72]	; (80070d8 <prvHeapInit+0xb4>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2200      	movs	r2, #0
 8007094:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	1ad2      	subs	r2, r2, r3
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070a4:	4b0c      	ldr	r3, [pc, #48]	; (80070d8 <prvHeapInit+0xb4>)
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	4a0a      	ldr	r2, [pc, #40]	; (80070dc <prvHeapInit+0xb8>)
 80070b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	4a09      	ldr	r2, [pc, #36]	; (80070e0 <prvHeapInit+0xbc>)
 80070ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070bc:	4b09      	ldr	r3, [pc, #36]	; (80070e4 <prvHeapInit+0xc0>)
 80070be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80070c2:	601a      	str	r2, [r3, #0]
}
 80070c4:	bf00      	nop
 80070c6:	3714      	adds	r7, #20
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	200010d8 	.word	0x200010d8
 80070d4:	20002460 	.word	0x20002460
 80070d8:	20002468 	.word	0x20002468
 80070dc:	20002470 	.word	0x20002470
 80070e0:	2000246c 	.word	0x2000246c
 80070e4:	2000247c 	.word	0x2000247c

080070e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070f0:	4b28      	ldr	r3, [pc, #160]	; (8007194 <prvInsertBlockIntoFreeList+0xac>)
 80070f2:	60fb      	str	r3, [r7, #12]
 80070f4:	e002      	b.n	80070fc <prvInsertBlockIntoFreeList+0x14>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	429a      	cmp	r2, r3
 8007104:	d8f7      	bhi.n	80070f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	4413      	add	r3, r2
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	429a      	cmp	r2, r3
 8007116:	d108      	bne.n	800712a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	441a      	add	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	441a      	add	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	429a      	cmp	r2, r3
 800713c:	d118      	bne.n	8007170 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	4b15      	ldr	r3, [pc, #84]	; (8007198 <prvInsertBlockIntoFreeList+0xb0>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	429a      	cmp	r2, r3
 8007148:	d00d      	beq.n	8007166 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685a      	ldr	r2, [r3, #4]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	441a      	add	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	601a      	str	r2, [r3, #0]
 8007164:	e008      	b.n	8007178 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007166:	4b0c      	ldr	r3, [pc, #48]	; (8007198 <prvInsertBlockIntoFreeList+0xb0>)
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	601a      	str	r2, [r3, #0]
 800716e:	e003      	b.n	8007178 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	429a      	cmp	r2, r3
 800717e:	d002      	beq.n	8007186 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007186:	bf00      	nop
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	20002460 	.word	0x20002460
 8007198:	20002468 	.word	0x20002468

0800719c <__errno>:
 800719c:	4b01      	ldr	r3, [pc, #4]	; (80071a4 <__errno+0x8>)
 800719e:	6818      	ldr	r0, [r3, #0]
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	20000014 	.word	0x20000014

080071a8 <std>:
 80071a8:	2300      	movs	r3, #0
 80071aa:	b510      	push	{r4, lr}
 80071ac:	4604      	mov	r4, r0
 80071ae:	e9c0 3300 	strd	r3, r3, [r0]
 80071b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071b6:	6083      	str	r3, [r0, #8]
 80071b8:	8181      	strh	r1, [r0, #12]
 80071ba:	6643      	str	r3, [r0, #100]	; 0x64
 80071bc:	81c2      	strh	r2, [r0, #14]
 80071be:	6183      	str	r3, [r0, #24]
 80071c0:	4619      	mov	r1, r3
 80071c2:	2208      	movs	r2, #8
 80071c4:	305c      	adds	r0, #92	; 0x5c
 80071c6:	f000 f91a 	bl	80073fe <memset>
 80071ca:	4b05      	ldr	r3, [pc, #20]	; (80071e0 <std+0x38>)
 80071cc:	6263      	str	r3, [r4, #36]	; 0x24
 80071ce:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <std+0x3c>)
 80071d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80071d2:	4b05      	ldr	r3, [pc, #20]	; (80071e8 <std+0x40>)
 80071d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071d6:	4b05      	ldr	r3, [pc, #20]	; (80071ec <std+0x44>)
 80071d8:	6224      	str	r4, [r4, #32]
 80071da:	6323      	str	r3, [r4, #48]	; 0x30
 80071dc:	bd10      	pop	{r4, pc}
 80071de:	bf00      	nop
 80071e0:	0800801d 	.word	0x0800801d
 80071e4:	0800803f 	.word	0x0800803f
 80071e8:	08008077 	.word	0x08008077
 80071ec:	0800809b 	.word	0x0800809b

080071f0 <_cleanup_r>:
 80071f0:	4901      	ldr	r1, [pc, #4]	; (80071f8 <_cleanup_r+0x8>)
 80071f2:	f000 b8af 	b.w	8007354 <_fwalk_reent>
 80071f6:	bf00      	nop
 80071f8:	08009069 	.word	0x08009069

080071fc <__sfmoreglue>:
 80071fc:	b570      	push	{r4, r5, r6, lr}
 80071fe:	2268      	movs	r2, #104	; 0x68
 8007200:	1e4d      	subs	r5, r1, #1
 8007202:	4355      	muls	r5, r2
 8007204:	460e      	mov	r6, r1
 8007206:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800720a:	f000 f921 	bl	8007450 <_malloc_r>
 800720e:	4604      	mov	r4, r0
 8007210:	b140      	cbz	r0, 8007224 <__sfmoreglue+0x28>
 8007212:	2100      	movs	r1, #0
 8007214:	e9c0 1600 	strd	r1, r6, [r0]
 8007218:	300c      	adds	r0, #12
 800721a:	60a0      	str	r0, [r4, #8]
 800721c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007220:	f000 f8ed 	bl	80073fe <memset>
 8007224:	4620      	mov	r0, r4
 8007226:	bd70      	pop	{r4, r5, r6, pc}

08007228 <__sfp_lock_acquire>:
 8007228:	4801      	ldr	r0, [pc, #4]	; (8007230 <__sfp_lock_acquire+0x8>)
 800722a:	f000 b8d8 	b.w	80073de <__retarget_lock_acquire_recursive>
 800722e:	bf00      	nop
 8007230:	20002481 	.word	0x20002481

08007234 <__sfp_lock_release>:
 8007234:	4801      	ldr	r0, [pc, #4]	; (800723c <__sfp_lock_release+0x8>)
 8007236:	f000 b8d3 	b.w	80073e0 <__retarget_lock_release_recursive>
 800723a:	bf00      	nop
 800723c:	20002481 	.word	0x20002481

08007240 <__sinit_lock_acquire>:
 8007240:	4801      	ldr	r0, [pc, #4]	; (8007248 <__sinit_lock_acquire+0x8>)
 8007242:	f000 b8cc 	b.w	80073de <__retarget_lock_acquire_recursive>
 8007246:	bf00      	nop
 8007248:	20002482 	.word	0x20002482

0800724c <__sinit_lock_release>:
 800724c:	4801      	ldr	r0, [pc, #4]	; (8007254 <__sinit_lock_release+0x8>)
 800724e:	f000 b8c7 	b.w	80073e0 <__retarget_lock_release_recursive>
 8007252:	bf00      	nop
 8007254:	20002482 	.word	0x20002482

08007258 <__sinit>:
 8007258:	b510      	push	{r4, lr}
 800725a:	4604      	mov	r4, r0
 800725c:	f7ff fff0 	bl	8007240 <__sinit_lock_acquire>
 8007260:	69a3      	ldr	r3, [r4, #24]
 8007262:	b11b      	cbz	r3, 800726c <__sinit+0x14>
 8007264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007268:	f7ff bff0 	b.w	800724c <__sinit_lock_release>
 800726c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007270:	6523      	str	r3, [r4, #80]	; 0x50
 8007272:	4b13      	ldr	r3, [pc, #76]	; (80072c0 <__sinit+0x68>)
 8007274:	4a13      	ldr	r2, [pc, #76]	; (80072c4 <__sinit+0x6c>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	62a2      	str	r2, [r4, #40]	; 0x28
 800727a:	42a3      	cmp	r3, r4
 800727c:	bf04      	itt	eq
 800727e:	2301      	moveq	r3, #1
 8007280:	61a3      	streq	r3, [r4, #24]
 8007282:	4620      	mov	r0, r4
 8007284:	f000 f820 	bl	80072c8 <__sfp>
 8007288:	6060      	str	r0, [r4, #4]
 800728a:	4620      	mov	r0, r4
 800728c:	f000 f81c 	bl	80072c8 <__sfp>
 8007290:	60a0      	str	r0, [r4, #8]
 8007292:	4620      	mov	r0, r4
 8007294:	f000 f818 	bl	80072c8 <__sfp>
 8007298:	2200      	movs	r2, #0
 800729a:	60e0      	str	r0, [r4, #12]
 800729c:	2104      	movs	r1, #4
 800729e:	6860      	ldr	r0, [r4, #4]
 80072a0:	f7ff ff82 	bl	80071a8 <std>
 80072a4:	68a0      	ldr	r0, [r4, #8]
 80072a6:	2201      	movs	r2, #1
 80072a8:	2109      	movs	r1, #9
 80072aa:	f7ff ff7d 	bl	80071a8 <std>
 80072ae:	68e0      	ldr	r0, [r4, #12]
 80072b0:	2202      	movs	r2, #2
 80072b2:	2112      	movs	r1, #18
 80072b4:	f7ff ff78 	bl	80071a8 <std>
 80072b8:	2301      	movs	r3, #1
 80072ba:	61a3      	str	r3, [r4, #24]
 80072bc:	e7d2      	b.n	8007264 <__sinit+0xc>
 80072be:	bf00      	nop
 80072c0:	0800a038 	.word	0x0800a038
 80072c4:	080071f1 	.word	0x080071f1

080072c8 <__sfp>:
 80072c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ca:	4607      	mov	r7, r0
 80072cc:	f7ff ffac 	bl	8007228 <__sfp_lock_acquire>
 80072d0:	4b1e      	ldr	r3, [pc, #120]	; (800734c <__sfp+0x84>)
 80072d2:	681e      	ldr	r6, [r3, #0]
 80072d4:	69b3      	ldr	r3, [r6, #24]
 80072d6:	b913      	cbnz	r3, 80072de <__sfp+0x16>
 80072d8:	4630      	mov	r0, r6
 80072da:	f7ff ffbd 	bl	8007258 <__sinit>
 80072de:	3648      	adds	r6, #72	; 0x48
 80072e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80072e4:	3b01      	subs	r3, #1
 80072e6:	d503      	bpl.n	80072f0 <__sfp+0x28>
 80072e8:	6833      	ldr	r3, [r6, #0]
 80072ea:	b30b      	cbz	r3, 8007330 <__sfp+0x68>
 80072ec:	6836      	ldr	r6, [r6, #0]
 80072ee:	e7f7      	b.n	80072e0 <__sfp+0x18>
 80072f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80072f4:	b9d5      	cbnz	r5, 800732c <__sfp+0x64>
 80072f6:	4b16      	ldr	r3, [pc, #88]	; (8007350 <__sfp+0x88>)
 80072f8:	60e3      	str	r3, [r4, #12]
 80072fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072fe:	6665      	str	r5, [r4, #100]	; 0x64
 8007300:	f000 f86c 	bl	80073dc <__retarget_lock_init_recursive>
 8007304:	f7ff ff96 	bl	8007234 <__sfp_lock_release>
 8007308:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800730c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007310:	6025      	str	r5, [r4, #0]
 8007312:	61a5      	str	r5, [r4, #24]
 8007314:	2208      	movs	r2, #8
 8007316:	4629      	mov	r1, r5
 8007318:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800731c:	f000 f86f 	bl	80073fe <memset>
 8007320:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007324:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007328:	4620      	mov	r0, r4
 800732a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800732c:	3468      	adds	r4, #104	; 0x68
 800732e:	e7d9      	b.n	80072e4 <__sfp+0x1c>
 8007330:	2104      	movs	r1, #4
 8007332:	4638      	mov	r0, r7
 8007334:	f7ff ff62 	bl	80071fc <__sfmoreglue>
 8007338:	4604      	mov	r4, r0
 800733a:	6030      	str	r0, [r6, #0]
 800733c:	2800      	cmp	r0, #0
 800733e:	d1d5      	bne.n	80072ec <__sfp+0x24>
 8007340:	f7ff ff78 	bl	8007234 <__sfp_lock_release>
 8007344:	230c      	movs	r3, #12
 8007346:	603b      	str	r3, [r7, #0]
 8007348:	e7ee      	b.n	8007328 <__sfp+0x60>
 800734a:	bf00      	nop
 800734c:	0800a038 	.word	0x0800a038
 8007350:	ffff0001 	.word	0xffff0001

08007354 <_fwalk_reent>:
 8007354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007358:	4606      	mov	r6, r0
 800735a:	4688      	mov	r8, r1
 800735c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007360:	2700      	movs	r7, #0
 8007362:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007366:	f1b9 0901 	subs.w	r9, r9, #1
 800736a:	d505      	bpl.n	8007378 <_fwalk_reent+0x24>
 800736c:	6824      	ldr	r4, [r4, #0]
 800736e:	2c00      	cmp	r4, #0
 8007370:	d1f7      	bne.n	8007362 <_fwalk_reent+0xe>
 8007372:	4638      	mov	r0, r7
 8007374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007378:	89ab      	ldrh	r3, [r5, #12]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d907      	bls.n	800738e <_fwalk_reent+0x3a>
 800737e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007382:	3301      	adds	r3, #1
 8007384:	d003      	beq.n	800738e <_fwalk_reent+0x3a>
 8007386:	4629      	mov	r1, r5
 8007388:	4630      	mov	r0, r6
 800738a:	47c0      	blx	r8
 800738c:	4307      	orrs	r7, r0
 800738e:	3568      	adds	r5, #104	; 0x68
 8007390:	e7e9      	b.n	8007366 <_fwalk_reent+0x12>
	...

08007394 <__libc_init_array>:
 8007394:	b570      	push	{r4, r5, r6, lr}
 8007396:	4d0d      	ldr	r5, [pc, #52]	; (80073cc <__libc_init_array+0x38>)
 8007398:	4c0d      	ldr	r4, [pc, #52]	; (80073d0 <__libc_init_array+0x3c>)
 800739a:	1b64      	subs	r4, r4, r5
 800739c:	10a4      	asrs	r4, r4, #2
 800739e:	2600      	movs	r6, #0
 80073a0:	42a6      	cmp	r6, r4
 80073a2:	d109      	bne.n	80073b8 <__libc_init_array+0x24>
 80073a4:	4d0b      	ldr	r5, [pc, #44]	; (80073d4 <__libc_init_array+0x40>)
 80073a6:	4c0c      	ldr	r4, [pc, #48]	; (80073d8 <__libc_init_array+0x44>)
 80073a8:	f002 fd38 	bl	8009e1c <_init>
 80073ac:	1b64      	subs	r4, r4, r5
 80073ae:	10a4      	asrs	r4, r4, #2
 80073b0:	2600      	movs	r6, #0
 80073b2:	42a6      	cmp	r6, r4
 80073b4:	d105      	bne.n	80073c2 <__libc_init_array+0x2e>
 80073b6:	bd70      	pop	{r4, r5, r6, pc}
 80073b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073bc:	4798      	blx	r3
 80073be:	3601      	adds	r6, #1
 80073c0:	e7ee      	b.n	80073a0 <__libc_init_array+0xc>
 80073c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073c6:	4798      	blx	r3
 80073c8:	3601      	adds	r6, #1
 80073ca:	e7f2      	b.n	80073b2 <__libc_init_array+0x1e>
 80073cc:	0800a3bc 	.word	0x0800a3bc
 80073d0:	0800a3bc 	.word	0x0800a3bc
 80073d4:	0800a3bc 	.word	0x0800a3bc
 80073d8:	0800a3c0 	.word	0x0800a3c0

080073dc <__retarget_lock_init_recursive>:
 80073dc:	4770      	bx	lr

080073de <__retarget_lock_acquire_recursive>:
 80073de:	4770      	bx	lr

080073e0 <__retarget_lock_release_recursive>:
 80073e0:	4770      	bx	lr

080073e2 <memcpy>:
 80073e2:	440a      	add	r2, r1
 80073e4:	4291      	cmp	r1, r2
 80073e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80073ea:	d100      	bne.n	80073ee <memcpy+0xc>
 80073ec:	4770      	bx	lr
 80073ee:	b510      	push	{r4, lr}
 80073f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073f8:	4291      	cmp	r1, r2
 80073fa:	d1f9      	bne.n	80073f0 <memcpy+0xe>
 80073fc:	bd10      	pop	{r4, pc}

080073fe <memset>:
 80073fe:	4402      	add	r2, r0
 8007400:	4603      	mov	r3, r0
 8007402:	4293      	cmp	r3, r2
 8007404:	d100      	bne.n	8007408 <memset+0xa>
 8007406:	4770      	bx	lr
 8007408:	f803 1b01 	strb.w	r1, [r3], #1
 800740c:	e7f9      	b.n	8007402 <memset+0x4>
	...

08007410 <sbrk_aligned>:
 8007410:	b570      	push	{r4, r5, r6, lr}
 8007412:	4e0e      	ldr	r6, [pc, #56]	; (800744c <sbrk_aligned+0x3c>)
 8007414:	460c      	mov	r4, r1
 8007416:	6831      	ldr	r1, [r6, #0]
 8007418:	4605      	mov	r5, r0
 800741a:	b911      	cbnz	r1, 8007422 <sbrk_aligned+0x12>
 800741c:	f000 fdee 	bl	8007ffc <_sbrk_r>
 8007420:	6030      	str	r0, [r6, #0]
 8007422:	4621      	mov	r1, r4
 8007424:	4628      	mov	r0, r5
 8007426:	f000 fde9 	bl	8007ffc <_sbrk_r>
 800742a:	1c43      	adds	r3, r0, #1
 800742c:	d00a      	beq.n	8007444 <sbrk_aligned+0x34>
 800742e:	1cc4      	adds	r4, r0, #3
 8007430:	f024 0403 	bic.w	r4, r4, #3
 8007434:	42a0      	cmp	r0, r4
 8007436:	d007      	beq.n	8007448 <sbrk_aligned+0x38>
 8007438:	1a21      	subs	r1, r4, r0
 800743a:	4628      	mov	r0, r5
 800743c:	f000 fdde 	bl	8007ffc <_sbrk_r>
 8007440:	3001      	adds	r0, #1
 8007442:	d101      	bne.n	8007448 <sbrk_aligned+0x38>
 8007444:	f04f 34ff 	mov.w	r4, #4294967295
 8007448:	4620      	mov	r0, r4
 800744a:	bd70      	pop	{r4, r5, r6, pc}
 800744c:	20002488 	.word	0x20002488

08007450 <_malloc_r>:
 8007450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007454:	1ccd      	adds	r5, r1, #3
 8007456:	f025 0503 	bic.w	r5, r5, #3
 800745a:	3508      	adds	r5, #8
 800745c:	2d0c      	cmp	r5, #12
 800745e:	bf38      	it	cc
 8007460:	250c      	movcc	r5, #12
 8007462:	2d00      	cmp	r5, #0
 8007464:	4607      	mov	r7, r0
 8007466:	db01      	blt.n	800746c <_malloc_r+0x1c>
 8007468:	42a9      	cmp	r1, r5
 800746a:	d905      	bls.n	8007478 <_malloc_r+0x28>
 800746c:	230c      	movs	r3, #12
 800746e:	603b      	str	r3, [r7, #0]
 8007470:	2600      	movs	r6, #0
 8007472:	4630      	mov	r0, r6
 8007474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007478:	4e2e      	ldr	r6, [pc, #184]	; (8007534 <_malloc_r+0xe4>)
 800747a:	f001 feb5 	bl	80091e8 <__malloc_lock>
 800747e:	6833      	ldr	r3, [r6, #0]
 8007480:	461c      	mov	r4, r3
 8007482:	bb34      	cbnz	r4, 80074d2 <_malloc_r+0x82>
 8007484:	4629      	mov	r1, r5
 8007486:	4638      	mov	r0, r7
 8007488:	f7ff ffc2 	bl	8007410 <sbrk_aligned>
 800748c:	1c43      	adds	r3, r0, #1
 800748e:	4604      	mov	r4, r0
 8007490:	d14d      	bne.n	800752e <_malloc_r+0xde>
 8007492:	6834      	ldr	r4, [r6, #0]
 8007494:	4626      	mov	r6, r4
 8007496:	2e00      	cmp	r6, #0
 8007498:	d140      	bne.n	800751c <_malloc_r+0xcc>
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	4631      	mov	r1, r6
 800749e:	4638      	mov	r0, r7
 80074a0:	eb04 0803 	add.w	r8, r4, r3
 80074a4:	f000 fdaa 	bl	8007ffc <_sbrk_r>
 80074a8:	4580      	cmp	r8, r0
 80074aa:	d13a      	bne.n	8007522 <_malloc_r+0xd2>
 80074ac:	6821      	ldr	r1, [r4, #0]
 80074ae:	3503      	adds	r5, #3
 80074b0:	1a6d      	subs	r5, r5, r1
 80074b2:	f025 0503 	bic.w	r5, r5, #3
 80074b6:	3508      	adds	r5, #8
 80074b8:	2d0c      	cmp	r5, #12
 80074ba:	bf38      	it	cc
 80074bc:	250c      	movcc	r5, #12
 80074be:	4629      	mov	r1, r5
 80074c0:	4638      	mov	r0, r7
 80074c2:	f7ff ffa5 	bl	8007410 <sbrk_aligned>
 80074c6:	3001      	adds	r0, #1
 80074c8:	d02b      	beq.n	8007522 <_malloc_r+0xd2>
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	442b      	add	r3, r5
 80074ce:	6023      	str	r3, [r4, #0]
 80074d0:	e00e      	b.n	80074f0 <_malloc_r+0xa0>
 80074d2:	6822      	ldr	r2, [r4, #0]
 80074d4:	1b52      	subs	r2, r2, r5
 80074d6:	d41e      	bmi.n	8007516 <_malloc_r+0xc6>
 80074d8:	2a0b      	cmp	r2, #11
 80074da:	d916      	bls.n	800750a <_malloc_r+0xba>
 80074dc:	1961      	adds	r1, r4, r5
 80074de:	42a3      	cmp	r3, r4
 80074e0:	6025      	str	r5, [r4, #0]
 80074e2:	bf18      	it	ne
 80074e4:	6059      	strne	r1, [r3, #4]
 80074e6:	6863      	ldr	r3, [r4, #4]
 80074e8:	bf08      	it	eq
 80074ea:	6031      	streq	r1, [r6, #0]
 80074ec:	5162      	str	r2, [r4, r5]
 80074ee:	604b      	str	r3, [r1, #4]
 80074f0:	4638      	mov	r0, r7
 80074f2:	f104 060b 	add.w	r6, r4, #11
 80074f6:	f001 fe7d 	bl	80091f4 <__malloc_unlock>
 80074fa:	f026 0607 	bic.w	r6, r6, #7
 80074fe:	1d23      	adds	r3, r4, #4
 8007500:	1af2      	subs	r2, r6, r3
 8007502:	d0b6      	beq.n	8007472 <_malloc_r+0x22>
 8007504:	1b9b      	subs	r3, r3, r6
 8007506:	50a3      	str	r3, [r4, r2]
 8007508:	e7b3      	b.n	8007472 <_malloc_r+0x22>
 800750a:	6862      	ldr	r2, [r4, #4]
 800750c:	42a3      	cmp	r3, r4
 800750e:	bf0c      	ite	eq
 8007510:	6032      	streq	r2, [r6, #0]
 8007512:	605a      	strne	r2, [r3, #4]
 8007514:	e7ec      	b.n	80074f0 <_malloc_r+0xa0>
 8007516:	4623      	mov	r3, r4
 8007518:	6864      	ldr	r4, [r4, #4]
 800751a:	e7b2      	b.n	8007482 <_malloc_r+0x32>
 800751c:	4634      	mov	r4, r6
 800751e:	6876      	ldr	r6, [r6, #4]
 8007520:	e7b9      	b.n	8007496 <_malloc_r+0x46>
 8007522:	230c      	movs	r3, #12
 8007524:	603b      	str	r3, [r7, #0]
 8007526:	4638      	mov	r0, r7
 8007528:	f001 fe64 	bl	80091f4 <__malloc_unlock>
 800752c:	e7a1      	b.n	8007472 <_malloc_r+0x22>
 800752e:	6025      	str	r5, [r4, #0]
 8007530:	e7de      	b.n	80074f0 <_malloc_r+0xa0>
 8007532:	bf00      	nop
 8007534:	20002484 	.word	0x20002484

08007538 <__cvt>:
 8007538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800753c:	ec55 4b10 	vmov	r4, r5, d0
 8007540:	2d00      	cmp	r5, #0
 8007542:	460e      	mov	r6, r1
 8007544:	4619      	mov	r1, r3
 8007546:	462b      	mov	r3, r5
 8007548:	bfbb      	ittet	lt
 800754a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800754e:	461d      	movlt	r5, r3
 8007550:	2300      	movge	r3, #0
 8007552:	232d      	movlt	r3, #45	; 0x2d
 8007554:	700b      	strb	r3, [r1, #0]
 8007556:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007558:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800755c:	4691      	mov	r9, r2
 800755e:	f023 0820 	bic.w	r8, r3, #32
 8007562:	bfbc      	itt	lt
 8007564:	4622      	movlt	r2, r4
 8007566:	4614      	movlt	r4, r2
 8007568:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800756c:	d005      	beq.n	800757a <__cvt+0x42>
 800756e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007572:	d100      	bne.n	8007576 <__cvt+0x3e>
 8007574:	3601      	adds	r6, #1
 8007576:	2102      	movs	r1, #2
 8007578:	e000      	b.n	800757c <__cvt+0x44>
 800757a:	2103      	movs	r1, #3
 800757c:	ab03      	add	r3, sp, #12
 800757e:	9301      	str	r3, [sp, #4]
 8007580:	ab02      	add	r3, sp, #8
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	ec45 4b10 	vmov	d0, r4, r5
 8007588:	4653      	mov	r3, sl
 800758a:	4632      	mov	r2, r6
 800758c:	f000 fef8 	bl	8008380 <_dtoa_r>
 8007590:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007594:	4607      	mov	r7, r0
 8007596:	d102      	bne.n	800759e <__cvt+0x66>
 8007598:	f019 0f01 	tst.w	r9, #1
 800759c:	d022      	beq.n	80075e4 <__cvt+0xac>
 800759e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80075a2:	eb07 0906 	add.w	r9, r7, r6
 80075a6:	d110      	bne.n	80075ca <__cvt+0x92>
 80075a8:	783b      	ldrb	r3, [r7, #0]
 80075aa:	2b30      	cmp	r3, #48	; 0x30
 80075ac:	d10a      	bne.n	80075c4 <__cvt+0x8c>
 80075ae:	2200      	movs	r2, #0
 80075b0:	2300      	movs	r3, #0
 80075b2:	4620      	mov	r0, r4
 80075b4:	4629      	mov	r1, r5
 80075b6:	f7f9 fa87 	bl	8000ac8 <__aeabi_dcmpeq>
 80075ba:	b918      	cbnz	r0, 80075c4 <__cvt+0x8c>
 80075bc:	f1c6 0601 	rsb	r6, r6, #1
 80075c0:	f8ca 6000 	str.w	r6, [sl]
 80075c4:	f8da 3000 	ldr.w	r3, [sl]
 80075c8:	4499      	add	r9, r3
 80075ca:	2200      	movs	r2, #0
 80075cc:	2300      	movs	r3, #0
 80075ce:	4620      	mov	r0, r4
 80075d0:	4629      	mov	r1, r5
 80075d2:	f7f9 fa79 	bl	8000ac8 <__aeabi_dcmpeq>
 80075d6:	b108      	cbz	r0, 80075dc <__cvt+0xa4>
 80075d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80075dc:	2230      	movs	r2, #48	; 0x30
 80075de:	9b03      	ldr	r3, [sp, #12]
 80075e0:	454b      	cmp	r3, r9
 80075e2:	d307      	bcc.n	80075f4 <__cvt+0xbc>
 80075e4:	9b03      	ldr	r3, [sp, #12]
 80075e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075e8:	1bdb      	subs	r3, r3, r7
 80075ea:	4638      	mov	r0, r7
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	b004      	add	sp, #16
 80075f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075f4:	1c59      	adds	r1, r3, #1
 80075f6:	9103      	str	r1, [sp, #12]
 80075f8:	701a      	strb	r2, [r3, #0]
 80075fa:	e7f0      	b.n	80075de <__cvt+0xa6>

080075fc <__exponent>:
 80075fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075fe:	4603      	mov	r3, r0
 8007600:	2900      	cmp	r1, #0
 8007602:	bfb8      	it	lt
 8007604:	4249      	neglt	r1, r1
 8007606:	f803 2b02 	strb.w	r2, [r3], #2
 800760a:	bfb4      	ite	lt
 800760c:	222d      	movlt	r2, #45	; 0x2d
 800760e:	222b      	movge	r2, #43	; 0x2b
 8007610:	2909      	cmp	r1, #9
 8007612:	7042      	strb	r2, [r0, #1]
 8007614:	dd2a      	ble.n	800766c <__exponent+0x70>
 8007616:	f10d 0407 	add.w	r4, sp, #7
 800761a:	46a4      	mov	ip, r4
 800761c:	270a      	movs	r7, #10
 800761e:	46a6      	mov	lr, r4
 8007620:	460a      	mov	r2, r1
 8007622:	fb91 f6f7 	sdiv	r6, r1, r7
 8007626:	fb07 1516 	mls	r5, r7, r6, r1
 800762a:	3530      	adds	r5, #48	; 0x30
 800762c:	2a63      	cmp	r2, #99	; 0x63
 800762e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007632:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007636:	4631      	mov	r1, r6
 8007638:	dcf1      	bgt.n	800761e <__exponent+0x22>
 800763a:	3130      	adds	r1, #48	; 0x30
 800763c:	f1ae 0502 	sub.w	r5, lr, #2
 8007640:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007644:	1c44      	adds	r4, r0, #1
 8007646:	4629      	mov	r1, r5
 8007648:	4561      	cmp	r1, ip
 800764a:	d30a      	bcc.n	8007662 <__exponent+0x66>
 800764c:	f10d 0209 	add.w	r2, sp, #9
 8007650:	eba2 020e 	sub.w	r2, r2, lr
 8007654:	4565      	cmp	r5, ip
 8007656:	bf88      	it	hi
 8007658:	2200      	movhi	r2, #0
 800765a:	4413      	add	r3, r2
 800765c:	1a18      	subs	r0, r3, r0
 800765e:	b003      	add	sp, #12
 8007660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007662:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007666:	f804 2f01 	strb.w	r2, [r4, #1]!
 800766a:	e7ed      	b.n	8007648 <__exponent+0x4c>
 800766c:	2330      	movs	r3, #48	; 0x30
 800766e:	3130      	adds	r1, #48	; 0x30
 8007670:	7083      	strb	r3, [r0, #2]
 8007672:	70c1      	strb	r1, [r0, #3]
 8007674:	1d03      	adds	r3, r0, #4
 8007676:	e7f1      	b.n	800765c <__exponent+0x60>

08007678 <_printf_float>:
 8007678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767c:	ed2d 8b02 	vpush	{d8}
 8007680:	b08d      	sub	sp, #52	; 0x34
 8007682:	460c      	mov	r4, r1
 8007684:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007688:	4616      	mov	r6, r2
 800768a:	461f      	mov	r7, r3
 800768c:	4605      	mov	r5, r0
 800768e:	f001 fd27 	bl	80090e0 <_localeconv_r>
 8007692:	f8d0 a000 	ldr.w	sl, [r0]
 8007696:	4650      	mov	r0, sl
 8007698:	f7f8 fd9a 	bl	80001d0 <strlen>
 800769c:	2300      	movs	r3, #0
 800769e:	930a      	str	r3, [sp, #40]	; 0x28
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	9305      	str	r3, [sp, #20]
 80076a4:	f8d8 3000 	ldr.w	r3, [r8]
 80076a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80076ac:	3307      	adds	r3, #7
 80076ae:	f023 0307 	bic.w	r3, r3, #7
 80076b2:	f103 0208 	add.w	r2, r3, #8
 80076b6:	f8c8 2000 	str.w	r2, [r8]
 80076ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80076c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80076c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80076ca:	9307      	str	r3, [sp, #28]
 80076cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80076d0:	ee08 0a10 	vmov	s16, r0
 80076d4:	4b9f      	ldr	r3, [pc, #636]	; (8007954 <_printf_float+0x2dc>)
 80076d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076da:	f04f 32ff 	mov.w	r2, #4294967295
 80076de:	f7f9 fa25 	bl	8000b2c <__aeabi_dcmpun>
 80076e2:	bb88      	cbnz	r0, 8007748 <_printf_float+0xd0>
 80076e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076e8:	4b9a      	ldr	r3, [pc, #616]	; (8007954 <_printf_float+0x2dc>)
 80076ea:	f04f 32ff 	mov.w	r2, #4294967295
 80076ee:	f7f9 f9ff 	bl	8000af0 <__aeabi_dcmple>
 80076f2:	bb48      	cbnz	r0, 8007748 <_printf_float+0xd0>
 80076f4:	2200      	movs	r2, #0
 80076f6:	2300      	movs	r3, #0
 80076f8:	4640      	mov	r0, r8
 80076fa:	4649      	mov	r1, r9
 80076fc:	f7f9 f9ee 	bl	8000adc <__aeabi_dcmplt>
 8007700:	b110      	cbz	r0, 8007708 <_printf_float+0x90>
 8007702:	232d      	movs	r3, #45	; 0x2d
 8007704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007708:	4b93      	ldr	r3, [pc, #588]	; (8007958 <_printf_float+0x2e0>)
 800770a:	4894      	ldr	r0, [pc, #592]	; (800795c <_printf_float+0x2e4>)
 800770c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007710:	bf94      	ite	ls
 8007712:	4698      	movls	r8, r3
 8007714:	4680      	movhi	r8, r0
 8007716:	2303      	movs	r3, #3
 8007718:	6123      	str	r3, [r4, #16]
 800771a:	9b05      	ldr	r3, [sp, #20]
 800771c:	f023 0204 	bic.w	r2, r3, #4
 8007720:	6022      	str	r2, [r4, #0]
 8007722:	f04f 0900 	mov.w	r9, #0
 8007726:	9700      	str	r7, [sp, #0]
 8007728:	4633      	mov	r3, r6
 800772a:	aa0b      	add	r2, sp, #44	; 0x2c
 800772c:	4621      	mov	r1, r4
 800772e:	4628      	mov	r0, r5
 8007730:	f000 f9d8 	bl	8007ae4 <_printf_common>
 8007734:	3001      	adds	r0, #1
 8007736:	f040 8090 	bne.w	800785a <_printf_float+0x1e2>
 800773a:	f04f 30ff 	mov.w	r0, #4294967295
 800773e:	b00d      	add	sp, #52	; 0x34
 8007740:	ecbd 8b02 	vpop	{d8}
 8007744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007748:	4642      	mov	r2, r8
 800774a:	464b      	mov	r3, r9
 800774c:	4640      	mov	r0, r8
 800774e:	4649      	mov	r1, r9
 8007750:	f7f9 f9ec 	bl	8000b2c <__aeabi_dcmpun>
 8007754:	b140      	cbz	r0, 8007768 <_printf_float+0xf0>
 8007756:	464b      	mov	r3, r9
 8007758:	2b00      	cmp	r3, #0
 800775a:	bfbc      	itt	lt
 800775c:	232d      	movlt	r3, #45	; 0x2d
 800775e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007762:	487f      	ldr	r0, [pc, #508]	; (8007960 <_printf_float+0x2e8>)
 8007764:	4b7f      	ldr	r3, [pc, #508]	; (8007964 <_printf_float+0x2ec>)
 8007766:	e7d1      	b.n	800770c <_printf_float+0x94>
 8007768:	6863      	ldr	r3, [r4, #4]
 800776a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800776e:	9206      	str	r2, [sp, #24]
 8007770:	1c5a      	adds	r2, r3, #1
 8007772:	d13f      	bne.n	80077f4 <_printf_float+0x17c>
 8007774:	2306      	movs	r3, #6
 8007776:	6063      	str	r3, [r4, #4]
 8007778:	9b05      	ldr	r3, [sp, #20]
 800777a:	6861      	ldr	r1, [r4, #4]
 800777c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007780:	2300      	movs	r3, #0
 8007782:	9303      	str	r3, [sp, #12]
 8007784:	ab0a      	add	r3, sp, #40	; 0x28
 8007786:	e9cd b301 	strd	fp, r3, [sp, #4]
 800778a:	ab09      	add	r3, sp, #36	; 0x24
 800778c:	ec49 8b10 	vmov	d0, r8, r9
 8007790:	9300      	str	r3, [sp, #0]
 8007792:	6022      	str	r2, [r4, #0]
 8007794:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007798:	4628      	mov	r0, r5
 800779a:	f7ff fecd 	bl	8007538 <__cvt>
 800779e:	9b06      	ldr	r3, [sp, #24]
 80077a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077a2:	2b47      	cmp	r3, #71	; 0x47
 80077a4:	4680      	mov	r8, r0
 80077a6:	d108      	bne.n	80077ba <_printf_float+0x142>
 80077a8:	1cc8      	adds	r0, r1, #3
 80077aa:	db02      	blt.n	80077b2 <_printf_float+0x13a>
 80077ac:	6863      	ldr	r3, [r4, #4]
 80077ae:	4299      	cmp	r1, r3
 80077b0:	dd41      	ble.n	8007836 <_printf_float+0x1be>
 80077b2:	f1ab 0b02 	sub.w	fp, fp, #2
 80077b6:	fa5f fb8b 	uxtb.w	fp, fp
 80077ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80077be:	d820      	bhi.n	8007802 <_printf_float+0x18a>
 80077c0:	3901      	subs	r1, #1
 80077c2:	465a      	mov	r2, fp
 80077c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80077c8:	9109      	str	r1, [sp, #36]	; 0x24
 80077ca:	f7ff ff17 	bl	80075fc <__exponent>
 80077ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077d0:	1813      	adds	r3, r2, r0
 80077d2:	2a01      	cmp	r2, #1
 80077d4:	4681      	mov	r9, r0
 80077d6:	6123      	str	r3, [r4, #16]
 80077d8:	dc02      	bgt.n	80077e0 <_printf_float+0x168>
 80077da:	6822      	ldr	r2, [r4, #0]
 80077dc:	07d2      	lsls	r2, r2, #31
 80077de:	d501      	bpl.n	80077e4 <_printf_float+0x16c>
 80077e0:	3301      	adds	r3, #1
 80077e2:	6123      	str	r3, [r4, #16]
 80077e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d09c      	beq.n	8007726 <_printf_float+0xae>
 80077ec:	232d      	movs	r3, #45	; 0x2d
 80077ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077f2:	e798      	b.n	8007726 <_printf_float+0xae>
 80077f4:	9a06      	ldr	r2, [sp, #24]
 80077f6:	2a47      	cmp	r2, #71	; 0x47
 80077f8:	d1be      	bne.n	8007778 <_printf_float+0x100>
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1bc      	bne.n	8007778 <_printf_float+0x100>
 80077fe:	2301      	movs	r3, #1
 8007800:	e7b9      	b.n	8007776 <_printf_float+0xfe>
 8007802:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007806:	d118      	bne.n	800783a <_printf_float+0x1c2>
 8007808:	2900      	cmp	r1, #0
 800780a:	6863      	ldr	r3, [r4, #4]
 800780c:	dd0b      	ble.n	8007826 <_printf_float+0x1ae>
 800780e:	6121      	str	r1, [r4, #16]
 8007810:	b913      	cbnz	r3, 8007818 <_printf_float+0x1a0>
 8007812:	6822      	ldr	r2, [r4, #0]
 8007814:	07d0      	lsls	r0, r2, #31
 8007816:	d502      	bpl.n	800781e <_printf_float+0x1a6>
 8007818:	3301      	adds	r3, #1
 800781a:	440b      	add	r3, r1
 800781c:	6123      	str	r3, [r4, #16]
 800781e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007820:	f04f 0900 	mov.w	r9, #0
 8007824:	e7de      	b.n	80077e4 <_printf_float+0x16c>
 8007826:	b913      	cbnz	r3, 800782e <_printf_float+0x1b6>
 8007828:	6822      	ldr	r2, [r4, #0]
 800782a:	07d2      	lsls	r2, r2, #31
 800782c:	d501      	bpl.n	8007832 <_printf_float+0x1ba>
 800782e:	3302      	adds	r3, #2
 8007830:	e7f4      	b.n	800781c <_printf_float+0x1a4>
 8007832:	2301      	movs	r3, #1
 8007834:	e7f2      	b.n	800781c <_printf_float+0x1a4>
 8007836:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800783a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800783c:	4299      	cmp	r1, r3
 800783e:	db05      	blt.n	800784c <_printf_float+0x1d4>
 8007840:	6823      	ldr	r3, [r4, #0]
 8007842:	6121      	str	r1, [r4, #16]
 8007844:	07d8      	lsls	r0, r3, #31
 8007846:	d5ea      	bpl.n	800781e <_printf_float+0x1a6>
 8007848:	1c4b      	adds	r3, r1, #1
 800784a:	e7e7      	b.n	800781c <_printf_float+0x1a4>
 800784c:	2900      	cmp	r1, #0
 800784e:	bfd4      	ite	le
 8007850:	f1c1 0202 	rsble	r2, r1, #2
 8007854:	2201      	movgt	r2, #1
 8007856:	4413      	add	r3, r2
 8007858:	e7e0      	b.n	800781c <_printf_float+0x1a4>
 800785a:	6823      	ldr	r3, [r4, #0]
 800785c:	055a      	lsls	r2, r3, #21
 800785e:	d407      	bmi.n	8007870 <_printf_float+0x1f8>
 8007860:	6923      	ldr	r3, [r4, #16]
 8007862:	4642      	mov	r2, r8
 8007864:	4631      	mov	r1, r6
 8007866:	4628      	mov	r0, r5
 8007868:	47b8      	blx	r7
 800786a:	3001      	adds	r0, #1
 800786c:	d12c      	bne.n	80078c8 <_printf_float+0x250>
 800786e:	e764      	b.n	800773a <_printf_float+0xc2>
 8007870:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007874:	f240 80e0 	bls.w	8007a38 <_printf_float+0x3c0>
 8007878:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800787c:	2200      	movs	r2, #0
 800787e:	2300      	movs	r3, #0
 8007880:	f7f9 f922 	bl	8000ac8 <__aeabi_dcmpeq>
 8007884:	2800      	cmp	r0, #0
 8007886:	d034      	beq.n	80078f2 <_printf_float+0x27a>
 8007888:	4a37      	ldr	r2, [pc, #220]	; (8007968 <_printf_float+0x2f0>)
 800788a:	2301      	movs	r3, #1
 800788c:	4631      	mov	r1, r6
 800788e:	4628      	mov	r0, r5
 8007890:	47b8      	blx	r7
 8007892:	3001      	adds	r0, #1
 8007894:	f43f af51 	beq.w	800773a <_printf_float+0xc2>
 8007898:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800789c:	429a      	cmp	r2, r3
 800789e:	db02      	blt.n	80078a6 <_printf_float+0x22e>
 80078a0:	6823      	ldr	r3, [r4, #0]
 80078a2:	07d8      	lsls	r0, r3, #31
 80078a4:	d510      	bpl.n	80078c8 <_printf_float+0x250>
 80078a6:	ee18 3a10 	vmov	r3, s16
 80078aa:	4652      	mov	r2, sl
 80078ac:	4631      	mov	r1, r6
 80078ae:	4628      	mov	r0, r5
 80078b0:	47b8      	blx	r7
 80078b2:	3001      	adds	r0, #1
 80078b4:	f43f af41 	beq.w	800773a <_printf_float+0xc2>
 80078b8:	f04f 0800 	mov.w	r8, #0
 80078bc:	f104 091a 	add.w	r9, r4, #26
 80078c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c2:	3b01      	subs	r3, #1
 80078c4:	4543      	cmp	r3, r8
 80078c6:	dc09      	bgt.n	80078dc <_printf_float+0x264>
 80078c8:	6823      	ldr	r3, [r4, #0]
 80078ca:	079b      	lsls	r3, r3, #30
 80078cc:	f100 8105 	bmi.w	8007ada <_printf_float+0x462>
 80078d0:	68e0      	ldr	r0, [r4, #12]
 80078d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078d4:	4298      	cmp	r0, r3
 80078d6:	bfb8      	it	lt
 80078d8:	4618      	movlt	r0, r3
 80078da:	e730      	b.n	800773e <_printf_float+0xc6>
 80078dc:	2301      	movs	r3, #1
 80078de:	464a      	mov	r2, r9
 80078e0:	4631      	mov	r1, r6
 80078e2:	4628      	mov	r0, r5
 80078e4:	47b8      	blx	r7
 80078e6:	3001      	adds	r0, #1
 80078e8:	f43f af27 	beq.w	800773a <_printf_float+0xc2>
 80078ec:	f108 0801 	add.w	r8, r8, #1
 80078f0:	e7e6      	b.n	80078c0 <_printf_float+0x248>
 80078f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	dc39      	bgt.n	800796c <_printf_float+0x2f4>
 80078f8:	4a1b      	ldr	r2, [pc, #108]	; (8007968 <_printf_float+0x2f0>)
 80078fa:	2301      	movs	r3, #1
 80078fc:	4631      	mov	r1, r6
 80078fe:	4628      	mov	r0, r5
 8007900:	47b8      	blx	r7
 8007902:	3001      	adds	r0, #1
 8007904:	f43f af19 	beq.w	800773a <_printf_float+0xc2>
 8007908:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800790c:	4313      	orrs	r3, r2
 800790e:	d102      	bne.n	8007916 <_printf_float+0x29e>
 8007910:	6823      	ldr	r3, [r4, #0]
 8007912:	07d9      	lsls	r1, r3, #31
 8007914:	d5d8      	bpl.n	80078c8 <_printf_float+0x250>
 8007916:	ee18 3a10 	vmov	r3, s16
 800791a:	4652      	mov	r2, sl
 800791c:	4631      	mov	r1, r6
 800791e:	4628      	mov	r0, r5
 8007920:	47b8      	blx	r7
 8007922:	3001      	adds	r0, #1
 8007924:	f43f af09 	beq.w	800773a <_printf_float+0xc2>
 8007928:	f04f 0900 	mov.w	r9, #0
 800792c:	f104 0a1a 	add.w	sl, r4, #26
 8007930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007932:	425b      	negs	r3, r3
 8007934:	454b      	cmp	r3, r9
 8007936:	dc01      	bgt.n	800793c <_printf_float+0x2c4>
 8007938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800793a:	e792      	b.n	8007862 <_printf_float+0x1ea>
 800793c:	2301      	movs	r3, #1
 800793e:	4652      	mov	r2, sl
 8007940:	4631      	mov	r1, r6
 8007942:	4628      	mov	r0, r5
 8007944:	47b8      	blx	r7
 8007946:	3001      	adds	r0, #1
 8007948:	f43f aef7 	beq.w	800773a <_printf_float+0xc2>
 800794c:	f109 0901 	add.w	r9, r9, #1
 8007950:	e7ee      	b.n	8007930 <_printf_float+0x2b8>
 8007952:	bf00      	nop
 8007954:	7fefffff 	.word	0x7fefffff
 8007958:	0800a03c 	.word	0x0800a03c
 800795c:	0800a040 	.word	0x0800a040
 8007960:	0800a048 	.word	0x0800a048
 8007964:	0800a044 	.word	0x0800a044
 8007968:	0800a04c 	.word	0x0800a04c
 800796c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800796e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007970:	429a      	cmp	r2, r3
 8007972:	bfa8      	it	ge
 8007974:	461a      	movge	r2, r3
 8007976:	2a00      	cmp	r2, #0
 8007978:	4691      	mov	r9, r2
 800797a:	dc37      	bgt.n	80079ec <_printf_float+0x374>
 800797c:	f04f 0b00 	mov.w	fp, #0
 8007980:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007984:	f104 021a 	add.w	r2, r4, #26
 8007988:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800798a:	9305      	str	r3, [sp, #20]
 800798c:	eba3 0309 	sub.w	r3, r3, r9
 8007990:	455b      	cmp	r3, fp
 8007992:	dc33      	bgt.n	80079fc <_printf_float+0x384>
 8007994:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007998:	429a      	cmp	r2, r3
 800799a:	db3b      	blt.n	8007a14 <_printf_float+0x39c>
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	07da      	lsls	r2, r3, #31
 80079a0:	d438      	bmi.n	8007a14 <_printf_float+0x39c>
 80079a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079a4:	9a05      	ldr	r2, [sp, #20]
 80079a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079a8:	1a9a      	subs	r2, r3, r2
 80079aa:	eba3 0901 	sub.w	r9, r3, r1
 80079ae:	4591      	cmp	r9, r2
 80079b0:	bfa8      	it	ge
 80079b2:	4691      	movge	r9, r2
 80079b4:	f1b9 0f00 	cmp.w	r9, #0
 80079b8:	dc35      	bgt.n	8007a26 <_printf_float+0x3ae>
 80079ba:	f04f 0800 	mov.w	r8, #0
 80079be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079c2:	f104 0a1a 	add.w	sl, r4, #26
 80079c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079ca:	1a9b      	subs	r3, r3, r2
 80079cc:	eba3 0309 	sub.w	r3, r3, r9
 80079d0:	4543      	cmp	r3, r8
 80079d2:	f77f af79 	ble.w	80078c8 <_printf_float+0x250>
 80079d6:	2301      	movs	r3, #1
 80079d8:	4652      	mov	r2, sl
 80079da:	4631      	mov	r1, r6
 80079dc:	4628      	mov	r0, r5
 80079de:	47b8      	blx	r7
 80079e0:	3001      	adds	r0, #1
 80079e2:	f43f aeaa 	beq.w	800773a <_printf_float+0xc2>
 80079e6:	f108 0801 	add.w	r8, r8, #1
 80079ea:	e7ec      	b.n	80079c6 <_printf_float+0x34e>
 80079ec:	4613      	mov	r3, r2
 80079ee:	4631      	mov	r1, r6
 80079f0:	4642      	mov	r2, r8
 80079f2:	4628      	mov	r0, r5
 80079f4:	47b8      	blx	r7
 80079f6:	3001      	adds	r0, #1
 80079f8:	d1c0      	bne.n	800797c <_printf_float+0x304>
 80079fa:	e69e      	b.n	800773a <_printf_float+0xc2>
 80079fc:	2301      	movs	r3, #1
 80079fe:	4631      	mov	r1, r6
 8007a00:	4628      	mov	r0, r5
 8007a02:	9205      	str	r2, [sp, #20]
 8007a04:	47b8      	blx	r7
 8007a06:	3001      	adds	r0, #1
 8007a08:	f43f ae97 	beq.w	800773a <_printf_float+0xc2>
 8007a0c:	9a05      	ldr	r2, [sp, #20]
 8007a0e:	f10b 0b01 	add.w	fp, fp, #1
 8007a12:	e7b9      	b.n	8007988 <_printf_float+0x310>
 8007a14:	ee18 3a10 	vmov	r3, s16
 8007a18:	4652      	mov	r2, sl
 8007a1a:	4631      	mov	r1, r6
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	47b8      	blx	r7
 8007a20:	3001      	adds	r0, #1
 8007a22:	d1be      	bne.n	80079a2 <_printf_float+0x32a>
 8007a24:	e689      	b.n	800773a <_printf_float+0xc2>
 8007a26:	9a05      	ldr	r2, [sp, #20]
 8007a28:	464b      	mov	r3, r9
 8007a2a:	4442      	add	r2, r8
 8007a2c:	4631      	mov	r1, r6
 8007a2e:	4628      	mov	r0, r5
 8007a30:	47b8      	blx	r7
 8007a32:	3001      	adds	r0, #1
 8007a34:	d1c1      	bne.n	80079ba <_printf_float+0x342>
 8007a36:	e680      	b.n	800773a <_printf_float+0xc2>
 8007a38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a3a:	2a01      	cmp	r2, #1
 8007a3c:	dc01      	bgt.n	8007a42 <_printf_float+0x3ca>
 8007a3e:	07db      	lsls	r3, r3, #31
 8007a40:	d538      	bpl.n	8007ab4 <_printf_float+0x43c>
 8007a42:	2301      	movs	r3, #1
 8007a44:	4642      	mov	r2, r8
 8007a46:	4631      	mov	r1, r6
 8007a48:	4628      	mov	r0, r5
 8007a4a:	47b8      	blx	r7
 8007a4c:	3001      	adds	r0, #1
 8007a4e:	f43f ae74 	beq.w	800773a <_printf_float+0xc2>
 8007a52:	ee18 3a10 	vmov	r3, s16
 8007a56:	4652      	mov	r2, sl
 8007a58:	4631      	mov	r1, r6
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	47b8      	blx	r7
 8007a5e:	3001      	adds	r0, #1
 8007a60:	f43f ae6b 	beq.w	800773a <_printf_float+0xc2>
 8007a64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a68:	2200      	movs	r2, #0
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	f7f9 f82c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a70:	b9d8      	cbnz	r0, 8007aaa <_printf_float+0x432>
 8007a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a74:	f108 0201 	add.w	r2, r8, #1
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	4631      	mov	r1, r6
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	47b8      	blx	r7
 8007a80:	3001      	adds	r0, #1
 8007a82:	d10e      	bne.n	8007aa2 <_printf_float+0x42a>
 8007a84:	e659      	b.n	800773a <_printf_float+0xc2>
 8007a86:	2301      	movs	r3, #1
 8007a88:	4652      	mov	r2, sl
 8007a8a:	4631      	mov	r1, r6
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	47b8      	blx	r7
 8007a90:	3001      	adds	r0, #1
 8007a92:	f43f ae52 	beq.w	800773a <_printf_float+0xc2>
 8007a96:	f108 0801 	add.w	r8, r8, #1
 8007a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	4543      	cmp	r3, r8
 8007aa0:	dcf1      	bgt.n	8007a86 <_printf_float+0x40e>
 8007aa2:	464b      	mov	r3, r9
 8007aa4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007aa8:	e6dc      	b.n	8007864 <_printf_float+0x1ec>
 8007aaa:	f04f 0800 	mov.w	r8, #0
 8007aae:	f104 0a1a 	add.w	sl, r4, #26
 8007ab2:	e7f2      	b.n	8007a9a <_printf_float+0x422>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	4642      	mov	r2, r8
 8007ab8:	e7df      	b.n	8007a7a <_printf_float+0x402>
 8007aba:	2301      	movs	r3, #1
 8007abc:	464a      	mov	r2, r9
 8007abe:	4631      	mov	r1, r6
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	47b8      	blx	r7
 8007ac4:	3001      	adds	r0, #1
 8007ac6:	f43f ae38 	beq.w	800773a <_printf_float+0xc2>
 8007aca:	f108 0801 	add.w	r8, r8, #1
 8007ace:	68e3      	ldr	r3, [r4, #12]
 8007ad0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ad2:	1a5b      	subs	r3, r3, r1
 8007ad4:	4543      	cmp	r3, r8
 8007ad6:	dcf0      	bgt.n	8007aba <_printf_float+0x442>
 8007ad8:	e6fa      	b.n	80078d0 <_printf_float+0x258>
 8007ada:	f04f 0800 	mov.w	r8, #0
 8007ade:	f104 0919 	add.w	r9, r4, #25
 8007ae2:	e7f4      	b.n	8007ace <_printf_float+0x456>

08007ae4 <_printf_common>:
 8007ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae8:	4616      	mov	r6, r2
 8007aea:	4699      	mov	r9, r3
 8007aec:	688a      	ldr	r2, [r1, #8]
 8007aee:	690b      	ldr	r3, [r1, #16]
 8007af0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007af4:	4293      	cmp	r3, r2
 8007af6:	bfb8      	it	lt
 8007af8:	4613      	movlt	r3, r2
 8007afa:	6033      	str	r3, [r6, #0]
 8007afc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b00:	4607      	mov	r7, r0
 8007b02:	460c      	mov	r4, r1
 8007b04:	b10a      	cbz	r2, 8007b0a <_printf_common+0x26>
 8007b06:	3301      	adds	r3, #1
 8007b08:	6033      	str	r3, [r6, #0]
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	0699      	lsls	r1, r3, #26
 8007b0e:	bf42      	ittt	mi
 8007b10:	6833      	ldrmi	r3, [r6, #0]
 8007b12:	3302      	addmi	r3, #2
 8007b14:	6033      	strmi	r3, [r6, #0]
 8007b16:	6825      	ldr	r5, [r4, #0]
 8007b18:	f015 0506 	ands.w	r5, r5, #6
 8007b1c:	d106      	bne.n	8007b2c <_printf_common+0x48>
 8007b1e:	f104 0a19 	add.w	sl, r4, #25
 8007b22:	68e3      	ldr	r3, [r4, #12]
 8007b24:	6832      	ldr	r2, [r6, #0]
 8007b26:	1a9b      	subs	r3, r3, r2
 8007b28:	42ab      	cmp	r3, r5
 8007b2a:	dc26      	bgt.n	8007b7a <_printf_common+0x96>
 8007b2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b30:	1e13      	subs	r3, r2, #0
 8007b32:	6822      	ldr	r2, [r4, #0]
 8007b34:	bf18      	it	ne
 8007b36:	2301      	movne	r3, #1
 8007b38:	0692      	lsls	r2, r2, #26
 8007b3a:	d42b      	bmi.n	8007b94 <_printf_common+0xb0>
 8007b3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b40:	4649      	mov	r1, r9
 8007b42:	4638      	mov	r0, r7
 8007b44:	47c0      	blx	r8
 8007b46:	3001      	adds	r0, #1
 8007b48:	d01e      	beq.n	8007b88 <_printf_common+0xa4>
 8007b4a:	6823      	ldr	r3, [r4, #0]
 8007b4c:	68e5      	ldr	r5, [r4, #12]
 8007b4e:	6832      	ldr	r2, [r6, #0]
 8007b50:	f003 0306 	and.w	r3, r3, #6
 8007b54:	2b04      	cmp	r3, #4
 8007b56:	bf08      	it	eq
 8007b58:	1aad      	subeq	r5, r5, r2
 8007b5a:	68a3      	ldr	r3, [r4, #8]
 8007b5c:	6922      	ldr	r2, [r4, #16]
 8007b5e:	bf0c      	ite	eq
 8007b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b64:	2500      	movne	r5, #0
 8007b66:	4293      	cmp	r3, r2
 8007b68:	bfc4      	itt	gt
 8007b6a:	1a9b      	subgt	r3, r3, r2
 8007b6c:	18ed      	addgt	r5, r5, r3
 8007b6e:	2600      	movs	r6, #0
 8007b70:	341a      	adds	r4, #26
 8007b72:	42b5      	cmp	r5, r6
 8007b74:	d11a      	bne.n	8007bac <_printf_common+0xc8>
 8007b76:	2000      	movs	r0, #0
 8007b78:	e008      	b.n	8007b8c <_printf_common+0xa8>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	4652      	mov	r2, sl
 8007b7e:	4649      	mov	r1, r9
 8007b80:	4638      	mov	r0, r7
 8007b82:	47c0      	blx	r8
 8007b84:	3001      	adds	r0, #1
 8007b86:	d103      	bne.n	8007b90 <_printf_common+0xac>
 8007b88:	f04f 30ff 	mov.w	r0, #4294967295
 8007b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b90:	3501      	adds	r5, #1
 8007b92:	e7c6      	b.n	8007b22 <_printf_common+0x3e>
 8007b94:	18e1      	adds	r1, r4, r3
 8007b96:	1c5a      	adds	r2, r3, #1
 8007b98:	2030      	movs	r0, #48	; 0x30
 8007b9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b9e:	4422      	add	r2, r4
 8007ba0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ba4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ba8:	3302      	adds	r3, #2
 8007baa:	e7c7      	b.n	8007b3c <_printf_common+0x58>
 8007bac:	2301      	movs	r3, #1
 8007bae:	4622      	mov	r2, r4
 8007bb0:	4649      	mov	r1, r9
 8007bb2:	4638      	mov	r0, r7
 8007bb4:	47c0      	blx	r8
 8007bb6:	3001      	adds	r0, #1
 8007bb8:	d0e6      	beq.n	8007b88 <_printf_common+0xa4>
 8007bba:	3601      	adds	r6, #1
 8007bbc:	e7d9      	b.n	8007b72 <_printf_common+0x8e>
	...

08007bc0 <_printf_i>:
 8007bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc4:	7e0f      	ldrb	r7, [r1, #24]
 8007bc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007bc8:	2f78      	cmp	r7, #120	; 0x78
 8007bca:	4691      	mov	r9, r2
 8007bcc:	4680      	mov	r8, r0
 8007bce:	460c      	mov	r4, r1
 8007bd0:	469a      	mov	sl, r3
 8007bd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007bd6:	d807      	bhi.n	8007be8 <_printf_i+0x28>
 8007bd8:	2f62      	cmp	r7, #98	; 0x62
 8007bda:	d80a      	bhi.n	8007bf2 <_printf_i+0x32>
 8007bdc:	2f00      	cmp	r7, #0
 8007bde:	f000 80d8 	beq.w	8007d92 <_printf_i+0x1d2>
 8007be2:	2f58      	cmp	r7, #88	; 0x58
 8007be4:	f000 80a3 	beq.w	8007d2e <_printf_i+0x16e>
 8007be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007bf0:	e03a      	b.n	8007c68 <_printf_i+0xa8>
 8007bf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007bf6:	2b15      	cmp	r3, #21
 8007bf8:	d8f6      	bhi.n	8007be8 <_printf_i+0x28>
 8007bfa:	a101      	add	r1, pc, #4	; (adr r1, 8007c00 <_printf_i+0x40>)
 8007bfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c00:	08007c59 	.word	0x08007c59
 8007c04:	08007c6d 	.word	0x08007c6d
 8007c08:	08007be9 	.word	0x08007be9
 8007c0c:	08007be9 	.word	0x08007be9
 8007c10:	08007be9 	.word	0x08007be9
 8007c14:	08007be9 	.word	0x08007be9
 8007c18:	08007c6d 	.word	0x08007c6d
 8007c1c:	08007be9 	.word	0x08007be9
 8007c20:	08007be9 	.word	0x08007be9
 8007c24:	08007be9 	.word	0x08007be9
 8007c28:	08007be9 	.word	0x08007be9
 8007c2c:	08007d79 	.word	0x08007d79
 8007c30:	08007c9d 	.word	0x08007c9d
 8007c34:	08007d5b 	.word	0x08007d5b
 8007c38:	08007be9 	.word	0x08007be9
 8007c3c:	08007be9 	.word	0x08007be9
 8007c40:	08007d9b 	.word	0x08007d9b
 8007c44:	08007be9 	.word	0x08007be9
 8007c48:	08007c9d 	.word	0x08007c9d
 8007c4c:	08007be9 	.word	0x08007be9
 8007c50:	08007be9 	.word	0x08007be9
 8007c54:	08007d63 	.word	0x08007d63
 8007c58:	682b      	ldr	r3, [r5, #0]
 8007c5a:	1d1a      	adds	r2, r3, #4
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	602a      	str	r2, [r5, #0]
 8007c60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e0a3      	b.n	8007db4 <_printf_i+0x1f4>
 8007c6c:	6820      	ldr	r0, [r4, #0]
 8007c6e:	6829      	ldr	r1, [r5, #0]
 8007c70:	0606      	lsls	r6, r0, #24
 8007c72:	f101 0304 	add.w	r3, r1, #4
 8007c76:	d50a      	bpl.n	8007c8e <_printf_i+0xce>
 8007c78:	680e      	ldr	r6, [r1, #0]
 8007c7a:	602b      	str	r3, [r5, #0]
 8007c7c:	2e00      	cmp	r6, #0
 8007c7e:	da03      	bge.n	8007c88 <_printf_i+0xc8>
 8007c80:	232d      	movs	r3, #45	; 0x2d
 8007c82:	4276      	negs	r6, r6
 8007c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c88:	485e      	ldr	r0, [pc, #376]	; (8007e04 <_printf_i+0x244>)
 8007c8a:	230a      	movs	r3, #10
 8007c8c:	e019      	b.n	8007cc2 <_printf_i+0x102>
 8007c8e:	680e      	ldr	r6, [r1, #0]
 8007c90:	602b      	str	r3, [r5, #0]
 8007c92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c96:	bf18      	it	ne
 8007c98:	b236      	sxthne	r6, r6
 8007c9a:	e7ef      	b.n	8007c7c <_printf_i+0xbc>
 8007c9c:	682b      	ldr	r3, [r5, #0]
 8007c9e:	6820      	ldr	r0, [r4, #0]
 8007ca0:	1d19      	adds	r1, r3, #4
 8007ca2:	6029      	str	r1, [r5, #0]
 8007ca4:	0601      	lsls	r1, r0, #24
 8007ca6:	d501      	bpl.n	8007cac <_printf_i+0xec>
 8007ca8:	681e      	ldr	r6, [r3, #0]
 8007caa:	e002      	b.n	8007cb2 <_printf_i+0xf2>
 8007cac:	0646      	lsls	r6, r0, #25
 8007cae:	d5fb      	bpl.n	8007ca8 <_printf_i+0xe8>
 8007cb0:	881e      	ldrh	r6, [r3, #0]
 8007cb2:	4854      	ldr	r0, [pc, #336]	; (8007e04 <_printf_i+0x244>)
 8007cb4:	2f6f      	cmp	r7, #111	; 0x6f
 8007cb6:	bf0c      	ite	eq
 8007cb8:	2308      	moveq	r3, #8
 8007cba:	230a      	movne	r3, #10
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cc2:	6865      	ldr	r5, [r4, #4]
 8007cc4:	60a5      	str	r5, [r4, #8]
 8007cc6:	2d00      	cmp	r5, #0
 8007cc8:	bfa2      	ittt	ge
 8007cca:	6821      	ldrge	r1, [r4, #0]
 8007ccc:	f021 0104 	bicge.w	r1, r1, #4
 8007cd0:	6021      	strge	r1, [r4, #0]
 8007cd2:	b90e      	cbnz	r6, 8007cd8 <_printf_i+0x118>
 8007cd4:	2d00      	cmp	r5, #0
 8007cd6:	d04d      	beq.n	8007d74 <_printf_i+0x1b4>
 8007cd8:	4615      	mov	r5, r2
 8007cda:	fbb6 f1f3 	udiv	r1, r6, r3
 8007cde:	fb03 6711 	mls	r7, r3, r1, r6
 8007ce2:	5dc7      	ldrb	r7, [r0, r7]
 8007ce4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ce8:	4637      	mov	r7, r6
 8007cea:	42bb      	cmp	r3, r7
 8007cec:	460e      	mov	r6, r1
 8007cee:	d9f4      	bls.n	8007cda <_printf_i+0x11a>
 8007cf0:	2b08      	cmp	r3, #8
 8007cf2:	d10b      	bne.n	8007d0c <_printf_i+0x14c>
 8007cf4:	6823      	ldr	r3, [r4, #0]
 8007cf6:	07de      	lsls	r6, r3, #31
 8007cf8:	d508      	bpl.n	8007d0c <_printf_i+0x14c>
 8007cfa:	6923      	ldr	r3, [r4, #16]
 8007cfc:	6861      	ldr	r1, [r4, #4]
 8007cfe:	4299      	cmp	r1, r3
 8007d00:	bfde      	ittt	le
 8007d02:	2330      	movle	r3, #48	; 0x30
 8007d04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d0c:	1b52      	subs	r2, r2, r5
 8007d0e:	6122      	str	r2, [r4, #16]
 8007d10:	f8cd a000 	str.w	sl, [sp]
 8007d14:	464b      	mov	r3, r9
 8007d16:	aa03      	add	r2, sp, #12
 8007d18:	4621      	mov	r1, r4
 8007d1a:	4640      	mov	r0, r8
 8007d1c:	f7ff fee2 	bl	8007ae4 <_printf_common>
 8007d20:	3001      	adds	r0, #1
 8007d22:	d14c      	bne.n	8007dbe <_printf_i+0x1fe>
 8007d24:	f04f 30ff 	mov.w	r0, #4294967295
 8007d28:	b004      	add	sp, #16
 8007d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d2e:	4835      	ldr	r0, [pc, #212]	; (8007e04 <_printf_i+0x244>)
 8007d30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007d34:	6829      	ldr	r1, [r5, #0]
 8007d36:	6823      	ldr	r3, [r4, #0]
 8007d38:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d3c:	6029      	str	r1, [r5, #0]
 8007d3e:	061d      	lsls	r5, r3, #24
 8007d40:	d514      	bpl.n	8007d6c <_printf_i+0x1ac>
 8007d42:	07df      	lsls	r7, r3, #31
 8007d44:	bf44      	itt	mi
 8007d46:	f043 0320 	orrmi.w	r3, r3, #32
 8007d4a:	6023      	strmi	r3, [r4, #0]
 8007d4c:	b91e      	cbnz	r6, 8007d56 <_printf_i+0x196>
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	f023 0320 	bic.w	r3, r3, #32
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	2310      	movs	r3, #16
 8007d58:	e7b0      	b.n	8007cbc <_printf_i+0xfc>
 8007d5a:	6823      	ldr	r3, [r4, #0]
 8007d5c:	f043 0320 	orr.w	r3, r3, #32
 8007d60:	6023      	str	r3, [r4, #0]
 8007d62:	2378      	movs	r3, #120	; 0x78
 8007d64:	4828      	ldr	r0, [pc, #160]	; (8007e08 <_printf_i+0x248>)
 8007d66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d6a:	e7e3      	b.n	8007d34 <_printf_i+0x174>
 8007d6c:	0659      	lsls	r1, r3, #25
 8007d6e:	bf48      	it	mi
 8007d70:	b2b6      	uxthmi	r6, r6
 8007d72:	e7e6      	b.n	8007d42 <_printf_i+0x182>
 8007d74:	4615      	mov	r5, r2
 8007d76:	e7bb      	b.n	8007cf0 <_printf_i+0x130>
 8007d78:	682b      	ldr	r3, [r5, #0]
 8007d7a:	6826      	ldr	r6, [r4, #0]
 8007d7c:	6961      	ldr	r1, [r4, #20]
 8007d7e:	1d18      	adds	r0, r3, #4
 8007d80:	6028      	str	r0, [r5, #0]
 8007d82:	0635      	lsls	r5, r6, #24
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	d501      	bpl.n	8007d8c <_printf_i+0x1cc>
 8007d88:	6019      	str	r1, [r3, #0]
 8007d8a:	e002      	b.n	8007d92 <_printf_i+0x1d2>
 8007d8c:	0670      	lsls	r0, r6, #25
 8007d8e:	d5fb      	bpl.n	8007d88 <_printf_i+0x1c8>
 8007d90:	8019      	strh	r1, [r3, #0]
 8007d92:	2300      	movs	r3, #0
 8007d94:	6123      	str	r3, [r4, #16]
 8007d96:	4615      	mov	r5, r2
 8007d98:	e7ba      	b.n	8007d10 <_printf_i+0x150>
 8007d9a:	682b      	ldr	r3, [r5, #0]
 8007d9c:	1d1a      	adds	r2, r3, #4
 8007d9e:	602a      	str	r2, [r5, #0]
 8007da0:	681d      	ldr	r5, [r3, #0]
 8007da2:	6862      	ldr	r2, [r4, #4]
 8007da4:	2100      	movs	r1, #0
 8007da6:	4628      	mov	r0, r5
 8007da8:	f7f8 fa1a 	bl	80001e0 <memchr>
 8007dac:	b108      	cbz	r0, 8007db2 <_printf_i+0x1f2>
 8007dae:	1b40      	subs	r0, r0, r5
 8007db0:	6060      	str	r0, [r4, #4]
 8007db2:	6863      	ldr	r3, [r4, #4]
 8007db4:	6123      	str	r3, [r4, #16]
 8007db6:	2300      	movs	r3, #0
 8007db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dbc:	e7a8      	b.n	8007d10 <_printf_i+0x150>
 8007dbe:	6923      	ldr	r3, [r4, #16]
 8007dc0:	462a      	mov	r2, r5
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	4640      	mov	r0, r8
 8007dc6:	47d0      	blx	sl
 8007dc8:	3001      	adds	r0, #1
 8007dca:	d0ab      	beq.n	8007d24 <_printf_i+0x164>
 8007dcc:	6823      	ldr	r3, [r4, #0]
 8007dce:	079b      	lsls	r3, r3, #30
 8007dd0:	d413      	bmi.n	8007dfa <_printf_i+0x23a>
 8007dd2:	68e0      	ldr	r0, [r4, #12]
 8007dd4:	9b03      	ldr	r3, [sp, #12]
 8007dd6:	4298      	cmp	r0, r3
 8007dd8:	bfb8      	it	lt
 8007dda:	4618      	movlt	r0, r3
 8007ddc:	e7a4      	b.n	8007d28 <_printf_i+0x168>
 8007dde:	2301      	movs	r3, #1
 8007de0:	4632      	mov	r2, r6
 8007de2:	4649      	mov	r1, r9
 8007de4:	4640      	mov	r0, r8
 8007de6:	47d0      	blx	sl
 8007de8:	3001      	adds	r0, #1
 8007dea:	d09b      	beq.n	8007d24 <_printf_i+0x164>
 8007dec:	3501      	adds	r5, #1
 8007dee:	68e3      	ldr	r3, [r4, #12]
 8007df0:	9903      	ldr	r1, [sp, #12]
 8007df2:	1a5b      	subs	r3, r3, r1
 8007df4:	42ab      	cmp	r3, r5
 8007df6:	dcf2      	bgt.n	8007dde <_printf_i+0x21e>
 8007df8:	e7eb      	b.n	8007dd2 <_printf_i+0x212>
 8007dfa:	2500      	movs	r5, #0
 8007dfc:	f104 0619 	add.w	r6, r4, #25
 8007e00:	e7f5      	b.n	8007dee <_printf_i+0x22e>
 8007e02:	bf00      	nop
 8007e04:	0800a04e 	.word	0x0800a04e
 8007e08:	0800a05f 	.word	0x0800a05f

08007e0c <iprintf>:
 8007e0c:	b40f      	push	{r0, r1, r2, r3}
 8007e0e:	4b0a      	ldr	r3, [pc, #40]	; (8007e38 <iprintf+0x2c>)
 8007e10:	b513      	push	{r0, r1, r4, lr}
 8007e12:	681c      	ldr	r4, [r3, #0]
 8007e14:	b124      	cbz	r4, 8007e20 <iprintf+0x14>
 8007e16:	69a3      	ldr	r3, [r4, #24]
 8007e18:	b913      	cbnz	r3, 8007e20 <iprintf+0x14>
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	f7ff fa1c 	bl	8007258 <__sinit>
 8007e20:	ab05      	add	r3, sp, #20
 8007e22:	9a04      	ldr	r2, [sp, #16]
 8007e24:	68a1      	ldr	r1, [r4, #8]
 8007e26:	9301      	str	r3, [sp, #4]
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f001 fdf9 	bl	8009a20 <_vfiprintf_r>
 8007e2e:	b002      	add	sp, #8
 8007e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e34:	b004      	add	sp, #16
 8007e36:	4770      	bx	lr
 8007e38:	20000014 	.word	0x20000014

08007e3c <_puts_r>:
 8007e3c:	b570      	push	{r4, r5, r6, lr}
 8007e3e:	460e      	mov	r6, r1
 8007e40:	4605      	mov	r5, r0
 8007e42:	b118      	cbz	r0, 8007e4c <_puts_r+0x10>
 8007e44:	6983      	ldr	r3, [r0, #24]
 8007e46:	b90b      	cbnz	r3, 8007e4c <_puts_r+0x10>
 8007e48:	f7ff fa06 	bl	8007258 <__sinit>
 8007e4c:	69ab      	ldr	r3, [r5, #24]
 8007e4e:	68ac      	ldr	r4, [r5, #8]
 8007e50:	b913      	cbnz	r3, 8007e58 <_puts_r+0x1c>
 8007e52:	4628      	mov	r0, r5
 8007e54:	f7ff fa00 	bl	8007258 <__sinit>
 8007e58:	4b2c      	ldr	r3, [pc, #176]	; (8007f0c <_puts_r+0xd0>)
 8007e5a:	429c      	cmp	r4, r3
 8007e5c:	d120      	bne.n	8007ea0 <_puts_r+0x64>
 8007e5e:	686c      	ldr	r4, [r5, #4]
 8007e60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e62:	07db      	lsls	r3, r3, #31
 8007e64:	d405      	bmi.n	8007e72 <_puts_r+0x36>
 8007e66:	89a3      	ldrh	r3, [r4, #12]
 8007e68:	0598      	lsls	r0, r3, #22
 8007e6a:	d402      	bmi.n	8007e72 <_puts_r+0x36>
 8007e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e6e:	f7ff fab6 	bl	80073de <__retarget_lock_acquire_recursive>
 8007e72:	89a3      	ldrh	r3, [r4, #12]
 8007e74:	0719      	lsls	r1, r3, #28
 8007e76:	d51d      	bpl.n	8007eb4 <_puts_r+0x78>
 8007e78:	6923      	ldr	r3, [r4, #16]
 8007e7a:	b1db      	cbz	r3, 8007eb4 <_puts_r+0x78>
 8007e7c:	3e01      	subs	r6, #1
 8007e7e:	68a3      	ldr	r3, [r4, #8]
 8007e80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007e84:	3b01      	subs	r3, #1
 8007e86:	60a3      	str	r3, [r4, #8]
 8007e88:	bb39      	cbnz	r1, 8007eda <_puts_r+0x9e>
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	da38      	bge.n	8007f00 <_puts_r+0xc4>
 8007e8e:	4622      	mov	r2, r4
 8007e90:	210a      	movs	r1, #10
 8007e92:	4628      	mov	r0, r5
 8007e94:	f000 f906 	bl	80080a4 <__swbuf_r>
 8007e98:	3001      	adds	r0, #1
 8007e9a:	d011      	beq.n	8007ec0 <_puts_r+0x84>
 8007e9c:	250a      	movs	r5, #10
 8007e9e:	e011      	b.n	8007ec4 <_puts_r+0x88>
 8007ea0:	4b1b      	ldr	r3, [pc, #108]	; (8007f10 <_puts_r+0xd4>)
 8007ea2:	429c      	cmp	r4, r3
 8007ea4:	d101      	bne.n	8007eaa <_puts_r+0x6e>
 8007ea6:	68ac      	ldr	r4, [r5, #8]
 8007ea8:	e7da      	b.n	8007e60 <_puts_r+0x24>
 8007eaa:	4b1a      	ldr	r3, [pc, #104]	; (8007f14 <_puts_r+0xd8>)
 8007eac:	429c      	cmp	r4, r3
 8007eae:	bf08      	it	eq
 8007eb0:	68ec      	ldreq	r4, [r5, #12]
 8007eb2:	e7d5      	b.n	8007e60 <_puts_r+0x24>
 8007eb4:	4621      	mov	r1, r4
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	f000 f958 	bl	800816c <__swsetup_r>
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	d0dd      	beq.n	8007e7c <_puts_r+0x40>
 8007ec0:	f04f 35ff 	mov.w	r5, #4294967295
 8007ec4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ec6:	07da      	lsls	r2, r3, #31
 8007ec8:	d405      	bmi.n	8007ed6 <_puts_r+0x9a>
 8007eca:	89a3      	ldrh	r3, [r4, #12]
 8007ecc:	059b      	lsls	r3, r3, #22
 8007ece:	d402      	bmi.n	8007ed6 <_puts_r+0x9a>
 8007ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ed2:	f7ff fa85 	bl	80073e0 <__retarget_lock_release_recursive>
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	bd70      	pop	{r4, r5, r6, pc}
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	da04      	bge.n	8007ee8 <_puts_r+0xac>
 8007ede:	69a2      	ldr	r2, [r4, #24]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	dc06      	bgt.n	8007ef2 <_puts_r+0xb6>
 8007ee4:	290a      	cmp	r1, #10
 8007ee6:	d004      	beq.n	8007ef2 <_puts_r+0xb6>
 8007ee8:	6823      	ldr	r3, [r4, #0]
 8007eea:	1c5a      	adds	r2, r3, #1
 8007eec:	6022      	str	r2, [r4, #0]
 8007eee:	7019      	strb	r1, [r3, #0]
 8007ef0:	e7c5      	b.n	8007e7e <_puts_r+0x42>
 8007ef2:	4622      	mov	r2, r4
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	f000 f8d5 	bl	80080a4 <__swbuf_r>
 8007efa:	3001      	adds	r0, #1
 8007efc:	d1bf      	bne.n	8007e7e <_puts_r+0x42>
 8007efe:	e7df      	b.n	8007ec0 <_puts_r+0x84>
 8007f00:	6823      	ldr	r3, [r4, #0]
 8007f02:	250a      	movs	r5, #10
 8007f04:	1c5a      	adds	r2, r3, #1
 8007f06:	6022      	str	r2, [r4, #0]
 8007f08:	701d      	strb	r5, [r3, #0]
 8007f0a:	e7db      	b.n	8007ec4 <_puts_r+0x88>
 8007f0c:	08009ff8 	.word	0x08009ff8
 8007f10:	0800a018 	.word	0x0800a018
 8007f14:	08009fd8 	.word	0x08009fd8

08007f18 <puts>:
 8007f18:	4b02      	ldr	r3, [pc, #8]	; (8007f24 <puts+0xc>)
 8007f1a:	4601      	mov	r1, r0
 8007f1c:	6818      	ldr	r0, [r3, #0]
 8007f1e:	f7ff bf8d 	b.w	8007e3c <_puts_r>
 8007f22:	bf00      	nop
 8007f24:	20000014 	.word	0x20000014

08007f28 <cleanup_glue>:
 8007f28:	b538      	push	{r3, r4, r5, lr}
 8007f2a:	460c      	mov	r4, r1
 8007f2c:	6809      	ldr	r1, [r1, #0]
 8007f2e:	4605      	mov	r5, r0
 8007f30:	b109      	cbz	r1, 8007f36 <cleanup_glue+0xe>
 8007f32:	f7ff fff9 	bl	8007f28 <cleanup_glue>
 8007f36:	4621      	mov	r1, r4
 8007f38:	4628      	mov	r0, r5
 8007f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f3e:	f001 bcf9 	b.w	8009934 <_free_r>
	...

08007f44 <_reclaim_reent>:
 8007f44:	4b2c      	ldr	r3, [pc, #176]	; (8007ff8 <_reclaim_reent+0xb4>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4283      	cmp	r3, r0
 8007f4a:	b570      	push	{r4, r5, r6, lr}
 8007f4c:	4604      	mov	r4, r0
 8007f4e:	d051      	beq.n	8007ff4 <_reclaim_reent+0xb0>
 8007f50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007f52:	b143      	cbz	r3, 8007f66 <_reclaim_reent+0x22>
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d14a      	bne.n	8007ff0 <_reclaim_reent+0xac>
 8007f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f5c:	6819      	ldr	r1, [r3, #0]
 8007f5e:	b111      	cbz	r1, 8007f66 <_reclaim_reent+0x22>
 8007f60:	4620      	mov	r0, r4
 8007f62:	f001 fce7 	bl	8009934 <_free_r>
 8007f66:	6961      	ldr	r1, [r4, #20]
 8007f68:	b111      	cbz	r1, 8007f70 <_reclaim_reent+0x2c>
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f001 fce2 	bl	8009934 <_free_r>
 8007f70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007f72:	b111      	cbz	r1, 8007f7a <_reclaim_reent+0x36>
 8007f74:	4620      	mov	r0, r4
 8007f76:	f001 fcdd 	bl	8009934 <_free_r>
 8007f7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007f7c:	b111      	cbz	r1, 8007f84 <_reclaim_reent+0x40>
 8007f7e:	4620      	mov	r0, r4
 8007f80:	f001 fcd8 	bl	8009934 <_free_r>
 8007f84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007f86:	b111      	cbz	r1, 8007f8e <_reclaim_reent+0x4a>
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f001 fcd3 	bl	8009934 <_free_r>
 8007f8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007f90:	b111      	cbz	r1, 8007f98 <_reclaim_reent+0x54>
 8007f92:	4620      	mov	r0, r4
 8007f94:	f001 fcce 	bl	8009934 <_free_r>
 8007f98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007f9a:	b111      	cbz	r1, 8007fa2 <_reclaim_reent+0x5e>
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f001 fcc9 	bl	8009934 <_free_r>
 8007fa2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007fa4:	b111      	cbz	r1, 8007fac <_reclaim_reent+0x68>
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	f001 fcc4 	bl	8009934 <_free_r>
 8007fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fae:	b111      	cbz	r1, 8007fb6 <_reclaim_reent+0x72>
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	f001 fcbf 	bl	8009934 <_free_r>
 8007fb6:	69a3      	ldr	r3, [r4, #24]
 8007fb8:	b1e3      	cbz	r3, 8007ff4 <_reclaim_reent+0xb0>
 8007fba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	4798      	blx	r3
 8007fc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007fc2:	b1b9      	cbz	r1, 8007ff4 <_reclaim_reent+0xb0>
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007fca:	f7ff bfad 	b.w	8007f28 <cleanup_glue>
 8007fce:	5949      	ldr	r1, [r1, r5]
 8007fd0:	b941      	cbnz	r1, 8007fe4 <_reclaim_reent+0xa0>
 8007fd2:	3504      	adds	r5, #4
 8007fd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fd6:	2d80      	cmp	r5, #128	; 0x80
 8007fd8:	68d9      	ldr	r1, [r3, #12]
 8007fda:	d1f8      	bne.n	8007fce <_reclaim_reent+0x8a>
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f001 fca9 	bl	8009934 <_free_r>
 8007fe2:	e7ba      	b.n	8007f5a <_reclaim_reent+0x16>
 8007fe4:	680e      	ldr	r6, [r1, #0]
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f001 fca4 	bl	8009934 <_free_r>
 8007fec:	4631      	mov	r1, r6
 8007fee:	e7ef      	b.n	8007fd0 <_reclaim_reent+0x8c>
 8007ff0:	2500      	movs	r5, #0
 8007ff2:	e7ef      	b.n	8007fd4 <_reclaim_reent+0x90>
 8007ff4:	bd70      	pop	{r4, r5, r6, pc}
 8007ff6:	bf00      	nop
 8007ff8:	20000014 	.word	0x20000014

08007ffc <_sbrk_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	4d06      	ldr	r5, [pc, #24]	; (8008018 <_sbrk_r+0x1c>)
 8008000:	2300      	movs	r3, #0
 8008002:	4604      	mov	r4, r0
 8008004:	4608      	mov	r0, r1
 8008006:	602b      	str	r3, [r5, #0]
 8008008:	f7f9 fae2 	bl	80015d0 <_sbrk>
 800800c:	1c43      	adds	r3, r0, #1
 800800e:	d102      	bne.n	8008016 <_sbrk_r+0x1a>
 8008010:	682b      	ldr	r3, [r5, #0]
 8008012:	b103      	cbz	r3, 8008016 <_sbrk_r+0x1a>
 8008014:	6023      	str	r3, [r4, #0]
 8008016:	bd38      	pop	{r3, r4, r5, pc}
 8008018:	2000248c 	.word	0x2000248c

0800801c <__sread>:
 800801c:	b510      	push	{r4, lr}
 800801e:	460c      	mov	r4, r1
 8008020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008024:	f001 fe2c 	bl	8009c80 <_read_r>
 8008028:	2800      	cmp	r0, #0
 800802a:	bfab      	itete	ge
 800802c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800802e:	89a3      	ldrhlt	r3, [r4, #12]
 8008030:	181b      	addge	r3, r3, r0
 8008032:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008036:	bfac      	ite	ge
 8008038:	6563      	strge	r3, [r4, #84]	; 0x54
 800803a:	81a3      	strhlt	r3, [r4, #12]
 800803c:	bd10      	pop	{r4, pc}

0800803e <__swrite>:
 800803e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008042:	461f      	mov	r7, r3
 8008044:	898b      	ldrh	r3, [r1, #12]
 8008046:	05db      	lsls	r3, r3, #23
 8008048:	4605      	mov	r5, r0
 800804a:	460c      	mov	r4, r1
 800804c:	4616      	mov	r6, r2
 800804e:	d505      	bpl.n	800805c <__swrite+0x1e>
 8008050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008054:	2302      	movs	r3, #2
 8008056:	2200      	movs	r2, #0
 8008058:	f001 f846 	bl	80090e8 <_lseek_r>
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008062:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008066:	81a3      	strh	r3, [r4, #12]
 8008068:	4632      	mov	r2, r6
 800806a:	463b      	mov	r3, r7
 800806c:	4628      	mov	r0, r5
 800806e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008072:	f000 b869 	b.w	8008148 <_write_r>

08008076 <__sseek>:
 8008076:	b510      	push	{r4, lr}
 8008078:	460c      	mov	r4, r1
 800807a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800807e:	f001 f833 	bl	80090e8 <_lseek_r>
 8008082:	1c43      	adds	r3, r0, #1
 8008084:	89a3      	ldrh	r3, [r4, #12]
 8008086:	bf15      	itete	ne
 8008088:	6560      	strne	r0, [r4, #84]	; 0x54
 800808a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800808e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008092:	81a3      	strheq	r3, [r4, #12]
 8008094:	bf18      	it	ne
 8008096:	81a3      	strhne	r3, [r4, #12]
 8008098:	bd10      	pop	{r4, pc}

0800809a <__sclose>:
 800809a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800809e:	f000 b8d3 	b.w	8008248 <_close_r>
	...

080080a4 <__swbuf_r>:
 80080a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a6:	460e      	mov	r6, r1
 80080a8:	4614      	mov	r4, r2
 80080aa:	4605      	mov	r5, r0
 80080ac:	b118      	cbz	r0, 80080b6 <__swbuf_r+0x12>
 80080ae:	6983      	ldr	r3, [r0, #24]
 80080b0:	b90b      	cbnz	r3, 80080b6 <__swbuf_r+0x12>
 80080b2:	f7ff f8d1 	bl	8007258 <__sinit>
 80080b6:	4b21      	ldr	r3, [pc, #132]	; (800813c <__swbuf_r+0x98>)
 80080b8:	429c      	cmp	r4, r3
 80080ba:	d12b      	bne.n	8008114 <__swbuf_r+0x70>
 80080bc:	686c      	ldr	r4, [r5, #4]
 80080be:	69a3      	ldr	r3, [r4, #24]
 80080c0:	60a3      	str	r3, [r4, #8]
 80080c2:	89a3      	ldrh	r3, [r4, #12]
 80080c4:	071a      	lsls	r2, r3, #28
 80080c6:	d52f      	bpl.n	8008128 <__swbuf_r+0x84>
 80080c8:	6923      	ldr	r3, [r4, #16]
 80080ca:	b36b      	cbz	r3, 8008128 <__swbuf_r+0x84>
 80080cc:	6923      	ldr	r3, [r4, #16]
 80080ce:	6820      	ldr	r0, [r4, #0]
 80080d0:	1ac0      	subs	r0, r0, r3
 80080d2:	6963      	ldr	r3, [r4, #20]
 80080d4:	b2f6      	uxtb	r6, r6
 80080d6:	4283      	cmp	r3, r0
 80080d8:	4637      	mov	r7, r6
 80080da:	dc04      	bgt.n	80080e6 <__swbuf_r+0x42>
 80080dc:	4621      	mov	r1, r4
 80080de:	4628      	mov	r0, r5
 80080e0:	f000 ffc2 	bl	8009068 <_fflush_r>
 80080e4:	bb30      	cbnz	r0, 8008134 <__swbuf_r+0x90>
 80080e6:	68a3      	ldr	r3, [r4, #8]
 80080e8:	3b01      	subs	r3, #1
 80080ea:	60a3      	str	r3, [r4, #8]
 80080ec:	6823      	ldr	r3, [r4, #0]
 80080ee:	1c5a      	adds	r2, r3, #1
 80080f0:	6022      	str	r2, [r4, #0]
 80080f2:	701e      	strb	r6, [r3, #0]
 80080f4:	6963      	ldr	r3, [r4, #20]
 80080f6:	3001      	adds	r0, #1
 80080f8:	4283      	cmp	r3, r0
 80080fa:	d004      	beq.n	8008106 <__swbuf_r+0x62>
 80080fc:	89a3      	ldrh	r3, [r4, #12]
 80080fe:	07db      	lsls	r3, r3, #31
 8008100:	d506      	bpl.n	8008110 <__swbuf_r+0x6c>
 8008102:	2e0a      	cmp	r6, #10
 8008104:	d104      	bne.n	8008110 <__swbuf_r+0x6c>
 8008106:	4621      	mov	r1, r4
 8008108:	4628      	mov	r0, r5
 800810a:	f000 ffad 	bl	8009068 <_fflush_r>
 800810e:	b988      	cbnz	r0, 8008134 <__swbuf_r+0x90>
 8008110:	4638      	mov	r0, r7
 8008112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008114:	4b0a      	ldr	r3, [pc, #40]	; (8008140 <__swbuf_r+0x9c>)
 8008116:	429c      	cmp	r4, r3
 8008118:	d101      	bne.n	800811e <__swbuf_r+0x7a>
 800811a:	68ac      	ldr	r4, [r5, #8]
 800811c:	e7cf      	b.n	80080be <__swbuf_r+0x1a>
 800811e:	4b09      	ldr	r3, [pc, #36]	; (8008144 <__swbuf_r+0xa0>)
 8008120:	429c      	cmp	r4, r3
 8008122:	bf08      	it	eq
 8008124:	68ec      	ldreq	r4, [r5, #12]
 8008126:	e7ca      	b.n	80080be <__swbuf_r+0x1a>
 8008128:	4621      	mov	r1, r4
 800812a:	4628      	mov	r0, r5
 800812c:	f000 f81e 	bl	800816c <__swsetup_r>
 8008130:	2800      	cmp	r0, #0
 8008132:	d0cb      	beq.n	80080cc <__swbuf_r+0x28>
 8008134:	f04f 37ff 	mov.w	r7, #4294967295
 8008138:	e7ea      	b.n	8008110 <__swbuf_r+0x6c>
 800813a:	bf00      	nop
 800813c:	08009ff8 	.word	0x08009ff8
 8008140:	0800a018 	.word	0x0800a018
 8008144:	08009fd8 	.word	0x08009fd8

08008148 <_write_r>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	4d07      	ldr	r5, [pc, #28]	; (8008168 <_write_r+0x20>)
 800814c:	4604      	mov	r4, r0
 800814e:	4608      	mov	r0, r1
 8008150:	4611      	mov	r1, r2
 8008152:	2200      	movs	r2, #0
 8008154:	602a      	str	r2, [r5, #0]
 8008156:	461a      	mov	r2, r3
 8008158:	f7f8 fecf 	bl	8000efa <_write>
 800815c:	1c43      	adds	r3, r0, #1
 800815e:	d102      	bne.n	8008166 <_write_r+0x1e>
 8008160:	682b      	ldr	r3, [r5, #0]
 8008162:	b103      	cbz	r3, 8008166 <_write_r+0x1e>
 8008164:	6023      	str	r3, [r4, #0]
 8008166:	bd38      	pop	{r3, r4, r5, pc}
 8008168:	2000248c 	.word	0x2000248c

0800816c <__swsetup_r>:
 800816c:	4b32      	ldr	r3, [pc, #200]	; (8008238 <__swsetup_r+0xcc>)
 800816e:	b570      	push	{r4, r5, r6, lr}
 8008170:	681d      	ldr	r5, [r3, #0]
 8008172:	4606      	mov	r6, r0
 8008174:	460c      	mov	r4, r1
 8008176:	b125      	cbz	r5, 8008182 <__swsetup_r+0x16>
 8008178:	69ab      	ldr	r3, [r5, #24]
 800817a:	b913      	cbnz	r3, 8008182 <__swsetup_r+0x16>
 800817c:	4628      	mov	r0, r5
 800817e:	f7ff f86b 	bl	8007258 <__sinit>
 8008182:	4b2e      	ldr	r3, [pc, #184]	; (800823c <__swsetup_r+0xd0>)
 8008184:	429c      	cmp	r4, r3
 8008186:	d10f      	bne.n	80081a8 <__swsetup_r+0x3c>
 8008188:	686c      	ldr	r4, [r5, #4]
 800818a:	89a3      	ldrh	r3, [r4, #12]
 800818c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008190:	0719      	lsls	r1, r3, #28
 8008192:	d42c      	bmi.n	80081ee <__swsetup_r+0x82>
 8008194:	06dd      	lsls	r5, r3, #27
 8008196:	d411      	bmi.n	80081bc <__swsetup_r+0x50>
 8008198:	2309      	movs	r3, #9
 800819a:	6033      	str	r3, [r6, #0]
 800819c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80081a0:	81a3      	strh	r3, [r4, #12]
 80081a2:	f04f 30ff 	mov.w	r0, #4294967295
 80081a6:	e03e      	b.n	8008226 <__swsetup_r+0xba>
 80081a8:	4b25      	ldr	r3, [pc, #148]	; (8008240 <__swsetup_r+0xd4>)
 80081aa:	429c      	cmp	r4, r3
 80081ac:	d101      	bne.n	80081b2 <__swsetup_r+0x46>
 80081ae:	68ac      	ldr	r4, [r5, #8]
 80081b0:	e7eb      	b.n	800818a <__swsetup_r+0x1e>
 80081b2:	4b24      	ldr	r3, [pc, #144]	; (8008244 <__swsetup_r+0xd8>)
 80081b4:	429c      	cmp	r4, r3
 80081b6:	bf08      	it	eq
 80081b8:	68ec      	ldreq	r4, [r5, #12]
 80081ba:	e7e6      	b.n	800818a <__swsetup_r+0x1e>
 80081bc:	0758      	lsls	r0, r3, #29
 80081be:	d512      	bpl.n	80081e6 <__swsetup_r+0x7a>
 80081c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081c2:	b141      	cbz	r1, 80081d6 <__swsetup_r+0x6a>
 80081c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081c8:	4299      	cmp	r1, r3
 80081ca:	d002      	beq.n	80081d2 <__swsetup_r+0x66>
 80081cc:	4630      	mov	r0, r6
 80081ce:	f001 fbb1 	bl	8009934 <_free_r>
 80081d2:	2300      	movs	r3, #0
 80081d4:	6363      	str	r3, [r4, #52]	; 0x34
 80081d6:	89a3      	ldrh	r3, [r4, #12]
 80081d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081dc:	81a3      	strh	r3, [r4, #12]
 80081de:	2300      	movs	r3, #0
 80081e0:	6063      	str	r3, [r4, #4]
 80081e2:	6923      	ldr	r3, [r4, #16]
 80081e4:	6023      	str	r3, [r4, #0]
 80081e6:	89a3      	ldrh	r3, [r4, #12]
 80081e8:	f043 0308 	orr.w	r3, r3, #8
 80081ec:	81a3      	strh	r3, [r4, #12]
 80081ee:	6923      	ldr	r3, [r4, #16]
 80081f0:	b94b      	cbnz	r3, 8008206 <__swsetup_r+0x9a>
 80081f2:	89a3      	ldrh	r3, [r4, #12]
 80081f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081fc:	d003      	beq.n	8008206 <__swsetup_r+0x9a>
 80081fe:	4621      	mov	r1, r4
 8008200:	4630      	mov	r0, r6
 8008202:	f000 ffa9 	bl	8009158 <__smakebuf_r>
 8008206:	89a0      	ldrh	r0, [r4, #12]
 8008208:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800820c:	f010 0301 	ands.w	r3, r0, #1
 8008210:	d00a      	beq.n	8008228 <__swsetup_r+0xbc>
 8008212:	2300      	movs	r3, #0
 8008214:	60a3      	str	r3, [r4, #8]
 8008216:	6963      	ldr	r3, [r4, #20]
 8008218:	425b      	negs	r3, r3
 800821a:	61a3      	str	r3, [r4, #24]
 800821c:	6923      	ldr	r3, [r4, #16]
 800821e:	b943      	cbnz	r3, 8008232 <__swsetup_r+0xc6>
 8008220:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008224:	d1ba      	bne.n	800819c <__swsetup_r+0x30>
 8008226:	bd70      	pop	{r4, r5, r6, pc}
 8008228:	0781      	lsls	r1, r0, #30
 800822a:	bf58      	it	pl
 800822c:	6963      	ldrpl	r3, [r4, #20]
 800822e:	60a3      	str	r3, [r4, #8]
 8008230:	e7f4      	b.n	800821c <__swsetup_r+0xb0>
 8008232:	2000      	movs	r0, #0
 8008234:	e7f7      	b.n	8008226 <__swsetup_r+0xba>
 8008236:	bf00      	nop
 8008238:	20000014 	.word	0x20000014
 800823c:	08009ff8 	.word	0x08009ff8
 8008240:	0800a018 	.word	0x0800a018
 8008244:	08009fd8 	.word	0x08009fd8

08008248 <_close_r>:
 8008248:	b538      	push	{r3, r4, r5, lr}
 800824a:	4d06      	ldr	r5, [pc, #24]	; (8008264 <_close_r+0x1c>)
 800824c:	2300      	movs	r3, #0
 800824e:	4604      	mov	r4, r0
 8008250:	4608      	mov	r0, r1
 8008252:	602b      	str	r3, [r5, #0]
 8008254:	f7f9 f987 	bl	8001566 <_close>
 8008258:	1c43      	adds	r3, r0, #1
 800825a:	d102      	bne.n	8008262 <_close_r+0x1a>
 800825c:	682b      	ldr	r3, [r5, #0]
 800825e:	b103      	cbz	r3, 8008262 <_close_r+0x1a>
 8008260:	6023      	str	r3, [r4, #0]
 8008262:	bd38      	pop	{r3, r4, r5, pc}
 8008264:	2000248c 	.word	0x2000248c

08008268 <quorem>:
 8008268:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800826c:	6903      	ldr	r3, [r0, #16]
 800826e:	690c      	ldr	r4, [r1, #16]
 8008270:	42a3      	cmp	r3, r4
 8008272:	4607      	mov	r7, r0
 8008274:	f2c0 8081 	blt.w	800837a <quorem+0x112>
 8008278:	3c01      	subs	r4, #1
 800827a:	f101 0814 	add.w	r8, r1, #20
 800827e:	f100 0514 	add.w	r5, r0, #20
 8008282:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008286:	9301      	str	r3, [sp, #4]
 8008288:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800828c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008290:	3301      	adds	r3, #1
 8008292:	429a      	cmp	r2, r3
 8008294:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008298:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800829c:	fbb2 f6f3 	udiv	r6, r2, r3
 80082a0:	d331      	bcc.n	8008306 <quorem+0x9e>
 80082a2:	f04f 0e00 	mov.w	lr, #0
 80082a6:	4640      	mov	r0, r8
 80082a8:	46ac      	mov	ip, r5
 80082aa:	46f2      	mov	sl, lr
 80082ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80082b0:	b293      	uxth	r3, r2
 80082b2:	fb06 e303 	mla	r3, r6, r3, lr
 80082b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	ebaa 0303 	sub.w	r3, sl, r3
 80082c0:	f8dc a000 	ldr.w	sl, [ip]
 80082c4:	0c12      	lsrs	r2, r2, #16
 80082c6:	fa13 f38a 	uxtah	r3, r3, sl
 80082ca:	fb06 e202 	mla	r2, r6, r2, lr
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	9b00      	ldr	r3, [sp, #0]
 80082d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082d6:	b292      	uxth	r2, r2
 80082d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80082dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80082e4:	4581      	cmp	r9, r0
 80082e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082ea:	f84c 3b04 	str.w	r3, [ip], #4
 80082ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80082f2:	d2db      	bcs.n	80082ac <quorem+0x44>
 80082f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80082f8:	b92b      	cbnz	r3, 8008306 <quorem+0x9e>
 80082fa:	9b01      	ldr	r3, [sp, #4]
 80082fc:	3b04      	subs	r3, #4
 80082fe:	429d      	cmp	r5, r3
 8008300:	461a      	mov	r2, r3
 8008302:	d32e      	bcc.n	8008362 <quorem+0xfa>
 8008304:	613c      	str	r4, [r7, #16]
 8008306:	4638      	mov	r0, r7
 8008308:	f001 f9fc 	bl	8009704 <__mcmp>
 800830c:	2800      	cmp	r0, #0
 800830e:	db24      	blt.n	800835a <quorem+0xf2>
 8008310:	3601      	adds	r6, #1
 8008312:	4628      	mov	r0, r5
 8008314:	f04f 0c00 	mov.w	ip, #0
 8008318:	f858 2b04 	ldr.w	r2, [r8], #4
 800831c:	f8d0 e000 	ldr.w	lr, [r0]
 8008320:	b293      	uxth	r3, r2
 8008322:	ebac 0303 	sub.w	r3, ip, r3
 8008326:	0c12      	lsrs	r2, r2, #16
 8008328:	fa13 f38e 	uxtah	r3, r3, lr
 800832c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008330:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008334:	b29b      	uxth	r3, r3
 8008336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800833a:	45c1      	cmp	r9, r8
 800833c:	f840 3b04 	str.w	r3, [r0], #4
 8008340:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008344:	d2e8      	bcs.n	8008318 <quorem+0xb0>
 8008346:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800834a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800834e:	b922      	cbnz	r2, 800835a <quorem+0xf2>
 8008350:	3b04      	subs	r3, #4
 8008352:	429d      	cmp	r5, r3
 8008354:	461a      	mov	r2, r3
 8008356:	d30a      	bcc.n	800836e <quorem+0x106>
 8008358:	613c      	str	r4, [r7, #16]
 800835a:	4630      	mov	r0, r6
 800835c:	b003      	add	sp, #12
 800835e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008362:	6812      	ldr	r2, [r2, #0]
 8008364:	3b04      	subs	r3, #4
 8008366:	2a00      	cmp	r2, #0
 8008368:	d1cc      	bne.n	8008304 <quorem+0x9c>
 800836a:	3c01      	subs	r4, #1
 800836c:	e7c7      	b.n	80082fe <quorem+0x96>
 800836e:	6812      	ldr	r2, [r2, #0]
 8008370:	3b04      	subs	r3, #4
 8008372:	2a00      	cmp	r2, #0
 8008374:	d1f0      	bne.n	8008358 <quorem+0xf0>
 8008376:	3c01      	subs	r4, #1
 8008378:	e7eb      	b.n	8008352 <quorem+0xea>
 800837a:	2000      	movs	r0, #0
 800837c:	e7ee      	b.n	800835c <quorem+0xf4>
	...

08008380 <_dtoa_r>:
 8008380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008384:	ed2d 8b04 	vpush	{d8-d9}
 8008388:	ec57 6b10 	vmov	r6, r7, d0
 800838c:	b093      	sub	sp, #76	; 0x4c
 800838e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008390:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008394:	9106      	str	r1, [sp, #24]
 8008396:	ee10 aa10 	vmov	sl, s0
 800839a:	4604      	mov	r4, r0
 800839c:	9209      	str	r2, [sp, #36]	; 0x24
 800839e:	930c      	str	r3, [sp, #48]	; 0x30
 80083a0:	46bb      	mov	fp, r7
 80083a2:	b975      	cbnz	r5, 80083c2 <_dtoa_r+0x42>
 80083a4:	2010      	movs	r0, #16
 80083a6:	f000 ff17 	bl	80091d8 <malloc>
 80083aa:	4602      	mov	r2, r0
 80083ac:	6260      	str	r0, [r4, #36]	; 0x24
 80083ae:	b920      	cbnz	r0, 80083ba <_dtoa_r+0x3a>
 80083b0:	4ba7      	ldr	r3, [pc, #668]	; (8008650 <_dtoa_r+0x2d0>)
 80083b2:	21ea      	movs	r1, #234	; 0xea
 80083b4:	48a7      	ldr	r0, [pc, #668]	; (8008654 <_dtoa_r+0x2d4>)
 80083b6:	f001 fc75 	bl	8009ca4 <__assert_func>
 80083ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80083be:	6005      	str	r5, [r0, #0]
 80083c0:	60c5      	str	r5, [r0, #12]
 80083c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083c4:	6819      	ldr	r1, [r3, #0]
 80083c6:	b151      	cbz	r1, 80083de <_dtoa_r+0x5e>
 80083c8:	685a      	ldr	r2, [r3, #4]
 80083ca:	604a      	str	r2, [r1, #4]
 80083cc:	2301      	movs	r3, #1
 80083ce:	4093      	lsls	r3, r2
 80083d0:	608b      	str	r3, [r1, #8]
 80083d2:	4620      	mov	r0, r4
 80083d4:	f000 ff54 	bl	8009280 <_Bfree>
 80083d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083da:	2200      	movs	r2, #0
 80083dc:	601a      	str	r2, [r3, #0]
 80083de:	1e3b      	subs	r3, r7, #0
 80083e0:	bfaa      	itet	ge
 80083e2:	2300      	movge	r3, #0
 80083e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80083e8:	f8c8 3000 	strge.w	r3, [r8]
 80083ec:	4b9a      	ldr	r3, [pc, #616]	; (8008658 <_dtoa_r+0x2d8>)
 80083ee:	bfbc      	itt	lt
 80083f0:	2201      	movlt	r2, #1
 80083f2:	f8c8 2000 	strlt.w	r2, [r8]
 80083f6:	ea33 030b 	bics.w	r3, r3, fp
 80083fa:	d11b      	bne.n	8008434 <_dtoa_r+0xb4>
 80083fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8008402:	6013      	str	r3, [r2, #0]
 8008404:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008408:	4333      	orrs	r3, r6
 800840a:	f000 8592 	beq.w	8008f32 <_dtoa_r+0xbb2>
 800840e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008410:	b963      	cbnz	r3, 800842c <_dtoa_r+0xac>
 8008412:	4b92      	ldr	r3, [pc, #584]	; (800865c <_dtoa_r+0x2dc>)
 8008414:	e022      	b.n	800845c <_dtoa_r+0xdc>
 8008416:	4b92      	ldr	r3, [pc, #584]	; (8008660 <_dtoa_r+0x2e0>)
 8008418:	9301      	str	r3, [sp, #4]
 800841a:	3308      	adds	r3, #8
 800841c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800841e:	6013      	str	r3, [r2, #0]
 8008420:	9801      	ldr	r0, [sp, #4]
 8008422:	b013      	add	sp, #76	; 0x4c
 8008424:	ecbd 8b04 	vpop	{d8-d9}
 8008428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800842c:	4b8b      	ldr	r3, [pc, #556]	; (800865c <_dtoa_r+0x2dc>)
 800842e:	9301      	str	r3, [sp, #4]
 8008430:	3303      	adds	r3, #3
 8008432:	e7f3      	b.n	800841c <_dtoa_r+0x9c>
 8008434:	2200      	movs	r2, #0
 8008436:	2300      	movs	r3, #0
 8008438:	4650      	mov	r0, sl
 800843a:	4659      	mov	r1, fp
 800843c:	f7f8 fb44 	bl	8000ac8 <__aeabi_dcmpeq>
 8008440:	ec4b ab19 	vmov	d9, sl, fp
 8008444:	4680      	mov	r8, r0
 8008446:	b158      	cbz	r0, 8008460 <_dtoa_r+0xe0>
 8008448:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800844a:	2301      	movs	r3, #1
 800844c:	6013      	str	r3, [r2, #0]
 800844e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 856b 	beq.w	8008f2c <_dtoa_r+0xbac>
 8008456:	4883      	ldr	r0, [pc, #524]	; (8008664 <_dtoa_r+0x2e4>)
 8008458:	6018      	str	r0, [r3, #0]
 800845a:	1e43      	subs	r3, r0, #1
 800845c:	9301      	str	r3, [sp, #4]
 800845e:	e7df      	b.n	8008420 <_dtoa_r+0xa0>
 8008460:	ec4b ab10 	vmov	d0, sl, fp
 8008464:	aa10      	add	r2, sp, #64	; 0x40
 8008466:	a911      	add	r1, sp, #68	; 0x44
 8008468:	4620      	mov	r0, r4
 800846a:	f001 f9f1 	bl	8009850 <__d2b>
 800846e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008472:	ee08 0a10 	vmov	s16, r0
 8008476:	2d00      	cmp	r5, #0
 8008478:	f000 8084 	beq.w	8008584 <_dtoa_r+0x204>
 800847c:	ee19 3a90 	vmov	r3, s19
 8008480:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008484:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008488:	4656      	mov	r6, sl
 800848a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800848e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008492:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008496:	4b74      	ldr	r3, [pc, #464]	; (8008668 <_dtoa_r+0x2e8>)
 8008498:	2200      	movs	r2, #0
 800849a:	4630      	mov	r0, r6
 800849c:	4639      	mov	r1, r7
 800849e:	f7f7 fef3 	bl	8000288 <__aeabi_dsub>
 80084a2:	a365      	add	r3, pc, #404	; (adr r3, 8008638 <_dtoa_r+0x2b8>)
 80084a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a8:	f7f8 f8a6 	bl	80005f8 <__aeabi_dmul>
 80084ac:	a364      	add	r3, pc, #400	; (adr r3, 8008640 <_dtoa_r+0x2c0>)
 80084ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b2:	f7f7 feeb 	bl	800028c <__adddf3>
 80084b6:	4606      	mov	r6, r0
 80084b8:	4628      	mov	r0, r5
 80084ba:	460f      	mov	r7, r1
 80084bc:	f7f8 f832 	bl	8000524 <__aeabi_i2d>
 80084c0:	a361      	add	r3, pc, #388	; (adr r3, 8008648 <_dtoa_r+0x2c8>)
 80084c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c6:	f7f8 f897 	bl	80005f8 <__aeabi_dmul>
 80084ca:	4602      	mov	r2, r0
 80084cc:	460b      	mov	r3, r1
 80084ce:	4630      	mov	r0, r6
 80084d0:	4639      	mov	r1, r7
 80084d2:	f7f7 fedb 	bl	800028c <__adddf3>
 80084d6:	4606      	mov	r6, r0
 80084d8:	460f      	mov	r7, r1
 80084da:	f7f8 fb3d 	bl	8000b58 <__aeabi_d2iz>
 80084de:	2200      	movs	r2, #0
 80084e0:	9000      	str	r0, [sp, #0]
 80084e2:	2300      	movs	r3, #0
 80084e4:	4630      	mov	r0, r6
 80084e6:	4639      	mov	r1, r7
 80084e8:	f7f8 faf8 	bl	8000adc <__aeabi_dcmplt>
 80084ec:	b150      	cbz	r0, 8008504 <_dtoa_r+0x184>
 80084ee:	9800      	ldr	r0, [sp, #0]
 80084f0:	f7f8 f818 	bl	8000524 <__aeabi_i2d>
 80084f4:	4632      	mov	r2, r6
 80084f6:	463b      	mov	r3, r7
 80084f8:	f7f8 fae6 	bl	8000ac8 <__aeabi_dcmpeq>
 80084fc:	b910      	cbnz	r0, 8008504 <_dtoa_r+0x184>
 80084fe:	9b00      	ldr	r3, [sp, #0]
 8008500:	3b01      	subs	r3, #1
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	9b00      	ldr	r3, [sp, #0]
 8008506:	2b16      	cmp	r3, #22
 8008508:	d85a      	bhi.n	80085c0 <_dtoa_r+0x240>
 800850a:	9a00      	ldr	r2, [sp, #0]
 800850c:	4b57      	ldr	r3, [pc, #348]	; (800866c <_dtoa_r+0x2ec>)
 800850e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008516:	ec51 0b19 	vmov	r0, r1, d9
 800851a:	f7f8 fadf 	bl	8000adc <__aeabi_dcmplt>
 800851e:	2800      	cmp	r0, #0
 8008520:	d050      	beq.n	80085c4 <_dtoa_r+0x244>
 8008522:	9b00      	ldr	r3, [sp, #0]
 8008524:	3b01      	subs	r3, #1
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	2300      	movs	r3, #0
 800852a:	930b      	str	r3, [sp, #44]	; 0x2c
 800852c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800852e:	1b5d      	subs	r5, r3, r5
 8008530:	1e6b      	subs	r3, r5, #1
 8008532:	9305      	str	r3, [sp, #20]
 8008534:	bf45      	ittet	mi
 8008536:	f1c5 0301 	rsbmi	r3, r5, #1
 800853a:	9304      	strmi	r3, [sp, #16]
 800853c:	2300      	movpl	r3, #0
 800853e:	2300      	movmi	r3, #0
 8008540:	bf4c      	ite	mi
 8008542:	9305      	strmi	r3, [sp, #20]
 8008544:	9304      	strpl	r3, [sp, #16]
 8008546:	9b00      	ldr	r3, [sp, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	db3d      	blt.n	80085c8 <_dtoa_r+0x248>
 800854c:	9b05      	ldr	r3, [sp, #20]
 800854e:	9a00      	ldr	r2, [sp, #0]
 8008550:	920a      	str	r2, [sp, #40]	; 0x28
 8008552:	4413      	add	r3, r2
 8008554:	9305      	str	r3, [sp, #20]
 8008556:	2300      	movs	r3, #0
 8008558:	9307      	str	r3, [sp, #28]
 800855a:	9b06      	ldr	r3, [sp, #24]
 800855c:	2b09      	cmp	r3, #9
 800855e:	f200 8089 	bhi.w	8008674 <_dtoa_r+0x2f4>
 8008562:	2b05      	cmp	r3, #5
 8008564:	bfc4      	itt	gt
 8008566:	3b04      	subgt	r3, #4
 8008568:	9306      	strgt	r3, [sp, #24]
 800856a:	9b06      	ldr	r3, [sp, #24]
 800856c:	f1a3 0302 	sub.w	r3, r3, #2
 8008570:	bfcc      	ite	gt
 8008572:	2500      	movgt	r5, #0
 8008574:	2501      	movle	r5, #1
 8008576:	2b03      	cmp	r3, #3
 8008578:	f200 8087 	bhi.w	800868a <_dtoa_r+0x30a>
 800857c:	e8df f003 	tbb	[pc, r3]
 8008580:	59383a2d 	.word	0x59383a2d
 8008584:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008588:	441d      	add	r5, r3
 800858a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800858e:	2b20      	cmp	r3, #32
 8008590:	bfc1      	itttt	gt
 8008592:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008596:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800859a:	fa0b f303 	lslgt.w	r3, fp, r3
 800859e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80085a2:	bfda      	itte	le
 80085a4:	f1c3 0320 	rsble	r3, r3, #32
 80085a8:	fa06 f003 	lslle.w	r0, r6, r3
 80085ac:	4318      	orrgt	r0, r3
 80085ae:	f7f7 ffa9 	bl	8000504 <__aeabi_ui2d>
 80085b2:	2301      	movs	r3, #1
 80085b4:	4606      	mov	r6, r0
 80085b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80085ba:	3d01      	subs	r5, #1
 80085bc:	930e      	str	r3, [sp, #56]	; 0x38
 80085be:	e76a      	b.n	8008496 <_dtoa_r+0x116>
 80085c0:	2301      	movs	r3, #1
 80085c2:	e7b2      	b.n	800852a <_dtoa_r+0x1aa>
 80085c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80085c6:	e7b1      	b.n	800852c <_dtoa_r+0x1ac>
 80085c8:	9b04      	ldr	r3, [sp, #16]
 80085ca:	9a00      	ldr	r2, [sp, #0]
 80085cc:	1a9b      	subs	r3, r3, r2
 80085ce:	9304      	str	r3, [sp, #16]
 80085d0:	4253      	negs	r3, r2
 80085d2:	9307      	str	r3, [sp, #28]
 80085d4:	2300      	movs	r3, #0
 80085d6:	930a      	str	r3, [sp, #40]	; 0x28
 80085d8:	e7bf      	b.n	800855a <_dtoa_r+0x1da>
 80085da:	2300      	movs	r3, #0
 80085dc:	9308      	str	r3, [sp, #32]
 80085de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	dc55      	bgt.n	8008690 <_dtoa_r+0x310>
 80085e4:	2301      	movs	r3, #1
 80085e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085ea:	461a      	mov	r2, r3
 80085ec:	9209      	str	r2, [sp, #36]	; 0x24
 80085ee:	e00c      	b.n	800860a <_dtoa_r+0x28a>
 80085f0:	2301      	movs	r3, #1
 80085f2:	e7f3      	b.n	80085dc <_dtoa_r+0x25c>
 80085f4:	2300      	movs	r3, #0
 80085f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085f8:	9308      	str	r3, [sp, #32]
 80085fa:	9b00      	ldr	r3, [sp, #0]
 80085fc:	4413      	add	r3, r2
 80085fe:	9302      	str	r3, [sp, #8]
 8008600:	3301      	adds	r3, #1
 8008602:	2b01      	cmp	r3, #1
 8008604:	9303      	str	r3, [sp, #12]
 8008606:	bfb8      	it	lt
 8008608:	2301      	movlt	r3, #1
 800860a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800860c:	2200      	movs	r2, #0
 800860e:	6042      	str	r2, [r0, #4]
 8008610:	2204      	movs	r2, #4
 8008612:	f102 0614 	add.w	r6, r2, #20
 8008616:	429e      	cmp	r6, r3
 8008618:	6841      	ldr	r1, [r0, #4]
 800861a:	d93d      	bls.n	8008698 <_dtoa_r+0x318>
 800861c:	4620      	mov	r0, r4
 800861e:	f000 fdef 	bl	8009200 <_Balloc>
 8008622:	9001      	str	r0, [sp, #4]
 8008624:	2800      	cmp	r0, #0
 8008626:	d13b      	bne.n	80086a0 <_dtoa_r+0x320>
 8008628:	4b11      	ldr	r3, [pc, #68]	; (8008670 <_dtoa_r+0x2f0>)
 800862a:	4602      	mov	r2, r0
 800862c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008630:	e6c0      	b.n	80083b4 <_dtoa_r+0x34>
 8008632:	2301      	movs	r3, #1
 8008634:	e7df      	b.n	80085f6 <_dtoa_r+0x276>
 8008636:	bf00      	nop
 8008638:	636f4361 	.word	0x636f4361
 800863c:	3fd287a7 	.word	0x3fd287a7
 8008640:	8b60c8b3 	.word	0x8b60c8b3
 8008644:	3fc68a28 	.word	0x3fc68a28
 8008648:	509f79fb 	.word	0x509f79fb
 800864c:	3fd34413 	.word	0x3fd34413
 8008650:	0800a07d 	.word	0x0800a07d
 8008654:	0800a094 	.word	0x0800a094
 8008658:	7ff00000 	.word	0x7ff00000
 800865c:	0800a079 	.word	0x0800a079
 8008660:	0800a070 	.word	0x0800a070
 8008664:	0800a04d 	.word	0x0800a04d
 8008668:	3ff80000 	.word	0x3ff80000
 800866c:	0800a188 	.word	0x0800a188
 8008670:	0800a0ef 	.word	0x0800a0ef
 8008674:	2501      	movs	r5, #1
 8008676:	2300      	movs	r3, #0
 8008678:	9306      	str	r3, [sp, #24]
 800867a:	9508      	str	r5, [sp, #32]
 800867c:	f04f 33ff 	mov.w	r3, #4294967295
 8008680:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008684:	2200      	movs	r2, #0
 8008686:	2312      	movs	r3, #18
 8008688:	e7b0      	b.n	80085ec <_dtoa_r+0x26c>
 800868a:	2301      	movs	r3, #1
 800868c:	9308      	str	r3, [sp, #32]
 800868e:	e7f5      	b.n	800867c <_dtoa_r+0x2fc>
 8008690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008692:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008696:	e7b8      	b.n	800860a <_dtoa_r+0x28a>
 8008698:	3101      	adds	r1, #1
 800869a:	6041      	str	r1, [r0, #4]
 800869c:	0052      	lsls	r2, r2, #1
 800869e:	e7b8      	b.n	8008612 <_dtoa_r+0x292>
 80086a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086a2:	9a01      	ldr	r2, [sp, #4]
 80086a4:	601a      	str	r2, [r3, #0]
 80086a6:	9b03      	ldr	r3, [sp, #12]
 80086a8:	2b0e      	cmp	r3, #14
 80086aa:	f200 809d 	bhi.w	80087e8 <_dtoa_r+0x468>
 80086ae:	2d00      	cmp	r5, #0
 80086b0:	f000 809a 	beq.w	80087e8 <_dtoa_r+0x468>
 80086b4:	9b00      	ldr	r3, [sp, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	dd32      	ble.n	8008720 <_dtoa_r+0x3a0>
 80086ba:	4ab7      	ldr	r2, [pc, #732]	; (8008998 <_dtoa_r+0x618>)
 80086bc:	f003 030f 	and.w	r3, r3, #15
 80086c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80086c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086c8:	9b00      	ldr	r3, [sp, #0]
 80086ca:	05d8      	lsls	r0, r3, #23
 80086cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80086d0:	d516      	bpl.n	8008700 <_dtoa_r+0x380>
 80086d2:	4bb2      	ldr	r3, [pc, #712]	; (800899c <_dtoa_r+0x61c>)
 80086d4:	ec51 0b19 	vmov	r0, r1, d9
 80086d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086dc:	f7f8 f8b6 	bl	800084c <__aeabi_ddiv>
 80086e0:	f007 070f 	and.w	r7, r7, #15
 80086e4:	4682      	mov	sl, r0
 80086e6:	468b      	mov	fp, r1
 80086e8:	2503      	movs	r5, #3
 80086ea:	4eac      	ldr	r6, [pc, #688]	; (800899c <_dtoa_r+0x61c>)
 80086ec:	b957      	cbnz	r7, 8008704 <_dtoa_r+0x384>
 80086ee:	4642      	mov	r2, r8
 80086f0:	464b      	mov	r3, r9
 80086f2:	4650      	mov	r0, sl
 80086f4:	4659      	mov	r1, fp
 80086f6:	f7f8 f8a9 	bl	800084c <__aeabi_ddiv>
 80086fa:	4682      	mov	sl, r0
 80086fc:	468b      	mov	fp, r1
 80086fe:	e028      	b.n	8008752 <_dtoa_r+0x3d2>
 8008700:	2502      	movs	r5, #2
 8008702:	e7f2      	b.n	80086ea <_dtoa_r+0x36a>
 8008704:	07f9      	lsls	r1, r7, #31
 8008706:	d508      	bpl.n	800871a <_dtoa_r+0x39a>
 8008708:	4640      	mov	r0, r8
 800870a:	4649      	mov	r1, r9
 800870c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008710:	f7f7 ff72 	bl	80005f8 <__aeabi_dmul>
 8008714:	3501      	adds	r5, #1
 8008716:	4680      	mov	r8, r0
 8008718:	4689      	mov	r9, r1
 800871a:	107f      	asrs	r7, r7, #1
 800871c:	3608      	adds	r6, #8
 800871e:	e7e5      	b.n	80086ec <_dtoa_r+0x36c>
 8008720:	f000 809b 	beq.w	800885a <_dtoa_r+0x4da>
 8008724:	9b00      	ldr	r3, [sp, #0]
 8008726:	4f9d      	ldr	r7, [pc, #628]	; (800899c <_dtoa_r+0x61c>)
 8008728:	425e      	negs	r6, r3
 800872a:	4b9b      	ldr	r3, [pc, #620]	; (8008998 <_dtoa_r+0x618>)
 800872c:	f006 020f 	and.w	r2, r6, #15
 8008730:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	ec51 0b19 	vmov	r0, r1, d9
 800873c:	f7f7 ff5c 	bl	80005f8 <__aeabi_dmul>
 8008740:	1136      	asrs	r6, r6, #4
 8008742:	4682      	mov	sl, r0
 8008744:	468b      	mov	fp, r1
 8008746:	2300      	movs	r3, #0
 8008748:	2502      	movs	r5, #2
 800874a:	2e00      	cmp	r6, #0
 800874c:	d17a      	bne.n	8008844 <_dtoa_r+0x4c4>
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1d3      	bne.n	80086fa <_dtoa_r+0x37a>
 8008752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008754:	2b00      	cmp	r3, #0
 8008756:	f000 8082 	beq.w	800885e <_dtoa_r+0x4de>
 800875a:	4b91      	ldr	r3, [pc, #580]	; (80089a0 <_dtoa_r+0x620>)
 800875c:	2200      	movs	r2, #0
 800875e:	4650      	mov	r0, sl
 8008760:	4659      	mov	r1, fp
 8008762:	f7f8 f9bb 	bl	8000adc <__aeabi_dcmplt>
 8008766:	2800      	cmp	r0, #0
 8008768:	d079      	beq.n	800885e <_dtoa_r+0x4de>
 800876a:	9b03      	ldr	r3, [sp, #12]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d076      	beq.n	800885e <_dtoa_r+0x4de>
 8008770:	9b02      	ldr	r3, [sp, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	dd36      	ble.n	80087e4 <_dtoa_r+0x464>
 8008776:	9b00      	ldr	r3, [sp, #0]
 8008778:	4650      	mov	r0, sl
 800877a:	4659      	mov	r1, fp
 800877c:	1e5f      	subs	r7, r3, #1
 800877e:	2200      	movs	r2, #0
 8008780:	4b88      	ldr	r3, [pc, #544]	; (80089a4 <_dtoa_r+0x624>)
 8008782:	f7f7 ff39 	bl	80005f8 <__aeabi_dmul>
 8008786:	9e02      	ldr	r6, [sp, #8]
 8008788:	4682      	mov	sl, r0
 800878a:	468b      	mov	fp, r1
 800878c:	3501      	adds	r5, #1
 800878e:	4628      	mov	r0, r5
 8008790:	f7f7 fec8 	bl	8000524 <__aeabi_i2d>
 8008794:	4652      	mov	r2, sl
 8008796:	465b      	mov	r3, fp
 8008798:	f7f7 ff2e 	bl	80005f8 <__aeabi_dmul>
 800879c:	4b82      	ldr	r3, [pc, #520]	; (80089a8 <_dtoa_r+0x628>)
 800879e:	2200      	movs	r2, #0
 80087a0:	f7f7 fd74 	bl	800028c <__adddf3>
 80087a4:	46d0      	mov	r8, sl
 80087a6:	46d9      	mov	r9, fp
 80087a8:	4682      	mov	sl, r0
 80087aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80087ae:	2e00      	cmp	r6, #0
 80087b0:	d158      	bne.n	8008864 <_dtoa_r+0x4e4>
 80087b2:	4b7e      	ldr	r3, [pc, #504]	; (80089ac <_dtoa_r+0x62c>)
 80087b4:	2200      	movs	r2, #0
 80087b6:	4640      	mov	r0, r8
 80087b8:	4649      	mov	r1, r9
 80087ba:	f7f7 fd65 	bl	8000288 <__aeabi_dsub>
 80087be:	4652      	mov	r2, sl
 80087c0:	465b      	mov	r3, fp
 80087c2:	4680      	mov	r8, r0
 80087c4:	4689      	mov	r9, r1
 80087c6:	f7f8 f9a7 	bl	8000b18 <__aeabi_dcmpgt>
 80087ca:	2800      	cmp	r0, #0
 80087cc:	f040 8295 	bne.w	8008cfa <_dtoa_r+0x97a>
 80087d0:	4652      	mov	r2, sl
 80087d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80087d6:	4640      	mov	r0, r8
 80087d8:	4649      	mov	r1, r9
 80087da:	f7f8 f97f 	bl	8000adc <__aeabi_dcmplt>
 80087de:	2800      	cmp	r0, #0
 80087e0:	f040 8289 	bne.w	8008cf6 <_dtoa_r+0x976>
 80087e4:	ec5b ab19 	vmov	sl, fp, d9
 80087e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f2c0 8148 	blt.w	8008a80 <_dtoa_r+0x700>
 80087f0:	9a00      	ldr	r2, [sp, #0]
 80087f2:	2a0e      	cmp	r2, #14
 80087f4:	f300 8144 	bgt.w	8008a80 <_dtoa_r+0x700>
 80087f8:	4b67      	ldr	r3, [pc, #412]	; (8008998 <_dtoa_r+0x618>)
 80087fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008804:	2b00      	cmp	r3, #0
 8008806:	f280 80d5 	bge.w	80089b4 <_dtoa_r+0x634>
 800880a:	9b03      	ldr	r3, [sp, #12]
 800880c:	2b00      	cmp	r3, #0
 800880e:	f300 80d1 	bgt.w	80089b4 <_dtoa_r+0x634>
 8008812:	f040 826f 	bne.w	8008cf4 <_dtoa_r+0x974>
 8008816:	4b65      	ldr	r3, [pc, #404]	; (80089ac <_dtoa_r+0x62c>)
 8008818:	2200      	movs	r2, #0
 800881a:	4640      	mov	r0, r8
 800881c:	4649      	mov	r1, r9
 800881e:	f7f7 feeb 	bl	80005f8 <__aeabi_dmul>
 8008822:	4652      	mov	r2, sl
 8008824:	465b      	mov	r3, fp
 8008826:	f7f8 f96d 	bl	8000b04 <__aeabi_dcmpge>
 800882a:	9e03      	ldr	r6, [sp, #12]
 800882c:	4637      	mov	r7, r6
 800882e:	2800      	cmp	r0, #0
 8008830:	f040 8245 	bne.w	8008cbe <_dtoa_r+0x93e>
 8008834:	9d01      	ldr	r5, [sp, #4]
 8008836:	2331      	movs	r3, #49	; 0x31
 8008838:	f805 3b01 	strb.w	r3, [r5], #1
 800883c:	9b00      	ldr	r3, [sp, #0]
 800883e:	3301      	adds	r3, #1
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	e240      	b.n	8008cc6 <_dtoa_r+0x946>
 8008844:	07f2      	lsls	r2, r6, #31
 8008846:	d505      	bpl.n	8008854 <_dtoa_r+0x4d4>
 8008848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800884c:	f7f7 fed4 	bl	80005f8 <__aeabi_dmul>
 8008850:	3501      	adds	r5, #1
 8008852:	2301      	movs	r3, #1
 8008854:	1076      	asrs	r6, r6, #1
 8008856:	3708      	adds	r7, #8
 8008858:	e777      	b.n	800874a <_dtoa_r+0x3ca>
 800885a:	2502      	movs	r5, #2
 800885c:	e779      	b.n	8008752 <_dtoa_r+0x3d2>
 800885e:	9f00      	ldr	r7, [sp, #0]
 8008860:	9e03      	ldr	r6, [sp, #12]
 8008862:	e794      	b.n	800878e <_dtoa_r+0x40e>
 8008864:	9901      	ldr	r1, [sp, #4]
 8008866:	4b4c      	ldr	r3, [pc, #304]	; (8008998 <_dtoa_r+0x618>)
 8008868:	4431      	add	r1, r6
 800886a:	910d      	str	r1, [sp, #52]	; 0x34
 800886c:	9908      	ldr	r1, [sp, #32]
 800886e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008872:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008876:	2900      	cmp	r1, #0
 8008878:	d043      	beq.n	8008902 <_dtoa_r+0x582>
 800887a:	494d      	ldr	r1, [pc, #308]	; (80089b0 <_dtoa_r+0x630>)
 800887c:	2000      	movs	r0, #0
 800887e:	f7f7 ffe5 	bl	800084c <__aeabi_ddiv>
 8008882:	4652      	mov	r2, sl
 8008884:	465b      	mov	r3, fp
 8008886:	f7f7 fcff 	bl	8000288 <__aeabi_dsub>
 800888a:	9d01      	ldr	r5, [sp, #4]
 800888c:	4682      	mov	sl, r0
 800888e:	468b      	mov	fp, r1
 8008890:	4649      	mov	r1, r9
 8008892:	4640      	mov	r0, r8
 8008894:	f7f8 f960 	bl	8000b58 <__aeabi_d2iz>
 8008898:	4606      	mov	r6, r0
 800889a:	f7f7 fe43 	bl	8000524 <__aeabi_i2d>
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	4640      	mov	r0, r8
 80088a4:	4649      	mov	r1, r9
 80088a6:	f7f7 fcef 	bl	8000288 <__aeabi_dsub>
 80088aa:	3630      	adds	r6, #48	; 0x30
 80088ac:	f805 6b01 	strb.w	r6, [r5], #1
 80088b0:	4652      	mov	r2, sl
 80088b2:	465b      	mov	r3, fp
 80088b4:	4680      	mov	r8, r0
 80088b6:	4689      	mov	r9, r1
 80088b8:	f7f8 f910 	bl	8000adc <__aeabi_dcmplt>
 80088bc:	2800      	cmp	r0, #0
 80088be:	d163      	bne.n	8008988 <_dtoa_r+0x608>
 80088c0:	4642      	mov	r2, r8
 80088c2:	464b      	mov	r3, r9
 80088c4:	4936      	ldr	r1, [pc, #216]	; (80089a0 <_dtoa_r+0x620>)
 80088c6:	2000      	movs	r0, #0
 80088c8:	f7f7 fcde 	bl	8000288 <__aeabi_dsub>
 80088cc:	4652      	mov	r2, sl
 80088ce:	465b      	mov	r3, fp
 80088d0:	f7f8 f904 	bl	8000adc <__aeabi_dcmplt>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	f040 80b5 	bne.w	8008a44 <_dtoa_r+0x6c4>
 80088da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088dc:	429d      	cmp	r5, r3
 80088de:	d081      	beq.n	80087e4 <_dtoa_r+0x464>
 80088e0:	4b30      	ldr	r3, [pc, #192]	; (80089a4 <_dtoa_r+0x624>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	4650      	mov	r0, sl
 80088e6:	4659      	mov	r1, fp
 80088e8:	f7f7 fe86 	bl	80005f8 <__aeabi_dmul>
 80088ec:	4b2d      	ldr	r3, [pc, #180]	; (80089a4 <_dtoa_r+0x624>)
 80088ee:	4682      	mov	sl, r0
 80088f0:	468b      	mov	fp, r1
 80088f2:	4640      	mov	r0, r8
 80088f4:	4649      	mov	r1, r9
 80088f6:	2200      	movs	r2, #0
 80088f8:	f7f7 fe7e 	bl	80005f8 <__aeabi_dmul>
 80088fc:	4680      	mov	r8, r0
 80088fe:	4689      	mov	r9, r1
 8008900:	e7c6      	b.n	8008890 <_dtoa_r+0x510>
 8008902:	4650      	mov	r0, sl
 8008904:	4659      	mov	r1, fp
 8008906:	f7f7 fe77 	bl	80005f8 <__aeabi_dmul>
 800890a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800890c:	9d01      	ldr	r5, [sp, #4]
 800890e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008910:	4682      	mov	sl, r0
 8008912:	468b      	mov	fp, r1
 8008914:	4649      	mov	r1, r9
 8008916:	4640      	mov	r0, r8
 8008918:	f7f8 f91e 	bl	8000b58 <__aeabi_d2iz>
 800891c:	4606      	mov	r6, r0
 800891e:	f7f7 fe01 	bl	8000524 <__aeabi_i2d>
 8008922:	3630      	adds	r6, #48	; 0x30
 8008924:	4602      	mov	r2, r0
 8008926:	460b      	mov	r3, r1
 8008928:	4640      	mov	r0, r8
 800892a:	4649      	mov	r1, r9
 800892c:	f7f7 fcac 	bl	8000288 <__aeabi_dsub>
 8008930:	f805 6b01 	strb.w	r6, [r5], #1
 8008934:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008936:	429d      	cmp	r5, r3
 8008938:	4680      	mov	r8, r0
 800893a:	4689      	mov	r9, r1
 800893c:	f04f 0200 	mov.w	r2, #0
 8008940:	d124      	bne.n	800898c <_dtoa_r+0x60c>
 8008942:	4b1b      	ldr	r3, [pc, #108]	; (80089b0 <_dtoa_r+0x630>)
 8008944:	4650      	mov	r0, sl
 8008946:	4659      	mov	r1, fp
 8008948:	f7f7 fca0 	bl	800028c <__adddf3>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	4640      	mov	r0, r8
 8008952:	4649      	mov	r1, r9
 8008954:	f7f8 f8e0 	bl	8000b18 <__aeabi_dcmpgt>
 8008958:	2800      	cmp	r0, #0
 800895a:	d173      	bne.n	8008a44 <_dtoa_r+0x6c4>
 800895c:	4652      	mov	r2, sl
 800895e:	465b      	mov	r3, fp
 8008960:	4913      	ldr	r1, [pc, #76]	; (80089b0 <_dtoa_r+0x630>)
 8008962:	2000      	movs	r0, #0
 8008964:	f7f7 fc90 	bl	8000288 <__aeabi_dsub>
 8008968:	4602      	mov	r2, r0
 800896a:	460b      	mov	r3, r1
 800896c:	4640      	mov	r0, r8
 800896e:	4649      	mov	r1, r9
 8008970:	f7f8 f8b4 	bl	8000adc <__aeabi_dcmplt>
 8008974:	2800      	cmp	r0, #0
 8008976:	f43f af35 	beq.w	80087e4 <_dtoa_r+0x464>
 800897a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800897c:	1e6b      	subs	r3, r5, #1
 800897e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008980:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008984:	2b30      	cmp	r3, #48	; 0x30
 8008986:	d0f8      	beq.n	800897a <_dtoa_r+0x5fa>
 8008988:	9700      	str	r7, [sp, #0]
 800898a:	e049      	b.n	8008a20 <_dtoa_r+0x6a0>
 800898c:	4b05      	ldr	r3, [pc, #20]	; (80089a4 <_dtoa_r+0x624>)
 800898e:	f7f7 fe33 	bl	80005f8 <__aeabi_dmul>
 8008992:	4680      	mov	r8, r0
 8008994:	4689      	mov	r9, r1
 8008996:	e7bd      	b.n	8008914 <_dtoa_r+0x594>
 8008998:	0800a188 	.word	0x0800a188
 800899c:	0800a160 	.word	0x0800a160
 80089a0:	3ff00000 	.word	0x3ff00000
 80089a4:	40240000 	.word	0x40240000
 80089a8:	401c0000 	.word	0x401c0000
 80089ac:	40140000 	.word	0x40140000
 80089b0:	3fe00000 	.word	0x3fe00000
 80089b4:	9d01      	ldr	r5, [sp, #4]
 80089b6:	4656      	mov	r6, sl
 80089b8:	465f      	mov	r7, fp
 80089ba:	4642      	mov	r2, r8
 80089bc:	464b      	mov	r3, r9
 80089be:	4630      	mov	r0, r6
 80089c0:	4639      	mov	r1, r7
 80089c2:	f7f7 ff43 	bl	800084c <__aeabi_ddiv>
 80089c6:	f7f8 f8c7 	bl	8000b58 <__aeabi_d2iz>
 80089ca:	4682      	mov	sl, r0
 80089cc:	f7f7 fdaa 	bl	8000524 <__aeabi_i2d>
 80089d0:	4642      	mov	r2, r8
 80089d2:	464b      	mov	r3, r9
 80089d4:	f7f7 fe10 	bl	80005f8 <__aeabi_dmul>
 80089d8:	4602      	mov	r2, r0
 80089da:	460b      	mov	r3, r1
 80089dc:	4630      	mov	r0, r6
 80089de:	4639      	mov	r1, r7
 80089e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80089e4:	f7f7 fc50 	bl	8000288 <__aeabi_dsub>
 80089e8:	f805 6b01 	strb.w	r6, [r5], #1
 80089ec:	9e01      	ldr	r6, [sp, #4]
 80089ee:	9f03      	ldr	r7, [sp, #12]
 80089f0:	1bae      	subs	r6, r5, r6
 80089f2:	42b7      	cmp	r7, r6
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	d135      	bne.n	8008a66 <_dtoa_r+0x6e6>
 80089fa:	f7f7 fc47 	bl	800028c <__adddf3>
 80089fe:	4642      	mov	r2, r8
 8008a00:	464b      	mov	r3, r9
 8008a02:	4606      	mov	r6, r0
 8008a04:	460f      	mov	r7, r1
 8008a06:	f7f8 f887 	bl	8000b18 <__aeabi_dcmpgt>
 8008a0a:	b9d0      	cbnz	r0, 8008a42 <_dtoa_r+0x6c2>
 8008a0c:	4642      	mov	r2, r8
 8008a0e:	464b      	mov	r3, r9
 8008a10:	4630      	mov	r0, r6
 8008a12:	4639      	mov	r1, r7
 8008a14:	f7f8 f858 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a18:	b110      	cbz	r0, 8008a20 <_dtoa_r+0x6a0>
 8008a1a:	f01a 0f01 	tst.w	sl, #1
 8008a1e:	d110      	bne.n	8008a42 <_dtoa_r+0x6c2>
 8008a20:	4620      	mov	r0, r4
 8008a22:	ee18 1a10 	vmov	r1, s16
 8008a26:	f000 fc2b 	bl	8009280 <_Bfree>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	9800      	ldr	r0, [sp, #0]
 8008a2e:	702b      	strb	r3, [r5, #0]
 8008a30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a32:	3001      	adds	r0, #1
 8008a34:	6018      	str	r0, [r3, #0]
 8008a36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f43f acf1 	beq.w	8008420 <_dtoa_r+0xa0>
 8008a3e:	601d      	str	r5, [r3, #0]
 8008a40:	e4ee      	b.n	8008420 <_dtoa_r+0xa0>
 8008a42:	9f00      	ldr	r7, [sp, #0]
 8008a44:	462b      	mov	r3, r5
 8008a46:	461d      	mov	r5, r3
 8008a48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a4c:	2a39      	cmp	r2, #57	; 0x39
 8008a4e:	d106      	bne.n	8008a5e <_dtoa_r+0x6de>
 8008a50:	9a01      	ldr	r2, [sp, #4]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d1f7      	bne.n	8008a46 <_dtoa_r+0x6c6>
 8008a56:	9901      	ldr	r1, [sp, #4]
 8008a58:	2230      	movs	r2, #48	; 0x30
 8008a5a:	3701      	adds	r7, #1
 8008a5c:	700a      	strb	r2, [r1, #0]
 8008a5e:	781a      	ldrb	r2, [r3, #0]
 8008a60:	3201      	adds	r2, #1
 8008a62:	701a      	strb	r2, [r3, #0]
 8008a64:	e790      	b.n	8008988 <_dtoa_r+0x608>
 8008a66:	4ba6      	ldr	r3, [pc, #664]	; (8008d00 <_dtoa_r+0x980>)
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f7f7 fdc5 	bl	80005f8 <__aeabi_dmul>
 8008a6e:	2200      	movs	r2, #0
 8008a70:	2300      	movs	r3, #0
 8008a72:	4606      	mov	r6, r0
 8008a74:	460f      	mov	r7, r1
 8008a76:	f7f8 f827 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	d09d      	beq.n	80089ba <_dtoa_r+0x63a>
 8008a7e:	e7cf      	b.n	8008a20 <_dtoa_r+0x6a0>
 8008a80:	9a08      	ldr	r2, [sp, #32]
 8008a82:	2a00      	cmp	r2, #0
 8008a84:	f000 80d7 	beq.w	8008c36 <_dtoa_r+0x8b6>
 8008a88:	9a06      	ldr	r2, [sp, #24]
 8008a8a:	2a01      	cmp	r2, #1
 8008a8c:	f300 80ba 	bgt.w	8008c04 <_dtoa_r+0x884>
 8008a90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a92:	2a00      	cmp	r2, #0
 8008a94:	f000 80b2 	beq.w	8008bfc <_dtoa_r+0x87c>
 8008a98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a9c:	9e07      	ldr	r6, [sp, #28]
 8008a9e:	9d04      	ldr	r5, [sp, #16]
 8008aa0:	9a04      	ldr	r2, [sp, #16]
 8008aa2:	441a      	add	r2, r3
 8008aa4:	9204      	str	r2, [sp, #16]
 8008aa6:	9a05      	ldr	r2, [sp, #20]
 8008aa8:	2101      	movs	r1, #1
 8008aaa:	441a      	add	r2, r3
 8008aac:	4620      	mov	r0, r4
 8008aae:	9205      	str	r2, [sp, #20]
 8008ab0:	f000 fc9e 	bl	80093f0 <__i2b>
 8008ab4:	4607      	mov	r7, r0
 8008ab6:	2d00      	cmp	r5, #0
 8008ab8:	dd0c      	ble.n	8008ad4 <_dtoa_r+0x754>
 8008aba:	9b05      	ldr	r3, [sp, #20]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	dd09      	ble.n	8008ad4 <_dtoa_r+0x754>
 8008ac0:	42ab      	cmp	r3, r5
 8008ac2:	9a04      	ldr	r2, [sp, #16]
 8008ac4:	bfa8      	it	ge
 8008ac6:	462b      	movge	r3, r5
 8008ac8:	1ad2      	subs	r2, r2, r3
 8008aca:	9204      	str	r2, [sp, #16]
 8008acc:	9a05      	ldr	r2, [sp, #20]
 8008ace:	1aed      	subs	r5, r5, r3
 8008ad0:	1ad3      	subs	r3, r2, r3
 8008ad2:	9305      	str	r3, [sp, #20]
 8008ad4:	9b07      	ldr	r3, [sp, #28]
 8008ad6:	b31b      	cbz	r3, 8008b20 <_dtoa_r+0x7a0>
 8008ad8:	9b08      	ldr	r3, [sp, #32]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f000 80af 	beq.w	8008c3e <_dtoa_r+0x8be>
 8008ae0:	2e00      	cmp	r6, #0
 8008ae2:	dd13      	ble.n	8008b0c <_dtoa_r+0x78c>
 8008ae4:	4639      	mov	r1, r7
 8008ae6:	4632      	mov	r2, r6
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f000 fd41 	bl	8009570 <__pow5mult>
 8008aee:	ee18 2a10 	vmov	r2, s16
 8008af2:	4601      	mov	r1, r0
 8008af4:	4607      	mov	r7, r0
 8008af6:	4620      	mov	r0, r4
 8008af8:	f000 fc90 	bl	800941c <__multiply>
 8008afc:	ee18 1a10 	vmov	r1, s16
 8008b00:	4680      	mov	r8, r0
 8008b02:	4620      	mov	r0, r4
 8008b04:	f000 fbbc 	bl	8009280 <_Bfree>
 8008b08:	ee08 8a10 	vmov	s16, r8
 8008b0c:	9b07      	ldr	r3, [sp, #28]
 8008b0e:	1b9a      	subs	r2, r3, r6
 8008b10:	d006      	beq.n	8008b20 <_dtoa_r+0x7a0>
 8008b12:	ee18 1a10 	vmov	r1, s16
 8008b16:	4620      	mov	r0, r4
 8008b18:	f000 fd2a 	bl	8009570 <__pow5mult>
 8008b1c:	ee08 0a10 	vmov	s16, r0
 8008b20:	2101      	movs	r1, #1
 8008b22:	4620      	mov	r0, r4
 8008b24:	f000 fc64 	bl	80093f0 <__i2b>
 8008b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	4606      	mov	r6, r0
 8008b2e:	f340 8088 	ble.w	8008c42 <_dtoa_r+0x8c2>
 8008b32:	461a      	mov	r2, r3
 8008b34:	4601      	mov	r1, r0
 8008b36:	4620      	mov	r0, r4
 8008b38:	f000 fd1a 	bl	8009570 <__pow5mult>
 8008b3c:	9b06      	ldr	r3, [sp, #24]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	4606      	mov	r6, r0
 8008b42:	f340 8081 	ble.w	8008c48 <_dtoa_r+0x8c8>
 8008b46:	f04f 0800 	mov.w	r8, #0
 8008b4a:	6933      	ldr	r3, [r6, #16]
 8008b4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b50:	6918      	ldr	r0, [r3, #16]
 8008b52:	f000 fbfd 	bl	8009350 <__hi0bits>
 8008b56:	f1c0 0020 	rsb	r0, r0, #32
 8008b5a:	9b05      	ldr	r3, [sp, #20]
 8008b5c:	4418      	add	r0, r3
 8008b5e:	f010 001f 	ands.w	r0, r0, #31
 8008b62:	f000 8092 	beq.w	8008c8a <_dtoa_r+0x90a>
 8008b66:	f1c0 0320 	rsb	r3, r0, #32
 8008b6a:	2b04      	cmp	r3, #4
 8008b6c:	f340 808a 	ble.w	8008c84 <_dtoa_r+0x904>
 8008b70:	f1c0 001c 	rsb	r0, r0, #28
 8008b74:	9b04      	ldr	r3, [sp, #16]
 8008b76:	4403      	add	r3, r0
 8008b78:	9304      	str	r3, [sp, #16]
 8008b7a:	9b05      	ldr	r3, [sp, #20]
 8008b7c:	4403      	add	r3, r0
 8008b7e:	4405      	add	r5, r0
 8008b80:	9305      	str	r3, [sp, #20]
 8008b82:	9b04      	ldr	r3, [sp, #16]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	dd07      	ble.n	8008b98 <_dtoa_r+0x818>
 8008b88:	ee18 1a10 	vmov	r1, s16
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f000 fd48 	bl	8009624 <__lshift>
 8008b94:	ee08 0a10 	vmov	s16, r0
 8008b98:	9b05      	ldr	r3, [sp, #20]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	dd05      	ble.n	8008baa <_dtoa_r+0x82a>
 8008b9e:	4631      	mov	r1, r6
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f000 fd3e 	bl	8009624 <__lshift>
 8008ba8:	4606      	mov	r6, r0
 8008baa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d06e      	beq.n	8008c8e <_dtoa_r+0x90e>
 8008bb0:	ee18 0a10 	vmov	r0, s16
 8008bb4:	4631      	mov	r1, r6
 8008bb6:	f000 fda5 	bl	8009704 <__mcmp>
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	da67      	bge.n	8008c8e <_dtoa_r+0x90e>
 8008bbe:	9b00      	ldr	r3, [sp, #0]
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	ee18 1a10 	vmov	r1, s16
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	220a      	movs	r2, #10
 8008bca:	2300      	movs	r3, #0
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f000 fb79 	bl	80092c4 <__multadd>
 8008bd2:	9b08      	ldr	r3, [sp, #32]
 8008bd4:	ee08 0a10 	vmov	s16, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 81b1 	beq.w	8008f40 <_dtoa_r+0xbc0>
 8008bde:	2300      	movs	r3, #0
 8008be0:	4639      	mov	r1, r7
 8008be2:	220a      	movs	r2, #10
 8008be4:	4620      	mov	r0, r4
 8008be6:	f000 fb6d 	bl	80092c4 <__multadd>
 8008bea:	9b02      	ldr	r3, [sp, #8]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	4607      	mov	r7, r0
 8008bf0:	f300 808e 	bgt.w	8008d10 <_dtoa_r+0x990>
 8008bf4:	9b06      	ldr	r3, [sp, #24]
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	dc51      	bgt.n	8008c9e <_dtoa_r+0x91e>
 8008bfa:	e089      	b.n	8008d10 <_dtoa_r+0x990>
 8008bfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c02:	e74b      	b.n	8008a9c <_dtoa_r+0x71c>
 8008c04:	9b03      	ldr	r3, [sp, #12]
 8008c06:	1e5e      	subs	r6, r3, #1
 8008c08:	9b07      	ldr	r3, [sp, #28]
 8008c0a:	42b3      	cmp	r3, r6
 8008c0c:	bfbf      	itttt	lt
 8008c0e:	9b07      	ldrlt	r3, [sp, #28]
 8008c10:	9607      	strlt	r6, [sp, #28]
 8008c12:	1af2      	sublt	r2, r6, r3
 8008c14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008c16:	bfb6      	itet	lt
 8008c18:	189b      	addlt	r3, r3, r2
 8008c1a:	1b9e      	subge	r6, r3, r6
 8008c1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008c1e:	9b03      	ldr	r3, [sp, #12]
 8008c20:	bfb8      	it	lt
 8008c22:	2600      	movlt	r6, #0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	bfb7      	itett	lt
 8008c28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008c2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008c30:	1a9d      	sublt	r5, r3, r2
 8008c32:	2300      	movlt	r3, #0
 8008c34:	e734      	b.n	8008aa0 <_dtoa_r+0x720>
 8008c36:	9e07      	ldr	r6, [sp, #28]
 8008c38:	9d04      	ldr	r5, [sp, #16]
 8008c3a:	9f08      	ldr	r7, [sp, #32]
 8008c3c:	e73b      	b.n	8008ab6 <_dtoa_r+0x736>
 8008c3e:	9a07      	ldr	r2, [sp, #28]
 8008c40:	e767      	b.n	8008b12 <_dtoa_r+0x792>
 8008c42:	9b06      	ldr	r3, [sp, #24]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	dc18      	bgt.n	8008c7a <_dtoa_r+0x8fa>
 8008c48:	f1ba 0f00 	cmp.w	sl, #0
 8008c4c:	d115      	bne.n	8008c7a <_dtoa_r+0x8fa>
 8008c4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c52:	b993      	cbnz	r3, 8008c7a <_dtoa_r+0x8fa>
 8008c54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008c58:	0d1b      	lsrs	r3, r3, #20
 8008c5a:	051b      	lsls	r3, r3, #20
 8008c5c:	b183      	cbz	r3, 8008c80 <_dtoa_r+0x900>
 8008c5e:	9b04      	ldr	r3, [sp, #16]
 8008c60:	3301      	adds	r3, #1
 8008c62:	9304      	str	r3, [sp, #16]
 8008c64:	9b05      	ldr	r3, [sp, #20]
 8008c66:	3301      	adds	r3, #1
 8008c68:	9305      	str	r3, [sp, #20]
 8008c6a:	f04f 0801 	mov.w	r8, #1
 8008c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f47f af6a 	bne.w	8008b4a <_dtoa_r+0x7ca>
 8008c76:	2001      	movs	r0, #1
 8008c78:	e76f      	b.n	8008b5a <_dtoa_r+0x7da>
 8008c7a:	f04f 0800 	mov.w	r8, #0
 8008c7e:	e7f6      	b.n	8008c6e <_dtoa_r+0x8ee>
 8008c80:	4698      	mov	r8, r3
 8008c82:	e7f4      	b.n	8008c6e <_dtoa_r+0x8ee>
 8008c84:	f43f af7d 	beq.w	8008b82 <_dtoa_r+0x802>
 8008c88:	4618      	mov	r0, r3
 8008c8a:	301c      	adds	r0, #28
 8008c8c:	e772      	b.n	8008b74 <_dtoa_r+0x7f4>
 8008c8e:	9b03      	ldr	r3, [sp, #12]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	dc37      	bgt.n	8008d04 <_dtoa_r+0x984>
 8008c94:	9b06      	ldr	r3, [sp, #24]
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	dd34      	ble.n	8008d04 <_dtoa_r+0x984>
 8008c9a:	9b03      	ldr	r3, [sp, #12]
 8008c9c:	9302      	str	r3, [sp, #8]
 8008c9e:	9b02      	ldr	r3, [sp, #8]
 8008ca0:	b96b      	cbnz	r3, 8008cbe <_dtoa_r+0x93e>
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	2205      	movs	r2, #5
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	f000 fb0c 	bl	80092c4 <__multadd>
 8008cac:	4601      	mov	r1, r0
 8008cae:	4606      	mov	r6, r0
 8008cb0:	ee18 0a10 	vmov	r0, s16
 8008cb4:	f000 fd26 	bl	8009704 <__mcmp>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	f73f adbb 	bgt.w	8008834 <_dtoa_r+0x4b4>
 8008cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc0:	9d01      	ldr	r5, [sp, #4]
 8008cc2:	43db      	mvns	r3, r3
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	f04f 0800 	mov.w	r8, #0
 8008cca:	4631      	mov	r1, r6
 8008ccc:	4620      	mov	r0, r4
 8008cce:	f000 fad7 	bl	8009280 <_Bfree>
 8008cd2:	2f00      	cmp	r7, #0
 8008cd4:	f43f aea4 	beq.w	8008a20 <_dtoa_r+0x6a0>
 8008cd8:	f1b8 0f00 	cmp.w	r8, #0
 8008cdc:	d005      	beq.n	8008cea <_dtoa_r+0x96a>
 8008cde:	45b8      	cmp	r8, r7
 8008ce0:	d003      	beq.n	8008cea <_dtoa_r+0x96a>
 8008ce2:	4641      	mov	r1, r8
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	f000 facb 	bl	8009280 <_Bfree>
 8008cea:	4639      	mov	r1, r7
 8008cec:	4620      	mov	r0, r4
 8008cee:	f000 fac7 	bl	8009280 <_Bfree>
 8008cf2:	e695      	b.n	8008a20 <_dtoa_r+0x6a0>
 8008cf4:	2600      	movs	r6, #0
 8008cf6:	4637      	mov	r7, r6
 8008cf8:	e7e1      	b.n	8008cbe <_dtoa_r+0x93e>
 8008cfa:	9700      	str	r7, [sp, #0]
 8008cfc:	4637      	mov	r7, r6
 8008cfe:	e599      	b.n	8008834 <_dtoa_r+0x4b4>
 8008d00:	40240000 	.word	0x40240000
 8008d04:	9b08      	ldr	r3, [sp, #32]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f000 80ca 	beq.w	8008ea0 <_dtoa_r+0xb20>
 8008d0c:	9b03      	ldr	r3, [sp, #12]
 8008d0e:	9302      	str	r3, [sp, #8]
 8008d10:	2d00      	cmp	r5, #0
 8008d12:	dd05      	ble.n	8008d20 <_dtoa_r+0x9a0>
 8008d14:	4639      	mov	r1, r7
 8008d16:	462a      	mov	r2, r5
 8008d18:	4620      	mov	r0, r4
 8008d1a:	f000 fc83 	bl	8009624 <__lshift>
 8008d1e:	4607      	mov	r7, r0
 8008d20:	f1b8 0f00 	cmp.w	r8, #0
 8008d24:	d05b      	beq.n	8008dde <_dtoa_r+0xa5e>
 8008d26:	6879      	ldr	r1, [r7, #4]
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f000 fa69 	bl	8009200 <_Balloc>
 8008d2e:	4605      	mov	r5, r0
 8008d30:	b928      	cbnz	r0, 8008d3e <_dtoa_r+0x9be>
 8008d32:	4b87      	ldr	r3, [pc, #540]	; (8008f50 <_dtoa_r+0xbd0>)
 8008d34:	4602      	mov	r2, r0
 8008d36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008d3a:	f7ff bb3b 	b.w	80083b4 <_dtoa_r+0x34>
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	3202      	adds	r2, #2
 8008d42:	0092      	lsls	r2, r2, #2
 8008d44:	f107 010c 	add.w	r1, r7, #12
 8008d48:	300c      	adds	r0, #12
 8008d4a:	f7fe fb4a 	bl	80073e2 <memcpy>
 8008d4e:	2201      	movs	r2, #1
 8008d50:	4629      	mov	r1, r5
 8008d52:	4620      	mov	r0, r4
 8008d54:	f000 fc66 	bl	8009624 <__lshift>
 8008d58:	9b01      	ldr	r3, [sp, #4]
 8008d5a:	f103 0901 	add.w	r9, r3, #1
 8008d5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008d62:	4413      	add	r3, r2
 8008d64:	9305      	str	r3, [sp, #20]
 8008d66:	f00a 0301 	and.w	r3, sl, #1
 8008d6a:	46b8      	mov	r8, r7
 8008d6c:	9304      	str	r3, [sp, #16]
 8008d6e:	4607      	mov	r7, r0
 8008d70:	4631      	mov	r1, r6
 8008d72:	ee18 0a10 	vmov	r0, s16
 8008d76:	f7ff fa77 	bl	8008268 <quorem>
 8008d7a:	4641      	mov	r1, r8
 8008d7c:	9002      	str	r0, [sp, #8]
 8008d7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008d82:	ee18 0a10 	vmov	r0, s16
 8008d86:	f000 fcbd 	bl	8009704 <__mcmp>
 8008d8a:	463a      	mov	r2, r7
 8008d8c:	9003      	str	r0, [sp, #12]
 8008d8e:	4631      	mov	r1, r6
 8008d90:	4620      	mov	r0, r4
 8008d92:	f000 fcd3 	bl	800973c <__mdiff>
 8008d96:	68c2      	ldr	r2, [r0, #12]
 8008d98:	f109 3bff 	add.w	fp, r9, #4294967295
 8008d9c:	4605      	mov	r5, r0
 8008d9e:	bb02      	cbnz	r2, 8008de2 <_dtoa_r+0xa62>
 8008da0:	4601      	mov	r1, r0
 8008da2:	ee18 0a10 	vmov	r0, s16
 8008da6:	f000 fcad 	bl	8009704 <__mcmp>
 8008daa:	4602      	mov	r2, r0
 8008dac:	4629      	mov	r1, r5
 8008dae:	4620      	mov	r0, r4
 8008db0:	9207      	str	r2, [sp, #28]
 8008db2:	f000 fa65 	bl	8009280 <_Bfree>
 8008db6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008dba:	ea43 0102 	orr.w	r1, r3, r2
 8008dbe:	9b04      	ldr	r3, [sp, #16]
 8008dc0:	430b      	orrs	r3, r1
 8008dc2:	464d      	mov	r5, r9
 8008dc4:	d10f      	bne.n	8008de6 <_dtoa_r+0xa66>
 8008dc6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008dca:	d02a      	beq.n	8008e22 <_dtoa_r+0xaa2>
 8008dcc:	9b03      	ldr	r3, [sp, #12]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	dd02      	ble.n	8008dd8 <_dtoa_r+0xa58>
 8008dd2:	9b02      	ldr	r3, [sp, #8]
 8008dd4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008dd8:	f88b a000 	strb.w	sl, [fp]
 8008ddc:	e775      	b.n	8008cca <_dtoa_r+0x94a>
 8008dde:	4638      	mov	r0, r7
 8008de0:	e7ba      	b.n	8008d58 <_dtoa_r+0x9d8>
 8008de2:	2201      	movs	r2, #1
 8008de4:	e7e2      	b.n	8008dac <_dtoa_r+0xa2c>
 8008de6:	9b03      	ldr	r3, [sp, #12]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	db04      	blt.n	8008df6 <_dtoa_r+0xa76>
 8008dec:	9906      	ldr	r1, [sp, #24]
 8008dee:	430b      	orrs	r3, r1
 8008df0:	9904      	ldr	r1, [sp, #16]
 8008df2:	430b      	orrs	r3, r1
 8008df4:	d122      	bne.n	8008e3c <_dtoa_r+0xabc>
 8008df6:	2a00      	cmp	r2, #0
 8008df8:	ddee      	ble.n	8008dd8 <_dtoa_r+0xa58>
 8008dfa:	ee18 1a10 	vmov	r1, s16
 8008dfe:	2201      	movs	r2, #1
 8008e00:	4620      	mov	r0, r4
 8008e02:	f000 fc0f 	bl	8009624 <__lshift>
 8008e06:	4631      	mov	r1, r6
 8008e08:	ee08 0a10 	vmov	s16, r0
 8008e0c:	f000 fc7a 	bl	8009704 <__mcmp>
 8008e10:	2800      	cmp	r0, #0
 8008e12:	dc03      	bgt.n	8008e1c <_dtoa_r+0xa9c>
 8008e14:	d1e0      	bne.n	8008dd8 <_dtoa_r+0xa58>
 8008e16:	f01a 0f01 	tst.w	sl, #1
 8008e1a:	d0dd      	beq.n	8008dd8 <_dtoa_r+0xa58>
 8008e1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008e20:	d1d7      	bne.n	8008dd2 <_dtoa_r+0xa52>
 8008e22:	2339      	movs	r3, #57	; 0x39
 8008e24:	f88b 3000 	strb.w	r3, [fp]
 8008e28:	462b      	mov	r3, r5
 8008e2a:	461d      	mov	r5, r3
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e32:	2a39      	cmp	r2, #57	; 0x39
 8008e34:	d071      	beq.n	8008f1a <_dtoa_r+0xb9a>
 8008e36:	3201      	adds	r2, #1
 8008e38:	701a      	strb	r2, [r3, #0]
 8008e3a:	e746      	b.n	8008cca <_dtoa_r+0x94a>
 8008e3c:	2a00      	cmp	r2, #0
 8008e3e:	dd07      	ble.n	8008e50 <_dtoa_r+0xad0>
 8008e40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008e44:	d0ed      	beq.n	8008e22 <_dtoa_r+0xaa2>
 8008e46:	f10a 0301 	add.w	r3, sl, #1
 8008e4a:	f88b 3000 	strb.w	r3, [fp]
 8008e4e:	e73c      	b.n	8008cca <_dtoa_r+0x94a>
 8008e50:	9b05      	ldr	r3, [sp, #20]
 8008e52:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008e56:	4599      	cmp	r9, r3
 8008e58:	d047      	beq.n	8008eea <_dtoa_r+0xb6a>
 8008e5a:	ee18 1a10 	vmov	r1, s16
 8008e5e:	2300      	movs	r3, #0
 8008e60:	220a      	movs	r2, #10
 8008e62:	4620      	mov	r0, r4
 8008e64:	f000 fa2e 	bl	80092c4 <__multadd>
 8008e68:	45b8      	cmp	r8, r7
 8008e6a:	ee08 0a10 	vmov	s16, r0
 8008e6e:	f04f 0300 	mov.w	r3, #0
 8008e72:	f04f 020a 	mov.w	r2, #10
 8008e76:	4641      	mov	r1, r8
 8008e78:	4620      	mov	r0, r4
 8008e7a:	d106      	bne.n	8008e8a <_dtoa_r+0xb0a>
 8008e7c:	f000 fa22 	bl	80092c4 <__multadd>
 8008e80:	4680      	mov	r8, r0
 8008e82:	4607      	mov	r7, r0
 8008e84:	f109 0901 	add.w	r9, r9, #1
 8008e88:	e772      	b.n	8008d70 <_dtoa_r+0x9f0>
 8008e8a:	f000 fa1b 	bl	80092c4 <__multadd>
 8008e8e:	4639      	mov	r1, r7
 8008e90:	4680      	mov	r8, r0
 8008e92:	2300      	movs	r3, #0
 8008e94:	220a      	movs	r2, #10
 8008e96:	4620      	mov	r0, r4
 8008e98:	f000 fa14 	bl	80092c4 <__multadd>
 8008e9c:	4607      	mov	r7, r0
 8008e9e:	e7f1      	b.n	8008e84 <_dtoa_r+0xb04>
 8008ea0:	9b03      	ldr	r3, [sp, #12]
 8008ea2:	9302      	str	r3, [sp, #8]
 8008ea4:	9d01      	ldr	r5, [sp, #4]
 8008ea6:	ee18 0a10 	vmov	r0, s16
 8008eaa:	4631      	mov	r1, r6
 8008eac:	f7ff f9dc 	bl	8008268 <quorem>
 8008eb0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008eb4:	9b01      	ldr	r3, [sp, #4]
 8008eb6:	f805 ab01 	strb.w	sl, [r5], #1
 8008eba:	1aea      	subs	r2, r5, r3
 8008ebc:	9b02      	ldr	r3, [sp, #8]
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	dd09      	ble.n	8008ed6 <_dtoa_r+0xb56>
 8008ec2:	ee18 1a10 	vmov	r1, s16
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	220a      	movs	r2, #10
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f000 f9fa 	bl	80092c4 <__multadd>
 8008ed0:	ee08 0a10 	vmov	s16, r0
 8008ed4:	e7e7      	b.n	8008ea6 <_dtoa_r+0xb26>
 8008ed6:	9b02      	ldr	r3, [sp, #8]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	bfc8      	it	gt
 8008edc:	461d      	movgt	r5, r3
 8008ede:	9b01      	ldr	r3, [sp, #4]
 8008ee0:	bfd8      	it	le
 8008ee2:	2501      	movle	r5, #1
 8008ee4:	441d      	add	r5, r3
 8008ee6:	f04f 0800 	mov.w	r8, #0
 8008eea:	ee18 1a10 	vmov	r1, s16
 8008eee:	2201      	movs	r2, #1
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f000 fb97 	bl	8009624 <__lshift>
 8008ef6:	4631      	mov	r1, r6
 8008ef8:	ee08 0a10 	vmov	s16, r0
 8008efc:	f000 fc02 	bl	8009704 <__mcmp>
 8008f00:	2800      	cmp	r0, #0
 8008f02:	dc91      	bgt.n	8008e28 <_dtoa_r+0xaa8>
 8008f04:	d102      	bne.n	8008f0c <_dtoa_r+0xb8c>
 8008f06:	f01a 0f01 	tst.w	sl, #1
 8008f0a:	d18d      	bne.n	8008e28 <_dtoa_r+0xaa8>
 8008f0c:	462b      	mov	r3, r5
 8008f0e:	461d      	mov	r5, r3
 8008f10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f14:	2a30      	cmp	r2, #48	; 0x30
 8008f16:	d0fa      	beq.n	8008f0e <_dtoa_r+0xb8e>
 8008f18:	e6d7      	b.n	8008cca <_dtoa_r+0x94a>
 8008f1a:	9a01      	ldr	r2, [sp, #4]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d184      	bne.n	8008e2a <_dtoa_r+0xaaa>
 8008f20:	9b00      	ldr	r3, [sp, #0]
 8008f22:	3301      	adds	r3, #1
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	2331      	movs	r3, #49	; 0x31
 8008f28:	7013      	strb	r3, [r2, #0]
 8008f2a:	e6ce      	b.n	8008cca <_dtoa_r+0x94a>
 8008f2c:	4b09      	ldr	r3, [pc, #36]	; (8008f54 <_dtoa_r+0xbd4>)
 8008f2e:	f7ff ba95 	b.w	800845c <_dtoa_r+0xdc>
 8008f32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f47f aa6e 	bne.w	8008416 <_dtoa_r+0x96>
 8008f3a:	4b07      	ldr	r3, [pc, #28]	; (8008f58 <_dtoa_r+0xbd8>)
 8008f3c:	f7ff ba8e 	b.w	800845c <_dtoa_r+0xdc>
 8008f40:	9b02      	ldr	r3, [sp, #8]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	dcae      	bgt.n	8008ea4 <_dtoa_r+0xb24>
 8008f46:	9b06      	ldr	r3, [sp, #24]
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	f73f aea8 	bgt.w	8008c9e <_dtoa_r+0x91e>
 8008f4e:	e7a9      	b.n	8008ea4 <_dtoa_r+0xb24>
 8008f50:	0800a0ef 	.word	0x0800a0ef
 8008f54:	0800a04c 	.word	0x0800a04c
 8008f58:	0800a070 	.word	0x0800a070

08008f5c <__sflush_r>:
 8008f5c:	898a      	ldrh	r2, [r1, #12]
 8008f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f62:	4605      	mov	r5, r0
 8008f64:	0710      	lsls	r0, r2, #28
 8008f66:	460c      	mov	r4, r1
 8008f68:	d458      	bmi.n	800901c <__sflush_r+0xc0>
 8008f6a:	684b      	ldr	r3, [r1, #4]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	dc05      	bgt.n	8008f7c <__sflush_r+0x20>
 8008f70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	dc02      	bgt.n	8008f7c <__sflush_r+0x20>
 8008f76:	2000      	movs	r0, #0
 8008f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f7e:	2e00      	cmp	r6, #0
 8008f80:	d0f9      	beq.n	8008f76 <__sflush_r+0x1a>
 8008f82:	2300      	movs	r3, #0
 8008f84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f88:	682f      	ldr	r7, [r5, #0]
 8008f8a:	602b      	str	r3, [r5, #0]
 8008f8c:	d032      	beq.n	8008ff4 <__sflush_r+0x98>
 8008f8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f90:	89a3      	ldrh	r3, [r4, #12]
 8008f92:	075a      	lsls	r2, r3, #29
 8008f94:	d505      	bpl.n	8008fa2 <__sflush_r+0x46>
 8008f96:	6863      	ldr	r3, [r4, #4]
 8008f98:	1ac0      	subs	r0, r0, r3
 8008f9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f9c:	b10b      	cbz	r3, 8008fa2 <__sflush_r+0x46>
 8008f9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fa0:	1ac0      	subs	r0, r0, r3
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fa8:	6a21      	ldr	r1, [r4, #32]
 8008faa:	4628      	mov	r0, r5
 8008fac:	47b0      	blx	r6
 8008fae:	1c43      	adds	r3, r0, #1
 8008fb0:	89a3      	ldrh	r3, [r4, #12]
 8008fb2:	d106      	bne.n	8008fc2 <__sflush_r+0x66>
 8008fb4:	6829      	ldr	r1, [r5, #0]
 8008fb6:	291d      	cmp	r1, #29
 8008fb8:	d82c      	bhi.n	8009014 <__sflush_r+0xb8>
 8008fba:	4a2a      	ldr	r2, [pc, #168]	; (8009064 <__sflush_r+0x108>)
 8008fbc:	40ca      	lsrs	r2, r1
 8008fbe:	07d6      	lsls	r6, r2, #31
 8008fc0:	d528      	bpl.n	8009014 <__sflush_r+0xb8>
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	6062      	str	r2, [r4, #4]
 8008fc6:	04d9      	lsls	r1, r3, #19
 8008fc8:	6922      	ldr	r2, [r4, #16]
 8008fca:	6022      	str	r2, [r4, #0]
 8008fcc:	d504      	bpl.n	8008fd8 <__sflush_r+0x7c>
 8008fce:	1c42      	adds	r2, r0, #1
 8008fd0:	d101      	bne.n	8008fd6 <__sflush_r+0x7a>
 8008fd2:	682b      	ldr	r3, [r5, #0]
 8008fd4:	b903      	cbnz	r3, 8008fd8 <__sflush_r+0x7c>
 8008fd6:	6560      	str	r0, [r4, #84]	; 0x54
 8008fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fda:	602f      	str	r7, [r5, #0]
 8008fdc:	2900      	cmp	r1, #0
 8008fde:	d0ca      	beq.n	8008f76 <__sflush_r+0x1a>
 8008fe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fe4:	4299      	cmp	r1, r3
 8008fe6:	d002      	beq.n	8008fee <__sflush_r+0x92>
 8008fe8:	4628      	mov	r0, r5
 8008fea:	f000 fca3 	bl	8009934 <_free_r>
 8008fee:	2000      	movs	r0, #0
 8008ff0:	6360      	str	r0, [r4, #52]	; 0x34
 8008ff2:	e7c1      	b.n	8008f78 <__sflush_r+0x1c>
 8008ff4:	6a21      	ldr	r1, [r4, #32]
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	47b0      	blx	r6
 8008ffc:	1c41      	adds	r1, r0, #1
 8008ffe:	d1c7      	bne.n	8008f90 <__sflush_r+0x34>
 8009000:	682b      	ldr	r3, [r5, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d0c4      	beq.n	8008f90 <__sflush_r+0x34>
 8009006:	2b1d      	cmp	r3, #29
 8009008:	d001      	beq.n	800900e <__sflush_r+0xb2>
 800900a:	2b16      	cmp	r3, #22
 800900c:	d101      	bne.n	8009012 <__sflush_r+0xb6>
 800900e:	602f      	str	r7, [r5, #0]
 8009010:	e7b1      	b.n	8008f76 <__sflush_r+0x1a>
 8009012:	89a3      	ldrh	r3, [r4, #12]
 8009014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009018:	81a3      	strh	r3, [r4, #12]
 800901a:	e7ad      	b.n	8008f78 <__sflush_r+0x1c>
 800901c:	690f      	ldr	r7, [r1, #16]
 800901e:	2f00      	cmp	r7, #0
 8009020:	d0a9      	beq.n	8008f76 <__sflush_r+0x1a>
 8009022:	0793      	lsls	r3, r2, #30
 8009024:	680e      	ldr	r6, [r1, #0]
 8009026:	bf08      	it	eq
 8009028:	694b      	ldreq	r3, [r1, #20]
 800902a:	600f      	str	r7, [r1, #0]
 800902c:	bf18      	it	ne
 800902e:	2300      	movne	r3, #0
 8009030:	eba6 0807 	sub.w	r8, r6, r7
 8009034:	608b      	str	r3, [r1, #8]
 8009036:	f1b8 0f00 	cmp.w	r8, #0
 800903a:	dd9c      	ble.n	8008f76 <__sflush_r+0x1a>
 800903c:	6a21      	ldr	r1, [r4, #32]
 800903e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009040:	4643      	mov	r3, r8
 8009042:	463a      	mov	r2, r7
 8009044:	4628      	mov	r0, r5
 8009046:	47b0      	blx	r6
 8009048:	2800      	cmp	r0, #0
 800904a:	dc06      	bgt.n	800905a <__sflush_r+0xfe>
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009052:	81a3      	strh	r3, [r4, #12]
 8009054:	f04f 30ff 	mov.w	r0, #4294967295
 8009058:	e78e      	b.n	8008f78 <__sflush_r+0x1c>
 800905a:	4407      	add	r7, r0
 800905c:	eba8 0800 	sub.w	r8, r8, r0
 8009060:	e7e9      	b.n	8009036 <__sflush_r+0xda>
 8009062:	bf00      	nop
 8009064:	20400001 	.word	0x20400001

08009068 <_fflush_r>:
 8009068:	b538      	push	{r3, r4, r5, lr}
 800906a:	690b      	ldr	r3, [r1, #16]
 800906c:	4605      	mov	r5, r0
 800906e:	460c      	mov	r4, r1
 8009070:	b913      	cbnz	r3, 8009078 <_fflush_r+0x10>
 8009072:	2500      	movs	r5, #0
 8009074:	4628      	mov	r0, r5
 8009076:	bd38      	pop	{r3, r4, r5, pc}
 8009078:	b118      	cbz	r0, 8009082 <_fflush_r+0x1a>
 800907a:	6983      	ldr	r3, [r0, #24]
 800907c:	b90b      	cbnz	r3, 8009082 <_fflush_r+0x1a>
 800907e:	f7fe f8eb 	bl	8007258 <__sinit>
 8009082:	4b14      	ldr	r3, [pc, #80]	; (80090d4 <_fflush_r+0x6c>)
 8009084:	429c      	cmp	r4, r3
 8009086:	d11b      	bne.n	80090c0 <_fflush_r+0x58>
 8009088:	686c      	ldr	r4, [r5, #4]
 800908a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d0ef      	beq.n	8009072 <_fflush_r+0xa>
 8009092:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009094:	07d0      	lsls	r0, r2, #31
 8009096:	d404      	bmi.n	80090a2 <_fflush_r+0x3a>
 8009098:	0599      	lsls	r1, r3, #22
 800909a:	d402      	bmi.n	80090a2 <_fflush_r+0x3a>
 800909c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800909e:	f7fe f99e 	bl	80073de <__retarget_lock_acquire_recursive>
 80090a2:	4628      	mov	r0, r5
 80090a4:	4621      	mov	r1, r4
 80090a6:	f7ff ff59 	bl	8008f5c <__sflush_r>
 80090aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090ac:	07da      	lsls	r2, r3, #31
 80090ae:	4605      	mov	r5, r0
 80090b0:	d4e0      	bmi.n	8009074 <_fflush_r+0xc>
 80090b2:	89a3      	ldrh	r3, [r4, #12]
 80090b4:	059b      	lsls	r3, r3, #22
 80090b6:	d4dd      	bmi.n	8009074 <_fflush_r+0xc>
 80090b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090ba:	f7fe f991 	bl	80073e0 <__retarget_lock_release_recursive>
 80090be:	e7d9      	b.n	8009074 <_fflush_r+0xc>
 80090c0:	4b05      	ldr	r3, [pc, #20]	; (80090d8 <_fflush_r+0x70>)
 80090c2:	429c      	cmp	r4, r3
 80090c4:	d101      	bne.n	80090ca <_fflush_r+0x62>
 80090c6:	68ac      	ldr	r4, [r5, #8]
 80090c8:	e7df      	b.n	800908a <_fflush_r+0x22>
 80090ca:	4b04      	ldr	r3, [pc, #16]	; (80090dc <_fflush_r+0x74>)
 80090cc:	429c      	cmp	r4, r3
 80090ce:	bf08      	it	eq
 80090d0:	68ec      	ldreq	r4, [r5, #12]
 80090d2:	e7da      	b.n	800908a <_fflush_r+0x22>
 80090d4:	08009ff8 	.word	0x08009ff8
 80090d8:	0800a018 	.word	0x0800a018
 80090dc:	08009fd8 	.word	0x08009fd8

080090e0 <_localeconv_r>:
 80090e0:	4800      	ldr	r0, [pc, #0]	; (80090e4 <_localeconv_r+0x4>)
 80090e2:	4770      	bx	lr
 80090e4:	20000168 	.word	0x20000168

080090e8 <_lseek_r>:
 80090e8:	b538      	push	{r3, r4, r5, lr}
 80090ea:	4d07      	ldr	r5, [pc, #28]	; (8009108 <_lseek_r+0x20>)
 80090ec:	4604      	mov	r4, r0
 80090ee:	4608      	mov	r0, r1
 80090f0:	4611      	mov	r1, r2
 80090f2:	2200      	movs	r2, #0
 80090f4:	602a      	str	r2, [r5, #0]
 80090f6:	461a      	mov	r2, r3
 80090f8:	f7f8 fa5c 	bl	80015b4 <_lseek>
 80090fc:	1c43      	adds	r3, r0, #1
 80090fe:	d102      	bne.n	8009106 <_lseek_r+0x1e>
 8009100:	682b      	ldr	r3, [r5, #0]
 8009102:	b103      	cbz	r3, 8009106 <_lseek_r+0x1e>
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	bd38      	pop	{r3, r4, r5, pc}
 8009108:	2000248c 	.word	0x2000248c

0800910c <__swhatbuf_r>:
 800910c:	b570      	push	{r4, r5, r6, lr}
 800910e:	460e      	mov	r6, r1
 8009110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009114:	2900      	cmp	r1, #0
 8009116:	b096      	sub	sp, #88	; 0x58
 8009118:	4614      	mov	r4, r2
 800911a:	461d      	mov	r5, r3
 800911c:	da08      	bge.n	8009130 <__swhatbuf_r+0x24>
 800911e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009122:	2200      	movs	r2, #0
 8009124:	602a      	str	r2, [r5, #0]
 8009126:	061a      	lsls	r2, r3, #24
 8009128:	d410      	bmi.n	800914c <__swhatbuf_r+0x40>
 800912a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800912e:	e00e      	b.n	800914e <__swhatbuf_r+0x42>
 8009130:	466a      	mov	r2, sp
 8009132:	f000 fde7 	bl	8009d04 <_fstat_r>
 8009136:	2800      	cmp	r0, #0
 8009138:	dbf1      	blt.n	800911e <__swhatbuf_r+0x12>
 800913a:	9a01      	ldr	r2, [sp, #4]
 800913c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009140:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009144:	425a      	negs	r2, r3
 8009146:	415a      	adcs	r2, r3
 8009148:	602a      	str	r2, [r5, #0]
 800914a:	e7ee      	b.n	800912a <__swhatbuf_r+0x1e>
 800914c:	2340      	movs	r3, #64	; 0x40
 800914e:	2000      	movs	r0, #0
 8009150:	6023      	str	r3, [r4, #0]
 8009152:	b016      	add	sp, #88	; 0x58
 8009154:	bd70      	pop	{r4, r5, r6, pc}
	...

08009158 <__smakebuf_r>:
 8009158:	898b      	ldrh	r3, [r1, #12]
 800915a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800915c:	079d      	lsls	r5, r3, #30
 800915e:	4606      	mov	r6, r0
 8009160:	460c      	mov	r4, r1
 8009162:	d507      	bpl.n	8009174 <__smakebuf_r+0x1c>
 8009164:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009168:	6023      	str	r3, [r4, #0]
 800916a:	6123      	str	r3, [r4, #16]
 800916c:	2301      	movs	r3, #1
 800916e:	6163      	str	r3, [r4, #20]
 8009170:	b002      	add	sp, #8
 8009172:	bd70      	pop	{r4, r5, r6, pc}
 8009174:	ab01      	add	r3, sp, #4
 8009176:	466a      	mov	r2, sp
 8009178:	f7ff ffc8 	bl	800910c <__swhatbuf_r>
 800917c:	9900      	ldr	r1, [sp, #0]
 800917e:	4605      	mov	r5, r0
 8009180:	4630      	mov	r0, r6
 8009182:	f7fe f965 	bl	8007450 <_malloc_r>
 8009186:	b948      	cbnz	r0, 800919c <__smakebuf_r+0x44>
 8009188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800918c:	059a      	lsls	r2, r3, #22
 800918e:	d4ef      	bmi.n	8009170 <__smakebuf_r+0x18>
 8009190:	f023 0303 	bic.w	r3, r3, #3
 8009194:	f043 0302 	orr.w	r3, r3, #2
 8009198:	81a3      	strh	r3, [r4, #12]
 800919a:	e7e3      	b.n	8009164 <__smakebuf_r+0xc>
 800919c:	4b0d      	ldr	r3, [pc, #52]	; (80091d4 <__smakebuf_r+0x7c>)
 800919e:	62b3      	str	r3, [r6, #40]	; 0x28
 80091a0:	89a3      	ldrh	r3, [r4, #12]
 80091a2:	6020      	str	r0, [r4, #0]
 80091a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091a8:	81a3      	strh	r3, [r4, #12]
 80091aa:	9b00      	ldr	r3, [sp, #0]
 80091ac:	6163      	str	r3, [r4, #20]
 80091ae:	9b01      	ldr	r3, [sp, #4]
 80091b0:	6120      	str	r0, [r4, #16]
 80091b2:	b15b      	cbz	r3, 80091cc <__smakebuf_r+0x74>
 80091b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091b8:	4630      	mov	r0, r6
 80091ba:	f000 fdb5 	bl	8009d28 <_isatty_r>
 80091be:	b128      	cbz	r0, 80091cc <__smakebuf_r+0x74>
 80091c0:	89a3      	ldrh	r3, [r4, #12]
 80091c2:	f023 0303 	bic.w	r3, r3, #3
 80091c6:	f043 0301 	orr.w	r3, r3, #1
 80091ca:	81a3      	strh	r3, [r4, #12]
 80091cc:	89a0      	ldrh	r0, [r4, #12]
 80091ce:	4305      	orrs	r5, r0
 80091d0:	81a5      	strh	r5, [r4, #12]
 80091d2:	e7cd      	b.n	8009170 <__smakebuf_r+0x18>
 80091d4:	080071f1 	.word	0x080071f1

080091d8 <malloc>:
 80091d8:	4b02      	ldr	r3, [pc, #8]	; (80091e4 <malloc+0xc>)
 80091da:	4601      	mov	r1, r0
 80091dc:	6818      	ldr	r0, [r3, #0]
 80091de:	f7fe b937 	b.w	8007450 <_malloc_r>
 80091e2:	bf00      	nop
 80091e4:	20000014 	.word	0x20000014

080091e8 <__malloc_lock>:
 80091e8:	4801      	ldr	r0, [pc, #4]	; (80091f0 <__malloc_lock+0x8>)
 80091ea:	f7fe b8f8 	b.w	80073de <__retarget_lock_acquire_recursive>
 80091ee:	bf00      	nop
 80091f0:	20002480 	.word	0x20002480

080091f4 <__malloc_unlock>:
 80091f4:	4801      	ldr	r0, [pc, #4]	; (80091fc <__malloc_unlock+0x8>)
 80091f6:	f7fe b8f3 	b.w	80073e0 <__retarget_lock_release_recursive>
 80091fa:	bf00      	nop
 80091fc:	20002480 	.word	0x20002480

08009200 <_Balloc>:
 8009200:	b570      	push	{r4, r5, r6, lr}
 8009202:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009204:	4604      	mov	r4, r0
 8009206:	460d      	mov	r5, r1
 8009208:	b976      	cbnz	r6, 8009228 <_Balloc+0x28>
 800920a:	2010      	movs	r0, #16
 800920c:	f7ff ffe4 	bl	80091d8 <malloc>
 8009210:	4602      	mov	r2, r0
 8009212:	6260      	str	r0, [r4, #36]	; 0x24
 8009214:	b920      	cbnz	r0, 8009220 <_Balloc+0x20>
 8009216:	4b18      	ldr	r3, [pc, #96]	; (8009278 <_Balloc+0x78>)
 8009218:	4818      	ldr	r0, [pc, #96]	; (800927c <_Balloc+0x7c>)
 800921a:	2166      	movs	r1, #102	; 0x66
 800921c:	f000 fd42 	bl	8009ca4 <__assert_func>
 8009220:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009224:	6006      	str	r6, [r0, #0]
 8009226:	60c6      	str	r6, [r0, #12]
 8009228:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800922a:	68f3      	ldr	r3, [r6, #12]
 800922c:	b183      	cbz	r3, 8009250 <_Balloc+0x50>
 800922e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009236:	b9b8      	cbnz	r0, 8009268 <_Balloc+0x68>
 8009238:	2101      	movs	r1, #1
 800923a:	fa01 f605 	lsl.w	r6, r1, r5
 800923e:	1d72      	adds	r2, r6, #5
 8009240:	0092      	lsls	r2, r2, #2
 8009242:	4620      	mov	r0, r4
 8009244:	f000 fb60 	bl	8009908 <_calloc_r>
 8009248:	b160      	cbz	r0, 8009264 <_Balloc+0x64>
 800924a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800924e:	e00e      	b.n	800926e <_Balloc+0x6e>
 8009250:	2221      	movs	r2, #33	; 0x21
 8009252:	2104      	movs	r1, #4
 8009254:	4620      	mov	r0, r4
 8009256:	f000 fb57 	bl	8009908 <_calloc_r>
 800925a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800925c:	60f0      	str	r0, [r6, #12]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1e4      	bne.n	800922e <_Balloc+0x2e>
 8009264:	2000      	movs	r0, #0
 8009266:	bd70      	pop	{r4, r5, r6, pc}
 8009268:	6802      	ldr	r2, [r0, #0]
 800926a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800926e:	2300      	movs	r3, #0
 8009270:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009274:	e7f7      	b.n	8009266 <_Balloc+0x66>
 8009276:	bf00      	nop
 8009278:	0800a07d 	.word	0x0800a07d
 800927c:	0800a100 	.word	0x0800a100

08009280 <_Bfree>:
 8009280:	b570      	push	{r4, r5, r6, lr}
 8009282:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009284:	4605      	mov	r5, r0
 8009286:	460c      	mov	r4, r1
 8009288:	b976      	cbnz	r6, 80092a8 <_Bfree+0x28>
 800928a:	2010      	movs	r0, #16
 800928c:	f7ff ffa4 	bl	80091d8 <malloc>
 8009290:	4602      	mov	r2, r0
 8009292:	6268      	str	r0, [r5, #36]	; 0x24
 8009294:	b920      	cbnz	r0, 80092a0 <_Bfree+0x20>
 8009296:	4b09      	ldr	r3, [pc, #36]	; (80092bc <_Bfree+0x3c>)
 8009298:	4809      	ldr	r0, [pc, #36]	; (80092c0 <_Bfree+0x40>)
 800929a:	218a      	movs	r1, #138	; 0x8a
 800929c:	f000 fd02 	bl	8009ca4 <__assert_func>
 80092a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092a4:	6006      	str	r6, [r0, #0]
 80092a6:	60c6      	str	r6, [r0, #12]
 80092a8:	b13c      	cbz	r4, 80092ba <_Bfree+0x3a>
 80092aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80092ac:	6862      	ldr	r2, [r4, #4]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092b4:	6021      	str	r1, [r4, #0]
 80092b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80092ba:	bd70      	pop	{r4, r5, r6, pc}
 80092bc:	0800a07d 	.word	0x0800a07d
 80092c0:	0800a100 	.word	0x0800a100

080092c4 <__multadd>:
 80092c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092c8:	690d      	ldr	r5, [r1, #16]
 80092ca:	4607      	mov	r7, r0
 80092cc:	460c      	mov	r4, r1
 80092ce:	461e      	mov	r6, r3
 80092d0:	f101 0c14 	add.w	ip, r1, #20
 80092d4:	2000      	movs	r0, #0
 80092d6:	f8dc 3000 	ldr.w	r3, [ip]
 80092da:	b299      	uxth	r1, r3
 80092dc:	fb02 6101 	mla	r1, r2, r1, r6
 80092e0:	0c1e      	lsrs	r6, r3, #16
 80092e2:	0c0b      	lsrs	r3, r1, #16
 80092e4:	fb02 3306 	mla	r3, r2, r6, r3
 80092e8:	b289      	uxth	r1, r1
 80092ea:	3001      	adds	r0, #1
 80092ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80092f0:	4285      	cmp	r5, r0
 80092f2:	f84c 1b04 	str.w	r1, [ip], #4
 80092f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80092fa:	dcec      	bgt.n	80092d6 <__multadd+0x12>
 80092fc:	b30e      	cbz	r6, 8009342 <__multadd+0x7e>
 80092fe:	68a3      	ldr	r3, [r4, #8]
 8009300:	42ab      	cmp	r3, r5
 8009302:	dc19      	bgt.n	8009338 <__multadd+0x74>
 8009304:	6861      	ldr	r1, [r4, #4]
 8009306:	4638      	mov	r0, r7
 8009308:	3101      	adds	r1, #1
 800930a:	f7ff ff79 	bl	8009200 <_Balloc>
 800930e:	4680      	mov	r8, r0
 8009310:	b928      	cbnz	r0, 800931e <__multadd+0x5a>
 8009312:	4602      	mov	r2, r0
 8009314:	4b0c      	ldr	r3, [pc, #48]	; (8009348 <__multadd+0x84>)
 8009316:	480d      	ldr	r0, [pc, #52]	; (800934c <__multadd+0x88>)
 8009318:	21b5      	movs	r1, #181	; 0xb5
 800931a:	f000 fcc3 	bl	8009ca4 <__assert_func>
 800931e:	6922      	ldr	r2, [r4, #16]
 8009320:	3202      	adds	r2, #2
 8009322:	f104 010c 	add.w	r1, r4, #12
 8009326:	0092      	lsls	r2, r2, #2
 8009328:	300c      	adds	r0, #12
 800932a:	f7fe f85a 	bl	80073e2 <memcpy>
 800932e:	4621      	mov	r1, r4
 8009330:	4638      	mov	r0, r7
 8009332:	f7ff ffa5 	bl	8009280 <_Bfree>
 8009336:	4644      	mov	r4, r8
 8009338:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800933c:	3501      	adds	r5, #1
 800933e:	615e      	str	r6, [r3, #20]
 8009340:	6125      	str	r5, [r4, #16]
 8009342:	4620      	mov	r0, r4
 8009344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009348:	0800a0ef 	.word	0x0800a0ef
 800934c:	0800a100 	.word	0x0800a100

08009350 <__hi0bits>:
 8009350:	0c03      	lsrs	r3, r0, #16
 8009352:	041b      	lsls	r3, r3, #16
 8009354:	b9d3      	cbnz	r3, 800938c <__hi0bits+0x3c>
 8009356:	0400      	lsls	r0, r0, #16
 8009358:	2310      	movs	r3, #16
 800935a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800935e:	bf04      	itt	eq
 8009360:	0200      	lsleq	r0, r0, #8
 8009362:	3308      	addeq	r3, #8
 8009364:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009368:	bf04      	itt	eq
 800936a:	0100      	lsleq	r0, r0, #4
 800936c:	3304      	addeq	r3, #4
 800936e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009372:	bf04      	itt	eq
 8009374:	0080      	lsleq	r0, r0, #2
 8009376:	3302      	addeq	r3, #2
 8009378:	2800      	cmp	r0, #0
 800937a:	db05      	blt.n	8009388 <__hi0bits+0x38>
 800937c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009380:	f103 0301 	add.w	r3, r3, #1
 8009384:	bf08      	it	eq
 8009386:	2320      	moveq	r3, #32
 8009388:	4618      	mov	r0, r3
 800938a:	4770      	bx	lr
 800938c:	2300      	movs	r3, #0
 800938e:	e7e4      	b.n	800935a <__hi0bits+0xa>

08009390 <__lo0bits>:
 8009390:	6803      	ldr	r3, [r0, #0]
 8009392:	f013 0207 	ands.w	r2, r3, #7
 8009396:	4601      	mov	r1, r0
 8009398:	d00b      	beq.n	80093b2 <__lo0bits+0x22>
 800939a:	07da      	lsls	r2, r3, #31
 800939c:	d423      	bmi.n	80093e6 <__lo0bits+0x56>
 800939e:	0798      	lsls	r0, r3, #30
 80093a0:	bf49      	itett	mi
 80093a2:	085b      	lsrmi	r3, r3, #1
 80093a4:	089b      	lsrpl	r3, r3, #2
 80093a6:	2001      	movmi	r0, #1
 80093a8:	600b      	strmi	r3, [r1, #0]
 80093aa:	bf5c      	itt	pl
 80093ac:	600b      	strpl	r3, [r1, #0]
 80093ae:	2002      	movpl	r0, #2
 80093b0:	4770      	bx	lr
 80093b2:	b298      	uxth	r0, r3
 80093b4:	b9a8      	cbnz	r0, 80093e2 <__lo0bits+0x52>
 80093b6:	0c1b      	lsrs	r3, r3, #16
 80093b8:	2010      	movs	r0, #16
 80093ba:	b2da      	uxtb	r2, r3
 80093bc:	b90a      	cbnz	r2, 80093c2 <__lo0bits+0x32>
 80093be:	3008      	adds	r0, #8
 80093c0:	0a1b      	lsrs	r3, r3, #8
 80093c2:	071a      	lsls	r2, r3, #28
 80093c4:	bf04      	itt	eq
 80093c6:	091b      	lsreq	r3, r3, #4
 80093c8:	3004      	addeq	r0, #4
 80093ca:	079a      	lsls	r2, r3, #30
 80093cc:	bf04      	itt	eq
 80093ce:	089b      	lsreq	r3, r3, #2
 80093d0:	3002      	addeq	r0, #2
 80093d2:	07da      	lsls	r2, r3, #31
 80093d4:	d403      	bmi.n	80093de <__lo0bits+0x4e>
 80093d6:	085b      	lsrs	r3, r3, #1
 80093d8:	f100 0001 	add.w	r0, r0, #1
 80093dc:	d005      	beq.n	80093ea <__lo0bits+0x5a>
 80093de:	600b      	str	r3, [r1, #0]
 80093e0:	4770      	bx	lr
 80093e2:	4610      	mov	r0, r2
 80093e4:	e7e9      	b.n	80093ba <__lo0bits+0x2a>
 80093e6:	2000      	movs	r0, #0
 80093e8:	4770      	bx	lr
 80093ea:	2020      	movs	r0, #32
 80093ec:	4770      	bx	lr
	...

080093f0 <__i2b>:
 80093f0:	b510      	push	{r4, lr}
 80093f2:	460c      	mov	r4, r1
 80093f4:	2101      	movs	r1, #1
 80093f6:	f7ff ff03 	bl	8009200 <_Balloc>
 80093fa:	4602      	mov	r2, r0
 80093fc:	b928      	cbnz	r0, 800940a <__i2b+0x1a>
 80093fe:	4b05      	ldr	r3, [pc, #20]	; (8009414 <__i2b+0x24>)
 8009400:	4805      	ldr	r0, [pc, #20]	; (8009418 <__i2b+0x28>)
 8009402:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009406:	f000 fc4d 	bl	8009ca4 <__assert_func>
 800940a:	2301      	movs	r3, #1
 800940c:	6144      	str	r4, [r0, #20]
 800940e:	6103      	str	r3, [r0, #16]
 8009410:	bd10      	pop	{r4, pc}
 8009412:	bf00      	nop
 8009414:	0800a0ef 	.word	0x0800a0ef
 8009418:	0800a100 	.word	0x0800a100

0800941c <__multiply>:
 800941c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009420:	4691      	mov	r9, r2
 8009422:	690a      	ldr	r2, [r1, #16]
 8009424:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009428:	429a      	cmp	r2, r3
 800942a:	bfb8      	it	lt
 800942c:	460b      	movlt	r3, r1
 800942e:	460c      	mov	r4, r1
 8009430:	bfbc      	itt	lt
 8009432:	464c      	movlt	r4, r9
 8009434:	4699      	movlt	r9, r3
 8009436:	6927      	ldr	r7, [r4, #16]
 8009438:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800943c:	68a3      	ldr	r3, [r4, #8]
 800943e:	6861      	ldr	r1, [r4, #4]
 8009440:	eb07 060a 	add.w	r6, r7, sl
 8009444:	42b3      	cmp	r3, r6
 8009446:	b085      	sub	sp, #20
 8009448:	bfb8      	it	lt
 800944a:	3101      	addlt	r1, #1
 800944c:	f7ff fed8 	bl	8009200 <_Balloc>
 8009450:	b930      	cbnz	r0, 8009460 <__multiply+0x44>
 8009452:	4602      	mov	r2, r0
 8009454:	4b44      	ldr	r3, [pc, #272]	; (8009568 <__multiply+0x14c>)
 8009456:	4845      	ldr	r0, [pc, #276]	; (800956c <__multiply+0x150>)
 8009458:	f240 115d 	movw	r1, #349	; 0x15d
 800945c:	f000 fc22 	bl	8009ca4 <__assert_func>
 8009460:	f100 0514 	add.w	r5, r0, #20
 8009464:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009468:	462b      	mov	r3, r5
 800946a:	2200      	movs	r2, #0
 800946c:	4543      	cmp	r3, r8
 800946e:	d321      	bcc.n	80094b4 <__multiply+0x98>
 8009470:	f104 0314 	add.w	r3, r4, #20
 8009474:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009478:	f109 0314 	add.w	r3, r9, #20
 800947c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009480:	9202      	str	r2, [sp, #8]
 8009482:	1b3a      	subs	r2, r7, r4
 8009484:	3a15      	subs	r2, #21
 8009486:	f022 0203 	bic.w	r2, r2, #3
 800948a:	3204      	adds	r2, #4
 800948c:	f104 0115 	add.w	r1, r4, #21
 8009490:	428f      	cmp	r7, r1
 8009492:	bf38      	it	cc
 8009494:	2204      	movcc	r2, #4
 8009496:	9201      	str	r2, [sp, #4]
 8009498:	9a02      	ldr	r2, [sp, #8]
 800949a:	9303      	str	r3, [sp, #12]
 800949c:	429a      	cmp	r2, r3
 800949e:	d80c      	bhi.n	80094ba <__multiply+0x9e>
 80094a0:	2e00      	cmp	r6, #0
 80094a2:	dd03      	ble.n	80094ac <__multiply+0x90>
 80094a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d05a      	beq.n	8009562 <__multiply+0x146>
 80094ac:	6106      	str	r6, [r0, #16]
 80094ae:	b005      	add	sp, #20
 80094b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094b4:	f843 2b04 	str.w	r2, [r3], #4
 80094b8:	e7d8      	b.n	800946c <__multiply+0x50>
 80094ba:	f8b3 a000 	ldrh.w	sl, [r3]
 80094be:	f1ba 0f00 	cmp.w	sl, #0
 80094c2:	d024      	beq.n	800950e <__multiply+0xf2>
 80094c4:	f104 0e14 	add.w	lr, r4, #20
 80094c8:	46a9      	mov	r9, r5
 80094ca:	f04f 0c00 	mov.w	ip, #0
 80094ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 80094d2:	f8d9 1000 	ldr.w	r1, [r9]
 80094d6:	fa1f fb82 	uxth.w	fp, r2
 80094da:	b289      	uxth	r1, r1
 80094dc:	fb0a 110b 	mla	r1, sl, fp, r1
 80094e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80094e4:	f8d9 2000 	ldr.w	r2, [r9]
 80094e8:	4461      	add	r1, ip
 80094ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80094ee:	fb0a c20b 	mla	r2, sl, fp, ip
 80094f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80094f6:	b289      	uxth	r1, r1
 80094f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80094fc:	4577      	cmp	r7, lr
 80094fe:	f849 1b04 	str.w	r1, [r9], #4
 8009502:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009506:	d8e2      	bhi.n	80094ce <__multiply+0xb2>
 8009508:	9a01      	ldr	r2, [sp, #4]
 800950a:	f845 c002 	str.w	ip, [r5, r2]
 800950e:	9a03      	ldr	r2, [sp, #12]
 8009510:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009514:	3304      	adds	r3, #4
 8009516:	f1b9 0f00 	cmp.w	r9, #0
 800951a:	d020      	beq.n	800955e <__multiply+0x142>
 800951c:	6829      	ldr	r1, [r5, #0]
 800951e:	f104 0c14 	add.w	ip, r4, #20
 8009522:	46ae      	mov	lr, r5
 8009524:	f04f 0a00 	mov.w	sl, #0
 8009528:	f8bc b000 	ldrh.w	fp, [ip]
 800952c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009530:	fb09 220b 	mla	r2, r9, fp, r2
 8009534:	4492      	add	sl, r2
 8009536:	b289      	uxth	r1, r1
 8009538:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800953c:	f84e 1b04 	str.w	r1, [lr], #4
 8009540:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009544:	f8be 1000 	ldrh.w	r1, [lr]
 8009548:	0c12      	lsrs	r2, r2, #16
 800954a:	fb09 1102 	mla	r1, r9, r2, r1
 800954e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009552:	4567      	cmp	r7, ip
 8009554:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009558:	d8e6      	bhi.n	8009528 <__multiply+0x10c>
 800955a:	9a01      	ldr	r2, [sp, #4]
 800955c:	50a9      	str	r1, [r5, r2]
 800955e:	3504      	adds	r5, #4
 8009560:	e79a      	b.n	8009498 <__multiply+0x7c>
 8009562:	3e01      	subs	r6, #1
 8009564:	e79c      	b.n	80094a0 <__multiply+0x84>
 8009566:	bf00      	nop
 8009568:	0800a0ef 	.word	0x0800a0ef
 800956c:	0800a100 	.word	0x0800a100

08009570 <__pow5mult>:
 8009570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009574:	4615      	mov	r5, r2
 8009576:	f012 0203 	ands.w	r2, r2, #3
 800957a:	4606      	mov	r6, r0
 800957c:	460f      	mov	r7, r1
 800957e:	d007      	beq.n	8009590 <__pow5mult+0x20>
 8009580:	4c25      	ldr	r4, [pc, #148]	; (8009618 <__pow5mult+0xa8>)
 8009582:	3a01      	subs	r2, #1
 8009584:	2300      	movs	r3, #0
 8009586:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800958a:	f7ff fe9b 	bl	80092c4 <__multadd>
 800958e:	4607      	mov	r7, r0
 8009590:	10ad      	asrs	r5, r5, #2
 8009592:	d03d      	beq.n	8009610 <__pow5mult+0xa0>
 8009594:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009596:	b97c      	cbnz	r4, 80095b8 <__pow5mult+0x48>
 8009598:	2010      	movs	r0, #16
 800959a:	f7ff fe1d 	bl	80091d8 <malloc>
 800959e:	4602      	mov	r2, r0
 80095a0:	6270      	str	r0, [r6, #36]	; 0x24
 80095a2:	b928      	cbnz	r0, 80095b0 <__pow5mult+0x40>
 80095a4:	4b1d      	ldr	r3, [pc, #116]	; (800961c <__pow5mult+0xac>)
 80095a6:	481e      	ldr	r0, [pc, #120]	; (8009620 <__pow5mult+0xb0>)
 80095a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80095ac:	f000 fb7a 	bl	8009ca4 <__assert_func>
 80095b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095b4:	6004      	str	r4, [r0, #0]
 80095b6:	60c4      	str	r4, [r0, #12]
 80095b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80095bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80095c0:	b94c      	cbnz	r4, 80095d6 <__pow5mult+0x66>
 80095c2:	f240 2171 	movw	r1, #625	; 0x271
 80095c6:	4630      	mov	r0, r6
 80095c8:	f7ff ff12 	bl	80093f0 <__i2b>
 80095cc:	2300      	movs	r3, #0
 80095ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80095d2:	4604      	mov	r4, r0
 80095d4:	6003      	str	r3, [r0, #0]
 80095d6:	f04f 0900 	mov.w	r9, #0
 80095da:	07eb      	lsls	r3, r5, #31
 80095dc:	d50a      	bpl.n	80095f4 <__pow5mult+0x84>
 80095de:	4639      	mov	r1, r7
 80095e0:	4622      	mov	r2, r4
 80095e2:	4630      	mov	r0, r6
 80095e4:	f7ff ff1a 	bl	800941c <__multiply>
 80095e8:	4639      	mov	r1, r7
 80095ea:	4680      	mov	r8, r0
 80095ec:	4630      	mov	r0, r6
 80095ee:	f7ff fe47 	bl	8009280 <_Bfree>
 80095f2:	4647      	mov	r7, r8
 80095f4:	106d      	asrs	r5, r5, #1
 80095f6:	d00b      	beq.n	8009610 <__pow5mult+0xa0>
 80095f8:	6820      	ldr	r0, [r4, #0]
 80095fa:	b938      	cbnz	r0, 800960c <__pow5mult+0x9c>
 80095fc:	4622      	mov	r2, r4
 80095fe:	4621      	mov	r1, r4
 8009600:	4630      	mov	r0, r6
 8009602:	f7ff ff0b 	bl	800941c <__multiply>
 8009606:	6020      	str	r0, [r4, #0]
 8009608:	f8c0 9000 	str.w	r9, [r0]
 800960c:	4604      	mov	r4, r0
 800960e:	e7e4      	b.n	80095da <__pow5mult+0x6a>
 8009610:	4638      	mov	r0, r7
 8009612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009616:	bf00      	nop
 8009618:	0800a250 	.word	0x0800a250
 800961c:	0800a07d 	.word	0x0800a07d
 8009620:	0800a100 	.word	0x0800a100

08009624 <__lshift>:
 8009624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009628:	460c      	mov	r4, r1
 800962a:	6849      	ldr	r1, [r1, #4]
 800962c:	6923      	ldr	r3, [r4, #16]
 800962e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009632:	68a3      	ldr	r3, [r4, #8]
 8009634:	4607      	mov	r7, r0
 8009636:	4691      	mov	r9, r2
 8009638:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800963c:	f108 0601 	add.w	r6, r8, #1
 8009640:	42b3      	cmp	r3, r6
 8009642:	db0b      	blt.n	800965c <__lshift+0x38>
 8009644:	4638      	mov	r0, r7
 8009646:	f7ff fddb 	bl	8009200 <_Balloc>
 800964a:	4605      	mov	r5, r0
 800964c:	b948      	cbnz	r0, 8009662 <__lshift+0x3e>
 800964e:	4602      	mov	r2, r0
 8009650:	4b2a      	ldr	r3, [pc, #168]	; (80096fc <__lshift+0xd8>)
 8009652:	482b      	ldr	r0, [pc, #172]	; (8009700 <__lshift+0xdc>)
 8009654:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009658:	f000 fb24 	bl	8009ca4 <__assert_func>
 800965c:	3101      	adds	r1, #1
 800965e:	005b      	lsls	r3, r3, #1
 8009660:	e7ee      	b.n	8009640 <__lshift+0x1c>
 8009662:	2300      	movs	r3, #0
 8009664:	f100 0114 	add.w	r1, r0, #20
 8009668:	f100 0210 	add.w	r2, r0, #16
 800966c:	4618      	mov	r0, r3
 800966e:	4553      	cmp	r3, sl
 8009670:	db37      	blt.n	80096e2 <__lshift+0xbe>
 8009672:	6920      	ldr	r0, [r4, #16]
 8009674:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009678:	f104 0314 	add.w	r3, r4, #20
 800967c:	f019 091f 	ands.w	r9, r9, #31
 8009680:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009684:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009688:	d02f      	beq.n	80096ea <__lshift+0xc6>
 800968a:	f1c9 0e20 	rsb	lr, r9, #32
 800968e:	468a      	mov	sl, r1
 8009690:	f04f 0c00 	mov.w	ip, #0
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	fa02 f209 	lsl.w	r2, r2, r9
 800969a:	ea42 020c 	orr.w	r2, r2, ip
 800969e:	f84a 2b04 	str.w	r2, [sl], #4
 80096a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80096a6:	4298      	cmp	r0, r3
 80096a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80096ac:	d8f2      	bhi.n	8009694 <__lshift+0x70>
 80096ae:	1b03      	subs	r3, r0, r4
 80096b0:	3b15      	subs	r3, #21
 80096b2:	f023 0303 	bic.w	r3, r3, #3
 80096b6:	3304      	adds	r3, #4
 80096b8:	f104 0215 	add.w	r2, r4, #21
 80096bc:	4290      	cmp	r0, r2
 80096be:	bf38      	it	cc
 80096c0:	2304      	movcc	r3, #4
 80096c2:	f841 c003 	str.w	ip, [r1, r3]
 80096c6:	f1bc 0f00 	cmp.w	ip, #0
 80096ca:	d001      	beq.n	80096d0 <__lshift+0xac>
 80096cc:	f108 0602 	add.w	r6, r8, #2
 80096d0:	3e01      	subs	r6, #1
 80096d2:	4638      	mov	r0, r7
 80096d4:	612e      	str	r6, [r5, #16]
 80096d6:	4621      	mov	r1, r4
 80096d8:	f7ff fdd2 	bl	8009280 <_Bfree>
 80096dc:	4628      	mov	r0, r5
 80096de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80096e6:	3301      	adds	r3, #1
 80096e8:	e7c1      	b.n	800966e <__lshift+0x4a>
 80096ea:	3904      	subs	r1, #4
 80096ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80096f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80096f4:	4298      	cmp	r0, r3
 80096f6:	d8f9      	bhi.n	80096ec <__lshift+0xc8>
 80096f8:	e7ea      	b.n	80096d0 <__lshift+0xac>
 80096fa:	bf00      	nop
 80096fc:	0800a0ef 	.word	0x0800a0ef
 8009700:	0800a100 	.word	0x0800a100

08009704 <__mcmp>:
 8009704:	b530      	push	{r4, r5, lr}
 8009706:	6902      	ldr	r2, [r0, #16]
 8009708:	690c      	ldr	r4, [r1, #16]
 800970a:	1b12      	subs	r2, r2, r4
 800970c:	d10e      	bne.n	800972c <__mcmp+0x28>
 800970e:	f100 0314 	add.w	r3, r0, #20
 8009712:	3114      	adds	r1, #20
 8009714:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009718:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800971c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009720:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009724:	42a5      	cmp	r5, r4
 8009726:	d003      	beq.n	8009730 <__mcmp+0x2c>
 8009728:	d305      	bcc.n	8009736 <__mcmp+0x32>
 800972a:	2201      	movs	r2, #1
 800972c:	4610      	mov	r0, r2
 800972e:	bd30      	pop	{r4, r5, pc}
 8009730:	4283      	cmp	r3, r0
 8009732:	d3f3      	bcc.n	800971c <__mcmp+0x18>
 8009734:	e7fa      	b.n	800972c <__mcmp+0x28>
 8009736:	f04f 32ff 	mov.w	r2, #4294967295
 800973a:	e7f7      	b.n	800972c <__mcmp+0x28>

0800973c <__mdiff>:
 800973c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009740:	460c      	mov	r4, r1
 8009742:	4606      	mov	r6, r0
 8009744:	4611      	mov	r1, r2
 8009746:	4620      	mov	r0, r4
 8009748:	4690      	mov	r8, r2
 800974a:	f7ff ffdb 	bl	8009704 <__mcmp>
 800974e:	1e05      	subs	r5, r0, #0
 8009750:	d110      	bne.n	8009774 <__mdiff+0x38>
 8009752:	4629      	mov	r1, r5
 8009754:	4630      	mov	r0, r6
 8009756:	f7ff fd53 	bl	8009200 <_Balloc>
 800975a:	b930      	cbnz	r0, 800976a <__mdiff+0x2e>
 800975c:	4b3a      	ldr	r3, [pc, #232]	; (8009848 <__mdiff+0x10c>)
 800975e:	4602      	mov	r2, r0
 8009760:	f240 2132 	movw	r1, #562	; 0x232
 8009764:	4839      	ldr	r0, [pc, #228]	; (800984c <__mdiff+0x110>)
 8009766:	f000 fa9d 	bl	8009ca4 <__assert_func>
 800976a:	2301      	movs	r3, #1
 800976c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009770:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009774:	bfa4      	itt	ge
 8009776:	4643      	movge	r3, r8
 8009778:	46a0      	movge	r8, r4
 800977a:	4630      	mov	r0, r6
 800977c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009780:	bfa6      	itte	ge
 8009782:	461c      	movge	r4, r3
 8009784:	2500      	movge	r5, #0
 8009786:	2501      	movlt	r5, #1
 8009788:	f7ff fd3a 	bl	8009200 <_Balloc>
 800978c:	b920      	cbnz	r0, 8009798 <__mdiff+0x5c>
 800978e:	4b2e      	ldr	r3, [pc, #184]	; (8009848 <__mdiff+0x10c>)
 8009790:	4602      	mov	r2, r0
 8009792:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009796:	e7e5      	b.n	8009764 <__mdiff+0x28>
 8009798:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800979c:	6926      	ldr	r6, [r4, #16]
 800979e:	60c5      	str	r5, [r0, #12]
 80097a0:	f104 0914 	add.w	r9, r4, #20
 80097a4:	f108 0514 	add.w	r5, r8, #20
 80097a8:	f100 0e14 	add.w	lr, r0, #20
 80097ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80097b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80097b4:	f108 0210 	add.w	r2, r8, #16
 80097b8:	46f2      	mov	sl, lr
 80097ba:	2100      	movs	r1, #0
 80097bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80097c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80097c4:	fa1f f883 	uxth.w	r8, r3
 80097c8:	fa11 f18b 	uxtah	r1, r1, fp
 80097cc:	0c1b      	lsrs	r3, r3, #16
 80097ce:	eba1 0808 	sub.w	r8, r1, r8
 80097d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80097d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80097da:	fa1f f888 	uxth.w	r8, r8
 80097de:	1419      	asrs	r1, r3, #16
 80097e0:	454e      	cmp	r6, r9
 80097e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80097e6:	f84a 3b04 	str.w	r3, [sl], #4
 80097ea:	d8e7      	bhi.n	80097bc <__mdiff+0x80>
 80097ec:	1b33      	subs	r3, r6, r4
 80097ee:	3b15      	subs	r3, #21
 80097f0:	f023 0303 	bic.w	r3, r3, #3
 80097f4:	3304      	adds	r3, #4
 80097f6:	3415      	adds	r4, #21
 80097f8:	42a6      	cmp	r6, r4
 80097fa:	bf38      	it	cc
 80097fc:	2304      	movcc	r3, #4
 80097fe:	441d      	add	r5, r3
 8009800:	4473      	add	r3, lr
 8009802:	469e      	mov	lr, r3
 8009804:	462e      	mov	r6, r5
 8009806:	4566      	cmp	r6, ip
 8009808:	d30e      	bcc.n	8009828 <__mdiff+0xec>
 800980a:	f10c 0203 	add.w	r2, ip, #3
 800980e:	1b52      	subs	r2, r2, r5
 8009810:	f022 0203 	bic.w	r2, r2, #3
 8009814:	3d03      	subs	r5, #3
 8009816:	45ac      	cmp	ip, r5
 8009818:	bf38      	it	cc
 800981a:	2200      	movcc	r2, #0
 800981c:	441a      	add	r2, r3
 800981e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009822:	b17b      	cbz	r3, 8009844 <__mdiff+0x108>
 8009824:	6107      	str	r7, [r0, #16]
 8009826:	e7a3      	b.n	8009770 <__mdiff+0x34>
 8009828:	f856 8b04 	ldr.w	r8, [r6], #4
 800982c:	fa11 f288 	uxtah	r2, r1, r8
 8009830:	1414      	asrs	r4, r2, #16
 8009832:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009836:	b292      	uxth	r2, r2
 8009838:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800983c:	f84e 2b04 	str.w	r2, [lr], #4
 8009840:	1421      	asrs	r1, r4, #16
 8009842:	e7e0      	b.n	8009806 <__mdiff+0xca>
 8009844:	3f01      	subs	r7, #1
 8009846:	e7ea      	b.n	800981e <__mdiff+0xe2>
 8009848:	0800a0ef 	.word	0x0800a0ef
 800984c:	0800a100 	.word	0x0800a100

08009850 <__d2b>:
 8009850:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009854:	4689      	mov	r9, r1
 8009856:	2101      	movs	r1, #1
 8009858:	ec57 6b10 	vmov	r6, r7, d0
 800985c:	4690      	mov	r8, r2
 800985e:	f7ff fccf 	bl	8009200 <_Balloc>
 8009862:	4604      	mov	r4, r0
 8009864:	b930      	cbnz	r0, 8009874 <__d2b+0x24>
 8009866:	4602      	mov	r2, r0
 8009868:	4b25      	ldr	r3, [pc, #148]	; (8009900 <__d2b+0xb0>)
 800986a:	4826      	ldr	r0, [pc, #152]	; (8009904 <__d2b+0xb4>)
 800986c:	f240 310a 	movw	r1, #778	; 0x30a
 8009870:	f000 fa18 	bl	8009ca4 <__assert_func>
 8009874:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009878:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800987c:	bb35      	cbnz	r5, 80098cc <__d2b+0x7c>
 800987e:	2e00      	cmp	r6, #0
 8009880:	9301      	str	r3, [sp, #4]
 8009882:	d028      	beq.n	80098d6 <__d2b+0x86>
 8009884:	4668      	mov	r0, sp
 8009886:	9600      	str	r6, [sp, #0]
 8009888:	f7ff fd82 	bl	8009390 <__lo0bits>
 800988c:	9900      	ldr	r1, [sp, #0]
 800988e:	b300      	cbz	r0, 80098d2 <__d2b+0x82>
 8009890:	9a01      	ldr	r2, [sp, #4]
 8009892:	f1c0 0320 	rsb	r3, r0, #32
 8009896:	fa02 f303 	lsl.w	r3, r2, r3
 800989a:	430b      	orrs	r3, r1
 800989c:	40c2      	lsrs	r2, r0
 800989e:	6163      	str	r3, [r4, #20]
 80098a0:	9201      	str	r2, [sp, #4]
 80098a2:	9b01      	ldr	r3, [sp, #4]
 80098a4:	61a3      	str	r3, [r4, #24]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	bf14      	ite	ne
 80098aa:	2202      	movne	r2, #2
 80098ac:	2201      	moveq	r2, #1
 80098ae:	6122      	str	r2, [r4, #16]
 80098b0:	b1d5      	cbz	r5, 80098e8 <__d2b+0x98>
 80098b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80098b6:	4405      	add	r5, r0
 80098b8:	f8c9 5000 	str.w	r5, [r9]
 80098bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80098c0:	f8c8 0000 	str.w	r0, [r8]
 80098c4:	4620      	mov	r0, r4
 80098c6:	b003      	add	sp, #12
 80098c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098d0:	e7d5      	b.n	800987e <__d2b+0x2e>
 80098d2:	6161      	str	r1, [r4, #20]
 80098d4:	e7e5      	b.n	80098a2 <__d2b+0x52>
 80098d6:	a801      	add	r0, sp, #4
 80098d8:	f7ff fd5a 	bl	8009390 <__lo0bits>
 80098dc:	9b01      	ldr	r3, [sp, #4]
 80098de:	6163      	str	r3, [r4, #20]
 80098e0:	2201      	movs	r2, #1
 80098e2:	6122      	str	r2, [r4, #16]
 80098e4:	3020      	adds	r0, #32
 80098e6:	e7e3      	b.n	80098b0 <__d2b+0x60>
 80098e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80098ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80098f0:	f8c9 0000 	str.w	r0, [r9]
 80098f4:	6918      	ldr	r0, [r3, #16]
 80098f6:	f7ff fd2b 	bl	8009350 <__hi0bits>
 80098fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80098fe:	e7df      	b.n	80098c0 <__d2b+0x70>
 8009900:	0800a0ef 	.word	0x0800a0ef
 8009904:	0800a100 	.word	0x0800a100

08009908 <_calloc_r>:
 8009908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800990a:	fba1 2402 	umull	r2, r4, r1, r2
 800990e:	b94c      	cbnz	r4, 8009924 <_calloc_r+0x1c>
 8009910:	4611      	mov	r1, r2
 8009912:	9201      	str	r2, [sp, #4]
 8009914:	f7fd fd9c 	bl	8007450 <_malloc_r>
 8009918:	9a01      	ldr	r2, [sp, #4]
 800991a:	4605      	mov	r5, r0
 800991c:	b930      	cbnz	r0, 800992c <_calloc_r+0x24>
 800991e:	4628      	mov	r0, r5
 8009920:	b003      	add	sp, #12
 8009922:	bd30      	pop	{r4, r5, pc}
 8009924:	220c      	movs	r2, #12
 8009926:	6002      	str	r2, [r0, #0]
 8009928:	2500      	movs	r5, #0
 800992a:	e7f8      	b.n	800991e <_calloc_r+0x16>
 800992c:	4621      	mov	r1, r4
 800992e:	f7fd fd66 	bl	80073fe <memset>
 8009932:	e7f4      	b.n	800991e <_calloc_r+0x16>

08009934 <_free_r>:
 8009934:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009936:	2900      	cmp	r1, #0
 8009938:	d044      	beq.n	80099c4 <_free_r+0x90>
 800993a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800993e:	9001      	str	r0, [sp, #4]
 8009940:	2b00      	cmp	r3, #0
 8009942:	f1a1 0404 	sub.w	r4, r1, #4
 8009946:	bfb8      	it	lt
 8009948:	18e4      	addlt	r4, r4, r3
 800994a:	f7ff fc4d 	bl	80091e8 <__malloc_lock>
 800994e:	4a1e      	ldr	r2, [pc, #120]	; (80099c8 <_free_r+0x94>)
 8009950:	9801      	ldr	r0, [sp, #4]
 8009952:	6813      	ldr	r3, [r2, #0]
 8009954:	b933      	cbnz	r3, 8009964 <_free_r+0x30>
 8009956:	6063      	str	r3, [r4, #4]
 8009958:	6014      	str	r4, [r2, #0]
 800995a:	b003      	add	sp, #12
 800995c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009960:	f7ff bc48 	b.w	80091f4 <__malloc_unlock>
 8009964:	42a3      	cmp	r3, r4
 8009966:	d908      	bls.n	800997a <_free_r+0x46>
 8009968:	6825      	ldr	r5, [r4, #0]
 800996a:	1961      	adds	r1, r4, r5
 800996c:	428b      	cmp	r3, r1
 800996e:	bf01      	itttt	eq
 8009970:	6819      	ldreq	r1, [r3, #0]
 8009972:	685b      	ldreq	r3, [r3, #4]
 8009974:	1949      	addeq	r1, r1, r5
 8009976:	6021      	streq	r1, [r4, #0]
 8009978:	e7ed      	b.n	8009956 <_free_r+0x22>
 800997a:	461a      	mov	r2, r3
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	b10b      	cbz	r3, 8009984 <_free_r+0x50>
 8009980:	42a3      	cmp	r3, r4
 8009982:	d9fa      	bls.n	800997a <_free_r+0x46>
 8009984:	6811      	ldr	r1, [r2, #0]
 8009986:	1855      	adds	r5, r2, r1
 8009988:	42a5      	cmp	r5, r4
 800998a:	d10b      	bne.n	80099a4 <_free_r+0x70>
 800998c:	6824      	ldr	r4, [r4, #0]
 800998e:	4421      	add	r1, r4
 8009990:	1854      	adds	r4, r2, r1
 8009992:	42a3      	cmp	r3, r4
 8009994:	6011      	str	r1, [r2, #0]
 8009996:	d1e0      	bne.n	800995a <_free_r+0x26>
 8009998:	681c      	ldr	r4, [r3, #0]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	6053      	str	r3, [r2, #4]
 800999e:	4421      	add	r1, r4
 80099a0:	6011      	str	r1, [r2, #0]
 80099a2:	e7da      	b.n	800995a <_free_r+0x26>
 80099a4:	d902      	bls.n	80099ac <_free_r+0x78>
 80099a6:	230c      	movs	r3, #12
 80099a8:	6003      	str	r3, [r0, #0]
 80099aa:	e7d6      	b.n	800995a <_free_r+0x26>
 80099ac:	6825      	ldr	r5, [r4, #0]
 80099ae:	1961      	adds	r1, r4, r5
 80099b0:	428b      	cmp	r3, r1
 80099b2:	bf04      	itt	eq
 80099b4:	6819      	ldreq	r1, [r3, #0]
 80099b6:	685b      	ldreq	r3, [r3, #4]
 80099b8:	6063      	str	r3, [r4, #4]
 80099ba:	bf04      	itt	eq
 80099bc:	1949      	addeq	r1, r1, r5
 80099be:	6021      	streq	r1, [r4, #0]
 80099c0:	6054      	str	r4, [r2, #4]
 80099c2:	e7ca      	b.n	800995a <_free_r+0x26>
 80099c4:	b003      	add	sp, #12
 80099c6:	bd30      	pop	{r4, r5, pc}
 80099c8:	20002484 	.word	0x20002484

080099cc <__sfputc_r>:
 80099cc:	6893      	ldr	r3, [r2, #8]
 80099ce:	3b01      	subs	r3, #1
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	b410      	push	{r4}
 80099d4:	6093      	str	r3, [r2, #8]
 80099d6:	da08      	bge.n	80099ea <__sfputc_r+0x1e>
 80099d8:	6994      	ldr	r4, [r2, #24]
 80099da:	42a3      	cmp	r3, r4
 80099dc:	db01      	blt.n	80099e2 <__sfputc_r+0x16>
 80099de:	290a      	cmp	r1, #10
 80099e0:	d103      	bne.n	80099ea <__sfputc_r+0x1e>
 80099e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099e6:	f7fe bb5d 	b.w	80080a4 <__swbuf_r>
 80099ea:	6813      	ldr	r3, [r2, #0]
 80099ec:	1c58      	adds	r0, r3, #1
 80099ee:	6010      	str	r0, [r2, #0]
 80099f0:	7019      	strb	r1, [r3, #0]
 80099f2:	4608      	mov	r0, r1
 80099f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099f8:	4770      	bx	lr

080099fa <__sfputs_r>:
 80099fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fc:	4606      	mov	r6, r0
 80099fe:	460f      	mov	r7, r1
 8009a00:	4614      	mov	r4, r2
 8009a02:	18d5      	adds	r5, r2, r3
 8009a04:	42ac      	cmp	r4, r5
 8009a06:	d101      	bne.n	8009a0c <__sfputs_r+0x12>
 8009a08:	2000      	movs	r0, #0
 8009a0a:	e007      	b.n	8009a1c <__sfputs_r+0x22>
 8009a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a10:	463a      	mov	r2, r7
 8009a12:	4630      	mov	r0, r6
 8009a14:	f7ff ffda 	bl	80099cc <__sfputc_r>
 8009a18:	1c43      	adds	r3, r0, #1
 8009a1a:	d1f3      	bne.n	8009a04 <__sfputs_r+0xa>
 8009a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a20 <_vfiprintf_r>:
 8009a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a24:	460d      	mov	r5, r1
 8009a26:	b09d      	sub	sp, #116	; 0x74
 8009a28:	4614      	mov	r4, r2
 8009a2a:	4698      	mov	r8, r3
 8009a2c:	4606      	mov	r6, r0
 8009a2e:	b118      	cbz	r0, 8009a38 <_vfiprintf_r+0x18>
 8009a30:	6983      	ldr	r3, [r0, #24]
 8009a32:	b90b      	cbnz	r3, 8009a38 <_vfiprintf_r+0x18>
 8009a34:	f7fd fc10 	bl	8007258 <__sinit>
 8009a38:	4b89      	ldr	r3, [pc, #548]	; (8009c60 <_vfiprintf_r+0x240>)
 8009a3a:	429d      	cmp	r5, r3
 8009a3c:	d11b      	bne.n	8009a76 <_vfiprintf_r+0x56>
 8009a3e:	6875      	ldr	r5, [r6, #4]
 8009a40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a42:	07d9      	lsls	r1, r3, #31
 8009a44:	d405      	bmi.n	8009a52 <_vfiprintf_r+0x32>
 8009a46:	89ab      	ldrh	r3, [r5, #12]
 8009a48:	059a      	lsls	r2, r3, #22
 8009a4a:	d402      	bmi.n	8009a52 <_vfiprintf_r+0x32>
 8009a4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a4e:	f7fd fcc6 	bl	80073de <__retarget_lock_acquire_recursive>
 8009a52:	89ab      	ldrh	r3, [r5, #12]
 8009a54:	071b      	lsls	r3, r3, #28
 8009a56:	d501      	bpl.n	8009a5c <_vfiprintf_r+0x3c>
 8009a58:	692b      	ldr	r3, [r5, #16]
 8009a5a:	b9eb      	cbnz	r3, 8009a98 <_vfiprintf_r+0x78>
 8009a5c:	4629      	mov	r1, r5
 8009a5e:	4630      	mov	r0, r6
 8009a60:	f7fe fb84 	bl	800816c <__swsetup_r>
 8009a64:	b1c0      	cbz	r0, 8009a98 <_vfiprintf_r+0x78>
 8009a66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a68:	07dc      	lsls	r4, r3, #31
 8009a6a:	d50e      	bpl.n	8009a8a <_vfiprintf_r+0x6a>
 8009a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a70:	b01d      	add	sp, #116	; 0x74
 8009a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a76:	4b7b      	ldr	r3, [pc, #492]	; (8009c64 <_vfiprintf_r+0x244>)
 8009a78:	429d      	cmp	r5, r3
 8009a7a:	d101      	bne.n	8009a80 <_vfiprintf_r+0x60>
 8009a7c:	68b5      	ldr	r5, [r6, #8]
 8009a7e:	e7df      	b.n	8009a40 <_vfiprintf_r+0x20>
 8009a80:	4b79      	ldr	r3, [pc, #484]	; (8009c68 <_vfiprintf_r+0x248>)
 8009a82:	429d      	cmp	r5, r3
 8009a84:	bf08      	it	eq
 8009a86:	68f5      	ldreq	r5, [r6, #12]
 8009a88:	e7da      	b.n	8009a40 <_vfiprintf_r+0x20>
 8009a8a:	89ab      	ldrh	r3, [r5, #12]
 8009a8c:	0598      	lsls	r0, r3, #22
 8009a8e:	d4ed      	bmi.n	8009a6c <_vfiprintf_r+0x4c>
 8009a90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a92:	f7fd fca5 	bl	80073e0 <__retarget_lock_release_recursive>
 8009a96:	e7e9      	b.n	8009a6c <_vfiprintf_r+0x4c>
 8009a98:	2300      	movs	r3, #0
 8009a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a9c:	2320      	movs	r3, #32
 8009a9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009aa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009aa6:	2330      	movs	r3, #48	; 0x30
 8009aa8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009c6c <_vfiprintf_r+0x24c>
 8009aac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ab0:	f04f 0901 	mov.w	r9, #1
 8009ab4:	4623      	mov	r3, r4
 8009ab6:	469a      	mov	sl, r3
 8009ab8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009abc:	b10a      	cbz	r2, 8009ac2 <_vfiprintf_r+0xa2>
 8009abe:	2a25      	cmp	r2, #37	; 0x25
 8009ac0:	d1f9      	bne.n	8009ab6 <_vfiprintf_r+0x96>
 8009ac2:	ebba 0b04 	subs.w	fp, sl, r4
 8009ac6:	d00b      	beq.n	8009ae0 <_vfiprintf_r+0xc0>
 8009ac8:	465b      	mov	r3, fp
 8009aca:	4622      	mov	r2, r4
 8009acc:	4629      	mov	r1, r5
 8009ace:	4630      	mov	r0, r6
 8009ad0:	f7ff ff93 	bl	80099fa <__sfputs_r>
 8009ad4:	3001      	adds	r0, #1
 8009ad6:	f000 80aa 	beq.w	8009c2e <_vfiprintf_r+0x20e>
 8009ada:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009adc:	445a      	add	r2, fp
 8009ade:	9209      	str	r2, [sp, #36]	; 0x24
 8009ae0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f000 80a2 	beq.w	8009c2e <_vfiprintf_r+0x20e>
 8009aea:	2300      	movs	r3, #0
 8009aec:	f04f 32ff 	mov.w	r2, #4294967295
 8009af0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009af4:	f10a 0a01 	add.w	sl, sl, #1
 8009af8:	9304      	str	r3, [sp, #16]
 8009afa:	9307      	str	r3, [sp, #28]
 8009afc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b00:	931a      	str	r3, [sp, #104]	; 0x68
 8009b02:	4654      	mov	r4, sl
 8009b04:	2205      	movs	r2, #5
 8009b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b0a:	4858      	ldr	r0, [pc, #352]	; (8009c6c <_vfiprintf_r+0x24c>)
 8009b0c:	f7f6 fb68 	bl	80001e0 <memchr>
 8009b10:	9a04      	ldr	r2, [sp, #16]
 8009b12:	b9d8      	cbnz	r0, 8009b4c <_vfiprintf_r+0x12c>
 8009b14:	06d1      	lsls	r1, r2, #27
 8009b16:	bf44      	itt	mi
 8009b18:	2320      	movmi	r3, #32
 8009b1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b1e:	0713      	lsls	r3, r2, #28
 8009b20:	bf44      	itt	mi
 8009b22:	232b      	movmi	r3, #43	; 0x2b
 8009b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b28:	f89a 3000 	ldrb.w	r3, [sl]
 8009b2c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b2e:	d015      	beq.n	8009b5c <_vfiprintf_r+0x13c>
 8009b30:	9a07      	ldr	r2, [sp, #28]
 8009b32:	4654      	mov	r4, sl
 8009b34:	2000      	movs	r0, #0
 8009b36:	f04f 0c0a 	mov.w	ip, #10
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b40:	3b30      	subs	r3, #48	; 0x30
 8009b42:	2b09      	cmp	r3, #9
 8009b44:	d94e      	bls.n	8009be4 <_vfiprintf_r+0x1c4>
 8009b46:	b1b0      	cbz	r0, 8009b76 <_vfiprintf_r+0x156>
 8009b48:	9207      	str	r2, [sp, #28]
 8009b4a:	e014      	b.n	8009b76 <_vfiprintf_r+0x156>
 8009b4c:	eba0 0308 	sub.w	r3, r0, r8
 8009b50:	fa09 f303 	lsl.w	r3, r9, r3
 8009b54:	4313      	orrs	r3, r2
 8009b56:	9304      	str	r3, [sp, #16]
 8009b58:	46a2      	mov	sl, r4
 8009b5a:	e7d2      	b.n	8009b02 <_vfiprintf_r+0xe2>
 8009b5c:	9b03      	ldr	r3, [sp, #12]
 8009b5e:	1d19      	adds	r1, r3, #4
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	9103      	str	r1, [sp, #12]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	bfbb      	ittet	lt
 8009b68:	425b      	neglt	r3, r3
 8009b6a:	f042 0202 	orrlt.w	r2, r2, #2
 8009b6e:	9307      	strge	r3, [sp, #28]
 8009b70:	9307      	strlt	r3, [sp, #28]
 8009b72:	bfb8      	it	lt
 8009b74:	9204      	strlt	r2, [sp, #16]
 8009b76:	7823      	ldrb	r3, [r4, #0]
 8009b78:	2b2e      	cmp	r3, #46	; 0x2e
 8009b7a:	d10c      	bne.n	8009b96 <_vfiprintf_r+0x176>
 8009b7c:	7863      	ldrb	r3, [r4, #1]
 8009b7e:	2b2a      	cmp	r3, #42	; 0x2a
 8009b80:	d135      	bne.n	8009bee <_vfiprintf_r+0x1ce>
 8009b82:	9b03      	ldr	r3, [sp, #12]
 8009b84:	1d1a      	adds	r2, r3, #4
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	9203      	str	r2, [sp, #12]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	bfb8      	it	lt
 8009b8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b92:	3402      	adds	r4, #2
 8009b94:	9305      	str	r3, [sp, #20]
 8009b96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c7c <_vfiprintf_r+0x25c>
 8009b9a:	7821      	ldrb	r1, [r4, #0]
 8009b9c:	2203      	movs	r2, #3
 8009b9e:	4650      	mov	r0, sl
 8009ba0:	f7f6 fb1e 	bl	80001e0 <memchr>
 8009ba4:	b140      	cbz	r0, 8009bb8 <_vfiprintf_r+0x198>
 8009ba6:	2340      	movs	r3, #64	; 0x40
 8009ba8:	eba0 000a 	sub.w	r0, r0, sl
 8009bac:	fa03 f000 	lsl.w	r0, r3, r0
 8009bb0:	9b04      	ldr	r3, [sp, #16]
 8009bb2:	4303      	orrs	r3, r0
 8009bb4:	3401      	adds	r4, #1
 8009bb6:	9304      	str	r3, [sp, #16]
 8009bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bbc:	482c      	ldr	r0, [pc, #176]	; (8009c70 <_vfiprintf_r+0x250>)
 8009bbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bc2:	2206      	movs	r2, #6
 8009bc4:	f7f6 fb0c 	bl	80001e0 <memchr>
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	d03f      	beq.n	8009c4c <_vfiprintf_r+0x22c>
 8009bcc:	4b29      	ldr	r3, [pc, #164]	; (8009c74 <_vfiprintf_r+0x254>)
 8009bce:	bb1b      	cbnz	r3, 8009c18 <_vfiprintf_r+0x1f8>
 8009bd0:	9b03      	ldr	r3, [sp, #12]
 8009bd2:	3307      	adds	r3, #7
 8009bd4:	f023 0307 	bic.w	r3, r3, #7
 8009bd8:	3308      	adds	r3, #8
 8009bda:	9303      	str	r3, [sp, #12]
 8009bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bde:	443b      	add	r3, r7
 8009be0:	9309      	str	r3, [sp, #36]	; 0x24
 8009be2:	e767      	b.n	8009ab4 <_vfiprintf_r+0x94>
 8009be4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009be8:	460c      	mov	r4, r1
 8009bea:	2001      	movs	r0, #1
 8009bec:	e7a5      	b.n	8009b3a <_vfiprintf_r+0x11a>
 8009bee:	2300      	movs	r3, #0
 8009bf0:	3401      	adds	r4, #1
 8009bf2:	9305      	str	r3, [sp, #20]
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	f04f 0c0a 	mov.w	ip, #10
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c00:	3a30      	subs	r2, #48	; 0x30
 8009c02:	2a09      	cmp	r2, #9
 8009c04:	d903      	bls.n	8009c0e <_vfiprintf_r+0x1ee>
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d0c5      	beq.n	8009b96 <_vfiprintf_r+0x176>
 8009c0a:	9105      	str	r1, [sp, #20]
 8009c0c:	e7c3      	b.n	8009b96 <_vfiprintf_r+0x176>
 8009c0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c12:	4604      	mov	r4, r0
 8009c14:	2301      	movs	r3, #1
 8009c16:	e7f0      	b.n	8009bfa <_vfiprintf_r+0x1da>
 8009c18:	ab03      	add	r3, sp, #12
 8009c1a:	9300      	str	r3, [sp, #0]
 8009c1c:	462a      	mov	r2, r5
 8009c1e:	4b16      	ldr	r3, [pc, #88]	; (8009c78 <_vfiprintf_r+0x258>)
 8009c20:	a904      	add	r1, sp, #16
 8009c22:	4630      	mov	r0, r6
 8009c24:	f7fd fd28 	bl	8007678 <_printf_float>
 8009c28:	4607      	mov	r7, r0
 8009c2a:	1c78      	adds	r0, r7, #1
 8009c2c:	d1d6      	bne.n	8009bdc <_vfiprintf_r+0x1bc>
 8009c2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c30:	07d9      	lsls	r1, r3, #31
 8009c32:	d405      	bmi.n	8009c40 <_vfiprintf_r+0x220>
 8009c34:	89ab      	ldrh	r3, [r5, #12]
 8009c36:	059a      	lsls	r2, r3, #22
 8009c38:	d402      	bmi.n	8009c40 <_vfiprintf_r+0x220>
 8009c3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c3c:	f7fd fbd0 	bl	80073e0 <__retarget_lock_release_recursive>
 8009c40:	89ab      	ldrh	r3, [r5, #12]
 8009c42:	065b      	lsls	r3, r3, #25
 8009c44:	f53f af12 	bmi.w	8009a6c <_vfiprintf_r+0x4c>
 8009c48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c4a:	e711      	b.n	8009a70 <_vfiprintf_r+0x50>
 8009c4c:	ab03      	add	r3, sp, #12
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	462a      	mov	r2, r5
 8009c52:	4b09      	ldr	r3, [pc, #36]	; (8009c78 <_vfiprintf_r+0x258>)
 8009c54:	a904      	add	r1, sp, #16
 8009c56:	4630      	mov	r0, r6
 8009c58:	f7fd ffb2 	bl	8007bc0 <_printf_i>
 8009c5c:	e7e4      	b.n	8009c28 <_vfiprintf_r+0x208>
 8009c5e:	bf00      	nop
 8009c60:	08009ff8 	.word	0x08009ff8
 8009c64:	0800a018 	.word	0x0800a018
 8009c68:	08009fd8 	.word	0x08009fd8
 8009c6c:	0800a25c 	.word	0x0800a25c
 8009c70:	0800a266 	.word	0x0800a266
 8009c74:	08007679 	.word	0x08007679
 8009c78:	080099fb 	.word	0x080099fb
 8009c7c:	0800a262 	.word	0x0800a262

08009c80 <_read_r>:
 8009c80:	b538      	push	{r3, r4, r5, lr}
 8009c82:	4d07      	ldr	r5, [pc, #28]	; (8009ca0 <_read_r+0x20>)
 8009c84:	4604      	mov	r4, r0
 8009c86:	4608      	mov	r0, r1
 8009c88:	4611      	mov	r1, r2
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	602a      	str	r2, [r5, #0]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	f7f7 fc4c 	bl	800152c <_read>
 8009c94:	1c43      	adds	r3, r0, #1
 8009c96:	d102      	bne.n	8009c9e <_read_r+0x1e>
 8009c98:	682b      	ldr	r3, [r5, #0]
 8009c9a:	b103      	cbz	r3, 8009c9e <_read_r+0x1e>
 8009c9c:	6023      	str	r3, [r4, #0]
 8009c9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ca0:	2000248c 	.word	0x2000248c

08009ca4 <__assert_func>:
 8009ca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ca6:	4614      	mov	r4, r2
 8009ca8:	461a      	mov	r2, r3
 8009caa:	4b09      	ldr	r3, [pc, #36]	; (8009cd0 <__assert_func+0x2c>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4605      	mov	r5, r0
 8009cb0:	68d8      	ldr	r0, [r3, #12]
 8009cb2:	b14c      	cbz	r4, 8009cc8 <__assert_func+0x24>
 8009cb4:	4b07      	ldr	r3, [pc, #28]	; (8009cd4 <__assert_func+0x30>)
 8009cb6:	9100      	str	r1, [sp, #0]
 8009cb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cbc:	4906      	ldr	r1, [pc, #24]	; (8009cd8 <__assert_func+0x34>)
 8009cbe:	462b      	mov	r3, r5
 8009cc0:	f000 f80e 	bl	8009ce0 <fiprintf>
 8009cc4:	f000 f85f 	bl	8009d86 <abort>
 8009cc8:	4b04      	ldr	r3, [pc, #16]	; (8009cdc <__assert_func+0x38>)
 8009cca:	461c      	mov	r4, r3
 8009ccc:	e7f3      	b.n	8009cb6 <__assert_func+0x12>
 8009cce:	bf00      	nop
 8009cd0:	20000014 	.word	0x20000014
 8009cd4:	0800a26d 	.word	0x0800a26d
 8009cd8:	0800a27a 	.word	0x0800a27a
 8009cdc:	0800a2a8 	.word	0x0800a2a8

08009ce0 <fiprintf>:
 8009ce0:	b40e      	push	{r1, r2, r3}
 8009ce2:	b503      	push	{r0, r1, lr}
 8009ce4:	4601      	mov	r1, r0
 8009ce6:	ab03      	add	r3, sp, #12
 8009ce8:	4805      	ldr	r0, [pc, #20]	; (8009d00 <fiprintf+0x20>)
 8009cea:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cee:	6800      	ldr	r0, [r0, #0]
 8009cf0:	9301      	str	r3, [sp, #4]
 8009cf2:	f7ff fe95 	bl	8009a20 <_vfiprintf_r>
 8009cf6:	b002      	add	sp, #8
 8009cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cfc:	b003      	add	sp, #12
 8009cfe:	4770      	bx	lr
 8009d00:	20000014 	.word	0x20000014

08009d04 <_fstat_r>:
 8009d04:	b538      	push	{r3, r4, r5, lr}
 8009d06:	4d07      	ldr	r5, [pc, #28]	; (8009d24 <_fstat_r+0x20>)
 8009d08:	2300      	movs	r3, #0
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	4608      	mov	r0, r1
 8009d0e:	4611      	mov	r1, r2
 8009d10:	602b      	str	r3, [r5, #0]
 8009d12:	f7f7 fc34 	bl	800157e <_fstat>
 8009d16:	1c43      	adds	r3, r0, #1
 8009d18:	d102      	bne.n	8009d20 <_fstat_r+0x1c>
 8009d1a:	682b      	ldr	r3, [r5, #0]
 8009d1c:	b103      	cbz	r3, 8009d20 <_fstat_r+0x1c>
 8009d1e:	6023      	str	r3, [r4, #0]
 8009d20:	bd38      	pop	{r3, r4, r5, pc}
 8009d22:	bf00      	nop
 8009d24:	2000248c 	.word	0x2000248c

08009d28 <_isatty_r>:
 8009d28:	b538      	push	{r3, r4, r5, lr}
 8009d2a:	4d06      	ldr	r5, [pc, #24]	; (8009d44 <_isatty_r+0x1c>)
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	4604      	mov	r4, r0
 8009d30:	4608      	mov	r0, r1
 8009d32:	602b      	str	r3, [r5, #0]
 8009d34:	f7f7 fc33 	bl	800159e <_isatty>
 8009d38:	1c43      	adds	r3, r0, #1
 8009d3a:	d102      	bne.n	8009d42 <_isatty_r+0x1a>
 8009d3c:	682b      	ldr	r3, [r5, #0]
 8009d3e:	b103      	cbz	r3, 8009d42 <_isatty_r+0x1a>
 8009d40:	6023      	str	r3, [r4, #0]
 8009d42:	bd38      	pop	{r3, r4, r5, pc}
 8009d44:	2000248c 	.word	0x2000248c

08009d48 <__ascii_mbtowc>:
 8009d48:	b082      	sub	sp, #8
 8009d4a:	b901      	cbnz	r1, 8009d4e <__ascii_mbtowc+0x6>
 8009d4c:	a901      	add	r1, sp, #4
 8009d4e:	b142      	cbz	r2, 8009d62 <__ascii_mbtowc+0x1a>
 8009d50:	b14b      	cbz	r3, 8009d66 <__ascii_mbtowc+0x1e>
 8009d52:	7813      	ldrb	r3, [r2, #0]
 8009d54:	600b      	str	r3, [r1, #0]
 8009d56:	7812      	ldrb	r2, [r2, #0]
 8009d58:	1e10      	subs	r0, r2, #0
 8009d5a:	bf18      	it	ne
 8009d5c:	2001      	movne	r0, #1
 8009d5e:	b002      	add	sp, #8
 8009d60:	4770      	bx	lr
 8009d62:	4610      	mov	r0, r2
 8009d64:	e7fb      	b.n	8009d5e <__ascii_mbtowc+0x16>
 8009d66:	f06f 0001 	mvn.w	r0, #1
 8009d6a:	e7f8      	b.n	8009d5e <__ascii_mbtowc+0x16>

08009d6c <__ascii_wctomb>:
 8009d6c:	b149      	cbz	r1, 8009d82 <__ascii_wctomb+0x16>
 8009d6e:	2aff      	cmp	r2, #255	; 0xff
 8009d70:	bf85      	ittet	hi
 8009d72:	238a      	movhi	r3, #138	; 0x8a
 8009d74:	6003      	strhi	r3, [r0, #0]
 8009d76:	700a      	strbls	r2, [r1, #0]
 8009d78:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d7c:	bf98      	it	ls
 8009d7e:	2001      	movls	r0, #1
 8009d80:	4770      	bx	lr
 8009d82:	4608      	mov	r0, r1
 8009d84:	4770      	bx	lr

08009d86 <abort>:
 8009d86:	b508      	push	{r3, lr}
 8009d88:	2006      	movs	r0, #6
 8009d8a:	f000 f82b 	bl	8009de4 <raise>
 8009d8e:	2001      	movs	r0, #1
 8009d90:	f7f7 fbc2 	bl	8001518 <_exit>

08009d94 <_raise_r>:
 8009d94:	291f      	cmp	r1, #31
 8009d96:	b538      	push	{r3, r4, r5, lr}
 8009d98:	4604      	mov	r4, r0
 8009d9a:	460d      	mov	r5, r1
 8009d9c:	d904      	bls.n	8009da8 <_raise_r+0x14>
 8009d9e:	2316      	movs	r3, #22
 8009da0:	6003      	str	r3, [r0, #0]
 8009da2:	f04f 30ff 	mov.w	r0, #4294967295
 8009da6:	bd38      	pop	{r3, r4, r5, pc}
 8009da8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009daa:	b112      	cbz	r2, 8009db2 <_raise_r+0x1e>
 8009dac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009db0:	b94b      	cbnz	r3, 8009dc6 <_raise_r+0x32>
 8009db2:	4620      	mov	r0, r4
 8009db4:	f000 f830 	bl	8009e18 <_getpid_r>
 8009db8:	462a      	mov	r2, r5
 8009dba:	4601      	mov	r1, r0
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dc2:	f000 b817 	b.w	8009df4 <_kill_r>
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d00a      	beq.n	8009de0 <_raise_r+0x4c>
 8009dca:	1c59      	adds	r1, r3, #1
 8009dcc:	d103      	bne.n	8009dd6 <_raise_r+0x42>
 8009dce:	2316      	movs	r3, #22
 8009dd0:	6003      	str	r3, [r0, #0]
 8009dd2:	2001      	movs	r0, #1
 8009dd4:	e7e7      	b.n	8009da6 <_raise_r+0x12>
 8009dd6:	2400      	movs	r4, #0
 8009dd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009ddc:	4628      	mov	r0, r5
 8009dde:	4798      	blx	r3
 8009de0:	2000      	movs	r0, #0
 8009de2:	e7e0      	b.n	8009da6 <_raise_r+0x12>

08009de4 <raise>:
 8009de4:	4b02      	ldr	r3, [pc, #8]	; (8009df0 <raise+0xc>)
 8009de6:	4601      	mov	r1, r0
 8009de8:	6818      	ldr	r0, [r3, #0]
 8009dea:	f7ff bfd3 	b.w	8009d94 <_raise_r>
 8009dee:	bf00      	nop
 8009df0:	20000014 	.word	0x20000014

08009df4 <_kill_r>:
 8009df4:	b538      	push	{r3, r4, r5, lr}
 8009df6:	4d07      	ldr	r5, [pc, #28]	; (8009e14 <_kill_r+0x20>)
 8009df8:	2300      	movs	r3, #0
 8009dfa:	4604      	mov	r4, r0
 8009dfc:	4608      	mov	r0, r1
 8009dfe:	4611      	mov	r1, r2
 8009e00:	602b      	str	r3, [r5, #0]
 8009e02:	f7f7 fb79 	bl	80014f8 <_kill>
 8009e06:	1c43      	adds	r3, r0, #1
 8009e08:	d102      	bne.n	8009e10 <_kill_r+0x1c>
 8009e0a:	682b      	ldr	r3, [r5, #0]
 8009e0c:	b103      	cbz	r3, 8009e10 <_kill_r+0x1c>
 8009e0e:	6023      	str	r3, [r4, #0]
 8009e10:	bd38      	pop	{r3, r4, r5, pc}
 8009e12:	bf00      	nop
 8009e14:	2000248c 	.word	0x2000248c

08009e18 <_getpid_r>:
 8009e18:	f7f7 bb66 	b.w	80014e8 <_getpid>

08009e1c <_init>:
 8009e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1e:	bf00      	nop
 8009e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e22:	bc08      	pop	{r3}
 8009e24:	469e      	mov	lr, r3
 8009e26:	4770      	bx	lr

08009e28 <_fini>:
 8009e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e2a:	bf00      	nop
 8009e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e2e:	bc08      	pop	{r3}
 8009e30:	469e      	mov	lr, r3
 8009e32:	4770      	bx	lr
