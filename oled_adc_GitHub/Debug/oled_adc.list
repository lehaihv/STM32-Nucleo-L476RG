
oled_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e08  0800645c  0800645c  0001645c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007264  08007264  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007264  08007264  00017264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800726c  0800726c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800726c  0800726c  0001726c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007270  08007270  00017270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  2000007c  080072f0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  080072f0  00020600  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001373f  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002622  00000000  00000000  000337eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  00035e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  00036ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289a5  00000000  00000000  00037e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001399d  00000000  00000000  0006081d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe640  00000000  00000000  000741ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001727fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a9c  00000000  00000000  0017284c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006444 	.word	0x08006444

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08006444 	.word	0x08006444

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 ffc2 	bl	8001510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f94c 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 fa84 	bl	8000a9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000594:	f000 fa52 	bl	8000a3c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000598:	f000 f998 	bl	80008cc <MX_ADC1_Init>
  MX_I2C1_Init();
 800059c:	f000 fa0e 	bl	80009bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init (); // initialize the diaply
 80005a0:	f000 faea 	bl	8000b78 <SSD1306_Init>
  SSD1306_GotoXY (8,0); // goto 10, 10
 80005a4:	2100      	movs	r1, #0
 80005a6:	2008      	movs	r0, #8
 80005a8:	f000 fc50 	bl	8000e4c <SSD1306_GotoXY>
  SSD1306_Puts ("Voltmeter", &Font_11x18, 1); // print Voltmeter_Back to Intel Nuc
 80005ac:	2201      	movs	r2, #1
 80005ae:	498f      	ldr	r1, [pc, #572]	; (80007ec <main+0x268>)
 80005b0:	488f      	ldr	r0, [pc, #572]	; (80007f0 <main+0x26c>)
 80005b2:	f000 fce1 	bl	8000f78 <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 80005b6:	f000 fba3 	bl	8000d00 <SSD1306_UpdateScreen>
  //HAL_Delay(3000);
  SSD1306_GotoXY (0,20);
 80005ba:	2114      	movs	r1, #20
 80005bc:	2000      	movs	r0, #0
 80005be:	f000 fc45 	bl	8000e4c <SSD1306_GotoXY>
  SSD1306_Puts ("Digit:  ", &Font_11x18, 1);
 80005c2:	2201      	movs	r2, #1
 80005c4:	4989      	ldr	r1, [pc, #548]	; (80007ec <main+0x268>)
 80005c6:	488b      	ldr	r0, [pc, #556]	; (80007f4 <main+0x270>)
 80005c8:	f000 fcd6 	bl	8000f78 <SSD1306_Puts>
  SSD1306_GotoXY (0,42);
 80005cc:	212a      	movs	r1, #42	; 0x2a
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fc3c 	bl	8000e4c <SSD1306_GotoXY>
  SSD1306_Puts ("Volts:  ", &Font_11x18, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	4985      	ldr	r1, [pc, #532]	; (80007ec <main+0x268>)
 80005d8:	4887      	ldr	r0, [pc, #540]	; (80007f8 <main+0x274>)
 80005da:	f000 fccd 	bl	8000f78 <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 80005de:	f000 fb8f 	bl	8000d00 <SSD1306_UpdateScreen>
  // Get ADC value
  HAL_ADC_Start(&hadc1);
 80005e2:	4886      	ldr	r0, [pc, #536]	; (80007fc <main+0x278>)
 80005e4:	f001 fb6e 	bl	8001cc4 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80005ec:	4883      	ldr	r0, [pc, #524]	; (80007fc <main+0x278>)
 80005ee:	f001 fc23 	bl	8001e38 <HAL_ADC_PollForConversion>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	value_adc = HAL_ADC_GetValue(&hadc1);
 80005f2:	4882      	ldr	r0, [pc, #520]	; (80007fc <main+0x278>)
 80005f4:	f001 fcf8 	bl	8001fe8 <HAL_ADC_GetValue>
 80005f8:	4603      	mov	r3, r0
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	4b80      	ldr	r3, [pc, #512]	; (8000800 <main+0x27c>)
 80005fe:	801a      	strh	r2, [r3, #0]
	SSD1306_GotoXY (70,20); // goto 10, 10
 8000600:	2114      	movs	r1, #20
 8000602:	2046      	movs	r0, #70	; 0x46
 8000604:	f000 fc22 	bl	8000e4c <SSD1306_GotoXY>
	SSD1306_Putc ((char)(value_adc/1000+48), &Font_11x18, 1);
 8000608:	4b7d      	ldr	r3, [pc, #500]	; (8000800 <main+0x27c>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	4a7d      	ldr	r2, [pc, #500]	; (8000804 <main+0x280>)
 800060e:	fba2 2303 	umull	r2, r3, r2, r3
 8000612:	099b      	lsrs	r3, r3, #6
 8000614:	b29b      	uxth	r3, r3
 8000616:	b2db      	uxtb	r3, r3
 8000618:	3330      	adds	r3, #48	; 0x30
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2201      	movs	r2, #1
 800061e:	4973      	ldr	r1, [pc, #460]	; (80007ec <main+0x268>)
 8000620:	4618      	mov	r0, r3
 8000622:	f000 fc29 	bl	8000e78 <SSD1306_Putc>
	SSD1306_Putc ((char)((value_adc%1000)/100+48), &Font_11x18, 1);
 8000626:	4b76      	ldr	r3, [pc, #472]	; (8000800 <main+0x27c>)
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	4a76      	ldr	r2, [pc, #472]	; (8000804 <main+0x280>)
 800062c:	fba2 1203 	umull	r1, r2, r2, r3
 8000630:	0992      	lsrs	r2, r2, #6
 8000632:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000636:	fb01 f202 	mul.w	r2, r1, r2
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	b29b      	uxth	r3, r3
 800063e:	4a72      	ldr	r2, [pc, #456]	; (8000808 <main+0x284>)
 8000640:	fba2 2303 	umull	r2, r3, r2, r3
 8000644:	095b      	lsrs	r3, r3, #5
 8000646:	b29b      	uxth	r3, r3
 8000648:	b2db      	uxtb	r3, r3
 800064a:	3330      	adds	r3, #48	; 0x30
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2201      	movs	r2, #1
 8000650:	4966      	ldr	r1, [pc, #408]	; (80007ec <main+0x268>)
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fc10 	bl	8000e78 <SSD1306_Putc>
	SSD1306_Putc ((char)((value_adc%100)/10+48), &Font_11x18, 1);
 8000658:	4b69      	ldr	r3, [pc, #420]	; (8000800 <main+0x27c>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	4a6a      	ldr	r2, [pc, #424]	; (8000808 <main+0x284>)
 800065e:	fba2 1203 	umull	r1, r2, r2, r3
 8000662:	0952      	lsrs	r2, r2, #5
 8000664:	2164      	movs	r1, #100	; 0x64
 8000666:	fb01 f202 	mul.w	r2, r1, r2
 800066a:	1a9b      	subs	r3, r3, r2
 800066c:	b29b      	uxth	r3, r3
 800066e:	4a67      	ldr	r2, [pc, #412]	; (800080c <main+0x288>)
 8000670:	fba2 2303 	umull	r2, r3, r2, r3
 8000674:	08db      	lsrs	r3, r3, #3
 8000676:	b29b      	uxth	r3, r3
 8000678:	b2db      	uxtb	r3, r3
 800067a:	3330      	adds	r3, #48	; 0x30
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2201      	movs	r2, #1
 8000680:	495a      	ldr	r1, [pc, #360]	; (80007ec <main+0x268>)
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fbf8 	bl	8000e78 <SSD1306_Putc>
	SSD1306_Putc ((char)(value_adc%10+48), &Font_11x18, 1);
 8000688:	4b5d      	ldr	r3, [pc, #372]	; (8000800 <main+0x27c>)
 800068a:	881a      	ldrh	r2, [r3, #0]
 800068c:	4b5f      	ldr	r3, [pc, #380]	; (800080c <main+0x288>)
 800068e:	fba3 1302 	umull	r1, r3, r3, r2
 8000692:	08d9      	lsrs	r1, r3, #3
 8000694:	460b      	mov	r3, r1
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	440b      	add	r3, r1
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	b29b      	uxth	r3, r3
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	3330      	adds	r3, #48	; 0x30
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	2201      	movs	r2, #1
 80006a8:	4950      	ldr	r1, [pc, #320]	; (80007ec <main+0x268>)
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fbe4 	bl	8000e78 <SSD1306_Putc>
    volts = value_adc*333/4096;
 80006b0:	4b53      	ldr	r3, [pc, #332]	; (8000800 <main+0x27c>)
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	461a      	mov	r2, r3
 80006b6:	f240 134d 	movw	r3, #333	; 0x14d
 80006ba:	fb02 f303 	mul.w	r3, r2, r3
 80006be:	2b00      	cmp	r3, #0
 80006c0:	da01      	bge.n	80006c6 <main+0x142>
 80006c2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80006c6:	131b      	asrs	r3, r3, #12
 80006c8:	ee07 3a90 	vmov	s15, r3
 80006cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006d0:	4b4f      	ldr	r3, [pc, #316]	; (8000810 <main+0x28c>)
 80006d2:	edc3 7a00 	vstr	s15, [r3]
    //volts = 222;
    SSD1306_GotoXY (70,42); // goto 10, 10
 80006d6:	212a      	movs	r1, #42	; 0x2a
 80006d8:	2046      	movs	r0, #70	; 0x46
 80006da:	f000 fbb7 	bl	8000e4c <SSD1306_GotoXY>
	SSD1306_Putc ((char)((int)(volts)/100+48), &Font_11x18, 1);
 80006de:	4b4c      	ldr	r3, [pc, #304]	; (8000810 <main+0x28c>)
 80006e0:	edd3 7a00 	vldr	s15, [r3]
 80006e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006e8:	ee17 1a90 	vmov	r1, s15
 80006ec:	4b46      	ldr	r3, [pc, #280]	; (8000808 <main+0x284>)
 80006ee:	fb83 2301 	smull	r2, r3, r3, r1
 80006f2:	115a      	asrs	r2, r3, #5
 80006f4:	17cb      	asrs	r3, r1, #31
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	3330      	adds	r3, #48	; 0x30
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2201      	movs	r2, #1
 8000700:	493a      	ldr	r1, [pc, #232]	; (80007ec <main+0x268>)
 8000702:	4618      	mov	r0, r3
 8000704:	f000 fbb8 	bl	8000e78 <SSD1306_Putc>
	SSD1306_Puts (".", &Font_11x18, 1);
 8000708:	2201      	movs	r2, #1
 800070a:	4938      	ldr	r1, [pc, #224]	; (80007ec <main+0x268>)
 800070c:	4841      	ldr	r0, [pc, #260]	; (8000814 <main+0x290>)
 800070e:	f000 fc33 	bl	8000f78 <SSD1306_Puts>
	SSD1306_Putc ((char)(((int)(volts)%100)/10+48), &Font_11x18, 1);
 8000712:	4b3f      	ldr	r3, [pc, #252]	; (8000810 <main+0x28c>)
 8000714:	edd3 7a00 	vldr	s15, [r3]
 8000718:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800071c:	ee17 2a90 	vmov	r2, s15
 8000720:	4b39      	ldr	r3, [pc, #228]	; (8000808 <main+0x284>)
 8000722:	fb83 1302 	smull	r1, r3, r3, r2
 8000726:	1159      	asrs	r1, r3, #5
 8000728:	17d3      	asrs	r3, r2, #31
 800072a:	1acb      	subs	r3, r1, r3
 800072c:	2164      	movs	r1, #100	; 0x64
 800072e:	fb01 f303 	mul.w	r3, r1, r3
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	4a38      	ldr	r2, [pc, #224]	; (8000818 <main+0x294>)
 8000736:	fb82 1203 	smull	r1, r2, r2, r3
 800073a:	1092      	asrs	r2, r2, #2
 800073c:	17db      	asrs	r3, r3, #31
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	b2db      	uxtb	r3, r3
 8000742:	3330      	adds	r3, #48	; 0x30
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2201      	movs	r2, #1
 8000748:	4928      	ldr	r1, [pc, #160]	; (80007ec <main+0x268>)
 800074a:	4618      	mov	r0, r3
 800074c:	f000 fb94 	bl	8000e78 <SSD1306_Putc>
	SSD1306_Putc ((char)((int)(volts)%10+48), &Font_11x18, 1);
 8000750:	4b2f      	ldr	r3, [pc, #188]	; (8000810 <main+0x28c>)
 8000752:	edd3 7a00 	vldr	s15, [r3]
 8000756:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800075a:	ee17 1a90 	vmov	r1, s15
 800075e:	4b2e      	ldr	r3, [pc, #184]	; (8000818 <main+0x294>)
 8000760:	fb83 2301 	smull	r2, r3, r3, r1
 8000764:	109a      	asrs	r2, r3, #2
 8000766:	17cb      	asrs	r3, r1, #31
 8000768:	1ad2      	subs	r2, r2, r3
 800076a:	4613      	mov	r3, r2
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	4413      	add	r3, r2
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	1aca      	subs	r2, r1, r3
 8000774:	b2d3      	uxtb	r3, r2
 8000776:	3330      	adds	r3, #48	; 0x30
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2201      	movs	r2, #1
 800077c:	491b      	ldr	r1, [pc, #108]	; (80007ec <main+0x268>)
 800077e:	4618      	mov	r0, r3
 8000780:	f000 fb7a 	bl	8000e78 <SSD1306_Putc>
	SSD1306_UpdateScreen(); // update screen
 8000784:	f000 fabc 	bl	8000d00 <SSD1306_UpdateScreen>
    //Convert to string and print
    sprintf(msg,"%hu\r\n",value_adc);
 8000788:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <main+0x27c>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	4923      	ldr	r1, [pc, #140]	; (800081c <main+0x298>)
 8000790:	4823      	ldr	r0, [pc, #140]	; (8000820 <main+0x29c>)
 8000792:	f005 f9e9 	bl	8005b68 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000796:	4822      	ldr	r0, [pc, #136]	; (8000820 <main+0x29c>)
 8000798:	f7ff fd1a 	bl	80001d0 <strlen>
 800079c:	4603      	mov	r3, r0
 800079e:	b29a      	uxth	r2, r3
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007a4:	491e      	ldr	r1, [pc, #120]	; (8000820 <main+0x29c>)
 80007a6:	481f      	ldr	r0, [pc, #124]	; (8000824 <main+0x2a0>)
 80007a8:	f004 fcb0 	bl	800510c <HAL_UART_Transmit>
	HAL_Delay(100);
 80007ac:	2064      	movs	r0, #100	; 0x64
 80007ae:	f000 ff2b 	bl	8001608 <HAL_Delay>
	sprintf(msg,"%hu\r\n", (uint16_t )volts);
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <main+0x28c>)
 80007b4:	edd3 7a00 	vldr	s15, [r3]
 80007b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007bc:	ee17 3a90 	vmov	r3, s15
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	461a      	mov	r2, r3
 80007c4:	4915      	ldr	r1, [pc, #84]	; (800081c <main+0x298>)
 80007c6:	4816      	ldr	r0, [pc, #88]	; (8000820 <main+0x29c>)
 80007c8:	f005 f9ce 	bl	8005b68 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80007cc:	4814      	ldr	r0, [pc, #80]	; (8000820 <main+0x29c>)
 80007ce:	f7ff fcff 	bl	80001d0 <strlen>
 80007d2:	4603      	mov	r3, r0
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007da:	4911      	ldr	r1, [pc, #68]	; (8000820 <main+0x29c>)
 80007dc:	4811      	ldr	r0, [pc, #68]	; (8000824 <main+0x2a0>)
 80007de:	f004 fc95 	bl	800510c <HAL_UART_Transmit>
	HAL_Delay(100);
 80007e2:	2064      	movs	r0, #100	; 0x64
 80007e4:	f000 ff10 	bl	8001608 <HAL_Delay>
	value_adc = HAL_ADC_GetValue(&hadc1);
 80007e8:	e703      	b.n	80005f2 <main+0x6e>
 80007ea:	bf00      	nop
 80007ec:	20000000 	.word	0x20000000
 80007f0:	0800645c 	.word	0x0800645c
 80007f4:	08006468 	.word	0x08006468
 80007f8:	08006474 	.word	0x08006474
 80007fc:	20000098 	.word	0x20000098
 8000800:	20000008 	.word	0x20000008
 8000804:	10624dd3 	.word	0x10624dd3
 8000808:	51eb851f 	.word	0x51eb851f
 800080c:	cccccccd 	.word	0xcccccccd
 8000810:	200001d4 	.word	0x200001d4
 8000814:	08006480 	.word	0x08006480
 8000818:	66666667 	.word	0x66666667
 800081c:	08006484 	.word	0x08006484
 8000820:	200001d8 	.word	0x200001d8
 8000824:	20000150 	.word	0x20000150

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b096      	sub	sp, #88	; 0x58
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	2244      	movs	r2, #68	; 0x44
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f005 f98e 	bl	8005b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	463b      	mov	r3, r7
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800084a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800084e:	f003 f8fd 	bl	8003a4c <HAL_PWREx_ControlVoltageScaling>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000858:	f000 f986 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085c:	2302      	movs	r3, #2
 800085e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000860:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000864:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000866:	2310      	movs	r3, #16
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086a:	2302      	movs	r3, #2
 800086c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800086e:	2302      	movs	r3, #2
 8000870:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000872:	2301      	movs	r3, #1
 8000874:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000876:	230a      	movs	r3, #10
 8000878:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800087a:	2307      	movs	r3, #7
 800087c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800087e:	2302      	movs	r3, #2
 8000880:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000882:	2302      	movs	r3, #2
 8000884:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4618      	mov	r0, r3
 800088c:	f003 f934 	bl	8003af8 <HAL_RCC_OscConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000896:	f000 f967 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089a:	230f      	movs	r3, #15
 800089c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089e:	2303      	movs	r3, #3
 80008a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008ae:	463b      	mov	r3, r7
 80008b0:	2104      	movs	r1, #4
 80008b2:	4618      	mov	r0, r3
 80008b4:	f003 fcfc 	bl	80042b0 <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008be:	f000 f953 	bl	8000b68 <Error_Handler>
  }
}
 80008c2:	bf00      	nop
 80008c4:	3758      	adds	r7, #88	; 0x58
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
 80008ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008ee:	4b30      	ldr	r3, [pc, #192]	; (80009b0 <MX_ADC1_Init+0xe4>)
 80008f0:	4a30      	ldr	r2, [pc, #192]	; (80009b4 <MX_ADC1_Init+0xe8>)
 80008f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008f4:	4b2e      	ldr	r3, [pc, #184]	; (80009b0 <MX_ADC1_Init+0xe4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008fa:	4b2d      	ldr	r3, [pc, #180]	; (80009b0 <MX_ADC1_Init+0xe4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000900:	4b2b      	ldr	r3, [pc, #172]	; (80009b0 <MX_ADC1_Init+0xe4>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000906:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <MX_ADC1_Init+0xe4>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800090c:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <MX_ADC1_Init+0xe4>)
 800090e:	2208      	movs	r2, #8
 8000910:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000912:	4b27      	ldr	r3, [pc, #156]	; (80009b0 <MX_ADC1_Init+0xe4>)
 8000914:	2200      	movs	r2, #0
 8000916:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000918:	4b25      	ldr	r3, [pc, #148]	; (80009b0 <MX_ADC1_Init+0xe4>)
 800091a:	2201      	movs	r2, #1
 800091c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800091e:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <MX_ADC1_Init+0xe4>)
 8000920:	2201      	movs	r2, #1
 8000922:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000924:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <MX_ADC1_Init+0xe4>)
 8000926:	2200      	movs	r2, #0
 8000928:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800092c:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <MX_ADC1_Init+0xe4>)
 800092e:	2200      	movs	r2, #0
 8000930:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000932:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <MX_ADC1_Init+0xe4>)
 8000934:	2200      	movs	r2, #0
 8000936:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000938:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <MX_ADC1_Init+0xe4>)
 800093a:	2200      	movs	r2, #0
 800093c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <MX_ADC1_Init+0xe4>)
 8000942:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000946:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000948:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <MX_ADC1_Init+0xe4>)
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000950:	4817      	ldr	r0, [pc, #92]	; (80009b0 <MX_ADC1_Init+0xe4>)
 8000952:	f001 f861 	bl	8001a18 <HAL_ADC_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800095c:	f000 f904 	bl	8000b68 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	4811      	ldr	r0, [pc, #68]	; (80009b0 <MX_ADC1_Init+0xe4>)
 800096c:	f001 ffe6 	bl	800293c <HAL_ADCEx_MultiModeConfigChannel>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000976:	f000 f8f7 	bl	8000b68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_ADC1_Init+0xec>)
 800097c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800097e:	2306      	movs	r3, #6
 8000980:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000986:	237f      	movs	r3, #127	; 0x7f
 8000988:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800098a:	2304      	movs	r3, #4
 800098c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	4619      	mov	r1, r3
 8000996:	4806      	ldr	r0, [pc, #24]	; (80009b0 <MX_ADC1_Init+0xe4>)
 8000998:	f001 fb34 	bl	8002004 <HAL_ADC_ConfigChannel>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80009a2:	f000 f8e1 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	3728      	adds	r7, #40	; 0x28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000098 	.word	0x20000098
 80009b4:	50040000 	.word	0x50040000
 80009b8:	04300002 	.word	0x04300002

080009bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <MX_I2C1_Init+0x74>)
 80009c2:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <MX_I2C1_Init+0x78>)
 80009c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 80009c6:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_I2C1_Init+0x74>)
 80009c8:	4a1b      	ldr	r2, [pc, #108]	; (8000a38 <MX_I2C1_Init+0x7c>)
 80009ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009cc:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <MX_I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_I2C1_Init+0x74>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <MX_I2C1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_I2C1_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_I2C1_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_I2C1_Init+0x74>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_I2C1_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009f6:	480e      	ldr	r0, [pc, #56]	; (8000a30 <MX_I2C1_Init+0x74>)
 80009f8:	f002 faf8 	bl	8002fec <HAL_I2C_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a02:	f000 f8b1 	bl	8000b68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a06:	2100      	movs	r1, #0
 8000a08:	4809      	ldr	r0, [pc, #36]	; (8000a30 <MX_I2C1_Init+0x74>)
 8000a0a:	f002 ff79 	bl	8003900 <HAL_I2CEx_ConfigAnalogFilter>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a14:	f000 f8a8 	bl	8000b68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_I2C1_Init+0x74>)
 8000a1c:	f002 ffbb 	bl	8003996 <HAL_I2CEx_ConfigDigitalFilter>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a26:	f000 f89f 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200000fc 	.word	0x200000fc
 8000a34:	40005400 	.word	0x40005400
 8000a38:	00702991 	.word	0x00702991

08000a3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a42:	4a15      	ldr	r2, [pc, #84]	; (8000a98 <MX_USART2_UART_Init+0x5c>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a80:	f004 faf6 	bl	8005070 <HAL_UART_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a8a:	f000 f86d 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000150 	.word	0x20000150
 8000a98:	40004400 	.word	0x40004400

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	4b2b      	ldr	r3, [pc, #172]	; (8000b60 <MX_GPIO_Init+0xc4>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	4a2a      	ldr	r2, [pc, #168]	; (8000b60 <MX_GPIO_Init+0xc4>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abe:	4b28      	ldr	r3, [pc, #160]	; (8000b60 <MX_GPIO_Init+0xc4>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	f003 0304 	and.w	r3, r3, #4
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aca:	4b25      	ldr	r3, [pc, #148]	; (8000b60 <MX_GPIO_Init+0xc4>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a24      	ldr	r2, [pc, #144]	; (8000b60 <MX_GPIO_Init+0xc4>)
 8000ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <MX_GPIO_Init+0xc4>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <MX_GPIO_Init+0xc4>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a1e      	ldr	r2, [pc, #120]	; (8000b60 <MX_GPIO_Init+0xc4>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <MX_GPIO_Init+0xc4>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <MX_GPIO_Init+0xc4>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	4a18      	ldr	r2, [pc, #96]	; (8000b60 <MX_GPIO_Init+0xc4>)
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b06:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <MX_GPIO_Init+0xc4>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2120      	movs	r1, #32
 8000b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1a:	f002 fa4f 	bl	8002fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b24:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	480b      	ldr	r0, [pc, #44]	; (8000b64 <MX_GPIO_Init+0xc8>)
 8000b36:	f002 f897 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b3a:	2320      	movs	r3, #32
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b54:	f002 f888 	bl	8002c68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b58:	bf00      	nop
 8000b5a:	3728      	adds	r7, #40	; 0x28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40021000 	.word	0x40021000
 8000b64:	48000800 	.word	0x48000800

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000b7e:	f000 fa21 	bl	8000fc4 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000b82:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000b86:	2201      	movs	r2, #1
 8000b88:	2178      	movs	r1, #120	; 0x78
 8000b8a:	485b      	ldr	r0, [pc, #364]	; (8000cf8 <SSD1306_Init+0x180>)
 8000b8c:	f002 fbb2 	bl	80032f4 <HAL_I2C_IsDeviceReady>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	e0a9      	b.n	8000cee <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000b9a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000b9e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ba0:	e002      	b.n	8000ba8 <SSD1306_Init+0x30>
		p--;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d1f9      	bne.n	8000ba2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000bae:	22ae      	movs	r2, #174	; 0xae
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2078      	movs	r0, #120	; 0x78
 8000bb4:	f000 fa82 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000bb8:	2220      	movs	r2, #32
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2078      	movs	r0, #120	; 0x78
 8000bbe:	f000 fa7d 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000bc2:	2210      	movs	r2, #16
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2078      	movs	r0, #120	; 0x78
 8000bc8:	f000 fa78 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000bcc:	22b0      	movs	r2, #176	; 0xb0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2078      	movs	r0, #120	; 0x78
 8000bd2:	f000 fa73 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000bd6:	22c8      	movs	r2, #200	; 0xc8
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2078      	movs	r0, #120	; 0x78
 8000bdc:	f000 fa6e 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000be0:	2200      	movs	r2, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	2078      	movs	r0, #120	; 0x78
 8000be6:	f000 fa69 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000bea:	2210      	movs	r2, #16
 8000bec:	2100      	movs	r1, #0
 8000bee:	2078      	movs	r0, #120	; 0x78
 8000bf0:	f000 fa64 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000bf4:	2240      	movs	r2, #64	; 0x40
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2078      	movs	r0, #120	; 0x78
 8000bfa:	f000 fa5f 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000bfe:	2281      	movs	r2, #129	; 0x81
 8000c00:	2100      	movs	r1, #0
 8000c02:	2078      	movs	r0, #120	; 0x78
 8000c04:	f000 fa5a 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000c08:	22ff      	movs	r2, #255	; 0xff
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2078      	movs	r0, #120	; 0x78
 8000c0e:	f000 fa55 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000c12:	22a1      	movs	r2, #161	; 0xa1
 8000c14:	2100      	movs	r1, #0
 8000c16:	2078      	movs	r0, #120	; 0x78
 8000c18:	f000 fa50 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000c1c:	22a6      	movs	r2, #166	; 0xa6
 8000c1e:	2100      	movs	r1, #0
 8000c20:	2078      	movs	r0, #120	; 0x78
 8000c22:	f000 fa4b 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000c26:	22a8      	movs	r2, #168	; 0xa8
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2078      	movs	r0, #120	; 0x78
 8000c2c:	f000 fa46 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000c30:	223f      	movs	r2, #63	; 0x3f
 8000c32:	2100      	movs	r1, #0
 8000c34:	2078      	movs	r0, #120	; 0x78
 8000c36:	f000 fa41 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c3a:	22a4      	movs	r2, #164	; 0xa4
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2078      	movs	r0, #120	; 0x78
 8000c40:	f000 fa3c 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000c44:	22d3      	movs	r2, #211	; 0xd3
 8000c46:	2100      	movs	r1, #0
 8000c48:	2078      	movs	r0, #120	; 0x78
 8000c4a:	f000 fa37 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	2078      	movs	r0, #120	; 0x78
 8000c54:	f000 fa32 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000c58:	22d5      	movs	r2, #213	; 0xd5
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2078      	movs	r0, #120	; 0x78
 8000c5e:	f000 fa2d 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000c62:	22f0      	movs	r2, #240	; 0xf0
 8000c64:	2100      	movs	r1, #0
 8000c66:	2078      	movs	r0, #120	; 0x78
 8000c68:	f000 fa28 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000c6c:	22d9      	movs	r2, #217	; 0xd9
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2078      	movs	r0, #120	; 0x78
 8000c72:	f000 fa23 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000c76:	2222      	movs	r2, #34	; 0x22
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2078      	movs	r0, #120	; 0x78
 8000c7c:	f000 fa1e 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000c80:	22da      	movs	r2, #218	; 0xda
 8000c82:	2100      	movs	r1, #0
 8000c84:	2078      	movs	r0, #120	; 0x78
 8000c86:	f000 fa19 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000c8a:	2212      	movs	r2, #18
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2078      	movs	r0, #120	; 0x78
 8000c90:	f000 fa14 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000c94:	22db      	movs	r2, #219	; 0xdb
 8000c96:	2100      	movs	r1, #0
 8000c98:	2078      	movs	r0, #120	; 0x78
 8000c9a:	f000 fa0f 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000c9e:	2220      	movs	r2, #32
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2078      	movs	r0, #120	; 0x78
 8000ca4:	f000 fa0a 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000ca8:	228d      	movs	r2, #141	; 0x8d
 8000caa:	2100      	movs	r1, #0
 8000cac:	2078      	movs	r0, #120	; 0x78
 8000cae:	f000 fa05 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000cb2:	2214      	movs	r2, #20
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2078      	movs	r0, #120	; 0x78
 8000cb8:	f000 fa00 	bl	80010bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000cbc:	22af      	movs	r2, #175	; 0xaf
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2078      	movs	r0, #120	; 0x78
 8000cc2:	f000 f9fb 	bl	80010bc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000cc6:	222e      	movs	r2, #46	; 0x2e
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2078      	movs	r0, #120	; 0x78
 8000ccc:	f000 f9f6 	bl	80010bc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f000 f843 	bl	8000d5c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000cd6:	f000 f813 	bl	8000d00 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <SSD1306_Init+0x184>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <SSD1306_Init+0x184>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <SSD1306_Init+0x184>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000cec:	2301      	movs	r3, #1
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200000fc 	.word	0x200000fc
 8000cfc:	200005e0 	.word	0x200005e0

08000d00 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000d06:	2300      	movs	r3, #0
 8000d08:	71fb      	strb	r3, [r7, #7]
 8000d0a:	e01d      	b.n	8000d48 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	3b50      	subs	r3, #80	; 0x50
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	461a      	mov	r2, r3
 8000d14:	2100      	movs	r1, #0
 8000d16:	2078      	movs	r0, #120	; 0x78
 8000d18:	f000 f9d0 	bl	80010bc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2078      	movs	r0, #120	; 0x78
 8000d22:	f000 f9cb 	bl	80010bc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000d26:	2210      	movs	r2, #16
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2078      	movs	r0, #120	; 0x78
 8000d2c:	f000 f9c6 	bl	80010bc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	01db      	lsls	r3, r3, #7
 8000d34:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <SSD1306_UpdateScreen+0x58>)
 8000d36:	441a      	add	r2, r3
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	2140      	movs	r1, #64	; 0x40
 8000d3c:	2078      	movs	r0, #120	; 0x78
 8000d3e:	f000 f957 	bl	8000ff0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	3301      	adds	r3, #1
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	2b07      	cmp	r3, #7
 8000d4c:	d9de      	bls.n	8000d0c <SSD1306_UpdateScreen+0xc>
	}
}
 8000d4e:	bf00      	nop
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	200001e0 	.word	0x200001e0

08000d5c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d101      	bne.n	8000d70 <SSD1306_Fill+0x14>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	e000      	b.n	8000d72 <SSD1306_Fill+0x16>
 8000d70:	23ff      	movs	r3, #255	; 0xff
 8000d72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d76:	4619      	mov	r1, r3
 8000d78:	4803      	ldr	r0, [pc, #12]	; (8000d88 <SSD1306_Fill+0x2c>)
 8000d7a:	f004 feed 	bl	8005b58 <memset>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200001e0 	.word	0x200001e0

08000d8c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
 8000d96:	460b      	mov	r3, r1
 8000d98:	80bb      	strh	r3, [r7, #4]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	70fb      	strb	r3, [r7, #3]
	if (
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
 8000da0:	2b7f      	cmp	r3, #127	; 0x7f
 8000da2:	d848      	bhi.n	8000e36 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000da4:	88bb      	ldrh	r3, [r7, #4]
 8000da6:	2b3f      	cmp	r3, #63	; 0x3f
 8000da8:	d845      	bhi.n	8000e36 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000daa:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <SSD1306_DrawPixel+0xb8>)
 8000dac:	791b      	ldrb	r3, [r3, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d006      	beq.n	8000dc0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000db2:	78fb      	ldrb	r3, [r7, #3]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	bf0c      	ite	eq
 8000db8:	2301      	moveq	r3, #1
 8000dba:	2300      	movne	r3, #0
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000dc0:	78fb      	ldrb	r3, [r7, #3]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d11a      	bne.n	8000dfc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000dc6:	88fa      	ldrh	r2, [r7, #6]
 8000dc8:	88bb      	ldrh	r3, [r7, #4]
 8000dca:	08db      	lsrs	r3, r3, #3
 8000dcc:	b298      	uxth	r0, r3
 8000dce:	4603      	mov	r3, r0
 8000dd0:	01db      	lsls	r3, r3, #7
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a1c      	ldr	r2, [pc, #112]	; (8000e48 <SSD1306_DrawPixel+0xbc>)
 8000dd6:	5cd3      	ldrb	r3, [r2, r3]
 8000dd8:	b25a      	sxtb	r2, r3
 8000dda:	88bb      	ldrh	r3, [r7, #4]
 8000ddc:	f003 0307 	and.w	r3, r3, #7
 8000de0:	2101      	movs	r1, #1
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	b25b      	sxtb	r3, r3
 8000de8:	4313      	orrs	r3, r2
 8000dea:	b259      	sxtb	r1, r3
 8000dec:	88fa      	ldrh	r2, [r7, #6]
 8000dee:	4603      	mov	r3, r0
 8000df0:	01db      	lsls	r3, r3, #7
 8000df2:	4413      	add	r3, r2
 8000df4:	b2c9      	uxtb	r1, r1
 8000df6:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <SSD1306_DrawPixel+0xbc>)
 8000df8:	54d1      	strb	r1, [r2, r3]
 8000dfa:	e01d      	b.n	8000e38 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000dfc:	88fa      	ldrh	r2, [r7, #6]
 8000dfe:	88bb      	ldrh	r3, [r7, #4]
 8000e00:	08db      	lsrs	r3, r3, #3
 8000e02:	b298      	uxth	r0, r3
 8000e04:	4603      	mov	r3, r0
 8000e06:	01db      	lsls	r3, r3, #7
 8000e08:	4413      	add	r3, r2
 8000e0a:	4a0f      	ldr	r2, [pc, #60]	; (8000e48 <SSD1306_DrawPixel+0xbc>)
 8000e0c:	5cd3      	ldrb	r3, [r2, r3]
 8000e0e:	b25a      	sxtb	r2, r3
 8000e10:	88bb      	ldrh	r3, [r7, #4]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	2101      	movs	r1, #1
 8000e18:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	b25b      	sxtb	r3, r3
 8000e22:	4013      	ands	r3, r2
 8000e24:	b259      	sxtb	r1, r3
 8000e26:	88fa      	ldrh	r2, [r7, #6]
 8000e28:	4603      	mov	r3, r0
 8000e2a:	01db      	lsls	r3, r3, #7
 8000e2c:	4413      	add	r3, r2
 8000e2e:	b2c9      	uxtb	r1, r1
 8000e30:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <SSD1306_DrawPixel+0xbc>)
 8000e32:	54d1      	strb	r1, [r2, r3]
 8000e34:	e000      	b.n	8000e38 <SSD1306_DrawPixel+0xac>
		return;
 8000e36:	bf00      	nop
	}
}
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	200005e0 	.word	0x200005e0
 8000e48:	200001e0 	.word	0x200001e0

08000e4c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	460a      	mov	r2, r1
 8000e56:	80fb      	strh	r3, [r7, #6]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000e5c:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <SSD1306_GotoXY+0x28>)
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000e62:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <SSD1306_GotoXY+0x28>)
 8000e64:	88bb      	ldrh	r3, [r7, #4]
 8000e66:	8053      	strh	r3, [r2, #2]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	200005e0 	.word	0x200005e0

08000e78 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	4613      	mov	r3, r2
 8000e86:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000e88:	4b3a      	ldr	r3, [pc, #232]	; (8000f74 <SSD1306_Putc+0xfc>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
	if (
 8000e94:	2b7f      	cmp	r3, #127	; 0x7f
 8000e96:	dc07      	bgt.n	8000ea8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000e98:	4b36      	ldr	r3, [pc, #216]	; (8000f74 <SSD1306_Putc+0xfc>)
 8000e9a:	885b      	ldrh	r3, [r3, #2]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	785b      	ldrb	r3, [r3, #1]
 8000ea2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000ea4:	2b3f      	cmp	r3, #63	; 0x3f
 8000ea6:	dd01      	ble.n	8000eac <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	e05e      	b.n	8000f6a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	e04b      	b.n	8000f4a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	3b20      	subs	r3, #32
 8000eba:	6839      	ldr	r1, [r7, #0]
 8000ebc:	7849      	ldrb	r1, [r1, #1]
 8000ebe:	fb01 f303 	mul.w	r3, r1, r3
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	440b      	add	r3, r1
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	4413      	add	r3, r2
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	e030      	b.n	8000f38 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d010      	beq.n	8000f08 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000ee6:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <SSD1306_Putc+0xfc>)
 8000ee8:	881a      	ldrh	r2, [r3, #0]
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	4413      	add	r3, r2
 8000ef0:	b298      	uxth	r0, r3
 8000ef2:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <SSD1306_Putc+0xfc>)
 8000ef4:	885a      	ldrh	r2, [r3, #2]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	4413      	add	r3, r2
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	79ba      	ldrb	r2, [r7, #6]
 8000f00:	4619      	mov	r1, r3
 8000f02:	f7ff ff43 	bl	8000d8c <SSD1306_DrawPixel>
 8000f06:	e014      	b.n	8000f32 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000f08:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <SSD1306_Putc+0xfc>)
 8000f0a:	881a      	ldrh	r2, [r3, #0]
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	4413      	add	r3, r2
 8000f12:	b298      	uxth	r0, r3
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <SSD1306_Putc+0xfc>)
 8000f16:	885a      	ldrh	r2, [r3, #2]
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	4413      	add	r3, r2
 8000f1e:	b299      	uxth	r1, r3
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	bf0c      	ite	eq
 8000f26:	2301      	moveq	r3, #1
 8000f28:	2300      	movne	r3, #0
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	f7ff ff2d 	bl	8000d8c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	3301      	adds	r3, #1
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d3c8      	bcc.n	8000ed6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	3301      	adds	r3, #1
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	785b      	ldrb	r3, [r3, #1]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d3ad      	bcc.n	8000eb2 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <SSD1306_Putc+0xfc>)
 8000f58:	881a      	ldrh	r2, [r3, #0]
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	4413      	add	r3, r2
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <SSD1306_Putc+0xfc>)
 8000f66:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000f68:	79fb      	ldrb	r3, [r7, #7]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200005e0 	.word	0x200005e0

08000f78 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	4613      	mov	r3, r2
 8000f84:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000f86:	e012      	b.n	8000fae <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	79fa      	ldrb	r2, [r7, #7]
 8000f8e:	68b9      	ldr	r1, [r7, #8]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff71 	bl	8000e78 <SSD1306_Putc>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d002      	beq.n	8000fa8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	e008      	b.n	8000fba <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	3301      	adds	r3, #1
 8000fac:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1e8      	bne.n	8000f88 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	781b      	ldrb	r3, [r3, #0]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <ssd1306_I2C_Init+0x28>)
 8000fcc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fce:	e002      	b.n	8000fd6 <ssd1306_I2C_Init+0x12>
		p--;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1f9      	bne.n	8000fd0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	0003d090 	.word	0x0003d090

08000ff0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b0c7      	sub	sp, #284	; 0x11c
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000ffe:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001002:	600a      	str	r2, [r1, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800100a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800100e:	4622      	mov	r2, r4
 8001010:	701a      	strb	r2, [r3, #0]
 8001012:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001016:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800101a:	4602      	mov	r2, r0
 800101c:	701a      	strb	r2, [r3, #0]
 800101e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001022:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001026:	460a      	mov	r2, r1
 8001028:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800102a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800102e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001032:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001036:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800103a:	7812      	ldrb	r2, [r2, #0]
 800103c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800103e:	2300      	movs	r3, #0
 8001040:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001044:	e015      	b.n	8001072 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001046:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800104a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800104e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001052:	6812      	ldr	r2, [r2, #0]
 8001054:	441a      	add	r2, r3
 8001056:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800105a:	3301      	adds	r3, #1
 800105c:	7811      	ldrb	r1, [r2, #0]
 800105e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001062:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001066:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001068:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800106c:	3301      	adds	r3, #1
 800106e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001072:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001076:	b29b      	uxth	r3, r3
 8001078:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800107c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001080:	8812      	ldrh	r2, [r2, #0]
 8001082:	429a      	cmp	r2, r3
 8001084:	d8df      	bhi.n	8001046 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001086:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800108a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b299      	uxth	r1, r3
 8001092:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001096:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	3301      	adds	r3, #1
 800109e:	b29b      	uxth	r3, r3
 80010a0:	f107 020c 	add.w	r2, r7, #12
 80010a4:	200a      	movs	r0, #10
 80010a6:	9000      	str	r0, [sp, #0]
 80010a8:	4803      	ldr	r0, [pc, #12]	; (80010b8 <ssd1306_I2C_WriteMulti+0xc8>)
 80010aa:	f002 f82f 	bl	800310c <HAL_I2C_Master_Transmit>
}
 80010ae:	bf00      	nop
 80010b0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd90      	pop	{r4, r7, pc}
 80010b8:	200000fc 	.word	0x200000fc

080010bc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af02      	add	r7, sp, #8
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
 80010c6:	460b      	mov	r3, r1
 80010c8:	71bb      	strb	r3, [r7, #6]
 80010ca:	4613      	mov	r3, r2
 80010cc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80010ce:	79bb      	ldrb	r3, [r7, #6]
 80010d0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80010d2:	797b      	ldrb	r3, [r7, #5]
 80010d4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	b299      	uxth	r1, r3
 80010da:	f107 020c 	add.w	r2, r7, #12
 80010de:	230a      	movs	r3, #10
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2302      	movs	r3, #2
 80010e4:	4803      	ldr	r0, [pc, #12]	; (80010f4 <ssd1306_I2C_Write+0x38>)
 80010e6:	f002 f811 	bl	800310c <HAL_I2C_Master_Transmit>
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200000fc 	.word	0x200000fc

080010f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <HAL_MspInit+0x44>)
 8001100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001102:	4a0e      	ldr	r2, [pc, #56]	; (800113c <HAL_MspInit+0x44>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6613      	str	r3, [r2, #96]	; 0x60
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <HAL_MspInit+0x44>)
 800110c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <HAL_MspInit+0x44>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111a:	4a08      	ldr	r2, [pc, #32]	; (800113c <HAL_MspInit+0x44>)
 800111c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001120:	6593      	str	r3, [r2, #88]	; 0x58
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_MspInit+0x44>)
 8001124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40021000 	.word	0x40021000

08001140 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b0ac      	sub	sp, #176	; 0xb0
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2288      	movs	r2, #136	; 0x88
 800115e:	2100      	movs	r1, #0
 8001160:	4618      	mov	r0, r3
 8001162:	f004 fcf9 	bl	8005b58 <memset>
  if(hadc->Instance==ADC1)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a27      	ldr	r2, [pc, #156]	; (8001208 <HAL_ADC_MspInit+0xc8>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d146      	bne.n	80011fe <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001170:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001174:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001176:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800117a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800117e:	2302      	movs	r3, #2
 8001180:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001182:	2301      	movs	r3, #1
 8001184:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001186:	2308      	movs	r3, #8
 8001188:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800118a:	2307      	movs	r3, #7
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800118e:	2302      	movs	r3, #2
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001192:	2302      	movs	r3, #2
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001196:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800119a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4618      	mov	r0, r3
 80011a2:	f003 faa9 	bl	80046f8 <HAL_RCCEx_PeriphCLKConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80011ac:	f7ff fcdc 	bl	8000b68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <HAL_ADC_MspInit+0xcc>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	4a15      	ldr	r2, [pc, #84]	; (800120c <HAL_ADC_MspInit+0xcc>)
 80011b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <HAL_ADC_MspInit+0xcc>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c8:	4b10      	ldr	r3, [pc, #64]	; (800120c <HAL_ADC_MspInit+0xcc>)
 80011ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011cc:	4a0f      	ldr	r2, [pc, #60]	; (800120c <HAL_ADC_MspInit+0xcc>)
 80011ce:	f043 0304 	orr.w	r3, r3, #4
 80011d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d4:	4b0d      	ldr	r3, [pc, #52]	; (800120c <HAL_ADC_MspInit+0xcc>)
 80011d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011e0:	2301      	movs	r3, #1
 80011e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011e6:	230b      	movs	r3, #11
 80011e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	; (8001210 <HAL_ADC_MspInit+0xd0>)
 80011fa:	f001 fd35 	bl	8002c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011fe:	bf00      	nop
 8001200:	37b0      	adds	r7, #176	; 0xb0
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	50040000 	.word	0x50040000
 800120c:	40021000 	.word	0x40021000
 8001210:	48000800 	.word	0x48000800

08001214 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b0ac      	sub	sp, #176	; 0xb0
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2288      	movs	r2, #136	; 0x88
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f004 fc8f 	bl	8005b58 <memset>
  if(hi2c->Instance==I2C1)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a21      	ldr	r2, [pc, #132]	; (80012c4 <HAL_I2C_MspInit+0xb0>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d13a      	bne.n	80012ba <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001244:	2340      	movs	r3, #64	; 0x40
 8001246:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001248:	2300      	movs	r3, #0
 800124a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4618      	mov	r0, r3
 8001252:	f003 fa51 	bl	80046f8 <HAL_RCCEx_PeriphCLKConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800125c:	f7ff fc84 	bl	8000b68 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <HAL_I2C_MspInit+0xb4>)
 8001262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001264:	4a18      	ldr	r2, [pc, #96]	; (80012c8 <HAL_I2C_MspInit+0xb4>)
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <HAL_I2C_MspInit+0xb4>)
 800126e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001278:	23c0      	movs	r3, #192	; 0xc0
 800127a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800127e:	2312      	movs	r3, #18
 8001280:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001284:	2301      	movs	r3, #1
 8001286:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001290:	2304      	movs	r3, #4
 8001292:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001296:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800129a:	4619      	mov	r1, r3
 800129c:	480b      	ldr	r0, [pc, #44]	; (80012cc <HAL_I2C_MspInit+0xb8>)
 800129e:	f001 fce3 	bl	8002c68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <HAL_I2C_MspInit+0xb4>)
 80012a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a6:	4a08      	ldr	r2, [pc, #32]	; (80012c8 <HAL_I2C_MspInit+0xb4>)
 80012a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ac:	6593      	str	r3, [r2, #88]	; 0x58
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_I2C_MspInit+0xb4>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012ba:	bf00      	nop
 80012bc:	37b0      	adds	r7, #176	; 0xb0
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40005400 	.word	0x40005400
 80012c8:	40021000 	.word	0x40021000
 80012cc:	48000400 	.word	0x48000400

080012d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b0ac      	sub	sp, #176	; 0xb0
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2288      	movs	r2, #136	; 0x88
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f004 fc31 	bl	8005b58 <memset>
  if(huart->Instance==USART2)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a21      	ldr	r2, [pc, #132]	; (8001380 <HAL_UART_MspInit+0xb0>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d13b      	bne.n	8001378 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001300:	2302      	movs	r3, #2
 8001302:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001304:	2300      	movs	r3, #0
 8001306:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4618      	mov	r0, r3
 800130e:	f003 f9f3 	bl	80046f8 <HAL_RCCEx_PeriphCLKConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001318:	f7ff fc26 	bl	8000b68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <HAL_UART_MspInit+0xb4>)
 800131e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001320:	4a18      	ldr	r2, [pc, #96]	; (8001384 <HAL_UART_MspInit+0xb4>)
 8001322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001326:	6593      	str	r3, [r2, #88]	; 0x58
 8001328:	4b16      	ldr	r3, [pc, #88]	; (8001384 <HAL_UART_MspInit+0xb4>)
 800132a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <HAL_UART_MspInit+0xb4>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001338:	4a12      	ldr	r2, [pc, #72]	; (8001384 <HAL_UART_MspInit+0xb4>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001340:	4b10      	ldr	r3, [pc, #64]	; (8001384 <HAL_UART_MspInit+0xb4>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800134c:	230c      	movs	r3, #12
 800134e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001364:	2307      	movs	r3, #7
 8001366:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800136e:	4619      	mov	r1, r3
 8001370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001374:	f001 fc78 	bl	8002c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001378:	bf00      	nop
 800137a:	37b0      	adds	r7, #176	; 0xb0
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40004400 	.word	0x40004400
 8001384:	40021000 	.word	0x40021000

08001388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <HardFault_Handler+0x4>

0800139c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <MemManage_Handler+0x4>

080013a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <BusFault_Handler+0x4>

080013a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <UsageFault_Handler+0x4>

080013ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013dc:	f000 f8f4 	bl	80015c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013ec:	4a14      	ldr	r2, [pc, #80]	; (8001440 <_sbrk+0x5c>)
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <_sbrk+0x60>)
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <_sbrk+0x64>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d102      	bne.n	8001406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <_sbrk+0x64>)
 8001402:	4a12      	ldr	r2, [pc, #72]	; (800144c <_sbrk+0x68>)
 8001404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <_sbrk+0x64>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	429a      	cmp	r2, r3
 8001412:	d207      	bcs.n	8001424 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001414:	f004 fb76 	bl	8005b04 <__errno>
 8001418:	4603      	mov	r3, r0
 800141a:	220c      	movs	r2, #12
 800141c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800141e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001422:	e009      	b.n	8001438 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800142a:	4b07      	ldr	r3, [pc, #28]	; (8001448 <_sbrk+0x64>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	4a05      	ldr	r2, [pc, #20]	; (8001448 <_sbrk+0x64>)
 8001434:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001436:	68fb      	ldr	r3, [r7, #12]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20018000 	.word	0x20018000
 8001444:	00000400 	.word	0x00000400
 8001448:	200005e8 	.word	0x200005e8
 800144c:	20000600 	.word	0x20000600

08001450 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <SystemInit+0x64>)
 8001456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800145a:	4a16      	ldr	r2, [pc, #88]	; (80014b4 <SystemInit+0x64>)
 800145c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001460:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <SystemInit+0x68>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a13      	ldr	r2, [pc, #76]	; (80014b8 <SystemInit+0x68>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <SystemInit+0x68>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <SystemInit+0x68>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a0f      	ldr	r2, [pc, #60]	; (80014b8 <SystemInit+0x68>)
 800147c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001480:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001484:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <SystemInit+0x68>)
 8001488:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800148c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <SystemInit+0x68>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a09      	ldr	r2, [pc, #36]	; (80014b8 <SystemInit+0x68>)
 8001494:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001498:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <SystemInit+0x68>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <SystemInit+0x64>)
 80014a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014a6:	609a      	str	r2, [r3, #8]
#endif
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000ed00 	.word	0xe000ed00
 80014b8:	40021000 	.word	0x40021000

080014bc <Reset_Handler>:
 80014bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f4 <LoopForever+0x2>
 80014c0:	f7ff ffc6 	bl	8001450 <SystemInit>
 80014c4:	2100      	movs	r1, #0
 80014c6:	e003      	b.n	80014d0 <LoopCopyDataInit>

080014c8 <CopyDataInit>:
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <LoopForever+0x6>)
 80014ca:	585b      	ldr	r3, [r3, r1]
 80014cc:	5043      	str	r3, [r0, r1]
 80014ce:	3104      	adds	r1, #4

080014d0 <LoopCopyDataInit>:
 80014d0:	480a      	ldr	r0, [pc, #40]	; (80014fc <LoopForever+0xa>)
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <LoopForever+0xe>)
 80014d4:	1842      	adds	r2, r0, r1
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d3f6      	bcc.n	80014c8 <CopyDataInit>
 80014da:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <LoopForever+0x12>)
 80014dc:	e002      	b.n	80014e4 <LoopFillZerobss>

080014de <FillZerobss>:
 80014de:	2300      	movs	r3, #0
 80014e0:	f842 3b04 	str.w	r3, [r2], #4

080014e4 <LoopFillZerobss>:
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <LoopForever+0x16>)
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d3f9      	bcc.n	80014de <FillZerobss>
 80014ea:	f004 fb11 	bl	8005b10 <__libc_init_array>
 80014ee:	f7ff f849 	bl	8000584 <main>

080014f2 <LoopForever>:
 80014f2:	e7fe      	b.n	80014f2 <LoopForever>
 80014f4:	20018000 	.word	0x20018000
 80014f8:	08007274 	.word	0x08007274
 80014fc:	20000000 	.word	0x20000000
 8001500:	2000007c 	.word	0x2000007c
 8001504:	2000007c 	.word	0x2000007c
 8001508:	20000600 	.word	0x20000600

0800150c <ADC1_2_IRQHandler>:
 800150c:	e7fe      	b.n	800150c <ADC1_2_IRQHandler>
	...

08001510 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <HAL_Init+0x3c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a0b      	ldr	r2, [pc, #44]	; (800154c <HAL_Init+0x3c>)
 8001520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001524:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001526:	2003      	movs	r0, #3
 8001528:	f001 fb6a 	bl	8002c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800152c:	2000      	movs	r0, #0
 800152e:	f000 f80f 	bl	8001550 <HAL_InitTick>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	71fb      	strb	r3, [r7, #7]
 800153c:	e001      	b.n	8001542 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800153e:	f7ff fddb 	bl	80010f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001542:	79fb      	ldrb	r3, [r7, #7]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40022000 	.word	0x40022000

08001550 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800155c:	4b17      	ldr	r3, [pc, #92]	; (80015bc <HAL_InitTick+0x6c>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d023      	beq.n	80015ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001564:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <HAL_InitTick+0x70>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <HAL_InitTick+0x6c>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001572:	fbb3 f3f1 	udiv	r3, r3, r1
 8001576:	fbb2 f3f3 	udiv	r3, r2, r3
 800157a:	4618      	mov	r0, r3
 800157c:	f001 fb67 	bl	8002c4e <HAL_SYSTICK_Config>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10f      	bne.n	80015a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b0f      	cmp	r3, #15
 800158a:	d809      	bhi.n	80015a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800158c:	2200      	movs	r2, #0
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001594:	f001 fb3f 	bl	8002c16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001598:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <HAL_InitTick+0x74>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e007      	b.n	80015b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	73fb      	strb	r3, [r7, #15]
 80015a4:	e004      	b.n	80015b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	73fb      	strb	r3, [r7, #15]
 80015aa:	e001      	b.n	80015b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000014 	.word	0x20000014
 80015c0:	2000000c 	.word	0x2000000c
 80015c4:	20000010 	.word	0x20000010

080015c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_IncTick+0x20>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_IncTick+0x24>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4413      	add	r3, r2
 80015d8:	4a04      	ldr	r2, [pc, #16]	; (80015ec <HAL_IncTick+0x24>)
 80015da:	6013      	str	r3, [r2, #0]
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000014 	.word	0x20000014
 80015ec:	200005ec 	.word	0x200005ec

080015f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return uwTick;
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <HAL_GetTick+0x14>)
 80015f6:	681b      	ldr	r3, [r3, #0]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	200005ec 	.word	0x200005ec

08001608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001610:	f7ff ffee 	bl	80015f0 <HAL_GetTick>
 8001614:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001620:	d005      	beq.n	800162e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001622:	4b0a      	ldr	r3, [pc, #40]	; (800164c <HAL_Delay+0x44>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	461a      	mov	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4413      	add	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800162e:	bf00      	nop
 8001630:	f7ff ffde 	bl	80015f0 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	429a      	cmp	r2, r3
 800163e:	d8f7      	bhi.n	8001630 <HAL_Delay+0x28>
  {
  }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000014 	.word	0x20000014

08001650 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	431a      	orrs	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	609a      	str	r2, [r3, #8]
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	609a      	str	r2, [r3, #8]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	3360      	adds	r3, #96	; 0x60
 80016ca:	461a      	mov	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <LL_ADC_SetOffset+0x44>)
 80016da:	4013      	ands	r3, r2
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	4313      	orrs	r3, r2
 80016e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80016f0:	bf00      	nop
 80016f2:	371c      	adds	r7, #28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	03fff000 	.word	0x03fff000

08001700 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3360      	adds	r3, #96	; 0x60
 800170e:	461a      	mov	r2, r3
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800172c:	b480      	push	{r7}
 800172e:	b087      	sub	sp, #28
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	3360      	adds	r3, #96	; 0x60
 800173c:	461a      	mov	r2, r3
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	431a      	orrs	r2, r3
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001756:	bf00      	nop
 8001758:	371c      	adds	r7, #28
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001788:	b480      	push	{r7}
 800178a:	b087      	sub	sp, #28
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	3330      	adds	r3, #48	; 0x30
 8001798:	461a      	mov	r2, r3
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	0a1b      	lsrs	r3, r3, #8
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	f003 030c 	and.w	r3, r3, #12
 80017a4:	4413      	add	r3, r2
 80017a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	f003 031f 	and.w	r3, r3, #31
 80017b2:	211f      	movs	r1, #31
 80017b4:	fa01 f303 	lsl.w	r3, r1, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	401a      	ands	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	0e9b      	lsrs	r3, r3, #26
 80017c0:	f003 011f 	and.w	r1, r3, #31
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	f003 031f 	and.w	r3, r3, #31
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	431a      	orrs	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017d4:	bf00      	nop
 80017d6:	371c      	adds	r7, #28
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b087      	sub	sp, #28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	3314      	adds	r3, #20
 80017f0:	461a      	mov	r2, r3
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	0e5b      	lsrs	r3, r3, #25
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	4413      	add	r3, r2
 80017fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	0d1b      	lsrs	r3, r3, #20
 8001808:	f003 031f 	and.w	r3, r3, #31
 800180c:	2107      	movs	r1, #7
 800180e:	fa01 f303 	lsl.w	r3, r1, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	401a      	ands	r2, r3
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	0d1b      	lsrs	r3, r3, #20
 800181a:	f003 031f 	and.w	r3, r3, #31
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	fa01 f303 	lsl.w	r3, r1, r3
 8001824:	431a      	orrs	r2, r3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800182a:	bf00      	nop
 800182c:	371c      	adds	r7, #28
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001850:	43db      	mvns	r3, r3
 8001852:	401a      	ands	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f003 0318 	and.w	r3, r3, #24
 800185a:	4908      	ldr	r1, [pc, #32]	; (800187c <LL_ADC_SetChannelSingleDiff+0x44>)
 800185c:	40d9      	lsrs	r1, r3
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	400b      	ands	r3, r1
 8001862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001866:	431a      	orrs	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800186e:	bf00      	nop
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	0007ffff 	.word	0x0007ffff

08001880 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 031f 	and.w	r3, r3, #31
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80018c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6093      	str	r3, [r2, #8]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018f0:	d101      	bne.n	80018f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001914:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001918:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001940:	d101      	bne.n	8001946 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001964:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001968:	f043 0201 	orr.w	r2, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b01      	cmp	r3, #1
 800198e:	d101      	bne.n	8001994 <LL_ADC_IsEnabled+0x18>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <LL_ADC_IsEnabled+0x1a>
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019b6:	f043 0204 	orr.w	r2, r3, #4
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d101      	bne.n	80019e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d101      	bne.n	8001a08 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b089      	sub	sp, #36	; 0x24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e136      	b.n	8001ca0 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d109      	bne.n	8001a54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff fb7d 	bl	8001140 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff3f 	bl	80018dc <LL_ADC_IsDeepPowerDownEnabled>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d004      	beq.n	8001a6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff25 	bl	80018b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff ff5a 	bl	800192c <LL_ADC_IsInternalRegulatorEnabled>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d115      	bne.n	8001aaa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff ff3e 	bl	8001904 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a88:	4b87      	ldr	r3, [pc, #540]	; (8001ca8 <HAL_ADC_Init+0x290>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	099b      	lsrs	r3, r3, #6
 8001a8e:	4a87      	ldr	r2, [pc, #540]	; (8001cac <HAL_ADC_Init+0x294>)
 8001a90:	fba2 2303 	umull	r2, r3, r2, r3
 8001a94:	099b      	lsrs	r3, r3, #6
 8001a96:	3301      	adds	r3, #1
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a9c:	e002      	b.n	8001aa4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f9      	bne.n	8001a9e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff ff3c 	bl	800192c <LL_ADC_IsInternalRegulatorEnabled>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10d      	bne.n	8001ad6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001abe:	f043 0210 	orr.w	r2, r3, #16
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aca:	f043 0201 	orr.w	r2, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff ff75 	bl	80019ca <LL_ADC_REG_IsConversionOngoing>
 8001ae0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae6:	f003 0310 	and.w	r3, r3, #16
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f040 80cf 	bne.w	8001c8e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f040 80cb 	bne.w	8001c8e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001afc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b00:	f043 0202 	orr.w	r2, r3, #2
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff35 	bl	800197c <LL_ADC_IsEnabled>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d115      	bne.n	8001b44 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b18:	4865      	ldr	r0, [pc, #404]	; (8001cb0 <HAL_ADC_Init+0x298>)
 8001b1a:	f7ff ff2f 	bl	800197c <LL_ADC_IsEnabled>
 8001b1e:	4604      	mov	r4, r0
 8001b20:	4864      	ldr	r0, [pc, #400]	; (8001cb4 <HAL_ADC_Init+0x29c>)
 8001b22:	f7ff ff2b 	bl	800197c <LL_ADC_IsEnabled>
 8001b26:	4603      	mov	r3, r0
 8001b28:	431c      	orrs	r4, r3
 8001b2a:	4863      	ldr	r0, [pc, #396]	; (8001cb8 <HAL_ADC_Init+0x2a0>)
 8001b2c:	f7ff ff26 	bl	800197c <LL_ADC_IsEnabled>
 8001b30:	4603      	mov	r3, r0
 8001b32:	4323      	orrs	r3, r4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d105      	bne.n	8001b44 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	485f      	ldr	r0, [pc, #380]	; (8001cbc <HAL_ADC_Init+0x2a4>)
 8001b40:	f7ff fd86 	bl	8001650 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	7e5b      	ldrb	r3, [r3, #25]
 8001b48:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b4e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001b54:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001b5a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b62:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d106      	bne.n	8001b80 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	3b01      	subs	r3, #1
 8001b78:	045b      	lsls	r3, r3, #17
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d009      	beq.n	8001b9c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <HAL_ADC_Init+0x2a8>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	69b9      	ldr	r1, [r7, #24]
 8001bac:	430b      	orrs	r3, r1
 8001bae:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff08 	bl	80019ca <LL_ADC_REG_IsConversionOngoing>
 8001bba:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff15 	bl	80019f0 <LL_ADC_INJ_IsConversionOngoing>
 8001bc6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d13d      	bne.n	8001c4a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d13a      	bne.n	8001c4a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bd8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001be0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bf0:	f023 0302 	bic.w	r3, r3, #2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	69b9      	ldr	r1, [r7, #24]
 8001bfa:	430b      	orrs	r3, r1
 8001bfc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d118      	bne.n	8001c3a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c12:	f023 0304 	bic.w	r3, r3, #4
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c1e:	4311      	orrs	r1, r2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c24:	4311      	orrs	r1, r2
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0201 	orr.w	r2, r2, #1
 8001c36:	611a      	str	r2, [r3, #16]
 8001c38:	e007      	b.n	8001c4a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	691a      	ldr	r2, [r3, #16]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0201 	bic.w	r2, r2, #1
 8001c48:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d10c      	bne.n	8001c6c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	f023 010f 	bic.w	r1, r3, #15
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	1e5a      	subs	r2, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	631a      	str	r2, [r3, #48]	; 0x30
 8001c6a:	e007      	b.n	8001c7c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 020f 	bic.w	r2, r2, #15
 8001c7a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c80:	f023 0303 	bic.w	r3, r3, #3
 8001c84:	f043 0201 	orr.w	r2, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	655a      	str	r2, [r3, #84]	; 0x54
 8001c8c:	e007      	b.n	8001c9e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c92:	f043 0210 	orr.w	r2, r3, #16
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3724      	adds	r7, #36	; 0x24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd90      	pop	{r4, r7, pc}
 8001ca8:	2000000c 	.word	0x2000000c
 8001cac:	053e2d63 	.word	0x053e2d63
 8001cb0:	50040000 	.word	0x50040000
 8001cb4:	50040100 	.word	0x50040100
 8001cb8:	50040200 	.word	0x50040200
 8001cbc:	50040300 	.word	0x50040300
 8001cc0:	fff0c007 	.word	0xfff0c007

08001cc4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ccc:	4857      	ldr	r0, [pc, #348]	; (8001e2c <HAL_ADC_Start+0x168>)
 8001cce:	f7ff fdd7 	bl	8001880 <LL_ADC_GetMultimode>
 8001cd2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fe76 	bl	80019ca <LL_ADC_REG_IsConversionOngoing>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f040 809c 	bne.w	8001e1e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <HAL_ADC_Start+0x30>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e097      	b.n	8001e24 <HAL_ADC_Start+0x160>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 fd71 	bl	80027e4 <ADC_Enable>
 8001d02:	4603      	mov	r3, r0
 8001d04:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d06:	7dfb      	ldrb	r3, [r7, #23]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f040 8083 	bne.w	8001e14 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d12:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d16:	f023 0301 	bic.w	r3, r3, #1
 8001d1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a42      	ldr	r2, [pc, #264]	; (8001e30 <HAL_ADC_Start+0x16c>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d002      	beq.n	8001d32 <HAL_ADC_Start+0x6e>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	e000      	b.n	8001d34 <HAL_ADC_Start+0x70>
 8001d32:	4b40      	ldr	r3, [pc, #256]	; (8001e34 <HAL_ADC_Start+0x170>)
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d002      	beq.n	8001d42 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d105      	bne.n	8001d4e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d5a:	d106      	bne.n	8001d6a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d60:	f023 0206 	bic.w	r2, r3, #6
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	659a      	str	r2, [r3, #88]	; 0x58
 8001d68:	e002      	b.n	8001d70 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	221c      	movs	r2, #28
 8001d76:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a2a      	ldr	r2, [pc, #168]	; (8001e30 <HAL_ADC_Start+0x16c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d002      	beq.n	8001d90 <HAL_ADC_Start+0xcc>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	e000      	b.n	8001d92 <HAL_ADC_Start+0xce>
 8001d90:	4b28      	ldr	r3, [pc, #160]	; (8001e34 <HAL_ADC_Start+0x170>)
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d008      	beq.n	8001dac <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	2b05      	cmp	r3, #5
 8001da4:	d002      	beq.n	8001dac <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	2b09      	cmp	r3, #9
 8001daa:	d114      	bne.n	8001dd6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d007      	beq.n	8001dca <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dc2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fde7 	bl	80019a2 <LL_ADC_REG_StartConversion>
 8001dd4:	e025      	b.n	8001e22 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <HAL_ADC_Start+0x16c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d002      	beq.n	8001df2 <HAL_ADC_Start+0x12e>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	e000      	b.n	8001df4 <HAL_ADC_Start+0x130>
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <HAL_ADC_Start+0x170>)
 8001df4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00f      	beq.n	8001e22 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	655a      	str	r2, [r3, #84]	; 0x54
 8001e12:	e006      	b.n	8001e22 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001e1c:	e001      	b.n	8001e22 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	50040300 	.word	0x50040300
 8001e30:	50040100 	.word	0x50040100
 8001e34:	50040000 	.word	0x50040000

08001e38 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e42:	4866      	ldr	r0, [pc, #408]	; (8001fdc <HAL_ADC_PollForConversion+0x1a4>)
 8001e44:	f7ff fd1c 	bl	8001880 <LL_ADC_GetMultimode>
 8001e48:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d102      	bne.n	8001e58 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001e52:	2308      	movs	r3, #8
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	e02a      	b.n	8001eae <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d005      	beq.n	8001e6a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2b05      	cmp	r3, #5
 8001e62:	d002      	beq.n	8001e6a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2b09      	cmp	r3, #9
 8001e68:	d111      	bne.n	8001e8e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d007      	beq.n	8001e88 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7c:	f043 0220 	orr.w	r2, r3, #32
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0a4      	b.n	8001fd2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e88:	2304      	movs	r3, #4
 8001e8a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e8c:	e00f      	b.n	8001eae <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e8e:	4853      	ldr	r0, [pc, #332]	; (8001fdc <HAL_ADC_PollForConversion+0x1a4>)
 8001e90:	f7ff fd04 	bl	800189c <LL_ADC_GetMultiDMATransfer>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d007      	beq.n	8001eaa <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9e:	f043 0220 	orr.w	r2, r3, #32
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e093      	b.n	8001fd2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001eaa:	2304      	movs	r3, #4
 8001eac:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001eae:	f7ff fb9f 	bl	80015f0 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001eb4:	e021      	b.n	8001efa <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ebc:	d01d      	beq.n	8001efa <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001ebe:	f7ff fb97 	bl	80015f0 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d302      	bcc.n	8001ed4 <HAL_ADC_PollForConversion+0x9c>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d112      	bne.n	8001efa <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10b      	bne.n	8001efa <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee6:	f043 0204 	orr.w	r2, r3, #4
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e06b      	b.n	8001fd2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0d6      	beq.n	8001eb6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fc22 	bl	8001762 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01c      	beq.n	8001f5e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	7e5b      	ldrb	r3, [r3, #25]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d118      	bne.n	8001f5e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d111      	bne.n	8001f5e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d105      	bne.n	8001f5e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f56:	f043 0201 	orr.w	r2, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a1f      	ldr	r2, [pc, #124]	; (8001fe0 <HAL_ADC_PollForConversion+0x1a8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d002      	beq.n	8001f6e <HAL_ADC_PollForConversion+0x136>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	e000      	b.n	8001f70 <HAL_ADC_PollForConversion+0x138>
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <HAL_ADC_PollForConversion+0x1ac>)
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6812      	ldr	r2, [r2, #0]
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d008      	beq.n	8001f8a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d005      	beq.n	8001f8a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2b05      	cmp	r3, #5
 8001f82:	d002      	beq.n	8001f8a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	2b09      	cmp	r3, #9
 8001f88:	d104      	bne.n	8001f94 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	61bb      	str	r3, [r7, #24]
 8001f92:	e00c      	b.n	8001fae <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a11      	ldr	r2, [pc, #68]	; (8001fe0 <HAL_ADC_PollForConversion+0x1a8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d002      	beq.n	8001fa4 <HAL_ADC_PollForConversion+0x16c>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	e000      	b.n	8001fa6 <HAL_ADC_PollForConversion+0x16e>
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <HAL_ADC_PollForConversion+0x1ac>)
 8001fa6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d104      	bne.n	8001fbe <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2208      	movs	r2, #8
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	e008      	b.n	8001fd0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d103      	bne.n	8001fd0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	220c      	movs	r2, #12
 8001fce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3720      	adds	r7, #32
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	50040300 	.word	0x50040300
 8001fe0:	50040100 	.word	0x50040100
 8001fe4:	50040000 	.word	0x50040000

08001fe8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b0b6      	sub	sp, #216	; 0xd8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800200e:	2300      	movs	r3, #0
 8002010:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x22>
 8002022:	2302      	movs	r3, #2
 8002024:	e3c7      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x7b2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fcc9 	bl	80019ca <LL_ADC_REG_IsConversionOngoing>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	f040 83a8 	bne.w	8002790 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b05      	cmp	r3, #5
 8002046:	d824      	bhi.n	8002092 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	3b02      	subs	r3, #2
 800204e:	2b03      	cmp	r3, #3
 8002050:	d81b      	bhi.n	800208a <HAL_ADC_ConfigChannel+0x86>
 8002052:	a201      	add	r2, pc, #4	; (adr r2, 8002058 <HAL_ADC_ConfigChannel+0x54>)
 8002054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002058:	08002069 	.word	0x08002069
 800205c:	08002071 	.word	0x08002071
 8002060:	08002079 	.word	0x08002079
 8002064:	08002081 	.word	0x08002081
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	220c      	movs	r2, #12
 800206c:	605a      	str	r2, [r3, #4]
          break;
 800206e:	e011      	b.n	8002094 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2212      	movs	r2, #18
 8002074:	605a      	str	r2, [r3, #4]
          break;
 8002076:	e00d      	b.n	8002094 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2218      	movs	r2, #24
 800207c:	605a      	str	r2, [r3, #4]
          break;
 800207e:	e009      	b.n	8002094 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002086:	605a      	str	r2, [r3, #4]
          break;
 8002088:	e004      	b.n	8002094 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	2206      	movs	r2, #6
 800208e:	605a      	str	r2, [r3, #4]
          break;
 8002090:	e000      	b.n	8002094 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002092:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6818      	ldr	r0, [r3, #0]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	6859      	ldr	r1, [r3, #4]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	f7ff fb71 	bl	8001788 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fc8d 	bl	80019ca <LL_ADC_REG_IsConversionOngoing>
 80020b0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff fc99 	bl	80019f0 <LL_ADC_INJ_IsConversionOngoing>
 80020be:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f040 81a6 	bne.w	8002418 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f040 81a1 	bne.w	8002418 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6818      	ldr	r0, [r3, #0]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	6819      	ldr	r1, [r3, #0]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	461a      	mov	r2, r3
 80020e4:	f7ff fb7c 	bl	80017e0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	695a      	ldr	r2, [r3, #20]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	08db      	lsrs	r3, r3, #3
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	2b04      	cmp	r3, #4
 8002108:	d00a      	beq.n	8002120 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	6919      	ldr	r1, [r3, #16]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800211a:	f7ff facd 	bl	80016b8 <LL_ADC_SetOffset>
 800211e:	e17b      	b.n	8002418 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff faea 	bl	8001700 <LL_ADC_GetOffsetChannel>
 800212c:	4603      	mov	r3, r0
 800212e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10a      	bne.n	800214c <HAL_ADC_ConfigChannel+0x148>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2100      	movs	r1, #0
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fadf 	bl	8001700 <LL_ADC_GetOffsetChannel>
 8002142:	4603      	mov	r3, r0
 8002144:	0e9b      	lsrs	r3, r3, #26
 8002146:	f003 021f 	and.w	r2, r3, #31
 800214a:	e01e      	b.n	800218a <HAL_ADC_ConfigChannel+0x186>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fad4 	bl	8001700 <LL_ADC_GetOffsetChannel>
 8002158:	4603      	mov	r3, r0
 800215a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002162:	fa93 f3a3 	rbit	r3, r3
 8002166:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800216a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800216e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002172:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800217a:	2320      	movs	r3, #32
 800217c:	e004      	b.n	8002188 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800217e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002192:	2b00      	cmp	r3, #0
 8002194:	d105      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x19e>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	0e9b      	lsrs	r3, r3, #26
 800219c:	f003 031f 	and.w	r3, r3, #31
 80021a0:	e018      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x1d0>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80021b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80021be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80021c6:	2320      	movs	r3, #32
 80021c8:	e004      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80021ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021ce:	fab3 f383 	clz	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d106      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2200      	movs	r2, #0
 80021de:	2100      	movs	r1, #0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff faa3 	bl	800172c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2101      	movs	r1, #1
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff fa87 	bl	8001700 <LL_ADC_GetOffsetChannel>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10a      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x20e>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2101      	movs	r1, #1
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fa7c 	bl	8001700 <LL_ADC_GetOffsetChannel>
 8002208:	4603      	mov	r3, r0
 800220a:	0e9b      	lsrs	r3, r3, #26
 800220c:	f003 021f 	and.w	r2, r3, #31
 8002210:	e01e      	b.n	8002250 <HAL_ADC_ConfigChannel+0x24c>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2101      	movs	r1, #1
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fa71 	bl	8001700 <LL_ADC_GetOffsetChannel>
 800221e:	4603      	mov	r3, r0
 8002220:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002224:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002228:	fa93 f3a3 	rbit	r3, r3
 800222c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002230:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002234:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002238:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002240:	2320      	movs	r3, #32
 8002242:	e004      	b.n	800224e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002244:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002248:	fab3 f383 	clz	r3, r3
 800224c:	b2db      	uxtb	r3, r3
 800224e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002258:	2b00      	cmp	r3, #0
 800225a:	d105      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x264>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	0e9b      	lsrs	r3, r3, #26
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	e018      	b.n	800229a <HAL_ADC_ConfigChannel+0x296>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002270:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002274:	fa93 f3a3 	rbit	r3, r3
 8002278:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800227c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002280:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002284:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800228c:	2320      	movs	r3, #32
 800228e:	e004      	b.n	800229a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002290:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002294:	fab3 f383 	clz	r3, r3
 8002298:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800229a:	429a      	cmp	r2, r3
 800229c:	d106      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2200      	movs	r2, #0
 80022a4:	2101      	movs	r1, #1
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fa40 	bl	800172c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2102      	movs	r1, #2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fa24 	bl	8001700 <LL_ADC_GetOffsetChannel>
 80022b8:	4603      	mov	r3, r0
 80022ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10a      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x2d4>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2102      	movs	r1, #2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fa19 	bl	8001700 <LL_ADC_GetOffsetChannel>
 80022ce:	4603      	mov	r3, r0
 80022d0:	0e9b      	lsrs	r3, r3, #26
 80022d2:	f003 021f 	and.w	r2, r3, #31
 80022d6:	e01e      	b.n	8002316 <HAL_ADC_ConfigChannel+0x312>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2102      	movs	r1, #2
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fa0e 	bl	8001700 <LL_ADC_GetOffsetChannel>
 80022e4:	4603      	mov	r3, r0
 80022e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022ee:	fa93 f3a3 	rbit	r3, r3
 80022f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80022f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80022fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002306:	2320      	movs	r3, #32
 8002308:	e004      	b.n	8002314 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800230a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800230e:	fab3 f383 	clz	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800231e:	2b00      	cmp	r3, #0
 8002320:	d105      	bne.n	800232e <HAL_ADC_ConfigChannel+0x32a>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	0e9b      	lsrs	r3, r3, #26
 8002328:	f003 031f 	and.w	r3, r3, #31
 800232c:	e016      	b.n	800235c <HAL_ADC_ConfigChannel+0x358>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800233a:	fa93 f3a3 	rbit	r3, r3
 800233e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002340:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002342:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002346:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800234e:	2320      	movs	r3, #32
 8002350:	e004      	b.n	800235c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002352:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002356:	fab3 f383 	clz	r3, r3
 800235a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800235c:	429a      	cmp	r2, r3
 800235e:	d106      	bne.n	800236e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2200      	movs	r2, #0
 8002366:	2102      	movs	r1, #2
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff f9df 	bl	800172c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2103      	movs	r1, #3
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff f9c3 	bl	8001700 <LL_ADC_GetOffsetChannel>
 800237a:	4603      	mov	r3, r0
 800237c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10a      	bne.n	800239a <HAL_ADC_ConfigChannel+0x396>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2103      	movs	r1, #3
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff f9b8 	bl	8001700 <LL_ADC_GetOffsetChannel>
 8002390:	4603      	mov	r3, r0
 8002392:	0e9b      	lsrs	r3, r3, #26
 8002394:	f003 021f 	and.w	r2, r3, #31
 8002398:	e017      	b.n	80023ca <HAL_ADC_ConfigChannel+0x3c6>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2103      	movs	r1, #3
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff f9ad 	bl	8001700 <LL_ADC_GetOffsetChannel>
 80023a6:	4603      	mov	r3, r0
 80023a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023ac:	fa93 f3a3 	rbit	r3, r3
 80023b0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80023b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023b4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80023b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80023bc:	2320      	movs	r3, #32
 80023be:	e003      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80023c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d105      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x3de>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	0e9b      	lsrs	r3, r3, #26
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	e011      	b.n	8002406 <HAL_ADC_ConfigChannel+0x402>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80023f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80023f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80023fa:	2320      	movs	r3, #32
 80023fc:	e003      	b.n	8002406 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80023fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002400:	fab3 f383 	clz	r3, r3
 8002404:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002406:	429a      	cmp	r2, r3
 8002408:	d106      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2200      	movs	r2, #0
 8002410:	2103      	movs	r1, #3
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff f98a 	bl	800172c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff faad 	bl	800197c <LL_ADC_IsEnabled>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	f040 813f 	bne.w	80026a8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	6819      	ldr	r1, [r3, #0]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	461a      	mov	r2, r3
 8002438:	f7ff f9fe 	bl	8001838 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	4a8e      	ldr	r2, [pc, #568]	; (800267c <HAL_ADC_ConfigChannel+0x678>)
 8002442:	4293      	cmp	r3, r2
 8002444:	f040 8130 	bne.w	80026a8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10b      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x46c>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	0e9b      	lsrs	r3, r3, #26
 800245e:	3301      	adds	r3, #1
 8002460:	f003 031f 	and.w	r3, r3, #31
 8002464:	2b09      	cmp	r3, #9
 8002466:	bf94      	ite	ls
 8002468:	2301      	movls	r3, #1
 800246a:	2300      	movhi	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	e019      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x4a0>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800247e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002480:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002482:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002488:	2320      	movs	r3, #32
 800248a:	e003      	b.n	8002494 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800248c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800248e:	fab3 f383 	clz	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	3301      	adds	r3, #1
 8002496:	f003 031f 	and.w	r3, r3, #31
 800249a:	2b09      	cmp	r3, #9
 800249c:	bf94      	ite	ls
 800249e:	2301      	movls	r3, #1
 80024a0:	2300      	movhi	r3, #0
 80024a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d079      	beq.n	800259c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d107      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x4c0>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	0e9b      	lsrs	r3, r3, #26
 80024ba:	3301      	adds	r3, #1
 80024bc:	069b      	lsls	r3, r3, #26
 80024be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024c2:	e015      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x4ec>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024cc:	fa93 f3a3 	rbit	r3, r3
 80024d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80024d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80024dc:	2320      	movs	r3, #32
 80024de:	e003      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80024e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e2:	fab3 f383 	clz	r3, r3
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	3301      	adds	r3, #1
 80024ea:	069b      	lsls	r3, r3, #26
 80024ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d109      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x50c>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	0e9b      	lsrs	r3, r3, #26
 8002502:	3301      	adds	r3, #1
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	2101      	movs	r1, #1
 800250a:	fa01 f303 	lsl.w	r3, r1, r3
 800250e:	e017      	b.n	8002540 <HAL_ADC_ConfigChannel+0x53c>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002518:	fa93 f3a3 	rbit	r3, r3
 800251c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800251e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002520:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002528:	2320      	movs	r3, #32
 800252a:	e003      	b.n	8002534 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800252c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	b2db      	uxtb	r3, r3
 8002534:	3301      	adds	r3, #1
 8002536:	f003 031f 	and.w	r3, r3, #31
 800253a:	2101      	movs	r1, #1
 800253c:	fa01 f303 	lsl.w	r3, r1, r3
 8002540:	ea42 0103 	orr.w	r1, r2, r3
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10a      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x562>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	0e9b      	lsrs	r3, r3, #26
 8002556:	3301      	adds	r3, #1
 8002558:	f003 021f 	and.w	r2, r3, #31
 800255c:	4613      	mov	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4413      	add	r3, r2
 8002562:	051b      	lsls	r3, r3, #20
 8002564:	e018      	b.n	8002598 <HAL_ADC_ConfigChannel+0x594>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002576:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800257e:	2320      	movs	r3, #32
 8002580:	e003      	b.n	800258a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002584:	fab3 f383 	clz	r3, r3
 8002588:	b2db      	uxtb	r3, r3
 800258a:	3301      	adds	r3, #1
 800258c:	f003 021f 	and.w	r2, r3, #31
 8002590:	4613      	mov	r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4413      	add	r3, r2
 8002596:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002598:	430b      	orrs	r3, r1
 800259a:	e080      	b.n	800269e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d107      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x5b4>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	0e9b      	lsrs	r3, r3, #26
 80025ae:	3301      	adds	r3, #1
 80025b0:	069b      	lsls	r3, r3, #26
 80025b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025b6:	e015      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x5e0>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80025c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80025ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80025d0:	2320      	movs	r3, #32
 80025d2:	e003      	b.n	80025dc <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80025d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	3301      	adds	r3, #1
 80025de:	069b      	lsls	r3, r3, #26
 80025e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d109      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x600>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	0e9b      	lsrs	r3, r3, #26
 80025f6:	3301      	adds	r3, #1
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	2101      	movs	r1, #1
 80025fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002602:	e017      	b.n	8002634 <HAL_ADC_ConfigChannel+0x630>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	fa93 f3a3 	rbit	r3, r3
 8002610:	61fb      	str	r3, [r7, #28]
  return result;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800261c:	2320      	movs	r3, #32
 800261e:	e003      	b.n	8002628 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	fab3 f383 	clz	r3, r3
 8002626:	b2db      	uxtb	r3, r3
 8002628:	3301      	adds	r3, #1
 800262a:	f003 031f 	and.w	r3, r3, #31
 800262e:	2101      	movs	r1, #1
 8002630:	fa01 f303 	lsl.w	r3, r1, r3
 8002634:	ea42 0103 	orr.w	r1, r2, r3
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10d      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x65c>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	0e9b      	lsrs	r3, r3, #26
 800264a:	3301      	adds	r3, #1
 800264c:	f003 021f 	and.w	r2, r3, #31
 8002650:	4613      	mov	r3, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	4413      	add	r3, r2
 8002656:	3b1e      	subs	r3, #30
 8002658:	051b      	lsls	r3, r3, #20
 800265a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800265e:	e01d      	b.n	800269c <HAL_ADC_ConfigChannel+0x698>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	fa93 f3a3 	rbit	r3, r3
 800266c:	613b      	str	r3, [r7, #16]
  return result;
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d103      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002678:	2320      	movs	r3, #32
 800267a:	e005      	b.n	8002688 <HAL_ADC_ConfigChannel+0x684>
 800267c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	fab3 f383 	clz	r3, r3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	3301      	adds	r3, #1
 800268a:	f003 021f 	and.w	r2, r3, #31
 800268e:	4613      	mov	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	4413      	add	r3, r2
 8002694:	3b1e      	subs	r3, #30
 8002696:	051b      	lsls	r3, r3, #20
 8002698:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800269c:	430b      	orrs	r3, r1
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	6892      	ldr	r2, [r2, #8]
 80026a2:	4619      	mov	r1, r3
 80026a4:	f7ff f89c 	bl	80017e0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4b44      	ldr	r3, [pc, #272]	; (80027c0 <HAL_ADC_ConfigChannel+0x7bc>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d07a      	beq.n	80027aa <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026b4:	4843      	ldr	r0, [pc, #268]	; (80027c4 <HAL_ADC_ConfigChannel+0x7c0>)
 80026b6:	f7fe fff1 	bl	800169c <LL_ADC_GetCommonPathInternalCh>
 80026ba:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a41      	ldr	r2, [pc, #260]	; (80027c8 <HAL_ADC_ConfigChannel+0x7c4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d12c      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d126      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a3c      	ldr	r2, [pc, #240]	; (80027cc <HAL_ADC_ConfigChannel+0x7c8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d004      	beq.n	80026e8 <HAL_ADC_ConfigChannel+0x6e4>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a3b      	ldr	r2, [pc, #236]	; (80027d0 <HAL_ADC_ConfigChannel+0x7cc>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d15d      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026f0:	4619      	mov	r1, r3
 80026f2:	4834      	ldr	r0, [pc, #208]	; (80027c4 <HAL_ADC_ConfigChannel+0x7c0>)
 80026f4:	f7fe ffbf 	bl	8001676 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026f8:	4b36      	ldr	r3, [pc, #216]	; (80027d4 <HAL_ADC_ConfigChannel+0x7d0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	099b      	lsrs	r3, r3, #6
 80026fe:	4a36      	ldr	r2, [pc, #216]	; (80027d8 <HAL_ADC_ConfigChannel+0x7d4>)
 8002700:	fba2 2303 	umull	r2, r3, r2, r3
 8002704:	099b      	lsrs	r3, r3, #6
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	4613      	mov	r3, r2
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4413      	add	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002712:	e002      	b.n	800271a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	3b01      	subs	r3, #1
 8002718:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f9      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002720:	e040      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a2d      	ldr	r2, [pc, #180]	; (80027dc <HAL_ADC_ConfigChannel+0x7d8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d118      	bne.n	800275e <HAL_ADC_ConfigChannel+0x75a>
 800272c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002730:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d112      	bne.n	800275e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a23      	ldr	r2, [pc, #140]	; (80027cc <HAL_ADC_ConfigChannel+0x7c8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d004      	beq.n	800274c <HAL_ADC_ConfigChannel+0x748>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a22      	ldr	r2, [pc, #136]	; (80027d0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d12d      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800274c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002750:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002754:	4619      	mov	r1, r3
 8002756:	481b      	ldr	r0, [pc, #108]	; (80027c4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002758:	f7fe ff8d 	bl	8001676 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800275c:	e024      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a1f      	ldr	r2, [pc, #124]	; (80027e0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d120      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002768:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800276c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d11a      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a14      	ldr	r2, [pc, #80]	; (80027cc <HAL_ADC_ConfigChannel+0x7c8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d115      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800277e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002782:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002786:	4619      	mov	r1, r3
 8002788:	480e      	ldr	r0, [pc, #56]	; (80027c4 <HAL_ADC_ConfigChannel+0x7c0>)
 800278a:	f7fe ff74 	bl	8001676 <LL_ADC_SetCommonPathInternalCh>
 800278e:	e00c      	b.n	80027aa <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002794:	f043 0220 	orr.w	r2, r3, #32
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80027a2:	e002      	b.n	80027aa <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027a4:	bf00      	nop
 80027a6:	e000      	b.n	80027aa <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80027b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	37d8      	adds	r7, #216	; 0xd8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	80080000 	.word	0x80080000
 80027c4:	50040300 	.word	0x50040300
 80027c8:	c7520000 	.word	0xc7520000
 80027cc:	50040000 	.word	0x50040000
 80027d0:	50040200 	.word	0x50040200
 80027d4:	2000000c 	.word	0x2000000c
 80027d8:	053e2d63 	.word	0x053e2d63
 80027dc:	cb840000 	.word	0xcb840000
 80027e0:	80000001 	.word	0x80000001

080027e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff f8c1 	bl	800197c <LL_ADC_IsEnabled>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d169      	bne.n	80028d4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	4b36      	ldr	r3, [pc, #216]	; (80028e0 <ADC_Enable+0xfc>)
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00d      	beq.n	800282a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002812:	f043 0210 	orr.w	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281e:	f043 0201 	orr.w	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e055      	b.n	80028d6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff f890 	bl	8001954 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002834:	482b      	ldr	r0, [pc, #172]	; (80028e4 <ADC_Enable+0x100>)
 8002836:	f7fe ff31 	bl	800169c <LL_ADC_GetCommonPathInternalCh>
 800283a:	4603      	mov	r3, r0
 800283c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d013      	beq.n	800286c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002844:	4b28      	ldr	r3, [pc, #160]	; (80028e8 <ADC_Enable+0x104>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	099b      	lsrs	r3, r3, #6
 800284a:	4a28      	ldr	r2, [pc, #160]	; (80028ec <ADC_Enable+0x108>)
 800284c:	fba2 2303 	umull	r2, r3, r2, r3
 8002850:	099b      	lsrs	r3, r3, #6
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	4613      	mov	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800285e:	e002      	b.n	8002866 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	3b01      	subs	r3, #1
 8002864:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f9      	bne.n	8002860 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800286c:	f7fe fec0 	bl	80015f0 <HAL_GetTick>
 8002870:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002872:	e028      	b.n	80028c6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff f87f 	bl	800197c <LL_ADC_IsEnabled>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d104      	bne.n	800288e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff f863 	bl	8001954 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800288e:	f7fe feaf 	bl	80015f0 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d914      	bls.n	80028c6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d00d      	beq.n	80028c6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ae:	f043 0210 	orr.w	r2, r3, #16
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ba:	f043 0201 	orr.w	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e007      	b.n	80028d6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d1cf      	bne.n	8002874 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	8000003f 	.word	0x8000003f
 80028e4:	50040300 	.word	0x50040300
 80028e8:	2000000c 	.word	0x2000000c
 80028ec:	053e2d63 	.word	0x053e2d63

080028f0 <LL_ADC_IsEnabled>:
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <LL_ADC_IsEnabled+0x18>
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <LL_ADC_IsEnabled+0x1a>
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <LL_ADC_REG_IsConversionOngoing>:
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	2b04      	cmp	r3, #4
 8002928:	d101      	bne.n	800292e <LL_ADC_REG_IsConversionOngoing+0x18>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800293c:	b590      	push	{r4, r7, lr}
 800293e:	b09f      	sub	sp, #124	; 0x7c
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002956:	2302      	movs	r3, #2
 8002958:	e093      	b.n	8002a82 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002962:	2300      	movs	r3, #0
 8002964:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002966:	2300      	movs	r3, #0
 8002968:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a47      	ldr	r2, [pc, #284]	; (8002a8c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d102      	bne.n	800297a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002974:	4b46      	ldr	r3, [pc, #280]	; (8002a90 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	e001      	b.n	800297e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800297a:	2300      	movs	r3, #0
 800297c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10b      	bne.n	800299c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002988:	f043 0220 	orr.w	r2, r3, #32
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e072      	b.n	8002a82 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff ffb9 	bl	8002916 <LL_ADC_REG_IsConversionOngoing>
 80029a4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff ffb3 	bl	8002916 <LL_ADC_REG_IsConversionOngoing>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d154      	bne.n	8002a60 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80029b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d151      	bne.n	8002a60 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029bc:	4b35      	ldr	r3, [pc, #212]	; (8002a94 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80029be:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d02c      	beq.n	8002a22 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80029c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	6859      	ldr	r1, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029da:	035b      	lsls	r3, r3, #13
 80029dc:	430b      	orrs	r3, r1
 80029de:	431a      	orrs	r2, r3
 80029e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029e2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029e4:	4829      	ldr	r0, [pc, #164]	; (8002a8c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80029e6:	f7ff ff83 	bl	80028f0 <LL_ADC_IsEnabled>
 80029ea:	4604      	mov	r4, r0
 80029ec:	4828      	ldr	r0, [pc, #160]	; (8002a90 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80029ee:	f7ff ff7f 	bl	80028f0 <LL_ADC_IsEnabled>
 80029f2:	4603      	mov	r3, r0
 80029f4:	431c      	orrs	r4, r3
 80029f6:	4828      	ldr	r0, [pc, #160]	; (8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80029f8:	f7ff ff7a 	bl	80028f0 <LL_ADC_IsEnabled>
 80029fc:	4603      	mov	r3, r0
 80029fe:	4323      	orrs	r3, r4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d137      	bne.n	8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a0c:	f023 030f 	bic.w	r3, r3, #15
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	6811      	ldr	r1, [r2, #0]
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	6892      	ldr	r2, [r2, #8]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a1e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a20:	e028      	b.n	8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a2c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a2e:	4817      	ldr	r0, [pc, #92]	; (8002a8c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002a30:	f7ff ff5e 	bl	80028f0 <LL_ADC_IsEnabled>
 8002a34:	4604      	mov	r4, r0
 8002a36:	4816      	ldr	r0, [pc, #88]	; (8002a90 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a38:	f7ff ff5a 	bl	80028f0 <LL_ADC_IsEnabled>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	431c      	orrs	r4, r3
 8002a40:	4815      	ldr	r0, [pc, #84]	; (8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002a42:	f7ff ff55 	bl	80028f0 <LL_ADC_IsEnabled>
 8002a46:	4603      	mov	r3, r0
 8002a48:	4323      	orrs	r3, r4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d112      	bne.n	8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a56:	f023 030f 	bic.w	r3, r3, #15
 8002a5a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a5c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a5e:	e009      	b.n	8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a64:	f043 0220 	orr.w	r2, r3, #32
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002a72:	e000      	b.n	8002a76 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a7e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	377c      	adds	r7, #124	; 0x7c
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd90      	pop	{r4, r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	50040000 	.word	0x50040000
 8002a90:	50040100 	.word	0x50040100
 8002a94:	50040300 	.word	0x50040300
 8002a98:	50040200 	.word	0x50040200

08002a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aac:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ab8:	4013      	ands	r3, r2
 8002aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ace:	4a04      	ldr	r2, [pc, #16]	; (8002ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	60d3      	str	r3, [r2, #12]
}
 8002ad4:	bf00      	nop
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ae8:	4b04      	ldr	r3, [pc, #16]	; (8002afc <__NVIC_GetPriorityGrouping+0x18>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	0a1b      	lsrs	r3, r3, #8
 8002aee:	f003 0307 	and.w	r3, r3, #7
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	6039      	str	r1, [r7, #0]
 8002b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	db0a      	blt.n	8002b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	490c      	ldr	r1, [pc, #48]	; (8002b4c <__NVIC_SetPriority+0x4c>)
 8002b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1e:	0112      	lsls	r2, r2, #4
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	440b      	add	r3, r1
 8002b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b28:	e00a      	b.n	8002b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	4908      	ldr	r1, [pc, #32]	; (8002b50 <__NVIC_SetPriority+0x50>)
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	3b04      	subs	r3, #4
 8002b38:	0112      	lsls	r2, r2, #4
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	761a      	strb	r2, [r3, #24]
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000e100 	.word	0xe000e100
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b089      	sub	sp, #36	; 0x24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f1c3 0307 	rsb	r3, r3, #7
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	bf28      	it	cs
 8002b72:	2304      	movcs	r3, #4
 8002b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	2b06      	cmp	r3, #6
 8002b7c:	d902      	bls.n	8002b84 <NVIC_EncodePriority+0x30>
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	3b03      	subs	r3, #3
 8002b82:	e000      	b.n	8002b86 <NVIC_EncodePriority+0x32>
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43da      	mvns	r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	401a      	ands	r2, r3
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba6:	43d9      	mvns	r1, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bac:	4313      	orrs	r3, r2
         );
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3724      	adds	r7, #36	; 0x24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
	...

08002bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bcc:	d301      	bcc.n	8002bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e00f      	b.n	8002bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	; (8002bfc <SysTick_Config+0x40>)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bda:	210f      	movs	r1, #15
 8002bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002be0:	f7ff ff8e 	bl	8002b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <SysTick_Config+0x40>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bea:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <SysTick_Config+0x40>)
 8002bec:	2207      	movs	r2, #7
 8002bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	e000e010 	.word	0xe000e010

08002c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff ff47 	bl	8002a9c <__NVIC_SetPriorityGrouping>
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b086      	sub	sp, #24
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	607a      	str	r2, [r7, #4]
 8002c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c28:	f7ff ff5c 	bl	8002ae4 <__NVIC_GetPriorityGrouping>
 8002c2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	6978      	ldr	r0, [r7, #20]
 8002c34:	f7ff ff8e 	bl	8002b54 <NVIC_EncodePriority>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff ff5d 	bl	8002b00 <__NVIC_SetPriority>
}
 8002c46:	bf00      	nop
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7ff ffb0 	bl	8002bbc <SysTick_Config>
 8002c5c:	4603      	mov	r3, r0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
	...

08002c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c76:	e17f      	b.n	8002f78 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	4013      	ands	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 8171 	beq.w	8002f72 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d005      	beq.n	8002ca8 <HAL_GPIO_Init+0x40>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d130      	bne.n	8002d0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cde:	2201      	movs	r2, #1
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4013      	ands	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	091b      	lsrs	r3, r3, #4
 8002cf4:	f003 0201 	and.w	r2, r3, #1
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d118      	bne.n	8002d48 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	08db      	lsrs	r3, r3, #3
 8002d32:	f003 0201 	and.w	r2, r3, #1
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 0303 	and.w	r3, r3, #3
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d017      	beq.n	8002d84 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	2203      	movs	r2, #3
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d123      	bne.n	8002dd8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	08da      	lsrs	r2, r3, #3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3208      	adds	r2, #8
 8002d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	220f      	movs	r2, #15
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4013      	ands	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	08da      	lsrs	r2, r3, #3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3208      	adds	r2, #8
 8002dd2:	6939      	ldr	r1, [r7, #16]
 8002dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	2203      	movs	r2, #3
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4013      	ands	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 0203 	and.w	r2, r3, #3
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 80ac 	beq.w	8002f72 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e1a:	4b5f      	ldr	r3, [pc, #380]	; (8002f98 <HAL_GPIO_Init+0x330>)
 8002e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e1e:	4a5e      	ldr	r2, [pc, #376]	; (8002f98 <HAL_GPIO_Init+0x330>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	6613      	str	r3, [r2, #96]	; 0x60
 8002e26:	4b5c      	ldr	r3, [pc, #368]	; (8002f98 <HAL_GPIO_Init+0x330>)
 8002e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	60bb      	str	r3, [r7, #8]
 8002e30:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e32:	4a5a      	ldr	r2, [pc, #360]	; (8002f9c <HAL_GPIO_Init+0x334>)
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	089b      	lsrs	r3, r3, #2
 8002e38:	3302      	adds	r3, #2
 8002e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	220f      	movs	r2, #15
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4013      	ands	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e5c:	d025      	beq.n	8002eaa <HAL_GPIO_Init+0x242>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a4f      	ldr	r2, [pc, #316]	; (8002fa0 <HAL_GPIO_Init+0x338>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d01f      	beq.n	8002ea6 <HAL_GPIO_Init+0x23e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a4e      	ldr	r2, [pc, #312]	; (8002fa4 <HAL_GPIO_Init+0x33c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d019      	beq.n	8002ea2 <HAL_GPIO_Init+0x23a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a4d      	ldr	r2, [pc, #308]	; (8002fa8 <HAL_GPIO_Init+0x340>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <HAL_GPIO_Init+0x236>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a4c      	ldr	r2, [pc, #304]	; (8002fac <HAL_GPIO_Init+0x344>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d00d      	beq.n	8002e9a <HAL_GPIO_Init+0x232>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a4b      	ldr	r2, [pc, #300]	; (8002fb0 <HAL_GPIO_Init+0x348>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d007      	beq.n	8002e96 <HAL_GPIO_Init+0x22e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a4a      	ldr	r2, [pc, #296]	; (8002fb4 <HAL_GPIO_Init+0x34c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d101      	bne.n	8002e92 <HAL_GPIO_Init+0x22a>
 8002e8e:	2306      	movs	r3, #6
 8002e90:	e00c      	b.n	8002eac <HAL_GPIO_Init+0x244>
 8002e92:	2307      	movs	r3, #7
 8002e94:	e00a      	b.n	8002eac <HAL_GPIO_Init+0x244>
 8002e96:	2305      	movs	r3, #5
 8002e98:	e008      	b.n	8002eac <HAL_GPIO_Init+0x244>
 8002e9a:	2304      	movs	r3, #4
 8002e9c:	e006      	b.n	8002eac <HAL_GPIO_Init+0x244>
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e004      	b.n	8002eac <HAL_GPIO_Init+0x244>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e002      	b.n	8002eac <HAL_GPIO_Init+0x244>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <HAL_GPIO_Init+0x244>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	f002 0203 	and.w	r2, r2, #3
 8002eb2:	0092      	lsls	r2, r2, #2
 8002eb4:	4093      	lsls	r3, r2
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ebc:	4937      	ldr	r1, [pc, #220]	; (8002f9c <HAL_GPIO_Init+0x334>)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	089b      	lsrs	r3, r3, #2
 8002ec2:	3302      	adds	r3, #2
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002eca:	4b3b      	ldr	r3, [pc, #236]	; (8002fb8 <HAL_GPIO_Init+0x350>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002eee:	4a32      	ldr	r2, [pc, #200]	; (8002fb8 <HAL_GPIO_Init+0x350>)
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ef4:	4b30      	ldr	r3, [pc, #192]	; (8002fb8 <HAL_GPIO_Init+0x350>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	43db      	mvns	r3, r3
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4013      	ands	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f18:	4a27      	ldr	r2, [pc, #156]	; (8002fb8 <HAL_GPIO_Init+0x350>)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f1e:	4b26      	ldr	r3, [pc, #152]	; (8002fb8 <HAL_GPIO_Init+0x350>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	43db      	mvns	r3, r3
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f42:	4a1d      	ldr	r2, [pc, #116]	; (8002fb8 <HAL_GPIO_Init+0x350>)
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f48:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <HAL_GPIO_Init+0x350>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4013      	ands	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f6c:	4a12      	ldr	r2, [pc, #72]	; (8002fb8 <HAL_GPIO_Init+0x350>)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	3301      	adds	r3, #1
 8002f76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f47f ae78 	bne.w	8002c78 <HAL_GPIO_Init+0x10>
  }
}
 8002f88:	bf00      	nop
 8002f8a:	bf00      	nop
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	40010000 	.word	0x40010000
 8002fa0:	48000400 	.word	0x48000400
 8002fa4:	48000800 	.word	0x48000800
 8002fa8:	48000c00 	.word	0x48000c00
 8002fac:	48001000 	.word	0x48001000
 8002fb0:	48001400 	.word	0x48001400
 8002fb4:	48001800 	.word	0x48001800
 8002fb8:	40010400 	.word	0x40010400

08002fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	807b      	strh	r3, [r7, #2]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fcc:	787b      	ldrb	r3, [r7, #1]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fd2:	887a      	ldrh	r2, [r7, #2]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fd8:	e002      	b.n	8002fe0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fda:	887a      	ldrh	r2, [r7, #2]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e081      	b.n	8003102 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fe f8fe 	bl	8001214 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2224      	movs	r2, #36	; 0x24
 800301c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0201 	bic.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800303c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800304c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d107      	bne.n	8003066 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	e006      	b.n	8003074 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003072:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d104      	bne.n	8003086 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003084:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003098:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691a      	ldr	r2, [r3, #16]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69d9      	ldr	r1, [r3, #28]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1a      	ldr	r2, [r3, #32]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	461a      	mov	r2, r3
 8003118:	460b      	mov	r3, r1
 800311a:	817b      	strh	r3, [r7, #10]
 800311c:	4613      	mov	r3, r2
 800311e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b20      	cmp	r3, #32
 800312a:	f040 80da 	bne.w	80032e2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_I2C_Master_Transmit+0x30>
 8003138:	2302      	movs	r3, #2
 800313a:	e0d3      	b.n	80032e4 <HAL_I2C_Master_Transmit+0x1d8>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003144:	f7fe fa54 	bl	80015f0 <HAL_GetTick>
 8003148:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	2319      	movs	r3, #25
 8003150:	2201      	movs	r2, #1
 8003152:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 f9f7 	bl	800354a <I2C_WaitOnFlagUntilTimeout>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e0be      	b.n	80032e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2221      	movs	r2, #33	; 0x21
 800316a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2210      	movs	r2, #16
 8003172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	893a      	ldrh	r2, [r7, #8]
 8003186:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	2bff      	cmp	r3, #255	; 0xff
 8003196:	d90e      	bls.n	80031b6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	22ff      	movs	r2, #255	; 0xff
 800319c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	8979      	ldrh	r1, [r7, #10]
 80031a6:	4b51      	ldr	r3, [pc, #324]	; (80032ec <HAL_I2C_Master_Transmit+0x1e0>)
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fb74 	bl	800389c <I2C_TransferConfig>
 80031b4:	e06c      	b.n	8003290 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	8979      	ldrh	r1, [r7, #10]
 80031c8:	4b48      	ldr	r3, [pc, #288]	; (80032ec <HAL_I2C_Master_Transmit+0x1e0>)
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 fb63 	bl	800389c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80031d6:	e05b      	b.n	8003290 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	6a39      	ldr	r1, [r7, #32]
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 f9f4 	bl	80035ca <I2C_WaitOnTXISFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e07b      	b.n	80032e4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	781a      	ldrb	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003206:	b29b      	uxth	r3, r3
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d034      	beq.n	8003290 <HAL_I2C_Master_Transmit+0x184>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322a:	2b00      	cmp	r3, #0
 800322c:	d130      	bne.n	8003290 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	2200      	movs	r2, #0
 8003236:	2180      	movs	r1, #128	; 0x80
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f986 	bl	800354a <I2C_WaitOnFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e04d      	b.n	80032e4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324c:	b29b      	uxth	r3, r3
 800324e:	2bff      	cmp	r3, #255	; 0xff
 8003250:	d90e      	bls.n	8003270 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	22ff      	movs	r2, #255	; 0xff
 8003256:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325c:	b2da      	uxtb	r2, r3
 800325e:	8979      	ldrh	r1, [r7, #10]
 8003260:	2300      	movs	r3, #0
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 fb17 	bl	800389c <I2C_TransferConfig>
 800326e:	e00f      	b.n	8003290 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327e:	b2da      	uxtb	r2, r3
 8003280:	8979      	ldrh	r1, [r7, #10]
 8003282:	2300      	movs	r3, #0
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 fb06 	bl	800389c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d19e      	bne.n	80031d8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	6a39      	ldr	r1, [r7, #32]
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 f9d3 	bl	800364a <I2C_WaitOnSTOPFlagUntilTimeout>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e01a      	b.n	80032e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2220      	movs	r2, #32
 80032b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6859      	ldr	r1, [r3, #4]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <HAL_I2C_Master_Transmit+0x1e4>)
 80032c2:	400b      	ands	r3, r1
 80032c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032de:	2300      	movs	r3, #0
 80032e0:	e000      	b.n	80032e4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80032e2:	2302      	movs	r3, #2
  }
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	80002000 	.word	0x80002000
 80032f0:	fe00e800 	.word	0xfe00e800

080032f4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08a      	sub	sp, #40	; 0x28
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	607a      	str	r2, [r7, #4]
 80032fe:	603b      	str	r3, [r7, #0]
 8003300:	460b      	mov	r3, r1
 8003302:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b20      	cmp	r3, #32
 8003312:	f040 80f1 	bne.w	80034f8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003324:	d101      	bne.n	800332a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003326:	2302      	movs	r3, #2
 8003328:	e0e7      	b.n	80034fa <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_I2C_IsDeviceReady+0x44>
 8003334:	2302      	movs	r3, #2
 8003336:	e0e0      	b.n	80034fa <HAL_I2C_IsDeviceReady+0x206>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2224      	movs	r2, #36	; 0x24
 8003344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d107      	bne.n	8003366 <HAL_I2C_IsDeviceReady+0x72>
 8003356:	897b      	ldrh	r3, [r7, #10]
 8003358:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800335c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003360:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003364:	e004      	b.n	8003370 <HAL_I2C_IsDeviceReady+0x7c>
 8003366:	897b      	ldrh	r3, [r7, #10]
 8003368:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800336c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003376:	f7fe f93b 	bl	80015f0 <HAL_GetTick>
 800337a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b20      	cmp	r3, #32
 8003388:	bf0c      	ite	eq
 800338a:	2301      	moveq	r3, #1
 800338c:	2300      	movne	r3, #0
 800338e:	b2db      	uxtb	r3, r3
 8003390:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b10      	cmp	r3, #16
 800339e:	bf0c      	ite	eq
 80033a0:	2301      	moveq	r3, #1
 80033a2:	2300      	movne	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80033a8:	e034      	b.n	8003414 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033b0:	d01a      	beq.n	80033e8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033b2:	f7fe f91d 	bl	80015f0 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d302      	bcc.n	80033c8 <HAL_I2C_IsDeviceReady+0xd4>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10f      	bne.n	80033e8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d4:	f043 0220 	orr.w	r2, r3, #32
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e088      	b.n	80034fa <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	f003 0320 	and.w	r3, r3, #32
 80033f2:	2b20      	cmp	r3, #32
 80033f4:	bf0c      	ite	eq
 80033f6:	2301      	moveq	r3, #1
 80033f8:	2300      	movne	r3, #0
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	f003 0310 	and.w	r3, r3, #16
 8003408:	2b10      	cmp	r3, #16
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003414:	7ffb      	ldrb	r3, [r7, #31]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d102      	bne.n	8003420 <HAL_I2C_IsDeviceReady+0x12c>
 800341a:	7fbb      	ldrb	r3, [r7, #30]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0c4      	beq.n	80033aa <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	2b10      	cmp	r3, #16
 800342c:	d01a      	beq.n	8003464 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2200      	movs	r2, #0
 8003436:	2120      	movs	r1, #32
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f886 	bl	800354a <I2C_WaitOnFlagUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e058      	b.n	80034fa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2220      	movs	r2, #32
 800344e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003460:	2300      	movs	r3, #0
 8003462:	e04a      	b.n	80034fa <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	2200      	movs	r2, #0
 800346c:	2120      	movs	r1, #32
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f86b 	bl	800354a <I2C_WaitOnFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e03d      	b.n	80034fa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2210      	movs	r2, #16
 8003484:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2220      	movs	r2, #32
 800348c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	429a      	cmp	r2, r3
 8003494:	d118      	bne.n	80034c8 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034a4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2200      	movs	r2, #0
 80034ae:	2120      	movs	r1, #32
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f84a 	bl	800354a <I2C_WaitOnFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e01c      	b.n	80034fa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2220      	movs	r2, #32
 80034c6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	3301      	adds	r3, #1
 80034cc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	f63f af3b 	bhi.w	800334e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e4:	f043 0220 	orr.w	r2, r3, #32
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e000      	b.n	80034fa <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80034f8:	2302      	movs	r3, #2
  }
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3720      	adds	r7, #32
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b02      	cmp	r3, #2
 8003516:	d103      	bne.n	8003520 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2200      	movs	r2, #0
 800351e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b01      	cmp	r3, #1
 800352c:	d007      	beq.n	800353e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	699a      	ldr	r2, [r3, #24]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0201 	orr.w	r2, r2, #1
 800353c:	619a      	str	r2, [r3, #24]
  }
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	603b      	str	r3, [r7, #0]
 8003556:	4613      	mov	r3, r2
 8003558:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800355a:	e022      	b.n	80035a2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003562:	d01e      	beq.n	80035a2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003564:	f7fe f844 	bl	80015f0 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d302      	bcc.n	800357a <I2C_WaitOnFlagUntilTimeout+0x30>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d113      	bne.n	80035a2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357e:	f043 0220 	orr.w	r2, r3, #32
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e00f      	b.n	80035c2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699a      	ldr	r2, [r3, #24]
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4013      	ands	r3, r2
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	bf0c      	ite	eq
 80035b2:	2301      	moveq	r3, #1
 80035b4:	2300      	movne	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d0cd      	beq.n	800355c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b084      	sub	sp, #16
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035d6:	e02c      	b.n	8003632 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	68b9      	ldr	r1, [r7, #8]
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 f871 	bl	80036c4 <I2C_IsErrorOccurred>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e02a      	b.n	8003642 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035f2:	d01e      	beq.n	8003632 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f4:	f7fd fffc 	bl	80015f0 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	429a      	cmp	r2, r3
 8003602:	d302      	bcc.n	800360a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d113      	bne.n	8003632 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	f043 0220 	orr.w	r2, r3, #32
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2220      	movs	r2, #32
 800361a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e007      	b.n	8003642 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b02      	cmp	r3, #2
 800363e:	d1cb      	bne.n	80035d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b084      	sub	sp, #16
 800364e:	af00      	add	r7, sp, #0
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003656:	e028      	b.n	80036aa <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	68b9      	ldr	r1, [r7, #8]
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 f831 	bl	80036c4 <I2C_IsErrorOccurred>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e026      	b.n	80036ba <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366c:	f7fd ffc0 	bl	80015f0 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	429a      	cmp	r2, r3
 800367a:	d302      	bcc.n	8003682 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d113      	bne.n	80036aa <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003686:	f043 0220 	orr.w	r2, r3, #32
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2220      	movs	r2, #32
 8003692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e007      	b.n	80036ba <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	f003 0320 	and.w	r3, r3, #32
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	d1cf      	bne.n	8003658 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
	...

080036c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08a      	sub	sp, #40	; 0x28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036de:	2300      	movs	r3, #0
 80036e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	f003 0310 	and.w	r3, r3, #16
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d075      	beq.n	80037dc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2210      	movs	r2, #16
 80036f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036f8:	e056      	b.n	80037a8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003700:	d052      	beq.n	80037a8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003702:	f7fd ff75 	bl	80015f0 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	429a      	cmp	r2, r3
 8003710:	d302      	bcc.n	8003718 <I2C_IsErrorOccurred+0x54>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d147      	bne.n	80037a8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003722:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800372a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800373a:	d12e      	bne.n	800379a <I2C_IsErrorOccurred+0xd6>
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003742:	d02a      	beq.n	800379a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003744:	7cfb      	ldrb	r3, [r7, #19]
 8003746:	2b20      	cmp	r3, #32
 8003748:	d027      	beq.n	800379a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003758:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800375a:	f7fd ff49 	bl	80015f0 <HAL_GetTick>
 800375e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003760:	e01b      	b.n	800379a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003762:	f7fd ff45 	bl	80015f0 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b19      	cmp	r3, #25
 800376e:	d914      	bls.n	800379a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003774:	f043 0220 	orr.w	r2, r3, #32
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b20      	cmp	r3, #32
 80037a6:	d1dc      	bne.n	8003762 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f003 0320 	and.w	r3, r3, #32
 80037b2:	2b20      	cmp	r3, #32
 80037b4:	d003      	beq.n	80037be <I2C_IsErrorOccurred+0xfa>
 80037b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d09d      	beq.n	80036fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d103      	bne.n	80037ce <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2220      	movs	r2, #32
 80037cc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	f043 0304 	orr.w	r3, r3, #4
 80037d4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00b      	beq.n	8003806 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00b      	beq.n	8003828 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	f043 0308 	orr.w	r3, r3, #8
 8003816:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003820:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00b      	beq.n	800384a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	f043 0302 	orr.w	r3, r3, #2
 8003838:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003842:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800384a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800384e:	2b00      	cmp	r3, #0
 8003850:	d01c      	beq.n	800388c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f7ff fe55 	bl	8003502 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6859      	ldr	r1, [r3, #4]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <I2C_IsErrorOccurred+0x1d4>)
 8003864:	400b      	ands	r3, r1
 8003866:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	431a      	orrs	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800388c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003890:	4618      	mov	r0, r3
 8003892:	3728      	adds	r7, #40	; 0x28
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	fe00e800 	.word	0xfe00e800

0800389c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	607b      	str	r3, [r7, #4]
 80038a6:	460b      	mov	r3, r1
 80038a8:	817b      	strh	r3, [r7, #10]
 80038aa:	4613      	mov	r3, r2
 80038ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038ae:	897b      	ldrh	r3, [r7, #10]
 80038b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038b4:	7a7b      	ldrb	r3, [r7, #9]
 80038b6:	041b      	lsls	r3, r3, #16
 80038b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	0d5b      	lsrs	r3, r3, #21
 80038d6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038da:	4b08      	ldr	r3, [pc, #32]	; (80038fc <I2C_TransferConfig+0x60>)
 80038dc:	430b      	orrs	r3, r1
 80038de:	43db      	mvns	r3, r3
 80038e0:	ea02 0103 	and.w	r1, r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038ee:	bf00      	nop
 80038f0:	371c      	adds	r7, #28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	03ff63ff 	.word	0x03ff63ff

08003900 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b20      	cmp	r3, #32
 8003914:	d138      	bne.n	8003988 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003920:	2302      	movs	r3, #2
 8003922:	e032      	b.n	800398a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2224      	movs	r2, #36	; 0x24
 8003930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0201 	bic.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003952:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6819      	ldr	r1, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0201 	orr.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	e000      	b.n	800398a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003988:	2302      	movs	r3, #2
  }
}
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003996:	b480      	push	{r7}
 8003998:	b085      	sub	sp, #20
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b20      	cmp	r3, #32
 80039aa:	d139      	bne.n	8003a20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e033      	b.n	8003a22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2224      	movs	r2, #36	; 0x24
 80039c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0201 	bic.w	r2, r2, #1
 80039d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	021b      	lsls	r3, r3, #8
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	e000      	b.n	8003a22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a20:	2302      	movs	r3, #2
  }
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a34:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40007000 	.word	0x40007000

08003a4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a5a:	d130      	bne.n	8003abe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a5c:	4b23      	ldr	r3, [pc, #140]	; (8003aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a68:	d038      	beq.n	8003adc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a6a:	4b20      	ldr	r3, [pc, #128]	; (8003aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a72:	4a1e      	ldr	r2, [pc, #120]	; (8003aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a7a:	4b1d      	ldr	r3, [pc, #116]	; (8003af0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2232      	movs	r2, #50	; 0x32
 8003a80:	fb02 f303 	mul.w	r3, r2, r3
 8003a84:	4a1b      	ldr	r2, [pc, #108]	; (8003af4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a86:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8a:	0c9b      	lsrs	r3, r3, #18
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a90:	e002      	b.n	8003a98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3b01      	subs	r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a98:	4b14      	ldr	r3, [pc, #80]	; (8003aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa4:	d102      	bne.n	8003aac <HAL_PWREx_ControlVoltageScaling+0x60>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1f2      	bne.n	8003a92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003aac:	4b0f      	ldr	r3, [pc, #60]	; (8003aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab8:	d110      	bne.n	8003adc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e00f      	b.n	8003ade <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003abe:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aca:	d007      	beq.n	8003adc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003acc:	4b07      	ldr	r3, [pc, #28]	; (8003aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ad4:	4a05      	ldr	r2, [pc, #20]	; (8003aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ada:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	40007000 	.word	0x40007000
 8003af0:	2000000c 	.word	0x2000000c
 8003af4:	431bde83 	.word	0x431bde83

08003af8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e3ca      	b.n	80042a0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b0a:	4b97      	ldr	r3, [pc, #604]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 030c 	and.w	r3, r3, #12
 8003b12:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b14:	4b94      	ldr	r3, [pc, #592]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f003 0303 	and.w	r3, r3, #3
 8003b1c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0310 	and.w	r3, r3, #16
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 80e4 	beq.w	8003cf4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d007      	beq.n	8003b42 <HAL_RCC_OscConfig+0x4a>
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	2b0c      	cmp	r3, #12
 8003b36:	f040 808b 	bne.w	8003c50 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	f040 8087 	bne.w	8003c50 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b42:	4b89      	ldr	r3, [pc, #548]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d005      	beq.n	8003b5a <HAL_RCC_OscConfig+0x62>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e3a2      	b.n	80042a0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1a      	ldr	r2, [r3, #32]
 8003b5e:	4b82      	ldr	r3, [pc, #520]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d004      	beq.n	8003b74 <HAL_RCC_OscConfig+0x7c>
 8003b6a:	4b7f      	ldr	r3, [pc, #508]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b72:	e005      	b.n	8003b80 <HAL_RCC_OscConfig+0x88>
 8003b74:	4b7c      	ldr	r3, [pc, #496]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b7a:	091b      	lsrs	r3, r3, #4
 8003b7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d223      	bcs.n	8003bcc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fd55 	bl	8004638 <RCC_SetFlashLatencyFromMSIRange>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e383      	b.n	80042a0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b98:	4b73      	ldr	r3, [pc, #460]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a72      	ldr	r2, [pc, #456]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003b9e:	f043 0308 	orr.w	r3, r3, #8
 8003ba2:	6013      	str	r3, [r2, #0]
 8003ba4:	4b70      	ldr	r3, [pc, #448]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	496d      	ldr	r1, [pc, #436]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bb6:	4b6c      	ldr	r3, [pc, #432]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	021b      	lsls	r3, r3, #8
 8003bc4:	4968      	ldr	r1, [pc, #416]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	604b      	str	r3, [r1, #4]
 8003bca:	e025      	b.n	8003c18 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bcc:	4b66      	ldr	r3, [pc, #408]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a65      	ldr	r2, [pc, #404]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003bd2:	f043 0308 	orr.w	r3, r3, #8
 8003bd6:	6013      	str	r3, [r2, #0]
 8003bd8:	4b63      	ldr	r3, [pc, #396]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	4960      	ldr	r1, [pc, #384]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bea:	4b5f      	ldr	r3, [pc, #380]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	495b      	ldr	r1, [pc, #364]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d109      	bne.n	8003c18 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 fd15 	bl	8004638 <RCC_SetFlashLatencyFromMSIRange>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e343      	b.n	80042a0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c18:	f000 fc4a 	bl	80044b0 <HAL_RCC_GetSysClockFreq>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	4b52      	ldr	r3, [pc, #328]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	091b      	lsrs	r3, r3, #4
 8003c24:	f003 030f 	and.w	r3, r3, #15
 8003c28:	4950      	ldr	r1, [pc, #320]	; (8003d6c <HAL_RCC_OscConfig+0x274>)
 8003c2a:	5ccb      	ldrb	r3, [r1, r3]
 8003c2c:	f003 031f 	and.w	r3, r3, #31
 8003c30:	fa22 f303 	lsr.w	r3, r2, r3
 8003c34:	4a4e      	ldr	r2, [pc, #312]	; (8003d70 <HAL_RCC_OscConfig+0x278>)
 8003c36:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c38:	4b4e      	ldr	r3, [pc, #312]	; (8003d74 <HAL_RCC_OscConfig+0x27c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fd fc87 	bl	8001550 <HAL_InitTick>
 8003c42:	4603      	mov	r3, r0
 8003c44:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d052      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
 8003c4e:	e327      	b.n	80042a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d032      	beq.n	8003cbe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c58:	4b43      	ldr	r3, [pc, #268]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a42      	ldr	r2, [pc, #264]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003c5e:	f043 0301 	orr.w	r3, r3, #1
 8003c62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c64:	f7fd fcc4 	bl	80015f0 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c6c:	f7fd fcc0 	bl	80015f0 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e310      	b.n	80042a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c7e:	4b3a      	ldr	r3, [pc, #232]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0f0      	beq.n	8003c6c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c8a:	4b37      	ldr	r3, [pc, #220]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a36      	ldr	r2, [pc, #216]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003c90:	f043 0308 	orr.w	r3, r3, #8
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	4b34      	ldr	r3, [pc, #208]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	4931      	ldr	r1, [pc, #196]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ca8:	4b2f      	ldr	r3, [pc, #188]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	021b      	lsls	r3, r3, #8
 8003cb6:	492c      	ldr	r1, [pc, #176]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	604b      	str	r3, [r1, #4]
 8003cbc:	e01a      	b.n	8003cf4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003cbe:	4b2a      	ldr	r3, [pc, #168]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a29      	ldr	r2, [pc, #164]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003cc4:	f023 0301 	bic.w	r3, r3, #1
 8003cc8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cca:	f7fd fc91 	bl	80015f0 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cd2:	f7fd fc8d 	bl	80015f0 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e2dd      	b.n	80042a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ce4:	4b20      	ldr	r3, [pc, #128]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1f0      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x1da>
 8003cf0:	e000      	b.n	8003cf4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cf2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d074      	beq.n	8003dea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d005      	beq.n	8003d12 <HAL_RCC_OscConfig+0x21a>
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	2b0c      	cmp	r3, #12
 8003d0a:	d10e      	bne.n	8003d2a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2b03      	cmp	r3, #3
 8003d10:	d10b      	bne.n	8003d2a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d12:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d064      	beq.n	8003de8 <HAL_RCC_OscConfig+0x2f0>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d160      	bne.n	8003de8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e2ba      	b.n	80042a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d32:	d106      	bne.n	8003d42 <HAL_RCC_OscConfig+0x24a>
 8003d34:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a0b      	ldr	r2, [pc, #44]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	e026      	b.n	8003d90 <HAL_RCC_OscConfig+0x298>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d4a:	d115      	bne.n	8003d78 <HAL_RCC_OscConfig+0x280>
 8003d4c:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a05      	ldr	r2, [pc, #20]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003d52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	4b03      	ldr	r3, [pc, #12]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a02      	ldr	r2, [pc, #8]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	e014      	b.n	8003d90 <HAL_RCC_OscConfig+0x298>
 8003d66:	bf00      	nop
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	080071e8 	.word	0x080071e8
 8003d70:	2000000c 	.word	0x2000000c
 8003d74:	20000010 	.word	0x20000010
 8003d78:	4ba0      	ldr	r3, [pc, #640]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a9f      	ldr	r2, [pc, #636]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d82:	6013      	str	r3, [r2, #0]
 8003d84:	4b9d      	ldr	r3, [pc, #628]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a9c      	ldr	r2, [pc, #624]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d013      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d98:	f7fd fc2a 	bl	80015f0 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da0:	f7fd fc26 	bl	80015f0 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b64      	cmp	r3, #100	; 0x64
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e276      	b.n	80042a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003db2:	4b92      	ldr	r3, [pc, #584]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0f0      	beq.n	8003da0 <HAL_RCC_OscConfig+0x2a8>
 8003dbe:	e014      	b.n	8003dea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc0:	f7fd fc16 	bl	80015f0 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc8:	f7fd fc12 	bl	80015f0 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b64      	cmp	r3, #100	; 0x64
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e262      	b.n	80042a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dda:	4b88      	ldr	r3, [pc, #544]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x2d0>
 8003de6:	e000      	b.n	8003dea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d060      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d005      	beq.n	8003e08 <HAL_RCC_OscConfig+0x310>
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	2b0c      	cmp	r3, #12
 8003e00:	d119      	bne.n	8003e36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d116      	bne.n	8003e36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e08:	4b7c      	ldr	r3, [pc, #496]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_RCC_OscConfig+0x328>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e23f      	b.n	80042a0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e20:	4b76      	ldr	r3, [pc, #472]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	061b      	lsls	r3, r3, #24
 8003e2e:	4973      	ldr	r1, [pc, #460]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e34:	e040      	b.n	8003eb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d023      	beq.n	8003e86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e3e:	4b6f      	ldr	r3, [pc, #444]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a6e      	ldr	r2, [pc, #440]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4a:	f7fd fbd1 	bl	80015f0 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e52:	f7fd fbcd 	bl	80015f0 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e21d      	b.n	80042a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e64:	4b65      	ldr	r3, [pc, #404]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0f0      	beq.n	8003e52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e70:	4b62      	ldr	r3, [pc, #392]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	061b      	lsls	r3, r3, #24
 8003e7e:	495f      	ldr	r1, [pc, #380]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	604b      	str	r3, [r1, #4]
 8003e84:	e018      	b.n	8003eb8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e86:	4b5d      	ldr	r3, [pc, #372]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a5c      	ldr	r2, [pc, #368]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e92:	f7fd fbad 	bl	80015f0 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e9a:	f7fd fba9 	bl	80015f0 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e1f9      	b.n	80042a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003eac:	4b53      	ldr	r3, [pc, #332]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1f0      	bne.n	8003e9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d03c      	beq.n	8003f3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d01c      	beq.n	8003f06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ecc:	4b4b      	ldr	r3, [pc, #300]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ed2:	4a4a      	ldr	r2, [pc, #296]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003edc:	f7fd fb88 	bl	80015f0 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee4:	f7fd fb84 	bl	80015f0 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e1d4      	b.n	80042a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ef6:	4b41      	ldr	r3, [pc, #260]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0ef      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x3ec>
 8003f04:	e01b      	b.n	8003f3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f06:	4b3d      	ldr	r3, [pc, #244]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f0c:	4a3b      	ldr	r2, [pc, #236]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003f0e:	f023 0301 	bic.w	r3, r3, #1
 8003f12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f16:	f7fd fb6b 	bl	80015f0 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f1e:	f7fd fb67 	bl	80015f0 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e1b7      	b.n	80042a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f30:	4b32      	ldr	r3, [pc, #200]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1ef      	bne.n	8003f1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 80a6 	beq.w	8004098 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f50:	4b2a      	ldr	r3, [pc, #168]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10d      	bne.n	8003f78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f5c:	4b27      	ldr	r3, [pc, #156]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f60:	4a26      	ldr	r2, [pc, #152]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f66:	6593      	str	r3, [r2, #88]	; 0x58
 8003f68:	4b24      	ldr	r3, [pc, #144]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f70:	60bb      	str	r3, [r7, #8]
 8003f72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f74:	2301      	movs	r3, #1
 8003f76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f78:	4b21      	ldr	r3, [pc, #132]	; (8004000 <HAL_RCC_OscConfig+0x508>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d118      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f84:	4b1e      	ldr	r3, [pc, #120]	; (8004000 <HAL_RCC_OscConfig+0x508>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a1d      	ldr	r2, [pc, #116]	; (8004000 <HAL_RCC_OscConfig+0x508>)
 8003f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f90:	f7fd fb2e 	bl	80015f0 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f98:	f7fd fb2a 	bl	80015f0 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e17a      	b.n	80042a0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003faa:	4b15      	ldr	r3, [pc, #84]	; (8004000 <HAL_RCC_OscConfig+0x508>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f0      	beq.n	8003f98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d108      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x4d8>
 8003fbe:	4b0f      	ldr	r3, [pc, #60]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc4:	4a0d      	ldr	r2, [pc, #52]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003fc6:	f043 0301 	orr.w	r3, r3, #1
 8003fca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fce:	e029      	b.n	8004024 <HAL_RCC_OscConfig+0x52c>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2b05      	cmp	r3, #5
 8003fd6:	d115      	bne.n	8004004 <HAL_RCC_OscConfig+0x50c>
 8003fd8:	4b08      	ldr	r3, [pc, #32]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fde:	4a07      	ldr	r2, [pc, #28]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003fe0:	f043 0304 	orr.w	r3, r3, #4
 8003fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fe8:	4b04      	ldr	r3, [pc, #16]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fee:	4a03      	ldr	r2, [pc, #12]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ff8:	e014      	b.n	8004024 <HAL_RCC_OscConfig+0x52c>
 8003ffa:	bf00      	nop
 8003ffc:	40021000 	.word	0x40021000
 8004000:	40007000 	.word	0x40007000
 8004004:	4b9c      	ldr	r3, [pc, #624]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400a:	4a9b      	ldr	r2, [pc, #620]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 800400c:	f023 0301 	bic.w	r3, r3, #1
 8004010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004014:	4b98      	ldr	r3, [pc, #608]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401a:	4a97      	ldr	r2, [pc, #604]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 800401c:	f023 0304 	bic.w	r3, r3, #4
 8004020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d016      	beq.n	800405a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402c:	f7fd fae0 	bl	80015f0 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004032:	e00a      	b.n	800404a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004034:	f7fd fadc 	bl	80015f0 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004042:	4293      	cmp	r3, r2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e12a      	b.n	80042a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800404a:	4b8b      	ldr	r3, [pc, #556]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0ed      	beq.n	8004034 <HAL_RCC_OscConfig+0x53c>
 8004058:	e015      	b.n	8004086 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405a:	f7fd fac9 	bl	80015f0 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004060:	e00a      	b.n	8004078 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004062:	f7fd fac5 	bl	80015f0 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e113      	b.n	80042a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004078:	4b7f      	ldr	r3, [pc, #508]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1ed      	bne.n	8004062 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004086:	7ffb      	ldrb	r3, [r7, #31]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d105      	bne.n	8004098 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800408c:	4b7a      	ldr	r3, [pc, #488]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 800408e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004090:	4a79      	ldr	r2, [pc, #484]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 8004092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004096:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 80fe 	beq.w	800429e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	f040 80d0 	bne.w	800424c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80040ac:	4b72      	ldr	r3, [pc, #456]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f003 0203 	and.w	r2, r3, #3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	429a      	cmp	r2, r3
 80040be:	d130      	bne.n	8004122 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	3b01      	subs	r3, #1
 80040cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d127      	bne.n	8004122 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040de:	429a      	cmp	r2, r3
 80040e0:	d11f      	bne.n	8004122 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040ec:	2a07      	cmp	r2, #7
 80040ee:	bf14      	ite	ne
 80040f0:	2201      	movne	r2, #1
 80040f2:	2200      	moveq	r2, #0
 80040f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d113      	bne.n	8004122 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004104:	085b      	lsrs	r3, r3, #1
 8004106:	3b01      	subs	r3, #1
 8004108:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800410a:	429a      	cmp	r2, r3
 800410c:	d109      	bne.n	8004122 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	085b      	lsrs	r3, r3, #1
 800411a:	3b01      	subs	r3, #1
 800411c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800411e:	429a      	cmp	r2, r3
 8004120:	d06e      	beq.n	8004200 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	2b0c      	cmp	r3, #12
 8004126:	d069      	beq.n	80041fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004128:	4b53      	ldr	r3, [pc, #332]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d105      	bne.n	8004140 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004134:	4b50      	ldr	r3, [pc, #320]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0ad      	b.n	80042a0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004144:	4b4c      	ldr	r3, [pc, #304]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a4b      	ldr	r2, [pc, #300]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 800414a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800414e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004150:	f7fd fa4e 	bl	80015f0 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004158:	f7fd fa4a 	bl	80015f0 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e09a      	b.n	80042a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800416a:	4b43      	ldr	r3, [pc, #268]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1f0      	bne.n	8004158 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004176:	4b40      	ldr	r3, [pc, #256]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	4b40      	ldr	r3, [pc, #256]	; (800427c <HAL_RCC_OscConfig+0x784>)
 800417c:	4013      	ands	r3, r2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004186:	3a01      	subs	r2, #1
 8004188:	0112      	lsls	r2, r2, #4
 800418a:	4311      	orrs	r1, r2
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004190:	0212      	lsls	r2, r2, #8
 8004192:	4311      	orrs	r1, r2
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004198:	0852      	lsrs	r2, r2, #1
 800419a:	3a01      	subs	r2, #1
 800419c:	0552      	lsls	r2, r2, #21
 800419e:	4311      	orrs	r1, r2
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80041a4:	0852      	lsrs	r2, r2, #1
 80041a6:	3a01      	subs	r2, #1
 80041a8:	0652      	lsls	r2, r2, #25
 80041aa:	4311      	orrs	r1, r2
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041b0:	0912      	lsrs	r2, r2, #4
 80041b2:	0452      	lsls	r2, r2, #17
 80041b4:	430a      	orrs	r2, r1
 80041b6:	4930      	ldr	r1, [pc, #192]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80041bc:	4b2e      	ldr	r3, [pc, #184]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a2d      	ldr	r2, [pc, #180]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 80041c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041c8:	4b2b      	ldr	r3, [pc, #172]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	4a2a      	ldr	r2, [pc, #168]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 80041ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041d4:	f7fd fa0c 	bl	80015f0 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041dc:	f7fd fa08 	bl	80015f0 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e058      	b.n	80042a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ee:	4b22      	ldr	r3, [pc, #136]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041fa:	e050      	b.n	800429e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e04f      	b.n	80042a0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004200:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d148      	bne.n	800429e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800420c:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a19      	ldr	r2, [pc, #100]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 8004212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004216:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004218:	4b17      	ldr	r3, [pc, #92]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	4a16      	ldr	r2, [pc, #88]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 800421e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004222:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004224:	f7fd f9e4 	bl	80015f0 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800422c:	f7fd f9e0 	bl	80015f0 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e030      	b.n	80042a0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800423e:	4b0e      	ldr	r3, [pc, #56]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f0      	beq.n	800422c <HAL_RCC_OscConfig+0x734>
 800424a:	e028      	b.n	800429e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	2b0c      	cmp	r3, #12
 8004250:	d023      	beq.n	800429a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004252:	4b09      	ldr	r3, [pc, #36]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a08      	ldr	r2, [pc, #32]	; (8004278 <HAL_RCC_OscConfig+0x780>)
 8004258:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800425c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425e:	f7fd f9c7 	bl	80015f0 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004264:	e00c      	b.n	8004280 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004266:	f7fd f9c3 	bl	80015f0 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d905      	bls.n	8004280 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e013      	b.n	80042a0 <HAL_RCC_OscConfig+0x7a8>
 8004278:	40021000 	.word	0x40021000
 800427c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004280:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <HAL_RCC_OscConfig+0x7b0>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1ec      	bne.n	8004266 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800428c:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <HAL_RCC_OscConfig+0x7b0>)
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	4905      	ldr	r1, [pc, #20]	; (80042a8 <HAL_RCC_OscConfig+0x7b0>)
 8004292:	4b06      	ldr	r3, [pc, #24]	; (80042ac <HAL_RCC_OscConfig+0x7b4>)
 8004294:	4013      	ands	r3, r2
 8004296:	60cb      	str	r3, [r1, #12]
 8004298:	e001      	b.n	800429e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e000      	b.n	80042a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3720      	adds	r7, #32
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40021000 	.word	0x40021000
 80042ac:	feeefffc 	.word	0xfeeefffc

080042b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0e7      	b.n	8004494 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042c4:	4b75      	ldr	r3, [pc, #468]	; (800449c <HAL_RCC_ClockConfig+0x1ec>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d910      	bls.n	80042f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d2:	4b72      	ldr	r3, [pc, #456]	; (800449c <HAL_RCC_ClockConfig+0x1ec>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f023 0207 	bic.w	r2, r3, #7
 80042da:	4970      	ldr	r1, [pc, #448]	; (800449c <HAL_RCC_ClockConfig+0x1ec>)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	4313      	orrs	r3, r2
 80042e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e2:	4b6e      	ldr	r3, [pc, #440]	; (800449c <HAL_RCC_ClockConfig+0x1ec>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d001      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0cf      	b.n	8004494 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d010      	beq.n	8004322 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	4b66      	ldr	r3, [pc, #408]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800430c:	429a      	cmp	r2, r3
 800430e:	d908      	bls.n	8004322 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004310:	4b63      	ldr	r3, [pc, #396]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	4960      	ldr	r1, [pc, #384]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 800431e:	4313      	orrs	r3, r2
 8004320:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d04c      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b03      	cmp	r3, #3
 8004334:	d107      	bne.n	8004346 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004336:	4b5a      	ldr	r3, [pc, #360]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d121      	bne.n	8004386 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e0a6      	b.n	8004494 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d107      	bne.n	800435e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800434e:	4b54      	ldr	r3, [pc, #336]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d115      	bne.n	8004386 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e09a      	b.n	8004494 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d107      	bne.n	8004376 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004366:	4b4e      	ldr	r3, [pc, #312]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d109      	bne.n	8004386 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e08e      	b.n	8004494 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004376:	4b4a      	ldr	r3, [pc, #296]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e086      	b.n	8004494 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004386:	4b46      	ldr	r3, [pc, #280]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f023 0203 	bic.w	r2, r3, #3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	4943      	ldr	r1, [pc, #268]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004394:	4313      	orrs	r3, r2
 8004396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004398:	f7fd f92a 	bl	80015f0 <HAL_GetTick>
 800439c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439e:	e00a      	b.n	80043b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a0:	f7fd f926 	bl	80015f0 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e06e      	b.n	8004494 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b6:	4b3a      	ldr	r3, [pc, #232]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 020c 	and.w	r2, r3, #12
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d1eb      	bne.n	80043a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d010      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	4b31      	ldr	r3, [pc, #196]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d208      	bcs.n	80043f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043e4:	4b2e      	ldr	r3, [pc, #184]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	492b      	ldr	r1, [pc, #172]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043f6:	4b29      	ldr	r3, [pc, #164]	; (800449c <HAL_RCC_ClockConfig+0x1ec>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d210      	bcs.n	8004426 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004404:	4b25      	ldr	r3, [pc, #148]	; (800449c <HAL_RCC_ClockConfig+0x1ec>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f023 0207 	bic.w	r2, r3, #7
 800440c:	4923      	ldr	r1, [pc, #140]	; (800449c <HAL_RCC_ClockConfig+0x1ec>)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	4313      	orrs	r3, r2
 8004412:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004414:	4b21      	ldr	r3, [pc, #132]	; (800449c <HAL_RCC_ClockConfig+0x1ec>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d001      	beq.n	8004426 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e036      	b.n	8004494 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	2b00      	cmp	r3, #0
 8004430:	d008      	beq.n	8004444 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004432:	4b1b      	ldr	r3, [pc, #108]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	4918      	ldr	r1, [pc, #96]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004440:	4313      	orrs	r3, r2
 8004442:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d009      	beq.n	8004464 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004450:	4b13      	ldr	r3, [pc, #76]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	4910      	ldr	r1, [pc, #64]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004460:	4313      	orrs	r3, r2
 8004462:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004464:	f000 f824 	bl	80044b0 <HAL_RCC_GetSysClockFreq>
 8004468:	4602      	mov	r2, r0
 800446a:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	091b      	lsrs	r3, r3, #4
 8004470:	f003 030f 	and.w	r3, r3, #15
 8004474:	490b      	ldr	r1, [pc, #44]	; (80044a4 <HAL_RCC_ClockConfig+0x1f4>)
 8004476:	5ccb      	ldrb	r3, [r1, r3]
 8004478:	f003 031f 	and.w	r3, r3, #31
 800447c:	fa22 f303 	lsr.w	r3, r2, r3
 8004480:	4a09      	ldr	r2, [pc, #36]	; (80044a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004482:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004484:	4b09      	ldr	r3, [pc, #36]	; (80044ac <HAL_RCC_ClockConfig+0x1fc>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4618      	mov	r0, r3
 800448a:	f7fd f861 	bl	8001550 <HAL_InitTick>
 800448e:	4603      	mov	r3, r0
 8004490:	72fb      	strb	r3, [r7, #11]

  return status;
 8004492:	7afb      	ldrb	r3, [r7, #11]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40022000 	.word	0x40022000
 80044a0:	40021000 	.word	0x40021000
 80044a4:	080071e8 	.word	0x080071e8
 80044a8:	2000000c 	.word	0x2000000c
 80044ac:	20000010 	.word	0x20000010

080044b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b089      	sub	sp, #36	; 0x24
 80044b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61fb      	str	r3, [r7, #28]
 80044ba:	2300      	movs	r3, #0
 80044bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044be:	4b3e      	ldr	r3, [pc, #248]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
 80044c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044c8:	4b3b      	ldr	r3, [pc, #236]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f003 0303 	and.w	r3, r3, #3
 80044d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d005      	beq.n	80044e4 <HAL_RCC_GetSysClockFreq+0x34>
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	2b0c      	cmp	r3, #12
 80044dc:	d121      	bne.n	8004522 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d11e      	bne.n	8004522 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80044e4:	4b34      	ldr	r3, [pc, #208]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d107      	bne.n	8004500 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044f0:	4b31      	ldr	r3, [pc, #196]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80044f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044f6:	0a1b      	lsrs	r3, r3, #8
 80044f8:	f003 030f 	and.w	r3, r3, #15
 80044fc:	61fb      	str	r3, [r7, #28]
 80044fe:	e005      	b.n	800450c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004500:	4b2d      	ldr	r3, [pc, #180]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	091b      	lsrs	r3, r3, #4
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800450c:	4a2b      	ldr	r2, [pc, #172]	; (80045bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004514:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10d      	bne.n	8004538 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004520:	e00a      	b.n	8004538 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	2b04      	cmp	r3, #4
 8004526:	d102      	bne.n	800452e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004528:	4b25      	ldr	r3, [pc, #148]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800452a:	61bb      	str	r3, [r7, #24]
 800452c:	e004      	b.n	8004538 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	2b08      	cmp	r3, #8
 8004532:	d101      	bne.n	8004538 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004534:	4b23      	ldr	r3, [pc, #140]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004536:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	2b0c      	cmp	r3, #12
 800453c:	d134      	bne.n	80045a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800453e:	4b1e      	ldr	r3, [pc, #120]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d003      	beq.n	8004556 <HAL_RCC_GetSysClockFreq+0xa6>
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b03      	cmp	r3, #3
 8004552:	d003      	beq.n	800455c <HAL_RCC_GetSysClockFreq+0xac>
 8004554:	e005      	b.n	8004562 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004556:	4b1a      	ldr	r3, [pc, #104]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004558:	617b      	str	r3, [r7, #20]
      break;
 800455a:	e005      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800455c:	4b19      	ldr	r3, [pc, #100]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800455e:	617b      	str	r3, [r7, #20]
      break;
 8004560:	e002      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	617b      	str	r3, [r7, #20]
      break;
 8004566:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004568:	4b13      	ldr	r3, [pc, #76]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	091b      	lsrs	r3, r3, #4
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	3301      	adds	r3, #1
 8004574:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004576:	4b10      	ldr	r3, [pc, #64]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	0a1b      	lsrs	r3, r3, #8
 800457c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	fb03 f202 	mul.w	r2, r3, r2
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	fbb2 f3f3 	udiv	r3, r2, r3
 800458c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800458e:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	0e5b      	lsrs	r3, r3, #25
 8004594:	f003 0303 	and.w	r3, r3, #3
 8004598:	3301      	adds	r3, #1
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80045a8:	69bb      	ldr	r3, [r7, #24]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3724      	adds	r7, #36	; 0x24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40021000 	.word	0x40021000
 80045bc:	08007200 	.word	0x08007200
 80045c0:	00f42400 	.word	0x00f42400
 80045c4:	007a1200 	.word	0x007a1200

080045c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045cc:	4b03      	ldr	r3, [pc, #12]	; (80045dc <HAL_RCC_GetHCLKFreq+0x14>)
 80045ce:	681b      	ldr	r3, [r3, #0]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	2000000c 	.word	0x2000000c

080045e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80045e4:	f7ff fff0 	bl	80045c8 <HAL_RCC_GetHCLKFreq>
 80045e8:	4602      	mov	r2, r0
 80045ea:	4b06      	ldr	r3, [pc, #24]	; (8004604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	0a1b      	lsrs	r3, r3, #8
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	4904      	ldr	r1, [pc, #16]	; (8004608 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045f6:	5ccb      	ldrb	r3, [r1, r3]
 80045f8:	f003 031f 	and.w	r3, r3, #31
 80045fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004600:	4618      	mov	r0, r3
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40021000 	.word	0x40021000
 8004608:	080071f8 	.word	0x080071f8

0800460c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004610:	f7ff ffda 	bl	80045c8 <HAL_RCC_GetHCLKFreq>
 8004614:	4602      	mov	r2, r0
 8004616:	4b06      	ldr	r3, [pc, #24]	; (8004630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	0adb      	lsrs	r3, r3, #11
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	4904      	ldr	r1, [pc, #16]	; (8004634 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004622:	5ccb      	ldrb	r3, [r1, r3]
 8004624:	f003 031f 	and.w	r3, r3, #31
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800462c:	4618      	mov	r0, r3
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40021000 	.word	0x40021000
 8004634:	080071f8 	.word	0x080071f8

08004638 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004640:	2300      	movs	r3, #0
 8004642:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004644:	4b2a      	ldr	r3, [pc, #168]	; (80046f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004650:	f7ff f9ee 	bl	8003a30 <HAL_PWREx_GetVoltageRange>
 8004654:	6178      	str	r0, [r7, #20]
 8004656:	e014      	b.n	8004682 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004658:	4b25      	ldr	r3, [pc, #148]	; (80046f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800465a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465c:	4a24      	ldr	r2, [pc, #144]	; (80046f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800465e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004662:	6593      	str	r3, [r2, #88]	; 0x58
 8004664:	4b22      	ldr	r3, [pc, #136]	; (80046f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004670:	f7ff f9de 	bl	8003a30 <HAL_PWREx_GetVoltageRange>
 8004674:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004676:	4b1e      	ldr	r3, [pc, #120]	; (80046f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467a:	4a1d      	ldr	r2, [pc, #116]	; (80046f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800467c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004680:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004688:	d10b      	bne.n	80046a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b80      	cmp	r3, #128	; 0x80
 800468e:	d919      	bls.n	80046c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2ba0      	cmp	r3, #160	; 0xa0
 8004694:	d902      	bls.n	800469c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004696:	2302      	movs	r3, #2
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	e013      	b.n	80046c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800469c:	2301      	movs	r3, #1
 800469e:	613b      	str	r3, [r7, #16]
 80046a0:	e010      	b.n	80046c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b80      	cmp	r3, #128	; 0x80
 80046a6:	d902      	bls.n	80046ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80046a8:	2303      	movs	r3, #3
 80046aa:	613b      	str	r3, [r7, #16]
 80046ac:	e00a      	b.n	80046c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b80      	cmp	r3, #128	; 0x80
 80046b2:	d102      	bne.n	80046ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046b4:	2302      	movs	r3, #2
 80046b6:	613b      	str	r3, [r7, #16]
 80046b8:	e004      	b.n	80046c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b70      	cmp	r3, #112	; 0x70
 80046be:	d101      	bne.n	80046c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046c0:	2301      	movs	r3, #1
 80046c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80046c4:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f023 0207 	bic.w	r2, r3, #7
 80046cc:	4909      	ldr	r1, [pc, #36]	; (80046f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80046d4:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d001      	beq.n	80046e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40021000 	.word	0x40021000
 80046f4:	40022000 	.word	0x40022000

080046f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004700:	2300      	movs	r3, #0
 8004702:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004704:	2300      	movs	r3, #0
 8004706:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004710:	2b00      	cmp	r3, #0
 8004712:	d041      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004718:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800471c:	d02a      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800471e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004722:	d824      	bhi.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004724:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004728:	d008      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800472a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800472e:	d81e      	bhi.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00a      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004734:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004738:	d010      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800473a:	e018      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800473c:	4b86      	ldr	r3, [pc, #536]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	4a85      	ldr	r2, [pc, #532]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004746:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004748:	e015      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3304      	adds	r3, #4
 800474e:	2100      	movs	r1, #0
 8004750:	4618      	mov	r0, r3
 8004752:	f000 fabb 	bl	8004ccc <RCCEx_PLLSAI1_Config>
 8004756:	4603      	mov	r3, r0
 8004758:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800475a:	e00c      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3320      	adds	r3, #32
 8004760:	2100      	movs	r1, #0
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fba6 	bl	8004eb4 <RCCEx_PLLSAI2_Config>
 8004768:	4603      	mov	r3, r0
 800476a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800476c:	e003      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	74fb      	strb	r3, [r7, #19]
      break;
 8004772:	e000      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004774:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004776:	7cfb      	ldrb	r3, [r7, #19]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10b      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800477c:	4b76      	ldr	r3, [pc, #472]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800477e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004782:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800478a:	4973      	ldr	r1, [pc, #460]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004792:	e001      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004794:	7cfb      	ldrb	r3, [r7, #19]
 8004796:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d041      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047ac:	d02a      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80047ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047b2:	d824      	bhi.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80047b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047b8:	d008      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80047ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047be:	d81e      	bhi.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80047c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047c8:	d010      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80047ca:	e018      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047cc:	4b62      	ldr	r3, [pc, #392]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	4a61      	ldr	r2, [pc, #388]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047d8:	e015      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	3304      	adds	r3, #4
 80047de:	2100      	movs	r1, #0
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fa73 	bl	8004ccc <RCCEx_PLLSAI1_Config>
 80047e6:	4603      	mov	r3, r0
 80047e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047ea:	e00c      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3320      	adds	r3, #32
 80047f0:	2100      	movs	r1, #0
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 fb5e 	bl	8004eb4 <RCCEx_PLLSAI2_Config>
 80047f8:	4603      	mov	r3, r0
 80047fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047fc:	e003      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	74fb      	strb	r3, [r7, #19]
      break;
 8004802:	e000      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004804:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004806:	7cfb      	ldrb	r3, [r7, #19]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10b      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800480c:	4b52      	ldr	r3, [pc, #328]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800480e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004812:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800481a:	494f      	ldr	r1, [pc, #316]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004822:	e001      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004824:	7cfb      	ldrb	r3, [r7, #19]
 8004826:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 80a0 	beq.w	8004976 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004836:	2300      	movs	r3, #0
 8004838:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800483a:	4b47      	ldr	r3, [pc, #284]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800483c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800484a:	2300      	movs	r3, #0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00d      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004850:	4b41      	ldr	r3, [pc, #260]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004854:	4a40      	ldr	r2, [pc, #256]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800485a:	6593      	str	r3, [r2, #88]	; 0x58
 800485c:	4b3e      	ldr	r3, [pc, #248]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800485e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004864:	60bb      	str	r3, [r7, #8]
 8004866:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004868:	2301      	movs	r3, #1
 800486a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800486c:	4b3b      	ldr	r3, [pc, #236]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a3a      	ldr	r2, [pc, #232]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004876:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004878:	f7fc feba 	bl	80015f0 <HAL_GetTick>
 800487c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800487e:	e009      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004880:	f7fc feb6 	bl	80015f0 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d902      	bls.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	74fb      	strb	r3, [r7, #19]
        break;
 8004892:	e005      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004894:	4b31      	ldr	r3, [pc, #196]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0ef      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80048a0:	7cfb      	ldrb	r3, [r7, #19]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d15c      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048a6:	4b2c      	ldr	r3, [pc, #176]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01f      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d019      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048c4:	4b24      	ldr	r3, [pc, #144]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048d0:	4b21      	ldr	r3, [pc, #132]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d6:	4a20      	ldr	r2, [pc, #128]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048e0:	4b1d      	ldr	r3, [pc, #116]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e6:	4a1c      	ldr	r2, [pc, #112]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048f0:	4a19      	ldr	r2, [pc, #100]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d016      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004902:	f7fc fe75 	bl	80015f0 <HAL_GetTick>
 8004906:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004908:	e00b      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800490a:	f7fc fe71 	bl	80015f0 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	f241 3288 	movw	r2, #5000	; 0x1388
 8004918:	4293      	cmp	r3, r2
 800491a:	d902      	bls.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	74fb      	strb	r3, [r7, #19]
            break;
 8004920:	e006      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004922:	4b0d      	ldr	r3, [pc, #52]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0ec      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004930:	7cfb      	ldrb	r3, [r7, #19]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10c      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004936:	4b08      	ldr	r3, [pc, #32]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004946:	4904      	ldr	r1, [pc, #16]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800494e:	e009      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004950:	7cfb      	ldrb	r3, [r7, #19]
 8004952:	74bb      	strb	r3, [r7, #18]
 8004954:	e006      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004956:	bf00      	nop
 8004958:	40021000 	.word	0x40021000
 800495c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004960:	7cfb      	ldrb	r3, [r7, #19]
 8004962:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004964:	7c7b      	ldrb	r3, [r7, #17]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d105      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800496a:	4b9e      	ldr	r3, [pc, #632]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800496c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496e:	4a9d      	ldr	r2, [pc, #628]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004974:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004982:	4b98      	ldr	r3, [pc, #608]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004988:	f023 0203 	bic.w	r2, r3, #3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004990:	4994      	ldr	r1, [pc, #592]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049a4:	4b8f      	ldr	r3, [pc, #572]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049aa:	f023 020c 	bic.w	r2, r3, #12
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b2:	498c      	ldr	r1, [pc, #560]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0304 	and.w	r3, r3, #4
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049c6:	4b87      	ldr	r3, [pc, #540]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	4983      	ldr	r1, [pc, #524]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00a      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049e8:	4b7e      	ldr	r3, [pc, #504]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f6:	497b      	ldr	r1, [pc, #492]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0310 	and.w	r3, r3, #16
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a0a:	4b76      	ldr	r3, [pc, #472]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a18:	4972      	ldr	r1, [pc, #456]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0320 	and.w	r3, r3, #32
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a2c:	4b6d      	ldr	r3, [pc, #436]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3a:	496a      	ldr	r1, [pc, #424]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a4e:	4b65      	ldr	r3, [pc, #404]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a5c:	4961      	ldr	r1, [pc, #388]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a70:	4b5c      	ldr	r3, [pc, #368]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a7e:	4959      	ldr	r1, [pc, #356]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a92:	4b54      	ldr	r3, [pc, #336]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa0:	4950      	ldr	r1, [pc, #320]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00a      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ab4:	4b4b      	ldr	r3, [pc, #300]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac2:	4948      	ldr	r1, [pc, #288]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ad6:	4b43      	ldr	r3, [pc, #268]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004adc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae4:	493f      	ldr	r1, [pc, #252]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d028      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004af8:	4b3a      	ldr	r3, [pc, #232]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b06:	4937      	ldr	r1, [pc, #220]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b16:	d106      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b18:	4b32      	ldr	r3, [pc, #200]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	4a31      	ldr	r2, [pc, #196]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b22:	60d3      	str	r3, [r2, #12]
 8004b24:	e011      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b2e:	d10c      	bne.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3304      	adds	r3, #4
 8004b34:	2101      	movs	r1, #1
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 f8c8 	bl	8004ccc <RCCEx_PLLSAI1_Config>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b40:	7cfb      	ldrb	r3, [r7, #19]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004b46:	7cfb      	ldrb	r3, [r7, #19]
 8004b48:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d028      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b56:	4b23      	ldr	r3, [pc, #140]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b64:	491f      	ldr	r1, [pc, #124]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b74:	d106      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b76:	4b1b      	ldr	r3, [pc, #108]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	4a1a      	ldr	r2, [pc, #104]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b80:	60d3      	str	r3, [r2, #12]
 8004b82:	e011      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b8c:	d10c      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	3304      	adds	r3, #4
 8004b92:	2101      	movs	r1, #1
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 f899 	bl	8004ccc <RCCEx_PLLSAI1_Config>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b9e:	7cfb      	ldrb	r3, [r7, #19]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004ba4:	7cfb      	ldrb	r3, [r7, #19]
 8004ba6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d02b      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bc2:	4908      	ldr	r1, [pc, #32]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bd2:	d109      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bd4:	4b03      	ldr	r3, [pc, #12]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	4a02      	ldr	r2, [pc, #8]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bde:	60d3      	str	r3, [r2, #12]
 8004be0:	e014      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004be2:	bf00      	nop
 8004be4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bf0:	d10c      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	3304      	adds	r3, #4
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 f867 	bl	8004ccc <RCCEx_PLLSAI1_Config>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c02:	7cfb      	ldrb	r3, [r7, #19]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004c08:	7cfb      	ldrb	r3, [r7, #19]
 8004c0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d02f      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c18:	4b2b      	ldr	r3, [pc, #172]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c26:	4928      	ldr	r1, [pc, #160]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c36:	d10d      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	2102      	movs	r1, #2
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 f844 	bl	8004ccc <RCCEx_PLLSAI1_Config>
 8004c44:	4603      	mov	r3, r0
 8004c46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c48:	7cfb      	ldrb	r3, [r7, #19]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d014      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c4e:	7cfb      	ldrb	r3, [r7, #19]
 8004c50:	74bb      	strb	r3, [r7, #18]
 8004c52:	e011      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c5c:	d10c      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3320      	adds	r3, #32
 8004c62:	2102      	movs	r1, #2
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 f925 	bl	8004eb4 <RCCEx_PLLSAI2_Config>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c6e:	7cfb      	ldrb	r3, [r7, #19]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c74:	7cfb      	ldrb	r3, [r7, #19]
 8004c76:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c84:	4b10      	ldr	r3, [pc, #64]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c92:	490d      	ldr	r1, [pc, #52]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00b      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ca6:	4b08      	ldr	r3, [pc, #32]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cb6:	4904      	ldr	r1, [pc, #16]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004cbe:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3718      	adds	r7, #24
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40021000 	.word	0x40021000

08004ccc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cda:	4b75      	ldr	r3, [pc, #468]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d018      	beq.n	8004d18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ce6:	4b72      	ldr	r3, [pc, #456]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f003 0203 	and.w	r2, r3, #3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d10d      	bne.n	8004d12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
       ||
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d009      	beq.n	8004d12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004cfe:	4b6c      	ldr	r3, [pc, #432]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	091b      	lsrs	r3, r3, #4
 8004d04:	f003 0307 	and.w	r3, r3, #7
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
       ||
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d047      	beq.n	8004da2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	73fb      	strb	r3, [r7, #15]
 8004d16:	e044      	b.n	8004da2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b03      	cmp	r3, #3
 8004d1e:	d018      	beq.n	8004d52 <RCCEx_PLLSAI1_Config+0x86>
 8004d20:	2b03      	cmp	r3, #3
 8004d22:	d825      	bhi.n	8004d70 <RCCEx_PLLSAI1_Config+0xa4>
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d002      	beq.n	8004d2e <RCCEx_PLLSAI1_Config+0x62>
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d009      	beq.n	8004d40 <RCCEx_PLLSAI1_Config+0x74>
 8004d2c:	e020      	b.n	8004d70 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d2e:	4b60      	ldr	r3, [pc, #384]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d11d      	bne.n	8004d76 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d3e:	e01a      	b.n	8004d76 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d40:	4b5b      	ldr	r3, [pc, #364]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d116      	bne.n	8004d7a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d50:	e013      	b.n	8004d7a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d52:	4b57      	ldr	r3, [pc, #348]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10f      	bne.n	8004d7e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d5e:	4b54      	ldr	r3, [pc, #336]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d109      	bne.n	8004d7e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d6e:	e006      	b.n	8004d7e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	73fb      	strb	r3, [r7, #15]
      break;
 8004d74:	e004      	b.n	8004d80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d76:	bf00      	nop
 8004d78:	e002      	b.n	8004d80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d7a:	bf00      	nop
 8004d7c:	e000      	b.n	8004d80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10d      	bne.n	8004da2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d86:	4b4a      	ldr	r3, [pc, #296]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6819      	ldr	r1, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	430b      	orrs	r3, r1
 8004d9c:	4944      	ldr	r1, [pc, #272]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004da2:	7bfb      	ldrb	r3, [r7, #15]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d17d      	bne.n	8004ea4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004da8:	4b41      	ldr	r3, [pc, #260]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a40      	ldr	r2, [pc, #256]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004db2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004db4:	f7fc fc1c 	bl	80015f0 <HAL_GetTick>
 8004db8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dba:	e009      	b.n	8004dd0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dbc:	f7fc fc18 	bl	80015f0 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d902      	bls.n	8004dd0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	73fb      	strb	r3, [r7, #15]
        break;
 8004dce:	e005      	b.n	8004ddc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dd0:	4b37      	ldr	r3, [pc, #220]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1ef      	bne.n	8004dbc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d160      	bne.n	8004ea4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d111      	bne.n	8004e0c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004de8:	4b31      	ldr	r3, [pc, #196]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6892      	ldr	r2, [r2, #8]
 8004df8:	0211      	lsls	r1, r2, #8
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	68d2      	ldr	r2, [r2, #12]
 8004dfe:	0912      	lsrs	r2, r2, #4
 8004e00:	0452      	lsls	r2, r2, #17
 8004e02:	430a      	orrs	r2, r1
 8004e04:	492a      	ldr	r1, [pc, #168]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	610b      	str	r3, [r1, #16]
 8004e0a:	e027      	b.n	8004e5c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d112      	bne.n	8004e38 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e12:	4b27      	ldr	r3, [pc, #156]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004e1a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6892      	ldr	r2, [r2, #8]
 8004e22:	0211      	lsls	r1, r2, #8
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6912      	ldr	r2, [r2, #16]
 8004e28:	0852      	lsrs	r2, r2, #1
 8004e2a:	3a01      	subs	r2, #1
 8004e2c:	0552      	lsls	r2, r2, #21
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	491f      	ldr	r1, [pc, #124]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	610b      	str	r3, [r1, #16]
 8004e36:	e011      	b.n	8004e5c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e38:	4b1d      	ldr	r3, [pc, #116]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6892      	ldr	r2, [r2, #8]
 8004e48:	0211      	lsls	r1, r2, #8
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6952      	ldr	r2, [r2, #20]
 8004e4e:	0852      	lsrs	r2, r2, #1
 8004e50:	3a01      	subs	r2, #1
 8004e52:	0652      	lsls	r2, r2, #25
 8004e54:	430a      	orrs	r2, r1
 8004e56:	4916      	ldr	r1, [pc, #88]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e5c:	4b14      	ldr	r3, [pc, #80]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a13      	ldr	r2, [pc, #76]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e68:	f7fc fbc2 	bl	80015f0 <HAL_GetTick>
 8004e6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e6e:	e009      	b.n	8004e84 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e70:	f7fc fbbe 	bl	80015f0 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d902      	bls.n	8004e84 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	73fb      	strb	r3, [r7, #15]
          break;
 8004e82:	e005      	b.n	8004e90 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e84:	4b0a      	ldr	r3, [pc, #40]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0ef      	beq.n	8004e70 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d106      	bne.n	8004ea4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e96:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e98:	691a      	ldr	r2, [r3, #16]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	4904      	ldr	r1, [pc, #16]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	40021000 	.word	0x40021000

08004eb4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ec2:	4b6a      	ldr	r3, [pc, #424]	; (800506c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f003 0303 	and.w	r3, r3, #3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d018      	beq.n	8004f00 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004ece:	4b67      	ldr	r3, [pc, #412]	; (800506c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f003 0203 	and.w	r2, r3, #3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d10d      	bne.n	8004efa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
       ||
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d009      	beq.n	8004efa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004ee6:	4b61      	ldr	r3, [pc, #388]	; (800506c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	091b      	lsrs	r3, r3, #4
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
       ||
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d047      	beq.n	8004f8a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	73fb      	strb	r3, [r7, #15]
 8004efe:	e044      	b.n	8004f8a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b03      	cmp	r3, #3
 8004f06:	d018      	beq.n	8004f3a <RCCEx_PLLSAI2_Config+0x86>
 8004f08:	2b03      	cmp	r3, #3
 8004f0a:	d825      	bhi.n	8004f58 <RCCEx_PLLSAI2_Config+0xa4>
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d002      	beq.n	8004f16 <RCCEx_PLLSAI2_Config+0x62>
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d009      	beq.n	8004f28 <RCCEx_PLLSAI2_Config+0x74>
 8004f14:	e020      	b.n	8004f58 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f16:	4b55      	ldr	r3, [pc, #340]	; (800506c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d11d      	bne.n	8004f5e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f26:	e01a      	b.n	8004f5e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f28:	4b50      	ldr	r3, [pc, #320]	; (800506c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d116      	bne.n	8004f62 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f38:	e013      	b.n	8004f62 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f3a:	4b4c      	ldr	r3, [pc, #304]	; (800506c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10f      	bne.n	8004f66 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f46:	4b49      	ldr	r3, [pc, #292]	; (800506c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d109      	bne.n	8004f66 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f56:	e006      	b.n	8004f66 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f5c:	e004      	b.n	8004f68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f5e:	bf00      	nop
 8004f60:	e002      	b.n	8004f68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f62:	bf00      	nop
 8004f64:	e000      	b.n	8004f68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f66:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10d      	bne.n	8004f8a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f6e:	4b3f      	ldr	r3, [pc, #252]	; (800506c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6819      	ldr	r1, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	430b      	orrs	r3, r1
 8004f84:	4939      	ldr	r1, [pc, #228]	; (800506c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d167      	bne.n	8005060 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f90:	4b36      	ldr	r3, [pc, #216]	; (800506c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a35      	ldr	r2, [pc, #212]	; (800506c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f9c:	f7fc fb28 	bl	80015f0 <HAL_GetTick>
 8004fa0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fa2:	e009      	b.n	8004fb8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fa4:	f7fc fb24 	bl	80015f0 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d902      	bls.n	8004fb8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	73fb      	strb	r3, [r7, #15]
        break;
 8004fb6:	e005      	b.n	8004fc4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fb8:	4b2c      	ldr	r3, [pc, #176]	; (800506c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1ef      	bne.n	8004fa4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d14a      	bne.n	8005060 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d111      	bne.n	8004ff4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fd0:	4b26      	ldr	r3, [pc, #152]	; (800506c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	6892      	ldr	r2, [r2, #8]
 8004fe0:	0211      	lsls	r1, r2, #8
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	68d2      	ldr	r2, [r2, #12]
 8004fe6:	0912      	lsrs	r2, r2, #4
 8004fe8:	0452      	lsls	r2, r2, #17
 8004fea:	430a      	orrs	r2, r1
 8004fec:	491f      	ldr	r1, [pc, #124]	; (800506c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	614b      	str	r3, [r1, #20]
 8004ff2:	e011      	b.n	8005018 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ff4:	4b1d      	ldr	r3, [pc, #116]	; (800506c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ffc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6892      	ldr	r2, [r2, #8]
 8005004:	0211      	lsls	r1, r2, #8
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6912      	ldr	r2, [r2, #16]
 800500a:	0852      	lsrs	r2, r2, #1
 800500c:	3a01      	subs	r2, #1
 800500e:	0652      	lsls	r2, r2, #25
 8005010:	430a      	orrs	r2, r1
 8005012:	4916      	ldr	r1, [pc, #88]	; (800506c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005014:	4313      	orrs	r3, r2
 8005016:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005018:	4b14      	ldr	r3, [pc, #80]	; (800506c <RCCEx_PLLSAI2_Config+0x1b8>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a13      	ldr	r2, [pc, #76]	; (800506c <RCCEx_PLLSAI2_Config+0x1b8>)
 800501e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005022:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005024:	f7fc fae4 	bl	80015f0 <HAL_GetTick>
 8005028:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800502a:	e009      	b.n	8005040 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800502c:	f7fc fae0 	bl	80015f0 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d902      	bls.n	8005040 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	73fb      	strb	r3, [r7, #15]
          break;
 800503e:	e005      	b.n	800504c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005040:	4b0a      	ldr	r3, [pc, #40]	; (800506c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0ef      	beq.n	800502c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800504c:	7bfb      	ldrb	r3, [r7, #15]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005052:	4b06      	ldr	r3, [pc, #24]	; (800506c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005054:	695a      	ldr	r2, [r3, #20]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	4904      	ldr	r1, [pc, #16]	; (800506c <RCCEx_PLLSAI2_Config+0x1b8>)
 800505c:	4313      	orrs	r3, r2
 800505e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005060:	7bfb      	ldrb	r3, [r7, #15]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40021000 	.word	0x40021000

08005070 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e040      	b.n	8005104 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005086:	2b00      	cmp	r3, #0
 8005088:	d106      	bne.n	8005098 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7fc f91c 	bl	80012d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2224      	movs	r2, #36	; 0x24
 800509c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0201 	bic.w	r2, r2, #1
 80050ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f8c0 	bl	8005234 <UART_SetConfig>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d101      	bne.n	80050be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e022      	b.n	8005104 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fb6c 	bl	80057a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 fbf3 	bl	80058e8 <UART_CheckIdleState>
 8005102:	4603      	mov	r3, r0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08a      	sub	sp, #40	; 0x28
 8005110:	af02      	add	r7, sp, #8
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	603b      	str	r3, [r7, #0]
 8005118:	4613      	mov	r3, r2
 800511a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005120:	2b20      	cmp	r3, #32
 8005122:	f040 8082 	bne.w	800522a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <HAL_UART_Transmit+0x26>
 800512c:	88fb      	ldrh	r3, [r7, #6]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e07a      	b.n	800522c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_UART_Transmit+0x38>
 8005140:	2302      	movs	r3, #2
 8005142:	e073      	b.n	800522c <HAL_UART_Transmit+0x120>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2221      	movs	r2, #33	; 0x21
 8005158:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800515a:	f7fc fa49 	bl	80015f0 <HAL_GetTick>
 800515e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	88fa      	ldrh	r2, [r7, #6]
 8005164:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	88fa      	ldrh	r2, [r7, #6]
 800516c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005178:	d108      	bne.n	800518c <HAL_UART_Transmit+0x80>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d104      	bne.n	800518c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005182:	2300      	movs	r3, #0
 8005184:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	61bb      	str	r3, [r7, #24]
 800518a:	e003      	b.n	8005194 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005190:	2300      	movs	r3, #0
 8005192:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800519c:	e02d      	b.n	80051fa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2200      	movs	r2, #0
 80051a6:	2180      	movs	r1, #128	; 0x80
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 fbe6 	bl	800597a <UART_WaitOnFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e039      	b.n	800522c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10b      	bne.n	80051d6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	881a      	ldrh	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051ca:	b292      	uxth	r2, r2
 80051cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	3302      	adds	r3, #2
 80051d2:	61bb      	str	r3, [r7, #24]
 80051d4:	e008      	b.n	80051e8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	781a      	ldrb	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	b292      	uxth	r2, r2
 80051e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	3301      	adds	r3, #1
 80051e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1cb      	bne.n	800519e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2200      	movs	r2, #0
 800520e:	2140      	movs	r1, #64	; 0x40
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 fbb2 	bl	800597a <UART_WaitOnFlagUntilTimeout>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e005      	b.n	800522c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2220      	movs	r2, #32
 8005224:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	e000      	b.n	800522c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800522a:	2302      	movs	r3, #2
  }
}
 800522c:	4618      	mov	r0, r3
 800522e:	3720      	adds	r7, #32
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005238:	b08a      	sub	sp, #40	; 0x28
 800523a:	af00      	add	r7, sp, #0
 800523c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800523e:	2300      	movs	r3, #0
 8005240:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	431a      	orrs	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	431a      	orrs	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	4313      	orrs	r3, r2
 800525a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	4ba4      	ldr	r3, [pc, #656]	; (80054f4 <UART_SetConfig+0x2c0>)
 8005264:	4013      	ands	r3, r2
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	6812      	ldr	r2, [r2, #0]
 800526a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800526c:	430b      	orrs	r3, r1
 800526e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a99      	ldr	r2, [pc, #612]	; (80054f8 <UART_SetConfig+0x2c4>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d004      	beq.n	80052a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800529c:	4313      	orrs	r3, r2
 800529e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b0:	430a      	orrs	r2, r1
 80052b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a90      	ldr	r2, [pc, #576]	; (80054fc <UART_SetConfig+0x2c8>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d126      	bne.n	800530c <UART_SetConfig+0xd8>
 80052be:	4b90      	ldr	r3, [pc, #576]	; (8005500 <UART_SetConfig+0x2cc>)
 80052c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c4:	f003 0303 	and.w	r3, r3, #3
 80052c8:	2b03      	cmp	r3, #3
 80052ca:	d81b      	bhi.n	8005304 <UART_SetConfig+0xd0>
 80052cc:	a201      	add	r2, pc, #4	; (adr r2, 80052d4 <UART_SetConfig+0xa0>)
 80052ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d2:	bf00      	nop
 80052d4:	080052e5 	.word	0x080052e5
 80052d8:	080052f5 	.word	0x080052f5
 80052dc:	080052ed 	.word	0x080052ed
 80052e0:	080052fd 	.word	0x080052fd
 80052e4:	2301      	movs	r3, #1
 80052e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ea:	e116      	b.n	800551a <UART_SetConfig+0x2e6>
 80052ec:	2302      	movs	r3, #2
 80052ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052f2:	e112      	b.n	800551a <UART_SetConfig+0x2e6>
 80052f4:	2304      	movs	r3, #4
 80052f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052fa:	e10e      	b.n	800551a <UART_SetConfig+0x2e6>
 80052fc:	2308      	movs	r3, #8
 80052fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005302:	e10a      	b.n	800551a <UART_SetConfig+0x2e6>
 8005304:	2310      	movs	r3, #16
 8005306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800530a:	e106      	b.n	800551a <UART_SetConfig+0x2e6>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a7c      	ldr	r2, [pc, #496]	; (8005504 <UART_SetConfig+0x2d0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d138      	bne.n	8005388 <UART_SetConfig+0x154>
 8005316:	4b7a      	ldr	r3, [pc, #488]	; (8005500 <UART_SetConfig+0x2cc>)
 8005318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531c:	f003 030c 	and.w	r3, r3, #12
 8005320:	2b0c      	cmp	r3, #12
 8005322:	d82d      	bhi.n	8005380 <UART_SetConfig+0x14c>
 8005324:	a201      	add	r2, pc, #4	; (adr r2, 800532c <UART_SetConfig+0xf8>)
 8005326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532a:	bf00      	nop
 800532c:	08005361 	.word	0x08005361
 8005330:	08005381 	.word	0x08005381
 8005334:	08005381 	.word	0x08005381
 8005338:	08005381 	.word	0x08005381
 800533c:	08005371 	.word	0x08005371
 8005340:	08005381 	.word	0x08005381
 8005344:	08005381 	.word	0x08005381
 8005348:	08005381 	.word	0x08005381
 800534c:	08005369 	.word	0x08005369
 8005350:	08005381 	.word	0x08005381
 8005354:	08005381 	.word	0x08005381
 8005358:	08005381 	.word	0x08005381
 800535c:	08005379 	.word	0x08005379
 8005360:	2300      	movs	r3, #0
 8005362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005366:	e0d8      	b.n	800551a <UART_SetConfig+0x2e6>
 8005368:	2302      	movs	r3, #2
 800536a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800536e:	e0d4      	b.n	800551a <UART_SetConfig+0x2e6>
 8005370:	2304      	movs	r3, #4
 8005372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005376:	e0d0      	b.n	800551a <UART_SetConfig+0x2e6>
 8005378:	2308      	movs	r3, #8
 800537a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800537e:	e0cc      	b.n	800551a <UART_SetConfig+0x2e6>
 8005380:	2310      	movs	r3, #16
 8005382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005386:	e0c8      	b.n	800551a <UART_SetConfig+0x2e6>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a5e      	ldr	r2, [pc, #376]	; (8005508 <UART_SetConfig+0x2d4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d125      	bne.n	80053de <UART_SetConfig+0x1aa>
 8005392:	4b5b      	ldr	r3, [pc, #364]	; (8005500 <UART_SetConfig+0x2cc>)
 8005394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005398:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800539c:	2b30      	cmp	r3, #48	; 0x30
 800539e:	d016      	beq.n	80053ce <UART_SetConfig+0x19a>
 80053a0:	2b30      	cmp	r3, #48	; 0x30
 80053a2:	d818      	bhi.n	80053d6 <UART_SetConfig+0x1a2>
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d00a      	beq.n	80053be <UART_SetConfig+0x18a>
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	d814      	bhi.n	80053d6 <UART_SetConfig+0x1a2>
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <UART_SetConfig+0x182>
 80053b0:	2b10      	cmp	r3, #16
 80053b2:	d008      	beq.n	80053c6 <UART_SetConfig+0x192>
 80053b4:	e00f      	b.n	80053d6 <UART_SetConfig+0x1a2>
 80053b6:	2300      	movs	r3, #0
 80053b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053bc:	e0ad      	b.n	800551a <UART_SetConfig+0x2e6>
 80053be:	2302      	movs	r3, #2
 80053c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053c4:	e0a9      	b.n	800551a <UART_SetConfig+0x2e6>
 80053c6:	2304      	movs	r3, #4
 80053c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053cc:	e0a5      	b.n	800551a <UART_SetConfig+0x2e6>
 80053ce:	2308      	movs	r3, #8
 80053d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053d4:	e0a1      	b.n	800551a <UART_SetConfig+0x2e6>
 80053d6:	2310      	movs	r3, #16
 80053d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053dc:	e09d      	b.n	800551a <UART_SetConfig+0x2e6>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a4a      	ldr	r2, [pc, #296]	; (800550c <UART_SetConfig+0x2d8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d125      	bne.n	8005434 <UART_SetConfig+0x200>
 80053e8:	4b45      	ldr	r3, [pc, #276]	; (8005500 <UART_SetConfig+0x2cc>)
 80053ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053f2:	2bc0      	cmp	r3, #192	; 0xc0
 80053f4:	d016      	beq.n	8005424 <UART_SetConfig+0x1f0>
 80053f6:	2bc0      	cmp	r3, #192	; 0xc0
 80053f8:	d818      	bhi.n	800542c <UART_SetConfig+0x1f8>
 80053fa:	2b80      	cmp	r3, #128	; 0x80
 80053fc:	d00a      	beq.n	8005414 <UART_SetConfig+0x1e0>
 80053fe:	2b80      	cmp	r3, #128	; 0x80
 8005400:	d814      	bhi.n	800542c <UART_SetConfig+0x1f8>
 8005402:	2b00      	cmp	r3, #0
 8005404:	d002      	beq.n	800540c <UART_SetConfig+0x1d8>
 8005406:	2b40      	cmp	r3, #64	; 0x40
 8005408:	d008      	beq.n	800541c <UART_SetConfig+0x1e8>
 800540a:	e00f      	b.n	800542c <UART_SetConfig+0x1f8>
 800540c:	2300      	movs	r3, #0
 800540e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005412:	e082      	b.n	800551a <UART_SetConfig+0x2e6>
 8005414:	2302      	movs	r3, #2
 8005416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800541a:	e07e      	b.n	800551a <UART_SetConfig+0x2e6>
 800541c:	2304      	movs	r3, #4
 800541e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005422:	e07a      	b.n	800551a <UART_SetConfig+0x2e6>
 8005424:	2308      	movs	r3, #8
 8005426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800542a:	e076      	b.n	800551a <UART_SetConfig+0x2e6>
 800542c:	2310      	movs	r3, #16
 800542e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005432:	e072      	b.n	800551a <UART_SetConfig+0x2e6>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a35      	ldr	r2, [pc, #212]	; (8005510 <UART_SetConfig+0x2dc>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d12a      	bne.n	8005494 <UART_SetConfig+0x260>
 800543e:	4b30      	ldr	r3, [pc, #192]	; (8005500 <UART_SetConfig+0x2cc>)
 8005440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005444:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005448:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800544c:	d01a      	beq.n	8005484 <UART_SetConfig+0x250>
 800544e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005452:	d81b      	bhi.n	800548c <UART_SetConfig+0x258>
 8005454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005458:	d00c      	beq.n	8005474 <UART_SetConfig+0x240>
 800545a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800545e:	d815      	bhi.n	800548c <UART_SetConfig+0x258>
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <UART_SetConfig+0x238>
 8005464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005468:	d008      	beq.n	800547c <UART_SetConfig+0x248>
 800546a:	e00f      	b.n	800548c <UART_SetConfig+0x258>
 800546c:	2300      	movs	r3, #0
 800546e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005472:	e052      	b.n	800551a <UART_SetConfig+0x2e6>
 8005474:	2302      	movs	r3, #2
 8005476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800547a:	e04e      	b.n	800551a <UART_SetConfig+0x2e6>
 800547c:	2304      	movs	r3, #4
 800547e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005482:	e04a      	b.n	800551a <UART_SetConfig+0x2e6>
 8005484:	2308      	movs	r3, #8
 8005486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800548a:	e046      	b.n	800551a <UART_SetConfig+0x2e6>
 800548c:	2310      	movs	r3, #16
 800548e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005492:	e042      	b.n	800551a <UART_SetConfig+0x2e6>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a17      	ldr	r2, [pc, #92]	; (80054f8 <UART_SetConfig+0x2c4>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d13a      	bne.n	8005514 <UART_SetConfig+0x2e0>
 800549e:	4b18      	ldr	r3, [pc, #96]	; (8005500 <UART_SetConfig+0x2cc>)
 80054a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054ac:	d01a      	beq.n	80054e4 <UART_SetConfig+0x2b0>
 80054ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054b2:	d81b      	bhi.n	80054ec <UART_SetConfig+0x2b8>
 80054b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054b8:	d00c      	beq.n	80054d4 <UART_SetConfig+0x2a0>
 80054ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054be:	d815      	bhi.n	80054ec <UART_SetConfig+0x2b8>
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d003      	beq.n	80054cc <UART_SetConfig+0x298>
 80054c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c8:	d008      	beq.n	80054dc <UART_SetConfig+0x2a8>
 80054ca:	e00f      	b.n	80054ec <UART_SetConfig+0x2b8>
 80054cc:	2300      	movs	r3, #0
 80054ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054d2:	e022      	b.n	800551a <UART_SetConfig+0x2e6>
 80054d4:	2302      	movs	r3, #2
 80054d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054da:	e01e      	b.n	800551a <UART_SetConfig+0x2e6>
 80054dc:	2304      	movs	r3, #4
 80054de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054e2:	e01a      	b.n	800551a <UART_SetConfig+0x2e6>
 80054e4:	2308      	movs	r3, #8
 80054e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ea:	e016      	b.n	800551a <UART_SetConfig+0x2e6>
 80054ec:	2310      	movs	r3, #16
 80054ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054f2:	e012      	b.n	800551a <UART_SetConfig+0x2e6>
 80054f4:	efff69f3 	.word	0xefff69f3
 80054f8:	40008000 	.word	0x40008000
 80054fc:	40013800 	.word	0x40013800
 8005500:	40021000 	.word	0x40021000
 8005504:	40004400 	.word	0x40004400
 8005508:	40004800 	.word	0x40004800
 800550c:	40004c00 	.word	0x40004c00
 8005510:	40005000 	.word	0x40005000
 8005514:	2310      	movs	r3, #16
 8005516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a9f      	ldr	r2, [pc, #636]	; (800579c <UART_SetConfig+0x568>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d17a      	bne.n	800561a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005524:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005528:	2b08      	cmp	r3, #8
 800552a:	d824      	bhi.n	8005576 <UART_SetConfig+0x342>
 800552c:	a201      	add	r2, pc, #4	; (adr r2, 8005534 <UART_SetConfig+0x300>)
 800552e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005532:	bf00      	nop
 8005534:	08005559 	.word	0x08005559
 8005538:	08005577 	.word	0x08005577
 800553c:	08005561 	.word	0x08005561
 8005540:	08005577 	.word	0x08005577
 8005544:	08005567 	.word	0x08005567
 8005548:	08005577 	.word	0x08005577
 800554c:	08005577 	.word	0x08005577
 8005550:	08005577 	.word	0x08005577
 8005554:	0800556f 	.word	0x0800556f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005558:	f7ff f842 	bl	80045e0 <HAL_RCC_GetPCLK1Freq>
 800555c:	61f8      	str	r0, [r7, #28]
        break;
 800555e:	e010      	b.n	8005582 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005560:	4b8f      	ldr	r3, [pc, #572]	; (80057a0 <UART_SetConfig+0x56c>)
 8005562:	61fb      	str	r3, [r7, #28]
        break;
 8005564:	e00d      	b.n	8005582 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005566:	f7fe ffa3 	bl	80044b0 <HAL_RCC_GetSysClockFreq>
 800556a:	61f8      	str	r0, [r7, #28]
        break;
 800556c:	e009      	b.n	8005582 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800556e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005572:	61fb      	str	r3, [r7, #28]
        break;
 8005574:	e005      	b.n	8005582 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005576:	2300      	movs	r3, #0
 8005578:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005580:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 80fb 	beq.w	8005780 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	4613      	mov	r3, r2
 8005590:	005b      	lsls	r3, r3, #1
 8005592:	4413      	add	r3, r2
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	429a      	cmp	r2, r3
 8005598:	d305      	bcc.n	80055a6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055a0:	69fa      	ldr	r2, [r7, #28]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d903      	bls.n	80055ae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055ac:	e0e8      	b.n	8005780 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	2200      	movs	r2, #0
 80055b2:	461c      	mov	r4, r3
 80055b4:	4615      	mov	r5, r2
 80055b6:	f04f 0200 	mov.w	r2, #0
 80055ba:	f04f 0300 	mov.w	r3, #0
 80055be:	022b      	lsls	r3, r5, #8
 80055c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80055c4:	0222      	lsls	r2, r4, #8
 80055c6:	68f9      	ldr	r1, [r7, #12]
 80055c8:	6849      	ldr	r1, [r1, #4]
 80055ca:	0849      	lsrs	r1, r1, #1
 80055cc:	2000      	movs	r0, #0
 80055ce:	4688      	mov	r8, r1
 80055d0:	4681      	mov	r9, r0
 80055d2:	eb12 0a08 	adds.w	sl, r2, r8
 80055d6:	eb43 0b09 	adc.w	fp, r3, r9
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	603b      	str	r3, [r7, #0]
 80055e2:	607a      	str	r2, [r7, #4]
 80055e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055e8:	4650      	mov	r0, sl
 80055ea:	4659      	mov	r1, fp
 80055ec:	f7fa fe48 	bl	8000280 <__aeabi_uldivmod>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4613      	mov	r3, r2
 80055f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055fe:	d308      	bcc.n	8005612 <UART_SetConfig+0x3de>
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005606:	d204      	bcs.n	8005612 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	60da      	str	r2, [r3, #12]
 8005610:	e0b6      	b.n	8005780 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005618:	e0b2      	b.n	8005780 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005622:	d15e      	bne.n	80056e2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005624:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005628:	2b08      	cmp	r3, #8
 800562a:	d828      	bhi.n	800567e <UART_SetConfig+0x44a>
 800562c:	a201      	add	r2, pc, #4	; (adr r2, 8005634 <UART_SetConfig+0x400>)
 800562e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005632:	bf00      	nop
 8005634:	08005659 	.word	0x08005659
 8005638:	08005661 	.word	0x08005661
 800563c:	08005669 	.word	0x08005669
 8005640:	0800567f 	.word	0x0800567f
 8005644:	0800566f 	.word	0x0800566f
 8005648:	0800567f 	.word	0x0800567f
 800564c:	0800567f 	.word	0x0800567f
 8005650:	0800567f 	.word	0x0800567f
 8005654:	08005677 	.word	0x08005677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005658:	f7fe ffc2 	bl	80045e0 <HAL_RCC_GetPCLK1Freq>
 800565c:	61f8      	str	r0, [r7, #28]
        break;
 800565e:	e014      	b.n	800568a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005660:	f7fe ffd4 	bl	800460c <HAL_RCC_GetPCLK2Freq>
 8005664:	61f8      	str	r0, [r7, #28]
        break;
 8005666:	e010      	b.n	800568a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005668:	4b4d      	ldr	r3, [pc, #308]	; (80057a0 <UART_SetConfig+0x56c>)
 800566a:	61fb      	str	r3, [r7, #28]
        break;
 800566c:	e00d      	b.n	800568a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800566e:	f7fe ff1f 	bl	80044b0 <HAL_RCC_GetSysClockFreq>
 8005672:	61f8      	str	r0, [r7, #28]
        break;
 8005674:	e009      	b.n	800568a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800567a:	61fb      	str	r3, [r7, #28]
        break;
 800567c:	e005      	b.n	800568a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005688:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d077      	beq.n	8005780 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	005a      	lsls	r2, r3, #1
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	085b      	lsrs	r3, r3, #1
 800569a:	441a      	add	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	2b0f      	cmp	r3, #15
 80056aa:	d916      	bls.n	80056da <UART_SetConfig+0x4a6>
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b2:	d212      	bcs.n	80056da <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	f023 030f 	bic.w	r3, r3, #15
 80056bc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	085b      	lsrs	r3, r3, #1
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f003 0307 	and.w	r3, r3, #7
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	8afb      	ldrh	r3, [r7, #22]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	8afa      	ldrh	r2, [r7, #22]
 80056d6:	60da      	str	r2, [r3, #12]
 80056d8:	e052      	b.n	8005780 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80056e0:	e04e      	b.n	8005780 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056e6:	2b08      	cmp	r3, #8
 80056e8:	d827      	bhi.n	800573a <UART_SetConfig+0x506>
 80056ea:	a201      	add	r2, pc, #4	; (adr r2, 80056f0 <UART_SetConfig+0x4bc>)
 80056ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f0:	08005715 	.word	0x08005715
 80056f4:	0800571d 	.word	0x0800571d
 80056f8:	08005725 	.word	0x08005725
 80056fc:	0800573b 	.word	0x0800573b
 8005700:	0800572b 	.word	0x0800572b
 8005704:	0800573b 	.word	0x0800573b
 8005708:	0800573b 	.word	0x0800573b
 800570c:	0800573b 	.word	0x0800573b
 8005710:	08005733 	.word	0x08005733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005714:	f7fe ff64 	bl	80045e0 <HAL_RCC_GetPCLK1Freq>
 8005718:	61f8      	str	r0, [r7, #28]
        break;
 800571a:	e014      	b.n	8005746 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800571c:	f7fe ff76 	bl	800460c <HAL_RCC_GetPCLK2Freq>
 8005720:	61f8      	str	r0, [r7, #28]
        break;
 8005722:	e010      	b.n	8005746 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005724:	4b1e      	ldr	r3, [pc, #120]	; (80057a0 <UART_SetConfig+0x56c>)
 8005726:	61fb      	str	r3, [r7, #28]
        break;
 8005728:	e00d      	b.n	8005746 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800572a:	f7fe fec1 	bl	80044b0 <HAL_RCC_GetSysClockFreq>
 800572e:	61f8      	str	r0, [r7, #28]
        break;
 8005730:	e009      	b.n	8005746 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005736:	61fb      	str	r3, [r7, #28]
        break;
 8005738:	e005      	b.n	8005746 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800573a:	2300      	movs	r3, #0
 800573c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005744:	bf00      	nop
    }

    if (pclk != 0U)
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d019      	beq.n	8005780 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	085a      	lsrs	r2, r3, #1
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	441a      	add	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	fbb2 f3f3 	udiv	r3, r2, r3
 800575e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	2b0f      	cmp	r3, #15
 8005764:	d909      	bls.n	800577a <UART_SetConfig+0x546>
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800576c:	d205      	bcs.n	800577a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	b29a      	uxth	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	60da      	str	r2, [r3, #12]
 8005778:	e002      	b.n	8005780 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800578c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005790:	4618      	mov	r0, r3
 8005792:	3728      	adds	r7, #40	; 0x28
 8005794:	46bd      	mov	sp, r7
 8005796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800579a:	bf00      	nop
 800579c:	40008000 	.word	0x40008000
 80057a0:	00f42400 	.word	0x00f42400

080057a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00a      	beq.n	80057ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	f003 0304 	and.w	r3, r3, #4
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00a      	beq.n	8005812 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005816:	f003 0308 	and.w	r3, r3, #8
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00a      	beq.n	8005834 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	f003 0310 	and.w	r3, r3, #16
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00a      	beq.n	8005856 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	f003 0320 	and.w	r3, r3, #32
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00a      	beq.n	8005878 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	430a      	orrs	r2, r1
 8005876:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01a      	beq.n	80058ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058a2:	d10a      	bne.n	80058ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00a      	beq.n	80058dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	605a      	str	r2, [r3, #4]
  }
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af02      	add	r7, sp, #8
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058f8:	f7fb fe7a 	bl	80015f0 <HAL_GetTick>
 80058fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0308 	and.w	r3, r3, #8
 8005908:	2b08      	cmp	r3, #8
 800590a:	d10e      	bne.n	800592a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800590c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f82d 	bl	800597a <UART_WaitOnFlagUntilTimeout>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d001      	beq.n	800592a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e023      	b.n	8005972 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0304 	and.w	r3, r3, #4
 8005934:	2b04      	cmp	r3, #4
 8005936:	d10e      	bne.n	8005956 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005938:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f817 	bl	800597a <UART_WaitOnFlagUntilTimeout>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e00d      	b.n	8005972 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2220      	movs	r2, #32
 800595a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2220      	movs	r2, #32
 8005960:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b09c      	sub	sp, #112	; 0x70
 800597e:	af00      	add	r7, sp, #0
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	60b9      	str	r1, [r7, #8]
 8005984:	603b      	str	r3, [r7, #0]
 8005986:	4613      	mov	r3, r2
 8005988:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800598a:	e0a5      	b.n	8005ad8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800598c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800598e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005992:	f000 80a1 	beq.w	8005ad8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005996:	f7fb fe2b 	bl	80015f0 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d302      	bcc.n	80059ac <UART_WaitOnFlagUntilTimeout+0x32>
 80059a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d13e      	bne.n	8005a2a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059b4:	e853 3f00 	ldrex	r3, [r3]
 80059b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059c0:	667b      	str	r3, [r7, #100]	; 0x64
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059d2:	e841 2300 	strex	r3, r2, [r1]
 80059d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1e6      	bne.n	80059ac <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3308      	adds	r3, #8
 80059e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f0:	f023 0301 	bic.w	r3, r3, #1
 80059f4:	663b      	str	r3, [r7, #96]	; 0x60
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3308      	adds	r3, #8
 80059fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e5      	bne.n	80059de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2220      	movs	r2, #32
 8005a16:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e067      	b.n	8005afa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d04f      	beq.n	8005ad8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a46:	d147      	bne.n	8005ad8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a50:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	e853 3f00 	ldrex	r3, [r3]
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a70:	637b      	str	r3, [r7, #52]	; 0x34
 8005a72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a78:	e841 2300 	strex	r3, r2, [r1]
 8005a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1e6      	bne.n	8005a52 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3308      	adds	r3, #8
 8005a8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	e853 3f00 	ldrex	r3, [r3]
 8005a92:	613b      	str	r3, [r7, #16]
   return(result);
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	f023 0301 	bic.w	r3, r3, #1
 8005a9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3308      	adds	r3, #8
 8005aa2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005aa4:	623a      	str	r2, [r7, #32]
 8005aa6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa8:	69f9      	ldr	r1, [r7, #28]
 8005aaa:	6a3a      	ldr	r2, [r7, #32]
 8005aac:	e841 2300 	strex	r3, r2, [r1]
 8005ab0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1e5      	bne.n	8005a84 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2220      	movs	r2, #32
 8005abc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e010      	b.n	8005afa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	69da      	ldr	r2, [r3, #28]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	bf0c      	ite	eq
 8005ae8:	2301      	moveq	r3, #1
 8005aea:	2300      	movne	r3, #0
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	79fb      	ldrb	r3, [r7, #7]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	f43f af4a 	beq.w	800598c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3770      	adds	r7, #112	; 0x70
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
	...

08005b04 <__errno>:
 8005b04:	4b01      	ldr	r3, [pc, #4]	; (8005b0c <__errno+0x8>)
 8005b06:	6818      	ldr	r0, [r3, #0]
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	20000018 	.word	0x20000018

08005b10 <__libc_init_array>:
 8005b10:	b570      	push	{r4, r5, r6, lr}
 8005b12:	4d0d      	ldr	r5, [pc, #52]	; (8005b48 <__libc_init_array+0x38>)
 8005b14:	4c0d      	ldr	r4, [pc, #52]	; (8005b4c <__libc_init_array+0x3c>)
 8005b16:	1b64      	subs	r4, r4, r5
 8005b18:	10a4      	asrs	r4, r4, #2
 8005b1a:	2600      	movs	r6, #0
 8005b1c:	42a6      	cmp	r6, r4
 8005b1e:	d109      	bne.n	8005b34 <__libc_init_array+0x24>
 8005b20:	4d0b      	ldr	r5, [pc, #44]	; (8005b50 <__libc_init_array+0x40>)
 8005b22:	4c0c      	ldr	r4, [pc, #48]	; (8005b54 <__libc_init_array+0x44>)
 8005b24:	f000 fc8e 	bl	8006444 <_init>
 8005b28:	1b64      	subs	r4, r4, r5
 8005b2a:	10a4      	asrs	r4, r4, #2
 8005b2c:	2600      	movs	r6, #0
 8005b2e:	42a6      	cmp	r6, r4
 8005b30:	d105      	bne.n	8005b3e <__libc_init_array+0x2e>
 8005b32:	bd70      	pop	{r4, r5, r6, pc}
 8005b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b38:	4798      	blx	r3
 8005b3a:	3601      	adds	r6, #1
 8005b3c:	e7ee      	b.n	8005b1c <__libc_init_array+0xc>
 8005b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b42:	4798      	blx	r3
 8005b44:	3601      	adds	r6, #1
 8005b46:	e7f2      	b.n	8005b2e <__libc_init_array+0x1e>
 8005b48:	0800726c 	.word	0x0800726c
 8005b4c:	0800726c 	.word	0x0800726c
 8005b50:	0800726c 	.word	0x0800726c
 8005b54:	08007270 	.word	0x08007270

08005b58 <memset>:
 8005b58:	4402      	add	r2, r0
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d100      	bne.n	8005b62 <memset+0xa>
 8005b60:	4770      	bx	lr
 8005b62:	f803 1b01 	strb.w	r1, [r3], #1
 8005b66:	e7f9      	b.n	8005b5c <memset+0x4>

08005b68 <siprintf>:
 8005b68:	b40e      	push	{r1, r2, r3}
 8005b6a:	b500      	push	{lr}
 8005b6c:	b09c      	sub	sp, #112	; 0x70
 8005b6e:	ab1d      	add	r3, sp, #116	; 0x74
 8005b70:	9002      	str	r0, [sp, #8]
 8005b72:	9006      	str	r0, [sp, #24]
 8005b74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b78:	4809      	ldr	r0, [pc, #36]	; (8005ba0 <siprintf+0x38>)
 8005b7a:	9107      	str	r1, [sp, #28]
 8005b7c:	9104      	str	r1, [sp, #16]
 8005b7e:	4909      	ldr	r1, [pc, #36]	; (8005ba4 <siprintf+0x3c>)
 8005b80:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b84:	9105      	str	r1, [sp, #20]
 8005b86:	6800      	ldr	r0, [r0, #0]
 8005b88:	9301      	str	r3, [sp, #4]
 8005b8a:	a902      	add	r1, sp, #8
 8005b8c:	f000 f868 	bl	8005c60 <_svfiprintf_r>
 8005b90:	9b02      	ldr	r3, [sp, #8]
 8005b92:	2200      	movs	r2, #0
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	b01c      	add	sp, #112	; 0x70
 8005b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b9c:	b003      	add	sp, #12
 8005b9e:	4770      	bx	lr
 8005ba0:	20000018 	.word	0x20000018
 8005ba4:	ffff0208 	.word	0xffff0208

08005ba8 <__ssputs_r>:
 8005ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bac:	688e      	ldr	r6, [r1, #8]
 8005bae:	429e      	cmp	r6, r3
 8005bb0:	4682      	mov	sl, r0
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	4690      	mov	r8, r2
 8005bb6:	461f      	mov	r7, r3
 8005bb8:	d838      	bhi.n	8005c2c <__ssputs_r+0x84>
 8005bba:	898a      	ldrh	r2, [r1, #12]
 8005bbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005bc0:	d032      	beq.n	8005c28 <__ssputs_r+0x80>
 8005bc2:	6825      	ldr	r5, [r4, #0]
 8005bc4:	6909      	ldr	r1, [r1, #16]
 8005bc6:	eba5 0901 	sub.w	r9, r5, r1
 8005bca:	6965      	ldr	r5, [r4, #20]
 8005bcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	444b      	add	r3, r9
 8005bd8:	106d      	asrs	r5, r5, #1
 8005bda:	429d      	cmp	r5, r3
 8005bdc:	bf38      	it	cc
 8005bde:	461d      	movcc	r5, r3
 8005be0:	0553      	lsls	r3, r2, #21
 8005be2:	d531      	bpl.n	8005c48 <__ssputs_r+0xa0>
 8005be4:	4629      	mov	r1, r5
 8005be6:	f000 fb63 	bl	80062b0 <_malloc_r>
 8005bea:	4606      	mov	r6, r0
 8005bec:	b950      	cbnz	r0, 8005c04 <__ssputs_r+0x5c>
 8005bee:	230c      	movs	r3, #12
 8005bf0:	f8ca 3000 	str.w	r3, [sl]
 8005bf4:	89a3      	ldrh	r3, [r4, #12]
 8005bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bfa:	81a3      	strh	r3, [r4, #12]
 8005bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c04:	6921      	ldr	r1, [r4, #16]
 8005c06:	464a      	mov	r2, r9
 8005c08:	f000 fabe 	bl	8006188 <memcpy>
 8005c0c:	89a3      	ldrh	r3, [r4, #12]
 8005c0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c16:	81a3      	strh	r3, [r4, #12]
 8005c18:	6126      	str	r6, [r4, #16]
 8005c1a:	6165      	str	r5, [r4, #20]
 8005c1c:	444e      	add	r6, r9
 8005c1e:	eba5 0509 	sub.w	r5, r5, r9
 8005c22:	6026      	str	r6, [r4, #0]
 8005c24:	60a5      	str	r5, [r4, #8]
 8005c26:	463e      	mov	r6, r7
 8005c28:	42be      	cmp	r6, r7
 8005c2a:	d900      	bls.n	8005c2e <__ssputs_r+0x86>
 8005c2c:	463e      	mov	r6, r7
 8005c2e:	6820      	ldr	r0, [r4, #0]
 8005c30:	4632      	mov	r2, r6
 8005c32:	4641      	mov	r1, r8
 8005c34:	f000 fab6 	bl	80061a4 <memmove>
 8005c38:	68a3      	ldr	r3, [r4, #8]
 8005c3a:	1b9b      	subs	r3, r3, r6
 8005c3c:	60a3      	str	r3, [r4, #8]
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	4433      	add	r3, r6
 8005c42:	6023      	str	r3, [r4, #0]
 8005c44:	2000      	movs	r0, #0
 8005c46:	e7db      	b.n	8005c00 <__ssputs_r+0x58>
 8005c48:	462a      	mov	r2, r5
 8005c4a:	f000 fba5 	bl	8006398 <_realloc_r>
 8005c4e:	4606      	mov	r6, r0
 8005c50:	2800      	cmp	r0, #0
 8005c52:	d1e1      	bne.n	8005c18 <__ssputs_r+0x70>
 8005c54:	6921      	ldr	r1, [r4, #16]
 8005c56:	4650      	mov	r0, sl
 8005c58:	f000 fabe 	bl	80061d8 <_free_r>
 8005c5c:	e7c7      	b.n	8005bee <__ssputs_r+0x46>
	...

08005c60 <_svfiprintf_r>:
 8005c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c64:	4698      	mov	r8, r3
 8005c66:	898b      	ldrh	r3, [r1, #12]
 8005c68:	061b      	lsls	r3, r3, #24
 8005c6a:	b09d      	sub	sp, #116	; 0x74
 8005c6c:	4607      	mov	r7, r0
 8005c6e:	460d      	mov	r5, r1
 8005c70:	4614      	mov	r4, r2
 8005c72:	d50e      	bpl.n	8005c92 <_svfiprintf_r+0x32>
 8005c74:	690b      	ldr	r3, [r1, #16]
 8005c76:	b963      	cbnz	r3, 8005c92 <_svfiprintf_r+0x32>
 8005c78:	2140      	movs	r1, #64	; 0x40
 8005c7a:	f000 fb19 	bl	80062b0 <_malloc_r>
 8005c7e:	6028      	str	r0, [r5, #0]
 8005c80:	6128      	str	r0, [r5, #16]
 8005c82:	b920      	cbnz	r0, 8005c8e <_svfiprintf_r+0x2e>
 8005c84:	230c      	movs	r3, #12
 8005c86:	603b      	str	r3, [r7, #0]
 8005c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c8c:	e0d1      	b.n	8005e32 <_svfiprintf_r+0x1d2>
 8005c8e:	2340      	movs	r3, #64	; 0x40
 8005c90:	616b      	str	r3, [r5, #20]
 8005c92:	2300      	movs	r3, #0
 8005c94:	9309      	str	r3, [sp, #36]	; 0x24
 8005c96:	2320      	movs	r3, #32
 8005c98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ca0:	2330      	movs	r3, #48	; 0x30
 8005ca2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005e4c <_svfiprintf_r+0x1ec>
 8005ca6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005caa:	f04f 0901 	mov.w	r9, #1
 8005cae:	4623      	mov	r3, r4
 8005cb0:	469a      	mov	sl, r3
 8005cb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cb6:	b10a      	cbz	r2, 8005cbc <_svfiprintf_r+0x5c>
 8005cb8:	2a25      	cmp	r2, #37	; 0x25
 8005cba:	d1f9      	bne.n	8005cb0 <_svfiprintf_r+0x50>
 8005cbc:	ebba 0b04 	subs.w	fp, sl, r4
 8005cc0:	d00b      	beq.n	8005cda <_svfiprintf_r+0x7a>
 8005cc2:	465b      	mov	r3, fp
 8005cc4:	4622      	mov	r2, r4
 8005cc6:	4629      	mov	r1, r5
 8005cc8:	4638      	mov	r0, r7
 8005cca:	f7ff ff6d 	bl	8005ba8 <__ssputs_r>
 8005cce:	3001      	adds	r0, #1
 8005cd0:	f000 80aa 	beq.w	8005e28 <_svfiprintf_r+0x1c8>
 8005cd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cd6:	445a      	add	r2, fp
 8005cd8:	9209      	str	r2, [sp, #36]	; 0x24
 8005cda:	f89a 3000 	ldrb.w	r3, [sl]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 80a2 	beq.w	8005e28 <_svfiprintf_r+0x1c8>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cee:	f10a 0a01 	add.w	sl, sl, #1
 8005cf2:	9304      	str	r3, [sp, #16]
 8005cf4:	9307      	str	r3, [sp, #28]
 8005cf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cfa:	931a      	str	r3, [sp, #104]	; 0x68
 8005cfc:	4654      	mov	r4, sl
 8005cfe:	2205      	movs	r2, #5
 8005d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d04:	4851      	ldr	r0, [pc, #324]	; (8005e4c <_svfiprintf_r+0x1ec>)
 8005d06:	f7fa fa6b 	bl	80001e0 <memchr>
 8005d0a:	9a04      	ldr	r2, [sp, #16]
 8005d0c:	b9d8      	cbnz	r0, 8005d46 <_svfiprintf_r+0xe6>
 8005d0e:	06d0      	lsls	r0, r2, #27
 8005d10:	bf44      	itt	mi
 8005d12:	2320      	movmi	r3, #32
 8005d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d18:	0711      	lsls	r1, r2, #28
 8005d1a:	bf44      	itt	mi
 8005d1c:	232b      	movmi	r3, #43	; 0x2b
 8005d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d22:	f89a 3000 	ldrb.w	r3, [sl]
 8005d26:	2b2a      	cmp	r3, #42	; 0x2a
 8005d28:	d015      	beq.n	8005d56 <_svfiprintf_r+0xf6>
 8005d2a:	9a07      	ldr	r2, [sp, #28]
 8005d2c:	4654      	mov	r4, sl
 8005d2e:	2000      	movs	r0, #0
 8005d30:	f04f 0c0a 	mov.w	ip, #10
 8005d34:	4621      	mov	r1, r4
 8005d36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d3a:	3b30      	subs	r3, #48	; 0x30
 8005d3c:	2b09      	cmp	r3, #9
 8005d3e:	d94e      	bls.n	8005dde <_svfiprintf_r+0x17e>
 8005d40:	b1b0      	cbz	r0, 8005d70 <_svfiprintf_r+0x110>
 8005d42:	9207      	str	r2, [sp, #28]
 8005d44:	e014      	b.n	8005d70 <_svfiprintf_r+0x110>
 8005d46:	eba0 0308 	sub.w	r3, r0, r8
 8005d4a:	fa09 f303 	lsl.w	r3, r9, r3
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	9304      	str	r3, [sp, #16]
 8005d52:	46a2      	mov	sl, r4
 8005d54:	e7d2      	b.n	8005cfc <_svfiprintf_r+0x9c>
 8005d56:	9b03      	ldr	r3, [sp, #12]
 8005d58:	1d19      	adds	r1, r3, #4
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	9103      	str	r1, [sp, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	bfbb      	ittet	lt
 8005d62:	425b      	neglt	r3, r3
 8005d64:	f042 0202 	orrlt.w	r2, r2, #2
 8005d68:	9307      	strge	r3, [sp, #28]
 8005d6a:	9307      	strlt	r3, [sp, #28]
 8005d6c:	bfb8      	it	lt
 8005d6e:	9204      	strlt	r2, [sp, #16]
 8005d70:	7823      	ldrb	r3, [r4, #0]
 8005d72:	2b2e      	cmp	r3, #46	; 0x2e
 8005d74:	d10c      	bne.n	8005d90 <_svfiprintf_r+0x130>
 8005d76:	7863      	ldrb	r3, [r4, #1]
 8005d78:	2b2a      	cmp	r3, #42	; 0x2a
 8005d7a:	d135      	bne.n	8005de8 <_svfiprintf_r+0x188>
 8005d7c:	9b03      	ldr	r3, [sp, #12]
 8005d7e:	1d1a      	adds	r2, r3, #4
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	9203      	str	r2, [sp, #12]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	bfb8      	it	lt
 8005d88:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005d8c:	3402      	adds	r4, #2
 8005d8e:	9305      	str	r3, [sp, #20]
 8005d90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005e5c <_svfiprintf_r+0x1fc>
 8005d94:	7821      	ldrb	r1, [r4, #0]
 8005d96:	2203      	movs	r2, #3
 8005d98:	4650      	mov	r0, sl
 8005d9a:	f7fa fa21 	bl	80001e0 <memchr>
 8005d9e:	b140      	cbz	r0, 8005db2 <_svfiprintf_r+0x152>
 8005da0:	2340      	movs	r3, #64	; 0x40
 8005da2:	eba0 000a 	sub.w	r0, r0, sl
 8005da6:	fa03 f000 	lsl.w	r0, r3, r0
 8005daa:	9b04      	ldr	r3, [sp, #16]
 8005dac:	4303      	orrs	r3, r0
 8005dae:	3401      	adds	r4, #1
 8005db0:	9304      	str	r3, [sp, #16]
 8005db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005db6:	4826      	ldr	r0, [pc, #152]	; (8005e50 <_svfiprintf_r+0x1f0>)
 8005db8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dbc:	2206      	movs	r2, #6
 8005dbe:	f7fa fa0f 	bl	80001e0 <memchr>
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	d038      	beq.n	8005e38 <_svfiprintf_r+0x1d8>
 8005dc6:	4b23      	ldr	r3, [pc, #140]	; (8005e54 <_svfiprintf_r+0x1f4>)
 8005dc8:	bb1b      	cbnz	r3, 8005e12 <_svfiprintf_r+0x1b2>
 8005dca:	9b03      	ldr	r3, [sp, #12]
 8005dcc:	3307      	adds	r3, #7
 8005dce:	f023 0307 	bic.w	r3, r3, #7
 8005dd2:	3308      	adds	r3, #8
 8005dd4:	9303      	str	r3, [sp, #12]
 8005dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dd8:	4433      	add	r3, r6
 8005dda:	9309      	str	r3, [sp, #36]	; 0x24
 8005ddc:	e767      	b.n	8005cae <_svfiprintf_r+0x4e>
 8005dde:	fb0c 3202 	mla	r2, ip, r2, r3
 8005de2:	460c      	mov	r4, r1
 8005de4:	2001      	movs	r0, #1
 8005de6:	e7a5      	b.n	8005d34 <_svfiprintf_r+0xd4>
 8005de8:	2300      	movs	r3, #0
 8005dea:	3401      	adds	r4, #1
 8005dec:	9305      	str	r3, [sp, #20]
 8005dee:	4619      	mov	r1, r3
 8005df0:	f04f 0c0a 	mov.w	ip, #10
 8005df4:	4620      	mov	r0, r4
 8005df6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dfa:	3a30      	subs	r2, #48	; 0x30
 8005dfc:	2a09      	cmp	r2, #9
 8005dfe:	d903      	bls.n	8005e08 <_svfiprintf_r+0x1a8>
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0c5      	beq.n	8005d90 <_svfiprintf_r+0x130>
 8005e04:	9105      	str	r1, [sp, #20]
 8005e06:	e7c3      	b.n	8005d90 <_svfiprintf_r+0x130>
 8005e08:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e0c:	4604      	mov	r4, r0
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e7f0      	b.n	8005df4 <_svfiprintf_r+0x194>
 8005e12:	ab03      	add	r3, sp, #12
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	462a      	mov	r2, r5
 8005e18:	4b0f      	ldr	r3, [pc, #60]	; (8005e58 <_svfiprintf_r+0x1f8>)
 8005e1a:	a904      	add	r1, sp, #16
 8005e1c:	4638      	mov	r0, r7
 8005e1e:	f3af 8000 	nop.w
 8005e22:	1c42      	adds	r2, r0, #1
 8005e24:	4606      	mov	r6, r0
 8005e26:	d1d6      	bne.n	8005dd6 <_svfiprintf_r+0x176>
 8005e28:	89ab      	ldrh	r3, [r5, #12]
 8005e2a:	065b      	lsls	r3, r3, #25
 8005e2c:	f53f af2c 	bmi.w	8005c88 <_svfiprintf_r+0x28>
 8005e30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e32:	b01d      	add	sp, #116	; 0x74
 8005e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e38:	ab03      	add	r3, sp, #12
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	462a      	mov	r2, r5
 8005e3e:	4b06      	ldr	r3, [pc, #24]	; (8005e58 <_svfiprintf_r+0x1f8>)
 8005e40:	a904      	add	r1, sp, #16
 8005e42:	4638      	mov	r0, r7
 8005e44:	f000 f87a 	bl	8005f3c <_printf_i>
 8005e48:	e7eb      	b.n	8005e22 <_svfiprintf_r+0x1c2>
 8005e4a:	bf00      	nop
 8005e4c:	08007230 	.word	0x08007230
 8005e50:	0800723a 	.word	0x0800723a
 8005e54:	00000000 	.word	0x00000000
 8005e58:	08005ba9 	.word	0x08005ba9
 8005e5c:	08007236 	.word	0x08007236

08005e60 <_printf_common>:
 8005e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e64:	4616      	mov	r6, r2
 8005e66:	4699      	mov	r9, r3
 8005e68:	688a      	ldr	r2, [r1, #8]
 8005e6a:	690b      	ldr	r3, [r1, #16]
 8005e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e70:	4293      	cmp	r3, r2
 8005e72:	bfb8      	it	lt
 8005e74:	4613      	movlt	r3, r2
 8005e76:	6033      	str	r3, [r6, #0]
 8005e78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e7c:	4607      	mov	r7, r0
 8005e7e:	460c      	mov	r4, r1
 8005e80:	b10a      	cbz	r2, 8005e86 <_printf_common+0x26>
 8005e82:	3301      	adds	r3, #1
 8005e84:	6033      	str	r3, [r6, #0]
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	0699      	lsls	r1, r3, #26
 8005e8a:	bf42      	ittt	mi
 8005e8c:	6833      	ldrmi	r3, [r6, #0]
 8005e8e:	3302      	addmi	r3, #2
 8005e90:	6033      	strmi	r3, [r6, #0]
 8005e92:	6825      	ldr	r5, [r4, #0]
 8005e94:	f015 0506 	ands.w	r5, r5, #6
 8005e98:	d106      	bne.n	8005ea8 <_printf_common+0x48>
 8005e9a:	f104 0a19 	add.w	sl, r4, #25
 8005e9e:	68e3      	ldr	r3, [r4, #12]
 8005ea0:	6832      	ldr	r2, [r6, #0]
 8005ea2:	1a9b      	subs	r3, r3, r2
 8005ea4:	42ab      	cmp	r3, r5
 8005ea6:	dc26      	bgt.n	8005ef6 <_printf_common+0x96>
 8005ea8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005eac:	1e13      	subs	r3, r2, #0
 8005eae:	6822      	ldr	r2, [r4, #0]
 8005eb0:	bf18      	it	ne
 8005eb2:	2301      	movne	r3, #1
 8005eb4:	0692      	lsls	r2, r2, #26
 8005eb6:	d42b      	bmi.n	8005f10 <_printf_common+0xb0>
 8005eb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ebc:	4649      	mov	r1, r9
 8005ebe:	4638      	mov	r0, r7
 8005ec0:	47c0      	blx	r8
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	d01e      	beq.n	8005f04 <_printf_common+0xa4>
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	68e5      	ldr	r5, [r4, #12]
 8005eca:	6832      	ldr	r2, [r6, #0]
 8005ecc:	f003 0306 	and.w	r3, r3, #6
 8005ed0:	2b04      	cmp	r3, #4
 8005ed2:	bf08      	it	eq
 8005ed4:	1aad      	subeq	r5, r5, r2
 8005ed6:	68a3      	ldr	r3, [r4, #8]
 8005ed8:	6922      	ldr	r2, [r4, #16]
 8005eda:	bf0c      	ite	eq
 8005edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ee0:	2500      	movne	r5, #0
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	bfc4      	itt	gt
 8005ee6:	1a9b      	subgt	r3, r3, r2
 8005ee8:	18ed      	addgt	r5, r5, r3
 8005eea:	2600      	movs	r6, #0
 8005eec:	341a      	adds	r4, #26
 8005eee:	42b5      	cmp	r5, r6
 8005ef0:	d11a      	bne.n	8005f28 <_printf_common+0xc8>
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	e008      	b.n	8005f08 <_printf_common+0xa8>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	4652      	mov	r2, sl
 8005efa:	4649      	mov	r1, r9
 8005efc:	4638      	mov	r0, r7
 8005efe:	47c0      	blx	r8
 8005f00:	3001      	adds	r0, #1
 8005f02:	d103      	bne.n	8005f0c <_printf_common+0xac>
 8005f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f0c:	3501      	adds	r5, #1
 8005f0e:	e7c6      	b.n	8005e9e <_printf_common+0x3e>
 8005f10:	18e1      	adds	r1, r4, r3
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	2030      	movs	r0, #48	; 0x30
 8005f16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f1a:	4422      	add	r2, r4
 8005f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f24:	3302      	adds	r3, #2
 8005f26:	e7c7      	b.n	8005eb8 <_printf_common+0x58>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	4622      	mov	r2, r4
 8005f2c:	4649      	mov	r1, r9
 8005f2e:	4638      	mov	r0, r7
 8005f30:	47c0      	blx	r8
 8005f32:	3001      	adds	r0, #1
 8005f34:	d0e6      	beq.n	8005f04 <_printf_common+0xa4>
 8005f36:	3601      	adds	r6, #1
 8005f38:	e7d9      	b.n	8005eee <_printf_common+0x8e>
	...

08005f3c <_printf_i>:
 8005f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f40:	7e0f      	ldrb	r7, [r1, #24]
 8005f42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f44:	2f78      	cmp	r7, #120	; 0x78
 8005f46:	4691      	mov	r9, r2
 8005f48:	4680      	mov	r8, r0
 8005f4a:	460c      	mov	r4, r1
 8005f4c:	469a      	mov	sl, r3
 8005f4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f52:	d807      	bhi.n	8005f64 <_printf_i+0x28>
 8005f54:	2f62      	cmp	r7, #98	; 0x62
 8005f56:	d80a      	bhi.n	8005f6e <_printf_i+0x32>
 8005f58:	2f00      	cmp	r7, #0
 8005f5a:	f000 80d8 	beq.w	800610e <_printf_i+0x1d2>
 8005f5e:	2f58      	cmp	r7, #88	; 0x58
 8005f60:	f000 80a3 	beq.w	80060aa <_printf_i+0x16e>
 8005f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f6c:	e03a      	b.n	8005fe4 <_printf_i+0xa8>
 8005f6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f72:	2b15      	cmp	r3, #21
 8005f74:	d8f6      	bhi.n	8005f64 <_printf_i+0x28>
 8005f76:	a101      	add	r1, pc, #4	; (adr r1, 8005f7c <_printf_i+0x40>)
 8005f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f7c:	08005fd5 	.word	0x08005fd5
 8005f80:	08005fe9 	.word	0x08005fe9
 8005f84:	08005f65 	.word	0x08005f65
 8005f88:	08005f65 	.word	0x08005f65
 8005f8c:	08005f65 	.word	0x08005f65
 8005f90:	08005f65 	.word	0x08005f65
 8005f94:	08005fe9 	.word	0x08005fe9
 8005f98:	08005f65 	.word	0x08005f65
 8005f9c:	08005f65 	.word	0x08005f65
 8005fa0:	08005f65 	.word	0x08005f65
 8005fa4:	08005f65 	.word	0x08005f65
 8005fa8:	080060f5 	.word	0x080060f5
 8005fac:	08006019 	.word	0x08006019
 8005fb0:	080060d7 	.word	0x080060d7
 8005fb4:	08005f65 	.word	0x08005f65
 8005fb8:	08005f65 	.word	0x08005f65
 8005fbc:	08006117 	.word	0x08006117
 8005fc0:	08005f65 	.word	0x08005f65
 8005fc4:	08006019 	.word	0x08006019
 8005fc8:	08005f65 	.word	0x08005f65
 8005fcc:	08005f65 	.word	0x08005f65
 8005fd0:	080060df 	.word	0x080060df
 8005fd4:	682b      	ldr	r3, [r5, #0]
 8005fd6:	1d1a      	adds	r2, r3, #4
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	602a      	str	r2, [r5, #0]
 8005fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e0a3      	b.n	8006130 <_printf_i+0x1f4>
 8005fe8:	6820      	ldr	r0, [r4, #0]
 8005fea:	6829      	ldr	r1, [r5, #0]
 8005fec:	0606      	lsls	r6, r0, #24
 8005fee:	f101 0304 	add.w	r3, r1, #4
 8005ff2:	d50a      	bpl.n	800600a <_printf_i+0xce>
 8005ff4:	680e      	ldr	r6, [r1, #0]
 8005ff6:	602b      	str	r3, [r5, #0]
 8005ff8:	2e00      	cmp	r6, #0
 8005ffa:	da03      	bge.n	8006004 <_printf_i+0xc8>
 8005ffc:	232d      	movs	r3, #45	; 0x2d
 8005ffe:	4276      	negs	r6, r6
 8006000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006004:	485e      	ldr	r0, [pc, #376]	; (8006180 <_printf_i+0x244>)
 8006006:	230a      	movs	r3, #10
 8006008:	e019      	b.n	800603e <_printf_i+0x102>
 800600a:	680e      	ldr	r6, [r1, #0]
 800600c:	602b      	str	r3, [r5, #0]
 800600e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006012:	bf18      	it	ne
 8006014:	b236      	sxthne	r6, r6
 8006016:	e7ef      	b.n	8005ff8 <_printf_i+0xbc>
 8006018:	682b      	ldr	r3, [r5, #0]
 800601a:	6820      	ldr	r0, [r4, #0]
 800601c:	1d19      	adds	r1, r3, #4
 800601e:	6029      	str	r1, [r5, #0]
 8006020:	0601      	lsls	r1, r0, #24
 8006022:	d501      	bpl.n	8006028 <_printf_i+0xec>
 8006024:	681e      	ldr	r6, [r3, #0]
 8006026:	e002      	b.n	800602e <_printf_i+0xf2>
 8006028:	0646      	lsls	r6, r0, #25
 800602a:	d5fb      	bpl.n	8006024 <_printf_i+0xe8>
 800602c:	881e      	ldrh	r6, [r3, #0]
 800602e:	4854      	ldr	r0, [pc, #336]	; (8006180 <_printf_i+0x244>)
 8006030:	2f6f      	cmp	r7, #111	; 0x6f
 8006032:	bf0c      	ite	eq
 8006034:	2308      	moveq	r3, #8
 8006036:	230a      	movne	r3, #10
 8006038:	2100      	movs	r1, #0
 800603a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800603e:	6865      	ldr	r5, [r4, #4]
 8006040:	60a5      	str	r5, [r4, #8]
 8006042:	2d00      	cmp	r5, #0
 8006044:	bfa2      	ittt	ge
 8006046:	6821      	ldrge	r1, [r4, #0]
 8006048:	f021 0104 	bicge.w	r1, r1, #4
 800604c:	6021      	strge	r1, [r4, #0]
 800604e:	b90e      	cbnz	r6, 8006054 <_printf_i+0x118>
 8006050:	2d00      	cmp	r5, #0
 8006052:	d04d      	beq.n	80060f0 <_printf_i+0x1b4>
 8006054:	4615      	mov	r5, r2
 8006056:	fbb6 f1f3 	udiv	r1, r6, r3
 800605a:	fb03 6711 	mls	r7, r3, r1, r6
 800605e:	5dc7      	ldrb	r7, [r0, r7]
 8006060:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006064:	4637      	mov	r7, r6
 8006066:	42bb      	cmp	r3, r7
 8006068:	460e      	mov	r6, r1
 800606a:	d9f4      	bls.n	8006056 <_printf_i+0x11a>
 800606c:	2b08      	cmp	r3, #8
 800606e:	d10b      	bne.n	8006088 <_printf_i+0x14c>
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	07de      	lsls	r6, r3, #31
 8006074:	d508      	bpl.n	8006088 <_printf_i+0x14c>
 8006076:	6923      	ldr	r3, [r4, #16]
 8006078:	6861      	ldr	r1, [r4, #4]
 800607a:	4299      	cmp	r1, r3
 800607c:	bfde      	ittt	le
 800607e:	2330      	movle	r3, #48	; 0x30
 8006080:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006084:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006088:	1b52      	subs	r2, r2, r5
 800608a:	6122      	str	r2, [r4, #16]
 800608c:	f8cd a000 	str.w	sl, [sp]
 8006090:	464b      	mov	r3, r9
 8006092:	aa03      	add	r2, sp, #12
 8006094:	4621      	mov	r1, r4
 8006096:	4640      	mov	r0, r8
 8006098:	f7ff fee2 	bl	8005e60 <_printf_common>
 800609c:	3001      	adds	r0, #1
 800609e:	d14c      	bne.n	800613a <_printf_i+0x1fe>
 80060a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060a4:	b004      	add	sp, #16
 80060a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060aa:	4835      	ldr	r0, [pc, #212]	; (8006180 <_printf_i+0x244>)
 80060ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80060b0:	6829      	ldr	r1, [r5, #0]
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80060b8:	6029      	str	r1, [r5, #0]
 80060ba:	061d      	lsls	r5, r3, #24
 80060bc:	d514      	bpl.n	80060e8 <_printf_i+0x1ac>
 80060be:	07df      	lsls	r7, r3, #31
 80060c0:	bf44      	itt	mi
 80060c2:	f043 0320 	orrmi.w	r3, r3, #32
 80060c6:	6023      	strmi	r3, [r4, #0]
 80060c8:	b91e      	cbnz	r6, 80060d2 <_printf_i+0x196>
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	f023 0320 	bic.w	r3, r3, #32
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	2310      	movs	r3, #16
 80060d4:	e7b0      	b.n	8006038 <_printf_i+0xfc>
 80060d6:	6823      	ldr	r3, [r4, #0]
 80060d8:	f043 0320 	orr.w	r3, r3, #32
 80060dc:	6023      	str	r3, [r4, #0]
 80060de:	2378      	movs	r3, #120	; 0x78
 80060e0:	4828      	ldr	r0, [pc, #160]	; (8006184 <_printf_i+0x248>)
 80060e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060e6:	e7e3      	b.n	80060b0 <_printf_i+0x174>
 80060e8:	0659      	lsls	r1, r3, #25
 80060ea:	bf48      	it	mi
 80060ec:	b2b6      	uxthmi	r6, r6
 80060ee:	e7e6      	b.n	80060be <_printf_i+0x182>
 80060f0:	4615      	mov	r5, r2
 80060f2:	e7bb      	b.n	800606c <_printf_i+0x130>
 80060f4:	682b      	ldr	r3, [r5, #0]
 80060f6:	6826      	ldr	r6, [r4, #0]
 80060f8:	6961      	ldr	r1, [r4, #20]
 80060fa:	1d18      	adds	r0, r3, #4
 80060fc:	6028      	str	r0, [r5, #0]
 80060fe:	0635      	lsls	r5, r6, #24
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	d501      	bpl.n	8006108 <_printf_i+0x1cc>
 8006104:	6019      	str	r1, [r3, #0]
 8006106:	e002      	b.n	800610e <_printf_i+0x1d2>
 8006108:	0670      	lsls	r0, r6, #25
 800610a:	d5fb      	bpl.n	8006104 <_printf_i+0x1c8>
 800610c:	8019      	strh	r1, [r3, #0]
 800610e:	2300      	movs	r3, #0
 8006110:	6123      	str	r3, [r4, #16]
 8006112:	4615      	mov	r5, r2
 8006114:	e7ba      	b.n	800608c <_printf_i+0x150>
 8006116:	682b      	ldr	r3, [r5, #0]
 8006118:	1d1a      	adds	r2, r3, #4
 800611a:	602a      	str	r2, [r5, #0]
 800611c:	681d      	ldr	r5, [r3, #0]
 800611e:	6862      	ldr	r2, [r4, #4]
 8006120:	2100      	movs	r1, #0
 8006122:	4628      	mov	r0, r5
 8006124:	f7fa f85c 	bl	80001e0 <memchr>
 8006128:	b108      	cbz	r0, 800612e <_printf_i+0x1f2>
 800612a:	1b40      	subs	r0, r0, r5
 800612c:	6060      	str	r0, [r4, #4]
 800612e:	6863      	ldr	r3, [r4, #4]
 8006130:	6123      	str	r3, [r4, #16]
 8006132:	2300      	movs	r3, #0
 8006134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006138:	e7a8      	b.n	800608c <_printf_i+0x150>
 800613a:	6923      	ldr	r3, [r4, #16]
 800613c:	462a      	mov	r2, r5
 800613e:	4649      	mov	r1, r9
 8006140:	4640      	mov	r0, r8
 8006142:	47d0      	blx	sl
 8006144:	3001      	adds	r0, #1
 8006146:	d0ab      	beq.n	80060a0 <_printf_i+0x164>
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	079b      	lsls	r3, r3, #30
 800614c:	d413      	bmi.n	8006176 <_printf_i+0x23a>
 800614e:	68e0      	ldr	r0, [r4, #12]
 8006150:	9b03      	ldr	r3, [sp, #12]
 8006152:	4298      	cmp	r0, r3
 8006154:	bfb8      	it	lt
 8006156:	4618      	movlt	r0, r3
 8006158:	e7a4      	b.n	80060a4 <_printf_i+0x168>
 800615a:	2301      	movs	r3, #1
 800615c:	4632      	mov	r2, r6
 800615e:	4649      	mov	r1, r9
 8006160:	4640      	mov	r0, r8
 8006162:	47d0      	blx	sl
 8006164:	3001      	adds	r0, #1
 8006166:	d09b      	beq.n	80060a0 <_printf_i+0x164>
 8006168:	3501      	adds	r5, #1
 800616a:	68e3      	ldr	r3, [r4, #12]
 800616c:	9903      	ldr	r1, [sp, #12]
 800616e:	1a5b      	subs	r3, r3, r1
 8006170:	42ab      	cmp	r3, r5
 8006172:	dcf2      	bgt.n	800615a <_printf_i+0x21e>
 8006174:	e7eb      	b.n	800614e <_printf_i+0x212>
 8006176:	2500      	movs	r5, #0
 8006178:	f104 0619 	add.w	r6, r4, #25
 800617c:	e7f5      	b.n	800616a <_printf_i+0x22e>
 800617e:	bf00      	nop
 8006180:	08007241 	.word	0x08007241
 8006184:	08007252 	.word	0x08007252

08006188 <memcpy>:
 8006188:	440a      	add	r2, r1
 800618a:	4291      	cmp	r1, r2
 800618c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006190:	d100      	bne.n	8006194 <memcpy+0xc>
 8006192:	4770      	bx	lr
 8006194:	b510      	push	{r4, lr}
 8006196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800619a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800619e:	4291      	cmp	r1, r2
 80061a0:	d1f9      	bne.n	8006196 <memcpy+0xe>
 80061a2:	bd10      	pop	{r4, pc}

080061a4 <memmove>:
 80061a4:	4288      	cmp	r0, r1
 80061a6:	b510      	push	{r4, lr}
 80061a8:	eb01 0402 	add.w	r4, r1, r2
 80061ac:	d902      	bls.n	80061b4 <memmove+0x10>
 80061ae:	4284      	cmp	r4, r0
 80061b0:	4623      	mov	r3, r4
 80061b2:	d807      	bhi.n	80061c4 <memmove+0x20>
 80061b4:	1e43      	subs	r3, r0, #1
 80061b6:	42a1      	cmp	r1, r4
 80061b8:	d008      	beq.n	80061cc <memmove+0x28>
 80061ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061c2:	e7f8      	b.n	80061b6 <memmove+0x12>
 80061c4:	4402      	add	r2, r0
 80061c6:	4601      	mov	r1, r0
 80061c8:	428a      	cmp	r2, r1
 80061ca:	d100      	bne.n	80061ce <memmove+0x2a>
 80061cc:	bd10      	pop	{r4, pc}
 80061ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061d6:	e7f7      	b.n	80061c8 <memmove+0x24>

080061d8 <_free_r>:
 80061d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061da:	2900      	cmp	r1, #0
 80061dc:	d044      	beq.n	8006268 <_free_r+0x90>
 80061de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061e2:	9001      	str	r0, [sp, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f1a1 0404 	sub.w	r4, r1, #4
 80061ea:	bfb8      	it	lt
 80061ec:	18e4      	addlt	r4, r4, r3
 80061ee:	f000 f913 	bl	8006418 <__malloc_lock>
 80061f2:	4a1e      	ldr	r2, [pc, #120]	; (800626c <_free_r+0x94>)
 80061f4:	9801      	ldr	r0, [sp, #4]
 80061f6:	6813      	ldr	r3, [r2, #0]
 80061f8:	b933      	cbnz	r3, 8006208 <_free_r+0x30>
 80061fa:	6063      	str	r3, [r4, #4]
 80061fc:	6014      	str	r4, [r2, #0]
 80061fe:	b003      	add	sp, #12
 8006200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006204:	f000 b90e 	b.w	8006424 <__malloc_unlock>
 8006208:	42a3      	cmp	r3, r4
 800620a:	d908      	bls.n	800621e <_free_r+0x46>
 800620c:	6825      	ldr	r5, [r4, #0]
 800620e:	1961      	adds	r1, r4, r5
 8006210:	428b      	cmp	r3, r1
 8006212:	bf01      	itttt	eq
 8006214:	6819      	ldreq	r1, [r3, #0]
 8006216:	685b      	ldreq	r3, [r3, #4]
 8006218:	1949      	addeq	r1, r1, r5
 800621a:	6021      	streq	r1, [r4, #0]
 800621c:	e7ed      	b.n	80061fa <_free_r+0x22>
 800621e:	461a      	mov	r2, r3
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	b10b      	cbz	r3, 8006228 <_free_r+0x50>
 8006224:	42a3      	cmp	r3, r4
 8006226:	d9fa      	bls.n	800621e <_free_r+0x46>
 8006228:	6811      	ldr	r1, [r2, #0]
 800622a:	1855      	adds	r5, r2, r1
 800622c:	42a5      	cmp	r5, r4
 800622e:	d10b      	bne.n	8006248 <_free_r+0x70>
 8006230:	6824      	ldr	r4, [r4, #0]
 8006232:	4421      	add	r1, r4
 8006234:	1854      	adds	r4, r2, r1
 8006236:	42a3      	cmp	r3, r4
 8006238:	6011      	str	r1, [r2, #0]
 800623a:	d1e0      	bne.n	80061fe <_free_r+0x26>
 800623c:	681c      	ldr	r4, [r3, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	6053      	str	r3, [r2, #4]
 8006242:	4421      	add	r1, r4
 8006244:	6011      	str	r1, [r2, #0]
 8006246:	e7da      	b.n	80061fe <_free_r+0x26>
 8006248:	d902      	bls.n	8006250 <_free_r+0x78>
 800624a:	230c      	movs	r3, #12
 800624c:	6003      	str	r3, [r0, #0]
 800624e:	e7d6      	b.n	80061fe <_free_r+0x26>
 8006250:	6825      	ldr	r5, [r4, #0]
 8006252:	1961      	adds	r1, r4, r5
 8006254:	428b      	cmp	r3, r1
 8006256:	bf04      	itt	eq
 8006258:	6819      	ldreq	r1, [r3, #0]
 800625a:	685b      	ldreq	r3, [r3, #4]
 800625c:	6063      	str	r3, [r4, #4]
 800625e:	bf04      	itt	eq
 8006260:	1949      	addeq	r1, r1, r5
 8006262:	6021      	streq	r1, [r4, #0]
 8006264:	6054      	str	r4, [r2, #4]
 8006266:	e7ca      	b.n	80061fe <_free_r+0x26>
 8006268:	b003      	add	sp, #12
 800626a:	bd30      	pop	{r4, r5, pc}
 800626c:	200005f0 	.word	0x200005f0

08006270 <sbrk_aligned>:
 8006270:	b570      	push	{r4, r5, r6, lr}
 8006272:	4e0e      	ldr	r6, [pc, #56]	; (80062ac <sbrk_aligned+0x3c>)
 8006274:	460c      	mov	r4, r1
 8006276:	6831      	ldr	r1, [r6, #0]
 8006278:	4605      	mov	r5, r0
 800627a:	b911      	cbnz	r1, 8006282 <sbrk_aligned+0x12>
 800627c:	f000 f8bc 	bl	80063f8 <_sbrk_r>
 8006280:	6030      	str	r0, [r6, #0]
 8006282:	4621      	mov	r1, r4
 8006284:	4628      	mov	r0, r5
 8006286:	f000 f8b7 	bl	80063f8 <_sbrk_r>
 800628a:	1c43      	adds	r3, r0, #1
 800628c:	d00a      	beq.n	80062a4 <sbrk_aligned+0x34>
 800628e:	1cc4      	adds	r4, r0, #3
 8006290:	f024 0403 	bic.w	r4, r4, #3
 8006294:	42a0      	cmp	r0, r4
 8006296:	d007      	beq.n	80062a8 <sbrk_aligned+0x38>
 8006298:	1a21      	subs	r1, r4, r0
 800629a:	4628      	mov	r0, r5
 800629c:	f000 f8ac 	bl	80063f8 <_sbrk_r>
 80062a0:	3001      	adds	r0, #1
 80062a2:	d101      	bne.n	80062a8 <sbrk_aligned+0x38>
 80062a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80062a8:	4620      	mov	r0, r4
 80062aa:	bd70      	pop	{r4, r5, r6, pc}
 80062ac:	200005f4 	.word	0x200005f4

080062b0 <_malloc_r>:
 80062b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b4:	1ccd      	adds	r5, r1, #3
 80062b6:	f025 0503 	bic.w	r5, r5, #3
 80062ba:	3508      	adds	r5, #8
 80062bc:	2d0c      	cmp	r5, #12
 80062be:	bf38      	it	cc
 80062c0:	250c      	movcc	r5, #12
 80062c2:	2d00      	cmp	r5, #0
 80062c4:	4607      	mov	r7, r0
 80062c6:	db01      	blt.n	80062cc <_malloc_r+0x1c>
 80062c8:	42a9      	cmp	r1, r5
 80062ca:	d905      	bls.n	80062d8 <_malloc_r+0x28>
 80062cc:	230c      	movs	r3, #12
 80062ce:	603b      	str	r3, [r7, #0]
 80062d0:	2600      	movs	r6, #0
 80062d2:	4630      	mov	r0, r6
 80062d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062d8:	4e2e      	ldr	r6, [pc, #184]	; (8006394 <_malloc_r+0xe4>)
 80062da:	f000 f89d 	bl	8006418 <__malloc_lock>
 80062de:	6833      	ldr	r3, [r6, #0]
 80062e0:	461c      	mov	r4, r3
 80062e2:	bb34      	cbnz	r4, 8006332 <_malloc_r+0x82>
 80062e4:	4629      	mov	r1, r5
 80062e6:	4638      	mov	r0, r7
 80062e8:	f7ff ffc2 	bl	8006270 <sbrk_aligned>
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	4604      	mov	r4, r0
 80062f0:	d14d      	bne.n	800638e <_malloc_r+0xde>
 80062f2:	6834      	ldr	r4, [r6, #0]
 80062f4:	4626      	mov	r6, r4
 80062f6:	2e00      	cmp	r6, #0
 80062f8:	d140      	bne.n	800637c <_malloc_r+0xcc>
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	4631      	mov	r1, r6
 80062fe:	4638      	mov	r0, r7
 8006300:	eb04 0803 	add.w	r8, r4, r3
 8006304:	f000 f878 	bl	80063f8 <_sbrk_r>
 8006308:	4580      	cmp	r8, r0
 800630a:	d13a      	bne.n	8006382 <_malloc_r+0xd2>
 800630c:	6821      	ldr	r1, [r4, #0]
 800630e:	3503      	adds	r5, #3
 8006310:	1a6d      	subs	r5, r5, r1
 8006312:	f025 0503 	bic.w	r5, r5, #3
 8006316:	3508      	adds	r5, #8
 8006318:	2d0c      	cmp	r5, #12
 800631a:	bf38      	it	cc
 800631c:	250c      	movcc	r5, #12
 800631e:	4629      	mov	r1, r5
 8006320:	4638      	mov	r0, r7
 8006322:	f7ff ffa5 	bl	8006270 <sbrk_aligned>
 8006326:	3001      	adds	r0, #1
 8006328:	d02b      	beq.n	8006382 <_malloc_r+0xd2>
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	442b      	add	r3, r5
 800632e:	6023      	str	r3, [r4, #0]
 8006330:	e00e      	b.n	8006350 <_malloc_r+0xa0>
 8006332:	6822      	ldr	r2, [r4, #0]
 8006334:	1b52      	subs	r2, r2, r5
 8006336:	d41e      	bmi.n	8006376 <_malloc_r+0xc6>
 8006338:	2a0b      	cmp	r2, #11
 800633a:	d916      	bls.n	800636a <_malloc_r+0xba>
 800633c:	1961      	adds	r1, r4, r5
 800633e:	42a3      	cmp	r3, r4
 8006340:	6025      	str	r5, [r4, #0]
 8006342:	bf18      	it	ne
 8006344:	6059      	strne	r1, [r3, #4]
 8006346:	6863      	ldr	r3, [r4, #4]
 8006348:	bf08      	it	eq
 800634a:	6031      	streq	r1, [r6, #0]
 800634c:	5162      	str	r2, [r4, r5]
 800634e:	604b      	str	r3, [r1, #4]
 8006350:	4638      	mov	r0, r7
 8006352:	f104 060b 	add.w	r6, r4, #11
 8006356:	f000 f865 	bl	8006424 <__malloc_unlock>
 800635a:	f026 0607 	bic.w	r6, r6, #7
 800635e:	1d23      	adds	r3, r4, #4
 8006360:	1af2      	subs	r2, r6, r3
 8006362:	d0b6      	beq.n	80062d2 <_malloc_r+0x22>
 8006364:	1b9b      	subs	r3, r3, r6
 8006366:	50a3      	str	r3, [r4, r2]
 8006368:	e7b3      	b.n	80062d2 <_malloc_r+0x22>
 800636a:	6862      	ldr	r2, [r4, #4]
 800636c:	42a3      	cmp	r3, r4
 800636e:	bf0c      	ite	eq
 8006370:	6032      	streq	r2, [r6, #0]
 8006372:	605a      	strne	r2, [r3, #4]
 8006374:	e7ec      	b.n	8006350 <_malloc_r+0xa0>
 8006376:	4623      	mov	r3, r4
 8006378:	6864      	ldr	r4, [r4, #4]
 800637a:	e7b2      	b.n	80062e2 <_malloc_r+0x32>
 800637c:	4634      	mov	r4, r6
 800637e:	6876      	ldr	r6, [r6, #4]
 8006380:	e7b9      	b.n	80062f6 <_malloc_r+0x46>
 8006382:	230c      	movs	r3, #12
 8006384:	603b      	str	r3, [r7, #0]
 8006386:	4638      	mov	r0, r7
 8006388:	f000 f84c 	bl	8006424 <__malloc_unlock>
 800638c:	e7a1      	b.n	80062d2 <_malloc_r+0x22>
 800638e:	6025      	str	r5, [r4, #0]
 8006390:	e7de      	b.n	8006350 <_malloc_r+0xa0>
 8006392:	bf00      	nop
 8006394:	200005f0 	.word	0x200005f0

08006398 <_realloc_r>:
 8006398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800639c:	4680      	mov	r8, r0
 800639e:	4614      	mov	r4, r2
 80063a0:	460e      	mov	r6, r1
 80063a2:	b921      	cbnz	r1, 80063ae <_realloc_r+0x16>
 80063a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063a8:	4611      	mov	r1, r2
 80063aa:	f7ff bf81 	b.w	80062b0 <_malloc_r>
 80063ae:	b92a      	cbnz	r2, 80063bc <_realloc_r+0x24>
 80063b0:	f7ff ff12 	bl	80061d8 <_free_r>
 80063b4:	4625      	mov	r5, r4
 80063b6:	4628      	mov	r0, r5
 80063b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063bc:	f000 f838 	bl	8006430 <_malloc_usable_size_r>
 80063c0:	4284      	cmp	r4, r0
 80063c2:	4607      	mov	r7, r0
 80063c4:	d802      	bhi.n	80063cc <_realloc_r+0x34>
 80063c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80063ca:	d812      	bhi.n	80063f2 <_realloc_r+0x5a>
 80063cc:	4621      	mov	r1, r4
 80063ce:	4640      	mov	r0, r8
 80063d0:	f7ff ff6e 	bl	80062b0 <_malloc_r>
 80063d4:	4605      	mov	r5, r0
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d0ed      	beq.n	80063b6 <_realloc_r+0x1e>
 80063da:	42bc      	cmp	r4, r7
 80063dc:	4622      	mov	r2, r4
 80063de:	4631      	mov	r1, r6
 80063e0:	bf28      	it	cs
 80063e2:	463a      	movcs	r2, r7
 80063e4:	f7ff fed0 	bl	8006188 <memcpy>
 80063e8:	4631      	mov	r1, r6
 80063ea:	4640      	mov	r0, r8
 80063ec:	f7ff fef4 	bl	80061d8 <_free_r>
 80063f0:	e7e1      	b.n	80063b6 <_realloc_r+0x1e>
 80063f2:	4635      	mov	r5, r6
 80063f4:	e7df      	b.n	80063b6 <_realloc_r+0x1e>
	...

080063f8 <_sbrk_r>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	4d06      	ldr	r5, [pc, #24]	; (8006414 <_sbrk_r+0x1c>)
 80063fc:	2300      	movs	r3, #0
 80063fe:	4604      	mov	r4, r0
 8006400:	4608      	mov	r0, r1
 8006402:	602b      	str	r3, [r5, #0]
 8006404:	f7fa ffee 	bl	80013e4 <_sbrk>
 8006408:	1c43      	adds	r3, r0, #1
 800640a:	d102      	bne.n	8006412 <_sbrk_r+0x1a>
 800640c:	682b      	ldr	r3, [r5, #0]
 800640e:	b103      	cbz	r3, 8006412 <_sbrk_r+0x1a>
 8006410:	6023      	str	r3, [r4, #0]
 8006412:	bd38      	pop	{r3, r4, r5, pc}
 8006414:	200005f8 	.word	0x200005f8

08006418 <__malloc_lock>:
 8006418:	4801      	ldr	r0, [pc, #4]	; (8006420 <__malloc_lock+0x8>)
 800641a:	f000 b811 	b.w	8006440 <__retarget_lock_acquire_recursive>
 800641e:	bf00      	nop
 8006420:	200005fc 	.word	0x200005fc

08006424 <__malloc_unlock>:
 8006424:	4801      	ldr	r0, [pc, #4]	; (800642c <__malloc_unlock+0x8>)
 8006426:	f000 b80c 	b.w	8006442 <__retarget_lock_release_recursive>
 800642a:	bf00      	nop
 800642c:	200005fc 	.word	0x200005fc

08006430 <_malloc_usable_size_r>:
 8006430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006434:	1f18      	subs	r0, r3, #4
 8006436:	2b00      	cmp	r3, #0
 8006438:	bfbc      	itt	lt
 800643a:	580b      	ldrlt	r3, [r1, r0]
 800643c:	18c0      	addlt	r0, r0, r3
 800643e:	4770      	bx	lr

08006440 <__retarget_lock_acquire_recursive>:
 8006440:	4770      	bx	lr

08006442 <__retarget_lock_release_recursive>:
 8006442:	4770      	bx	lr

08006444 <_init>:
 8006444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006446:	bf00      	nop
 8006448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800644a:	bc08      	pop	{r3}
 800644c:	469e      	mov	lr, r3
 800644e:	4770      	bx	lr

08006450 <_fini>:
 8006450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006452:	bf00      	nop
 8006454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006456:	bc08      	pop	{r3}
 8006458:	469e      	mov	lr, r3
 800645a:	4770      	bx	lr
