
oled_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006264  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e08  080063f4  080063f4  000163f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071fc  080071fc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080071fc  080071fc  000171fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007204  08007204  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007204  08007204  00017204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007208  08007208  00017208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800720c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  2000007c  08007288  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  08007288  000205f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001365a  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002622  00000000  00000000  00033706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  00035d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  00036dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002899a  00000000  00000000  00037d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b2d  00000000  00000000  0006070a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe586  00000000  00000000  00074237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001727bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a4c  00000000  00000000  00172810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080063dc 	.word	0x080063dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080063dc 	.word	0x080063dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 ffc4 	bl	8001514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f94e 	bl	800082c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 fa86 	bl	8000aa0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000594:	f000 fa54 	bl	8000a40 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000598:	f000 f99a 	bl	80008d0 <MX_ADC1_Init>
  MX_I2C1_Init();
 800059c:	f000 fa10 	bl	80009c0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init (); // initialize the diaply
 80005a0:	f000 faec 	bl	8000b7c <SSD1306_Init>
  SSD1306_GotoXY (8,0); // goto 10, 10
 80005a4:	2100      	movs	r1, #0
 80005a6:	2008      	movs	r0, #8
 80005a8:	f000 fc52 	bl	8000e50 <SSD1306_GotoXY>
  SSD1306_Puts ("Voltmeter", &Font_11x18, 1); // print Voltmeter_Back to Intel Nuc
 80005ac:	2201      	movs	r2, #1
 80005ae:	4990      	ldr	r1, [pc, #576]	; (80007f0 <main+0x26c>)
 80005b0:	4890      	ldr	r0, [pc, #576]	; (80007f4 <main+0x270>)
 80005b2:	f000 fce3 	bl	8000f7c <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 80005b6:	f000 fba5 	bl	8000d04 <SSD1306_UpdateScreen>
  //HAL_Delay(3000);
  SSD1306_GotoXY (0,20);
 80005ba:	2114      	movs	r1, #20
 80005bc:	2000      	movs	r0, #0
 80005be:	f000 fc47 	bl	8000e50 <SSD1306_GotoXY>
  SSD1306_Puts ("Digit:  ", &Font_11x18, 1);
 80005c2:	2201      	movs	r2, #1
 80005c4:	498a      	ldr	r1, [pc, #552]	; (80007f0 <main+0x26c>)
 80005c6:	488c      	ldr	r0, [pc, #560]	; (80007f8 <main+0x274>)
 80005c8:	f000 fcd8 	bl	8000f7c <SSD1306_Puts>
  SSD1306_GotoXY (0,42);
 80005cc:	212a      	movs	r1, #42	; 0x2a
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fc3e 	bl	8000e50 <SSD1306_GotoXY>
  SSD1306_Puts ("Volts:  ", &Font_11x18, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	4986      	ldr	r1, [pc, #536]	; (80007f0 <main+0x26c>)
 80005d8:	4888      	ldr	r0, [pc, #544]	; (80007fc <main+0x278>)
 80005da:	f000 fccf 	bl	8000f7c <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 80005de:	f000 fb91 	bl	8000d04 <SSD1306_UpdateScreen>
  // Get ADC value
  HAL_ADC_Start(&hadc1);
 80005e2:	4887      	ldr	r0, [pc, #540]	; (8000800 <main+0x27c>)
 80005e4:	f001 fb70 	bl	8001cc8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005e8:	f04f 31ff 	mov.w	r1, #4294967295
 80005ec:	4884      	ldr	r0, [pc, #528]	; (8000800 <main+0x27c>)
 80005ee:	f001 fc25 	bl	8001e3c <HAL_ADC_PollForConversion>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	value_adc = HAL_ADC_GetValue(&hadc1);
 80005f2:	4883      	ldr	r0, [pc, #524]	; (8000800 <main+0x27c>)
 80005f4:	f001 fcfa 	bl	8001fec <HAL_ADC_GetValue>
 80005f8:	4603      	mov	r3, r0
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	4b81      	ldr	r3, [pc, #516]	; (8000804 <main+0x280>)
 80005fe:	801a      	strh	r2, [r3, #0]
	SSD1306_GotoXY (70,20); // goto 10, 10
 8000600:	2114      	movs	r1, #20
 8000602:	2046      	movs	r0, #70	; 0x46
 8000604:	f000 fc24 	bl	8000e50 <SSD1306_GotoXY>
	SSD1306_Putc ((char)(value_adc/1000+48), &Font_11x18, 1);
 8000608:	4b7e      	ldr	r3, [pc, #504]	; (8000804 <main+0x280>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	4a7e      	ldr	r2, [pc, #504]	; (8000808 <main+0x284>)
 800060e:	fba2 2303 	umull	r2, r3, r2, r3
 8000612:	099b      	lsrs	r3, r3, #6
 8000614:	b29b      	uxth	r3, r3
 8000616:	b2db      	uxtb	r3, r3
 8000618:	3330      	adds	r3, #48	; 0x30
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2201      	movs	r2, #1
 800061e:	4974      	ldr	r1, [pc, #464]	; (80007f0 <main+0x26c>)
 8000620:	4618      	mov	r0, r3
 8000622:	f000 fc2b 	bl	8000e7c <SSD1306_Putc>
	SSD1306_Putc ((char)((value_adc%1000)/100+48), &Font_11x18, 1);
 8000626:	4b77      	ldr	r3, [pc, #476]	; (8000804 <main+0x280>)
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	4a77      	ldr	r2, [pc, #476]	; (8000808 <main+0x284>)
 800062c:	fba2 1203 	umull	r1, r2, r2, r3
 8000630:	0992      	lsrs	r2, r2, #6
 8000632:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000636:	fb01 f202 	mul.w	r2, r1, r2
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	b29b      	uxth	r3, r3
 800063e:	4a73      	ldr	r2, [pc, #460]	; (800080c <main+0x288>)
 8000640:	fba2 2303 	umull	r2, r3, r2, r3
 8000644:	095b      	lsrs	r3, r3, #5
 8000646:	b29b      	uxth	r3, r3
 8000648:	b2db      	uxtb	r3, r3
 800064a:	3330      	adds	r3, #48	; 0x30
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2201      	movs	r2, #1
 8000650:	4967      	ldr	r1, [pc, #412]	; (80007f0 <main+0x26c>)
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fc12 	bl	8000e7c <SSD1306_Putc>
	SSD1306_Putc ((char)((value_adc%100)/10+48), &Font_11x18, 1);
 8000658:	4b6a      	ldr	r3, [pc, #424]	; (8000804 <main+0x280>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	4a6b      	ldr	r2, [pc, #428]	; (800080c <main+0x288>)
 800065e:	fba2 1203 	umull	r1, r2, r2, r3
 8000662:	0952      	lsrs	r2, r2, #5
 8000664:	2164      	movs	r1, #100	; 0x64
 8000666:	fb01 f202 	mul.w	r2, r1, r2
 800066a:	1a9b      	subs	r3, r3, r2
 800066c:	b29b      	uxth	r3, r3
 800066e:	4a68      	ldr	r2, [pc, #416]	; (8000810 <main+0x28c>)
 8000670:	fba2 2303 	umull	r2, r3, r2, r3
 8000674:	08db      	lsrs	r3, r3, #3
 8000676:	b29b      	uxth	r3, r3
 8000678:	b2db      	uxtb	r3, r3
 800067a:	3330      	adds	r3, #48	; 0x30
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2201      	movs	r2, #1
 8000680:	495b      	ldr	r1, [pc, #364]	; (80007f0 <main+0x26c>)
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fbfa 	bl	8000e7c <SSD1306_Putc>
	SSD1306_Putc ((char)(value_adc%10+48), &Font_11x18, 1);
 8000688:	4b5e      	ldr	r3, [pc, #376]	; (8000804 <main+0x280>)
 800068a:	881a      	ldrh	r2, [r3, #0]
 800068c:	4b60      	ldr	r3, [pc, #384]	; (8000810 <main+0x28c>)
 800068e:	fba3 1302 	umull	r1, r3, r3, r2
 8000692:	08d9      	lsrs	r1, r3, #3
 8000694:	460b      	mov	r3, r1
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	440b      	add	r3, r1
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	b29b      	uxth	r3, r3
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	3330      	adds	r3, #48	; 0x30
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	2201      	movs	r2, #1
 80006a8:	4951      	ldr	r1, [pc, #324]	; (80007f0 <main+0x26c>)
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fbe6 	bl	8000e7c <SSD1306_Putc>
    volts = value_adc*333/4096;
 80006b0:	4b54      	ldr	r3, [pc, #336]	; (8000804 <main+0x280>)
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	461a      	mov	r2, r3
 80006b6:	f240 134d 	movw	r3, #333	; 0x14d
 80006ba:	fb02 f303 	mul.w	r3, r2, r3
 80006be:	2b00      	cmp	r3, #0
 80006c0:	da01      	bge.n	80006c6 <main+0x142>
 80006c2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80006c6:	131b      	asrs	r3, r3, #12
 80006c8:	ee07 3a90 	vmov	s15, r3
 80006cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006d0:	4b50      	ldr	r3, [pc, #320]	; (8000814 <main+0x290>)
 80006d2:	edc3 7a00 	vstr	s15, [r3]
    //volts = 222;
    SSD1306_GotoXY (70,42); // goto 10, 10
 80006d6:	212a      	movs	r1, #42	; 0x2a
 80006d8:	2046      	movs	r0, #70	; 0x46
 80006da:	f000 fbb9 	bl	8000e50 <SSD1306_GotoXY>
	SSD1306_Putc ((char)((int)(volts)/100+48), &Font_11x18, 1);
 80006de:	4b4d      	ldr	r3, [pc, #308]	; (8000814 <main+0x290>)
 80006e0:	edd3 7a00 	vldr	s15, [r3]
 80006e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006e8:	ee17 1a90 	vmov	r1, s15
 80006ec:	4b47      	ldr	r3, [pc, #284]	; (800080c <main+0x288>)
 80006ee:	fb83 2301 	smull	r2, r3, r3, r1
 80006f2:	115a      	asrs	r2, r3, #5
 80006f4:	17cb      	asrs	r3, r1, #31
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	3330      	adds	r3, #48	; 0x30
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2201      	movs	r2, #1
 8000700:	493b      	ldr	r1, [pc, #236]	; (80007f0 <main+0x26c>)
 8000702:	4618      	mov	r0, r3
 8000704:	f000 fbba 	bl	8000e7c <SSD1306_Putc>
	SSD1306_Puts (".", &Font_11x18, 1);
 8000708:	2201      	movs	r2, #1
 800070a:	4939      	ldr	r1, [pc, #228]	; (80007f0 <main+0x26c>)
 800070c:	4842      	ldr	r0, [pc, #264]	; (8000818 <main+0x294>)
 800070e:	f000 fc35 	bl	8000f7c <SSD1306_Puts>
	SSD1306_Putc ((char)(((int)(volts)%100)/10+48), &Font_11x18, 1);
 8000712:	4b40      	ldr	r3, [pc, #256]	; (8000814 <main+0x290>)
 8000714:	edd3 7a00 	vldr	s15, [r3]
 8000718:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800071c:	ee17 2a90 	vmov	r2, s15
 8000720:	4b3a      	ldr	r3, [pc, #232]	; (800080c <main+0x288>)
 8000722:	fb83 1302 	smull	r1, r3, r3, r2
 8000726:	1159      	asrs	r1, r3, #5
 8000728:	17d3      	asrs	r3, r2, #31
 800072a:	1acb      	subs	r3, r1, r3
 800072c:	2164      	movs	r1, #100	; 0x64
 800072e:	fb01 f303 	mul.w	r3, r1, r3
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	4a39      	ldr	r2, [pc, #228]	; (800081c <main+0x298>)
 8000736:	fb82 1203 	smull	r1, r2, r2, r3
 800073a:	1092      	asrs	r2, r2, #2
 800073c:	17db      	asrs	r3, r3, #31
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	b2db      	uxtb	r3, r3
 8000742:	3330      	adds	r3, #48	; 0x30
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2201      	movs	r2, #1
 8000748:	4929      	ldr	r1, [pc, #164]	; (80007f0 <main+0x26c>)
 800074a:	4618      	mov	r0, r3
 800074c:	f000 fb96 	bl	8000e7c <SSD1306_Putc>
	SSD1306_Putc ((char)((int)(volts)%10+48), &Font_11x18, 1);
 8000750:	4b30      	ldr	r3, [pc, #192]	; (8000814 <main+0x290>)
 8000752:	edd3 7a00 	vldr	s15, [r3]
 8000756:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800075a:	ee17 1a90 	vmov	r1, s15
 800075e:	4b2f      	ldr	r3, [pc, #188]	; (800081c <main+0x298>)
 8000760:	fb83 2301 	smull	r2, r3, r3, r1
 8000764:	109a      	asrs	r2, r3, #2
 8000766:	17cb      	asrs	r3, r1, #31
 8000768:	1ad2      	subs	r2, r2, r3
 800076a:	4613      	mov	r3, r2
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	4413      	add	r3, r2
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	1aca      	subs	r2, r1, r3
 8000774:	b2d3      	uxtb	r3, r2
 8000776:	3330      	adds	r3, #48	; 0x30
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2201      	movs	r2, #1
 800077c:	491c      	ldr	r1, [pc, #112]	; (80007f0 <main+0x26c>)
 800077e:	4618      	mov	r0, r3
 8000780:	f000 fb7c 	bl	8000e7c <SSD1306_Putc>
	SSD1306_UpdateScreen(); // update screen
 8000784:	f000 fabe 	bl	8000d04 <SSD1306_UpdateScreen>
    //Convert to string and print
    sprintf(msg,"%hu\r\n",value_adc);
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <main+0x280>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	4924      	ldr	r1, [pc, #144]	; (8000820 <main+0x29c>)
 8000790:	4824      	ldr	r0, [pc, #144]	; (8000824 <main+0x2a0>)
 8000792:	f005 f9b5 	bl	8005b00 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000796:	4823      	ldr	r0, [pc, #140]	; (8000824 <main+0x2a0>)
 8000798:	f7ff fd1a 	bl	80001d0 <strlen>
 800079c:	4603      	mov	r3, r0
 800079e:	b29a      	uxth	r2, r3
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
 80007a4:	491f      	ldr	r1, [pc, #124]	; (8000824 <main+0x2a0>)
 80007a6:	4820      	ldr	r0, [pc, #128]	; (8000828 <main+0x2a4>)
 80007a8:	f004 fc7c 	bl	80050a4 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80007ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b0:	f000 ff2c 	bl	800160c <HAL_Delay>
	sprintf(msg,"%hu\r\n", (uint16_t )volts);
 80007b4:	4b17      	ldr	r3, [pc, #92]	; (8000814 <main+0x290>)
 80007b6:	edd3 7a00 	vldr	s15, [r3]
 80007ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007be:	ee17 3a90 	vmov	r3, s15
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	461a      	mov	r2, r3
 80007c6:	4916      	ldr	r1, [pc, #88]	; (8000820 <main+0x29c>)
 80007c8:	4816      	ldr	r0, [pc, #88]	; (8000824 <main+0x2a0>)
 80007ca:	f005 f999 	bl	8005b00 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80007ce:	4815      	ldr	r0, [pc, #84]	; (8000824 <main+0x2a0>)
 80007d0:	f7ff fcfe 	bl	80001d0 <strlen>
 80007d4:	4603      	mov	r3, r0
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295
 80007dc:	4911      	ldr	r1, [pc, #68]	; (8000824 <main+0x2a0>)
 80007de:	4812      	ldr	r0, [pc, #72]	; (8000828 <main+0x2a4>)
 80007e0:	f004 fc60 	bl	80050a4 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80007e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e8:	f000 ff10 	bl	800160c <HAL_Delay>
	value_adc = HAL_ADC_GetValue(&hadc1);
 80007ec:	e701      	b.n	80005f2 <main+0x6e>
 80007ee:	bf00      	nop
 80007f0:	20000000 	.word	0x20000000
 80007f4:	080063f4 	.word	0x080063f4
 80007f8:	08006400 	.word	0x08006400
 80007fc:	0800640c 	.word	0x0800640c
 8000800:	20000098 	.word	0x20000098
 8000804:	20000008 	.word	0x20000008
 8000808:	10624dd3 	.word	0x10624dd3
 800080c:	51eb851f 	.word	0x51eb851f
 8000810:	cccccccd 	.word	0xcccccccd
 8000814:	200001cc 	.word	0x200001cc
 8000818:	08006418 	.word	0x08006418
 800081c:	66666667 	.word	0x66666667
 8000820:	0800641c 	.word	0x0800641c
 8000824:	200001d0 	.word	0x200001d0
 8000828:	20000148 	.word	0x20000148

0800082c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b096      	sub	sp, #88	; 0x58
 8000830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	2244      	movs	r2, #68	; 0x44
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f005 f958 	bl	8005af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000840:	463b      	mov	r3, r7
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800084e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000852:	f003 f8d9 	bl	8003a08 <HAL_PWREx_ControlVoltageScaling>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800085c:	f000 f986 	bl	8000b6c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000860:	2302      	movs	r3, #2
 8000862:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000868:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086a:	2310      	movs	r3, #16
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086e:	2302      	movs	r3, #2
 8000870:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000872:	2302      	movs	r3, #2
 8000874:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000876:	2301      	movs	r3, #1
 8000878:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800087a:	230a      	movs	r3, #10
 800087c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800087e:	2307      	movs	r3, #7
 8000880:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000882:	2302      	movs	r3, #2
 8000884:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000886:	2302      	movs	r3, #2
 8000888:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4618      	mov	r0, r3
 8000890:	f003 f910 	bl	8003ab4 <HAL_RCC_OscConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800089a:	f000 f967 	bl	8000b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089e:	230f      	movs	r3, #15
 80008a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a2:	2303      	movs	r3, #3
 80008a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008b2:	463b      	mov	r3, r7
 80008b4:	2104      	movs	r1, #4
 80008b6:	4618      	mov	r0, r3
 80008b8:	f003 fce4 	bl	8004284 <HAL_RCC_ClockConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008c2:	f000 f953 	bl	8000b6c <Error_Handler>
  }
}
 80008c6:	bf00      	nop
 80008c8:	3758      	adds	r7, #88	; 0x58
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
 80008f0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008f2:	4b30      	ldr	r3, [pc, #192]	; (80009b4 <MX_ADC1_Init+0xe4>)
 80008f4:	4a30      	ldr	r2, [pc, #192]	; (80009b8 <MX_ADC1_Init+0xe8>)
 80008f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008f8:	4b2e      	ldr	r3, [pc, #184]	; (80009b4 <MX_ADC1_Init+0xe4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008fe:	4b2d      	ldr	r3, [pc, #180]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000904:	4b2b      	ldr	r3, [pc, #172]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800090a:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <MX_ADC1_Init+0xe4>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000910:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000912:	2208      	movs	r2, #8
 8000914:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000916:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000918:	2200      	movs	r2, #0
 800091a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800091c:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <MX_ADC1_Init+0xe4>)
 800091e:	2201      	movs	r2, #1
 8000920:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000922:	4b24      	ldr	r3, [pc, #144]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000924:	2201      	movs	r2, #1
 8000926:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000928:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <MX_ADC1_Init+0xe4>)
 800092a:	2200      	movs	r2, #0
 800092c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000930:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000932:	2200      	movs	r2, #0
 8000934:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000936:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000938:	2200      	movs	r2, #0
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_ADC1_Init+0xe4>)
 800093e:	2200      	movs	r2, #0
 8000940:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000946:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800094a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <MX_ADC1_Init+0xe4>)
 800094e:	2200      	movs	r2, #0
 8000950:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000954:	4817      	ldr	r0, [pc, #92]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000956:	f001 f861 	bl	8001a1c <HAL_ADC_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000960:	f000 f904 	bl	8000b6c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4811      	ldr	r0, [pc, #68]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000970:	f001 ffc2 	bl	80028f8 <HAL_ADCEx_MultiModeConfigChannel>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800097a:	f000 f8f7 	bl	8000b6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_ADC1_Init+0xec>)
 8000980:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000982:	2306      	movs	r3, #6
 8000984:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800098a:	237f      	movs	r3, #127	; 0x7f
 800098c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800098e:	2304      	movs	r3, #4
 8000990:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	4619      	mov	r1, r3
 800099a:	4806      	ldr	r0, [pc, #24]	; (80009b4 <MX_ADC1_Init+0xe4>)
 800099c:	f001 fb34 	bl	8002008 <HAL_ADC_ConfigChannel>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80009a6:	f000 f8e1 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	3728      	adds	r7, #40	; 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000098 	.word	0x20000098
 80009b8:	50040000 	.word	0x50040000
 80009bc:	04300002 	.word	0x04300002

080009c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009c6:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <MX_I2C1_Init+0x78>)
 80009c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009cc:	4a1b      	ldr	r2, [pc, #108]	; (8000a3c <MX_I2C1_Init+0x7c>)
 80009ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009d8:	2201      	movs	r2, #1
 80009da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009fa:	480e      	ldr	r0, [pc, #56]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009fc:	f002 fad4 	bl	8002fa8 <HAL_I2C_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a06:	f000 f8b1 	bl	8000b6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4809      	ldr	r0, [pc, #36]	; (8000a34 <MX_I2C1_Init+0x74>)
 8000a0e:	f002 ff55 	bl	80038bc <HAL_I2CEx_ConfigAnalogFilter>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a18:	f000 f8a8 	bl	8000b6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_I2C1_Init+0x74>)
 8000a20:	f002 ff97 	bl	8003952 <HAL_I2CEx_ConfigDigitalFilter>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a2a:	f000 f89f 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200000fc 	.word	0x200000fc
 8000a38:	40005400 	.word	0x40005400
 8000a3c:	00702991 	.word	0x00702991

08000a40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a46:	4a15      	ldr	r2, [pc, #84]	; (8000a9c <MX_USART2_UART_Init+0x5c>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a84:	f004 fac0 	bl	8005008 <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a8e:	f000 f86d 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000148 	.word	0x20000148
 8000a9c:	40004400 	.word	0x40004400

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	4b2b      	ldr	r3, [pc, #172]	; (8000b64 <MX_GPIO_Init+0xc4>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	4a2a      	ldr	r2, [pc, #168]	; (8000b64 <MX_GPIO_Init+0xc4>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac2:	4b28      	ldr	r3, [pc, #160]	; (8000b64 <MX_GPIO_Init+0xc4>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ace:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <MX_GPIO_Init+0xc4>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	4a24      	ldr	r2, [pc, #144]	; (8000b64 <MX_GPIO_Init+0xc4>)
 8000ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ada:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <MX_GPIO_Init+0xc4>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <MX_GPIO_Init+0xc4>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	4a1e      	ldr	r2, [pc, #120]	; (8000b64 <MX_GPIO_Init+0xc4>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af2:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <MX_GPIO_Init+0xc4>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <MX_GPIO_Init+0xc4>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	4a18      	ldr	r2, [pc, #96]	; (8000b64 <MX_GPIO_Init+0xc4>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <MX_GPIO_Init+0xc4>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2120      	movs	r1, #32
 8000b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1e:	f002 fa2b 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b28:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	480b      	ldr	r0, [pc, #44]	; (8000b68 <MX_GPIO_Init+0xc8>)
 8000b3a:	f002 f873 	bl	8002c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b3e:	2320      	movs	r3, #32
 8000b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b58:	f002 f864 	bl	8002c24 <HAL_GPIO_Init>

}
 8000b5c:	bf00      	nop
 8000b5e:	3728      	adds	r7, #40	; 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40021000 	.word	0x40021000
 8000b68:	48000800 	.word	0x48000800

08000b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000b82:	f000 fa21 	bl	8000fc8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000b86:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	2178      	movs	r1, #120	; 0x78
 8000b8e:	485b      	ldr	r0, [pc, #364]	; (8000cfc <SSD1306_Init+0x180>)
 8000b90:	f002 fb8e 	bl	80032b0 <HAL_I2C_IsDeviceReady>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e0a9      	b.n	8000cf2 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000b9e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000ba2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ba4:	e002      	b.n	8000bac <SSD1306_Init+0x30>
		p--;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1f9      	bne.n	8000ba6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000bb2:	22ae      	movs	r2, #174	; 0xae
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	2078      	movs	r0, #120	; 0x78
 8000bb8:	f000 fa82 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000bbc:	2220      	movs	r2, #32
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	2078      	movs	r0, #120	; 0x78
 8000bc2:	f000 fa7d 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000bc6:	2210      	movs	r2, #16
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2078      	movs	r0, #120	; 0x78
 8000bcc:	f000 fa78 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000bd0:	22b0      	movs	r2, #176	; 0xb0
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2078      	movs	r0, #120	; 0x78
 8000bd6:	f000 fa73 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000bda:	22c8      	movs	r2, #200	; 0xc8
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2078      	movs	r0, #120	; 0x78
 8000be0:	f000 fa6e 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000be4:	2200      	movs	r2, #0
 8000be6:	2100      	movs	r1, #0
 8000be8:	2078      	movs	r0, #120	; 0x78
 8000bea:	f000 fa69 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000bee:	2210      	movs	r2, #16
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2078      	movs	r0, #120	; 0x78
 8000bf4:	f000 fa64 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000bf8:	2240      	movs	r2, #64	; 0x40
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2078      	movs	r0, #120	; 0x78
 8000bfe:	f000 fa5f 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000c02:	2281      	movs	r2, #129	; 0x81
 8000c04:	2100      	movs	r1, #0
 8000c06:	2078      	movs	r0, #120	; 0x78
 8000c08:	f000 fa5a 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000c0c:	22ff      	movs	r2, #255	; 0xff
 8000c0e:	2100      	movs	r1, #0
 8000c10:	2078      	movs	r0, #120	; 0x78
 8000c12:	f000 fa55 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000c16:	22a1      	movs	r2, #161	; 0xa1
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2078      	movs	r0, #120	; 0x78
 8000c1c:	f000 fa50 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000c20:	22a6      	movs	r2, #166	; 0xa6
 8000c22:	2100      	movs	r1, #0
 8000c24:	2078      	movs	r0, #120	; 0x78
 8000c26:	f000 fa4b 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000c2a:	22a8      	movs	r2, #168	; 0xa8
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	2078      	movs	r0, #120	; 0x78
 8000c30:	f000 fa46 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000c34:	223f      	movs	r2, #63	; 0x3f
 8000c36:	2100      	movs	r1, #0
 8000c38:	2078      	movs	r0, #120	; 0x78
 8000c3a:	f000 fa41 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c3e:	22a4      	movs	r2, #164	; 0xa4
 8000c40:	2100      	movs	r1, #0
 8000c42:	2078      	movs	r0, #120	; 0x78
 8000c44:	f000 fa3c 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000c48:	22d3      	movs	r2, #211	; 0xd3
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2078      	movs	r0, #120	; 0x78
 8000c4e:	f000 fa37 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	2078      	movs	r0, #120	; 0x78
 8000c58:	f000 fa32 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000c5c:	22d5      	movs	r2, #213	; 0xd5
 8000c5e:	2100      	movs	r1, #0
 8000c60:	2078      	movs	r0, #120	; 0x78
 8000c62:	f000 fa2d 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000c66:	22f0      	movs	r2, #240	; 0xf0
 8000c68:	2100      	movs	r1, #0
 8000c6a:	2078      	movs	r0, #120	; 0x78
 8000c6c:	f000 fa28 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000c70:	22d9      	movs	r2, #217	; 0xd9
 8000c72:	2100      	movs	r1, #0
 8000c74:	2078      	movs	r0, #120	; 0x78
 8000c76:	f000 fa23 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000c7a:	2222      	movs	r2, #34	; 0x22
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2078      	movs	r0, #120	; 0x78
 8000c80:	f000 fa1e 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000c84:	22da      	movs	r2, #218	; 0xda
 8000c86:	2100      	movs	r1, #0
 8000c88:	2078      	movs	r0, #120	; 0x78
 8000c8a:	f000 fa19 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000c8e:	2212      	movs	r2, #18
 8000c90:	2100      	movs	r1, #0
 8000c92:	2078      	movs	r0, #120	; 0x78
 8000c94:	f000 fa14 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000c98:	22db      	movs	r2, #219	; 0xdb
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2078      	movs	r0, #120	; 0x78
 8000c9e:	f000 fa0f 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000ca2:	2220      	movs	r2, #32
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2078      	movs	r0, #120	; 0x78
 8000ca8:	f000 fa0a 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000cac:	228d      	movs	r2, #141	; 0x8d
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2078      	movs	r0, #120	; 0x78
 8000cb2:	f000 fa05 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000cb6:	2214      	movs	r2, #20
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2078      	movs	r0, #120	; 0x78
 8000cbc:	f000 fa00 	bl	80010c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000cc0:	22af      	movs	r2, #175	; 0xaf
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2078      	movs	r0, #120	; 0x78
 8000cc6:	f000 f9fb 	bl	80010c0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000cca:	222e      	movs	r2, #46	; 0x2e
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2078      	movs	r0, #120	; 0x78
 8000cd0:	f000 f9f6 	bl	80010c0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f000 f843 	bl	8000d60 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000cda:	f000 f813 	bl	8000d04 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <SSD1306_Init+0x184>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <SSD1306_Init+0x184>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <SSD1306_Init+0x184>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000cf0:	2301      	movs	r3, #1
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200000fc 	.word	0x200000fc
 8000d00:	200005d8 	.word	0x200005d8

08000d04 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	71fb      	strb	r3, [r7, #7]
 8000d0e:	e01d      	b.n	8000d4c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	3b50      	subs	r3, #80	; 0x50
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	461a      	mov	r2, r3
 8000d18:	2100      	movs	r1, #0
 8000d1a:	2078      	movs	r0, #120	; 0x78
 8000d1c:	f000 f9d0 	bl	80010c0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	2078      	movs	r0, #120	; 0x78
 8000d26:	f000 f9cb 	bl	80010c0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000d2a:	2210      	movs	r2, #16
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2078      	movs	r0, #120	; 0x78
 8000d30:	f000 f9c6 	bl	80010c0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	01db      	lsls	r3, r3, #7
 8000d38:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <SSD1306_UpdateScreen+0x58>)
 8000d3a:	441a      	add	r2, r3
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	2140      	movs	r1, #64	; 0x40
 8000d40:	2078      	movs	r0, #120	; 0x78
 8000d42:	f000 f957 	bl	8000ff4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	71fb      	strb	r3, [r7, #7]
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	2b07      	cmp	r3, #7
 8000d50:	d9de      	bls.n	8000d10 <SSD1306_UpdateScreen+0xc>
	}
}
 8000d52:	bf00      	nop
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	200001d8 	.word	0x200001d8

08000d60 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d101      	bne.n	8000d74 <SSD1306_Fill+0x14>
 8000d70:	2300      	movs	r3, #0
 8000d72:	e000      	b.n	8000d76 <SSD1306_Fill+0x16>
 8000d74:	23ff      	movs	r3, #255	; 0xff
 8000d76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4803      	ldr	r0, [pc, #12]	; (8000d8c <SSD1306_Fill+0x2c>)
 8000d7e:	f004 feb7 	bl	8005af0 <memset>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200001d8 	.word	0x200001d8

08000d90 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	80fb      	strh	r3, [r7, #6]
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	80bb      	strh	r3, [r7, #4]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	70fb      	strb	r3, [r7, #3]
	if (
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	2b7f      	cmp	r3, #127	; 0x7f
 8000da6:	d848      	bhi.n	8000e3a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000da8:	88bb      	ldrh	r3, [r7, #4]
 8000daa:	2b3f      	cmp	r3, #63	; 0x3f
 8000dac:	d845      	bhi.n	8000e3a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000dae:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <SSD1306_DrawPixel+0xb8>)
 8000db0:	791b      	ldrb	r3, [r3, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d006      	beq.n	8000dc4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000db6:	78fb      	ldrb	r3, [r7, #3]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	bf0c      	ite	eq
 8000dbc:	2301      	moveq	r3, #1
 8000dbe:	2300      	movne	r3, #0
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000dc4:	78fb      	ldrb	r3, [r7, #3]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d11a      	bne.n	8000e00 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000dca:	88fa      	ldrh	r2, [r7, #6]
 8000dcc:	88bb      	ldrh	r3, [r7, #4]
 8000dce:	08db      	lsrs	r3, r3, #3
 8000dd0:	b298      	uxth	r0, r3
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	01db      	lsls	r3, r3, #7
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a1c      	ldr	r2, [pc, #112]	; (8000e4c <SSD1306_DrawPixel+0xbc>)
 8000dda:	5cd3      	ldrb	r3, [r2, r3]
 8000ddc:	b25a      	sxtb	r2, r3
 8000dde:	88bb      	ldrh	r3, [r7, #4]
 8000de0:	f003 0307 	and.w	r3, r3, #7
 8000de4:	2101      	movs	r1, #1
 8000de6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dea:	b25b      	sxtb	r3, r3
 8000dec:	4313      	orrs	r3, r2
 8000dee:	b259      	sxtb	r1, r3
 8000df0:	88fa      	ldrh	r2, [r7, #6]
 8000df2:	4603      	mov	r3, r0
 8000df4:	01db      	lsls	r3, r3, #7
 8000df6:	4413      	add	r3, r2
 8000df8:	b2c9      	uxtb	r1, r1
 8000dfa:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <SSD1306_DrawPixel+0xbc>)
 8000dfc:	54d1      	strb	r1, [r2, r3]
 8000dfe:	e01d      	b.n	8000e3c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000e00:	88fa      	ldrh	r2, [r7, #6]
 8000e02:	88bb      	ldrh	r3, [r7, #4]
 8000e04:	08db      	lsrs	r3, r3, #3
 8000e06:	b298      	uxth	r0, r3
 8000e08:	4603      	mov	r3, r0
 8000e0a:	01db      	lsls	r3, r3, #7
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a0f      	ldr	r2, [pc, #60]	; (8000e4c <SSD1306_DrawPixel+0xbc>)
 8000e10:	5cd3      	ldrb	r3, [r2, r3]
 8000e12:	b25a      	sxtb	r2, r3
 8000e14:	88bb      	ldrh	r3, [r7, #4]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e20:	b25b      	sxtb	r3, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	b25b      	sxtb	r3, r3
 8000e26:	4013      	ands	r3, r2
 8000e28:	b259      	sxtb	r1, r3
 8000e2a:	88fa      	ldrh	r2, [r7, #6]
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	01db      	lsls	r3, r3, #7
 8000e30:	4413      	add	r3, r2
 8000e32:	b2c9      	uxtb	r1, r1
 8000e34:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <SSD1306_DrawPixel+0xbc>)
 8000e36:	54d1      	strb	r1, [r2, r3]
 8000e38:	e000      	b.n	8000e3c <SSD1306_DrawPixel+0xac>
		return;
 8000e3a:	bf00      	nop
	}
}
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	200005d8 	.word	0x200005d8
 8000e4c:	200001d8 	.word	0x200001d8

08000e50 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	460a      	mov	r2, r1
 8000e5a:	80fb      	strh	r3, [r7, #6]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000e60:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <SSD1306_GotoXY+0x28>)
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <SSD1306_GotoXY+0x28>)
 8000e68:	88bb      	ldrh	r3, [r7, #4]
 8000e6a:	8053      	strh	r3, [r2, #2]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	200005d8 	.word	0x200005d8

08000e7c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	71fb      	strb	r3, [r7, #7]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000e8c:	4b3a      	ldr	r3, [pc, #232]	; (8000f78 <SSD1306_Putc+0xfc>)
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	4413      	add	r3, r2
	if (
 8000e98:	2b7f      	cmp	r3, #127	; 0x7f
 8000e9a:	dc07      	bgt.n	8000eac <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000e9c:	4b36      	ldr	r3, [pc, #216]	; (8000f78 <SSD1306_Putc+0xfc>)
 8000e9e:	885b      	ldrh	r3, [r3, #2]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	785b      	ldrb	r3, [r3, #1]
 8000ea6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000ea8:	2b3f      	cmp	r3, #63	; 0x3f
 8000eaa:	dd01      	ble.n	8000eb0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	e05e      	b.n	8000f6e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	e04b      	b.n	8000f4e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	3b20      	subs	r3, #32
 8000ebe:	6839      	ldr	r1, [r7, #0]
 8000ec0:	7849      	ldrb	r1, [r1, #1]
 8000ec2:	fb01 f303 	mul.w	r3, r1, r3
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	440b      	add	r3, r1
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	4413      	add	r3, r2
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	e030      	b.n	8000f3c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d010      	beq.n	8000f0c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000eea:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <SSD1306_Putc+0xfc>)
 8000eec:	881a      	ldrh	r2, [r3, #0]
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	4413      	add	r3, r2
 8000ef4:	b298      	uxth	r0, r3
 8000ef6:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <SSD1306_Putc+0xfc>)
 8000ef8:	885a      	ldrh	r2, [r3, #2]
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	4413      	add	r3, r2
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	79ba      	ldrb	r2, [r7, #6]
 8000f04:	4619      	mov	r1, r3
 8000f06:	f7ff ff43 	bl	8000d90 <SSD1306_DrawPixel>
 8000f0a:	e014      	b.n	8000f36 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <SSD1306_Putc+0xfc>)
 8000f0e:	881a      	ldrh	r2, [r3, #0]
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	4413      	add	r3, r2
 8000f16:	b298      	uxth	r0, r3
 8000f18:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <SSD1306_Putc+0xfc>)
 8000f1a:	885a      	ldrh	r2, [r3, #2]
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	4413      	add	r3, r2
 8000f22:	b299      	uxth	r1, r3
 8000f24:	79bb      	ldrb	r3, [r7, #6]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	bf0c      	ite	eq
 8000f2a:	2301      	moveq	r3, #1
 8000f2c:	2300      	movne	r3, #0
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	461a      	mov	r2, r3
 8000f32:	f7ff ff2d 	bl	8000d90 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d3c8      	bcc.n	8000eda <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	617b      	str	r3, [r7, #20]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	785b      	ldrb	r3, [r3, #1]
 8000f52:	461a      	mov	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d3ad      	bcc.n	8000eb6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <SSD1306_Putc+0xfc>)
 8000f5c:	881a      	ldrh	r2, [r3, #0]
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	4413      	add	r3, r2
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <SSD1306_Putc+0xfc>)
 8000f6a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200005d8 	.word	0x200005d8

08000f7c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	4613      	mov	r3, r2
 8000f88:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000f8a:	e012      	b.n	8000fb2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	79fa      	ldrb	r2, [r7, #7]
 8000f92:	68b9      	ldr	r1, [r7, #8]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff71 	bl	8000e7c <SSD1306_Putc>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d002      	beq.n	8000fac <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	e008      	b.n	8000fbe <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1e8      	bne.n	8000f8c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <ssd1306_I2C_Init+0x28>)
 8000fd0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fd2:	e002      	b.n	8000fda <ssd1306_I2C_Init+0x12>
		p--;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1f9      	bne.n	8000fd4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	0003d090 	.word	0x0003d090

08000ff4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b0c7      	sub	sp, #284	; 0x11c
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001002:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001006:	600a      	str	r2, [r1, #0]
 8001008:	4619      	mov	r1, r3
 800100a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800100e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001012:	4622      	mov	r2, r4
 8001014:	701a      	strb	r2, [r3, #0]
 8001016:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800101a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800101e:	4602      	mov	r2, r0
 8001020:	701a      	strb	r2, [r3, #0]
 8001022:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001026:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800102a:	460a      	mov	r2, r1
 800102c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800102e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001032:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001036:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800103a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800103e:	7812      	ldrb	r2, [r2, #0]
 8001040:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001042:	2300      	movs	r3, #0
 8001044:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001048:	e015      	b.n	8001076 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800104a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800104e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001052:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001056:	6812      	ldr	r2, [r2, #0]
 8001058:	441a      	add	r2, r3
 800105a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800105e:	3301      	adds	r3, #1
 8001060:	7811      	ldrb	r1, [r2, #0]
 8001062:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001066:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800106a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800106c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001070:	3301      	adds	r3, #1
 8001072:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001076:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800107a:	b29b      	uxth	r3, r3
 800107c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001080:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001084:	8812      	ldrh	r2, [r2, #0]
 8001086:	429a      	cmp	r2, r3
 8001088:	d8df      	bhi.n	800104a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800108a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800108e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b299      	uxth	r1, r3
 8001096:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800109a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	3301      	adds	r3, #1
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	f107 020c 	add.w	r2, r7, #12
 80010a8:	200a      	movs	r0, #10
 80010aa:	9000      	str	r0, [sp, #0]
 80010ac:	4803      	ldr	r0, [pc, #12]	; (80010bc <ssd1306_I2C_WriteMulti+0xc8>)
 80010ae:	f002 f80b 	bl	80030c8 <HAL_I2C_Master_Transmit>
}
 80010b2:	bf00      	nop
 80010b4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd90      	pop	{r4, r7, pc}
 80010bc:	200000fc 	.word	0x200000fc

080010c0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af02      	add	r7, sp, #8
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
 80010ca:	460b      	mov	r3, r1
 80010cc:	71bb      	strb	r3, [r7, #6]
 80010ce:	4613      	mov	r3, r2
 80010d0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80010d2:	79bb      	ldrb	r3, [r7, #6]
 80010d4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80010d6:	797b      	ldrb	r3, [r7, #5]
 80010d8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	b299      	uxth	r1, r3
 80010de:	f107 020c 	add.w	r2, r7, #12
 80010e2:	230a      	movs	r3, #10
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2302      	movs	r3, #2
 80010e8:	4803      	ldr	r0, [pc, #12]	; (80010f8 <ssd1306_I2C_Write+0x38>)
 80010ea:	f001 ffed 	bl	80030c8 <HAL_I2C_Master_Transmit>
}
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200000fc 	.word	0x200000fc

080010fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <HAL_MspInit+0x44>)
 8001104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001106:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <HAL_MspInit+0x44>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6613      	str	r3, [r2, #96]	; 0x60
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <HAL_MspInit+0x44>)
 8001110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_MspInit+0x44>)
 800111c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111e:	4a08      	ldr	r2, [pc, #32]	; (8001140 <HAL_MspInit+0x44>)
 8001120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001124:	6593      	str	r3, [r2, #88]	; 0x58
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_MspInit+0x44>)
 8001128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40021000 	.word	0x40021000

08001144 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b0ac      	sub	sp, #176	; 0xb0
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2288      	movs	r2, #136	; 0x88
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f004 fcc3 	bl	8005af0 <memset>
  if(hadc->Instance==ADC1)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a27      	ldr	r2, [pc, #156]	; (800120c <HAL_ADC_MspInit+0xc8>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d146      	bne.n	8001202 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001174:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001178:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800117a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800117e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001182:	2302      	movs	r3, #2
 8001184:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001186:	2301      	movs	r3, #1
 8001188:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800118a:	2308      	movs	r3, #8
 800118c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800118e:	2307      	movs	r3, #7
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001192:	2302      	movs	r3, #2
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001196:	2302      	movs	r3, #2
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800119a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800119e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4618      	mov	r0, r3
 80011a6:	f003 fa73 	bl	8004690 <HAL_RCCEx_PeriphCLKConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80011b0:	f7ff fcdc 	bl	8000b6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <HAL_ADC_MspInit+0xcc>)
 80011b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b8:	4a15      	ldr	r2, [pc, #84]	; (8001210 <HAL_ADC_MspInit+0xcc>)
 80011ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <HAL_ADC_MspInit+0xcc>)
 80011c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011cc:	4b10      	ldr	r3, [pc, #64]	; (8001210 <HAL_ADC_MspInit+0xcc>)
 80011ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d0:	4a0f      	ldr	r2, [pc, #60]	; (8001210 <HAL_ADC_MspInit+0xcc>)
 80011d2:	f043 0304 	orr.w	r3, r3, #4
 80011d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d8:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <HAL_ADC_MspInit+0xcc>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011e4:	2301      	movs	r3, #1
 80011e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011ea:	230b      	movs	r3, #11
 80011ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <HAL_ADC_MspInit+0xd0>)
 80011fe:	f001 fd11 	bl	8002c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001202:	bf00      	nop
 8001204:	37b0      	adds	r7, #176	; 0xb0
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	50040000 	.word	0x50040000
 8001210:	40021000 	.word	0x40021000
 8001214:	48000800 	.word	0x48000800

08001218 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b0ac      	sub	sp, #176	; 0xb0
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2288      	movs	r2, #136	; 0x88
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f004 fc59 	bl	8005af0 <memset>
  if(hi2c->Instance==I2C1)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a21      	ldr	r2, [pc, #132]	; (80012c8 <HAL_I2C_MspInit+0xb0>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d13a      	bne.n	80012be <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001248:	2340      	movs	r3, #64	; 0x40
 800124a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800124c:	2300      	movs	r3, #0
 800124e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4618      	mov	r0, r3
 8001256:	f003 fa1b 	bl	8004690 <HAL_RCCEx_PeriphCLKConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001260:	f7ff fc84 	bl	8000b6c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_I2C_MspInit+0xb4>)
 8001266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001268:	4a18      	ldr	r2, [pc, #96]	; (80012cc <HAL_I2C_MspInit+0xb4>)
 800126a:	f043 0302 	orr.w	r3, r3, #2
 800126e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <HAL_I2C_MspInit+0xb4>)
 8001272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800127c:	23c0      	movs	r3, #192	; 0xc0
 800127e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001282:	2312      	movs	r3, #18
 8001284:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001288:	2301      	movs	r3, #1
 800128a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001294:	2304      	movs	r3, #4
 8001296:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800129e:	4619      	mov	r1, r3
 80012a0:	480b      	ldr	r0, [pc, #44]	; (80012d0 <HAL_I2C_MspInit+0xb8>)
 80012a2:	f001 fcbf 	bl	8002c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_I2C_MspInit+0xb4>)
 80012a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012aa:	4a08      	ldr	r2, [pc, #32]	; (80012cc <HAL_I2C_MspInit+0xb4>)
 80012ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012b0:	6593      	str	r3, [r2, #88]	; 0x58
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_I2C_MspInit+0xb4>)
 80012b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012be:	bf00      	nop
 80012c0:	37b0      	adds	r7, #176	; 0xb0
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40005400 	.word	0x40005400
 80012cc:	40021000 	.word	0x40021000
 80012d0:	48000400 	.word	0x48000400

080012d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b0ac      	sub	sp, #176	; 0xb0
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2288      	movs	r2, #136	; 0x88
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f004 fbfb 	bl	8005af0 <memset>
  if(huart->Instance==USART2)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a21      	ldr	r2, [pc, #132]	; (8001384 <HAL_UART_MspInit+0xb0>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d13b      	bne.n	800137c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001304:	2302      	movs	r3, #2
 8001306:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001308:	2300      	movs	r3, #0
 800130a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4618      	mov	r0, r3
 8001312:	f003 f9bd 	bl	8004690 <HAL_RCCEx_PeriphCLKConfig>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800131c:	f7ff fc26 	bl	8000b6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001320:	4b19      	ldr	r3, [pc, #100]	; (8001388 <HAL_UART_MspInit+0xb4>)
 8001322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001324:	4a18      	ldr	r2, [pc, #96]	; (8001388 <HAL_UART_MspInit+0xb4>)
 8001326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800132a:	6593      	str	r3, [r2, #88]	; 0x58
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <HAL_UART_MspInit+0xb4>)
 800132e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <HAL_UART_MspInit+0xb4>)
 800133a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133c:	4a12      	ldr	r2, [pc, #72]	; (8001388 <HAL_UART_MspInit+0xb4>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001344:	4b10      	ldr	r3, [pc, #64]	; (8001388 <HAL_UART_MspInit+0xb4>)
 8001346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001350:	230c      	movs	r3, #12
 8001352:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001362:	2303      	movs	r3, #3
 8001364:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001368:	2307      	movs	r3, #7
 800136a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001372:	4619      	mov	r1, r3
 8001374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001378:	f001 fc54 	bl	8002c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800137c:	bf00      	nop
 800137e:	37b0      	adds	r7, #176	; 0xb0
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40004400 	.word	0x40004400
 8001388:	40021000 	.word	0x40021000

0800138c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139e:	e7fe      	b.n	800139e <HardFault_Handler+0x4>

080013a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <MemManage_Handler+0x4>

080013a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <BusFault_Handler+0x4>

080013ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <UsageFault_Handler+0x4>

080013b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e0:	f000 f8f4 	bl	80015cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f0:	4a14      	ldr	r2, [pc, #80]	; (8001444 <_sbrk+0x5c>)
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <_sbrk+0x60>)
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013fc:	4b13      	ldr	r3, [pc, #76]	; (800144c <_sbrk+0x64>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d102      	bne.n	800140a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <_sbrk+0x64>)
 8001406:	4a12      	ldr	r2, [pc, #72]	; (8001450 <_sbrk+0x68>)
 8001408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	429a      	cmp	r2, r3
 8001416:	d207      	bcs.n	8001428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001418:	f004 fb40 	bl	8005a9c <__errno>
 800141c:	4603      	mov	r3, r0
 800141e:	220c      	movs	r2, #12
 8001420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	e009      	b.n	800143c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <_sbrk+0x64>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800142e:	4b07      	ldr	r3, [pc, #28]	; (800144c <_sbrk+0x64>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	4a05      	ldr	r2, [pc, #20]	; (800144c <_sbrk+0x64>)
 8001438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800143a:	68fb      	ldr	r3, [r7, #12]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20018000 	.word	0x20018000
 8001448:	00000400 	.word	0x00000400
 800144c:	200005e0 	.word	0x200005e0
 8001450:	200005f8 	.word	0x200005f8

08001454 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <SystemInit+0x64>)
 800145a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800145e:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <SystemInit+0x64>)
 8001460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <SystemInit+0x68>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a13      	ldr	r2, [pc, #76]	; (80014bc <SystemInit+0x68>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <SystemInit+0x68>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <SystemInit+0x68>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a0f      	ldr	r2, [pc, #60]	; (80014bc <SystemInit+0x68>)
 8001480:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001484:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001488:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <SystemInit+0x68>)
 800148c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001490:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <SystemInit+0x68>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a09      	ldr	r2, [pc, #36]	; (80014bc <SystemInit+0x68>)
 8001498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800149c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800149e:	4b07      	ldr	r3, [pc, #28]	; (80014bc <SystemInit+0x68>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <SystemInit+0x64>)
 80014a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014aa:	609a      	str	r2, [r3, #8]
#endif
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000ed00 	.word	0xe000ed00
 80014bc:	40021000 	.word	0x40021000

080014c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014c4:	f7ff ffc6 	bl	8001454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014ca:	e003      	b.n	80014d4 <LoopCopyDataInit>

080014cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80014ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80014d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80014d2:	3104      	adds	r1, #4

080014d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80014d4:	480a      	ldr	r0, [pc, #40]	; (8001500 <LoopForever+0xa>)
	ldr	r3, =_edata
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <LoopForever+0xe>)
	adds	r2, r0, r1
 80014d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80014da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014dc:	d3f6      	bcc.n	80014cc <CopyDataInit>
	ldr	r2, =_sbss
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <LoopForever+0x12>)
	b	LoopFillZerobss
 80014e0:	e002      	b.n	80014e8 <LoopFillZerobss>

080014e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014e4:	f842 3b04 	str.w	r3, [r2], #4

080014e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <LoopForever+0x16>)
	cmp	r2, r3
 80014ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014ec:	d3f9      	bcc.n	80014e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ee:	f004 fadb 	bl	8005aa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014f2:	f7ff f847 	bl	8000584 <main>

080014f6 <LoopForever>:

LoopForever:
    b LoopForever
 80014f6:	e7fe      	b.n	80014f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014f8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80014fc:	0800720c 	.word	0x0800720c
	ldr	r0, =_sdata
 8001500:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001504:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 8001508:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 800150c:	200005f8 	.word	0x200005f8

08001510 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001510:	e7fe      	b.n	8001510 <ADC1_2_IRQHandler>
	...

08001514 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <HAL_Init+0x3c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <HAL_Init+0x3c>)
 8001524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001528:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152a:	2003      	movs	r0, #3
 800152c:	f001 fb46 	bl	8002bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001530:	2000      	movs	r0, #0
 8001532:	f000 f80f 	bl	8001554 <HAL_InitTick>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d002      	beq.n	8001542 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	71fb      	strb	r3, [r7, #7]
 8001540:	e001      	b.n	8001546 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001542:	f7ff fddb 	bl	80010fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001546:	79fb      	ldrb	r3, [r7, #7]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40022000 	.word	0x40022000

08001554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001560:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <HAL_InitTick+0x6c>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d023      	beq.n	80015b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001568:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <HAL_InitTick+0x70>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <HAL_InitTick+0x6c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001576:	fbb3 f3f1 	udiv	r3, r3, r1
 800157a:	fbb2 f3f3 	udiv	r3, r2, r3
 800157e:	4618      	mov	r0, r3
 8001580:	f001 fb43 	bl	8002c0a <HAL_SYSTICK_Config>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10f      	bne.n	80015aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b0f      	cmp	r3, #15
 800158e:	d809      	bhi.n	80015a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001590:	2200      	movs	r2, #0
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f001 fb1b 	bl	8002bd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800159c:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <HAL_InitTick+0x74>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	e007      	b.n	80015b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	73fb      	strb	r3, [r7, #15]
 80015a8:	e004      	b.n	80015b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	73fb      	strb	r3, [r7, #15]
 80015ae:	e001      	b.n	80015b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000014 	.word	0x20000014
 80015c4:	2000000c 	.word	0x2000000c
 80015c8:	20000010 	.word	0x20000010

080015cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_IncTick+0x20>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_IncTick+0x24>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4413      	add	r3, r2
 80015dc:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <HAL_IncTick+0x24>)
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20000014 	.word	0x20000014
 80015f0:	200005e4 	.word	0x200005e4

080015f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return uwTick;
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <HAL_GetTick+0x14>)
 80015fa:	681b      	ldr	r3, [r3, #0]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	200005e4 	.word	0x200005e4

0800160c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001614:	f7ff ffee 	bl	80015f4 <HAL_GetTick>
 8001618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001624:	d005      	beq.n	8001632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_Delay+0x44>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4413      	add	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001632:	bf00      	nop
 8001634:	f7ff ffde 	bl	80015f4 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	429a      	cmp	r2, r3
 8001642:	d8f7      	bhi.n	8001634 <HAL_Delay+0x28>
  {
  }
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000014 	.word	0x20000014

08001654 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	431a      	orrs	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	609a      	str	r2, [r3, #8]
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	609a      	str	r2, [r3, #8]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80016bc:	b480      	push	{r7}
 80016be:	b087      	sub	sp, #28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
 80016c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	3360      	adds	r3, #96	; 0x60
 80016ce:	461a      	mov	r2, r3
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <LL_ADC_SetOffset+0x44>)
 80016de:	4013      	ands	r3, r2
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	4313      	orrs	r3, r2
 80016ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80016f4:	bf00      	nop
 80016f6:	371c      	adds	r7, #28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	03fff000 	.word	0x03fff000

08001704 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3360      	adds	r3, #96	; 0x60
 8001712:	461a      	mov	r2, r3
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001730:	b480      	push	{r7}
 8001732:	b087      	sub	sp, #28
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	3360      	adds	r3, #96	; 0x60
 8001740:	461a      	mov	r2, r3
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	431a      	orrs	r2, r3
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800175a:	bf00      	nop
 800175c:	371c      	adds	r7, #28
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800178c:	b480      	push	{r7}
 800178e:	b087      	sub	sp, #28
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3330      	adds	r3, #48	; 0x30
 800179c:	461a      	mov	r2, r3
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	f003 030c 	and.w	r3, r3, #12
 80017a8:	4413      	add	r3, r2
 80017aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	f003 031f 	and.w	r3, r3, #31
 80017b6:	211f      	movs	r1, #31
 80017b8:	fa01 f303 	lsl.w	r3, r1, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	401a      	ands	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	0e9b      	lsrs	r3, r3, #26
 80017c4:	f003 011f 	and.w	r1, r3, #31
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	f003 031f 	and.w	r3, r3, #31
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	431a      	orrs	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017d8:	bf00      	nop
 80017da:	371c      	adds	r7, #28
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	3314      	adds	r3, #20
 80017f4:	461a      	mov	r2, r3
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	0e5b      	lsrs	r3, r3, #25
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	4413      	add	r3, r2
 8001802:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	0d1b      	lsrs	r3, r3, #20
 800180c:	f003 031f 	and.w	r3, r3, #31
 8001810:	2107      	movs	r1, #7
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	401a      	ands	r2, r3
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	0d1b      	lsrs	r3, r3, #20
 800181e:	f003 031f 	and.w	r3, r3, #31
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	fa01 f303 	lsl.w	r3, r1, r3
 8001828:	431a      	orrs	r2, r3
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800182e:	bf00      	nop
 8001830:	371c      	adds	r7, #28
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001854:	43db      	mvns	r3, r3
 8001856:	401a      	ands	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 0318 	and.w	r3, r3, #24
 800185e:	4908      	ldr	r1, [pc, #32]	; (8001880 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001860:	40d9      	lsrs	r1, r3
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	400b      	ands	r3, r1
 8001866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800186a:	431a      	orrs	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	0007ffff 	.word	0x0007ffff

08001884 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 031f 	and.w	r3, r3, #31
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80018cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6093      	str	r3, [r2, #8]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018f4:	d101      	bne.n	80018fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001918:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800191c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001940:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001944:	d101      	bne.n	800194a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001968:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800196c:	f043 0201 	orr.w	r2, r3, #1
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <LL_ADC_IsEnabled+0x18>
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <LL_ADC_IsEnabled+0x1a>
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019ba:	f043 0204 	orr.w	r2, r3, #4
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d101      	bne.n	80019e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d101      	bne.n	8001a0c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e136      	b.n	8001ca4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d109      	bne.n	8001a58 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff fb7d 	bl	8001144 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff3f 	bl	80018e0 <LL_ADC_IsDeepPowerDownEnabled>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d004      	beq.n	8001a72 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff25 	bl	80018bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ff5a 	bl	8001930 <LL_ADC_IsInternalRegulatorEnabled>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d115      	bne.n	8001aae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff ff3e 	bl	8001908 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a8c:	4b87      	ldr	r3, [pc, #540]	; (8001cac <HAL_ADC_Init+0x290>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	099b      	lsrs	r3, r3, #6
 8001a92:	4a87      	ldr	r2, [pc, #540]	; (8001cb0 <HAL_ADC_Init+0x294>)
 8001a94:	fba2 2303 	umull	r2, r3, r2, r3
 8001a98:	099b      	lsrs	r3, r3, #6
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001aa0:	e002      	b.n	8001aa8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f9      	bne.n	8001aa2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff ff3c 	bl	8001930 <LL_ADC_IsInternalRegulatorEnabled>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10d      	bne.n	8001ada <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac2:	f043 0210 	orr.w	r2, r3, #16
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ace:	f043 0201 	orr.w	r2, r3, #1
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff ff75 	bl	80019ce <LL_ADC_REG_IsConversionOngoing>
 8001ae4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aea:	f003 0310 	and.w	r3, r3, #16
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f040 80cf 	bne.w	8001c92 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f040 80cb 	bne.w	8001c92 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b00:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b04:	f043 0202 	orr.w	r2, r3, #2
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff35 	bl	8001980 <LL_ADC_IsEnabled>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d115      	bne.n	8001b48 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b1c:	4865      	ldr	r0, [pc, #404]	; (8001cb4 <HAL_ADC_Init+0x298>)
 8001b1e:	f7ff ff2f 	bl	8001980 <LL_ADC_IsEnabled>
 8001b22:	4604      	mov	r4, r0
 8001b24:	4864      	ldr	r0, [pc, #400]	; (8001cb8 <HAL_ADC_Init+0x29c>)
 8001b26:	f7ff ff2b 	bl	8001980 <LL_ADC_IsEnabled>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	431c      	orrs	r4, r3
 8001b2e:	4863      	ldr	r0, [pc, #396]	; (8001cbc <HAL_ADC_Init+0x2a0>)
 8001b30:	f7ff ff26 	bl	8001980 <LL_ADC_IsEnabled>
 8001b34:	4603      	mov	r3, r0
 8001b36:	4323      	orrs	r3, r4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d105      	bne.n	8001b48 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	4619      	mov	r1, r3
 8001b42:	485f      	ldr	r0, [pc, #380]	; (8001cc0 <HAL_ADC_Init+0x2a4>)
 8001b44:	f7ff fd86 	bl	8001654 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	7e5b      	ldrb	r3, [r3, #25]
 8001b4c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b52:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001b58:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001b5e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b66:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d106      	bne.n	8001b84 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	045b      	lsls	r3, r3, #17
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d009      	beq.n	8001ba0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b90:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b98:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	4b47      	ldr	r3, [pc, #284]	; (8001cc4 <HAL_ADC_Init+0x2a8>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	6812      	ldr	r2, [r2, #0]
 8001bae:	69b9      	ldr	r1, [r7, #24]
 8001bb0:	430b      	orrs	r3, r1
 8001bb2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff08 	bl	80019ce <LL_ADC_REG_IsConversionOngoing>
 8001bbe:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff15 	bl	80019f4 <LL_ADC_INJ_IsConversionOngoing>
 8001bca:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d13d      	bne.n	8001c4e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d13a      	bne.n	8001c4e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bdc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001be4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bf4:	f023 0302 	bic.w	r3, r3, #2
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	69b9      	ldr	r1, [r7, #24]
 8001bfe:	430b      	orrs	r3, r1
 8001c00:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d118      	bne.n	8001c3e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c16:	f023 0304 	bic.w	r3, r3, #4
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c22:	4311      	orrs	r1, r2
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c28:	4311      	orrs	r1, r2
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0201 	orr.w	r2, r2, #1
 8001c3a:	611a      	str	r2, [r3, #16]
 8001c3c:	e007      	b.n	8001c4e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0201 	bic.w	r2, r2, #1
 8001c4c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d10c      	bne.n	8001c70 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	f023 010f 	bic.w	r1, r3, #15
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	1e5a      	subs	r2, r3, #1
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c6e:	e007      	b.n	8001c80 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 020f 	bic.w	r2, r2, #15
 8001c7e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c84:	f023 0303 	bic.w	r3, r3, #3
 8001c88:	f043 0201 	orr.w	r2, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	655a      	str	r2, [r3, #84]	; 0x54
 8001c90:	e007      	b.n	8001ca2 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c96:	f043 0210 	orr.w	r2, r3, #16
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ca2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3724      	adds	r7, #36	; 0x24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd90      	pop	{r4, r7, pc}
 8001cac:	2000000c 	.word	0x2000000c
 8001cb0:	053e2d63 	.word	0x053e2d63
 8001cb4:	50040000 	.word	0x50040000
 8001cb8:	50040100 	.word	0x50040100
 8001cbc:	50040200 	.word	0x50040200
 8001cc0:	50040300 	.word	0x50040300
 8001cc4:	fff0c007 	.word	0xfff0c007

08001cc8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cd0:	4857      	ldr	r0, [pc, #348]	; (8001e30 <HAL_ADC_Start+0x168>)
 8001cd2:	f7ff fdd7 	bl	8001884 <LL_ADC_GetMultimode>
 8001cd6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fe76 	bl	80019ce <LL_ADC_REG_IsConversionOngoing>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f040 809c 	bne.w	8001e22 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_ADC_Start+0x30>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e097      	b.n	8001e28 <HAL_ADC_Start+0x160>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 fd71 	bl	80027e8 <ADC_Enable>
 8001d06:	4603      	mov	r3, r0
 8001d08:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d0a:	7dfb      	ldrb	r3, [r7, #23]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f040 8083 	bne.w	8001e18 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d16:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d1a:	f023 0301 	bic.w	r3, r3, #1
 8001d1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a42      	ldr	r2, [pc, #264]	; (8001e34 <HAL_ADC_Start+0x16c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d002      	beq.n	8001d36 <HAL_ADC_Start+0x6e>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	e000      	b.n	8001d38 <HAL_ADC_Start+0x70>
 8001d36:	4b40      	ldr	r3, [pc, #256]	; (8001e38 <HAL_ADC_Start+0x170>)
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d002      	beq.n	8001d46 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d105      	bne.n	8001d52 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d5e:	d106      	bne.n	8001d6e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d64:	f023 0206 	bic.w	r2, r3, #6
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	659a      	str	r2, [r3, #88]	; 0x58
 8001d6c:	e002      	b.n	8001d74 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	221c      	movs	r2, #28
 8001d7a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a2a      	ldr	r2, [pc, #168]	; (8001e34 <HAL_ADC_Start+0x16c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d002      	beq.n	8001d94 <HAL_ADC_Start+0xcc>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	e000      	b.n	8001d96 <HAL_ADC_Start+0xce>
 8001d94:	4b28      	ldr	r3, [pc, #160]	; (8001e38 <HAL_ADC_Start+0x170>)
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d008      	beq.n	8001db0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	2b05      	cmp	r3, #5
 8001da8:	d002      	beq.n	8001db0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	2b09      	cmp	r3, #9
 8001dae:	d114      	bne.n	8001dda <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d007      	beq.n	8001dce <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dc6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fde7 	bl	80019a6 <LL_ADC_REG_StartConversion>
 8001dd8:	e025      	b.n	8001e26 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a12      	ldr	r2, [pc, #72]	; (8001e34 <HAL_ADC_Start+0x16c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d002      	beq.n	8001df6 <HAL_ADC_Start+0x12e>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	e000      	b.n	8001df8 <HAL_ADC_Start+0x130>
 8001df6:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <HAL_ADC_Start+0x170>)
 8001df8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00f      	beq.n	8001e26 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	655a      	str	r2, [r3, #84]	; 0x54
 8001e16:	e006      	b.n	8001e26 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001e20:	e001      	b.n	8001e26 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e22:	2302      	movs	r3, #2
 8001e24:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	50040300 	.word	0x50040300
 8001e34:	50040100 	.word	0x50040100
 8001e38:	50040000 	.word	0x50040000

08001e3c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e46:	4866      	ldr	r0, [pc, #408]	; (8001fe0 <HAL_ADC_PollForConversion+0x1a4>)
 8001e48:	f7ff fd1c 	bl	8001884 <LL_ADC_GetMultimode>
 8001e4c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d102      	bne.n	8001e5c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001e56:	2308      	movs	r3, #8
 8001e58:	61fb      	str	r3, [r7, #28]
 8001e5a:	e02a      	b.n	8001eb2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2b05      	cmp	r3, #5
 8001e66:	d002      	beq.n	8001e6e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	2b09      	cmp	r3, #9
 8001e6c:	d111      	bne.n	8001e92 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d007      	beq.n	8001e8c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e80:	f043 0220 	orr.w	r2, r3, #32
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0a4      	b.n	8001fd6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e8c:	2304      	movs	r3, #4
 8001e8e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e90:	e00f      	b.n	8001eb2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e92:	4853      	ldr	r0, [pc, #332]	; (8001fe0 <HAL_ADC_PollForConversion+0x1a4>)
 8001e94:	f7ff fd04 	bl	80018a0 <LL_ADC_GetMultiDMATransfer>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d007      	beq.n	8001eae <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea2:	f043 0220 	orr.w	r2, r3, #32
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e093      	b.n	8001fd6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001eae:	2304      	movs	r3, #4
 8001eb0:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001eb2:	f7ff fb9f 	bl	80015f4 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001eb8:	e021      	b.n	8001efe <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec0:	d01d      	beq.n	8001efe <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001ec2:	f7ff fb97 	bl	80015f4 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d302      	bcc.n	8001ed8 <HAL_ADC_PollForConversion+0x9c>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d112      	bne.n	8001efe <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10b      	bne.n	8001efe <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eea:	f043 0204 	orr.w	r2, r3, #4
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e06b      	b.n	8001fd6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0d6      	beq.n	8001eba <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f10:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fc22 	bl	8001766 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d01c      	beq.n	8001f62 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	7e5b      	ldrb	r3, [r3, #25]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d118      	bne.n	8001f62 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d111      	bne.n	8001f62 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d105      	bne.n	8001f62 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5a:	f043 0201 	orr.w	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a1f      	ldr	r2, [pc, #124]	; (8001fe4 <HAL_ADC_PollForConversion+0x1a8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d002      	beq.n	8001f72 <HAL_ADC_PollForConversion+0x136>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	e000      	b.n	8001f74 <HAL_ADC_PollForConversion+0x138>
 8001f72:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <HAL_ADC_PollForConversion+0x1ac>)
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d008      	beq.n	8001f8e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d005      	beq.n	8001f8e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2b05      	cmp	r3, #5
 8001f86:	d002      	beq.n	8001f8e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2b09      	cmp	r3, #9
 8001f8c:	d104      	bne.n	8001f98 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	61bb      	str	r3, [r7, #24]
 8001f96:	e00c      	b.n	8001fb2 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a11      	ldr	r2, [pc, #68]	; (8001fe4 <HAL_ADC_PollForConversion+0x1a8>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d002      	beq.n	8001fa8 <HAL_ADC_PollForConversion+0x16c>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	e000      	b.n	8001faa <HAL_ADC_PollForConversion+0x16e>
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <HAL_ADC_PollForConversion+0x1ac>)
 8001faa:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	2b08      	cmp	r3, #8
 8001fb6:	d104      	bne.n	8001fc2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2208      	movs	r2, #8
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	e008      	b.n	8001fd4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d103      	bne.n	8001fd4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	220c      	movs	r2, #12
 8001fd2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3720      	adds	r7, #32
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	50040300 	.word	0x50040300
 8001fe4:	50040100 	.word	0x50040100
 8001fe8:	50040000 	.word	0x50040000

08001fec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b0b6      	sub	sp, #216	; 0xd8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_ADC_ConfigChannel+0x22>
 8002026:	2302      	movs	r3, #2
 8002028:	e3c7      	b.n	80027ba <HAL_ADC_ConfigChannel+0x7b2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fcc9 	bl	80019ce <LL_ADC_REG_IsConversionOngoing>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	f040 83a8 	bne.w	8002794 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b05      	cmp	r3, #5
 800204a:	d824      	bhi.n	8002096 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	3b02      	subs	r3, #2
 8002052:	2b03      	cmp	r3, #3
 8002054:	d81b      	bhi.n	800208e <HAL_ADC_ConfigChannel+0x86>
 8002056:	a201      	add	r2, pc, #4	; (adr r2, 800205c <HAL_ADC_ConfigChannel+0x54>)
 8002058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205c:	0800206d 	.word	0x0800206d
 8002060:	08002075 	.word	0x08002075
 8002064:	0800207d 	.word	0x0800207d
 8002068:	08002085 	.word	0x08002085
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	220c      	movs	r2, #12
 8002070:	605a      	str	r2, [r3, #4]
          break;
 8002072:	e011      	b.n	8002098 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	2212      	movs	r2, #18
 8002078:	605a      	str	r2, [r3, #4]
          break;
 800207a:	e00d      	b.n	8002098 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	2218      	movs	r2, #24
 8002080:	605a      	str	r2, [r3, #4]
          break;
 8002082:	e009      	b.n	8002098 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	f44f 7280 	mov.w	r2, #256	; 0x100
 800208a:	605a      	str	r2, [r3, #4]
          break;
 800208c:	e004      	b.n	8002098 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2206      	movs	r2, #6
 8002092:	605a      	str	r2, [r3, #4]
          break;
 8002094:	e000      	b.n	8002098 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002096:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	6859      	ldr	r1, [r3, #4]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	f7ff fb71 	bl	800178c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fc8d 	bl	80019ce <LL_ADC_REG_IsConversionOngoing>
 80020b4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fc99 	bl	80019f4 <LL_ADC_INJ_IsConversionOngoing>
 80020c2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f040 81a6 	bne.w	800241c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f040 81a1 	bne.w	800241c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	6819      	ldr	r1, [r3, #0]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	461a      	mov	r2, r3
 80020e8:	f7ff fb7c 	bl	80017e4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	08db      	lsrs	r3, r3, #3
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	2b04      	cmp	r3, #4
 800210c:	d00a      	beq.n	8002124 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6919      	ldr	r1, [r3, #16]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800211e:	f7ff facd 	bl	80016bc <LL_ADC_SetOffset>
 8002122:	e17b      	b.n	800241c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff faea 	bl	8001704 <LL_ADC_GetOffsetChannel>
 8002130:	4603      	mov	r3, r0
 8002132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10a      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x148>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2100      	movs	r1, #0
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fadf 	bl	8001704 <LL_ADC_GetOffsetChannel>
 8002146:	4603      	mov	r3, r0
 8002148:	0e9b      	lsrs	r3, r3, #26
 800214a:	f003 021f 	and.w	r2, r3, #31
 800214e:	e01e      	b.n	800218e <HAL_ADC_ConfigChannel+0x186>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fad4 	bl	8001704 <LL_ADC_GetOffsetChannel>
 800215c:	4603      	mov	r3, r0
 800215e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800216e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002172:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002176:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800217e:	2320      	movs	r3, #32
 8002180:	e004      	b.n	800218c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002182:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002186:	fab3 f383 	clz	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002196:	2b00      	cmp	r3, #0
 8002198:	d105      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x19e>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	0e9b      	lsrs	r3, r3, #26
 80021a0:	f003 031f 	and.w	r3, r3, #31
 80021a4:	e018      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x1d0>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80021ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80021c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80021ca:	2320      	movs	r3, #32
 80021cc:	e004      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80021ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021d8:	429a      	cmp	r2, r3
 80021da:	d106      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2200      	movs	r2, #0
 80021e2:	2100      	movs	r1, #0
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff faa3 	bl	8001730 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2101      	movs	r1, #1
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fa87 	bl	8001704 <LL_ADC_GetOffsetChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10a      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x20e>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2101      	movs	r1, #1
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fa7c 	bl	8001704 <LL_ADC_GetOffsetChannel>
 800220c:	4603      	mov	r3, r0
 800220e:	0e9b      	lsrs	r3, r3, #26
 8002210:	f003 021f 	and.w	r2, r3, #31
 8002214:	e01e      	b.n	8002254 <HAL_ADC_ConfigChannel+0x24c>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2101      	movs	r1, #1
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fa71 	bl	8001704 <LL_ADC_GetOffsetChannel>
 8002222:	4603      	mov	r3, r0
 8002224:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800222c:	fa93 f3a3 	rbit	r3, r3
 8002230:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002234:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002238:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800223c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002244:	2320      	movs	r3, #32
 8002246:	e004      	b.n	8002252 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002248:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800224c:	fab3 f383 	clz	r3, r3
 8002250:	b2db      	uxtb	r3, r3
 8002252:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800225c:	2b00      	cmp	r3, #0
 800225e:	d105      	bne.n	800226c <HAL_ADC_ConfigChannel+0x264>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	0e9b      	lsrs	r3, r3, #26
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	e018      	b.n	800229e <HAL_ADC_ConfigChannel+0x296>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002278:	fa93 f3a3 	rbit	r3, r3
 800227c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002280:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002284:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002288:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002290:	2320      	movs	r3, #32
 8002292:	e004      	b.n	800229e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002294:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002298:	fab3 f383 	clz	r3, r3
 800229c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800229e:	429a      	cmp	r2, r3
 80022a0:	d106      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2200      	movs	r2, #0
 80022a8:	2101      	movs	r1, #1
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fa40 	bl	8001730 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2102      	movs	r1, #2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fa24 	bl	8001704 <LL_ADC_GetOffsetChannel>
 80022bc:	4603      	mov	r3, r0
 80022be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10a      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x2d4>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2102      	movs	r1, #2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fa19 	bl	8001704 <LL_ADC_GetOffsetChannel>
 80022d2:	4603      	mov	r3, r0
 80022d4:	0e9b      	lsrs	r3, r3, #26
 80022d6:	f003 021f 	and.w	r2, r3, #31
 80022da:	e01e      	b.n	800231a <HAL_ADC_ConfigChannel+0x312>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2102      	movs	r1, #2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fa0e 	bl	8001704 <LL_ADC_GetOffsetChannel>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022f2:	fa93 f3a3 	rbit	r3, r3
 80022f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80022fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002302:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800230a:	2320      	movs	r3, #32
 800230c:	e004      	b.n	8002318 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800230e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002322:	2b00      	cmp	r3, #0
 8002324:	d105      	bne.n	8002332 <HAL_ADC_ConfigChannel+0x32a>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	0e9b      	lsrs	r3, r3, #26
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	e016      	b.n	8002360 <HAL_ADC_ConfigChannel+0x358>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800233e:	fa93 f3a3 	rbit	r3, r3
 8002342:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002344:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002346:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800234a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002352:	2320      	movs	r3, #32
 8002354:	e004      	b.n	8002360 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002356:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800235a:	fab3 f383 	clz	r3, r3
 800235e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002360:	429a      	cmp	r2, r3
 8002362:	d106      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2200      	movs	r2, #0
 800236a:	2102      	movs	r1, #2
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff f9df 	bl	8001730 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2103      	movs	r1, #3
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff f9c3 	bl	8001704 <LL_ADC_GetOffsetChannel>
 800237e:	4603      	mov	r3, r0
 8002380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10a      	bne.n	800239e <HAL_ADC_ConfigChannel+0x396>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2103      	movs	r1, #3
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff f9b8 	bl	8001704 <LL_ADC_GetOffsetChannel>
 8002394:	4603      	mov	r3, r0
 8002396:	0e9b      	lsrs	r3, r3, #26
 8002398:	f003 021f 	and.w	r2, r3, #31
 800239c:	e017      	b.n	80023ce <HAL_ADC_ConfigChannel+0x3c6>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2103      	movs	r1, #3
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff f9ad 	bl	8001704 <LL_ADC_GetOffsetChannel>
 80023aa:	4603      	mov	r3, r0
 80023ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80023b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023b8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80023ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80023c0:	2320      	movs	r3, #32
 80023c2:	e003      	b.n	80023cc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80023c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023c6:	fab3 f383 	clz	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d105      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x3de>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	0e9b      	lsrs	r3, r3, #26
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	e011      	b.n	800240a <HAL_ADC_ConfigChannel+0x402>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023ee:	fa93 f3a3 	rbit	r3, r3
 80023f2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80023f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80023f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80023fe:	2320      	movs	r3, #32
 8002400:	e003      	b.n	800240a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002404:	fab3 f383 	clz	r3, r3
 8002408:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800240a:	429a      	cmp	r2, r3
 800240c:	d106      	bne.n	800241c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2200      	movs	r2, #0
 8002414:	2103      	movs	r1, #3
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff f98a 	bl	8001730 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff faad 	bl	8001980 <LL_ADC_IsEnabled>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	f040 813f 	bne.w	80026ac <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	6819      	ldr	r1, [r3, #0]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	461a      	mov	r2, r3
 800243c:	f7ff f9fe 	bl	800183c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	4a8e      	ldr	r2, [pc, #568]	; (8002680 <HAL_ADC_ConfigChannel+0x678>)
 8002446:	4293      	cmp	r3, r2
 8002448:	f040 8130 	bne.w	80026ac <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10b      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x46c>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	0e9b      	lsrs	r3, r3, #26
 8002462:	3301      	adds	r3, #1
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	2b09      	cmp	r3, #9
 800246a:	bf94      	ite	ls
 800246c:	2301      	movls	r3, #1
 800246e:	2300      	movhi	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	e019      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x4a0>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800247c:	fa93 f3a3 	rbit	r3, r3
 8002480:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002482:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002484:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002486:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800248c:	2320      	movs	r3, #32
 800248e:	e003      	b.n	8002498 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002490:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002492:	fab3 f383 	clz	r3, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	3301      	adds	r3, #1
 800249a:	f003 031f 	and.w	r3, r3, #31
 800249e:	2b09      	cmp	r3, #9
 80024a0:	bf94      	ite	ls
 80024a2:	2301      	movls	r3, #1
 80024a4:	2300      	movhi	r3, #0
 80024a6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d079      	beq.n	80025a0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d107      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x4c0>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	0e9b      	lsrs	r3, r3, #26
 80024be:	3301      	adds	r3, #1
 80024c0:	069b      	lsls	r3, r3, #26
 80024c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024c6:	e015      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x4ec>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024d0:	fa93 f3a3 	rbit	r3, r3
 80024d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80024da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80024e0:	2320      	movs	r3, #32
 80024e2:	e003      	b.n	80024ec <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80024e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e6:	fab3 f383 	clz	r3, r3
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	3301      	adds	r3, #1
 80024ee:	069b      	lsls	r3, r3, #26
 80024f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d109      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x50c>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	0e9b      	lsrs	r3, r3, #26
 8002506:	3301      	adds	r3, #1
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	2101      	movs	r1, #1
 800250e:	fa01 f303 	lsl.w	r3, r1, r3
 8002512:	e017      	b.n	8002544 <HAL_ADC_ConfigChannel+0x53c>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800251c:	fa93 f3a3 	rbit	r3, r3
 8002520:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002524:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800252c:	2320      	movs	r3, #32
 800252e:	e003      	b.n	8002538 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002532:	fab3 f383 	clz	r3, r3
 8002536:	b2db      	uxtb	r3, r3
 8002538:	3301      	adds	r3, #1
 800253a:	f003 031f 	and.w	r3, r3, #31
 800253e:	2101      	movs	r1, #1
 8002540:	fa01 f303 	lsl.w	r3, r1, r3
 8002544:	ea42 0103 	orr.w	r1, r2, r3
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10a      	bne.n	800256a <HAL_ADC_ConfigChannel+0x562>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	0e9b      	lsrs	r3, r3, #26
 800255a:	3301      	adds	r3, #1
 800255c:	f003 021f 	and.w	r2, r3, #31
 8002560:	4613      	mov	r3, r2
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	4413      	add	r3, r2
 8002566:	051b      	lsls	r3, r3, #20
 8002568:	e018      	b.n	800259c <HAL_ADC_ConfigChannel+0x594>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800257a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800257c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002582:	2320      	movs	r3, #32
 8002584:	e003      	b.n	800258e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002588:	fab3 f383 	clz	r3, r3
 800258c:	b2db      	uxtb	r3, r3
 800258e:	3301      	adds	r3, #1
 8002590:	f003 021f 	and.w	r2, r3, #31
 8002594:	4613      	mov	r3, r2
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	4413      	add	r3, r2
 800259a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800259c:	430b      	orrs	r3, r1
 800259e:	e080      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d107      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x5b4>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	0e9b      	lsrs	r3, r3, #26
 80025b2:	3301      	adds	r3, #1
 80025b4:	069b      	lsls	r3, r3, #26
 80025b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025ba:	e015      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x5e0>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c4:	fa93 f3a3 	rbit	r3, r3
 80025c8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80025ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025cc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80025ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80025d4:	2320      	movs	r3, #32
 80025d6:	e003      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80025d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	3301      	adds	r3, #1
 80025e2:	069b      	lsls	r3, r3, #26
 80025e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d109      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x600>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	0e9b      	lsrs	r3, r3, #26
 80025fa:	3301      	adds	r3, #1
 80025fc:	f003 031f 	and.w	r3, r3, #31
 8002600:	2101      	movs	r1, #1
 8002602:	fa01 f303 	lsl.w	r3, r1, r3
 8002606:	e017      	b.n	8002638 <HAL_ADC_ConfigChannel+0x630>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	61fb      	str	r3, [r7, #28]
  return result;
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002620:	2320      	movs	r3, #32
 8002622:	e003      	b.n	800262c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	fab3 f383 	clz	r3, r3
 800262a:	b2db      	uxtb	r3, r3
 800262c:	3301      	adds	r3, #1
 800262e:	f003 031f 	and.w	r3, r3, #31
 8002632:	2101      	movs	r1, #1
 8002634:	fa01 f303 	lsl.w	r3, r1, r3
 8002638:	ea42 0103 	orr.w	r1, r2, r3
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10d      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x65c>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	0e9b      	lsrs	r3, r3, #26
 800264e:	3301      	adds	r3, #1
 8002650:	f003 021f 	and.w	r2, r3, #31
 8002654:	4613      	mov	r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	4413      	add	r3, r2
 800265a:	3b1e      	subs	r3, #30
 800265c:	051b      	lsls	r3, r3, #20
 800265e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002662:	e01d      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x698>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	613b      	str	r3, [r7, #16]
  return result;
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d103      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800267c:	2320      	movs	r3, #32
 800267e:	e005      	b.n	800268c <HAL_ADC_ConfigChannel+0x684>
 8002680:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	fab3 f383 	clz	r3, r3
 800268a:	b2db      	uxtb	r3, r3
 800268c:	3301      	adds	r3, #1
 800268e:	f003 021f 	and.w	r2, r3, #31
 8002692:	4613      	mov	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	4413      	add	r3, r2
 8002698:	3b1e      	subs	r3, #30
 800269a:	051b      	lsls	r3, r3, #20
 800269c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026a0:	430b      	orrs	r3, r1
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	6892      	ldr	r2, [r2, #8]
 80026a6:	4619      	mov	r1, r3
 80026a8:	f7ff f89c 	bl	80017e4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b44      	ldr	r3, [pc, #272]	; (80027c4 <HAL_ADC_ConfigChannel+0x7bc>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d07a      	beq.n	80027ae <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026b8:	4843      	ldr	r0, [pc, #268]	; (80027c8 <HAL_ADC_ConfigChannel+0x7c0>)
 80026ba:	f7fe fff1 	bl	80016a0 <LL_ADC_GetCommonPathInternalCh>
 80026be:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a41      	ldr	r2, [pc, #260]	; (80027cc <HAL_ADC_ConfigChannel+0x7c4>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d12c      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d126      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a3c      	ldr	r2, [pc, #240]	; (80027d0 <HAL_ADC_ConfigChannel+0x7c8>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d004      	beq.n	80026ec <HAL_ADC_ConfigChannel+0x6e4>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a3b      	ldr	r2, [pc, #236]	; (80027d4 <HAL_ADC_ConfigChannel+0x7cc>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d15d      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026f4:	4619      	mov	r1, r3
 80026f6:	4834      	ldr	r0, [pc, #208]	; (80027c8 <HAL_ADC_ConfigChannel+0x7c0>)
 80026f8:	f7fe ffbf 	bl	800167a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026fc:	4b36      	ldr	r3, [pc, #216]	; (80027d8 <HAL_ADC_ConfigChannel+0x7d0>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	099b      	lsrs	r3, r3, #6
 8002702:	4a36      	ldr	r2, [pc, #216]	; (80027dc <HAL_ADC_ConfigChannel+0x7d4>)
 8002704:	fba2 2303 	umull	r2, r3, r2, r3
 8002708:	099b      	lsrs	r3, r3, #6
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	4613      	mov	r3, r2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002716:	e002      	b.n	800271e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	3b01      	subs	r3, #1
 800271c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1f9      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002724:	e040      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a2d      	ldr	r2, [pc, #180]	; (80027e0 <HAL_ADC_ConfigChannel+0x7d8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d118      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x75a>
 8002730:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d112      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a23      	ldr	r2, [pc, #140]	; (80027d0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d004      	beq.n	8002750 <HAL_ADC_ConfigChannel+0x748>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a22      	ldr	r2, [pc, #136]	; (80027d4 <HAL_ADC_ConfigChannel+0x7cc>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d12d      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002750:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002754:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002758:	4619      	mov	r1, r3
 800275a:	481b      	ldr	r0, [pc, #108]	; (80027c8 <HAL_ADC_ConfigChannel+0x7c0>)
 800275c:	f7fe ff8d 	bl	800167a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002760:	e024      	b.n	80027ac <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a1f      	ldr	r2, [pc, #124]	; (80027e4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d120      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800276c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002770:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d11a      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a14      	ldr	r2, [pc, #80]	; (80027d0 <HAL_ADC_ConfigChannel+0x7c8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d115      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002782:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002786:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800278a:	4619      	mov	r1, r3
 800278c:	480e      	ldr	r0, [pc, #56]	; (80027c8 <HAL_ADC_ConfigChannel+0x7c0>)
 800278e:	f7fe ff74 	bl	800167a <LL_ADC_SetCommonPathInternalCh>
 8002792:	e00c      	b.n	80027ae <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002798:	f043 0220 	orr.w	r2, r3, #32
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80027a6:	e002      	b.n	80027ae <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027a8:	bf00      	nop
 80027aa:	e000      	b.n	80027ae <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80027b6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	37d8      	adds	r7, #216	; 0xd8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	80080000 	.word	0x80080000
 80027c8:	50040300 	.word	0x50040300
 80027cc:	c7520000 	.word	0xc7520000
 80027d0:	50040000 	.word	0x50040000
 80027d4:	50040200 	.word	0x50040200
 80027d8:	2000000c 	.word	0x2000000c
 80027dc:	053e2d63 	.word	0x053e2d63
 80027e0:	cb840000 	.word	0xcb840000
 80027e4:	80000001 	.word	0x80000001

080027e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff f8c3 	bl	8001980 <LL_ADC_IsEnabled>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d14d      	bne.n	800289c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	4b28      	ldr	r3, [pc, #160]	; (80028a8 <ADC_Enable+0xc0>)
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00d      	beq.n	800282a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002812:	f043 0210 	orr.w	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281e:	f043 0201 	orr.w	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e039      	b.n	800289e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff f892 	bl	8001958 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002834:	f7fe fede 	bl	80015f4 <HAL_GetTick>
 8002838:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800283a:	e028      	b.n	800288e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff f89d 	bl	8001980 <LL_ADC_IsEnabled>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d104      	bne.n	8002856 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff f881 	bl	8001958 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002856:	f7fe fecd 	bl	80015f4 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d914      	bls.n	800288e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b01      	cmp	r3, #1
 8002870:	d00d      	beq.n	800288e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002876:	f043 0210 	orr.w	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002882:	f043 0201 	orr.w	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e007      	b.n	800289e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b01      	cmp	r3, #1
 800289a:	d1cf      	bne.n	800283c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	8000003f 	.word	0x8000003f

080028ac <LL_ADC_IsEnabled>:
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <LL_ADC_IsEnabled+0x18>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <LL_ADC_IsEnabled+0x1a>
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d101      	bne.n	80028ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80028f8:	b590      	push	{r4, r7, lr}
 80028fa:	b09f      	sub	sp, #124	; 0x7c
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800290e:	2b01      	cmp	r3, #1
 8002910:	d101      	bne.n	8002916 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002912:	2302      	movs	r3, #2
 8002914:	e093      	b.n	8002a3e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800291e:	2300      	movs	r3, #0
 8002920:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002922:	2300      	movs	r3, #0
 8002924:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a47      	ldr	r2, [pc, #284]	; (8002a48 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d102      	bne.n	8002936 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002930:	4b46      	ldr	r3, [pc, #280]	; (8002a4c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	e001      	b.n	800293a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002936:	2300      	movs	r3, #0
 8002938:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10b      	bne.n	8002958 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002944:	f043 0220 	orr.w	r2, r3, #32
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e072      	b.n	8002a3e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff ffb9 	bl	80028d2 <LL_ADC_REG_IsConversionOngoing>
 8002960:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff ffb3 	bl	80028d2 <LL_ADC_REG_IsConversionOngoing>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d154      	bne.n	8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002972:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002974:	2b00      	cmp	r3, #0
 8002976:	d151      	bne.n	8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002978:	4b35      	ldr	r3, [pc, #212]	; (8002a50 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800297a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d02c      	beq.n	80029de <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	6859      	ldr	r1, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002996:	035b      	lsls	r3, r3, #13
 8002998:	430b      	orrs	r3, r1
 800299a:	431a      	orrs	r2, r3
 800299c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800299e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029a0:	4829      	ldr	r0, [pc, #164]	; (8002a48 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80029a2:	f7ff ff83 	bl	80028ac <LL_ADC_IsEnabled>
 80029a6:	4604      	mov	r4, r0
 80029a8:	4828      	ldr	r0, [pc, #160]	; (8002a4c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80029aa:	f7ff ff7f 	bl	80028ac <LL_ADC_IsEnabled>
 80029ae:	4603      	mov	r3, r0
 80029b0:	431c      	orrs	r4, r3
 80029b2:	4828      	ldr	r0, [pc, #160]	; (8002a54 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80029b4:	f7ff ff7a 	bl	80028ac <LL_ADC_IsEnabled>
 80029b8:	4603      	mov	r3, r0
 80029ba:	4323      	orrs	r3, r4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d137      	bne.n	8002a30 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80029c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029c8:	f023 030f 	bic.w	r3, r3, #15
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	6811      	ldr	r1, [r2, #0]
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	6892      	ldr	r2, [r2, #8]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	431a      	orrs	r2, r3
 80029d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029da:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029dc:	e028      	b.n	8002a30 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80029de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029e8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029ea:	4817      	ldr	r0, [pc, #92]	; (8002a48 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80029ec:	f7ff ff5e 	bl	80028ac <LL_ADC_IsEnabled>
 80029f0:	4604      	mov	r4, r0
 80029f2:	4816      	ldr	r0, [pc, #88]	; (8002a4c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80029f4:	f7ff ff5a 	bl	80028ac <LL_ADC_IsEnabled>
 80029f8:	4603      	mov	r3, r0
 80029fa:	431c      	orrs	r4, r3
 80029fc:	4815      	ldr	r0, [pc, #84]	; (8002a54 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80029fe:	f7ff ff55 	bl	80028ac <LL_ADC_IsEnabled>
 8002a02:	4603      	mov	r3, r0
 8002a04:	4323      	orrs	r3, r4
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d112      	bne.n	8002a30 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a12:	f023 030f 	bic.w	r3, r3, #15
 8002a16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a18:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a1a:	e009      	b.n	8002a30 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a20:	f043 0220 	orr.w	r2, r3, #32
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002a2e:	e000      	b.n	8002a32 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a30:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a3a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	377c      	adds	r7, #124	; 0x7c
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd90      	pop	{r4, r7, pc}
 8002a46:	bf00      	nop
 8002a48:	50040000 	.word	0x50040000
 8002a4c:	50040100 	.word	0x50040100
 8002a50:	50040300 	.word	0x50040300
 8002a54:	50040200 	.word	0x50040200

08002a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <__NVIC_SetPriorityGrouping+0x44>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a74:	4013      	ands	r3, r2
 8002a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a8a:	4a04      	ldr	r2, [pc, #16]	; (8002a9c <__NVIC_SetPriorityGrouping+0x44>)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	60d3      	str	r3, [r2, #12]
}
 8002a90:	bf00      	nop
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa4:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	0a1b      	lsrs	r3, r3, #8
 8002aaa:	f003 0307 	and.w	r3, r3, #7
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	6039      	str	r1, [r7, #0]
 8002ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	db0a      	blt.n	8002ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	490c      	ldr	r1, [pc, #48]	; (8002b08 <__NVIC_SetPriority+0x4c>)
 8002ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ada:	0112      	lsls	r2, r2, #4
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	440b      	add	r3, r1
 8002ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ae4:	e00a      	b.n	8002afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	4908      	ldr	r1, [pc, #32]	; (8002b0c <__NVIC_SetPriority+0x50>)
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	3b04      	subs	r3, #4
 8002af4:	0112      	lsls	r2, r2, #4
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	440b      	add	r3, r1
 8002afa:	761a      	strb	r2, [r3, #24]
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	e000e100 	.word	0xe000e100
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b089      	sub	sp, #36	; 0x24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f1c3 0307 	rsb	r3, r3, #7
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	bf28      	it	cs
 8002b2e:	2304      	movcs	r3, #4
 8002b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3304      	adds	r3, #4
 8002b36:	2b06      	cmp	r3, #6
 8002b38:	d902      	bls.n	8002b40 <NVIC_EncodePriority+0x30>
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3b03      	subs	r3, #3
 8002b3e:	e000      	b.n	8002b42 <NVIC_EncodePriority+0x32>
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b44:	f04f 32ff 	mov.w	r2, #4294967295
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43da      	mvns	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	401a      	ands	r2, r3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b58:	f04f 31ff 	mov.w	r1, #4294967295
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b62:	43d9      	mvns	r1, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b68:	4313      	orrs	r3, r2
         );
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3724      	adds	r7, #36	; 0x24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
	...

08002b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b88:	d301      	bcc.n	8002b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e00f      	b.n	8002bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b8e:	4a0a      	ldr	r2, [pc, #40]	; (8002bb8 <SysTick_Config+0x40>)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b96:	210f      	movs	r1, #15
 8002b98:	f04f 30ff 	mov.w	r0, #4294967295
 8002b9c:	f7ff ff8e 	bl	8002abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ba0:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <SysTick_Config+0x40>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ba6:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <SysTick_Config+0x40>)
 8002ba8:	2207      	movs	r2, #7
 8002baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	e000e010 	.word	0xe000e010

08002bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7ff ff47 	bl	8002a58 <__NVIC_SetPriorityGrouping>
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b086      	sub	sp, #24
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	4603      	mov	r3, r0
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
 8002bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002be4:	f7ff ff5c 	bl	8002aa0 <__NVIC_GetPriorityGrouping>
 8002be8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	68b9      	ldr	r1, [r7, #8]
 8002bee:	6978      	ldr	r0, [r7, #20]
 8002bf0:	f7ff ff8e 	bl	8002b10 <NVIC_EncodePriority>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff5d 	bl	8002abc <__NVIC_SetPriority>
}
 8002c02:	bf00      	nop
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff ffb0 	bl	8002b78 <SysTick_Config>
 8002c18:	4603      	mov	r3, r0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c32:	e17f      	b.n	8002f34 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	2101      	movs	r1, #1
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c40:	4013      	ands	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 8171 	beq.w	8002f2e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d005      	beq.n	8002c64 <HAL_GPIO_Init+0x40>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d130      	bne.n	8002cc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	2203      	movs	r2, #3
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	091b      	lsrs	r3, r3, #4
 8002cb0:	f003 0201 	and.w	r2, r3, #1
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d118      	bne.n	8002d04 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002cd8:	2201      	movs	r2, #1
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	08db      	lsrs	r3, r3, #3
 8002cee:	f003 0201 	and.w	r2, r3, #1
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d017      	beq.n	8002d40 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4013      	ands	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d123      	bne.n	8002d94 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	08da      	lsrs	r2, r3, #3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3208      	adds	r2, #8
 8002d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d58:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	220f      	movs	r2, #15
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	08da      	lsrs	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3208      	adds	r2, #8
 8002d8e:	6939      	ldr	r1, [r7, #16]
 8002d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	2203      	movs	r2, #3
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4013      	ands	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 0203 	and.w	r2, r3, #3
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80ac 	beq.w	8002f2e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd6:	4b5f      	ldr	r3, [pc, #380]	; (8002f54 <HAL_GPIO_Init+0x330>)
 8002dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dda:	4a5e      	ldr	r2, [pc, #376]	; (8002f54 <HAL_GPIO_Init+0x330>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	6613      	str	r3, [r2, #96]	; 0x60
 8002de2:	4b5c      	ldr	r3, [pc, #368]	; (8002f54 <HAL_GPIO_Init+0x330>)
 8002de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002dee:	4a5a      	ldr	r2, [pc, #360]	; (8002f58 <HAL_GPIO_Init+0x334>)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	089b      	lsrs	r3, r3, #2
 8002df4:	3302      	adds	r3, #2
 8002df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	220f      	movs	r2, #15
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e18:	d025      	beq.n	8002e66 <HAL_GPIO_Init+0x242>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a4f      	ldr	r2, [pc, #316]	; (8002f5c <HAL_GPIO_Init+0x338>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d01f      	beq.n	8002e62 <HAL_GPIO_Init+0x23e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a4e      	ldr	r2, [pc, #312]	; (8002f60 <HAL_GPIO_Init+0x33c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d019      	beq.n	8002e5e <HAL_GPIO_Init+0x23a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a4d      	ldr	r2, [pc, #308]	; (8002f64 <HAL_GPIO_Init+0x340>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d013      	beq.n	8002e5a <HAL_GPIO_Init+0x236>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a4c      	ldr	r2, [pc, #304]	; (8002f68 <HAL_GPIO_Init+0x344>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00d      	beq.n	8002e56 <HAL_GPIO_Init+0x232>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4b      	ldr	r2, [pc, #300]	; (8002f6c <HAL_GPIO_Init+0x348>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d007      	beq.n	8002e52 <HAL_GPIO_Init+0x22e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a4a      	ldr	r2, [pc, #296]	; (8002f70 <HAL_GPIO_Init+0x34c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d101      	bne.n	8002e4e <HAL_GPIO_Init+0x22a>
 8002e4a:	2306      	movs	r3, #6
 8002e4c:	e00c      	b.n	8002e68 <HAL_GPIO_Init+0x244>
 8002e4e:	2307      	movs	r3, #7
 8002e50:	e00a      	b.n	8002e68 <HAL_GPIO_Init+0x244>
 8002e52:	2305      	movs	r3, #5
 8002e54:	e008      	b.n	8002e68 <HAL_GPIO_Init+0x244>
 8002e56:	2304      	movs	r3, #4
 8002e58:	e006      	b.n	8002e68 <HAL_GPIO_Init+0x244>
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e004      	b.n	8002e68 <HAL_GPIO_Init+0x244>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e002      	b.n	8002e68 <HAL_GPIO_Init+0x244>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <HAL_GPIO_Init+0x244>
 8002e66:	2300      	movs	r3, #0
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	f002 0203 	and.w	r2, r2, #3
 8002e6e:	0092      	lsls	r2, r2, #2
 8002e70:	4093      	lsls	r3, r2
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e78:	4937      	ldr	r1, [pc, #220]	; (8002f58 <HAL_GPIO_Init+0x334>)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	089b      	lsrs	r3, r3, #2
 8002e7e:	3302      	adds	r3, #2
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e86:	4b3b      	ldr	r3, [pc, #236]	; (8002f74 <HAL_GPIO_Init+0x350>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4013      	ands	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002eaa:	4a32      	ldr	r2, [pc, #200]	; (8002f74 <HAL_GPIO_Init+0x350>)
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002eb0:	4b30      	ldr	r3, [pc, #192]	; (8002f74 <HAL_GPIO_Init+0x350>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ed4:	4a27      	ldr	r2, [pc, #156]	; (8002f74 <HAL_GPIO_Init+0x350>)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002eda:	4b26      	ldr	r3, [pc, #152]	; (8002f74 <HAL_GPIO_Init+0x350>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002efe:	4a1d      	ldr	r2, [pc, #116]	; (8002f74 <HAL_GPIO_Init+0x350>)
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f04:	4b1b      	ldr	r3, [pc, #108]	; (8002f74 <HAL_GPIO_Init+0x350>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4013      	ands	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f28:	4a12      	ldr	r2, [pc, #72]	; (8002f74 <HAL_GPIO_Init+0x350>)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	3301      	adds	r3, #1
 8002f32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f47f ae78 	bne.w	8002c34 <HAL_GPIO_Init+0x10>
  }
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	371c      	adds	r7, #28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	40010000 	.word	0x40010000
 8002f5c:	48000400 	.word	0x48000400
 8002f60:	48000800 	.word	0x48000800
 8002f64:	48000c00 	.word	0x48000c00
 8002f68:	48001000 	.word	0x48001000
 8002f6c:	48001400 	.word	0x48001400
 8002f70:	48001800 	.word	0x48001800
 8002f74:	40010400 	.word	0x40010400

08002f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	807b      	strh	r3, [r7, #2]
 8002f84:	4613      	mov	r3, r2
 8002f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f88:	787b      	ldrb	r3, [r7, #1]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f8e:	887a      	ldrh	r2, [r7, #2]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f94:	e002      	b.n	8002f9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f96:	887a      	ldrh	r2, [r7, #2]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e081      	b.n	80030be <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fe f922 	bl	8001218 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2224      	movs	r2, #36	; 0x24
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ff8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003008:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d107      	bne.n	8003022 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	e006      	b.n	8003030 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800302e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d104      	bne.n	8003042 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003040:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003054:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003064:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691a      	ldr	r2, [r3, #16]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69d9      	ldr	r1, [r3, #28]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a1a      	ldr	r2, [r3, #32]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	607a      	str	r2, [r7, #4]
 80030d2:	461a      	mov	r2, r3
 80030d4:	460b      	mov	r3, r1
 80030d6:	817b      	strh	r3, [r7, #10]
 80030d8:	4613      	mov	r3, r2
 80030da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	f040 80da 	bne.w	800329e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_I2C_Master_Transmit+0x30>
 80030f4:	2302      	movs	r3, #2
 80030f6:	e0d3      	b.n	80032a0 <HAL_I2C_Master_Transmit+0x1d8>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003100:	f7fe fa78 	bl	80015f4 <HAL_GetTick>
 8003104:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	2319      	movs	r3, #25
 800310c:	2201      	movs	r2, #1
 800310e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 f9f7 	bl	8003506 <I2C_WaitOnFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e0be      	b.n	80032a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2221      	movs	r2, #33	; 0x21
 8003126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2210      	movs	r2, #16
 800312e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	893a      	ldrh	r2, [r7, #8]
 8003142:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314e:	b29b      	uxth	r3, r3
 8003150:	2bff      	cmp	r3, #255	; 0xff
 8003152:	d90e      	bls.n	8003172 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	22ff      	movs	r2, #255	; 0xff
 8003158:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315e:	b2da      	uxtb	r2, r3
 8003160:	8979      	ldrh	r1, [r7, #10]
 8003162:	4b51      	ldr	r3, [pc, #324]	; (80032a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 fb74 	bl	8003858 <I2C_TransferConfig>
 8003170:	e06c      	b.n	800324c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003180:	b2da      	uxtb	r2, r3
 8003182:	8979      	ldrh	r1, [r7, #10]
 8003184:	4b48      	ldr	r3, [pc, #288]	; (80032a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 fb63 	bl	8003858 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003192:	e05b      	b.n	800324c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	6a39      	ldr	r1, [r7, #32]
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 f9f4 	bl	8003586 <I2C_WaitOnTXISFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e07b      	b.n	80032a0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	781a      	ldrb	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031dc:	b29b      	uxth	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d034      	beq.n	800324c <HAL_I2C_Master_Transmit+0x184>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d130      	bne.n	800324c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	2200      	movs	r2, #0
 80031f2:	2180      	movs	r1, #128	; 0x80
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f986 	bl	8003506 <I2C_WaitOnFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e04d      	b.n	80032a0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	2bff      	cmp	r3, #255	; 0xff
 800320c:	d90e      	bls.n	800322c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	22ff      	movs	r2, #255	; 0xff
 8003212:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003218:	b2da      	uxtb	r2, r3
 800321a:	8979      	ldrh	r1, [r7, #10]
 800321c:	2300      	movs	r3, #0
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 fb17 	bl	8003858 <I2C_TransferConfig>
 800322a:	e00f      	b.n	800324c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323a:	b2da      	uxtb	r2, r3
 800323c:	8979      	ldrh	r1, [r7, #10]
 800323e:	2300      	movs	r3, #0
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 fb06 	bl	8003858 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d19e      	bne.n	8003194 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	6a39      	ldr	r1, [r7, #32]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f9d3 	bl	8003606 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e01a      	b.n	80032a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2220      	movs	r2, #32
 8003270:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6859      	ldr	r1, [r3, #4]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_I2C_Master_Transmit+0x1e4>)
 800327e:	400b      	ands	r3, r1
 8003280:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	e000      	b.n	80032a0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800329e:	2302      	movs	r3, #2
  }
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	80002000 	.word	0x80002000
 80032ac:	fe00e800 	.word	0xfe00e800

080032b0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	; 0x28
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	460b      	mov	r3, r1
 80032be:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	f040 80f1 	bne.w	80034b4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032e0:	d101      	bne.n	80032e6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80032e2:	2302      	movs	r3, #2
 80032e4:	e0e7      	b.n	80034b6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_I2C_IsDeviceReady+0x44>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e0e0      	b.n	80034b6 <HAL_I2C_IsDeviceReady+0x206>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2224      	movs	r2, #36	; 0x24
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d107      	bne.n	8003322 <HAL_I2C_IsDeviceReady+0x72>
 8003312:	897b      	ldrh	r3, [r7, #10]
 8003314:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003318:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800331c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003320:	e004      	b.n	800332c <HAL_I2C_IsDeviceReady+0x7c>
 8003322:	897b      	ldrh	r3, [r7, #10]
 8003324:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003328:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003332:	f7fe f95f 	bl	80015f4 <HAL_GetTick>
 8003336:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b20      	cmp	r3, #32
 8003344:	bf0c      	ite	eq
 8003346:	2301      	moveq	r3, #1
 8003348:	2300      	movne	r3, #0
 800334a:	b2db      	uxtb	r3, r3
 800334c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b10      	cmp	r3, #16
 800335a:	bf0c      	ite	eq
 800335c:	2301      	moveq	r3, #1
 800335e:	2300      	movne	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003364:	e034      	b.n	80033d0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336c:	d01a      	beq.n	80033a4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800336e:	f7fe f941 	bl	80015f4 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d302      	bcc.n	8003384 <HAL_I2C_IsDeviceReady+0xd4>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10f      	bne.n	80033a4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	f043 0220 	orr.w	r2, r3, #32
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e088      	b.n	80034b6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	f003 0320 	and.w	r3, r3, #32
 80033ae:	2b20      	cmp	r3, #32
 80033b0:	bf0c      	ite	eq
 80033b2:	2301      	moveq	r3, #1
 80033b4:	2300      	movne	r3, #0
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	2b10      	cmp	r3, #16
 80033c6:	bf0c      	ite	eq
 80033c8:	2301      	moveq	r3, #1
 80033ca:	2300      	movne	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80033d0:	7ffb      	ldrb	r3, [r7, #31]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d102      	bne.n	80033dc <HAL_I2C_IsDeviceReady+0x12c>
 80033d6:	7fbb      	ldrb	r3, [r7, #30]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0c4      	beq.n	8003366 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b10      	cmp	r3, #16
 80033e8:	d01a      	beq.n	8003420 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2200      	movs	r2, #0
 80033f2:	2120      	movs	r1, #32
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 f886 	bl	8003506 <I2C_WaitOnFlagUntilTimeout>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e058      	b.n	80034b6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2220      	movs	r2, #32
 800340a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	e04a      	b.n	80034b6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	2200      	movs	r2, #0
 8003428:	2120      	movs	r1, #32
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 f86b 	bl	8003506 <I2C_WaitOnFlagUntilTimeout>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e03d      	b.n	80034b6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2210      	movs	r2, #16
 8003440:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2220      	movs	r2, #32
 8003448:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	429a      	cmp	r2, r3
 8003450:	d118      	bne.n	8003484 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003460:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2200      	movs	r2, #0
 800346a:	2120      	movs	r1, #32
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 f84a 	bl	8003506 <I2C_WaitOnFlagUntilTimeout>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e01c      	b.n	80034b6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2220      	movs	r2, #32
 8003482:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	3301      	adds	r3, #1
 8003488:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	429a      	cmp	r2, r3
 8003490:	f63f af3b 	bhi.w	800330a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a0:	f043 0220 	orr.w	r2, r3, #32
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80034b4:	2302      	movs	r3, #2
  }
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3720      	adds	r7, #32
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d103      	bne.n	80034dc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2200      	movs	r2, #0
 80034da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d007      	beq.n	80034fa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699a      	ldr	r2, [r3, #24]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0201 	orr.w	r2, r2, #1
 80034f8:	619a      	str	r2, [r3, #24]
  }
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b084      	sub	sp, #16
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	603b      	str	r3, [r7, #0]
 8003512:	4613      	mov	r3, r2
 8003514:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003516:	e022      	b.n	800355e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351e:	d01e      	beq.n	800355e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003520:	f7fe f868 	bl	80015f4 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d302      	bcc.n	8003536 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d113      	bne.n	800355e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	f043 0220 	orr.w	r2, r3, #32
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e00f      	b.n	800357e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699a      	ldr	r2, [r3, #24]
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4013      	ands	r3, r2
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	429a      	cmp	r2, r3
 800356c:	bf0c      	ite	eq
 800356e:	2301      	moveq	r3, #1
 8003570:	2300      	movne	r3, #0
 8003572:	b2db      	uxtb	r3, r3
 8003574:	461a      	mov	r2, r3
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	429a      	cmp	r2, r3
 800357a:	d0cd      	beq.n	8003518 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003592:	e02c      	b.n	80035ee <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	68b9      	ldr	r1, [r7, #8]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f871 	bl	8003680 <I2C_IsErrorOccurred>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e02a      	b.n	80035fe <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ae:	d01e      	beq.n	80035ee <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b0:	f7fe f820 	bl	80015f4 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d302      	bcc.n	80035c6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d113      	bne.n	80035ee <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	f043 0220 	orr.w	r2, r3, #32
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2220      	movs	r2, #32
 80035d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e007      	b.n	80035fe <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d1cb      	bne.n	8003594 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b084      	sub	sp, #16
 800360a:	af00      	add	r7, sp, #0
 800360c:	60f8      	str	r0, [r7, #12]
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003612:	e028      	b.n	8003666 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	68b9      	ldr	r1, [r7, #8]
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 f831 	bl	8003680 <I2C_IsErrorOccurred>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e026      	b.n	8003676 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003628:	f7fd ffe4 	bl	80015f4 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	429a      	cmp	r2, r3
 8003636:	d302      	bcc.n	800363e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d113      	bne.n	8003666 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003642:	f043 0220 	orr.w	r2, r3, #32
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2220      	movs	r2, #32
 800364e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e007      	b.n	8003676 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	2b20      	cmp	r3, #32
 8003672:	d1cf      	bne.n	8003614 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08a      	sub	sp, #40	; 0x28
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800369a:	2300      	movs	r3, #0
 800369c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	f003 0310 	and.w	r3, r3, #16
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d075      	beq.n	8003798 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2210      	movs	r2, #16
 80036b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036b4:	e056      	b.n	8003764 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036bc:	d052      	beq.n	8003764 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036be:	f7fd ff99 	bl	80015f4 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d302      	bcc.n	80036d4 <I2C_IsErrorOccurred+0x54>
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d147      	bne.n	8003764 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036f6:	d12e      	bne.n	8003756 <I2C_IsErrorOccurred+0xd6>
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036fe:	d02a      	beq.n	8003756 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003700:	7cfb      	ldrb	r3, [r7, #19]
 8003702:	2b20      	cmp	r3, #32
 8003704:	d027      	beq.n	8003756 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003714:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003716:	f7fd ff6d 	bl	80015f4 <HAL_GetTick>
 800371a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800371c:	e01b      	b.n	8003756 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800371e:	f7fd ff69 	bl	80015f4 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b19      	cmp	r3, #25
 800372a:	d914      	bls.n	8003756 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003730:	f043 0220 	orr.w	r2, r3, #32
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	f003 0320 	and.w	r3, r3, #32
 8003760:	2b20      	cmp	r3, #32
 8003762:	d1dc      	bne.n	800371e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b20      	cmp	r3, #32
 8003770:	d003      	beq.n	800377a <I2C_IsErrorOccurred+0xfa>
 8003772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003776:	2b00      	cmp	r3, #0
 8003778:	d09d      	beq.n	80036b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800377a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800377e:	2b00      	cmp	r3, #0
 8003780:	d103      	bne.n	800378a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2220      	movs	r2, #32
 8003788:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	f043 0304 	orr.w	r3, r3, #4
 8003790:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00b      	beq.n	80037c2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	f043 0301 	orr.w	r3, r3, #1
 80037b0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00b      	beq.n	80037e4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	f043 0308 	orr.w	r3, r3, #8
 80037d2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00b      	beq.n	8003806 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	f043 0302 	orr.w	r3, r3, #2
 80037f4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003806:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800380a:	2b00      	cmp	r3, #0
 800380c:	d01c      	beq.n	8003848 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f7ff fe55 	bl	80034be <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6859      	ldr	r1, [r3, #4]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <I2C_IsErrorOccurred+0x1d4>)
 8003820:	400b      	ands	r3, r1
 8003822:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	431a      	orrs	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800384c:	4618      	mov	r0, r3
 800384e:	3728      	adds	r7, #40	; 0x28
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	fe00e800 	.word	0xfe00e800

08003858 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	607b      	str	r3, [r7, #4]
 8003862:	460b      	mov	r3, r1
 8003864:	817b      	strh	r3, [r7, #10]
 8003866:	4613      	mov	r3, r2
 8003868:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800386a:	897b      	ldrh	r3, [r7, #10]
 800386c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003870:	7a7b      	ldrb	r3, [r7, #9]
 8003872:	041b      	lsls	r3, r3, #16
 8003874:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003878:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	4313      	orrs	r3, r2
 8003882:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003886:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	0d5b      	lsrs	r3, r3, #21
 8003892:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003896:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <I2C_TransferConfig+0x60>)
 8003898:	430b      	orrs	r3, r1
 800389a:	43db      	mvns	r3, r3
 800389c:	ea02 0103 	and.w	r1, r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038aa:	bf00      	nop
 80038ac:	371c      	adds	r7, #28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	03ff63ff 	.word	0x03ff63ff

080038bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	d138      	bne.n	8003944 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038dc:	2302      	movs	r3, #2
 80038de:	e032      	b.n	8003946 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2224      	movs	r2, #36	; 0x24
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0201 	bic.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800390e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6819      	ldr	r1, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0201 	orr.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	e000      	b.n	8003946 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003944:	2302      	movs	r3, #2
  }
}
 8003946:	4618      	mov	r0, r3
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003952:	b480      	push	{r7}
 8003954:	b085      	sub	sp, #20
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
 800395a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b20      	cmp	r3, #32
 8003966:	d139      	bne.n	80039dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003972:	2302      	movs	r3, #2
 8003974:	e033      	b.n	80039de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2224      	movs	r2, #36	; 0x24
 8003982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0201 	bic.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	021b      	lsls	r3, r3, #8
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	e000      	b.n	80039de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039dc:	2302      	movs	r3, #2
  }
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
	...

080039ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80039f0:	4b04      	ldr	r3, [pc, #16]	; (8003a04 <HAL_PWREx_GetVoltageRange+0x18>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40007000 	.word	0x40007000

08003a08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a16:	d130      	bne.n	8003a7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a18:	4b23      	ldr	r3, [pc, #140]	; (8003aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a24:	d038      	beq.n	8003a98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a26:	4b20      	ldr	r3, [pc, #128]	; (8003aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a2e:	4a1e      	ldr	r2, [pc, #120]	; (8003aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a36:	4b1d      	ldr	r3, [pc, #116]	; (8003aac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2232      	movs	r2, #50	; 0x32
 8003a3c:	fb02 f303 	mul.w	r3, r2, r3
 8003a40:	4a1b      	ldr	r2, [pc, #108]	; (8003ab0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	0c9b      	lsrs	r3, r3, #18
 8003a48:	3301      	adds	r3, #1
 8003a4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a4c:	e002      	b.n	8003a54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	3b01      	subs	r3, #1
 8003a52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a54:	4b14      	ldr	r3, [pc, #80]	; (8003aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a60:	d102      	bne.n	8003a68 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1f2      	bne.n	8003a4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a68:	4b0f      	ldr	r3, [pc, #60]	; (8003aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a74:	d110      	bne.n	8003a98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e00f      	b.n	8003a9a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a7a:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a86:	d007      	beq.n	8003a98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a88:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a90:	4a05      	ldr	r2, [pc, #20]	; (8003aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a96:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40007000 	.word	0x40007000
 8003aac:	2000000c 	.word	0x2000000c
 8003ab0:	431bde83 	.word	0x431bde83

08003ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e3d8      	b.n	8004278 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ac6:	4b97      	ldr	r3, [pc, #604]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 030c 	and.w	r3, r3, #12
 8003ace:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ad0:	4b94      	ldr	r3, [pc, #592]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f003 0303 	and.w	r3, r3, #3
 8003ad8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0310 	and.w	r3, r3, #16
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 80e4 	beq.w	8003cb0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d007      	beq.n	8003afe <HAL_RCC_OscConfig+0x4a>
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	2b0c      	cmp	r3, #12
 8003af2:	f040 808b 	bne.w	8003c0c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	f040 8087 	bne.w	8003c0c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003afe:	4b89      	ldr	r3, [pc, #548]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_RCC_OscConfig+0x62>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e3b0      	b.n	8004278 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1a      	ldr	r2, [r3, #32]
 8003b1a:	4b82      	ldr	r3, [pc, #520]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d004      	beq.n	8003b30 <HAL_RCC_OscConfig+0x7c>
 8003b26:	4b7f      	ldr	r3, [pc, #508]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b2e:	e005      	b.n	8003b3c <HAL_RCC_OscConfig+0x88>
 8003b30:	4b7c      	ldr	r3, [pc, #496]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b36:	091b      	lsrs	r3, r3, #4
 8003b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d223      	bcs.n	8003b88 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fd43 	bl	80045d0 <RCC_SetFlashLatencyFromMSIRange>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e391      	b.n	8004278 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b54:	4b73      	ldr	r3, [pc, #460]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a72      	ldr	r2, [pc, #456]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003b5a:	f043 0308 	orr.w	r3, r3, #8
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	4b70      	ldr	r3, [pc, #448]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	496d      	ldr	r1, [pc, #436]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b72:	4b6c      	ldr	r3, [pc, #432]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	021b      	lsls	r3, r3, #8
 8003b80:	4968      	ldr	r1, [pc, #416]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	604b      	str	r3, [r1, #4]
 8003b86:	e025      	b.n	8003bd4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b88:	4b66      	ldr	r3, [pc, #408]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a65      	ldr	r2, [pc, #404]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003b8e:	f043 0308 	orr.w	r3, r3, #8
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	4b63      	ldr	r3, [pc, #396]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	4960      	ldr	r1, [pc, #384]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ba6:	4b5f      	ldr	r3, [pc, #380]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	021b      	lsls	r3, r3, #8
 8003bb4:	495b      	ldr	r1, [pc, #364]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d109      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 fd03 	bl	80045d0 <RCC_SetFlashLatencyFromMSIRange>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e351      	b.n	8004278 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bd4:	f000 fc38 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	4b52      	ldr	r3, [pc, #328]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	091b      	lsrs	r3, r3, #4
 8003be0:	f003 030f 	and.w	r3, r3, #15
 8003be4:	4950      	ldr	r1, [pc, #320]	; (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003be6:	5ccb      	ldrb	r3, [r1, r3]
 8003be8:	f003 031f 	and.w	r3, r3, #31
 8003bec:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf0:	4a4e      	ldr	r2, [pc, #312]	; (8003d2c <HAL_RCC_OscConfig+0x278>)
 8003bf2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003bf4:	4b4e      	ldr	r3, [pc, #312]	; (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fd fcab 	bl	8001554 <HAL_InitTick>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c02:	7bfb      	ldrb	r3, [r7, #15]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d052      	beq.n	8003cae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
 8003c0a:	e335      	b.n	8004278 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d032      	beq.n	8003c7a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c14:	4b43      	ldr	r3, [pc, #268]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a42      	ldr	r2, [pc, #264]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003c1a:	f043 0301 	orr.w	r3, r3, #1
 8003c1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c20:	f7fd fce8 	bl	80015f4 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c28:	f7fd fce4 	bl	80015f4 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e31e      	b.n	8004278 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c3a:	4b3a      	ldr	r3, [pc, #232]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0f0      	beq.n	8003c28 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c46:	4b37      	ldr	r3, [pc, #220]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a36      	ldr	r2, [pc, #216]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003c4c:	f043 0308 	orr.w	r3, r3, #8
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	4b34      	ldr	r3, [pc, #208]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	4931      	ldr	r1, [pc, #196]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c64:	4b2f      	ldr	r3, [pc, #188]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	021b      	lsls	r3, r3, #8
 8003c72:	492c      	ldr	r1, [pc, #176]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	604b      	str	r3, [r1, #4]
 8003c78:	e01a      	b.n	8003cb0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c7a:	4b2a      	ldr	r3, [pc, #168]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a29      	ldr	r2, [pc, #164]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003c80:	f023 0301 	bic.w	r3, r3, #1
 8003c84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c86:	f7fd fcb5 	bl	80015f4 <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c8e:	f7fd fcb1 	bl	80015f4 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e2eb      	b.n	8004278 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ca0:	4b20      	ldr	r3, [pc, #128]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1f0      	bne.n	8003c8e <HAL_RCC_OscConfig+0x1da>
 8003cac:	e000      	b.n	8003cb0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d074      	beq.n	8003da6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d005      	beq.n	8003cce <HAL_RCC_OscConfig+0x21a>
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	2b0c      	cmp	r3, #12
 8003cc6:	d10e      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d10b      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cce:	4b15      	ldr	r3, [pc, #84]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d064      	beq.n	8003da4 <HAL_RCC_OscConfig+0x2f0>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d160      	bne.n	8003da4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e2c8      	b.n	8004278 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cee:	d106      	bne.n	8003cfe <HAL_RCC_OscConfig+0x24a>
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a0b      	ldr	r2, [pc, #44]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cfa:	6013      	str	r3, [r2, #0]
 8003cfc:	e026      	b.n	8003d4c <HAL_RCC_OscConfig+0x298>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d06:	d115      	bne.n	8003d34 <HAL_RCC_OscConfig+0x280>
 8003d08:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a05      	ldr	r2, [pc, #20]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003d0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	4b03      	ldr	r3, [pc, #12]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a02      	ldr	r2, [pc, #8]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	e014      	b.n	8003d4c <HAL_RCC_OscConfig+0x298>
 8003d22:	bf00      	nop
 8003d24:	40021000 	.word	0x40021000
 8003d28:	08007180 	.word	0x08007180
 8003d2c:	2000000c 	.word	0x2000000c
 8003d30:	20000010 	.word	0x20000010
 8003d34:	4ba0      	ldr	r3, [pc, #640]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a9f      	ldr	r2, [pc, #636]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	4b9d      	ldr	r3, [pc, #628]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a9c      	ldr	r2, [pc, #624]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d013      	beq.n	8003d7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d54:	f7fd fc4e 	bl	80015f4 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d5c:	f7fd fc4a 	bl	80015f4 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b64      	cmp	r3, #100	; 0x64
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e284      	b.n	8004278 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d6e:	4b92      	ldr	r3, [pc, #584]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0f0      	beq.n	8003d5c <HAL_RCC_OscConfig+0x2a8>
 8003d7a:	e014      	b.n	8003da6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7c:	f7fd fc3a 	bl	80015f4 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d84:	f7fd fc36 	bl	80015f4 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b64      	cmp	r3, #100	; 0x64
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e270      	b.n	8004278 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d96:	4b88      	ldr	r3, [pc, #544]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f0      	bne.n	8003d84 <HAL_RCC_OscConfig+0x2d0>
 8003da2:	e000      	b.n	8003da6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d060      	beq.n	8003e74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d005      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x310>
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2b0c      	cmp	r3, #12
 8003dbc:	d119      	bne.n	8003df2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d116      	bne.n	8003df2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dc4:	4b7c      	ldr	r3, [pc, #496]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_RCC_OscConfig+0x328>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e24d      	b.n	8004278 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ddc:	4b76      	ldr	r3, [pc, #472]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	061b      	lsls	r3, r3, #24
 8003dea:	4973      	ldr	r1, [pc, #460]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003df0:	e040      	b.n	8003e74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d023      	beq.n	8003e42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dfa:	4b6f      	ldr	r3, [pc, #444]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a6e      	ldr	r2, [pc, #440]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e06:	f7fd fbf5 	bl	80015f4 <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e0e:	f7fd fbf1 	bl	80015f4 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e22b      	b.n	8004278 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e20:	4b65      	ldr	r3, [pc, #404]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0f0      	beq.n	8003e0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e2c:	4b62      	ldr	r3, [pc, #392]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	061b      	lsls	r3, r3, #24
 8003e3a:	495f      	ldr	r1, [pc, #380]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	604b      	str	r3, [r1, #4]
 8003e40:	e018      	b.n	8003e74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e42:	4b5d      	ldr	r3, [pc, #372]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a5c      	ldr	r2, [pc, #368]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4e:	f7fd fbd1 	bl	80015f4 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e56:	f7fd fbcd 	bl	80015f4 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e207      	b.n	8004278 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e68:	4b53      	ldr	r3, [pc, #332]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f0      	bne.n	8003e56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d03c      	beq.n	8003efa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d01c      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e88:	4b4b      	ldr	r3, [pc, #300]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8e:	4a4a      	ldr	r2, [pc, #296]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e98:	f7fd fbac 	bl	80015f4 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ea0:	f7fd fba8 	bl	80015f4 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e1e2      	b.n	8004278 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eb2:	4b41      	ldr	r3, [pc, #260]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0ef      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x3ec>
 8003ec0:	e01b      	b.n	8003efa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ec2:	4b3d      	ldr	r3, [pc, #244]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ec8:	4a3b      	ldr	r2, [pc, #236]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003eca:	f023 0301 	bic.w	r3, r3, #1
 8003ece:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed2:	f7fd fb8f 	bl	80015f4 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eda:	f7fd fb8b 	bl	80015f4 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e1c5      	b.n	8004278 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003eec:	4b32      	ldr	r3, [pc, #200]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1ef      	bne.n	8003eda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 80a6 	beq.w	8004054 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f0c:	4b2a      	ldr	r3, [pc, #168]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10d      	bne.n	8003f34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f18:	4b27      	ldr	r3, [pc, #156]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1c:	4a26      	ldr	r2, [pc, #152]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f22:	6593      	str	r3, [r2, #88]	; 0x58
 8003f24:	4b24      	ldr	r3, [pc, #144]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f30:	2301      	movs	r3, #1
 8003f32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f34:	4b21      	ldr	r3, [pc, #132]	; (8003fbc <HAL_RCC_OscConfig+0x508>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d118      	bne.n	8003f72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f40:	4b1e      	ldr	r3, [pc, #120]	; (8003fbc <HAL_RCC_OscConfig+0x508>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a1d      	ldr	r2, [pc, #116]	; (8003fbc <HAL_RCC_OscConfig+0x508>)
 8003f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f4c:	f7fd fb52 	bl	80015f4 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f54:	f7fd fb4e 	bl	80015f4 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e188      	b.n	8004278 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f66:	4b15      	ldr	r3, [pc, #84]	; (8003fbc <HAL_RCC_OscConfig+0x508>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d108      	bne.n	8003f8c <HAL_RCC_OscConfig+0x4d8>
 8003f7a:	4b0f      	ldr	r3, [pc, #60]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f80:	4a0d      	ldr	r2, [pc, #52]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f8a:	e029      	b.n	8003fe0 <HAL_RCC_OscConfig+0x52c>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b05      	cmp	r3, #5
 8003f92:	d115      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x50c>
 8003f94:	4b08      	ldr	r3, [pc, #32]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9a:	4a07      	ldr	r2, [pc, #28]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003f9c:	f043 0304 	orr.w	r3, r3, #4
 8003fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fa4:	4b04      	ldr	r3, [pc, #16]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003faa:	4a03      	ldr	r2, [pc, #12]	; (8003fb8 <HAL_RCC_OscConfig+0x504>)
 8003fac:	f043 0301 	orr.w	r3, r3, #1
 8003fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fb4:	e014      	b.n	8003fe0 <HAL_RCC_OscConfig+0x52c>
 8003fb6:	bf00      	nop
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	40007000 	.word	0x40007000
 8003fc0:	4b91      	ldr	r3, [pc, #580]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc6:	4a90      	ldr	r2, [pc, #576]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 8003fc8:	f023 0301 	bic.w	r3, r3, #1
 8003fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fd0:	4b8d      	ldr	r3, [pc, #564]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd6:	4a8c      	ldr	r2, [pc, #560]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 8003fd8:	f023 0304 	bic.w	r3, r3, #4
 8003fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d016      	beq.n	8004016 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe8:	f7fd fb04 	bl	80015f4 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fee:	e00a      	b.n	8004006 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff0:	f7fd fb00 	bl	80015f4 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e138      	b.n	8004278 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004006:	4b80      	ldr	r3, [pc, #512]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 8004008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0ed      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x53c>
 8004014:	e015      	b.n	8004042 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004016:	f7fd faed 	bl	80015f4 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800401c:	e00a      	b.n	8004034 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401e:	f7fd fae9 	bl	80015f4 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	f241 3288 	movw	r2, #5000	; 0x1388
 800402c:	4293      	cmp	r3, r2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e121      	b.n	8004278 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004034:	4b74      	ldr	r3, [pc, #464]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1ed      	bne.n	800401e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004042:	7ffb      	ldrb	r3, [r7, #31]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d105      	bne.n	8004054 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004048:	4b6f      	ldr	r3, [pc, #444]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 800404a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404c:	4a6e      	ldr	r2, [pc, #440]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 800404e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004052:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 810c 	beq.w	8004276 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004062:	2b02      	cmp	r3, #2
 8004064:	f040 80d4 	bne.w	8004210 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004068:	4b67      	ldr	r3, [pc, #412]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f003 0203 	and.w	r2, r3, #3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	429a      	cmp	r2, r3
 800407a:	d130      	bne.n	80040de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	3b01      	subs	r3, #1
 8004088:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800408a:	429a      	cmp	r2, r3
 800408c:	d127      	bne.n	80040de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004098:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800409a:	429a      	cmp	r2, r3
 800409c:	d11f      	bne.n	80040de <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040a8:	2a07      	cmp	r2, #7
 80040aa:	bf14      	ite	ne
 80040ac:	2201      	movne	r2, #1
 80040ae:	2200      	moveq	r2, #0
 80040b0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d113      	bne.n	80040de <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c0:	085b      	lsrs	r3, r3, #1
 80040c2:	3b01      	subs	r3, #1
 80040c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d109      	bne.n	80040de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d4:	085b      	lsrs	r3, r3, #1
 80040d6:	3b01      	subs	r3, #1
 80040d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040da:	429a      	cmp	r2, r3
 80040dc:	d06e      	beq.n	80041bc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	2b0c      	cmp	r3, #12
 80040e2:	d069      	beq.n	80041b8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80040e4:	4b48      	ldr	r3, [pc, #288]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d105      	bne.n	80040fc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80040f0:	4b45      	ldr	r3, [pc, #276]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e0bb      	b.n	8004278 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004100:	4b41      	ldr	r3, [pc, #260]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a40      	ldr	r2, [pc, #256]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 8004106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800410a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800410c:	f7fd fa72 	bl	80015f4 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004114:	f7fd fa6e 	bl	80015f4 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e0a8      	b.n	8004278 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004126:	4b38      	ldr	r3, [pc, #224]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004132:	4b35      	ldr	r3, [pc, #212]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	4b35      	ldr	r3, [pc, #212]	; (800420c <HAL_RCC_OscConfig+0x758>)
 8004138:	4013      	ands	r3, r2
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004142:	3a01      	subs	r2, #1
 8004144:	0112      	lsls	r2, r2, #4
 8004146:	4311      	orrs	r1, r2
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800414c:	0212      	lsls	r2, r2, #8
 800414e:	4311      	orrs	r1, r2
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004154:	0852      	lsrs	r2, r2, #1
 8004156:	3a01      	subs	r2, #1
 8004158:	0552      	lsls	r2, r2, #21
 800415a:	4311      	orrs	r1, r2
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004160:	0852      	lsrs	r2, r2, #1
 8004162:	3a01      	subs	r2, #1
 8004164:	0652      	lsls	r2, r2, #25
 8004166:	4311      	orrs	r1, r2
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800416c:	0912      	lsrs	r2, r2, #4
 800416e:	0452      	lsls	r2, r2, #17
 8004170:	430a      	orrs	r2, r1
 8004172:	4925      	ldr	r1, [pc, #148]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 8004174:	4313      	orrs	r3, r2
 8004176:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004178:	4b23      	ldr	r3, [pc, #140]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a22      	ldr	r2, [pc, #136]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 800417e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004182:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004184:	4b20      	ldr	r3, [pc, #128]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	4a1f      	ldr	r2, [pc, #124]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 800418a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800418e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004190:	f7fd fa30 	bl	80015f4 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004198:	f7fd fa2c 	bl	80015f4 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e066      	b.n	8004278 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041aa:	4b17      	ldr	r3, [pc, #92]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0f0      	beq.n	8004198 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041b6:	e05e      	b.n	8004276 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e05d      	b.n	8004278 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041bc:	4b12      	ldr	r3, [pc, #72]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d156      	bne.n	8004276 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80041c8:	4b0f      	ldr	r3, [pc, #60]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a0e      	ldr	r2, [pc, #56]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 80041ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041d4:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	4a0b      	ldr	r2, [pc, #44]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 80041da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041e0:	f7fd fa08 	bl	80015f4 <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e8:	f7fd fa04 	bl	80015f4 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e03e      	b.n	8004278 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041fa:	4b03      	ldr	r3, [pc, #12]	; (8004208 <HAL_RCC_OscConfig+0x754>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0f0      	beq.n	80041e8 <HAL_RCC_OscConfig+0x734>
 8004206:	e036      	b.n	8004276 <HAL_RCC_OscConfig+0x7c2>
 8004208:	40021000 	.word	0x40021000
 800420c:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	2b0c      	cmp	r3, #12
 8004214:	d02d      	beq.n	8004272 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004216:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <HAL_RCC_OscConfig+0x7cc>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a19      	ldr	r2, [pc, #100]	; (8004280 <HAL_RCC_OscConfig+0x7cc>)
 800421c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004220:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004222:	4b17      	ldr	r3, [pc, #92]	; (8004280 <HAL_RCC_OscConfig+0x7cc>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d105      	bne.n	800423a <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800422e:	4b14      	ldr	r3, [pc, #80]	; (8004280 <HAL_RCC_OscConfig+0x7cc>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	4a13      	ldr	r2, [pc, #76]	; (8004280 <HAL_RCC_OscConfig+0x7cc>)
 8004234:	f023 0303 	bic.w	r3, r3, #3
 8004238:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800423a:	4b11      	ldr	r3, [pc, #68]	; (8004280 <HAL_RCC_OscConfig+0x7cc>)
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	4a10      	ldr	r2, [pc, #64]	; (8004280 <HAL_RCC_OscConfig+0x7cc>)
 8004240:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004248:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424a:	f7fd f9d3 	bl	80015f4 <HAL_GetTick>
 800424e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004250:	e008      	b.n	8004264 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004252:	f7fd f9cf 	bl	80015f4 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e009      	b.n	8004278 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004264:	4b06      	ldr	r3, [pc, #24]	; (8004280 <HAL_RCC_OscConfig+0x7cc>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1f0      	bne.n	8004252 <HAL_RCC_OscConfig+0x79e>
 8004270:	e001      	b.n	8004276 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3720      	adds	r7, #32
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40021000 	.word	0x40021000

08004284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e0c8      	b.n	800442a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004298:	4b66      	ldr	r3, [pc, #408]	; (8004434 <HAL_RCC_ClockConfig+0x1b0>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d910      	bls.n	80042c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a6:	4b63      	ldr	r3, [pc, #396]	; (8004434 <HAL_RCC_ClockConfig+0x1b0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f023 0207 	bic.w	r2, r3, #7
 80042ae:	4961      	ldr	r1, [pc, #388]	; (8004434 <HAL_RCC_ClockConfig+0x1b0>)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b6:	4b5f      	ldr	r3, [pc, #380]	; (8004434 <HAL_RCC_ClockConfig+0x1b0>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e0b0      	b.n	800442a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d04c      	beq.n	800436e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b03      	cmp	r3, #3
 80042da:	d107      	bne.n	80042ec <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042dc:	4b56      	ldr	r3, [pc, #344]	; (8004438 <HAL_RCC_ClockConfig+0x1b4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d121      	bne.n	800432c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e09e      	b.n	800442a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d107      	bne.n	8004304 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042f4:	4b50      	ldr	r3, [pc, #320]	; (8004438 <HAL_RCC_ClockConfig+0x1b4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d115      	bne.n	800432c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e092      	b.n	800442a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d107      	bne.n	800431c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800430c:	4b4a      	ldr	r3, [pc, #296]	; (8004438 <HAL_RCC_ClockConfig+0x1b4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d109      	bne.n	800432c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e086      	b.n	800442a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800431c:	4b46      	ldr	r3, [pc, #280]	; (8004438 <HAL_RCC_ClockConfig+0x1b4>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e07e      	b.n	800442a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800432c:	4b42      	ldr	r3, [pc, #264]	; (8004438 <HAL_RCC_ClockConfig+0x1b4>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f023 0203 	bic.w	r2, r3, #3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	493f      	ldr	r1, [pc, #252]	; (8004438 <HAL_RCC_ClockConfig+0x1b4>)
 800433a:	4313      	orrs	r3, r2
 800433c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800433e:	f7fd f959 	bl	80015f4 <HAL_GetTick>
 8004342:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004344:	e00a      	b.n	800435c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004346:	f7fd f955 	bl	80015f4 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	f241 3288 	movw	r2, #5000	; 0x1388
 8004354:	4293      	cmp	r3, r2
 8004356:	d901      	bls.n	800435c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e066      	b.n	800442a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435c:	4b36      	ldr	r3, [pc, #216]	; (8004438 <HAL_RCC_ClockConfig+0x1b4>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 020c 	and.w	r2, r3, #12
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	429a      	cmp	r2, r3
 800436c:	d1eb      	bne.n	8004346 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d008      	beq.n	800438c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800437a:	4b2f      	ldr	r3, [pc, #188]	; (8004438 <HAL_RCC_ClockConfig+0x1b4>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	492c      	ldr	r1, [pc, #176]	; (8004438 <HAL_RCC_ClockConfig+0x1b4>)
 8004388:	4313      	orrs	r3, r2
 800438a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800438c:	4b29      	ldr	r3, [pc, #164]	; (8004434 <HAL_RCC_ClockConfig+0x1b0>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d210      	bcs.n	80043bc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800439a:	4b26      	ldr	r3, [pc, #152]	; (8004434 <HAL_RCC_ClockConfig+0x1b0>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f023 0207 	bic.w	r2, r3, #7
 80043a2:	4924      	ldr	r1, [pc, #144]	; (8004434 <HAL_RCC_ClockConfig+0x1b0>)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043aa:	4b22      	ldr	r3, [pc, #136]	; (8004434 <HAL_RCC_ClockConfig+0x1b0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d001      	beq.n	80043bc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e036      	b.n	800442a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d008      	beq.n	80043da <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043c8:	4b1b      	ldr	r3, [pc, #108]	; (8004438 <HAL_RCC_ClockConfig+0x1b4>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	4918      	ldr	r1, [pc, #96]	; (8004438 <HAL_RCC_ClockConfig+0x1b4>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d009      	beq.n	80043fa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043e6:	4b14      	ldr	r3, [pc, #80]	; (8004438 <HAL_RCC_ClockConfig+0x1b4>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	4910      	ldr	r1, [pc, #64]	; (8004438 <HAL_RCC_ClockConfig+0x1b4>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043fa:	f000 f825 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 80043fe:	4602      	mov	r2, r0
 8004400:	4b0d      	ldr	r3, [pc, #52]	; (8004438 <HAL_RCC_ClockConfig+0x1b4>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	091b      	lsrs	r3, r3, #4
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	490c      	ldr	r1, [pc, #48]	; (800443c <HAL_RCC_ClockConfig+0x1b8>)
 800440c:	5ccb      	ldrb	r3, [r1, r3]
 800440e:	f003 031f 	and.w	r3, r3, #31
 8004412:	fa22 f303 	lsr.w	r3, r2, r3
 8004416:	4a0a      	ldr	r2, [pc, #40]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800441a:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <HAL_RCC_ClockConfig+0x1c0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f7fd f898 	bl	8001554 <HAL_InitTick>
 8004424:	4603      	mov	r3, r0
 8004426:	72fb      	strb	r3, [r7, #11]

  return status;
 8004428:	7afb      	ldrb	r3, [r7, #11]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40022000 	.word	0x40022000
 8004438:	40021000 	.word	0x40021000
 800443c:	08007180 	.word	0x08007180
 8004440:	2000000c 	.word	0x2000000c
 8004444:	20000010 	.word	0x20000010

08004448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004448:	b480      	push	{r7}
 800444a:	b089      	sub	sp, #36	; 0x24
 800444c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	61fb      	str	r3, [r7, #28]
 8004452:	2300      	movs	r3, #0
 8004454:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004456:	4b3e      	ldr	r3, [pc, #248]	; (8004550 <HAL_RCC_GetSysClockFreq+0x108>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 030c 	and.w	r3, r3, #12
 800445e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004460:	4b3b      	ldr	r3, [pc, #236]	; (8004550 <HAL_RCC_GetSysClockFreq+0x108>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d005      	beq.n	800447c <HAL_RCC_GetSysClockFreq+0x34>
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	2b0c      	cmp	r3, #12
 8004474:	d121      	bne.n	80044ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d11e      	bne.n	80044ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800447c:	4b34      	ldr	r3, [pc, #208]	; (8004550 <HAL_RCC_GetSysClockFreq+0x108>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0308 	and.w	r3, r3, #8
 8004484:	2b00      	cmp	r3, #0
 8004486:	d107      	bne.n	8004498 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004488:	4b31      	ldr	r3, [pc, #196]	; (8004550 <HAL_RCC_GetSysClockFreq+0x108>)
 800448a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800448e:	0a1b      	lsrs	r3, r3, #8
 8004490:	f003 030f 	and.w	r3, r3, #15
 8004494:	61fb      	str	r3, [r7, #28]
 8004496:	e005      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004498:	4b2d      	ldr	r3, [pc, #180]	; (8004550 <HAL_RCC_GetSysClockFreq+0x108>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	091b      	lsrs	r3, r3, #4
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80044a4:	4a2b      	ldr	r2, [pc, #172]	; (8004554 <HAL_RCC_GetSysClockFreq+0x10c>)
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10d      	bne.n	80044d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044b8:	e00a      	b.n	80044d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d102      	bne.n	80044c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044c0:	4b25      	ldr	r3, [pc, #148]	; (8004558 <HAL_RCC_GetSysClockFreq+0x110>)
 80044c2:	61bb      	str	r3, [r7, #24]
 80044c4:	e004      	b.n	80044d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d101      	bne.n	80044d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044cc:	4b23      	ldr	r3, [pc, #140]	; (800455c <HAL_RCC_GetSysClockFreq+0x114>)
 80044ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	2b0c      	cmp	r3, #12
 80044d4:	d134      	bne.n	8004540 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044d6:	4b1e      	ldr	r3, [pc, #120]	; (8004550 <HAL_RCC_GetSysClockFreq+0x108>)
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d003      	beq.n	80044ee <HAL_RCC_GetSysClockFreq+0xa6>
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d003      	beq.n	80044f4 <HAL_RCC_GetSysClockFreq+0xac>
 80044ec:	e005      	b.n	80044fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044ee:	4b1a      	ldr	r3, [pc, #104]	; (8004558 <HAL_RCC_GetSysClockFreq+0x110>)
 80044f0:	617b      	str	r3, [r7, #20]
      break;
 80044f2:	e005      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044f4:	4b19      	ldr	r3, [pc, #100]	; (800455c <HAL_RCC_GetSysClockFreq+0x114>)
 80044f6:	617b      	str	r3, [r7, #20]
      break;
 80044f8:	e002      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	617b      	str	r3, [r7, #20]
      break;
 80044fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004500:	4b13      	ldr	r3, [pc, #76]	; (8004550 <HAL_RCC_GetSysClockFreq+0x108>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	091b      	lsrs	r3, r3, #4
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	3301      	adds	r3, #1
 800450c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800450e:	4b10      	ldr	r3, [pc, #64]	; (8004550 <HAL_RCC_GetSysClockFreq+0x108>)
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	0a1b      	lsrs	r3, r3, #8
 8004514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	fb03 f202 	mul.w	r2, r3, r2
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	fbb2 f3f3 	udiv	r3, r2, r3
 8004524:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <HAL_RCC_GetSysClockFreq+0x108>)
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	0e5b      	lsrs	r3, r3, #25
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	3301      	adds	r3, #1
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	fbb2 f3f3 	udiv	r3, r2, r3
 800453e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004540:	69bb      	ldr	r3, [r7, #24]
}
 8004542:	4618      	mov	r0, r3
 8004544:	3724      	adds	r7, #36	; 0x24
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40021000 	.word	0x40021000
 8004554:	08007198 	.word	0x08007198
 8004558:	00f42400 	.word	0x00f42400
 800455c:	007a1200 	.word	0x007a1200

08004560 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004564:	4b03      	ldr	r3, [pc, #12]	; (8004574 <HAL_RCC_GetHCLKFreq+0x14>)
 8004566:	681b      	ldr	r3, [r3, #0]
}
 8004568:	4618      	mov	r0, r3
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	2000000c 	.word	0x2000000c

08004578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800457c:	f7ff fff0 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 8004580:	4602      	mov	r2, r0
 8004582:	4b06      	ldr	r3, [pc, #24]	; (800459c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	0a1b      	lsrs	r3, r3, #8
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	4904      	ldr	r1, [pc, #16]	; (80045a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800458e:	5ccb      	ldrb	r3, [r1, r3]
 8004590:	f003 031f 	and.w	r3, r3, #31
 8004594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004598:	4618      	mov	r0, r3
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40021000 	.word	0x40021000
 80045a0:	08007190 	.word	0x08007190

080045a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80045a8:	f7ff ffda 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 80045ac:	4602      	mov	r2, r0
 80045ae:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	0adb      	lsrs	r3, r3, #11
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	4904      	ldr	r1, [pc, #16]	; (80045cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80045ba:	5ccb      	ldrb	r3, [r1, r3]
 80045bc:	f003 031f 	and.w	r3, r3, #31
 80045c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40021000 	.word	0x40021000
 80045cc:	08007190 	.word	0x08007190

080045d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045d8:	2300      	movs	r3, #0
 80045da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045dc:	4b2a      	ldr	r3, [pc, #168]	; (8004688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045e8:	f7ff fa00 	bl	80039ec <HAL_PWREx_GetVoltageRange>
 80045ec:	6178      	str	r0, [r7, #20]
 80045ee:	e014      	b.n	800461a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045f0:	4b25      	ldr	r3, [pc, #148]	; (8004688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f4:	4a24      	ldr	r2, [pc, #144]	; (8004688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fa:	6593      	str	r3, [r2, #88]	; 0x58
 80045fc:	4b22      	ldr	r3, [pc, #136]	; (8004688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004604:	60fb      	str	r3, [r7, #12]
 8004606:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004608:	f7ff f9f0 	bl	80039ec <HAL_PWREx_GetVoltageRange>
 800460c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800460e:	4b1e      	ldr	r3, [pc, #120]	; (8004688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004612:	4a1d      	ldr	r2, [pc, #116]	; (8004688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004618:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004620:	d10b      	bne.n	800463a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b80      	cmp	r3, #128	; 0x80
 8004626:	d919      	bls.n	800465c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2ba0      	cmp	r3, #160	; 0xa0
 800462c:	d902      	bls.n	8004634 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800462e:	2302      	movs	r3, #2
 8004630:	613b      	str	r3, [r7, #16]
 8004632:	e013      	b.n	800465c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004634:	2301      	movs	r3, #1
 8004636:	613b      	str	r3, [r7, #16]
 8004638:	e010      	b.n	800465c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b80      	cmp	r3, #128	; 0x80
 800463e:	d902      	bls.n	8004646 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004640:	2303      	movs	r3, #3
 8004642:	613b      	str	r3, [r7, #16]
 8004644:	e00a      	b.n	800465c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b80      	cmp	r3, #128	; 0x80
 800464a:	d102      	bne.n	8004652 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800464c:	2302      	movs	r3, #2
 800464e:	613b      	str	r3, [r7, #16]
 8004650:	e004      	b.n	800465c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b70      	cmp	r3, #112	; 0x70
 8004656:	d101      	bne.n	800465c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004658:	2301      	movs	r3, #1
 800465a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f023 0207 	bic.w	r2, r3, #7
 8004664:	4909      	ldr	r1, [pc, #36]	; (800468c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	4313      	orrs	r3, r2
 800466a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800466c:	4b07      	ldr	r3, [pc, #28]	; (800468c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	429a      	cmp	r2, r3
 8004678:	d001      	beq.n	800467e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40021000 	.word	0x40021000
 800468c:	40022000 	.word	0x40022000

08004690 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004698:	2300      	movs	r3, #0
 800469a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800469c:	2300      	movs	r3, #0
 800469e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d041      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046b4:	d02a      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80046b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046ba:	d824      	bhi.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046c0:	d008      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80046c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046c6:	d81e      	bhi.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00a      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80046cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046d0:	d010      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046d2:	e018      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046d4:	4b86      	ldr	r3, [pc, #536]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	4a85      	ldr	r2, [pc, #532]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046e0:	e015      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	3304      	adds	r3, #4
 80046e6:	2100      	movs	r1, #0
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 fabb 	bl	8004c64 <RCCEx_PLLSAI1_Config>
 80046ee:	4603      	mov	r3, r0
 80046f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046f2:	e00c      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3320      	adds	r3, #32
 80046f8:	2100      	movs	r1, #0
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fba6 	bl	8004e4c <RCCEx_PLLSAI2_Config>
 8004700:	4603      	mov	r3, r0
 8004702:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004704:	e003      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	74fb      	strb	r3, [r7, #19]
      break;
 800470a:	e000      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800470c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800470e:	7cfb      	ldrb	r3, [r7, #19]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10b      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004714:	4b76      	ldr	r3, [pc, #472]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004722:	4973      	ldr	r1, [pc, #460]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004724:	4313      	orrs	r3, r2
 8004726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800472a:	e001      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800472c:	7cfb      	ldrb	r3, [r7, #19]
 800472e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d041      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004740:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004744:	d02a      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004746:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800474a:	d824      	bhi.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800474c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004750:	d008      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004752:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004756:	d81e      	bhi.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00a      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800475c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004760:	d010      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004762:	e018      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004764:	4b62      	ldr	r3, [pc, #392]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	4a61      	ldr	r2, [pc, #388]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800476a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800476e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004770:	e015      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	3304      	adds	r3, #4
 8004776:	2100      	movs	r1, #0
 8004778:	4618      	mov	r0, r3
 800477a:	f000 fa73 	bl	8004c64 <RCCEx_PLLSAI1_Config>
 800477e:	4603      	mov	r3, r0
 8004780:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004782:	e00c      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3320      	adds	r3, #32
 8004788:	2100      	movs	r1, #0
 800478a:	4618      	mov	r0, r3
 800478c:	f000 fb5e 	bl	8004e4c <RCCEx_PLLSAI2_Config>
 8004790:	4603      	mov	r3, r0
 8004792:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004794:	e003      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	74fb      	strb	r3, [r7, #19]
      break;
 800479a:	e000      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800479c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800479e:	7cfb      	ldrb	r3, [r7, #19]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10b      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047a4:	4b52      	ldr	r3, [pc, #328]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047b2:	494f      	ldr	r1, [pc, #316]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80047ba:	e001      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047bc:	7cfb      	ldrb	r3, [r7, #19]
 80047be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 80a0 	beq.w	800490e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ce:	2300      	movs	r3, #0
 80047d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047d2:	4b47      	ldr	r3, [pc, #284]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80047e2:	2300      	movs	r3, #0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00d      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047e8:	4b41      	ldr	r3, [pc, #260]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ec:	4a40      	ldr	r2, [pc, #256]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f2:	6593      	str	r3, [r2, #88]	; 0x58
 80047f4:	4b3e      	ldr	r3, [pc, #248]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fc:	60bb      	str	r3, [r7, #8]
 80047fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004800:	2301      	movs	r3, #1
 8004802:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004804:	4b3b      	ldr	r3, [pc, #236]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a3a      	ldr	r2, [pc, #232]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800480a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800480e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004810:	f7fc fef0 	bl	80015f4 <HAL_GetTick>
 8004814:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004816:	e009      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004818:	f7fc feec 	bl	80015f4 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d902      	bls.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	74fb      	strb	r3, [r7, #19]
        break;
 800482a:	e005      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800482c:	4b31      	ldr	r3, [pc, #196]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0ef      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004838:	7cfb      	ldrb	r3, [r7, #19]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d15c      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800483e:	4b2c      	ldr	r3, [pc, #176]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004844:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004848:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01f      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	429a      	cmp	r2, r3
 800485a:	d019      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800485c:	4b24      	ldr	r3, [pc, #144]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004866:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004868:	4b21      	ldr	r3, [pc, #132]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800486a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486e:	4a20      	ldr	r2, [pc, #128]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004878:	4b1d      	ldr	r3, [pc, #116]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487e:	4a1c      	ldr	r2, [pc, #112]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004888:	4a19      	ldr	r2, [pc, #100]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d016      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489a:	f7fc feab 	bl	80015f4 <HAL_GetTick>
 800489e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048a0:	e00b      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a2:	f7fc fea7 	bl	80015f4 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d902      	bls.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	74fb      	strb	r3, [r7, #19]
            break;
 80048b8:	e006      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ba:	4b0d      	ldr	r3, [pc, #52]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0ec      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80048c8:	7cfb      	ldrb	r3, [r7, #19]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10c      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048ce:	4b08      	ldr	r3, [pc, #32]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048de:	4904      	ldr	r1, [pc, #16]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048e6:	e009      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048e8:	7cfb      	ldrb	r3, [r7, #19]
 80048ea:	74bb      	strb	r3, [r7, #18]
 80048ec:	e006      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80048ee:	bf00      	nop
 80048f0:	40021000 	.word	0x40021000
 80048f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f8:	7cfb      	ldrb	r3, [r7, #19]
 80048fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048fc:	7c7b      	ldrb	r3, [r7, #17]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d105      	bne.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004902:	4b9e      	ldr	r3, [pc, #632]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004906:	4a9d      	ldr	r2, [pc, #628]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800490c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00a      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800491a:	4b98      	ldr	r3, [pc, #608]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004920:	f023 0203 	bic.w	r2, r3, #3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004928:	4994      	ldr	r1, [pc, #592]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800492a:	4313      	orrs	r3, r2
 800492c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800493c:	4b8f      	ldr	r3, [pc, #572]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004942:	f023 020c 	bic.w	r2, r3, #12
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494a:	498c      	ldr	r1, [pc, #560]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0304 	and.w	r3, r3, #4
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00a      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800495e:	4b87      	ldr	r3, [pc, #540]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004964:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	4983      	ldr	r1, [pc, #524]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800496e:	4313      	orrs	r3, r2
 8004970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004980:	4b7e      	ldr	r3, [pc, #504]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004986:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498e:	497b      	ldr	r1, [pc, #492]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004990:	4313      	orrs	r3, r2
 8004992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0310 	and.w	r3, r3, #16
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049a2:	4b76      	ldr	r3, [pc, #472]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b0:	4972      	ldr	r1, [pc, #456]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0320 	and.w	r3, r3, #32
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049c4:	4b6d      	ldr	r3, [pc, #436]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d2:	496a      	ldr	r1, [pc, #424]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049e6:	4b65      	ldr	r3, [pc, #404]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f4:	4961      	ldr	r1, [pc, #388]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00a      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a08:	4b5c      	ldr	r3, [pc, #368]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a16:	4959      	ldr	r1, [pc, #356]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a2a:	4b54      	ldr	r3, [pc, #336]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a38:	4950      	ldr	r1, [pc, #320]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00a      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a4c:	4b4b      	ldr	r3, [pc, #300]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5a:	4948      	ldr	r1, [pc, #288]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a6e:	4b43      	ldr	r3, [pc, #268]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7c:	493f      	ldr	r1, [pc, #252]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d028      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a90:	4b3a      	ldr	r3, [pc, #232]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a9e:	4937      	ldr	r1, [pc, #220]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aae:	d106      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ab0:	4b32      	ldr	r3, [pc, #200]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	4a31      	ldr	r2, [pc, #196]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aba:	60d3      	str	r3, [r2, #12]
 8004abc:	e011      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ac2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ac6:	d10c      	bne.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3304      	adds	r3, #4
 8004acc:	2101      	movs	r1, #1
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 f8c8 	bl	8004c64 <RCCEx_PLLSAI1_Config>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ad8:	7cfb      	ldrb	r3, [r7, #19]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004ade:	7cfb      	ldrb	r3, [r7, #19]
 8004ae0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d028      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004aee:	4b23      	ldr	r3, [pc, #140]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afc:	491f      	ldr	r1, [pc, #124]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b0c:	d106      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b0e:	4b1b      	ldr	r3, [pc, #108]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	4a1a      	ldr	r2, [pc, #104]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b18:	60d3      	str	r3, [r2, #12]
 8004b1a:	e011      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b24:	d10c      	bne.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f000 f899 	bl	8004c64 <RCCEx_PLLSAI1_Config>
 8004b32:	4603      	mov	r3, r0
 8004b34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b36:	7cfb      	ldrb	r3, [r7, #19]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004b3c:	7cfb      	ldrb	r3, [r7, #19]
 8004b3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d02b      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b4c:	4b0b      	ldr	r3, [pc, #44]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b5a:	4908      	ldr	r1, [pc, #32]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b6a:	d109      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b6c:	4b03      	ldr	r3, [pc, #12]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	4a02      	ldr	r2, [pc, #8]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b76:	60d3      	str	r3, [r2, #12]
 8004b78:	e014      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004b7a:	bf00      	nop
 8004b7c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b88:	d10c      	bne.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	2101      	movs	r1, #1
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 f867 	bl	8004c64 <RCCEx_PLLSAI1_Config>
 8004b96:	4603      	mov	r3, r0
 8004b98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b9a:	7cfb      	ldrb	r3, [r7, #19]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004ba0:	7cfb      	ldrb	r3, [r7, #19]
 8004ba2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d02f      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bb0:	4b2b      	ldr	r3, [pc, #172]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bbe:	4928      	ldr	r1, [pc, #160]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bce:	d10d      	bne.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	2102      	movs	r1, #2
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 f844 	bl	8004c64 <RCCEx_PLLSAI1_Config>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004be0:	7cfb      	ldrb	r3, [r7, #19]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d014      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004be6:	7cfb      	ldrb	r3, [r7, #19]
 8004be8:	74bb      	strb	r3, [r7, #18]
 8004bea:	e011      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bf4:	d10c      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	3320      	adds	r3, #32
 8004bfa:	2102      	movs	r1, #2
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 f925 	bl	8004e4c <RCCEx_PLLSAI2_Config>
 8004c02:	4603      	mov	r3, r0
 8004c04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c06:	7cfb      	ldrb	r3, [r7, #19]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c0c:	7cfb      	ldrb	r3, [r7, #19]
 8004c0e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00a      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c1c:	4b10      	ldr	r3, [pc, #64]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c22:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c2a:	490d      	ldr	r1, [pc, #52]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00b      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c3e:	4b08      	ldr	r3, [pc, #32]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c4e:	4904      	ldr	r1, [pc, #16]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c56:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40021000 	.word	0x40021000

08004c64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c72:	4b75      	ldr	r3, [pc, #468]	; (8004e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d018      	beq.n	8004cb0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c7e:	4b72      	ldr	r3, [pc, #456]	; (8004e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f003 0203 	and.w	r2, r3, #3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d10d      	bne.n	8004caa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
       ||
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d009      	beq.n	8004caa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c96:	4b6c      	ldr	r3, [pc, #432]	; (8004e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	091b      	lsrs	r3, r3, #4
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
       ||
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d047      	beq.n	8004d3a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	73fb      	strb	r3, [r7, #15]
 8004cae:	e044      	b.n	8004d3a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2b03      	cmp	r3, #3
 8004cb6:	d018      	beq.n	8004cea <RCCEx_PLLSAI1_Config+0x86>
 8004cb8:	2b03      	cmp	r3, #3
 8004cba:	d825      	bhi.n	8004d08 <RCCEx_PLLSAI1_Config+0xa4>
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d002      	beq.n	8004cc6 <RCCEx_PLLSAI1_Config+0x62>
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d009      	beq.n	8004cd8 <RCCEx_PLLSAI1_Config+0x74>
 8004cc4:	e020      	b.n	8004d08 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cc6:	4b60      	ldr	r3, [pc, #384]	; (8004e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d11d      	bne.n	8004d0e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cd6:	e01a      	b.n	8004d0e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cd8:	4b5b      	ldr	r3, [pc, #364]	; (8004e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d116      	bne.n	8004d12 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ce8:	e013      	b.n	8004d12 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cea:	4b57      	ldr	r3, [pc, #348]	; (8004e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10f      	bne.n	8004d16 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cf6:	4b54      	ldr	r3, [pc, #336]	; (8004e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d109      	bne.n	8004d16 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d06:	e006      	b.n	8004d16 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d0c:	e004      	b.n	8004d18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d0e:	bf00      	nop
 8004d10:	e002      	b.n	8004d18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d12:	bf00      	nop
 8004d14:	e000      	b.n	8004d18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d16:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10d      	bne.n	8004d3a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d1e:	4b4a      	ldr	r3, [pc, #296]	; (8004e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6819      	ldr	r1, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	430b      	orrs	r3, r1
 8004d34:	4944      	ldr	r1, [pc, #272]	; (8004e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d17d      	bne.n	8004e3c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d40:	4b41      	ldr	r3, [pc, #260]	; (8004e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a40      	ldr	r2, [pc, #256]	; (8004e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d4c:	f7fc fc52 	bl	80015f4 <HAL_GetTick>
 8004d50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d52:	e009      	b.n	8004d68 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d54:	f7fc fc4e 	bl	80015f4 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d902      	bls.n	8004d68 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	73fb      	strb	r3, [r7, #15]
        break;
 8004d66:	e005      	b.n	8004d74 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d68:	4b37      	ldr	r3, [pc, #220]	; (8004e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1ef      	bne.n	8004d54 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d160      	bne.n	8004e3c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d111      	bne.n	8004da4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d80:	4b31      	ldr	r3, [pc, #196]	; (8004e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6892      	ldr	r2, [r2, #8]
 8004d90:	0211      	lsls	r1, r2, #8
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	68d2      	ldr	r2, [r2, #12]
 8004d96:	0912      	lsrs	r2, r2, #4
 8004d98:	0452      	lsls	r2, r2, #17
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	492a      	ldr	r1, [pc, #168]	; (8004e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	610b      	str	r3, [r1, #16]
 8004da2:	e027      	b.n	8004df4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d112      	bne.n	8004dd0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004daa:	4b27      	ldr	r3, [pc, #156]	; (8004e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004db2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6892      	ldr	r2, [r2, #8]
 8004dba:	0211      	lsls	r1, r2, #8
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6912      	ldr	r2, [r2, #16]
 8004dc0:	0852      	lsrs	r2, r2, #1
 8004dc2:	3a01      	subs	r2, #1
 8004dc4:	0552      	lsls	r2, r2, #21
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	491f      	ldr	r1, [pc, #124]	; (8004e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	610b      	str	r3, [r1, #16]
 8004dce:	e011      	b.n	8004df4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dd0:	4b1d      	ldr	r3, [pc, #116]	; (8004e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004dd8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6892      	ldr	r2, [r2, #8]
 8004de0:	0211      	lsls	r1, r2, #8
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6952      	ldr	r2, [r2, #20]
 8004de6:	0852      	lsrs	r2, r2, #1
 8004de8:	3a01      	subs	r2, #1
 8004dea:	0652      	lsls	r2, r2, #25
 8004dec:	430a      	orrs	r2, r1
 8004dee:	4916      	ldr	r1, [pc, #88]	; (8004e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004df4:	4b14      	ldr	r3, [pc, #80]	; (8004e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a13      	ldr	r2, [pc, #76]	; (8004e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dfa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004dfe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e00:	f7fc fbf8 	bl	80015f4 <HAL_GetTick>
 8004e04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e06:	e009      	b.n	8004e1c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e08:	f7fc fbf4 	bl	80015f4 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d902      	bls.n	8004e1c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	73fb      	strb	r3, [r7, #15]
          break;
 8004e1a:	e005      	b.n	8004e28 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e1c:	4b0a      	ldr	r3, [pc, #40]	; (8004e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0ef      	beq.n	8004e08 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e2e:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e30:	691a      	ldr	r2, [r3, #16]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	4904      	ldr	r1, [pc, #16]	; (8004e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	40021000 	.word	0x40021000

08004e4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e5a:	4b6a      	ldr	r3, [pc, #424]	; (8005004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d018      	beq.n	8004e98 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004e66:	4b67      	ldr	r3, [pc, #412]	; (8005004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f003 0203 	and.w	r2, r3, #3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d10d      	bne.n	8004e92 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
       ||
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d009      	beq.n	8004e92 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004e7e:	4b61      	ldr	r3, [pc, #388]	; (8005004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	091b      	lsrs	r3, r3, #4
 8004e84:	f003 0307 	and.w	r3, r3, #7
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
       ||
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d047      	beq.n	8004f22 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	73fb      	strb	r3, [r7, #15]
 8004e96:	e044      	b.n	8004f22 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	d018      	beq.n	8004ed2 <RCCEx_PLLSAI2_Config+0x86>
 8004ea0:	2b03      	cmp	r3, #3
 8004ea2:	d825      	bhi.n	8004ef0 <RCCEx_PLLSAI2_Config+0xa4>
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d002      	beq.n	8004eae <RCCEx_PLLSAI2_Config+0x62>
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d009      	beq.n	8004ec0 <RCCEx_PLLSAI2_Config+0x74>
 8004eac:	e020      	b.n	8004ef0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004eae:	4b55      	ldr	r3, [pc, #340]	; (8005004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d11d      	bne.n	8004ef6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ebe:	e01a      	b.n	8004ef6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ec0:	4b50      	ldr	r3, [pc, #320]	; (8005004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d116      	bne.n	8004efa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ed0:	e013      	b.n	8004efa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ed2:	4b4c      	ldr	r3, [pc, #304]	; (8005004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10f      	bne.n	8004efe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ede:	4b49      	ldr	r3, [pc, #292]	; (8005004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d109      	bne.n	8004efe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004eee:	e006      	b.n	8004efe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ef4:	e004      	b.n	8004f00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ef6:	bf00      	nop
 8004ef8:	e002      	b.n	8004f00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004efa:	bf00      	nop
 8004efc:	e000      	b.n	8004f00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004efe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f00:	7bfb      	ldrb	r3, [r7, #15]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10d      	bne.n	8004f22 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f06:	4b3f      	ldr	r3, [pc, #252]	; (8005004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6819      	ldr	r1, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	011b      	lsls	r3, r3, #4
 8004f1a:	430b      	orrs	r3, r1
 8004f1c:	4939      	ldr	r1, [pc, #228]	; (8005004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d167      	bne.n	8004ff8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f28:	4b36      	ldr	r3, [pc, #216]	; (8005004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a35      	ldr	r2, [pc, #212]	; (8005004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f34:	f7fc fb5e 	bl	80015f4 <HAL_GetTick>
 8004f38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f3a:	e009      	b.n	8004f50 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f3c:	f7fc fb5a 	bl	80015f4 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d902      	bls.n	8004f50 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	73fb      	strb	r3, [r7, #15]
        break;
 8004f4e:	e005      	b.n	8004f5c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f50:	4b2c      	ldr	r3, [pc, #176]	; (8005004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1ef      	bne.n	8004f3c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d14a      	bne.n	8004ff8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d111      	bne.n	8004f8c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f68:	4b26      	ldr	r3, [pc, #152]	; (8005004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6892      	ldr	r2, [r2, #8]
 8004f78:	0211      	lsls	r1, r2, #8
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	68d2      	ldr	r2, [r2, #12]
 8004f7e:	0912      	lsrs	r2, r2, #4
 8004f80:	0452      	lsls	r2, r2, #17
 8004f82:	430a      	orrs	r2, r1
 8004f84:	491f      	ldr	r1, [pc, #124]	; (8005004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	614b      	str	r3, [r1, #20]
 8004f8a:	e011      	b.n	8004fb0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f8c:	4b1d      	ldr	r3, [pc, #116]	; (8005004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6892      	ldr	r2, [r2, #8]
 8004f9c:	0211      	lsls	r1, r2, #8
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6912      	ldr	r2, [r2, #16]
 8004fa2:	0852      	lsrs	r2, r2, #1
 8004fa4:	3a01      	subs	r2, #1
 8004fa6:	0652      	lsls	r2, r2, #25
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	4916      	ldr	r1, [pc, #88]	; (8005004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004fb0:	4b14      	ldr	r3, [pc, #80]	; (8005004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a13      	ldr	r2, [pc, #76]	; (8005004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fbc:	f7fc fb1a 	bl	80015f4 <HAL_GetTick>
 8004fc0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fc2:	e009      	b.n	8004fd8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fc4:	f7fc fb16 	bl	80015f4 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d902      	bls.n	8004fd8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	73fb      	strb	r3, [r7, #15]
          break;
 8004fd6:	e005      	b.n	8004fe4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fd8:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0ef      	beq.n	8004fc4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d106      	bne.n	8004ff8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004fea:	4b06      	ldr	r3, [pc, #24]	; (8005004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fec:	695a      	ldr	r2, [r3, #20]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	4904      	ldr	r1, [pc, #16]	; (8005004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40021000 	.word	0x40021000

08005008 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e040      	b.n	800509c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fc f952 	bl	80012d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2224      	movs	r2, #36	; 0x24
 8005034:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 0201 	bic.w	r2, r2, #1
 8005044:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f8c0 	bl	80051cc <UART_SetConfig>
 800504c:	4603      	mov	r3, r0
 800504e:	2b01      	cmp	r3, #1
 8005050:	d101      	bne.n	8005056 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e022      	b.n	800509c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fb6c 	bl	800573c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005072:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005082:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0201 	orr.w	r2, r2, #1
 8005092:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 fbf3 	bl	8005880 <UART_CheckIdleState>
 800509a:	4603      	mov	r3, r0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b08a      	sub	sp, #40	; 0x28
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	603b      	str	r3, [r7, #0]
 80050b0:	4613      	mov	r3, r2
 80050b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050b8:	2b20      	cmp	r3, #32
 80050ba:	f040 8082 	bne.w	80051c2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <HAL_UART_Transmit+0x26>
 80050c4:	88fb      	ldrh	r3, [r7, #6]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e07a      	b.n	80051c4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d101      	bne.n	80050dc <HAL_UART_Transmit+0x38>
 80050d8:	2302      	movs	r3, #2
 80050da:	e073      	b.n	80051c4 <HAL_UART_Transmit+0x120>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2221      	movs	r2, #33	; 0x21
 80050f0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050f2:	f7fc fa7f 	bl	80015f4 <HAL_GetTick>
 80050f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	88fa      	ldrh	r2, [r7, #6]
 80050fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	88fa      	ldrh	r2, [r7, #6]
 8005104:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005110:	d108      	bne.n	8005124 <HAL_UART_Transmit+0x80>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d104      	bne.n	8005124 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800511a:	2300      	movs	r3, #0
 800511c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	61bb      	str	r3, [r7, #24]
 8005122:	e003      	b.n	800512c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005128:	2300      	movs	r3, #0
 800512a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005134:	e02d      	b.n	8005192 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	2200      	movs	r2, #0
 800513e:	2180      	movs	r1, #128	; 0x80
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 fbe6 	bl	8005912 <UART_WaitOnFlagUntilTimeout>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e039      	b.n	80051c4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10b      	bne.n	800516e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	881a      	ldrh	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005162:	b292      	uxth	r2, r2
 8005164:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	3302      	adds	r3, #2
 800516a:	61bb      	str	r3, [r7, #24]
 800516c:	e008      	b.n	8005180 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	781a      	ldrb	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	b292      	uxth	r2, r2
 8005178:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	3301      	adds	r3, #1
 800517e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005186:	b29b      	uxth	r3, r3
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1cb      	bne.n	8005136 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2200      	movs	r2, #0
 80051a6:	2140      	movs	r1, #64	; 0x40
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 fbb2 	bl	8005912 <UART_WaitOnFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e005      	b.n	80051c4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2220      	movs	r2, #32
 80051bc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	e000      	b.n	80051c4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80051c2:	2302      	movs	r3, #2
  }
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3720      	adds	r7, #32
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051d0:	b08a      	sub	sp, #40	; 0x28
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	431a      	orrs	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	431a      	orrs	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	4ba4      	ldr	r3, [pc, #656]	; (800548c <UART_SetConfig+0x2c0>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	6812      	ldr	r2, [r2, #0]
 8005202:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005204:	430b      	orrs	r3, r1
 8005206:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a99      	ldr	r2, [pc, #612]	; (8005490 <UART_SetConfig+0x2c4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d004      	beq.n	8005238 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005234:	4313      	orrs	r3, r2
 8005236:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005248:	430a      	orrs	r2, r1
 800524a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a90      	ldr	r2, [pc, #576]	; (8005494 <UART_SetConfig+0x2c8>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d126      	bne.n	80052a4 <UART_SetConfig+0xd8>
 8005256:	4b90      	ldr	r3, [pc, #576]	; (8005498 <UART_SetConfig+0x2cc>)
 8005258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525c:	f003 0303 	and.w	r3, r3, #3
 8005260:	2b03      	cmp	r3, #3
 8005262:	d81b      	bhi.n	800529c <UART_SetConfig+0xd0>
 8005264:	a201      	add	r2, pc, #4	; (adr r2, 800526c <UART_SetConfig+0xa0>)
 8005266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526a:	bf00      	nop
 800526c:	0800527d 	.word	0x0800527d
 8005270:	0800528d 	.word	0x0800528d
 8005274:	08005285 	.word	0x08005285
 8005278:	08005295 	.word	0x08005295
 800527c:	2301      	movs	r3, #1
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005282:	e116      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005284:	2302      	movs	r3, #2
 8005286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800528a:	e112      	b.n	80054b2 <UART_SetConfig+0x2e6>
 800528c:	2304      	movs	r3, #4
 800528e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005292:	e10e      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005294:	2308      	movs	r3, #8
 8005296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800529a:	e10a      	b.n	80054b2 <UART_SetConfig+0x2e6>
 800529c:	2310      	movs	r3, #16
 800529e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052a2:	e106      	b.n	80054b2 <UART_SetConfig+0x2e6>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a7c      	ldr	r2, [pc, #496]	; (800549c <UART_SetConfig+0x2d0>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d138      	bne.n	8005320 <UART_SetConfig+0x154>
 80052ae:	4b7a      	ldr	r3, [pc, #488]	; (8005498 <UART_SetConfig+0x2cc>)
 80052b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b4:	f003 030c 	and.w	r3, r3, #12
 80052b8:	2b0c      	cmp	r3, #12
 80052ba:	d82d      	bhi.n	8005318 <UART_SetConfig+0x14c>
 80052bc:	a201      	add	r2, pc, #4	; (adr r2, 80052c4 <UART_SetConfig+0xf8>)
 80052be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c2:	bf00      	nop
 80052c4:	080052f9 	.word	0x080052f9
 80052c8:	08005319 	.word	0x08005319
 80052cc:	08005319 	.word	0x08005319
 80052d0:	08005319 	.word	0x08005319
 80052d4:	08005309 	.word	0x08005309
 80052d8:	08005319 	.word	0x08005319
 80052dc:	08005319 	.word	0x08005319
 80052e0:	08005319 	.word	0x08005319
 80052e4:	08005301 	.word	0x08005301
 80052e8:	08005319 	.word	0x08005319
 80052ec:	08005319 	.word	0x08005319
 80052f0:	08005319 	.word	0x08005319
 80052f4:	08005311 	.word	0x08005311
 80052f8:	2300      	movs	r3, #0
 80052fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052fe:	e0d8      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005300:	2302      	movs	r3, #2
 8005302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005306:	e0d4      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005308:	2304      	movs	r3, #4
 800530a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800530e:	e0d0      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005310:	2308      	movs	r3, #8
 8005312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005316:	e0cc      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005318:	2310      	movs	r3, #16
 800531a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800531e:	e0c8      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a5e      	ldr	r2, [pc, #376]	; (80054a0 <UART_SetConfig+0x2d4>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d125      	bne.n	8005376 <UART_SetConfig+0x1aa>
 800532a:	4b5b      	ldr	r3, [pc, #364]	; (8005498 <UART_SetConfig+0x2cc>)
 800532c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005330:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005334:	2b30      	cmp	r3, #48	; 0x30
 8005336:	d016      	beq.n	8005366 <UART_SetConfig+0x19a>
 8005338:	2b30      	cmp	r3, #48	; 0x30
 800533a:	d818      	bhi.n	800536e <UART_SetConfig+0x1a2>
 800533c:	2b20      	cmp	r3, #32
 800533e:	d00a      	beq.n	8005356 <UART_SetConfig+0x18a>
 8005340:	2b20      	cmp	r3, #32
 8005342:	d814      	bhi.n	800536e <UART_SetConfig+0x1a2>
 8005344:	2b00      	cmp	r3, #0
 8005346:	d002      	beq.n	800534e <UART_SetConfig+0x182>
 8005348:	2b10      	cmp	r3, #16
 800534a:	d008      	beq.n	800535e <UART_SetConfig+0x192>
 800534c:	e00f      	b.n	800536e <UART_SetConfig+0x1a2>
 800534e:	2300      	movs	r3, #0
 8005350:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005354:	e0ad      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005356:	2302      	movs	r3, #2
 8005358:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800535c:	e0a9      	b.n	80054b2 <UART_SetConfig+0x2e6>
 800535e:	2304      	movs	r3, #4
 8005360:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005364:	e0a5      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005366:	2308      	movs	r3, #8
 8005368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800536c:	e0a1      	b.n	80054b2 <UART_SetConfig+0x2e6>
 800536e:	2310      	movs	r3, #16
 8005370:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005374:	e09d      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a4a      	ldr	r2, [pc, #296]	; (80054a4 <UART_SetConfig+0x2d8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d125      	bne.n	80053cc <UART_SetConfig+0x200>
 8005380:	4b45      	ldr	r3, [pc, #276]	; (8005498 <UART_SetConfig+0x2cc>)
 8005382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005386:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800538a:	2bc0      	cmp	r3, #192	; 0xc0
 800538c:	d016      	beq.n	80053bc <UART_SetConfig+0x1f0>
 800538e:	2bc0      	cmp	r3, #192	; 0xc0
 8005390:	d818      	bhi.n	80053c4 <UART_SetConfig+0x1f8>
 8005392:	2b80      	cmp	r3, #128	; 0x80
 8005394:	d00a      	beq.n	80053ac <UART_SetConfig+0x1e0>
 8005396:	2b80      	cmp	r3, #128	; 0x80
 8005398:	d814      	bhi.n	80053c4 <UART_SetConfig+0x1f8>
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <UART_SetConfig+0x1d8>
 800539e:	2b40      	cmp	r3, #64	; 0x40
 80053a0:	d008      	beq.n	80053b4 <UART_SetConfig+0x1e8>
 80053a2:	e00f      	b.n	80053c4 <UART_SetConfig+0x1f8>
 80053a4:	2300      	movs	r3, #0
 80053a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053aa:	e082      	b.n	80054b2 <UART_SetConfig+0x2e6>
 80053ac:	2302      	movs	r3, #2
 80053ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053b2:	e07e      	b.n	80054b2 <UART_SetConfig+0x2e6>
 80053b4:	2304      	movs	r3, #4
 80053b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ba:	e07a      	b.n	80054b2 <UART_SetConfig+0x2e6>
 80053bc:	2308      	movs	r3, #8
 80053be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053c2:	e076      	b.n	80054b2 <UART_SetConfig+0x2e6>
 80053c4:	2310      	movs	r3, #16
 80053c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ca:	e072      	b.n	80054b2 <UART_SetConfig+0x2e6>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a35      	ldr	r2, [pc, #212]	; (80054a8 <UART_SetConfig+0x2dc>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d12a      	bne.n	800542c <UART_SetConfig+0x260>
 80053d6:	4b30      	ldr	r3, [pc, #192]	; (8005498 <UART_SetConfig+0x2cc>)
 80053d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053e4:	d01a      	beq.n	800541c <UART_SetConfig+0x250>
 80053e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053ea:	d81b      	bhi.n	8005424 <UART_SetConfig+0x258>
 80053ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053f0:	d00c      	beq.n	800540c <UART_SetConfig+0x240>
 80053f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053f6:	d815      	bhi.n	8005424 <UART_SetConfig+0x258>
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d003      	beq.n	8005404 <UART_SetConfig+0x238>
 80053fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005400:	d008      	beq.n	8005414 <UART_SetConfig+0x248>
 8005402:	e00f      	b.n	8005424 <UART_SetConfig+0x258>
 8005404:	2300      	movs	r3, #0
 8005406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800540a:	e052      	b.n	80054b2 <UART_SetConfig+0x2e6>
 800540c:	2302      	movs	r3, #2
 800540e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005412:	e04e      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005414:	2304      	movs	r3, #4
 8005416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800541a:	e04a      	b.n	80054b2 <UART_SetConfig+0x2e6>
 800541c:	2308      	movs	r3, #8
 800541e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005422:	e046      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005424:	2310      	movs	r3, #16
 8005426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800542a:	e042      	b.n	80054b2 <UART_SetConfig+0x2e6>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a17      	ldr	r2, [pc, #92]	; (8005490 <UART_SetConfig+0x2c4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d13a      	bne.n	80054ac <UART_SetConfig+0x2e0>
 8005436:	4b18      	ldr	r3, [pc, #96]	; (8005498 <UART_SetConfig+0x2cc>)
 8005438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005440:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005444:	d01a      	beq.n	800547c <UART_SetConfig+0x2b0>
 8005446:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800544a:	d81b      	bhi.n	8005484 <UART_SetConfig+0x2b8>
 800544c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005450:	d00c      	beq.n	800546c <UART_SetConfig+0x2a0>
 8005452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005456:	d815      	bhi.n	8005484 <UART_SetConfig+0x2b8>
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <UART_SetConfig+0x298>
 800545c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005460:	d008      	beq.n	8005474 <UART_SetConfig+0x2a8>
 8005462:	e00f      	b.n	8005484 <UART_SetConfig+0x2b8>
 8005464:	2300      	movs	r3, #0
 8005466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800546a:	e022      	b.n	80054b2 <UART_SetConfig+0x2e6>
 800546c:	2302      	movs	r3, #2
 800546e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005472:	e01e      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005474:	2304      	movs	r3, #4
 8005476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800547a:	e01a      	b.n	80054b2 <UART_SetConfig+0x2e6>
 800547c:	2308      	movs	r3, #8
 800547e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005482:	e016      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005484:	2310      	movs	r3, #16
 8005486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800548a:	e012      	b.n	80054b2 <UART_SetConfig+0x2e6>
 800548c:	efff69f3 	.word	0xefff69f3
 8005490:	40008000 	.word	0x40008000
 8005494:	40013800 	.word	0x40013800
 8005498:	40021000 	.word	0x40021000
 800549c:	40004400 	.word	0x40004400
 80054a0:	40004800 	.word	0x40004800
 80054a4:	40004c00 	.word	0x40004c00
 80054a8:	40005000 	.word	0x40005000
 80054ac:	2310      	movs	r3, #16
 80054ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a9f      	ldr	r2, [pc, #636]	; (8005734 <UART_SetConfig+0x568>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d17a      	bne.n	80055b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d824      	bhi.n	800550e <UART_SetConfig+0x342>
 80054c4:	a201      	add	r2, pc, #4	; (adr r2, 80054cc <UART_SetConfig+0x300>)
 80054c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ca:	bf00      	nop
 80054cc:	080054f1 	.word	0x080054f1
 80054d0:	0800550f 	.word	0x0800550f
 80054d4:	080054f9 	.word	0x080054f9
 80054d8:	0800550f 	.word	0x0800550f
 80054dc:	080054ff 	.word	0x080054ff
 80054e0:	0800550f 	.word	0x0800550f
 80054e4:	0800550f 	.word	0x0800550f
 80054e8:	0800550f 	.word	0x0800550f
 80054ec:	08005507 	.word	0x08005507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054f0:	f7ff f842 	bl	8004578 <HAL_RCC_GetPCLK1Freq>
 80054f4:	61f8      	str	r0, [r7, #28]
        break;
 80054f6:	e010      	b.n	800551a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054f8:	4b8f      	ldr	r3, [pc, #572]	; (8005738 <UART_SetConfig+0x56c>)
 80054fa:	61fb      	str	r3, [r7, #28]
        break;
 80054fc:	e00d      	b.n	800551a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054fe:	f7fe ffa3 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 8005502:	61f8      	str	r0, [r7, #28]
        break;
 8005504:	e009      	b.n	800551a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800550a:	61fb      	str	r3, [r7, #28]
        break;
 800550c:	e005      	b.n	800551a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005518:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 80fb 	beq.w	8005718 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	4613      	mov	r3, r2
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	4413      	add	r3, r2
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	429a      	cmp	r2, r3
 8005530:	d305      	bcc.n	800553e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005538:	69fa      	ldr	r2, [r7, #28]
 800553a:	429a      	cmp	r2, r3
 800553c:	d903      	bls.n	8005546 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005544:	e0e8      	b.n	8005718 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	2200      	movs	r2, #0
 800554a:	461c      	mov	r4, r3
 800554c:	4615      	mov	r5, r2
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	f04f 0300 	mov.w	r3, #0
 8005556:	022b      	lsls	r3, r5, #8
 8005558:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800555c:	0222      	lsls	r2, r4, #8
 800555e:	68f9      	ldr	r1, [r7, #12]
 8005560:	6849      	ldr	r1, [r1, #4]
 8005562:	0849      	lsrs	r1, r1, #1
 8005564:	2000      	movs	r0, #0
 8005566:	4688      	mov	r8, r1
 8005568:	4681      	mov	r9, r0
 800556a:	eb12 0a08 	adds.w	sl, r2, r8
 800556e:	eb43 0b09 	adc.w	fp, r3, r9
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	603b      	str	r3, [r7, #0]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005580:	4650      	mov	r0, sl
 8005582:	4659      	mov	r1, fp
 8005584:	f7fa fe7c 	bl	8000280 <__aeabi_uldivmod>
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
 800558c:	4613      	mov	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005596:	d308      	bcc.n	80055aa <UART_SetConfig+0x3de>
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800559e:	d204      	bcs.n	80055aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	60da      	str	r2, [r3, #12]
 80055a8:	e0b6      	b.n	8005718 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055b0:	e0b2      	b.n	8005718 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ba:	d15e      	bne.n	800567a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80055bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d828      	bhi.n	8005616 <UART_SetConfig+0x44a>
 80055c4:	a201      	add	r2, pc, #4	; (adr r2, 80055cc <UART_SetConfig+0x400>)
 80055c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ca:	bf00      	nop
 80055cc:	080055f1 	.word	0x080055f1
 80055d0:	080055f9 	.word	0x080055f9
 80055d4:	08005601 	.word	0x08005601
 80055d8:	08005617 	.word	0x08005617
 80055dc:	08005607 	.word	0x08005607
 80055e0:	08005617 	.word	0x08005617
 80055e4:	08005617 	.word	0x08005617
 80055e8:	08005617 	.word	0x08005617
 80055ec:	0800560f 	.word	0x0800560f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055f0:	f7fe ffc2 	bl	8004578 <HAL_RCC_GetPCLK1Freq>
 80055f4:	61f8      	str	r0, [r7, #28]
        break;
 80055f6:	e014      	b.n	8005622 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055f8:	f7fe ffd4 	bl	80045a4 <HAL_RCC_GetPCLK2Freq>
 80055fc:	61f8      	str	r0, [r7, #28]
        break;
 80055fe:	e010      	b.n	8005622 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005600:	4b4d      	ldr	r3, [pc, #308]	; (8005738 <UART_SetConfig+0x56c>)
 8005602:	61fb      	str	r3, [r7, #28]
        break;
 8005604:	e00d      	b.n	8005622 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005606:	f7fe ff1f 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 800560a:	61f8      	str	r0, [r7, #28]
        break;
 800560c:	e009      	b.n	8005622 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800560e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005612:	61fb      	str	r3, [r7, #28]
        break;
 8005614:	e005      	b.n	8005622 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005620:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d077      	beq.n	8005718 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	005a      	lsls	r2, r3, #1
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	085b      	lsrs	r3, r3, #1
 8005632:	441a      	add	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	fbb2 f3f3 	udiv	r3, r2, r3
 800563c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	2b0f      	cmp	r3, #15
 8005642:	d916      	bls.n	8005672 <UART_SetConfig+0x4a6>
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800564a:	d212      	bcs.n	8005672 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	b29b      	uxth	r3, r3
 8005650:	f023 030f 	bic.w	r3, r3, #15
 8005654:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	085b      	lsrs	r3, r3, #1
 800565a:	b29b      	uxth	r3, r3
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	b29a      	uxth	r2, r3
 8005662:	8afb      	ldrh	r3, [r7, #22]
 8005664:	4313      	orrs	r3, r2
 8005666:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	8afa      	ldrh	r2, [r7, #22]
 800566e:	60da      	str	r2, [r3, #12]
 8005670:	e052      	b.n	8005718 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005678:	e04e      	b.n	8005718 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800567a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800567e:	2b08      	cmp	r3, #8
 8005680:	d827      	bhi.n	80056d2 <UART_SetConfig+0x506>
 8005682:	a201      	add	r2, pc, #4	; (adr r2, 8005688 <UART_SetConfig+0x4bc>)
 8005684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005688:	080056ad 	.word	0x080056ad
 800568c:	080056b5 	.word	0x080056b5
 8005690:	080056bd 	.word	0x080056bd
 8005694:	080056d3 	.word	0x080056d3
 8005698:	080056c3 	.word	0x080056c3
 800569c:	080056d3 	.word	0x080056d3
 80056a0:	080056d3 	.word	0x080056d3
 80056a4:	080056d3 	.word	0x080056d3
 80056a8:	080056cb 	.word	0x080056cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056ac:	f7fe ff64 	bl	8004578 <HAL_RCC_GetPCLK1Freq>
 80056b0:	61f8      	str	r0, [r7, #28]
        break;
 80056b2:	e014      	b.n	80056de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056b4:	f7fe ff76 	bl	80045a4 <HAL_RCC_GetPCLK2Freq>
 80056b8:	61f8      	str	r0, [r7, #28]
        break;
 80056ba:	e010      	b.n	80056de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056bc:	4b1e      	ldr	r3, [pc, #120]	; (8005738 <UART_SetConfig+0x56c>)
 80056be:	61fb      	str	r3, [r7, #28]
        break;
 80056c0:	e00d      	b.n	80056de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056c2:	f7fe fec1 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 80056c6:	61f8      	str	r0, [r7, #28]
        break;
 80056c8:	e009      	b.n	80056de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ce:	61fb      	str	r3, [r7, #28]
        break;
 80056d0:	e005      	b.n	80056de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056dc:	bf00      	nop
    }

    if (pclk != 0U)
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d019      	beq.n	8005718 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	085a      	lsrs	r2, r3, #1
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	441a      	add	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	2b0f      	cmp	r3, #15
 80056fc:	d909      	bls.n	8005712 <UART_SetConfig+0x546>
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005704:	d205      	bcs.n	8005712 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	b29a      	uxth	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	60da      	str	r2, [r3, #12]
 8005710:	e002      	b.n	8005718 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005724:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005728:	4618      	mov	r0, r3
 800572a:	3728      	adds	r7, #40	; 0x28
 800572c:	46bd      	mov	sp, r7
 800572e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005732:	bf00      	nop
 8005734:	40008000 	.word	0x40008000
 8005738:	00f42400 	.word	0x00f42400

0800573c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00a      	beq.n	8005766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00a      	beq.n	8005788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00a      	beq.n	80057aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00a      	beq.n	80057cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	f003 0310 	and.w	r3, r3, #16
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00a      	beq.n	80057ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005818:	2b00      	cmp	r3, #0
 800581a:	d01a      	beq.n	8005852 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800583a:	d10a      	bne.n	8005852 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	605a      	str	r2, [r3, #4]
  }
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af02      	add	r7, sp, #8
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005890:	f7fb feb0 	bl	80015f4 <HAL_GetTick>
 8005894:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0308 	and.w	r3, r3, #8
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d10e      	bne.n	80058c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f82d 	bl	8005912 <UART_WaitOnFlagUntilTimeout>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e023      	b.n	800590a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d10e      	bne.n	80058ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f817 	bl	8005912 <UART_WaitOnFlagUntilTimeout>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e00d      	b.n	800590a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2220      	movs	r2, #32
 80058f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2220      	movs	r2, #32
 80058f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b09c      	sub	sp, #112	; 0x70
 8005916:	af00      	add	r7, sp, #0
 8005918:	60f8      	str	r0, [r7, #12]
 800591a:	60b9      	str	r1, [r7, #8]
 800591c:	603b      	str	r3, [r7, #0]
 800591e:	4613      	mov	r3, r2
 8005920:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005922:	e0a5      	b.n	8005a70 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592a:	f000 80a1 	beq.w	8005a70 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800592e:	f7fb fe61 	bl	80015f4 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800593a:	429a      	cmp	r2, r3
 800593c:	d302      	bcc.n	8005944 <UART_WaitOnFlagUntilTimeout+0x32>
 800593e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005940:	2b00      	cmp	r3, #0
 8005942:	d13e      	bne.n	80059c2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800594c:	e853 3f00 	ldrex	r3, [r3]
 8005950:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005954:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005958:	667b      	str	r3, [r7, #100]	; 0x64
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005962:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005964:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005966:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005968:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800596a:	e841 2300 	strex	r3, r2, [r1]
 800596e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1e6      	bne.n	8005944 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	3308      	adds	r3, #8
 800597c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005980:	e853 3f00 	ldrex	r3, [r3]
 8005984:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005988:	f023 0301 	bic.w	r3, r3, #1
 800598c:	663b      	str	r3, [r7, #96]	; 0x60
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	3308      	adds	r3, #8
 8005994:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005996:	64ba      	str	r2, [r7, #72]	; 0x48
 8005998:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800599c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800599e:	e841 2300 	strex	r3, r2, [r1]
 80059a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1e5      	bne.n	8005976 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2220      	movs	r2, #32
 80059ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2220      	movs	r2, #32
 80059b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e067      	b.n	8005a92 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d04f      	beq.n	8005a70 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059de:	d147      	bne.n	8005a70 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059e8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f2:	e853 3f00 	ldrex	r3, [r3]
 80059f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	461a      	mov	r2, r3
 8005a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a08:	637b      	str	r3, [r7, #52]	; 0x34
 8005a0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a10:	e841 2300 	strex	r3, r2, [r1]
 8005a14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1e6      	bne.n	80059ea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3308      	adds	r3, #8
 8005a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	e853 3f00 	ldrex	r3, [r3]
 8005a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f023 0301 	bic.w	r3, r3, #1
 8005a32:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3308      	adds	r3, #8
 8005a3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a3c:	623a      	str	r2, [r7, #32]
 8005a3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a40:	69f9      	ldr	r1, [r7, #28]
 8005a42:	6a3a      	ldr	r2, [r7, #32]
 8005a44:	e841 2300 	strex	r3, r2, [r1]
 8005a48:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1e5      	bne.n	8005a1c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2220      	movs	r2, #32
 8005a54:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e010      	b.n	8005a92 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	69da      	ldr	r2, [r3, #28]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	4013      	ands	r3, r2
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	bf0c      	ite	eq
 8005a80:	2301      	moveq	r3, #1
 8005a82:	2300      	movne	r3, #0
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	461a      	mov	r2, r3
 8005a88:	79fb      	ldrb	r3, [r7, #7]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	f43f af4a 	beq.w	8005924 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3770      	adds	r7, #112	; 0x70
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
	...

08005a9c <__errno>:
 8005a9c:	4b01      	ldr	r3, [pc, #4]	; (8005aa4 <__errno+0x8>)
 8005a9e:	6818      	ldr	r0, [r3, #0]
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	20000018 	.word	0x20000018

08005aa8 <__libc_init_array>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	4d0d      	ldr	r5, [pc, #52]	; (8005ae0 <__libc_init_array+0x38>)
 8005aac:	4c0d      	ldr	r4, [pc, #52]	; (8005ae4 <__libc_init_array+0x3c>)
 8005aae:	1b64      	subs	r4, r4, r5
 8005ab0:	10a4      	asrs	r4, r4, #2
 8005ab2:	2600      	movs	r6, #0
 8005ab4:	42a6      	cmp	r6, r4
 8005ab6:	d109      	bne.n	8005acc <__libc_init_array+0x24>
 8005ab8:	4d0b      	ldr	r5, [pc, #44]	; (8005ae8 <__libc_init_array+0x40>)
 8005aba:	4c0c      	ldr	r4, [pc, #48]	; (8005aec <__libc_init_array+0x44>)
 8005abc:	f000 fc8e 	bl	80063dc <_init>
 8005ac0:	1b64      	subs	r4, r4, r5
 8005ac2:	10a4      	asrs	r4, r4, #2
 8005ac4:	2600      	movs	r6, #0
 8005ac6:	42a6      	cmp	r6, r4
 8005ac8:	d105      	bne.n	8005ad6 <__libc_init_array+0x2e>
 8005aca:	bd70      	pop	{r4, r5, r6, pc}
 8005acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ad0:	4798      	blx	r3
 8005ad2:	3601      	adds	r6, #1
 8005ad4:	e7ee      	b.n	8005ab4 <__libc_init_array+0xc>
 8005ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ada:	4798      	blx	r3
 8005adc:	3601      	adds	r6, #1
 8005ade:	e7f2      	b.n	8005ac6 <__libc_init_array+0x1e>
 8005ae0:	08007204 	.word	0x08007204
 8005ae4:	08007204 	.word	0x08007204
 8005ae8:	08007204 	.word	0x08007204
 8005aec:	08007208 	.word	0x08007208

08005af0 <memset>:
 8005af0:	4402      	add	r2, r0
 8005af2:	4603      	mov	r3, r0
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d100      	bne.n	8005afa <memset+0xa>
 8005af8:	4770      	bx	lr
 8005afa:	f803 1b01 	strb.w	r1, [r3], #1
 8005afe:	e7f9      	b.n	8005af4 <memset+0x4>

08005b00 <siprintf>:
 8005b00:	b40e      	push	{r1, r2, r3}
 8005b02:	b500      	push	{lr}
 8005b04:	b09c      	sub	sp, #112	; 0x70
 8005b06:	ab1d      	add	r3, sp, #116	; 0x74
 8005b08:	9002      	str	r0, [sp, #8]
 8005b0a:	9006      	str	r0, [sp, #24]
 8005b0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b10:	4809      	ldr	r0, [pc, #36]	; (8005b38 <siprintf+0x38>)
 8005b12:	9107      	str	r1, [sp, #28]
 8005b14:	9104      	str	r1, [sp, #16]
 8005b16:	4909      	ldr	r1, [pc, #36]	; (8005b3c <siprintf+0x3c>)
 8005b18:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b1c:	9105      	str	r1, [sp, #20]
 8005b1e:	6800      	ldr	r0, [r0, #0]
 8005b20:	9301      	str	r3, [sp, #4]
 8005b22:	a902      	add	r1, sp, #8
 8005b24:	f000 f868 	bl	8005bf8 <_svfiprintf_r>
 8005b28:	9b02      	ldr	r3, [sp, #8]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	701a      	strb	r2, [r3, #0]
 8005b2e:	b01c      	add	sp, #112	; 0x70
 8005b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b34:	b003      	add	sp, #12
 8005b36:	4770      	bx	lr
 8005b38:	20000018 	.word	0x20000018
 8005b3c:	ffff0208 	.word	0xffff0208

08005b40 <__ssputs_r>:
 8005b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b44:	688e      	ldr	r6, [r1, #8]
 8005b46:	429e      	cmp	r6, r3
 8005b48:	4682      	mov	sl, r0
 8005b4a:	460c      	mov	r4, r1
 8005b4c:	4690      	mov	r8, r2
 8005b4e:	461f      	mov	r7, r3
 8005b50:	d838      	bhi.n	8005bc4 <__ssputs_r+0x84>
 8005b52:	898a      	ldrh	r2, [r1, #12]
 8005b54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b58:	d032      	beq.n	8005bc0 <__ssputs_r+0x80>
 8005b5a:	6825      	ldr	r5, [r4, #0]
 8005b5c:	6909      	ldr	r1, [r1, #16]
 8005b5e:	eba5 0901 	sub.w	r9, r5, r1
 8005b62:	6965      	ldr	r5, [r4, #20]
 8005b64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	444b      	add	r3, r9
 8005b70:	106d      	asrs	r5, r5, #1
 8005b72:	429d      	cmp	r5, r3
 8005b74:	bf38      	it	cc
 8005b76:	461d      	movcc	r5, r3
 8005b78:	0553      	lsls	r3, r2, #21
 8005b7a:	d531      	bpl.n	8005be0 <__ssputs_r+0xa0>
 8005b7c:	4629      	mov	r1, r5
 8005b7e:	f000 fb63 	bl	8006248 <_malloc_r>
 8005b82:	4606      	mov	r6, r0
 8005b84:	b950      	cbnz	r0, 8005b9c <__ssputs_r+0x5c>
 8005b86:	230c      	movs	r3, #12
 8005b88:	f8ca 3000 	str.w	r3, [sl]
 8005b8c:	89a3      	ldrh	r3, [r4, #12]
 8005b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b92:	81a3      	strh	r3, [r4, #12]
 8005b94:	f04f 30ff 	mov.w	r0, #4294967295
 8005b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b9c:	6921      	ldr	r1, [r4, #16]
 8005b9e:	464a      	mov	r2, r9
 8005ba0:	f000 fabe 	bl	8006120 <memcpy>
 8005ba4:	89a3      	ldrh	r3, [r4, #12]
 8005ba6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bae:	81a3      	strh	r3, [r4, #12]
 8005bb0:	6126      	str	r6, [r4, #16]
 8005bb2:	6165      	str	r5, [r4, #20]
 8005bb4:	444e      	add	r6, r9
 8005bb6:	eba5 0509 	sub.w	r5, r5, r9
 8005bba:	6026      	str	r6, [r4, #0]
 8005bbc:	60a5      	str	r5, [r4, #8]
 8005bbe:	463e      	mov	r6, r7
 8005bc0:	42be      	cmp	r6, r7
 8005bc2:	d900      	bls.n	8005bc6 <__ssputs_r+0x86>
 8005bc4:	463e      	mov	r6, r7
 8005bc6:	6820      	ldr	r0, [r4, #0]
 8005bc8:	4632      	mov	r2, r6
 8005bca:	4641      	mov	r1, r8
 8005bcc:	f000 fab6 	bl	800613c <memmove>
 8005bd0:	68a3      	ldr	r3, [r4, #8]
 8005bd2:	1b9b      	subs	r3, r3, r6
 8005bd4:	60a3      	str	r3, [r4, #8]
 8005bd6:	6823      	ldr	r3, [r4, #0]
 8005bd8:	4433      	add	r3, r6
 8005bda:	6023      	str	r3, [r4, #0]
 8005bdc:	2000      	movs	r0, #0
 8005bde:	e7db      	b.n	8005b98 <__ssputs_r+0x58>
 8005be0:	462a      	mov	r2, r5
 8005be2:	f000 fba5 	bl	8006330 <_realloc_r>
 8005be6:	4606      	mov	r6, r0
 8005be8:	2800      	cmp	r0, #0
 8005bea:	d1e1      	bne.n	8005bb0 <__ssputs_r+0x70>
 8005bec:	6921      	ldr	r1, [r4, #16]
 8005bee:	4650      	mov	r0, sl
 8005bf0:	f000 fabe 	bl	8006170 <_free_r>
 8005bf4:	e7c7      	b.n	8005b86 <__ssputs_r+0x46>
	...

08005bf8 <_svfiprintf_r>:
 8005bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfc:	4698      	mov	r8, r3
 8005bfe:	898b      	ldrh	r3, [r1, #12]
 8005c00:	061b      	lsls	r3, r3, #24
 8005c02:	b09d      	sub	sp, #116	; 0x74
 8005c04:	4607      	mov	r7, r0
 8005c06:	460d      	mov	r5, r1
 8005c08:	4614      	mov	r4, r2
 8005c0a:	d50e      	bpl.n	8005c2a <_svfiprintf_r+0x32>
 8005c0c:	690b      	ldr	r3, [r1, #16]
 8005c0e:	b963      	cbnz	r3, 8005c2a <_svfiprintf_r+0x32>
 8005c10:	2140      	movs	r1, #64	; 0x40
 8005c12:	f000 fb19 	bl	8006248 <_malloc_r>
 8005c16:	6028      	str	r0, [r5, #0]
 8005c18:	6128      	str	r0, [r5, #16]
 8005c1a:	b920      	cbnz	r0, 8005c26 <_svfiprintf_r+0x2e>
 8005c1c:	230c      	movs	r3, #12
 8005c1e:	603b      	str	r3, [r7, #0]
 8005c20:	f04f 30ff 	mov.w	r0, #4294967295
 8005c24:	e0d1      	b.n	8005dca <_svfiprintf_r+0x1d2>
 8005c26:	2340      	movs	r3, #64	; 0x40
 8005c28:	616b      	str	r3, [r5, #20]
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c2e:	2320      	movs	r3, #32
 8005c30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c34:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c38:	2330      	movs	r3, #48	; 0x30
 8005c3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005de4 <_svfiprintf_r+0x1ec>
 8005c3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c42:	f04f 0901 	mov.w	r9, #1
 8005c46:	4623      	mov	r3, r4
 8005c48:	469a      	mov	sl, r3
 8005c4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c4e:	b10a      	cbz	r2, 8005c54 <_svfiprintf_r+0x5c>
 8005c50:	2a25      	cmp	r2, #37	; 0x25
 8005c52:	d1f9      	bne.n	8005c48 <_svfiprintf_r+0x50>
 8005c54:	ebba 0b04 	subs.w	fp, sl, r4
 8005c58:	d00b      	beq.n	8005c72 <_svfiprintf_r+0x7a>
 8005c5a:	465b      	mov	r3, fp
 8005c5c:	4622      	mov	r2, r4
 8005c5e:	4629      	mov	r1, r5
 8005c60:	4638      	mov	r0, r7
 8005c62:	f7ff ff6d 	bl	8005b40 <__ssputs_r>
 8005c66:	3001      	adds	r0, #1
 8005c68:	f000 80aa 	beq.w	8005dc0 <_svfiprintf_r+0x1c8>
 8005c6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c6e:	445a      	add	r2, fp
 8005c70:	9209      	str	r2, [sp, #36]	; 0x24
 8005c72:	f89a 3000 	ldrb.w	r3, [sl]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 80a2 	beq.w	8005dc0 <_svfiprintf_r+0x1c8>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c86:	f10a 0a01 	add.w	sl, sl, #1
 8005c8a:	9304      	str	r3, [sp, #16]
 8005c8c:	9307      	str	r3, [sp, #28]
 8005c8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c92:	931a      	str	r3, [sp, #104]	; 0x68
 8005c94:	4654      	mov	r4, sl
 8005c96:	2205      	movs	r2, #5
 8005c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c9c:	4851      	ldr	r0, [pc, #324]	; (8005de4 <_svfiprintf_r+0x1ec>)
 8005c9e:	f7fa fa9f 	bl	80001e0 <memchr>
 8005ca2:	9a04      	ldr	r2, [sp, #16]
 8005ca4:	b9d8      	cbnz	r0, 8005cde <_svfiprintf_r+0xe6>
 8005ca6:	06d0      	lsls	r0, r2, #27
 8005ca8:	bf44      	itt	mi
 8005caa:	2320      	movmi	r3, #32
 8005cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cb0:	0711      	lsls	r1, r2, #28
 8005cb2:	bf44      	itt	mi
 8005cb4:	232b      	movmi	r3, #43	; 0x2b
 8005cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cba:	f89a 3000 	ldrb.w	r3, [sl]
 8005cbe:	2b2a      	cmp	r3, #42	; 0x2a
 8005cc0:	d015      	beq.n	8005cee <_svfiprintf_r+0xf6>
 8005cc2:	9a07      	ldr	r2, [sp, #28]
 8005cc4:	4654      	mov	r4, sl
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	f04f 0c0a 	mov.w	ip, #10
 8005ccc:	4621      	mov	r1, r4
 8005cce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cd2:	3b30      	subs	r3, #48	; 0x30
 8005cd4:	2b09      	cmp	r3, #9
 8005cd6:	d94e      	bls.n	8005d76 <_svfiprintf_r+0x17e>
 8005cd8:	b1b0      	cbz	r0, 8005d08 <_svfiprintf_r+0x110>
 8005cda:	9207      	str	r2, [sp, #28]
 8005cdc:	e014      	b.n	8005d08 <_svfiprintf_r+0x110>
 8005cde:	eba0 0308 	sub.w	r3, r0, r8
 8005ce2:	fa09 f303 	lsl.w	r3, r9, r3
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	9304      	str	r3, [sp, #16]
 8005cea:	46a2      	mov	sl, r4
 8005cec:	e7d2      	b.n	8005c94 <_svfiprintf_r+0x9c>
 8005cee:	9b03      	ldr	r3, [sp, #12]
 8005cf0:	1d19      	adds	r1, r3, #4
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	9103      	str	r1, [sp, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	bfbb      	ittet	lt
 8005cfa:	425b      	neglt	r3, r3
 8005cfc:	f042 0202 	orrlt.w	r2, r2, #2
 8005d00:	9307      	strge	r3, [sp, #28]
 8005d02:	9307      	strlt	r3, [sp, #28]
 8005d04:	bfb8      	it	lt
 8005d06:	9204      	strlt	r2, [sp, #16]
 8005d08:	7823      	ldrb	r3, [r4, #0]
 8005d0a:	2b2e      	cmp	r3, #46	; 0x2e
 8005d0c:	d10c      	bne.n	8005d28 <_svfiprintf_r+0x130>
 8005d0e:	7863      	ldrb	r3, [r4, #1]
 8005d10:	2b2a      	cmp	r3, #42	; 0x2a
 8005d12:	d135      	bne.n	8005d80 <_svfiprintf_r+0x188>
 8005d14:	9b03      	ldr	r3, [sp, #12]
 8005d16:	1d1a      	adds	r2, r3, #4
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	9203      	str	r2, [sp, #12]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	bfb8      	it	lt
 8005d20:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d24:	3402      	adds	r4, #2
 8005d26:	9305      	str	r3, [sp, #20]
 8005d28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005df4 <_svfiprintf_r+0x1fc>
 8005d2c:	7821      	ldrb	r1, [r4, #0]
 8005d2e:	2203      	movs	r2, #3
 8005d30:	4650      	mov	r0, sl
 8005d32:	f7fa fa55 	bl	80001e0 <memchr>
 8005d36:	b140      	cbz	r0, 8005d4a <_svfiprintf_r+0x152>
 8005d38:	2340      	movs	r3, #64	; 0x40
 8005d3a:	eba0 000a 	sub.w	r0, r0, sl
 8005d3e:	fa03 f000 	lsl.w	r0, r3, r0
 8005d42:	9b04      	ldr	r3, [sp, #16]
 8005d44:	4303      	orrs	r3, r0
 8005d46:	3401      	adds	r4, #1
 8005d48:	9304      	str	r3, [sp, #16]
 8005d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d4e:	4826      	ldr	r0, [pc, #152]	; (8005de8 <_svfiprintf_r+0x1f0>)
 8005d50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d54:	2206      	movs	r2, #6
 8005d56:	f7fa fa43 	bl	80001e0 <memchr>
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d038      	beq.n	8005dd0 <_svfiprintf_r+0x1d8>
 8005d5e:	4b23      	ldr	r3, [pc, #140]	; (8005dec <_svfiprintf_r+0x1f4>)
 8005d60:	bb1b      	cbnz	r3, 8005daa <_svfiprintf_r+0x1b2>
 8005d62:	9b03      	ldr	r3, [sp, #12]
 8005d64:	3307      	adds	r3, #7
 8005d66:	f023 0307 	bic.w	r3, r3, #7
 8005d6a:	3308      	adds	r3, #8
 8005d6c:	9303      	str	r3, [sp, #12]
 8005d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d70:	4433      	add	r3, r6
 8005d72:	9309      	str	r3, [sp, #36]	; 0x24
 8005d74:	e767      	b.n	8005c46 <_svfiprintf_r+0x4e>
 8005d76:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	2001      	movs	r0, #1
 8005d7e:	e7a5      	b.n	8005ccc <_svfiprintf_r+0xd4>
 8005d80:	2300      	movs	r3, #0
 8005d82:	3401      	adds	r4, #1
 8005d84:	9305      	str	r3, [sp, #20]
 8005d86:	4619      	mov	r1, r3
 8005d88:	f04f 0c0a 	mov.w	ip, #10
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d92:	3a30      	subs	r2, #48	; 0x30
 8005d94:	2a09      	cmp	r2, #9
 8005d96:	d903      	bls.n	8005da0 <_svfiprintf_r+0x1a8>
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d0c5      	beq.n	8005d28 <_svfiprintf_r+0x130>
 8005d9c:	9105      	str	r1, [sp, #20]
 8005d9e:	e7c3      	b.n	8005d28 <_svfiprintf_r+0x130>
 8005da0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005da4:	4604      	mov	r4, r0
 8005da6:	2301      	movs	r3, #1
 8005da8:	e7f0      	b.n	8005d8c <_svfiprintf_r+0x194>
 8005daa:	ab03      	add	r3, sp, #12
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	462a      	mov	r2, r5
 8005db0:	4b0f      	ldr	r3, [pc, #60]	; (8005df0 <_svfiprintf_r+0x1f8>)
 8005db2:	a904      	add	r1, sp, #16
 8005db4:	4638      	mov	r0, r7
 8005db6:	f3af 8000 	nop.w
 8005dba:	1c42      	adds	r2, r0, #1
 8005dbc:	4606      	mov	r6, r0
 8005dbe:	d1d6      	bne.n	8005d6e <_svfiprintf_r+0x176>
 8005dc0:	89ab      	ldrh	r3, [r5, #12]
 8005dc2:	065b      	lsls	r3, r3, #25
 8005dc4:	f53f af2c 	bmi.w	8005c20 <_svfiprintf_r+0x28>
 8005dc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dca:	b01d      	add	sp, #116	; 0x74
 8005dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd0:	ab03      	add	r3, sp, #12
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	462a      	mov	r2, r5
 8005dd6:	4b06      	ldr	r3, [pc, #24]	; (8005df0 <_svfiprintf_r+0x1f8>)
 8005dd8:	a904      	add	r1, sp, #16
 8005dda:	4638      	mov	r0, r7
 8005ddc:	f000 f87a 	bl	8005ed4 <_printf_i>
 8005de0:	e7eb      	b.n	8005dba <_svfiprintf_r+0x1c2>
 8005de2:	bf00      	nop
 8005de4:	080071c8 	.word	0x080071c8
 8005de8:	080071d2 	.word	0x080071d2
 8005dec:	00000000 	.word	0x00000000
 8005df0:	08005b41 	.word	0x08005b41
 8005df4:	080071ce 	.word	0x080071ce

08005df8 <_printf_common>:
 8005df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dfc:	4616      	mov	r6, r2
 8005dfe:	4699      	mov	r9, r3
 8005e00:	688a      	ldr	r2, [r1, #8]
 8005e02:	690b      	ldr	r3, [r1, #16]
 8005e04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	bfb8      	it	lt
 8005e0c:	4613      	movlt	r3, r2
 8005e0e:	6033      	str	r3, [r6, #0]
 8005e10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e14:	4607      	mov	r7, r0
 8005e16:	460c      	mov	r4, r1
 8005e18:	b10a      	cbz	r2, 8005e1e <_printf_common+0x26>
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	6033      	str	r3, [r6, #0]
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	0699      	lsls	r1, r3, #26
 8005e22:	bf42      	ittt	mi
 8005e24:	6833      	ldrmi	r3, [r6, #0]
 8005e26:	3302      	addmi	r3, #2
 8005e28:	6033      	strmi	r3, [r6, #0]
 8005e2a:	6825      	ldr	r5, [r4, #0]
 8005e2c:	f015 0506 	ands.w	r5, r5, #6
 8005e30:	d106      	bne.n	8005e40 <_printf_common+0x48>
 8005e32:	f104 0a19 	add.w	sl, r4, #25
 8005e36:	68e3      	ldr	r3, [r4, #12]
 8005e38:	6832      	ldr	r2, [r6, #0]
 8005e3a:	1a9b      	subs	r3, r3, r2
 8005e3c:	42ab      	cmp	r3, r5
 8005e3e:	dc26      	bgt.n	8005e8e <_printf_common+0x96>
 8005e40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e44:	1e13      	subs	r3, r2, #0
 8005e46:	6822      	ldr	r2, [r4, #0]
 8005e48:	bf18      	it	ne
 8005e4a:	2301      	movne	r3, #1
 8005e4c:	0692      	lsls	r2, r2, #26
 8005e4e:	d42b      	bmi.n	8005ea8 <_printf_common+0xb0>
 8005e50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e54:	4649      	mov	r1, r9
 8005e56:	4638      	mov	r0, r7
 8005e58:	47c0      	blx	r8
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	d01e      	beq.n	8005e9c <_printf_common+0xa4>
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	68e5      	ldr	r5, [r4, #12]
 8005e62:	6832      	ldr	r2, [r6, #0]
 8005e64:	f003 0306 	and.w	r3, r3, #6
 8005e68:	2b04      	cmp	r3, #4
 8005e6a:	bf08      	it	eq
 8005e6c:	1aad      	subeq	r5, r5, r2
 8005e6e:	68a3      	ldr	r3, [r4, #8]
 8005e70:	6922      	ldr	r2, [r4, #16]
 8005e72:	bf0c      	ite	eq
 8005e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e78:	2500      	movne	r5, #0
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	bfc4      	itt	gt
 8005e7e:	1a9b      	subgt	r3, r3, r2
 8005e80:	18ed      	addgt	r5, r5, r3
 8005e82:	2600      	movs	r6, #0
 8005e84:	341a      	adds	r4, #26
 8005e86:	42b5      	cmp	r5, r6
 8005e88:	d11a      	bne.n	8005ec0 <_printf_common+0xc8>
 8005e8a:	2000      	movs	r0, #0
 8005e8c:	e008      	b.n	8005ea0 <_printf_common+0xa8>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	4652      	mov	r2, sl
 8005e92:	4649      	mov	r1, r9
 8005e94:	4638      	mov	r0, r7
 8005e96:	47c0      	blx	r8
 8005e98:	3001      	adds	r0, #1
 8005e9a:	d103      	bne.n	8005ea4 <_printf_common+0xac>
 8005e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ea4:	3501      	adds	r5, #1
 8005ea6:	e7c6      	b.n	8005e36 <_printf_common+0x3e>
 8005ea8:	18e1      	adds	r1, r4, r3
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	2030      	movs	r0, #48	; 0x30
 8005eae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005eb2:	4422      	add	r2, r4
 8005eb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005eb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ebc:	3302      	adds	r3, #2
 8005ebe:	e7c7      	b.n	8005e50 <_printf_common+0x58>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	4622      	mov	r2, r4
 8005ec4:	4649      	mov	r1, r9
 8005ec6:	4638      	mov	r0, r7
 8005ec8:	47c0      	blx	r8
 8005eca:	3001      	adds	r0, #1
 8005ecc:	d0e6      	beq.n	8005e9c <_printf_common+0xa4>
 8005ece:	3601      	adds	r6, #1
 8005ed0:	e7d9      	b.n	8005e86 <_printf_common+0x8e>
	...

08005ed4 <_printf_i>:
 8005ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed8:	7e0f      	ldrb	r7, [r1, #24]
 8005eda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005edc:	2f78      	cmp	r7, #120	; 0x78
 8005ede:	4691      	mov	r9, r2
 8005ee0:	4680      	mov	r8, r0
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	469a      	mov	sl, r3
 8005ee6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005eea:	d807      	bhi.n	8005efc <_printf_i+0x28>
 8005eec:	2f62      	cmp	r7, #98	; 0x62
 8005eee:	d80a      	bhi.n	8005f06 <_printf_i+0x32>
 8005ef0:	2f00      	cmp	r7, #0
 8005ef2:	f000 80d8 	beq.w	80060a6 <_printf_i+0x1d2>
 8005ef6:	2f58      	cmp	r7, #88	; 0x58
 8005ef8:	f000 80a3 	beq.w	8006042 <_printf_i+0x16e>
 8005efc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f04:	e03a      	b.n	8005f7c <_printf_i+0xa8>
 8005f06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f0a:	2b15      	cmp	r3, #21
 8005f0c:	d8f6      	bhi.n	8005efc <_printf_i+0x28>
 8005f0e:	a101      	add	r1, pc, #4	; (adr r1, 8005f14 <_printf_i+0x40>)
 8005f10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f14:	08005f6d 	.word	0x08005f6d
 8005f18:	08005f81 	.word	0x08005f81
 8005f1c:	08005efd 	.word	0x08005efd
 8005f20:	08005efd 	.word	0x08005efd
 8005f24:	08005efd 	.word	0x08005efd
 8005f28:	08005efd 	.word	0x08005efd
 8005f2c:	08005f81 	.word	0x08005f81
 8005f30:	08005efd 	.word	0x08005efd
 8005f34:	08005efd 	.word	0x08005efd
 8005f38:	08005efd 	.word	0x08005efd
 8005f3c:	08005efd 	.word	0x08005efd
 8005f40:	0800608d 	.word	0x0800608d
 8005f44:	08005fb1 	.word	0x08005fb1
 8005f48:	0800606f 	.word	0x0800606f
 8005f4c:	08005efd 	.word	0x08005efd
 8005f50:	08005efd 	.word	0x08005efd
 8005f54:	080060af 	.word	0x080060af
 8005f58:	08005efd 	.word	0x08005efd
 8005f5c:	08005fb1 	.word	0x08005fb1
 8005f60:	08005efd 	.word	0x08005efd
 8005f64:	08005efd 	.word	0x08005efd
 8005f68:	08006077 	.word	0x08006077
 8005f6c:	682b      	ldr	r3, [r5, #0]
 8005f6e:	1d1a      	adds	r2, r3, #4
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	602a      	str	r2, [r5, #0]
 8005f74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e0a3      	b.n	80060c8 <_printf_i+0x1f4>
 8005f80:	6820      	ldr	r0, [r4, #0]
 8005f82:	6829      	ldr	r1, [r5, #0]
 8005f84:	0606      	lsls	r6, r0, #24
 8005f86:	f101 0304 	add.w	r3, r1, #4
 8005f8a:	d50a      	bpl.n	8005fa2 <_printf_i+0xce>
 8005f8c:	680e      	ldr	r6, [r1, #0]
 8005f8e:	602b      	str	r3, [r5, #0]
 8005f90:	2e00      	cmp	r6, #0
 8005f92:	da03      	bge.n	8005f9c <_printf_i+0xc8>
 8005f94:	232d      	movs	r3, #45	; 0x2d
 8005f96:	4276      	negs	r6, r6
 8005f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f9c:	485e      	ldr	r0, [pc, #376]	; (8006118 <_printf_i+0x244>)
 8005f9e:	230a      	movs	r3, #10
 8005fa0:	e019      	b.n	8005fd6 <_printf_i+0x102>
 8005fa2:	680e      	ldr	r6, [r1, #0]
 8005fa4:	602b      	str	r3, [r5, #0]
 8005fa6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005faa:	bf18      	it	ne
 8005fac:	b236      	sxthne	r6, r6
 8005fae:	e7ef      	b.n	8005f90 <_printf_i+0xbc>
 8005fb0:	682b      	ldr	r3, [r5, #0]
 8005fb2:	6820      	ldr	r0, [r4, #0]
 8005fb4:	1d19      	adds	r1, r3, #4
 8005fb6:	6029      	str	r1, [r5, #0]
 8005fb8:	0601      	lsls	r1, r0, #24
 8005fba:	d501      	bpl.n	8005fc0 <_printf_i+0xec>
 8005fbc:	681e      	ldr	r6, [r3, #0]
 8005fbe:	e002      	b.n	8005fc6 <_printf_i+0xf2>
 8005fc0:	0646      	lsls	r6, r0, #25
 8005fc2:	d5fb      	bpl.n	8005fbc <_printf_i+0xe8>
 8005fc4:	881e      	ldrh	r6, [r3, #0]
 8005fc6:	4854      	ldr	r0, [pc, #336]	; (8006118 <_printf_i+0x244>)
 8005fc8:	2f6f      	cmp	r7, #111	; 0x6f
 8005fca:	bf0c      	ite	eq
 8005fcc:	2308      	moveq	r3, #8
 8005fce:	230a      	movne	r3, #10
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fd6:	6865      	ldr	r5, [r4, #4]
 8005fd8:	60a5      	str	r5, [r4, #8]
 8005fda:	2d00      	cmp	r5, #0
 8005fdc:	bfa2      	ittt	ge
 8005fde:	6821      	ldrge	r1, [r4, #0]
 8005fe0:	f021 0104 	bicge.w	r1, r1, #4
 8005fe4:	6021      	strge	r1, [r4, #0]
 8005fe6:	b90e      	cbnz	r6, 8005fec <_printf_i+0x118>
 8005fe8:	2d00      	cmp	r5, #0
 8005fea:	d04d      	beq.n	8006088 <_printf_i+0x1b4>
 8005fec:	4615      	mov	r5, r2
 8005fee:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ff2:	fb03 6711 	mls	r7, r3, r1, r6
 8005ff6:	5dc7      	ldrb	r7, [r0, r7]
 8005ff8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ffc:	4637      	mov	r7, r6
 8005ffe:	42bb      	cmp	r3, r7
 8006000:	460e      	mov	r6, r1
 8006002:	d9f4      	bls.n	8005fee <_printf_i+0x11a>
 8006004:	2b08      	cmp	r3, #8
 8006006:	d10b      	bne.n	8006020 <_printf_i+0x14c>
 8006008:	6823      	ldr	r3, [r4, #0]
 800600a:	07de      	lsls	r6, r3, #31
 800600c:	d508      	bpl.n	8006020 <_printf_i+0x14c>
 800600e:	6923      	ldr	r3, [r4, #16]
 8006010:	6861      	ldr	r1, [r4, #4]
 8006012:	4299      	cmp	r1, r3
 8006014:	bfde      	ittt	le
 8006016:	2330      	movle	r3, #48	; 0x30
 8006018:	f805 3c01 	strble.w	r3, [r5, #-1]
 800601c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006020:	1b52      	subs	r2, r2, r5
 8006022:	6122      	str	r2, [r4, #16]
 8006024:	f8cd a000 	str.w	sl, [sp]
 8006028:	464b      	mov	r3, r9
 800602a:	aa03      	add	r2, sp, #12
 800602c:	4621      	mov	r1, r4
 800602e:	4640      	mov	r0, r8
 8006030:	f7ff fee2 	bl	8005df8 <_printf_common>
 8006034:	3001      	adds	r0, #1
 8006036:	d14c      	bne.n	80060d2 <_printf_i+0x1fe>
 8006038:	f04f 30ff 	mov.w	r0, #4294967295
 800603c:	b004      	add	sp, #16
 800603e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006042:	4835      	ldr	r0, [pc, #212]	; (8006118 <_printf_i+0x244>)
 8006044:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006048:	6829      	ldr	r1, [r5, #0]
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006050:	6029      	str	r1, [r5, #0]
 8006052:	061d      	lsls	r5, r3, #24
 8006054:	d514      	bpl.n	8006080 <_printf_i+0x1ac>
 8006056:	07df      	lsls	r7, r3, #31
 8006058:	bf44      	itt	mi
 800605a:	f043 0320 	orrmi.w	r3, r3, #32
 800605e:	6023      	strmi	r3, [r4, #0]
 8006060:	b91e      	cbnz	r6, 800606a <_printf_i+0x196>
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	f023 0320 	bic.w	r3, r3, #32
 8006068:	6023      	str	r3, [r4, #0]
 800606a:	2310      	movs	r3, #16
 800606c:	e7b0      	b.n	8005fd0 <_printf_i+0xfc>
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	f043 0320 	orr.w	r3, r3, #32
 8006074:	6023      	str	r3, [r4, #0]
 8006076:	2378      	movs	r3, #120	; 0x78
 8006078:	4828      	ldr	r0, [pc, #160]	; (800611c <_printf_i+0x248>)
 800607a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800607e:	e7e3      	b.n	8006048 <_printf_i+0x174>
 8006080:	0659      	lsls	r1, r3, #25
 8006082:	bf48      	it	mi
 8006084:	b2b6      	uxthmi	r6, r6
 8006086:	e7e6      	b.n	8006056 <_printf_i+0x182>
 8006088:	4615      	mov	r5, r2
 800608a:	e7bb      	b.n	8006004 <_printf_i+0x130>
 800608c:	682b      	ldr	r3, [r5, #0]
 800608e:	6826      	ldr	r6, [r4, #0]
 8006090:	6961      	ldr	r1, [r4, #20]
 8006092:	1d18      	adds	r0, r3, #4
 8006094:	6028      	str	r0, [r5, #0]
 8006096:	0635      	lsls	r5, r6, #24
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	d501      	bpl.n	80060a0 <_printf_i+0x1cc>
 800609c:	6019      	str	r1, [r3, #0]
 800609e:	e002      	b.n	80060a6 <_printf_i+0x1d2>
 80060a0:	0670      	lsls	r0, r6, #25
 80060a2:	d5fb      	bpl.n	800609c <_printf_i+0x1c8>
 80060a4:	8019      	strh	r1, [r3, #0]
 80060a6:	2300      	movs	r3, #0
 80060a8:	6123      	str	r3, [r4, #16]
 80060aa:	4615      	mov	r5, r2
 80060ac:	e7ba      	b.n	8006024 <_printf_i+0x150>
 80060ae:	682b      	ldr	r3, [r5, #0]
 80060b0:	1d1a      	adds	r2, r3, #4
 80060b2:	602a      	str	r2, [r5, #0]
 80060b4:	681d      	ldr	r5, [r3, #0]
 80060b6:	6862      	ldr	r2, [r4, #4]
 80060b8:	2100      	movs	r1, #0
 80060ba:	4628      	mov	r0, r5
 80060bc:	f7fa f890 	bl	80001e0 <memchr>
 80060c0:	b108      	cbz	r0, 80060c6 <_printf_i+0x1f2>
 80060c2:	1b40      	subs	r0, r0, r5
 80060c4:	6060      	str	r0, [r4, #4]
 80060c6:	6863      	ldr	r3, [r4, #4]
 80060c8:	6123      	str	r3, [r4, #16]
 80060ca:	2300      	movs	r3, #0
 80060cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060d0:	e7a8      	b.n	8006024 <_printf_i+0x150>
 80060d2:	6923      	ldr	r3, [r4, #16]
 80060d4:	462a      	mov	r2, r5
 80060d6:	4649      	mov	r1, r9
 80060d8:	4640      	mov	r0, r8
 80060da:	47d0      	blx	sl
 80060dc:	3001      	adds	r0, #1
 80060de:	d0ab      	beq.n	8006038 <_printf_i+0x164>
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	079b      	lsls	r3, r3, #30
 80060e4:	d413      	bmi.n	800610e <_printf_i+0x23a>
 80060e6:	68e0      	ldr	r0, [r4, #12]
 80060e8:	9b03      	ldr	r3, [sp, #12]
 80060ea:	4298      	cmp	r0, r3
 80060ec:	bfb8      	it	lt
 80060ee:	4618      	movlt	r0, r3
 80060f0:	e7a4      	b.n	800603c <_printf_i+0x168>
 80060f2:	2301      	movs	r3, #1
 80060f4:	4632      	mov	r2, r6
 80060f6:	4649      	mov	r1, r9
 80060f8:	4640      	mov	r0, r8
 80060fa:	47d0      	blx	sl
 80060fc:	3001      	adds	r0, #1
 80060fe:	d09b      	beq.n	8006038 <_printf_i+0x164>
 8006100:	3501      	adds	r5, #1
 8006102:	68e3      	ldr	r3, [r4, #12]
 8006104:	9903      	ldr	r1, [sp, #12]
 8006106:	1a5b      	subs	r3, r3, r1
 8006108:	42ab      	cmp	r3, r5
 800610a:	dcf2      	bgt.n	80060f2 <_printf_i+0x21e>
 800610c:	e7eb      	b.n	80060e6 <_printf_i+0x212>
 800610e:	2500      	movs	r5, #0
 8006110:	f104 0619 	add.w	r6, r4, #25
 8006114:	e7f5      	b.n	8006102 <_printf_i+0x22e>
 8006116:	bf00      	nop
 8006118:	080071d9 	.word	0x080071d9
 800611c:	080071ea 	.word	0x080071ea

08006120 <memcpy>:
 8006120:	440a      	add	r2, r1
 8006122:	4291      	cmp	r1, r2
 8006124:	f100 33ff 	add.w	r3, r0, #4294967295
 8006128:	d100      	bne.n	800612c <memcpy+0xc>
 800612a:	4770      	bx	lr
 800612c:	b510      	push	{r4, lr}
 800612e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006132:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006136:	4291      	cmp	r1, r2
 8006138:	d1f9      	bne.n	800612e <memcpy+0xe>
 800613a:	bd10      	pop	{r4, pc}

0800613c <memmove>:
 800613c:	4288      	cmp	r0, r1
 800613e:	b510      	push	{r4, lr}
 8006140:	eb01 0402 	add.w	r4, r1, r2
 8006144:	d902      	bls.n	800614c <memmove+0x10>
 8006146:	4284      	cmp	r4, r0
 8006148:	4623      	mov	r3, r4
 800614a:	d807      	bhi.n	800615c <memmove+0x20>
 800614c:	1e43      	subs	r3, r0, #1
 800614e:	42a1      	cmp	r1, r4
 8006150:	d008      	beq.n	8006164 <memmove+0x28>
 8006152:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006156:	f803 2f01 	strb.w	r2, [r3, #1]!
 800615a:	e7f8      	b.n	800614e <memmove+0x12>
 800615c:	4402      	add	r2, r0
 800615e:	4601      	mov	r1, r0
 8006160:	428a      	cmp	r2, r1
 8006162:	d100      	bne.n	8006166 <memmove+0x2a>
 8006164:	bd10      	pop	{r4, pc}
 8006166:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800616a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800616e:	e7f7      	b.n	8006160 <memmove+0x24>

08006170 <_free_r>:
 8006170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006172:	2900      	cmp	r1, #0
 8006174:	d044      	beq.n	8006200 <_free_r+0x90>
 8006176:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800617a:	9001      	str	r0, [sp, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	f1a1 0404 	sub.w	r4, r1, #4
 8006182:	bfb8      	it	lt
 8006184:	18e4      	addlt	r4, r4, r3
 8006186:	f000 f913 	bl	80063b0 <__malloc_lock>
 800618a:	4a1e      	ldr	r2, [pc, #120]	; (8006204 <_free_r+0x94>)
 800618c:	9801      	ldr	r0, [sp, #4]
 800618e:	6813      	ldr	r3, [r2, #0]
 8006190:	b933      	cbnz	r3, 80061a0 <_free_r+0x30>
 8006192:	6063      	str	r3, [r4, #4]
 8006194:	6014      	str	r4, [r2, #0]
 8006196:	b003      	add	sp, #12
 8006198:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800619c:	f000 b90e 	b.w	80063bc <__malloc_unlock>
 80061a0:	42a3      	cmp	r3, r4
 80061a2:	d908      	bls.n	80061b6 <_free_r+0x46>
 80061a4:	6825      	ldr	r5, [r4, #0]
 80061a6:	1961      	adds	r1, r4, r5
 80061a8:	428b      	cmp	r3, r1
 80061aa:	bf01      	itttt	eq
 80061ac:	6819      	ldreq	r1, [r3, #0]
 80061ae:	685b      	ldreq	r3, [r3, #4]
 80061b0:	1949      	addeq	r1, r1, r5
 80061b2:	6021      	streq	r1, [r4, #0]
 80061b4:	e7ed      	b.n	8006192 <_free_r+0x22>
 80061b6:	461a      	mov	r2, r3
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	b10b      	cbz	r3, 80061c0 <_free_r+0x50>
 80061bc:	42a3      	cmp	r3, r4
 80061be:	d9fa      	bls.n	80061b6 <_free_r+0x46>
 80061c0:	6811      	ldr	r1, [r2, #0]
 80061c2:	1855      	adds	r5, r2, r1
 80061c4:	42a5      	cmp	r5, r4
 80061c6:	d10b      	bne.n	80061e0 <_free_r+0x70>
 80061c8:	6824      	ldr	r4, [r4, #0]
 80061ca:	4421      	add	r1, r4
 80061cc:	1854      	adds	r4, r2, r1
 80061ce:	42a3      	cmp	r3, r4
 80061d0:	6011      	str	r1, [r2, #0]
 80061d2:	d1e0      	bne.n	8006196 <_free_r+0x26>
 80061d4:	681c      	ldr	r4, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	6053      	str	r3, [r2, #4]
 80061da:	4421      	add	r1, r4
 80061dc:	6011      	str	r1, [r2, #0]
 80061de:	e7da      	b.n	8006196 <_free_r+0x26>
 80061e0:	d902      	bls.n	80061e8 <_free_r+0x78>
 80061e2:	230c      	movs	r3, #12
 80061e4:	6003      	str	r3, [r0, #0]
 80061e6:	e7d6      	b.n	8006196 <_free_r+0x26>
 80061e8:	6825      	ldr	r5, [r4, #0]
 80061ea:	1961      	adds	r1, r4, r5
 80061ec:	428b      	cmp	r3, r1
 80061ee:	bf04      	itt	eq
 80061f0:	6819      	ldreq	r1, [r3, #0]
 80061f2:	685b      	ldreq	r3, [r3, #4]
 80061f4:	6063      	str	r3, [r4, #4]
 80061f6:	bf04      	itt	eq
 80061f8:	1949      	addeq	r1, r1, r5
 80061fa:	6021      	streq	r1, [r4, #0]
 80061fc:	6054      	str	r4, [r2, #4]
 80061fe:	e7ca      	b.n	8006196 <_free_r+0x26>
 8006200:	b003      	add	sp, #12
 8006202:	bd30      	pop	{r4, r5, pc}
 8006204:	200005e8 	.word	0x200005e8

08006208 <sbrk_aligned>:
 8006208:	b570      	push	{r4, r5, r6, lr}
 800620a:	4e0e      	ldr	r6, [pc, #56]	; (8006244 <sbrk_aligned+0x3c>)
 800620c:	460c      	mov	r4, r1
 800620e:	6831      	ldr	r1, [r6, #0]
 8006210:	4605      	mov	r5, r0
 8006212:	b911      	cbnz	r1, 800621a <sbrk_aligned+0x12>
 8006214:	f000 f8bc 	bl	8006390 <_sbrk_r>
 8006218:	6030      	str	r0, [r6, #0]
 800621a:	4621      	mov	r1, r4
 800621c:	4628      	mov	r0, r5
 800621e:	f000 f8b7 	bl	8006390 <_sbrk_r>
 8006222:	1c43      	adds	r3, r0, #1
 8006224:	d00a      	beq.n	800623c <sbrk_aligned+0x34>
 8006226:	1cc4      	adds	r4, r0, #3
 8006228:	f024 0403 	bic.w	r4, r4, #3
 800622c:	42a0      	cmp	r0, r4
 800622e:	d007      	beq.n	8006240 <sbrk_aligned+0x38>
 8006230:	1a21      	subs	r1, r4, r0
 8006232:	4628      	mov	r0, r5
 8006234:	f000 f8ac 	bl	8006390 <_sbrk_r>
 8006238:	3001      	adds	r0, #1
 800623a:	d101      	bne.n	8006240 <sbrk_aligned+0x38>
 800623c:	f04f 34ff 	mov.w	r4, #4294967295
 8006240:	4620      	mov	r0, r4
 8006242:	bd70      	pop	{r4, r5, r6, pc}
 8006244:	200005ec 	.word	0x200005ec

08006248 <_malloc_r>:
 8006248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800624c:	1ccd      	adds	r5, r1, #3
 800624e:	f025 0503 	bic.w	r5, r5, #3
 8006252:	3508      	adds	r5, #8
 8006254:	2d0c      	cmp	r5, #12
 8006256:	bf38      	it	cc
 8006258:	250c      	movcc	r5, #12
 800625a:	2d00      	cmp	r5, #0
 800625c:	4607      	mov	r7, r0
 800625e:	db01      	blt.n	8006264 <_malloc_r+0x1c>
 8006260:	42a9      	cmp	r1, r5
 8006262:	d905      	bls.n	8006270 <_malloc_r+0x28>
 8006264:	230c      	movs	r3, #12
 8006266:	603b      	str	r3, [r7, #0]
 8006268:	2600      	movs	r6, #0
 800626a:	4630      	mov	r0, r6
 800626c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006270:	4e2e      	ldr	r6, [pc, #184]	; (800632c <_malloc_r+0xe4>)
 8006272:	f000 f89d 	bl	80063b0 <__malloc_lock>
 8006276:	6833      	ldr	r3, [r6, #0]
 8006278:	461c      	mov	r4, r3
 800627a:	bb34      	cbnz	r4, 80062ca <_malloc_r+0x82>
 800627c:	4629      	mov	r1, r5
 800627e:	4638      	mov	r0, r7
 8006280:	f7ff ffc2 	bl	8006208 <sbrk_aligned>
 8006284:	1c43      	adds	r3, r0, #1
 8006286:	4604      	mov	r4, r0
 8006288:	d14d      	bne.n	8006326 <_malloc_r+0xde>
 800628a:	6834      	ldr	r4, [r6, #0]
 800628c:	4626      	mov	r6, r4
 800628e:	2e00      	cmp	r6, #0
 8006290:	d140      	bne.n	8006314 <_malloc_r+0xcc>
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	4631      	mov	r1, r6
 8006296:	4638      	mov	r0, r7
 8006298:	eb04 0803 	add.w	r8, r4, r3
 800629c:	f000 f878 	bl	8006390 <_sbrk_r>
 80062a0:	4580      	cmp	r8, r0
 80062a2:	d13a      	bne.n	800631a <_malloc_r+0xd2>
 80062a4:	6821      	ldr	r1, [r4, #0]
 80062a6:	3503      	adds	r5, #3
 80062a8:	1a6d      	subs	r5, r5, r1
 80062aa:	f025 0503 	bic.w	r5, r5, #3
 80062ae:	3508      	adds	r5, #8
 80062b0:	2d0c      	cmp	r5, #12
 80062b2:	bf38      	it	cc
 80062b4:	250c      	movcc	r5, #12
 80062b6:	4629      	mov	r1, r5
 80062b8:	4638      	mov	r0, r7
 80062ba:	f7ff ffa5 	bl	8006208 <sbrk_aligned>
 80062be:	3001      	adds	r0, #1
 80062c0:	d02b      	beq.n	800631a <_malloc_r+0xd2>
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	442b      	add	r3, r5
 80062c6:	6023      	str	r3, [r4, #0]
 80062c8:	e00e      	b.n	80062e8 <_malloc_r+0xa0>
 80062ca:	6822      	ldr	r2, [r4, #0]
 80062cc:	1b52      	subs	r2, r2, r5
 80062ce:	d41e      	bmi.n	800630e <_malloc_r+0xc6>
 80062d0:	2a0b      	cmp	r2, #11
 80062d2:	d916      	bls.n	8006302 <_malloc_r+0xba>
 80062d4:	1961      	adds	r1, r4, r5
 80062d6:	42a3      	cmp	r3, r4
 80062d8:	6025      	str	r5, [r4, #0]
 80062da:	bf18      	it	ne
 80062dc:	6059      	strne	r1, [r3, #4]
 80062de:	6863      	ldr	r3, [r4, #4]
 80062e0:	bf08      	it	eq
 80062e2:	6031      	streq	r1, [r6, #0]
 80062e4:	5162      	str	r2, [r4, r5]
 80062e6:	604b      	str	r3, [r1, #4]
 80062e8:	4638      	mov	r0, r7
 80062ea:	f104 060b 	add.w	r6, r4, #11
 80062ee:	f000 f865 	bl	80063bc <__malloc_unlock>
 80062f2:	f026 0607 	bic.w	r6, r6, #7
 80062f6:	1d23      	adds	r3, r4, #4
 80062f8:	1af2      	subs	r2, r6, r3
 80062fa:	d0b6      	beq.n	800626a <_malloc_r+0x22>
 80062fc:	1b9b      	subs	r3, r3, r6
 80062fe:	50a3      	str	r3, [r4, r2]
 8006300:	e7b3      	b.n	800626a <_malloc_r+0x22>
 8006302:	6862      	ldr	r2, [r4, #4]
 8006304:	42a3      	cmp	r3, r4
 8006306:	bf0c      	ite	eq
 8006308:	6032      	streq	r2, [r6, #0]
 800630a:	605a      	strne	r2, [r3, #4]
 800630c:	e7ec      	b.n	80062e8 <_malloc_r+0xa0>
 800630e:	4623      	mov	r3, r4
 8006310:	6864      	ldr	r4, [r4, #4]
 8006312:	e7b2      	b.n	800627a <_malloc_r+0x32>
 8006314:	4634      	mov	r4, r6
 8006316:	6876      	ldr	r6, [r6, #4]
 8006318:	e7b9      	b.n	800628e <_malloc_r+0x46>
 800631a:	230c      	movs	r3, #12
 800631c:	603b      	str	r3, [r7, #0]
 800631e:	4638      	mov	r0, r7
 8006320:	f000 f84c 	bl	80063bc <__malloc_unlock>
 8006324:	e7a1      	b.n	800626a <_malloc_r+0x22>
 8006326:	6025      	str	r5, [r4, #0]
 8006328:	e7de      	b.n	80062e8 <_malloc_r+0xa0>
 800632a:	bf00      	nop
 800632c:	200005e8 	.word	0x200005e8

08006330 <_realloc_r>:
 8006330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006334:	4680      	mov	r8, r0
 8006336:	4614      	mov	r4, r2
 8006338:	460e      	mov	r6, r1
 800633a:	b921      	cbnz	r1, 8006346 <_realloc_r+0x16>
 800633c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006340:	4611      	mov	r1, r2
 8006342:	f7ff bf81 	b.w	8006248 <_malloc_r>
 8006346:	b92a      	cbnz	r2, 8006354 <_realloc_r+0x24>
 8006348:	f7ff ff12 	bl	8006170 <_free_r>
 800634c:	4625      	mov	r5, r4
 800634e:	4628      	mov	r0, r5
 8006350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006354:	f000 f838 	bl	80063c8 <_malloc_usable_size_r>
 8006358:	4284      	cmp	r4, r0
 800635a:	4607      	mov	r7, r0
 800635c:	d802      	bhi.n	8006364 <_realloc_r+0x34>
 800635e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006362:	d812      	bhi.n	800638a <_realloc_r+0x5a>
 8006364:	4621      	mov	r1, r4
 8006366:	4640      	mov	r0, r8
 8006368:	f7ff ff6e 	bl	8006248 <_malloc_r>
 800636c:	4605      	mov	r5, r0
 800636e:	2800      	cmp	r0, #0
 8006370:	d0ed      	beq.n	800634e <_realloc_r+0x1e>
 8006372:	42bc      	cmp	r4, r7
 8006374:	4622      	mov	r2, r4
 8006376:	4631      	mov	r1, r6
 8006378:	bf28      	it	cs
 800637a:	463a      	movcs	r2, r7
 800637c:	f7ff fed0 	bl	8006120 <memcpy>
 8006380:	4631      	mov	r1, r6
 8006382:	4640      	mov	r0, r8
 8006384:	f7ff fef4 	bl	8006170 <_free_r>
 8006388:	e7e1      	b.n	800634e <_realloc_r+0x1e>
 800638a:	4635      	mov	r5, r6
 800638c:	e7df      	b.n	800634e <_realloc_r+0x1e>
	...

08006390 <_sbrk_r>:
 8006390:	b538      	push	{r3, r4, r5, lr}
 8006392:	4d06      	ldr	r5, [pc, #24]	; (80063ac <_sbrk_r+0x1c>)
 8006394:	2300      	movs	r3, #0
 8006396:	4604      	mov	r4, r0
 8006398:	4608      	mov	r0, r1
 800639a:	602b      	str	r3, [r5, #0]
 800639c:	f7fb f824 	bl	80013e8 <_sbrk>
 80063a0:	1c43      	adds	r3, r0, #1
 80063a2:	d102      	bne.n	80063aa <_sbrk_r+0x1a>
 80063a4:	682b      	ldr	r3, [r5, #0]
 80063a6:	b103      	cbz	r3, 80063aa <_sbrk_r+0x1a>
 80063a8:	6023      	str	r3, [r4, #0]
 80063aa:	bd38      	pop	{r3, r4, r5, pc}
 80063ac:	200005f0 	.word	0x200005f0

080063b0 <__malloc_lock>:
 80063b0:	4801      	ldr	r0, [pc, #4]	; (80063b8 <__malloc_lock+0x8>)
 80063b2:	f000 b811 	b.w	80063d8 <__retarget_lock_acquire_recursive>
 80063b6:	bf00      	nop
 80063b8:	200005f4 	.word	0x200005f4

080063bc <__malloc_unlock>:
 80063bc:	4801      	ldr	r0, [pc, #4]	; (80063c4 <__malloc_unlock+0x8>)
 80063be:	f000 b80c 	b.w	80063da <__retarget_lock_release_recursive>
 80063c2:	bf00      	nop
 80063c4:	200005f4 	.word	0x200005f4

080063c8 <_malloc_usable_size_r>:
 80063c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063cc:	1f18      	subs	r0, r3, #4
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	bfbc      	itt	lt
 80063d2:	580b      	ldrlt	r3, [r1, r0]
 80063d4:	18c0      	addlt	r0, r0, r3
 80063d6:	4770      	bx	lr

080063d8 <__retarget_lock_acquire_recursive>:
 80063d8:	4770      	bx	lr

080063da <__retarget_lock_release_recursive>:
 80063da:	4770      	bx	lr

080063dc <_init>:
 80063dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063de:	bf00      	nop
 80063e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e2:	bc08      	pop	{r3}
 80063e4:	469e      	mov	lr, r3
 80063e6:	4770      	bx	lr

080063e8 <_fini>:
 80063e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ea:	bf00      	nop
 80063ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ee:	bc08      	pop	{r3}
 80063f0:	469e      	mov	lr, r3
 80063f2:	4770      	bx	lr
