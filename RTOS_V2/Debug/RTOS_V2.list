
RTOS_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009650  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  080097e0  080097e0  000197e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c2c  08009c2c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009c2c  08009c2c  00019c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c34  08009c34  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c34  08009c34  00019c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c38  08009c38  00019c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009c3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf0  200001d8  08009e14  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001dc8  08009e14  00021dc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b654  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039c9  00000000  00000000  0003b89f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001748  00000000  00000000  0003f268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001208  00000000  00000000  000409b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029d1e  00000000  00000000  00041bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aa1f  00000000  00000000  0006b8d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fe9ab  00000000  00000000  000862f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007204  00000000  00000000  00184ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0018bea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080097c8 	.word	0x080097c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	080097c8 	.word	0x080097c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000eac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000eb0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d013      	beq.n	8000ee4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ebc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ec0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ec4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d00b      	beq.n	8000ee4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ecc:	e000      	b.n	8000ed0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ece:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ed0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d0f9      	beq.n	8000ece <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000eda:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ee4:	687b      	ldr	r3, [r7, #4]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <_write>:
	}
	xTaskResumeAll();
}
/*-----------------------------------------------------------*/
int _write(int file, char *ptr, int len)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	60f8      	str	r0, [r7, #12]
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	e009      	b.n	8000f1c <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	1c5a      	adds	r2, r3, #1
 8000f0c:	60ba      	str	r2, [r7, #8]
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ffc7 	bl	8000ea4 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	dbf1      	blt.n	8000f08 <_write+0x16>
  return len;
 8000f24:	687b      	ldr	r3, [r7, #4]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f34:	f000 fb7a 	bl	800162c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f38:	f000 f826 	bl	8000f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3c:	f000 f8a6 	bl	800108c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f40:	f000 f874 	bl	800102c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f44:	f003 f974 	bl	8004230 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000f48:	4a09      	ldr	r2, [pc, #36]	; (8000f70 <main+0x40>)
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4809      	ldr	r0, [pc, #36]	; (8000f74 <main+0x44>)
 8000f4e:	f003 f9b9 	bl	80042c4 <osThreadNew>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <main+0x48>)
 8000f56:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000f58:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <main+0x4c>)
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4808      	ldr	r0, [pc, #32]	; (8000f80 <main+0x50>)
 8000f5e:	f003 f9b1 	bl	80042c4 <osThreadNew>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <main+0x54>)
 8000f66:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f68:	f003 f986 	bl	8004278 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <main+0x3c>
 8000f6e:	bf00      	nop
 8000f70:	08009828 	.word	0x08009828
 8000f74:	08001159 	.word	0x08001159
 8000f78:	20000278 	.word	0x20000278
 8000f7c:	0800984c 	.word	0x0800984c
 8000f80:	0800119d 	.word	0x0800119d
 8000f84:	2000027c 	.word	0x2000027c

08000f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b096      	sub	sp, #88	; 0x58
 8000f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	2244      	movs	r2, #68	; 0x44
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f006 fc6d 	bl	8007876 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000faa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fae:	f000 fe2f 	bl	8001c10 <HAL_PWREx_ControlVoltageScaling>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fb8:	f000 f92e 	bl	8001218 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc6:	2310      	movs	r3, #16
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000fd6:	230a      	movs	r3, #10
 8000fd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fda:	2307      	movs	r3, #7
 8000fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 fe66 	bl	8001cbc <HAL_RCC_OscConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ff6:	f000 f90f 	bl	8001218 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffe:	2303      	movs	r3, #3
 8001000:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800100e:	463b      	mov	r3, r7
 8001010:	2104      	movs	r1, #4
 8001012:	4618      	mov	r0, r3
 8001014:	f001 fa2e 	bl	8002474 <HAL_RCC_ClockConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800101e:	f000 f8fb 	bl	8001218 <Error_Handler>
  }
}
 8001022:	bf00      	nop
 8001024:	3758      	adds	r7, #88	; 0x58
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_USART2_UART_Init+0x58>)
 8001032:	4a15      	ldr	r2, [pc, #84]	; (8001088 <MX_USART2_UART_Init+0x5c>)
 8001034:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <MX_USART2_UART_Init+0x58>)
 8001038:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800103c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_USART2_UART_Init+0x58>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_USART2_UART_Init+0x58>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <MX_USART2_UART_Init+0x58>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_USART2_UART_Init+0x58>)
 8001052:	220c      	movs	r2, #12
 8001054:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <MX_USART2_UART_Init+0x58>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_USART2_UART_Init+0x58>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <MX_USART2_UART_Init+0x58>)
 8001064:	2200      	movs	r2, #0
 8001066:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_USART2_UART_Init+0x58>)
 800106a:	2200      	movs	r2, #0
 800106c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_USART2_UART_Init+0x58>)
 8001070:	f002 fbe4 	bl	800383c <HAL_UART_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800107a:	f000 f8cd 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200001f4 	.word	0x200001f4
 8001088:	40004400 	.word	0x40004400

0800108c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a2:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <MX_GPIO_Init+0xc4>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	4a2a      	ldr	r2, [pc, #168]	; (8001150 <MX_GPIO_Init+0xc4>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ae:	4b28      	ldr	r3, [pc, #160]	; (8001150 <MX_GPIO_Init+0xc4>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ba:	4b25      	ldr	r3, [pc, #148]	; (8001150 <MX_GPIO_Init+0xc4>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	4a24      	ldr	r2, [pc, #144]	; (8001150 <MX_GPIO_Init+0xc4>)
 80010c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c6:	4b22      	ldr	r3, [pc, #136]	; (8001150 <MX_GPIO_Init+0xc4>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <MX_GPIO_Init+0xc4>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	4a1e      	ldr	r2, [pc, #120]	; (8001150 <MX_GPIO_Init+0xc4>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <MX_GPIO_Init+0xc4>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <MX_GPIO_Init+0xc4>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	4a18      	ldr	r2, [pc, #96]	; (8001150 <MX_GPIO_Init+0xc4>)
 80010f0:	f043 0302 	orr.w	r3, r3, #2
 80010f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <MX_GPIO_Init+0xc4>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	2120      	movs	r1, #32
 8001106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110a:	f000 fd5b 	bl	8001bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800110e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001114:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	480b      	ldr	r0, [pc, #44]	; (8001154 <MX_GPIO_Init+0xc8>)
 8001126:	f000 fba3 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800112a:	2320      	movs	r3, #32
 800112c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112e:	2301      	movs	r3, #1
 8001130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001144:	f000 fb94 	bl	8001870 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	; 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40021000 	.word	0x40021000
 8001154:	48000800 	.word	0x48000800

08001158 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	//vPrintStringAndNumber(*pcTextForTask1, count);
	//send_msg("1");
	//vPrintString(pcTaskName);
	printf("%s%d\n", "Task 1 run ", (int)count);
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <StartTask1+0x38>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	490b      	ldr	r1, [pc, #44]	; (8001194 <StartTask1+0x3c>)
 8001168:	480b      	ldr	r0, [pc, #44]	; (8001198 <StartTask1+0x40>)
 800116a:	f006 fb2f 	bl	80077cc <iprintf>
	//HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
    //HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    (count == 10000) ? count = 0: count ++;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <StartTask1+0x38>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f242 7210 	movw	r2, #10000	; 0x2710
 8001176:	4293      	cmp	r3, r2
 8001178:	d103      	bne.n	8001182 <StartTask1+0x2a>
 800117a:	4b05      	ldr	r3, [pc, #20]	; (8001190 <StartTask1+0x38>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	e7ee      	b.n	8001160 <StartTask1+0x8>
 8001182:	4b03      	ldr	r3, [pc, #12]	; (8001190 <StartTask1+0x38>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	4a01      	ldr	r2, [pc, #4]	; (8001190 <StartTask1+0x38>)
 800118a:	6013      	str	r3, [r2, #0]
	printf("%s%d\n", "Task 1 run ", (int)count);
 800118c:	e7e8      	b.n	8001160 <StartTask1+0x8>
 800118e:	bf00      	nop
 8001190:	20000280 	.word	0x20000280
 8001194:	080097f0 	.word	0x080097f0
 8001198:	080097fc 	.word	0x080097fc

0800119c <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  //char *pcTaskName;
  //const char *pcTaskName = "Task 2 is running";
  //pcTaskName = *pcTextForTask2;
  portTickType xLastWakeTime;
  xLastWakeTime = xTaskGetTickCount();
 80011a4:	f004 fa46 	bl	8005634 <xTaskGetTickCount>
 80011a8:	4603      	mov	r3, r0
 80011aa:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	//vPrintStringAndNumber(*pcTextForTask2, count1);
	//vPrintString(pcTaskName);
	printf("%s%d\n", "Task 2 run ", (int)count1);
 80011ac:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <StartTask2+0x4c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	490e      	ldr	r1, [pc, #56]	; (80011ec <StartTask2+0x50>)
 80011b4:	480e      	ldr	r0, [pc, #56]	; (80011f0 <StartTask2+0x54>)
 80011b6:	f006 fb09 	bl	80077cc <iprintf>
	//send_msg("2");
	(count1 == 10000) ? count1 = 0: count1 ++;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <StartTask2+0x4c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f242 7210 	movw	r2, #10000	; 0x2710
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d103      	bne.n	80011ce <StartTask2+0x32>
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <StartTask2+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	e004      	b.n	80011d8 <StartTask2+0x3c>
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <StartTask2+0x4c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	3301      	adds	r3, #1
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <StartTask2+0x4c>)
 80011d6:	6013      	str	r3, [r2, #0]
	//vTaskDelay( 250 / portTICK_RATE_MS );
	vTaskDelayUntil( &xLastWakeTime, ( 5 / portTICK_RATE_MS ) );
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	2105      	movs	r1, #5
 80011de:	4618      	mov	r0, r3
 80011e0:	f004 f88e 	bl	8005300 <vTaskDelayUntil>
	printf("%s%d\n", "Task 2 run ", (int)count1);
 80011e4:	e7e2      	b.n	80011ac <StartTask2+0x10>
 80011e6:	bf00      	nop
 80011e8:	20000284 	.word	0x20000284
 80011ec:	08009804 	.word	0x08009804
 80011f0:	080097fc 	.word	0x080097fc

080011f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a04      	ldr	r2, [pc, #16]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d101      	bne.n	800120a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001206:	f000 fa31 	bl	800166c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40001000 	.word	0x40001000

08001218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800121c:	b672      	cpsid	i
}
 800121e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001220:	e7fe      	b.n	8001220 <Error_Handler+0x8>
	...

08001224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <HAL_MspInit+0x4c>)
 800122c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800122e:	4a10      	ldr	r2, [pc, #64]	; (8001270 <HAL_MspInit+0x4c>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6613      	str	r3, [r2, #96]	; 0x60
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <HAL_MspInit+0x4c>)
 8001238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <HAL_MspInit+0x4c>)
 8001244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <HAL_MspInit+0x4c>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124c:	6593      	str	r3, [r2, #88]	; 0x58
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <HAL_MspInit+0x4c>)
 8001250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	210f      	movs	r1, #15
 800125e:	f06f 0001 	mvn.w	r0, #1
 8001262:	f000 fadb 	bl	800181c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000

08001274 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b0ac      	sub	sp, #176	; 0xb0
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2288      	movs	r2, #136	; 0x88
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f006 faee 	bl	8007876 <memset>
  if(huart->Instance==USART2)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a21      	ldr	r2, [pc, #132]	; (8001324 <HAL_UART_MspInit+0xb0>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d13b      	bne.n	800131c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012a4:	2302      	movs	r3, #2
 80012a6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4618      	mov	r0, r3
 80012b2:	f001 fb35 	bl	8002920 <HAL_RCCEx_PeriphCLKConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012bc:	f7ff ffac 	bl	8001218 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012c0:	4b19      	ldr	r3, [pc, #100]	; (8001328 <HAL_UART_MspInit+0xb4>)
 80012c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c4:	4a18      	ldr	r2, [pc, #96]	; (8001328 <HAL_UART_MspInit+0xb4>)
 80012c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ca:	6593      	str	r3, [r2, #88]	; 0x58
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <HAL_UART_MspInit+0xb4>)
 80012ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <HAL_UART_MspInit+0xb4>)
 80012da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012dc:	4a12      	ldr	r2, [pc, #72]	; (8001328 <HAL_UART_MspInit+0xb4>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <HAL_UART_MspInit+0xb4>)
 80012e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012f0:	230c      	movs	r3, #12
 80012f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001308:	2307      	movs	r3, #7
 800130a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001312:	4619      	mov	r1, r3
 8001314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001318:	f000 faaa 	bl	8001870 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800131c:	bf00      	nop
 800131e:	37b0      	adds	r7, #176	; 0xb0
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40004400 	.word	0x40004400
 8001328:	40021000 	.word	0x40021000

0800132c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08e      	sub	sp, #56	; 0x38
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001334:	2300      	movs	r3, #0
 8001336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800133a:	4b34      	ldr	r3, [pc, #208]	; (800140c <HAL_InitTick+0xe0>)
 800133c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133e:	4a33      	ldr	r2, [pc, #204]	; (800140c <HAL_InitTick+0xe0>)
 8001340:	f043 0310 	orr.w	r3, r3, #16
 8001344:	6593      	str	r3, [r2, #88]	; 0x58
 8001346:	4b31      	ldr	r3, [pc, #196]	; (800140c <HAL_InitTick+0xe0>)
 8001348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134a:	f003 0310 	and.w	r3, r3, #16
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001352:	f107 0210 	add.w	r2, r7, #16
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f001 fa4d 	bl	80027fc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001368:	2b00      	cmp	r3, #0
 800136a:	d103      	bne.n	8001374 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800136c:	f001 fa1a 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8001370:	6378      	str	r0, [r7, #52]	; 0x34
 8001372:	e004      	b.n	800137e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001374:	f001 fa16 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8001378:	4603      	mov	r3, r0
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800137e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001380:	4a23      	ldr	r2, [pc, #140]	; (8001410 <HAL_InitTick+0xe4>)
 8001382:	fba2 2303 	umull	r2, r3, r2, r3
 8001386:	0c9b      	lsrs	r3, r3, #18
 8001388:	3b01      	subs	r3, #1
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800138c:	4b21      	ldr	r3, [pc, #132]	; (8001414 <HAL_InitTick+0xe8>)
 800138e:	4a22      	ldr	r2, [pc, #136]	; (8001418 <HAL_InitTick+0xec>)
 8001390:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <HAL_InitTick+0xe8>)
 8001394:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001398:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800139a:	4a1e      	ldr	r2, [pc, #120]	; (8001414 <HAL_InitTick+0xe8>)
 800139c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013a0:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <HAL_InitTick+0xe8>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a6:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <HAL_InitTick+0xe8>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <HAL_InitTick+0xe8>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80013b2:	4818      	ldr	r0, [pc, #96]	; (8001414 <HAL_InitTick+0xe8>)
 80013b4:	f001 ff70 	bl	8003298 <HAL_TIM_Base_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80013be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d11b      	bne.n	80013fe <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80013c6:	4813      	ldr	r0, [pc, #76]	; (8001414 <HAL_InitTick+0xe8>)
 80013c8:	f001 ffc8 	bl	800335c <HAL_TIM_Base_Start_IT>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80013d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d111      	bne.n	80013fe <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013da:	2036      	movs	r0, #54	; 0x36
 80013dc:	f000 fa3a 	bl	8001854 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b0f      	cmp	r3, #15
 80013e4:	d808      	bhi.n	80013f8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80013e6:	2200      	movs	r2, #0
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	2036      	movs	r0, #54	; 0x36
 80013ec:	f000 fa16 	bl	800181c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013f0:	4a0a      	ldr	r2, [pc, #40]	; (800141c <HAL_InitTick+0xf0>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	e002      	b.n	80013fe <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001402:	4618      	mov	r0, r3
 8001404:	3738      	adds	r7, #56	; 0x38
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000
 8001410:	431bde83 	.word	0x431bde83
 8001414:	20000288 	.word	0x20000288
 8001418:	40001000 	.word	0x40001000
 800141c:	20000004 	.word	0x20000004

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <NMI_Handler+0x4>

08001426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <MemManage_Handler+0x4>

08001432 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <UsageFault_Handler+0x4>

0800143e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <TIM6_DAC_IRQHandler+0x10>)
 8001452:	f001 fff3 	bl	800343c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000288 	.word	0x20000288

08001460 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return 1;
 8001464:	2301      	movs	r3, #1
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <_kill>:

int _kill(int pid, int sig)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800147a:	f006 faa5 	bl	80079c8 <__errno>
 800147e:	4603      	mov	r3, r0
 8001480:	2216      	movs	r2, #22
 8001482:	601a      	str	r2, [r3, #0]
  return -1;
 8001484:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <_exit>:

void _exit (int status)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001498:	f04f 31ff 	mov.w	r1, #4294967295
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff ffe7 	bl	8001470 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014a2:	e7fe      	b.n	80014a2 <_exit+0x12>

080014a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	e00a      	b.n	80014cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014b6:	f3af 8000 	nop.w
 80014ba:	4601      	mov	r1, r0
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	60ba      	str	r2, [r7, #8]
 80014c2:	b2ca      	uxtb	r2, r1
 80014c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3301      	adds	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	dbf0      	blt.n	80014b6 <_read+0x12>
  }

  return len;
 80014d4:	687b      	ldr	r3, [r7, #4]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <_close>:
  }
  return len;
}

int _close(int file)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001506:	605a      	str	r2, [r3, #4]
  return 0;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <_isatty>:

int _isatty(int file)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001550:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <_sbrk+0x5c>)
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <_sbrk+0x60>)
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <_sbrk+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <_sbrk+0x64>)
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <_sbrk+0x68>)
 8001568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	429a      	cmp	r2, r3
 8001576:	d207      	bcs.n	8001588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001578:	f006 fa26 	bl	80079c8 <__errno>
 800157c:	4603      	mov	r3, r0
 800157e:	220c      	movs	r2, #12
 8001580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	e009      	b.n	800159c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	4a05      	ldr	r2, [pc, #20]	; (80015ac <_sbrk+0x64>)
 8001598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159a:	68fb      	ldr	r3, [r7, #12]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20018000 	.word	0x20018000
 80015a8:	00000400 	.word	0x00000400
 80015ac:	200002d4 	.word	0x200002d4
 80015b0:	20001dc8 	.word	0x20001dc8

080015b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <SystemInit+0x20>)
 80015ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015be:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <SystemInit+0x20>)
 80015c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001610 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015dc:	f7ff ffea 	bl	80015b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e0:	480c      	ldr	r0, [pc, #48]	; (8001614 <LoopForever+0x6>)
  ldr r1, =_edata
 80015e2:	490d      	ldr	r1, [pc, #52]	; (8001618 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015e4:	4a0d      	ldr	r2, [pc, #52]	; (800161c <LoopForever+0xe>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e8:	e002      	b.n	80015f0 <LoopCopyDataInit>

080015ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ee:	3304      	adds	r3, #4

080015f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f4:	d3f9      	bcc.n	80015ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f6:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015f8:	4c0a      	ldr	r4, [pc, #40]	; (8001624 <LoopForever+0x16>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015fc:	e001      	b.n	8001602 <LoopFillZerobss>

080015fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001600:	3204      	adds	r2, #4

08001602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001604:	d3fb      	bcc.n	80015fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001606:	f006 f9e5 	bl	80079d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800160a:	f7ff fc91 	bl	8000f30 <main>

0800160e <LoopForever>:

LoopForever:
    b LoopForever
 800160e:	e7fe      	b.n	800160e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001610:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001618:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800161c:	08009c3c 	.word	0x08009c3c
  ldr r2, =_sbss
 8001620:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001624:	20001dc8 	.word	0x20001dc8

08001628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001628:	e7fe      	b.n	8001628 <ADC1_2_IRQHandler>
	...

0800162c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <HAL_Init+0x3c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <HAL_Init+0x3c>)
 800163c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001640:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001642:	2003      	movs	r0, #3
 8001644:	f000 f8df 	bl	8001806 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001648:	200f      	movs	r0, #15
 800164a:	f7ff fe6f 	bl	800132c <HAL_InitTick>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	71fb      	strb	r3, [r7, #7]
 8001658:	e001      	b.n	800165e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800165a:	f7ff fde3 	bl	8001224 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800165e:	79fb      	ldrb	r3, [r7, #7]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40022000 	.word	0x40022000

0800166c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_IncTick+0x20>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_IncTick+0x24>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4413      	add	r3, r2
 800167c:	4a04      	ldr	r2, [pc, #16]	; (8001690 <HAL_IncTick+0x24>)
 800167e:	6013      	str	r3, [r2, #0]
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	20000008 	.word	0x20000008
 8001690:	200002d8 	.word	0x200002d8

08001694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return uwTick;
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <HAL_GetTick+0x14>)
 800169a:	681b      	ldr	r3, [r3, #0]
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	200002d8 	.word	0x200002d8

080016ac <__NVIC_SetPriorityGrouping>:
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c8:	4013      	ands	r3, r2
 80016ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016de:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	60d3      	str	r3, [r2, #12]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <__NVIC_GetPriorityGrouping>:
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <__NVIC_GetPriorityGrouping+0x18>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	f003 0307 	and.w	r3, r3, #7
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_EnableIRQ>:
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	2b00      	cmp	r3, #0
 8001720:	db0b      	blt.n	800173a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	f003 021f 	and.w	r2, r3, #31
 8001728:	4907      	ldr	r1, [pc, #28]	; (8001748 <__NVIC_EnableIRQ+0x38>)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	095b      	lsrs	r3, r3, #5
 8001730:	2001      	movs	r0, #1
 8001732:	fa00 f202 	lsl.w	r2, r0, r2
 8001736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000e100 	.word	0xe000e100

0800174c <__NVIC_SetPriority>:
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	6039      	str	r1, [r7, #0]
 8001756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	2b00      	cmp	r3, #0
 800175e:	db0a      	blt.n	8001776 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	490c      	ldr	r1, [pc, #48]	; (8001798 <__NVIC_SetPriority+0x4c>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	0112      	lsls	r2, r2, #4
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	440b      	add	r3, r1
 8001770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001774:	e00a      	b.n	800178c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4908      	ldr	r1, [pc, #32]	; (800179c <__NVIC_SetPriority+0x50>)
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	3b04      	subs	r3, #4
 8001784:	0112      	lsls	r2, r2, #4
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	440b      	add	r3, r1
 800178a:	761a      	strb	r2, [r3, #24]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000e100 	.word	0xe000e100
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <NVIC_EncodePriority>:
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	; 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f1c3 0307 	rsb	r3, r3, #7
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	bf28      	it	cs
 80017be:	2304      	movcs	r3, #4
 80017c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3304      	adds	r3, #4
 80017c6:	2b06      	cmp	r3, #6
 80017c8:	d902      	bls.n	80017d0 <NVIC_EncodePriority+0x30>
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3b03      	subs	r3, #3
 80017ce:	e000      	b.n	80017d2 <NVIC_EncodePriority+0x32>
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43da      	mvns	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	401a      	ands	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	43d9      	mvns	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	4313      	orrs	r3, r2
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3724      	adds	r7, #36	; 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ff4c 	bl	80016ac <__NVIC_SetPriorityGrouping>
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
 8001828:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800182e:	f7ff ff61 	bl	80016f4 <__NVIC_GetPriorityGrouping>
 8001832:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	68b9      	ldr	r1, [r7, #8]
 8001838:	6978      	ldr	r0, [r7, #20]
 800183a:	f7ff ffb1 	bl	80017a0 <NVIC_EncodePriority>
 800183e:	4602      	mov	r2, r0
 8001840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001844:	4611      	mov	r1, r2
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ff80 	bl	800174c <__NVIC_SetPriority>
}
 800184c:	bf00      	nop
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ff54 	bl	8001710 <__NVIC_EnableIRQ>
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001870:	b480      	push	{r7}
 8001872:	b087      	sub	sp, #28
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800187e:	e17f      	b.n	8001b80 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	2101      	movs	r1, #1
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	fa01 f303 	lsl.w	r3, r1, r3
 800188c:	4013      	ands	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 8171 	beq.w	8001b7a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d005      	beq.n	80018b0 <HAL_GPIO_Init+0x40>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d130      	bne.n	8001912 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	2203      	movs	r2, #3
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	68da      	ldr	r2, [r3, #12]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018e6:	2201      	movs	r2, #1
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	091b      	lsrs	r3, r3, #4
 80018fc:	f003 0201 	and.w	r2, r3, #1
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	2b03      	cmp	r3, #3
 800191c:	d118      	bne.n	8001950 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001922:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001924:	2201      	movs	r2, #1
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	08db      	lsrs	r3, r3, #3
 800193a:	f003 0201 	and.w	r2, r3, #1
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	2b03      	cmp	r3, #3
 800195a:	d017      	beq.n	800198c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	2203      	movs	r2, #3
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d123      	bne.n	80019e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	08da      	lsrs	r2, r3, #3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3208      	adds	r2, #8
 80019a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	220f      	movs	r2, #15
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	691a      	ldr	r2, [r3, #16]
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	08da      	lsrs	r2, r3, #3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3208      	adds	r2, #8
 80019da:	6939      	ldr	r1, [r7, #16]
 80019dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	2203      	movs	r2, #3
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0203 	and.w	r2, r3, #3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 80ac 	beq.w	8001b7a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a22:	4b5f      	ldr	r3, [pc, #380]	; (8001ba0 <HAL_GPIO_Init+0x330>)
 8001a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a26:	4a5e      	ldr	r2, [pc, #376]	; (8001ba0 <HAL_GPIO_Init+0x330>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a2e:	4b5c      	ldr	r3, [pc, #368]	; (8001ba0 <HAL_GPIO_Init+0x330>)
 8001a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a3a:	4a5a      	ldr	r2, [pc, #360]	; (8001ba4 <HAL_GPIO_Init+0x334>)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	3302      	adds	r3, #2
 8001a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a46:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	220f      	movs	r2, #15
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a64:	d025      	beq.n	8001ab2 <HAL_GPIO_Init+0x242>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4f      	ldr	r2, [pc, #316]	; (8001ba8 <HAL_GPIO_Init+0x338>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d01f      	beq.n	8001aae <HAL_GPIO_Init+0x23e>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4e      	ldr	r2, [pc, #312]	; (8001bac <HAL_GPIO_Init+0x33c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d019      	beq.n	8001aaa <HAL_GPIO_Init+0x23a>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a4d      	ldr	r2, [pc, #308]	; (8001bb0 <HAL_GPIO_Init+0x340>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d013      	beq.n	8001aa6 <HAL_GPIO_Init+0x236>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a4c      	ldr	r2, [pc, #304]	; (8001bb4 <HAL_GPIO_Init+0x344>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d00d      	beq.n	8001aa2 <HAL_GPIO_Init+0x232>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a4b      	ldr	r2, [pc, #300]	; (8001bb8 <HAL_GPIO_Init+0x348>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d007      	beq.n	8001a9e <HAL_GPIO_Init+0x22e>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a4a      	ldr	r2, [pc, #296]	; (8001bbc <HAL_GPIO_Init+0x34c>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d101      	bne.n	8001a9a <HAL_GPIO_Init+0x22a>
 8001a96:	2306      	movs	r3, #6
 8001a98:	e00c      	b.n	8001ab4 <HAL_GPIO_Init+0x244>
 8001a9a:	2307      	movs	r3, #7
 8001a9c:	e00a      	b.n	8001ab4 <HAL_GPIO_Init+0x244>
 8001a9e:	2305      	movs	r3, #5
 8001aa0:	e008      	b.n	8001ab4 <HAL_GPIO_Init+0x244>
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	e006      	b.n	8001ab4 <HAL_GPIO_Init+0x244>
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e004      	b.n	8001ab4 <HAL_GPIO_Init+0x244>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e002      	b.n	8001ab4 <HAL_GPIO_Init+0x244>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_GPIO_Init+0x244>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	f002 0203 	and.w	r2, r2, #3
 8001aba:	0092      	lsls	r2, r2, #2
 8001abc:	4093      	lsls	r3, r2
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ac4:	4937      	ldr	r1, [pc, #220]	; (8001ba4 <HAL_GPIO_Init+0x334>)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	089b      	lsrs	r3, r3, #2
 8001aca:	3302      	adds	r3, #2
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ad2:	4b3b      	ldr	r3, [pc, #236]	; (8001bc0 <HAL_GPIO_Init+0x350>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001af6:	4a32      	ldr	r2, [pc, #200]	; (8001bc0 <HAL_GPIO_Init+0x350>)
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001afc:	4b30      	ldr	r3, [pc, #192]	; (8001bc0 <HAL_GPIO_Init+0x350>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b20:	4a27      	ldr	r2, [pc, #156]	; (8001bc0 <HAL_GPIO_Init+0x350>)
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b26:	4b26      	ldr	r3, [pc, #152]	; (8001bc0 <HAL_GPIO_Init+0x350>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b4a:	4a1d      	ldr	r2, [pc, #116]	; (8001bc0 <HAL_GPIO_Init+0x350>)
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b50:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <HAL_GPIO_Init+0x350>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b74:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <HAL_GPIO_Init+0x350>)
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f47f ae78 	bne.w	8001880 <HAL_GPIO_Init+0x10>
  }
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	371c      	adds	r7, #28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40010000 	.word	0x40010000
 8001ba8:	48000400 	.word	0x48000400
 8001bac:	48000800 	.word	0x48000800
 8001bb0:	48000c00 	.word	0x48000c00
 8001bb4:	48001000 	.word	0x48001000
 8001bb8:	48001400 	.word	0x48001400
 8001bbc:	48001800 	.word	0x48001800
 8001bc0:	40010400 	.word	0x40010400

08001bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	807b      	strh	r3, [r7, #2]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd4:	787b      	ldrb	r3, [r7, #1]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bda:	887a      	ldrh	r2, [r7, #2]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001be0:	e002      	b.n	8001be8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001be2:	887a      	ldrh	r2, [r7, #2]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <HAL_PWREx_GetVoltageRange+0x18>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40007000 	.word	0x40007000

08001c10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c1e:	d130      	bne.n	8001c82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c20:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c2c:	d038      	beq.n	8001ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c2e:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c36:	4a1e      	ldr	r2, [pc, #120]	; (8001cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2232      	movs	r2, #50	; 0x32
 8001c44:	fb02 f303 	mul.w	r3, r2, r3
 8001c48:	4a1b      	ldr	r2, [pc, #108]	; (8001cb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4e:	0c9b      	lsrs	r3, r3, #18
 8001c50:	3301      	adds	r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c54:	e002      	b.n	8001c5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c5c:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c68:	d102      	bne.n	8001c70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1f2      	bne.n	8001c56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c70:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c7c:	d110      	bne.n	8001ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e00f      	b.n	8001ca2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c8e:	d007      	beq.n	8001ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c90:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c98:	4a05      	ldr	r2, [pc, #20]	; (8001cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40007000 	.word	0x40007000
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	431bde83 	.word	0x431bde83

08001cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e3ca      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cce:	4b97      	ldr	r3, [pc, #604]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
 8001cd6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cd8:	4b94      	ldr	r3, [pc, #592]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 80e4 	beq.w	8001eb8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d007      	beq.n	8001d06 <HAL_RCC_OscConfig+0x4a>
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2b0c      	cmp	r3, #12
 8001cfa:	f040 808b 	bne.w	8001e14 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	f040 8087 	bne.w	8001e14 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d06:	4b89      	ldr	r3, [pc, #548]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d005      	beq.n	8001d1e <HAL_RCC_OscConfig+0x62>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e3a2      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1a      	ldr	r2, [r3, #32]
 8001d22:	4b82      	ldr	r3, [pc, #520]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d004      	beq.n	8001d38 <HAL_RCC_OscConfig+0x7c>
 8001d2e:	4b7f      	ldr	r3, [pc, #508]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d36:	e005      	b.n	8001d44 <HAL_RCC_OscConfig+0x88>
 8001d38:	4b7c      	ldr	r3, [pc, #496]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d3e:	091b      	lsrs	r3, r3, #4
 8001d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d223      	bcs.n	8001d90 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 fd87 	bl	8002860 <RCC_SetFlashLatencyFromMSIRange>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e383      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d5c:	4b73      	ldr	r3, [pc, #460]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a72      	ldr	r2, [pc, #456]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d62:	f043 0308 	orr.w	r3, r3, #8
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	4b70      	ldr	r3, [pc, #448]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	496d      	ldr	r1, [pc, #436]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d7a:	4b6c      	ldr	r3, [pc, #432]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	4968      	ldr	r1, [pc, #416]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	604b      	str	r3, [r1, #4]
 8001d8e:	e025      	b.n	8001ddc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d90:	4b66      	ldr	r3, [pc, #408]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a65      	ldr	r2, [pc, #404]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d96:	f043 0308 	orr.w	r3, r3, #8
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	4b63      	ldr	r3, [pc, #396]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	4960      	ldr	r1, [pc, #384]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dae:	4b5f      	ldr	r3, [pc, #380]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	021b      	lsls	r3, r3, #8
 8001dbc:	495b      	ldr	r1, [pc, #364]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d109      	bne.n	8001ddc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 fd47 	bl	8002860 <RCC_SetFlashLatencyFromMSIRange>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e343      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ddc:	f000 fc4a 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8001de0:	4602      	mov	r2, r0
 8001de2:	4b52      	ldr	r3, [pc, #328]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	091b      	lsrs	r3, r3, #4
 8001de8:	f003 030f 	and.w	r3, r3, #15
 8001dec:	4950      	ldr	r1, [pc, #320]	; (8001f30 <HAL_RCC_OscConfig+0x274>)
 8001dee:	5ccb      	ldrb	r3, [r1, r3]
 8001df0:	f003 031f 	and.w	r3, r3, #31
 8001df4:	fa22 f303 	lsr.w	r3, r2, r3
 8001df8:	4a4e      	ldr	r2, [pc, #312]	; (8001f34 <HAL_RCC_OscConfig+0x278>)
 8001dfa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001dfc:	4b4e      	ldr	r3, [pc, #312]	; (8001f38 <HAL_RCC_OscConfig+0x27c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fa93 	bl	800132c <HAL_InitTick>
 8001e06:	4603      	mov	r3, r0
 8001e08:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d052      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	e327      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d032      	beq.n	8001e82 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e1c:	4b43      	ldr	r3, [pc, #268]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a42      	ldr	r2, [pc, #264]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e28:	f7ff fc34 	bl	8001694 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e30:	f7ff fc30 	bl	8001694 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e310      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e42:	4b3a      	ldr	r3, [pc, #232]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e4e:	4b37      	ldr	r3, [pc, #220]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a36      	ldr	r2, [pc, #216]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e54:	f043 0308 	orr.w	r3, r3, #8
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	4b34      	ldr	r3, [pc, #208]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4931      	ldr	r1, [pc, #196]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e6c:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	021b      	lsls	r3, r3, #8
 8001e7a:	492c      	ldr	r1, [pc, #176]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
 8001e80:	e01a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e82:	4b2a      	ldr	r3, [pc, #168]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a29      	ldr	r2, [pc, #164]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e8e:	f7ff fc01 	bl	8001694 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e96:	f7ff fbfd 	bl	8001694 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e2dd      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ea8:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1f0      	bne.n	8001e96 <HAL_RCC_OscConfig+0x1da>
 8001eb4:	e000      	b.n	8001eb8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001eb6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d074      	beq.n	8001fae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d005      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x21a>
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	2b0c      	cmp	r3, #12
 8001ece:	d10e      	bne.n	8001eee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	d10b      	bne.n	8001eee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d064      	beq.n	8001fac <HAL_RCC_OscConfig+0x2f0>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d160      	bne.n	8001fac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e2ba      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef6:	d106      	bne.n	8001f06 <HAL_RCC_OscConfig+0x24a>
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	e026      	b.n	8001f54 <HAL_RCC_OscConfig+0x298>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f0e:	d115      	bne.n	8001f3c <HAL_RCC_OscConfig+0x280>
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001f16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a02      	ldr	r2, [pc, #8]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	e014      	b.n	8001f54 <HAL_RCC_OscConfig+0x298>
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	08009870 	.word	0x08009870
 8001f34:	20000000 	.word	0x20000000
 8001f38:	20000004 	.word	0x20000004
 8001f3c:	4ba0      	ldr	r3, [pc, #640]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a9f      	ldr	r2, [pc, #636]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	4b9d      	ldr	r3, [pc, #628]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a9c      	ldr	r2, [pc, #624]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d013      	beq.n	8001f84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5c:	f7ff fb9a 	bl	8001694 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f64:	f7ff fb96 	bl	8001694 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	; 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e276      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f76:	4b92      	ldr	r3, [pc, #584]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x2a8>
 8001f82:	e014      	b.n	8001fae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7ff fb86 	bl	8001694 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7ff fb82 	bl	8001694 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	; 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e262      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f9e:	4b88      	ldr	r3, [pc, #544]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x2d0>
 8001faa:	e000      	b.n	8001fae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d060      	beq.n	800207c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_OscConfig+0x310>
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	2b0c      	cmp	r3, #12
 8001fc4:	d119      	bne.n	8001ffa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d116      	bne.n	8001ffa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fcc:	4b7c      	ldr	r3, [pc, #496]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x328>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e23f      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe4:	4b76      	ldr	r3, [pc, #472]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	061b      	lsls	r3, r3, #24
 8001ff2:	4973      	ldr	r1, [pc, #460]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ff8:	e040      	b.n	800207c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d023      	beq.n	800204a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002002:	4b6f      	ldr	r3, [pc, #444]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a6e      	ldr	r2, [pc, #440]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200e:	f7ff fb41 	bl	8001694 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002016:	f7ff fb3d 	bl	8001694 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e21d      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002028:	4b65      	ldr	r3, [pc, #404]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002034:	4b62      	ldr	r3, [pc, #392]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	061b      	lsls	r3, r3, #24
 8002042:	495f      	ldr	r1, [pc, #380]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
 8002048:	e018      	b.n	800207c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204a:	4b5d      	ldr	r3, [pc, #372]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a5c      	ldr	r2, [pc, #368]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002056:	f7ff fb1d 	bl	8001694 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205e:	f7ff fb19 	bl	8001694 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e1f9      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002070:	4b53      	ldr	r3, [pc, #332]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f0      	bne.n	800205e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b00      	cmp	r3, #0
 8002086:	d03c      	beq.n	8002102 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01c      	beq.n	80020ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002090:	4b4b      	ldr	r3, [pc, #300]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002096:	4a4a      	ldr	r2, [pc, #296]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a0:	f7ff faf8 	bl	8001694 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a8:	f7ff faf4 	bl	8001694 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e1d4      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020ba:	4b41      	ldr	r3, [pc, #260]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 80020bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0ef      	beq.n	80020a8 <HAL_RCC_OscConfig+0x3ec>
 80020c8:	e01b      	b.n	8002102 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ca:	4b3d      	ldr	r3, [pc, #244]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 80020cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020d0:	4a3b      	ldr	r2, [pc, #236]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 80020d2:	f023 0301 	bic.w	r3, r3, #1
 80020d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020da:	f7ff fadb 	bl	8001694 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e2:	f7ff fad7 	bl	8001694 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e1b7      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020f4:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 80020f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1ef      	bne.n	80020e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 80a6 	beq.w	800225c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002110:	2300      	movs	r3, #0
 8002112:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002114:	4b2a      	ldr	r3, [pc, #168]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10d      	bne.n	800213c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002120:	4b27      	ldr	r3, [pc, #156]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002124:	4a26      	ldr	r2, [pc, #152]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212a:	6593      	str	r3, [r2, #88]	; 0x58
 800212c:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 800212e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002138:	2301      	movs	r3, #1
 800213a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800213c:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <HAL_RCC_OscConfig+0x508>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002144:	2b00      	cmp	r3, #0
 8002146:	d118      	bne.n	800217a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002148:	4b1e      	ldr	r3, [pc, #120]	; (80021c4 <HAL_RCC_OscConfig+0x508>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a1d      	ldr	r2, [pc, #116]	; (80021c4 <HAL_RCC_OscConfig+0x508>)
 800214e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002152:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002154:	f7ff fa9e 	bl	8001694 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800215c:	f7ff fa9a 	bl	8001694 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e17a      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <HAL_RCC_OscConfig+0x508>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d108      	bne.n	8002194 <HAL_RCC_OscConfig+0x4d8>
 8002182:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002188:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002192:	e029      	b.n	80021e8 <HAL_RCC_OscConfig+0x52c>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b05      	cmp	r3, #5
 800219a:	d115      	bne.n	80021c8 <HAL_RCC_OscConfig+0x50c>
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 800219e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a2:	4a07      	ldr	r2, [pc, #28]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 80021a4:	f043 0304 	orr.w	r3, r3, #4
 80021a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021ac:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 80021ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b2:	4a03      	ldr	r2, [pc, #12]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021bc:	e014      	b.n	80021e8 <HAL_RCC_OscConfig+0x52c>
 80021be:	bf00      	nop
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40007000 	.word	0x40007000
 80021c8:	4b9c      	ldr	r3, [pc, #624]	; (800243c <HAL_RCC_OscConfig+0x780>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ce:	4a9b      	ldr	r2, [pc, #620]	; (800243c <HAL_RCC_OscConfig+0x780>)
 80021d0:	f023 0301 	bic.w	r3, r3, #1
 80021d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021d8:	4b98      	ldr	r3, [pc, #608]	; (800243c <HAL_RCC_OscConfig+0x780>)
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021de:	4a97      	ldr	r2, [pc, #604]	; (800243c <HAL_RCC_OscConfig+0x780>)
 80021e0:	f023 0304 	bic.w	r3, r3, #4
 80021e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d016      	beq.n	800221e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f0:	f7ff fa50 	bl	8001694 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021f6:	e00a      	b.n	800220e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f8:	f7ff fa4c 	bl	8001694 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f241 3288 	movw	r2, #5000	; 0x1388
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e12a      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800220e:	4b8b      	ldr	r3, [pc, #556]	; (800243c <HAL_RCC_OscConfig+0x780>)
 8002210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0ed      	beq.n	80021f8 <HAL_RCC_OscConfig+0x53c>
 800221c:	e015      	b.n	800224a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221e:	f7ff fa39 	bl	8001694 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002224:	e00a      	b.n	800223c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002226:	f7ff fa35 	bl	8001694 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	f241 3288 	movw	r2, #5000	; 0x1388
 8002234:	4293      	cmp	r3, r2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e113      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800223c:	4b7f      	ldr	r3, [pc, #508]	; (800243c <HAL_RCC_OscConfig+0x780>)
 800223e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1ed      	bne.n	8002226 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800224a:	7ffb      	ldrb	r3, [r7, #31]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d105      	bne.n	800225c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002250:	4b7a      	ldr	r3, [pc, #488]	; (800243c <HAL_RCC_OscConfig+0x780>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002254:	4a79      	ldr	r2, [pc, #484]	; (800243c <HAL_RCC_OscConfig+0x780>)
 8002256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800225a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80fe 	beq.w	8002462 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	2b02      	cmp	r3, #2
 800226c:	f040 80d0 	bne.w	8002410 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002270:	4b72      	ldr	r3, [pc, #456]	; (800243c <HAL_RCC_OscConfig+0x780>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f003 0203 	and.w	r2, r3, #3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	429a      	cmp	r2, r3
 8002282:	d130      	bne.n	80022e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	3b01      	subs	r3, #1
 8002290:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002292:	429a      	cmp	r2, r3
 8002294:	d127      	bne.n	80022e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d11f      	bne.n	80022e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022b0:	2a07      	cmp	r2, #7
 80022b2:	bf14      	ite	ne
 80022b4:	2201      	movne	r2, #1
 80022b6:	2200      	moveq	r2, #0
 80022b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d113      	bne.n	80022e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c8:	085b      	lsrs	r3, r3, #1
 80022ca:	3b01      	subs	r3, #1
 80022cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d109      	bne.n	80022e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	085b      	lsrs	r3, r3, #1
 80022de:	3b01      	subs	r3, #1
 80022e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d06e      	beq.n	80023c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	2b0c      	cmp	r3, #12
 80022ea:	d069      	beq.n	80023c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022ec:	4b53      	ldr	r3, [pc, #332]	; (800243c <HAL_RCC_OscConfig+0x780>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d105      	bne.n	8002304 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80022f8:	4b50      	ldr	r3, [pc, #320]	; (800243c <HAL_RCC_OscConfig+0x780>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0ad      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002308:	4b4c      	ldr	r3, [pc, #304]	; (800243c <HAL_RCC_OscConfig+0x780>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a4b      	ldr	r2, [pc, #300]	; (800243c <HAL_RCC_OscConfig+0x780>)
 800230e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002312:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002314:	f7ff f9be 	bl	8001694 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231c:	f7ff f9ba 	bl	8001694 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e09a      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800232e:	4b43      	ldr	r3, [pc, #268]	; (800243c <HAL_RCC_OscConfig+0x780>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800233a:	4b40      	ldr	r3, [pc, #256]	; (800243c <HAL_RCC_OscConfig+0x780>)
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	4b40      	ldr	r3, [pc, #256]	; (8002440 <HAL_RCC_OscConfig+0x784>)
 8002340:	4013      	ands	r3, r2
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800234a:	3a01      	subs	r2, #1
 800234c:	0112      	lsls	r2, r2, #4
 800234e:	4311      	orrs	r1, r2
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002354:	0212      	lsls	r2, r2, #8
 8002356:	4311      	orrs	r1, r2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800235c:	0852      	lsrs	r2, r2, #1
 800235e:	3a01      	subs	r2, #1
 8002360:	0552      	lsls	r2, r2, #21
 8002362:	4311      	orrs	r1, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002368:	0852      	lsrs	r2, r2, #1
 800236a:	3a01      	subs	r2, #1
 800236c:	0652      	lsls	r2, r2, #25
 800236e:	4311      	orrs	r1, r2
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002374:	0912      	lsrs	r2, r2, #4
 8002376:	0452      	lsls	r2, r2, #17
 8002378:	430a      	orrs	r2, r1
 800237a:	4930      	ldr	r1, [pc, #192]	; (800243c <HAL_RCC_OscConfig+0x780>)
 800237c:	4313      	orrs	r3, r2
 800237e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002380:	4b2e      	ldr	r3, [pc, #184]	; (800243c <HAL_RCC_OscConfig+0x780>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a2d      	ldr	r2, [pc, #180]	; (800243c <HAL_RCC_OscConfig+0x780>)
 8002386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800238a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800238c:	4b2b      	ldr	r3, [pc, #172]	; (800243c <HAL_RCC_OscConfig+0x780>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a2a      	ldr	r2, [pc, #168]	; (800243c <HAL_RCC_OscConfig+0x780>)
 8002392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002396:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002398:	f7ff f97c 	bl	8001694 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a0:	f7ff f978 	bl	8001694 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e058      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b2:	4b22      	ldr	r3, [pc, #136]	; (800243c <HAL_RCC_OscConfig+0x780>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023be:	e050      	b.n	8002462 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e04f      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c4:	4b1d      	ldr	r3, [pc, #116]	; (800243c <HAL_RCC_OscConfig+0x780>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d148      	bne.n	8002462 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023d0:	4b1a      	ldr	r3, [pc, #104]	; (800243c <HAL_RCC_OscConfig+0x780>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a19      	ldr	r2, [pc, #100]	; (800243c <HAL_RCC_OscConfig+0x780>)
 80023d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023dc:	4b17      	ldr	r3, [pc, #92]	; (800243c <HAL_RCC_OscConfig+0x780>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4a16      	ldr	r2, [pc, #88]	; (800243c <HAL_RCC_OscConfig+0x780>)
 80023e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023e8:	f7ff f954 	bl	8001694 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f0:	f7ff f950 	bl	8001694 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e030      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <HAL_RCC_OscConfig+0x780>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0x734>
 800240e:	e028      	b.n	8002462 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	2b0c      	cmp	r3, #12
 8002414:	d023      	beq.n	800245e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <HAL_RCC_OscConfig+0x780>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a08      	ldr	r2, [pc, #32]	; (800243c <HAL_RCC_OscConfig+0x780>)
 800241c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002422:	f7ff f937 	bl	8001694 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002428:	e00c      	b.n	8002444 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242a:	f7ff f933 	bl	8001694 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d905      	bls.n	8002444 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e013      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
 800243c:	40021000 	.word	0x40021000
 8002440:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_RCC_OscConfig+0x7b0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1ec      	bne.n	800242a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_RCC_OscConfig+0x7b0>)
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	4905      	ldr	r1, [pc, #20]	; (800246c <HAL_RCC_OscConfig+0x7b0>)
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_RCC_OscConfig+0x7b4>)
 8002458:	4013      	ands	r3, r2
 800245a:	60cb      	str	r3, [r1, #12]
 800245c:	e001      	b.n	8002462 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3720      	adds	r7, #32
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40021000 	.word	0x40021000
 8002470:	feeefffc 	.word	0xfeeefffc

08002474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0e7      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002488:	4b75      	ldr	r3, [pc, #468]	; (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d910      	bls.n	80024b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b72      	ldr	r3, [pc, #456]	; (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 0207 	bic.w	r2, r3, #7
 800249e:	4970      	ldr	r1, [pc, #448]	; (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b6e      	ldr	r3, [pc, #440]	; (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0cf      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d010      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	4b66      	ldr	r3, [pc, #408]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d908      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d4:	4b63      	ldr	r3, [pc, #396]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	4960      	ldr	r1, [pc, #384]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d04c      	beq.n	800258c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d107      	bne.n	800250a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024fa:	4b5a      	ldr	r3, [pc, #360]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d121      	bne.n	800254a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e0a6      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002512:	4b54      	ldr	r3, [pc, #336]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d115      	bne.n	800254a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e09a      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800252a:	4b4e      	ldr	r3, [pc, #312]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d109      	bne.n	800254a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e08e      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800253a:	4b4a      	ldr	r3, [pc, #296]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e086      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800254a:	4b46      	ldr	r3, [pc, #280]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f023 0203 	bic.w	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4943      	ldr	r1, [pc, #268]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 8002558:	4313      	orrs	r3, r2
 800255a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800255c:	f7ff f89a 	bl	8001694 <HAL_GetTick>
 8002560:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	e00a      	b.n	800257a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002564:	f7ff f896 	bl	8001694 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e06e      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	4b3a      	ldr	r3, [pc, #232]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 020c 	and.w	r2, r3, #12
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	429a      	cmp	r2, r3
 800258a:	d1eb      	bne.n	8002564 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d010      	beq.n	80025ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	4b31      	ldr	r3, [pc, #196]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d208      	bcs.n	80025ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a8:	4b2e      	ldr	r3, [pc, #184]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	492b      	ldr	r1, [pc, #172]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025ba:	4b29      	ldr	r3, [pc, #164]	; (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d210      	bcs.n	80025ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c8:	4b25      	ldr	r3, [pc, #148]	; (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f023 0207 	bic.w	r2, r3, #7
 80025d0:	4923      	ldr	r1, [pc, #140]	; (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d8:	4b21      	ldr	r3, [pc, #132]	; (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e036      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d008      	beq.n	8002608 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f6:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	4918      	ldr	r1, [pc, #96]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 8002604:	4313      	orrs	r3, r2
 8002606:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d009      	beq.n	8002628 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002614:	4b13      	ldr	r3, [pc, #76]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	4910      	ldr	r1, [pc, #64]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 8002624:	4313      	orrs	r3, r2
 8002626:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002628:	f000 f824 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 800262c:	4602      	mov	r2, r0
 800262e:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	091b      	lsrs	r3, r3, #4
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	490b      	ldr	r1, [pc, #44]	; (8002668 <HAL_RCC_ClockConfig+0x1f4>)
 800263a:	5ccb      	ldrb	r3, [r1, r3]
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
 8002644:	4a09      	ldr	r2, [pc, #36]	; (800266c <HAL_RCC_ClockConfig+0x1f8>)
 8002646:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <HAL_RCC_ClockConfig+0x1fc>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fe6d 	bl	800132c <HAL_InitTick>
 8002652:	4603      	mov	r3, r0
 8002654:	72fb      	strb	r3, [r7, #11]

  return status;
 8002656:	7afb      	ldrb	r3, [r7, #11]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40022000 	.word	0x40022000
 8002664:	40021000 	.word	0x40021000
 8002668:	08009870 	.word	0x08009870
 800266c:	20000000 	.word	0x20000000
 8002670:	20000004 	.word	0x20000004

08002674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	2300      	movs	r3, #0
 8002680:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002682:	4b3e      	ldr	r3, [pc, #248]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800268c:	4b3b      	ldr	r3, [pc, #236]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_GetSysClockFreq+0x34>
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	2b0c      	cmp	r3, #12
 80026a0:	d121      	bne.n	80026e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d11e      	bne.n	80026e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026a8:	4b34      	ldr	r3, [pc, #208]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d107      	bne.n	80026c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026b4:	4b31      	ldr	r3, [pc, #196]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 80026b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ba:	0a1b      	lsrs	r3, r3, #8
 80026bc:	f003 030f 	and.w	r3, r3, #15
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	e005      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026c4:	4b2d      	ldr	r3, [pc, #180]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026d0:	4a2b      	ldr	r2, [pc, #172]	; (8002780 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10d      	bne.n	80026fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026e4:	e00a      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d102      	bne.n	80026f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026ec:	4b25      	ldr	r3, [pc, #148]	; (8002784 <HAL_RCC_GetSysClockFreq+0x110>)
 80026ee:	61bb      	str	r3, [r7, #24]
 80026f0:	e004      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026f8:	4b23      	ldr	r3, [pc, #140]	; (8002788 <HAL_RCC_GetSysClockFreq+0x114>)
 80026fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	2b0c      	cmp	r3, #12
 8002700:	d134      	bne.n	800276c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002702:	4b1e      	ldr	r3, [pc, #120]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d003      	beq.n	800271a <HAL_RCC_GetSysClockFreq+0xa6>
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d003      	beq.n	8002720 <HAL_RCC_GetSysClockFreq+0xac>
 8002718:	e005      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800271a:	4b1a      	ldr	r3, [pc, #104]	; (8002784 <HAL_RCC_GetSysClockFreq+0x110>)
 800271c:	617b      	str	r3, [r7, #20]
      break;
 800271e:	e005      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002720:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_RCC_GetSysClockFreq+0x114>)
 8002722:	617b      	str	r3, [r7, #20]
      break;
 8002724:	e002      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	617b      	str	r3, [r7, #20]
      break;
 800272a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800272c:	4b13      	ldr	r3, [pc, #76]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	3301      	adds	r3, #1
 8002738:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	0a1b      	lsrs	r3, r3, #8
 8002740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	fb03 f202 	mul.w	r2, r3, r2
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002750:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002752:	4b0a      	ldr	r3, [pc, #40]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	0e5b      	lsrs	r3, r3, #25
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	3301      	adds	r3, #1
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	fbb2 f3f3 	udiv	r3, r2, r3
 800276a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800276c:	69bb      	ldr	r3, [r7, #24]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3724      	adds	r7, #36	; 0x24
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000
 8002780:	08009888 	.word	0x08009888
 8002784:	00f42400 	.word	0x00f42400
 8002788:	007a1200 	.word	0x007a1200

0800278c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002790:	4b03      	ldr	r3, [pc, #12]	; (80027a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	20000000 	.word	0x20000000

080027a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027a8:	f7ff fff0 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027ac:	4602      	mov	r2, r0
 80027ae:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	0a1b      	lsrs	r3, r3, #8
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	4904      	ldr	r1, [pc, #16]	; (80027cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80027ba:	5ccb      	ldrb	r3, [r1, r3]
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40021000 	.word	0x40021000
 80027cc:	08009880 	.word	0x08009880

080027d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027d4:	f7ff ffda 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027d8:	4602      	mov	r2, r0
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	0adb      	lsrs	r3, r3, #11
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	4904      	ldr	r1, [pc, #16]	; (80027f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027e6:	5ccb      	ldrb	r3, [r1, r3]
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000
 80027f8:	08009880 	.word	0x08009880

080027fc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	220f      	movs	r2, #15
 800280a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800280c:	4b12      	ldr	r3, [pc, #72]	; (8002858 <HAL_RCC_GetClockConfig+0x5c>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 0203 	and.w	r2, r3, #3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002818:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <HAL_RCC_GetClockConfig+0x5c>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002824:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <HAL_RCC_GetClockConfig+0x5c>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002830:	4b09      	ldr	r3, [pc, #36]	; (8002858 <HAL_RCC_GetClockConfig+0x5c>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	08db      	lsrs	r3, r3, #3
 8002836:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800283e:	4b07      	ldr	r3, [pc, #28]	; (800285c <HAL_RCC_GetClockConfig+0x60>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0207 	and.w	r2, r3, #7
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	601a      	str	r2, [r3, #0]
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40021000 	.word	0x40021000
 800285c:	40022000 	.word	0x40022000

08002860 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002868:	2300      	movs	r3, #0
 800286a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800286c:	4b2a      	ldr	r3, [pc, #168]	; (8002918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800286e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002878:	f7ff f9bc 	bl	8001bf4 <HAL_PWREx_GetVoltageRange>
 800287c:	6178      	str	r0, [r7, #20]
 800287e:	e014      	b.n	80028aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002880:	4b25      	ldr	r3, [pc, #148]	; (8002918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002884:	4a24      	ldr	r2, [pc, #144]	; (8002918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288a:	6593      	str	r3, [r2, #88]	; 0x58
 800288c:	4b22      	ldr	r3, [pc, #136]	; (8002918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800288e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002898:	f7ff f9ac 	bl	8001bf4 <HAL_PWREx_GetVoltageRange>
 800289c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800289e:	4b1e      	ldr	r3, [pc, #120]	; (8002918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a2:	4a1d      	ldr	r2, [pc, #116]	; (8002918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028b0:	d10b      	bne.n	80028ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b80      	cmp	r3, #128	; 0x80
 80028b6:	d919      	bls.n	80028ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2ba0      	cmp	r3, #160	; 0xa0
 80028bc:	d902      	bls.n	80028c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028be:	2302      	movs	r3, #2
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	e013      	b.n	80028ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028c4:	2301      	movs	r3, #1
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	e010      	b.n	80028ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b80      	cmp	r3, #128	; 0x80
 80028ce:	d902      	bls.n	80028d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80028d0:	2303      	movs	r3, #3
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	e00a      	b.n	80028ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b80      	cmp	r3, #128	; 0x80
 80028da:	d102      	bne.n	80028e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028dc:	2302      	movs	r3, #2
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	e004      	b.n	80028ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b70      	cmp	r3, #112	; 0x70
 80028e6:	d101      	bne.n	80028ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028e8:	2301      	movs	r3, #1
 80028ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f023 0207 	bic.w	r2, r3, #7
 80028f4:	4909      	ldr	r1, [pc, #36]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028fc:	4b07      	ldr	r3, [pc, #28]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	429a      	cmp	r2, r3
 8002908:	d001      	beq.n	800290e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40021000 	.word	0x40021000
 800291c:	40022000 	.word	0x40022000

08002920 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002928:	2300      	movs	r3, #0
 800292a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800292c:	2300      	movs	r3, #0
 800292e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002938:	2b00      	cmp	r3, #0
 800293a:	d041      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002940:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002944:	d02a      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002946:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800294a:	d824      	bhi.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800294c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002950:	d008      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002952:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002956:	d81e      	bhi.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00a      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800295c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002960:	d010      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002962:	e018      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002964:	4b86      	ldr	r3, [pc, #536]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4a85      	ldr	r2, [pc, #532]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002970:	e015      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3304      	adds	r3, #4
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fabb 	bl	8002ef4 <RCCEx_PLLSAI1_Config>
 800297e:	4603      	mov	r3, r0
 8002980:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002982:	e00c      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3320      	adds	r3, #32
 8002988:	2100      	movs	r1, #0
 800298a:	4618      	mov	r0, r3
 800298c:	f000 fba6 	bl	80030dc <RCCEx_PLLSAI2_Config>
 8002990:	4603      	mov	r3, r0
 8002992:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002994:	e003      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	74fb      	strb	r3, [r7, #19]
      break;
 800299a:	e000      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800299c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800299e:	7cfb      	ldrb	r3, [r7, #19]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10b      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029a4:	4b76      	ldr	r3, [pc, #472]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029b2:	4973      	ldr	r1, [pc, #460]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029ba:	e001      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029bc:	7cfb      	ldrb	r3, [r7, #19]
 80029be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d041      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029d4:	d02a      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80029d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029da:	d824      	bhi.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029e0:	d008      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80029e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029e6:	d81e      	bhi.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00a      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80029ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029f0:	d010      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029f2:	e018      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029f4:	4b62      	ldr	r3, [pc, #392]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	4a61      	ldr	r2, [pc, #388]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a00:	e015      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3304      	adds	r3, #4
 8002a06:	2100      	movs	r1, #0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 fa73 	bl	8002ef4 <RCCEx_PLLSAI1_Config>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a12:	e00c      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3320      	adds	r3, #32
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fb5e 	bl	80030dc <RCCEx_PLLSAI2_Config>
 8002a20:	4603      	mov	r3, r0
 8002a22:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a24:	e003      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	74fb      	strb	r3, [r7, #19]
      break;
 8002a2a:	e000      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a2e:	7cfb      	ldrb	r3, [r7, #19]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10b      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a34:	4b52      	ldr	r3, [pc, #328]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a42:	494f      	ldr	r1, [pc, #316]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a4a:	e001      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a4c:	7cfb      	ldrb	r3, [r7, #19]
 8002a4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80a0 	beq.w	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a62:	4b47      	ldr	r3, [pc, #284]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002a72:	2300      	movs	r3, #0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00d      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a78:	4b41      	ldr	r3, [pc, #260]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7c:	4a40      	ldr	r2, [pc, #256]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a82:	6593      	str	r3, [r2, #88]	; 0x58
 8002a84:	4b3e      	ldr	r3, [pc, #248]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a90:	2301      	movs	r3, #1
 8002a92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a94:	4b3b      	ldr	r3, [pc, #236]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a3a      	ldr	r2, [pc, #232]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002aa0:	f7fe fdf8 	bl	8001694 <HAL_GetTick>
 8002aa4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002aa6:	e009      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa8:	f7fe fdf4 	bl	8001694 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d902      	bls.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	74fb      	strb	r3, [r7, #19]
        break;
 8002aba:	e005      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002abc:	4b31      	ldr	r3, [pc, #196]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0ef      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002ac8:	7cfb      	ldrb	r3, [r7, #19]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d15c      	bne.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ace:	4b2c      	ldr	r3, [pc, #176]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d01f      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d019      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002aec:	4b24      	ldr	r3, [pc, #144]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002af8:	4b21      	ldr	r3, [pc, #132]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afe:	4a20      	ldr	r2, [pc, #128]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b08:	4b1d      	ldr	r3, [pc, #116]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0e:	4a1c      	ldr	r2, [pc, #112]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b18:	4a19      	ldr	r2, [pc, #100]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d016      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2a:	f7fe fdb3 	bl	8001694 <HAL_GetTick>
 8002b2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b30:	e00b      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b32:	f7fe fdaf 	bl	8001694 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d902      	bls.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	74fb      	strb	r3, [r7, #19]
            break;
 8002b48:	e006      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b4a:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0ec      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002b58:	7cfb      	ldrb	r3, [r7, #19]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10c      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b5e:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b6e:	4904      	ldr	r1, [pc, #16]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b76:	e009      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b78:	7cfb      	ldrb	r3, [r7, #19]
 8002b7a:	74bb      	strb	r3, [r7, #18]
 8002b7c:	e006      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002b7e:	bf00      	nop
 8002b80:	40021000 	.word	0x40021000
 8002b84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b88:	7cfb      	ldrb	r3, [r7, #19]
 8002b8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b8c:	7c7b      	ldrb	r3, [r7, #17]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d105      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b92:	4b9e      	ldr	r3, [pc, #632]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b96:	4a9d      	ldr	r2, [pc, #628]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002baa:	4b98      	ldr	r3, [pc, #608]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb0:	f023 0203 	bic.w	r2, r3, #3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb8:	4994      	ldr	r1, [pc, #592]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00a      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bcc:	4b8f      	ldr	r3, [pc, #572]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd2:	f023 020c 	bic.w	r2, r3, #12
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bda:	498c      	ldr	r1, [pc, #560]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00a      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bee:	4b87      	ldr	r3, [pc, #540]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	4983      	ldr	r1, [pc, #524]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00a      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c10:	4b7e      	ldr	r3, [pc, #504]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	497b      	ldr	r1, [pc, #492]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0310 	and.w	r3, r3, #16
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c32:	4b76      	ldr	r3, [pc, #472]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c40:	4972      	ldr	r1, [pc, #456]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c54:	4b6d      	ldr	r3, [pc, #436]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c62:	496a      	ldr	r1, [pc, #424]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c76:	4b65      	ldr	r3, [pc, #404]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c84:	4961      	ldr	r1, [pc, #388]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00a      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c98:	4b5c      	ldr	r3, [pc, #368]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca6:	4959      	ldr	r1, [pc, #356]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cba:	4b54      	ldr	r3, [pc, #336]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc8:	4950      	ldr	r1, [pc, #320]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00a      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cdc:	4b4b      	ldr	r3, [pc, #300]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cea:	4948      	ldr	r1, [pc, #288]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cfe:	4b43      	ldr	r3, [pc, #268]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0c:	493f      	ldr	r1, [pc, #252]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d028      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d20:	4b3a      	ldr	r3, [pc, #232]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d2e:	4937      	ldr	r1, [pc, #220]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d3e:	d106      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d40:	4b32      	ldr	r3, [pc, #200]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	4a31      	ldr	r2, [pc, #196]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d4a:	60d3      	str	r3, [r2, #12]
 8002d4c:	e011      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d56:	d10c      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 f8c8 	bl	8002ef4 <RCCEx_PLLSAI1_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d68:	7cfb      	ldrb	r3, [r7, #19]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002d6e:	7cfb      	ldrb	r3, [r7, #19]
 8002d70:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d028      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d7e:	4b23      	ldr	r3, [pc, #140]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8c:	491f      	ldr	r1, [pc, #124]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d9c:	d106      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d9e:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	4a1a      	ldr	r2, [pc, #104]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002da8:	60d3      	str	r3, [r2, #12]
 8002daa:	e011      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002db4:	d10c      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3304      	adds	r3, #4
 8002dba:	2101      	movs	r1, #1
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 f899 	bl	8002ef4 <RCCEx_PLLSAI1_Config>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dc6:	7cfb      	ldrb	r3, [r7, #19]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002dcc:	7cfb      	ldrb	r3, [r7, #19]
 8002dce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d02b      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dea:	4908      	ldr	r1, [pc, #32]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dfa:	d109      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dfc:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	4a02      	ldr	r2, [pc, #8]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e06:	60d3      	str	r3, [r2, #12]
 8002e08:	e014      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002e0a:	bf00      	nop
 8002e0c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e18:	d10c      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	2101      	movs	r1, #1
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 f867 	bl	8002ef4 <RCCEx_PLLSAI1_Config>
 8002e26:	4603      	mov	r3, r0
 8002e28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e2a:	7cfb      	ldrb	r3, [r7, #19]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002e30:	7cfb      	ldrb	r3, [r7, #19]
 8002e32:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d02f      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e40:	4b2b      	ldr	r3, [pc, #172]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e4e:	4928      	ldr	r1, [pc, #160]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e5e:	d10d      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3304      	adds	r3, #4
 8002e64:	2102      	movs	r1, #2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 f844 	bl	8002ef4 <RCCEx_PLLSAI1_Config>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e70:	7cfb      	ldrb	r3, [r7, #19]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d014      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e76:	7cfb      	ldrb	r3, [r7, #19]
 8002e78:	74bb      	strb	r3, [r7, #18]
 8002e7a:	e011      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3320      	adds	r3, #32
 8002e8a:	2102      	movs	r1, #2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 f925 	bl	80030dc <RCCEx_PLLSAI2_Config>
 8002e92:	4603      	mov	r3, r0
 8002e94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e96:	7cfb      	ldrb	r3, [r7, #19]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e9c:	7cfb      	ldrb	r3, [r7, #19]
 8002e9e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002eac:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eba:	490d      	ldr	r1, [pc, #52]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00b      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ece:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ede:	4904      	ldr	r1, [pc, #16]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ee6:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40021000 	.word	0x40021000

08002ef4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f02:	4b75      	ldr	r3, [pc, #468]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d018      	beq.n	8002f40 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f0e:	4b72      	ldr	r3, [pc, #456]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0203 	and.w	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d10d      	bne.n	8002f3a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
       ||
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d009      	beq.n	8002f3a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f26:	4b6c      	ldr	r3, [pc, #432]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	091b      	lsrs	r3, r3, #4
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
       ||
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d047      	beq.n	8002fca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	73fb      	strb	r3, [r7, #15]
 8002f3e:	e044      	b.n	8002fca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d018      	beq.n	8002f7a <RCCEx_PLLSAI1_Config+0x86>
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d825      	bhi.n	8002f98 <RCCEx_PLLSAI1_Config+0xa4>
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d002      	beq.n	8002f56 <RCCEx_PLLSAI1_Config+0x62>
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d009      	beq.n	8002f68 <RCCEx_PLLSAI1_Config+0x74>
 8002f54:	e020      	b.n	8002f98 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f56:	4b60      	ldr	r3, [pc, #384]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d11d      	bne.n	8002f9e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f66:	e01a      	b.n	8002f9e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f68:	4b5b      	ldr	r3, [pc, #364]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d116      	bne.n	8002fa2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f78:	e013      	b.n	8002fa2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f7a:	4b57      	ldr	r3, [pc, #348]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10f      	bne.n	8002fa6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f86:	4b54      	ldr	r3, [pc, #336]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d109      	bne.n	8002fa6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f96:	e006      	b.n	8002fa6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f9c:	e004      	b.n	8002fa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f9e:	bf00      	nop
 8002fa0:	e002      	b.n	8002fa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fa2:	bf00      	nop
 8002fa4:	e000      	b.n	8002fa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fa6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10d      	bne.n	8002fca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fae:	4b4a      	ldr	r3, [pc, #296]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6819      	ldr	r1, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	430b      	orrs	r3, r1
 8002fc4:	4944      	ldr	r1, [pc, #272]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d17d      	bne.n	80030cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002fd0:	4b41      	ldr	r3, [pc, #260]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a40      	ldr	r2, [pc, #256]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fdc:	f7fe fb5a 	bl	8001694 <HAL_GetTick>
 8002fe0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fe2:	e009      	b.n	8002ff8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fe4:	f7fe fb56 	bl	8001694 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d902      	bls.n	8002ff8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ff6:	e005      	b.n	8003004 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ff8:	4b37      	ldr	r3, [pc, #220]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1ef      	bne.n	8002fe4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d160      	bne.n	80030cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d111      	bne.n	8003034 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003010:	4b31      	ldr	r3, [pc, #196]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6892      	ldr	r2, [r2, #8]
 8003020:	0211      	lsls	r1, r2, #8
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	68d2      	ldr	r2, [r2, #12]
 8003026:	0912      	lsrs	r2, r2, #4
 8003028:	0452      	lsls	r2, r2, #17
 800302a:	430a      	orrs	r2, r1
 800302c:	492a      	ldr	r1, [pc, #168]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800302e:	4313      	orrs	r3, r2
 8003030:	610b      	str	r3, [r1, #16]
 8003032:	e027      	b.n	8003084 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d112      	bne.n	8003060 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800303a:	4b27      	ldr	r3, [pc, #156]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003042:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6892      	ldr	r2, [r2, #8]
 800304a:	0211      	lsls	r1, r2, #8
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6912      	ldr	r2, [r2, #16]
 8003050:	0852      	lsrs	r2, r2, #1
 8003052:	3a01      	subs	r2, #1
 8003054:	0552      	lsls	r2, r2, #21
 8003056:	430a      	orrs	r2, r1
 8003058:	491f      	ldr	r1, [pc, #124]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800305a:	4313      	orrs	r3, r2
 800305c:	610b      	str	r3, [r1, #16]
 800305e:	e011      	b.n	8003084 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003060:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003068:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6892      	ldr	r2, [r2, #8]
 8003070:	0211      	lsls	r1, r2, #8
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6952      	ldr	r2, [r2, #20]
 8003076:	0852      	lsrs	r2, r2, #1
 8003078:	3a01      	subs	r2, #1
 800307a:	0652      	lsls	r2, r2, #25
 800307c:	430a      	orrs	r2, r1
 800307e:	4916      	ldr	r1, [pc, #88]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003080:	4313      	orrs	r3, r2
 8003082:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003084:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a13      	ldr	r2, [pc, #76]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800308a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800308e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003090:	f7fe fb00 	bl	8001694 <HAL_GetTick>
 8003094:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003096:	e009      	b.n	80030ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003098:	f7fe fafc 	bl	8001694 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d902      	bls.n	80030ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	73fb      	strb	r3, [r7, #15]
          break;
 80030aa:	e005      	b.n	80030b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030ac:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0ef      	beq.n	8003098 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030be:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	4904      	ldr	r1, [pc, #16]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40021000 	.word	0x40021000

080030dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030ea:	4b6a      	ldr	r3, [pc, #424]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d018      	beq.n	8003128 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80030f6:	4b67      	ldr	r3, [pc, #412]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f003 0203 	and.w	r2, r3, #3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d10d      	bne.n	8003122 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
       ||
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800310e:	4b61      	ldr	r3, [pc, #388]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
       ||
 800311e:	429a      	cmp	r2, r3
 8003120:	d047      	beq.n	80031b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	73fb      	strb	r3, [r7, #15]
 8003126:	e044      	b.n	80031b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b03      	cmp	r3, #3
 800312e:	d018      	beq.n	8003162 <RCCEx_PLLSAI2_Config+0x86>
 8003130:	2b03      	cmp	r3, #3
 8003132:	d825      	bhi.n	8003180 <RCCEx_PLLSAI2_Config+0xa4>
 8003134:	2b01      	cmp	r3, #1
 8003136:	d002      	beq.n	800313e <RCCEx_PLLSAI2_Config+0x62>
 8003138:	2b02      	cmp	r3, #2
 800313a:	d009      	beq.n	8003150 <RCCEx_PLLSAI2_Config+0x74>
 800313c:	e020      	b.n	8003180 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800313e:	4b55      	ldr	r3, [pc, #340]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d11d      	bne.n	8003186 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800314e:	e01a      	b.n	8003186 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003150:	4b50      	ldr	r3, [pc, #320]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003158:	2b00      	cmp	r3, #0
 800315a:	d116      	bne.n	800318a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003160:	e013      	b.n	800318a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003162:	4b4c      	ldr	r3, [pc, #304]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10f      	bne.n	800318e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800316e:	4b49      	ldr	r3, [pc, #292]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d109      	bne.n	800318e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800317e:	e006      	b.n	800318e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
      break;
 8003184:	e004      	b.n	8003190 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003186:	bf00      	nop
 8003188:	e002      	b.n	8003190 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800318a:	bf00      	nop
 800318c:	e000      	b.n	8003190 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800318e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10d      	bne.n	80031b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003196:	4b3f      	ldr	r3, [pc, #252]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6819      	ldr	r1, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	430b      	orrs	r3, r1
 80031ac:	4939      	ldr	r1, [pc, #228]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d167      	bne.n	8003288 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80031b8:	4b36      	ldr	r3, [pc, #216]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a35      	ldr	r2, [pc, #212]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c4:	f7fe fa66 	bl	8001694 <HAL_GetTick>
 80031c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031ca:	e009      	b.n	80031e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031cc:	f7fe fa62 	bl	8001694 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d902      	bls.n	80031e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	73fb      	strb	r3, [r7, #15]
        break;
 80031de:	e005      	b.n	80031ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031e0:	4b2c      	ldr	r3, [pc, #176]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1ef      	bne.n	80031cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d14a      	bne.n	8003288 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d111      	bne.n	800321c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031f8:	4b26      	ldr	r3, [pc, #152]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6892      	ldr	r2, [r2, #8]
 8003208:	0211      	lsls	r1, r2, #8
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68d2      	ldr	r2, [r2, #12]
 800320e:	0912      	lsrs	r2, r2, #4
 8003210:	0452      	lsls	r2, r2, #17
 8003212:	430a      	orrs	r2, r1
 8003214:	491f      	ldr	r1, [pc, #124]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003216:	4313      	orrs	r3, r2
 8003218:	614b      	str	r3, [r1, #20]
 800321a:	e011      	b.n	8003240 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800321c:	4b1d      	ldr	r3, [pc, #116]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003224:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6892      	ldr	r2, [r2, #8]
 800322c:	0211      	lsls	r1, r2, #8
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6912      	ldr	r2, [r2, #16]
 8003232:	0852      	lsrs	r2, r2, #1
 8003234:	3a01      	subs	r2, #1
 8003236:	0652      	lsls	r2, r2, #25
 8003238:	430a      	orrs	r2, r1
 800323a:	4916      	ldr	r1, [pc, #88]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 800323c:	4313      	orrs	r3, r2
 800323e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003240:	4b14      	ldr	r3, [pc, #80]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a13      	ldr	r2, [pc, #76]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324c:	f7fe fa22 	bl	8001694 <HAL_GetTick>
 8003250:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003252:	e009      	b.n	8003268 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003254:	f7fe fa1e 	bl	8001694 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d902      	bls.n	8003268 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	73fb      	strb	r3, [r7, #15]
          break;
 8003266:	e005      	b.n	8003274 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003268:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0ef      	beq.n	8003254 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d106      	bne.n	8003288 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 800327c:	695a      	ldr	r2, [r3, #20]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	4904      	ldr	r1, [pc, #16]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003284:	4313      	orrs	r3, r2
 8003286:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003288:	7bfb      	ldrb	r3, [r7, #15]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40021000 	.word	0x40021000

08003298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e049      	b.n	800333e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f841 	bl	8003346 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	4619      	mov	r1, r3
 80032d6:	4610      	mov	r0, r2
 80032d8:	f000 f9f8 	bl	80036cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
	...

0800335c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b01      	cmp	r3, #1
 800336e:	d001      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e04f      	b.n	8003414 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a23      	ldr	r2, [pc, #140]	; (8003420 <HAL_TIM_Base_Start_IT+0xc4>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d01d      	beq.n	80033d2 <HAL_TIM_Base_Start_IT+0x76>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339e:	d018      	beq.n	80033d2 <HAL_TIM_Base_Start_IT+0x76>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a1f      	ldr	r2, [pc, #124]	; (8003424 <HAL_TIM_Base_Start_IT+0xc8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d013      	beq.n	80033d2 <HAL_TIM_Base_Start_IT+0x76>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a1e      	ldr	r2, [pc, #120]	; (8003428 <HAL_TIM_Base_Start_IT+0xcc>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d00e      	beq.n	80033d2 <HAL_TIM_Base_Start_IT+0x76>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a1c      	ldr	r2, [pc, #112]	; (800342c <HAL_TIM_Base_Start_IT+0xd0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d009      	beq.n	80033d2 <HAL_TIM_Base_Start_IT+0x76>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a1b      	ldr	r2, [pc, #108]	; (8003430 <HAL_TIM_Base_Start_IT+0xd4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d004      	beq.n	80033d2 <HAL_TIM_Base_Start_IT+0x76>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a19      	ldr	r2, [pc, #100]	; (8003434 <HAL_TIM_Base_Start_IT+0xd8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d115      	bne.n	80033fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	4b17      	ldr	r3, [pc, #92]	; (8003438 <HAL_TIM_Base_Start_IT+0xdc>)
 80033da:	4013      	ands	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2b06      	cmp	r3, #6
 80033e2:	d015      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0xb4>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ea:	d011      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033fc:	e008      	b.n	8003410 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0201 	orr.w	r2, r2, #1
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	e000      	b.n	8003412 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003410:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	40012c00 	.word	0x40012c00
 8003424:	40000400 	.word	0x40000400
 8003428:	40000800 	.word	0x40000800
 800342c:	40000c00 	.word	0x40000c00
 8003430:	40013400 	.word	0x40013400
 8003434:	40014000 	.word	0x40014000
 8003438:	00010007 	.word	0x00010007

0800343c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b02      	cmp	r3, #2
 8003450:	d122      	bne.n	8003498 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b02      	cmp	r3, #2
 800345e:	d11b      	bne.n	8003498 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f06f 0202 	mvn.w	r2, #2
 8003468:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f905 	bl	800368e <HAL_TIM_IC_CaptureCallback>
 8003484:	e005      	b.n	8003492 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f8f7 	bl	800367a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f908 	bl	80036a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f003 0304 	and.w	r3, r3, #4
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d122      	bne.n	80034ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d11b      	bne.n	80034ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0204 	mvn.w	r2, #4
 80034bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f8db 	bl	800368e <HAL_TIM_IC_CaptureCallback>
 80034d8:	e005      	b.n	80034e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f8cd 	bl	800367a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f8de 	bl	80036a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d122      	bne.n	8003540 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b08      	cmp	r3, #8
 8003506:	d11b      	bne.n	8003540 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f06f 0208 	mvn.w	r2, #8
 8003510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2204      	movs	r2, #4
 8003516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f8b1 	bl	800368e <HAL_TIM_IC_CaptureCallback>
 800352c:	e005      	b.n	800353a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f8a3 	bl	800367a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f8b4 	bl	80036a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f003 0310 	and.w	r3, r3, #16
 800354a:	2b10      	cmp	r3, #16
 800354c:	d122      	bne.n	8003594 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b10      	cmp	r3, #16
 800355a:	d11b      	bne.n	8003594 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0210 	mvn.w	r2, #16
 8003564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2208      	movs	r2, #8
 800356a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f887 	bl	800368e <HAL_TIM_IC_CaptureCallback>
 8003580:	e005      	b.n	800358e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f879 	bl	800367a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f88a 	bl	80036a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d10e      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d107      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0201 	mvn.w	r2, #1
 80035b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7fd fe1a 	bl	80011f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ca:	2b80      	cmp	r3, #128	; 0x80
 80035cc:	d10e      	bne.n	80035ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	2b80      	cmp	r3, #128	; 0x80
 80035da:	d107      	bne.n	80035ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f914 	bl	8003814 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035fa:	d10e      	bne.n	800361a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003606:	2b80      	cmp	r3, #128	; 0x80
 8003608:	d107      	bne.n	800361a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f907 	bl	8003828 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003624:	2b40      	cmp	r3, #64	; 0x40
 8003626:	d10e      	bne.n	8003646 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003632:	2b40      	cmp	r3, #64	; 0x40
 8003634:	d107      	bne.n	8003646 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800363e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f838 	bl	80036b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b20      	cmp	r3, #32
 8003652:	d10e      	bne.n	8003672 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f003 0320 	and.w	r3, r3, #32
 800365e:	2b20      	cmp	r3, #32
 8003660:	d107      	bne.n	8003672 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f06f 0220 	mvn.w	r2, #32
 800366a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f8c7 	bl	8003800 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003672:	bf00      	nop
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
	...

080036cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a40      	ldr	r2, [pc, #256]	; (80037e0 <TIM_Base_SetConfig+0x114>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d013      	beq.n	800370c <TIM_Base_SetConfig+0x40>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ea:	d00f      	beq.n	800370c <TIM_Base_SetConfig+0x40>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a3d      	ldr	r2, [pc, #244]	; (80037e4 <TIM_Base_SetConfig+0x118>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00b      	beq.n	800370c <TIM_Base_SetConfig+0x40>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a3c      	ldr	r2, [pc, #240]	; (80037e8 <TIM_Base_SetConfig+0x11c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d007      	beq.n	800370c <TIM_Base_SetConfig+0x40>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a3b      	ldr	r2, [pc, #236]	; (80037ec <TIM_Base_SetConfig+0x120>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d003      	beq.n	800370c <TIM_Base_SetConfig+0x40>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a3a      	ldr	r2, [pc, #232]	; (80037f0 <TIM_Base_SetConfig+0x124>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d108      	bne.n	800371e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a2f      	ldr	r2, [pc, #188]	; (80037e0 <TIM_Base_SetConfig+0x114>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d01f      	beq.n	8003766 <TIM_Base_SetConfig+0x9a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372c:	d01b      	beq.n	8003766 <TIM_Base_SetConfig+0x9a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a2c      	ldr	r2, [pc, #176]	; (80037e4 <TIM_Base_SetConfig+0x118>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d017      	beq.n	8003766 <TIM_Base_SetConfig+0x9a>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a2b      	ldr	r2, [pc, #172]	; (80037e8 <TIM_Base_SetConfig+0x11c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d013      	beq.n	8003766 <TIM_Base_SetConfig+0x9a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a2a      	ldr	r2, [pc, #168]	; (80037ec <TIM_Base_SetConfig+0x120>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d00f      	beq.n	8003766 <TIM_Base_SetConfig+0x9a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a29      	ldr	r2, [pc, #164]	; (80037f0 <TIM_Base_SetConfig+0x124>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d00b      	beq.n	8003766 <TIM_Base_SetConfig+0x9a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a28      	ldr	r2, [pc, #160]	; (80037f4 <TIM_Base_SetConfig+0x128>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d007      	beq.n	8003766 <TIM_Base_SetConfig+0x9a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a27      	ldr	r2, [pc, #156]	; (80037f8 <TIM_Base_SetConfig+0x12c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d003      	beq.n	8003766 <TIM_Base_SetConfig+0x9a>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a26      	ldr	r2, [pc, #152]	; (80037fc <TIM_Base_SetConfig+0x130>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d108      	bne.n	8003778 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800376c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	4313      	orrs	r3, r2
 8003776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a10      	ldr	r2, [pc, #64]	; (80037e0 <TIM_Base_SetConfig+0x114>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00f      	beq.n	80037c4 <TIM_Base_SetConfig+0xf8>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a12      	ldr	r2, [pc, #72]	; (80037f0 <TIM_Base_SetConfig+0x124>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d00b      	beq.n	80037c4 <TIM_Base_SetConfig+0xf8>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a11      	ldr	r2, [pc, #68]	; (80037f4 <TIM_Base_SetConfig+0x128>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d007      	beq.n	80037c4 <TIM_Base_SetConfig+0xf8>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a10      	ldr	r2, [pc, #64]	; (80037f8 <TIM_Base_SetConfig+0x12c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d003      	beq.n	80037c4 <TIM_Base_SetConfig+0xf8>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a0f      	ldr	r2, [pc, #60]	; (80037fc <TIM_Base_SetConfig+0x130>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d103      	bne.n	80037cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	615a      	str	r2, [r3, #20]
}
 80037d2:	bf00      	nop
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40012c00 	.word	0x40012c00
 80037e4:	40000400 	.word	0x40000400
 80037e8:	40000800 	.word	0x40000800
 80037ec:	40000c00 	.word	0x40000c00
 80037f0:	40013400 	.word	0x40013400
 80037f4:	40014000 	.word	0x40014000
 80037f8:	40014400 	.word	0x40014400
 80037fc:	40014800 	.word	0x40014800

08003800 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e040      	b.n	80038d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fd fd08 	bl	8001274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2224      	movs	r2, #36	; 0x24
 8003868:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0201 	bic.w	r2, r2, #1
 8003878:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f82c 	bl	80038d8 <UART_SetConfig>
 8003880:	4603      	mov	r3, r0
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e022      	b.n	80038d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fad8 	bl	8003e48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0201 	orr.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 fb5f 	bl	8003f8c <UART_CheckIdleState>
 80038ce:	4603      	mov	r3, r0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038dc:	b08a      	sub	sp, #40	; 0x28
 80038de:	af00      	add	r7, sp, #0
 80038e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	431a      	orrs	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	4ba4      	ldr	r3, [pc, #656]	; (8003b98 <UART_SetConfig+0x2c0>)
 8003908:	4013      	ands	r3, r2
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	6812      	ldr	r2, [r2, #0]
 800390e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003910:	430b      	orrs	r3, r1
 8003912:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a99      	ldr	r2, [pc, #612]	; (8003b9c <UART_SetConfig+0x2c4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d004      	beq.n	8003944 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003940:	4313      	orrs	r3, r2
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003954:	430a      	orrs	r2, r1
 8003956:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a90      	ldr	r2, [pc, #576]	; (8003ba0 <UART_SetConfig+0x2c8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d126      	bne.n	80039b0 <UART_SetConfig+0xd8>
 8003962:	4b90      	ldr	r3, [pc, #576]	; (8003ba4 <UART_SetConfig+0x2cc>)
 8003964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	2b03      	cmp	r3, #3
 800396e:	d81b      	bhi.n	80039a8 <UART_SetConfig+0xd0>
 8003970:	a201      	add	r2, pc, #4	; (adr r2, 8003978 <UART_SetConfig+0xa0>)
 8003972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003976:	bf00      	nop
 8003978:	08003989 	.word	0x08003989
 800397c:	08003999 	.word	0x08003999
 8003980:	08003991 	.word	0x08003991
 8003984:	080039a1 	.word	0x080039a1
 8003988:	2301      	movs	r3, #1
 800398a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800398e:	e116      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003990:	2302      	movs	r3, #2
 8003992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003996:	e112      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003998:	2304      	movs	r3, #4
 800399a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800399e:	e10e      	b.n	8003bbe <UART_SetConfig+0x2e6>
 80039a0:	2308      	movs	r3, #8
 80039a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039a6:	e10a      	b.n	8003bbe <UART_SetConfig+0x2e6>
 80039a8:	2310      	movs	r3, #16
 80039aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ae:	e106      	b.n	8003bbe <UART_SetConfig+0x2e6>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a7c      	ldr	r2, [pc, #496]	; (8003ba8 <UART_SetConfig+0x2d0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d138      	bne.n	8003a2c <UART_SetConfig+0x154>
 80039ba:	4b7a      	ldr	r3, [pc, #488]	; (8003ba4 <UART_SetConfig+0x2cc>)
 80039bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c0:	f003 030c 	and.w	r3, r3, #12
 80039c4:	2b0c      	cmp	r3, #12
 80039c6:	d82d      	bhi.n	8003a24 <UART_SetConfig+0x14c>
 80039c8:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <UART_SetConfig+0xf8>)
 80039ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ce:	bf00      	nop
 80039d0:	08003a05 	.word	0x08003a05
 80039d4:	08003a25 	.word	0x08003a25
 80039d8:	08003a25 	.word	0x08003a25
 80039dc:	08003a25 	.word	0x08003a25
 80039e0:	08003a15 	.word	0x08003a15
 80039e4:	08003a25 	.word	0x08003a25
 80039e8:	08003a25 	.word	0x08003a25
 80039ec:	08003a25 	.word	0x08003a25
 80039f0:	08003a0d 	.word	0x08003a0d
 80039f4:	08003a25 	.word	0x08003a25
 80039f8:	08003a25 	.word	0x08003a25
 80039fc:	08003a25 	.word	0x08003a25
 8003a00:	08003a1d 	.word	0x08003a1d
 8003a04:	2300      	movs	r3, #0
 8003a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a0a:	e0d8      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a12:	e0d4      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003a14:	2304      	movs	r3, #4
 8003a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a1a:	e0d0      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003a1c:	2308      	movs	r3, #8
 8003a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a22:	e0cc      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003a24:	2310      	movs	r3, #16
 8003a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a2a:	e0c8      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a5e      	ldr	r2, [pc, #376]	; (8003bac <UART_SetConfig+0x2d4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d125      	bne.n	8003a82 <UART_SetConfig+0x1aa>
 8003a36:	4b5b      	ldr	r3, [pc, #364]	; (8003ba4 <UART_SetConfig+0x2cc>)
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a40:	2b30      	cmp	r3, #48	; 0x30
 8003a42:	d016      	beq.n	8003a72 <UART_SetConfig+0x19a>
 8003a44:	2b30      	cmp	r3, #48	; 0x30
 8003a46:	d818      	bhi.n	8003a7a <UART_SetConfig+0x1a2>
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	d00a      	beq.n	8003a62 <UART_SetConfig+0x18a>
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d814      	bhi.n	8003a7a <UART_SetConfig+0x1a2>
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <UART_SetConfig+0x182>
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d008      	beq.n	8003a6a <UART_SetConfig+0x192>
 8003a58:	e00f      	b.n	8003a7a <UART_SetConfig+0x1a2>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a60:	e0ad      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003a62:	2302      	movs	r3, #2
 8003a64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a68:	e0a9      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003a6a:	2304      	movs	r3, #4
 8003a6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a70:	e0a5      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003a72:	2308      	movs	r3, #8
 8003a74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a78:	e0a1      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003a7a:	2310      	movs	r3, #16
 8003a7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a80:	e09d      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a4a      	ldr	r2, [pc, #296]	; (8003bb0 <UART_SetConfig+0x2d8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d125      	bne.n	8003ad8 <UART_SetConfig+0x200>
 8003a8c:	4b45      	ldr	r3, [pc, #276]	; (8003ba4 <UART_SetConfig+0x2cc>)
 8003a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a96:	2bc0      	cmp	r3, #192	; 0xc0
 8003a98:	d016      	beq.n	8003ac8 <UART_SetConfig+0x1f0>
 8003a9a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a9c:	d818      	bhi.n	8003ad0 <UART_SetConfig+0x1f8>
 8003a9e:	2b80      	cmp	r3, #128	; 0x80
 8003aa0:	d00a      	beq.n	8003ab8 <UART_SetConfig+0x1e0>
 8003aa2:	2b80      	cmp	r3, #128	; 0x80
 8003aa4:	d814      	bhi.n	8003ad0 <UART_SetConfig+0x1f8>
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <UART_SetConfig+0x1d8>
 8003aaa:	2b40      	cmp	r3, #64	; 0x40
 8003aac:	d008      	beq.n	8003ac0 <UART_SetConfig+0x1e8>
 8003aae:	e00f      	b.n	8003ad0 <UART_SetConfig+0x1f8>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab6:	e082      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003abe:	e07e      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ac6:	e07a      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003ac8:	2308      	movs	r3, #8
 8003aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ace:	e076      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003ad0:	2310      	movs	r3, #16
 8003ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ad6:	e072      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a35      	ldr	r2, [pc, #212]	; (8003bb4 <UART_SetConfig+0x2dc>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d12a      	bne.n	8003b38 <UART_SetConfig+0x260>
 8003ae2:	4b30      	ldr	r3, [pc, #192]	; (8003ba4 <UART_SetConfig+0x2cc>)
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003af0:	d01a      	beq.n	8003b28 <UART_SetConfig+0x250>
 8003af2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003af6:	d81b      	bhi.n	8003b30 <UART_SetConfig+0x258>
 8003af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003afc:	d00c      	beq.n	8003b18 <UART_SetConfig+0x240>
 8003afe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b02:	d815      	bhi.n	8003b30 <UART_SetConfig+0x258>
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <UART_SetConfig+0x238>
 8003b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b0c:	d008      	beq.n	8003b20 <UART_SetConfig+0x248>
 8003b0e:	e00f      	b.n	8003b30 <UART_SetConfig+0x258>
 8003b10:	2300      	movs	r3, #0
 8003b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b16:	e052      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b1e:	e04e      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003b20:	2304      	movs	r3, #4
 8003b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b26:	e04a      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003b28:	2308      	movs	r3, #8
 8003b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b2e:	e046      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003b30:	2310      	movs	r3, #16
 8003b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b36:	e042      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a17      	ldr	r2, [pc, #92]	; (8003b9c <UART_SetConfig+0x2c4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d13a      	bne.n	8003bb8 <UART_SetConfig+0x2e0>
 8003b42:	4b18      	ldr	r3, [pc, #96]	; (8003ba4 <UART_SetConfig+0x2cc>)
 8003b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b50:	d01a      	beq.n	8003b88 <UART_SetConfig+0x2b0>
 8003b52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b56:	d81b      	bhi.n	8003b90 <UART_SetConfig+0x2b8>
 8003b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b5c:	d00c      	beq.n	8003b78 <UART_SetConfig+0x2a0>
 8003b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b62:	d815      	bhi.n	8003b90 <UART_SetConfig+0x2b8>
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <UART_SetConfig+0x298>
 8003b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b6c:	d008      	beq.n	8003b80 <UART_SetConfig+0x2a8>
 8003b6e:	e00f      	b.n	8003b90 <UART_SetConfig+0x2b8>
 8003b70:	2300      	movs	r3, #0
 8003b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b76:	e022      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b7e:	e01e      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003b80:	2304      	movs	r3, #4
 8003b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b86:	e01a      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003b88:	2308      	movs	r3, #8
 8003b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b8e:	e016      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003b90:	2310      	movs	r3, #16
 8003b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b96:	e012      	b.n	8003bbe <UART_SetConfig+0x2e6>
 8003b98:	efff69f3 	.word	0xefff69f3
 8003b9c:	40008000 	.word	0x40008000
 8003ba0:	40013800 	.word	0x40013800
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	40004400 	.word	0x40004400
 8003bac:	40004800 	.word	0x40004800
 8003bb0:	40004c00 	.word	0x40004c00
 8003bb4:	40005000 	.word	0x40005000
 8003bb8:	2310      	movs	r3, #16
 8003bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a9f      	ldr	r2, [pc, #636]	; (8003e40 <UART_SetConfig+0x568>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d17a      	bne.n	8003cbe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d824      	bhi.n	8003c1a <UART_SetConfig+0x342>
 8003bd0:	a201      	add	r2, pc, #4	; (adr r2, 8003bd8 <UART_SetConfig+0x300>)
 8003bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd6:	bf00      	nop
 8003bd8:	08003bfd 	.word	0x08003bfd
 8003bdc:	08003c1b 	.word	0x08003c1b
 8003be0:	08003c05 	.word	0x08003c05
 8003be4:	08003c1b 	.word	0x08003c1b
 8003be8:	08003c0b 	.word	0x08003c0b
 8003bec:	08003c1b 	.word	0x08003c1b
 8003bf0:	08003c1b 	.word	0x08003c1b
 8003bf4:	08003c1b 	.word	0x08003c1b
 8003bf8:	08003c13 	.word	0x08003c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bfc:	f7fe fdd2 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8003c00:	61f8      	str	r0, [r7, #28]
        break;
 8003c02:	e010      	b.n	8003c26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c04:	4b8f      	ldr	r3, [pc, #572]	; (8003e44 <UART_SetConfig+0x56c>)
 8003c06:	61fb      	str	r3, [r7, #28]
        break;
 8003c08:	e00d      	b.n	8003c26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c0a:	f7fe fd33 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8003c0e:	61f8      	str	r0, [r7, #28]
        break;
 8003c10:	e009      	b.n	8003c26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c16:	61fb      	str	r3, [r7, #28]
        break;
 8003c18:	e005      	b.n	8003c26 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 80fb 	beq.w	8003e24 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	4613      	mov	r3, r2
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	4413      	add	r3, r2
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d305      	bcc.n	8003c4a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c44:	69fa      	ldr	r2, [r7, #28]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d903      	bls.n	8003c52 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c50:	e0e8      	b.n	8003e24 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	2200      	movs	r2, #0
 8003c56:	461c      	mov	r4, r3
 8003c58:	4615      	mov	r5, r2
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	022b      	lsls	r3, r5, #8
 8003c64:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c68:	0222      	lsls	r2, r4, #8
 8003c6a:	68f9      	ldr	r1, [r7, #12]
 8003c6c:	6849      	ldr	r1, [r1, #4]
 8003c6e:	0849      	lsrs	r1, r1, #1
 8003c70:	2000      	movs	r0, #0
 8003c72:	4688      	mov	r8, r1
 8003c74:	4681      	mov	r9, r0
 8003c76:	eb12 0a08 	adds.w	sl, r2, r8
 8003c7a:	eb43 0b09 	adc.w	fp, r3, r9
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	603b      	str	r3, [r7, #0]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c8c:	4650      	mov	r0, sl
 8003c8e:	4659      	mov	r1, fp
 8003c90:	f7fc ff8a 	bl	8000ba8 <__aeabi_uldivmod>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4613      	mov	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ca2:	d308      	bcc.n	8003cb6 <UART_SetConfig+0x3de>
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003caa:	d204      	bcs.n	8003cb6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	60da      	str	r2, [r3, #12]
 8003cb4:	e0b6      	b.n	8003e24 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003cbc:	e0b2      	b.n	8003e24 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc6:	d15e      	bne.n	8003d86 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003cc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d828      	bhi.n	8003d22 <UART_SetConfig+0x44a>
 8003cd0:	a201      	add	r2, pc, #4	; (adr r2, 8003cd8 <UART_SetConfig+0x400>)
 8003cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd6:	bf00      	nop
 8003cd8:	08003cfd 	.word	0x08003cfd
 8003cdc:	08003d05 	.word	0x08003d05
 8003ce0:	08003d0d 	.word	0x08003d0d
 8003ce4:	08003d23 	.word	0x08003d23
 8003ce8:	08003d13 	.word	0x08003d13
 8003cec:	08003d23 	.word	0x08003d23
 8003cf0:	08003d23 	.word	0x08003d23
 8003cf4:	08003d23 	.word	0x08003d23
 8003cf8:	08003d1b 	.word	0x08003d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cfc:	f7fe fd52 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8003d00:	61f8      	str	r0, [r7, #28]
        break;
 8003d02:	e014      	b.n	8003d2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d04:	f7fe fd64 	bl	80027d0 <HAL_RCC_GetPCLK2Freq>
 8003d08:	61f8      	str	r0, [r7, #28]
        break;
 8003d0a:	e010      	b.n	8003d2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d0c:	4b4d      	ldr	r3, [pc, #308]	; (8003e44 <UART_SetConfig+0x56c>)
 8003d0e:	61fb      	str	r3, [r7, #28]
        break;
 8003d10:	e00d      	b.n	8003d2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d12:	f7fe fcaf 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8003d16:	61f8      	str	r0, [r7, #28]
        break;
 8003d18:	e009      	b.n	8003d2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d1e:	61fb      	str	r3, [r7, #28]
        break;
 8003d20:	e005      	b.n	8003d2e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d077      	beq.n	8003e24 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	005a      	lsls	r2, r3, #1
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	085b      	lsrs	r3, r3, #1
 8003d3e:	441a      	add	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d48:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	2b0f      	cmp	r3, #15
 8003d4e:	d916      	bls.n	8003d7e <UART_SetConfig+0x4a6>
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d56:	d212      	bcs.n	8003d7e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	f023 030f 	bic.w	r3, r3, #15
 8003d60:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	085b      	lsrs	r3, r3, #1
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	8afb      	ldrh	r3, [r7, #22]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	8afa      	ldrh	r2, [r7, #22]
 8003d7a:	60da      	str	r2, [r3, #12]
 8003d7c:	e052      	b.n	8003e24 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d84:	e04e      	b.n	8003e24 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d827      	bhi.n	8003dde <UART_SetConfig+0x506>
 8003d8e:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <UART_SetConfig+0x4bc>)
 8003d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d94:	08003db9 	.word	0x08003db9
 8003d98:	08003dc1 	.word	0x08003dc1
 8003d9c:	08003dc9 	.word	0x08003dc9
 8003da0:	08003ddf 	.word	0x08003ddf
 8003da4:	08003dcf 	.word	0x08003dcf
 8003da8:	08003ddf 	.word	0x08003ddf
 8003dac:	08003ddf 	.word	0x08003ddf
 8003db0:	08003ddf 	.word	0x08003ddf
 8003db4:	08003dd7 	.word	0x08003dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003db8:	f7fe fcf4 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8003dbc:	61f8      	str	r0, [r7, #28]
        break;
 8003dbe:	e014      	b.n	8003dea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dc0:	f7fe fd06 	bl	80027d0 <HAL_RCC_GetPCLK2Freq>
 8003dc4:	61f8      	str	r0, [r7, #28]
        break;
 8003dc6:	e010      	b.n	8003dea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dc8:	4b1e      	ldr	r3, [pc, #120]	; (8003e44 <UART_SetConfig+0x56c>)
 8003dca:	61fb      	str	r3, [r7, #28]
        break;
 8003dcc:	e00d      	b.n	8003dea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dce:	f7fe fc51 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8003dd2:	61f8      	str	r0, [r7, #28]
        break;
 8003dd4:	e009      	b.n	8003dea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dda:	61fb      	str	r3, [r7, #28]
        break;
 8003ddc:	e005      	b.n	8003dea <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003de8:	bf00      	nop
    }

    if (pclk != 0U)
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d019      	beq.n	8003e24 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	085a      	lsrs	r2, r3, #1
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	441a      	add	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e02:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	2b0f      	cmp	r3, #15
 8003e08:	d909      	bls.n	8003e1e <UART_SetConfig+0x546>
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e10:	d205      	bcs.n	8003e1e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	60da      	str	r2, [r3, #12]
 8003e1c:	e002      	b.n	8003e24 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3728      	adds	r7, #40	; 0x28
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e3e:	bf00      	nop
 8003e40:	40008000 	.word	0x40008000
 8003e44:	00f42400 	.word	0x00f42400

08003e48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	f003 0310 	and.w	r3, r3, #16
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d01a      	beq.n	8003f5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f46:	d10a      	bne.n	8003f5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	605a      	str	r2, [r3, #4]
  }
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af02      	add	r7, sp, #8
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f9c:	f7fd fb7a 	bl	8001694 <HAL_GetTick>
 8003fa0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d10e      	bne.n	8003fce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f82d 	bl	800401e <UART_WaitOnFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e023      	b.n	8004016 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d10e      	bne.n	8003ffa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f817 	bl	800401e <UART_WaitOnFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e00d      	b.n	8004016 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b09c      	sub	sp, #112	; 0x70
 8004022:	af00      	add	r7, sp, #0
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	603b      	str	r3, [r7, #0]
 800402a:	4613      	mov	r3, r2
 800402c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800402e:	e0a5      	b.n	800417c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004030:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004036:	f000 80a1 	beq.w	800417c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800403a:	f7fd fb2b 	bl	8001694 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004046:	429a      	cmp	r2, r3
 8004048:	d302      	bcc.n	8004050 <UART_WaitOnFlagUntilTimeout+0x32>
 800404a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800404c:	2b00      	cmp	r3, #0
 800404e:	d13e      	bne.n	80040ce <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004058:	e853 3f00 	ldrex	r3, [r3]
 800405c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800405e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004060:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004064:	667b      	str	r3, [r7, #100]	; 0x64
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	461a      	mov	r2, r3
 800406c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800406e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004070:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004072:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004074:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004076:	e841 2300 	strex	r3, r2, [r1]
 800407a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800407c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1e6      	bne.n	8004050 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3308      	adds	r3, #8
 8004088:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800408c:	e853 3f00 	ldrex	r3, [r3]
 8004090:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004094:	f023 0301 	bic.w	r3, r3, #1
 8004098:	663b      	str	r3, [r7, #96]	; 0x60
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3308      	adds	r3, #8
 80040a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80040a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040aa:	e841 2300 	strex	r3, r2, [r1]
 80040ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80040b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1e5      	bne.n	8004082 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2220      	movs	r2, #32
 80040ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2220      	movs	r2, #32
 80040c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e067      	b.n	800419e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d04f      	beq.n	800417c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ea:	d147      	bne.n	800417c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040f4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	e853 3f00 	ldrex	r3, [r3]
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800410a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004114:	637b      	str	r3, [r7, #52]	; 0x34
 8004116:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004118:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800411a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800411c:	e841 2300 	strex	r3, r2, [r1]
 8004120:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1e6      	bne.n	80040f6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3308      	adds	r3, #8
 800412e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	e853 3f00 	ldrex	r3, [r3]
 8004136:	613b      	str	r3, [r7, #16]
   return(result);
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f023 0301 	bic.w	r3, r3, #1
 800413e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3308      	adds	r3, #8
 8004146:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004148:	623a      	str	r2, [r7, #32]
 800414a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414c:	69f9      	ldr	r1, [r7, #28]
 800414e:	6a3a      	ldr	r2, [r7, #32]
 8004150:	e841 2300 	strex	r3, r2, [r1]
 8004154:	61bb      	str	r3, [r7, #24]
   return(result);
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e5      	bne.n	8004128 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2220      	movs	r2, #32
 8004166:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2220      	movs	r2, #32
 800416c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e010      	b.n	800419e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	69da      	ldr	r2, [r3, #28]
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	4013      	ands	r3, r2
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	429a      	cmp	r2, r3
 800418a:	bf0c      	ite	eq
 800418c:	2301      	moveq	r3, #1
 800418e:	2300      	movne	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	79fb      	ldrb	r3, [r7, #7]
 8004196:	429a      	cmp	r2, r3
 8004198:	f43f af4a 	beq.w	8004030 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3770      	adds	r7, #112	; 0x70
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <__NVIC_SetPriority>:
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	6039      	str	r1, [r7, #0]
 80041b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	db0a      	blt.n	80041d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	490c      	ldr	r1, [pc, #48]	; (80041f4 <__NVIC_SetPriority+0x4c>)
 80041c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c6:	0112      	lsls	r2, r2, #4
 80041c8:	b2d2      	uxtb	r2, r2
 80041ca:	440b      	add	r3, r1
 80041cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80041d0:	e00a      	b.n	80041e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	4908      	ldr	r1, [pc, #32]	; (80041f8 <__NVIC_SetPriority+0x50>)
 80041d8:	79fb      	ldrb	r3, [r7, #7]
 80041da:	f003 030f 	and.w	r3, r3, #15
 80041de:	3b04      	subs	r3, #4
 80041e0:	0112      	lsls	r2, r2, #4
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	440b      	add	r3, r1
 80041e6:	761a      	strb	r2, [r3, #24]
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	e000e100 	.word	0xe000e100
 80041f8:	e000ed00 	.word	0xe000ed00

080041fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <SysTick_Handler+0x1c>)
 8004202:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004204:	f001 fd56 	bl	8005cb4 <xTaskGetSchedulerState>
 8004208:	4603      	mov	r3, r0
 800420a:	2b01      	cmp	r3, #1
 800420c:	d001      	beq.n	8004212 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800420e:	f002 fb3b 	bl	8006888 <xPortSysTickHandler>
  }
}
 8004212:	bf00      	nop
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	e000e010 	.word	0xe000e010

0800421c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004220:	2100      	movs	r1, #0
 8004222:	f06f 0004 	mvn.w	r0, #4
 8004226:	f7ff ffbf 	bl	80041a8 <__NVIC_SetPriority>
#endif
}
 800422a:	bf00      	nop
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004236:	f3ef 8305 	mrs	r3, IPSR
 800423a:	603b      	str	r3, [r7, #0]
  return(result);
 800423c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004242:	f06f 0305 	mvn.w	r3, #5
 8004246:	607b      	str	r3, [r7, #4]
 8004248:	e00c      	b.n	8004264 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800424a:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <osKernelInitialize+0x44>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d105      	bne.n	800425e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004252:	4b08      	ldr	r3, [pc, #32]	; (8004274 <osKernelInitialize+0x44>)
 8004254:	2201      	movs	r2, #1
 8004256:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004258:	2300      	movs	r3, #0
 800425a:	607b      	str	r3, [r7, #4]
 800425c:	e002      	b.n	8004264 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800425e:	f04f 33ff 	mov.w	r3, #4294967295
 8004262:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004264:	687b      	ldr	r3, [r7, #4]
}
 8004266:	4618      	mov	r0, r3
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	200002dc 	.word	0x200002dc

08004278 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800427e:	f3ef 8305 	mrs	r3, IPSR
 8004282:	603b      	str	r3, [r7, #0]
  return(result);
 8004284:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <osKernelStart+0x1a>
    stat = osErrorISR;
 800428a:	f06f 0305 	mvn.w	r3, #5
 800428e:	607b      	str	r3, [r7, #4]
 8004290:	e010      	b.n	80042b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004292:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <osKernelStart+0x48>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d109      	bne.n	80042ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800429a:	f7ff ffbf 	bl	800421c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800429e:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <osKernelStart+0x48>)
 80042a0:	2202      	movs	r2, #2
 80042a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80042a4:	f001 f8aa 	bl	80053fc <vTaskStartScheduler>
      stat = osOK;
 80042a8:	2300      	movs	r3, #0
 80042aa:	607b      	str	r3, [r7, #4]
 80042ac:	e002      	b.n	80042b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80042ae:	f04f 33ff 	mov.w	r3, #4294967295
 80042b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80042b4:	687b      	ldr	r3, [r7, #4]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	200002dc 	.word	0x200002dc

080042c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08e      	sub	sp, #56	; 0x38
 80042c8:	af04      	add	r7, sp, #16
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80042d0:	2300      	movs	r3, #0
 80042d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042d4:	f3ef 8305 	mrs	r3, IPSR
 80042d8:	617b      	str	r3, [r7, #20]
  return(result);
 80042da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d17e      	bne.n	80043de <osThreadNew+0x11a>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d07b      	beq.n	80043de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80042e6:	2380      	movs	r3, #128	; 0x80
 80042e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80042ea:	2318      	movs	r3, #24
 80042ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80042f2:	f04f 33ff 	mov.w	r3, #4294967295
 80042f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d045      	beq.n	800438a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <osThreadNew+0x48>
        name = attr->name;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <osThreadNew+0x6e>
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	2b38      	cmp	r3, #56	; 0x38
 8004324:	d805      	bhi.n	8004332 <osThreadNew+0x6e>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <osThreadNew+0x72>
        return (NULL);
 8004332:	2300      	movs	r3, #0
 8004334:	e054      	b.n	80043e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	089b      	lsrs	r3, r3, #2
 8004344:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00e      	beq.n	800436c <osThreadNew+0xa8>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	2ba7      	cmp	r3, #167	; 0xa7
 8004354:	d90a      	bls.n	800436c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800435a:	2b00      	cmp	r3, #0
 800435c:	d006      	beq.n	800436c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <osThreadNew+0xa8>
        mem = 1;
 8004366:	2301      	movs	r3, #1
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	e010      	b.n	800438e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10c      	bne.n	800438e <osThreadNew+0xca>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d108      	bne.n	800438e <osThreadNew+0xca>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d104      	bne.n	800438e <osThreadNew+0xca>
          mem = 0;
 8004384:	2300      	movs	r3, #0
 8004386:	61bb      	str	r3, [r7, #24]
 8004388:	e001      	b.n	800438e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800438a:	2300      	movs	r3, #0
 800438c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d110      	bne.n	80043b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800439c:	9202      	str	r2, [sp, #8]
 800439e:	9301      	str	r3, [sp, #4]
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	6a3a      	ldr	r2, [r7, #32]
 80043a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 fdf0 	bl	8004f90 <xTaskCreateStatic>
 80043b0:	4603      	mov	r3, r0
 80043b2:	613b      	str	r3, [r7, #16]
 80043b4:	e013      	b.n	80043de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d110      	bne.n	80043de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	b29a      	uxth	r2, r3
 80043c0:	f107 0310 	add.w	r3, r7, #16
 80043c4:	9301      	str	r3, [sp, #4]
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 fe3b 	bl	800504a <xTaskCreate>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d001      	beq.n	80043de <osThreadNew+0x11a>
            hTask = NULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80043de:	693b      	ldr	r3, [r7, #16]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3728      	adds	r7, #40	; 0x28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4a07      	ldr	r2, [pc, #28]	; (8004414 <vApplicationGetIdleTaskMemory+0x2c>)
 80043f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	4a06      	ldr	r2, [pc, #24]	; (8004418 <vApplicationGetIdleTaskMemory+0x30>)
 80043fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2280      	movs	r2, #128	; 0x80
 8004404:	601a      	str	r2, [r3, #0]
}
 8004406:	bf00      	nop
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	200002e0 	.word	0x200002e0
 8004418:	20000388 	.word	0x20000388

0800441c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4a07      	ldr	r2, [pc, #28]	; (8004448 <vApplicationGetTimerTaskMemory+0x2c>)
 800442c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	4a06      	ldr	r2, [pc, #24]	; (800444c <vApplicationGetTimerTaskMemory+0x30>)
 8004432:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f44f 7280 	mov.w	r2, #256	; 0x100
 800443a:	601a      	str	r2, [r3, #0]
}
 800443c:	bf00      	nop
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	20000588 	.word	0x20000588
 800444c:	20000630 	.word	0x20000630

08004450 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f103 0208 	add.w	r2, r3, #8
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f04f 32ff 	mov.w	r2, #4294967295
 8004468:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f103 0208 	add.w	r2, r3, #8
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f103 0208 	add.w	r2, r3, #8
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044aa:	b480      	push	{r7}
 80044ac:	b085      	sub	sp, #20
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	601a      	str	r2, [r3, #0]
}
 80044e6:	bf00      	nop
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044f2:	b480      	push	{r7}
 80044f4:	b085      	sub	sp, #20
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004508:	d103      	bne.n	8004512 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	e00c      	b.n	800452c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	3308      	adds	r3, #8
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	e002      	b.n	8004520 <vListInsert+0x2e>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	429a      	cmp	r2, r3
 800452a:	d2f6      	bcs.n	800451a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	601a      	str	r2, [r3, #0]
}
 8004558:	bf00      	nop
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6892      	ldr	r2, [r2, #8]
 800457a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6852      	ldr	r2, [r2, #4]
 8004584:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	429a      	cmp	r2, r3
 800458e:	d103      	bne.n	8004598 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	1e5a      	subs	r2, r3, #1
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10a      	bne.n	80045e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80045de:	bf00      	nop
 80045e0:	e7fe      	b.n	80045e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80045e2:	f002 f8bf 	bl	8006764 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ee:	68f9      	ldr	r1, [r7, #12]
 80045f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80045f2:	fb01 f303 	mul.w	r3, r1, r3
 80045f6:	441a      	add	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004612:	3b01      	subs	r3, #1
 8004614:	68f9      	ldr	r1, [r7, #12]
 8004616:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004618:	fb01 f303 	mul.w	r3, r1, r3
 800461c:	441a      	add	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	22ff      	movs	r2, #255	; 0xff
 8004626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	22ff      	movs	r2, #255	; 0xff
 800462e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d114      	bne.n	8004662 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d01a      	beq.n	8004676 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	3310      	adds	r3, #16
 8004644:	4618      	mov	r0, r3
 8004646:	f001 f973 	bl	8005930 <xTaskRemoveFromEventList>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d012      	beq.n	8004676 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004650:	4b0c      	ldr	r3, [pc, #48]	; (8004684 <xQueueGenericReset+0xcc>)
 8004652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	e009      	b.n	8004676 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	3310      	adds	r3, #16
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff fef2 	bl	8004450 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	3324      	adds	r3, #36	; 0x24
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff feed 	bl	8004450 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004676:	f002 f8a5 	bl	80067c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800467a:	2301      	movs	r3, #1
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	e000ed04 	.word	0xe000ed04

08004688 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004688:	b580      	push	{r7, lr}
 800468a:	b08e      	sub	sp, #56	; 0x38
 800468c:	af02      	add	r7, sp, #8
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10a      	bne.n	80046b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80046ae:	bf00      	nop
 80046b0:	e7fe      	b.n	80046b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10a      	bne.n	80046ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80046ca:	bf00      	nop
 80046cc:	e7fe      	b.n	80046cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <xQueueGenericCreateStatic+0x52>
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <xQueueGenericCreateStatic+0x56>
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <xQueueGenericCreateStatic+0x58>
 80046de:	2300      	movs	r3, #0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10a      	bne.n	80046fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80046e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	623b      	str	r3, [r7, #32]
}
 80046f6:	bf00      	nop
 80046f8:	e7fe      	b.n	80046f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d102      	bne.n	8004706 <xQueueGenericCreateStatic+0x7e>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <xQueueGenericCreateStatic+0x82>
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <xQueueGenericCreateStatic+0x84>
 800470a:	2300      	movs	r3, #0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10a      	bne.n	8004726 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004714:	f383 8811 	msr	BASEPRI, r3
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	61fb      	str	r3, [r7, #28]
}
 8004722:	bf00      	nop
 8004724:	e7fe      	b.n	8004724 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004726:	2350      	movs	r3, #80	; 0x50
 8004728:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b50      	cmp	r3, #80	; 0x50
 800472e:	d00a      	beq.n	8004746 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004734:	f383 8811 	msr	BASEPRI, r3
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	61bb      	str	r3, [r7, #24]
}
 8004742:	bf00      	nop
 8004744:	e7fe      	b.n	8004744 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004746:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800474c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00d      	beq.n	800476e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800475a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800475e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	4613      	mov	r3, r2
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	68b9      	ldr	r1, [r7, #8]
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 f805 	bl	8004778 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800476e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004770:	4618      	mov	r0, r3
 8004772:	3730      	adds	r7, #48	; 0x30
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
 8004784:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d103      	bne.n	8004794 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	e002      	b.n	800479a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80047a6:	2101      	movs	r1, #1
 80047a8:	69b8      	ldr	r0, [r7, #24]
 80047aa:	f7ff ff05 	bl	80045b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	78fa      	ldrb	r2, [r7, #3]
 80047b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80047b6:	bf00      	nop
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08e      	sub	sp, #56	; 0x38
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
 80047cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80047ce:	2300      	movs	r3, #0
 80047d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80047d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10a      	bne.n	80047f2 <xQueueGenericSend+0x32>
	__asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e0:	f383 8811 	msr	BASEPRI, r3
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80047ee:	bf00      	nop
 80047f0:	e7fe      	b.n	80047f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d103      	bne.n	8004800 <xQueueGenericSend+0x40>
 80047f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <xQueueGenericSend+0x44>
 8004800:	2301      	movs	r3, #1
 8004802:	e000      	b.n	8004806 <xQueueGenericSend+0x46>
 8004804:	2300      	movs	r3, #0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10a      	bne.n	8004820 <xQueueGenericSend+0x60>
	__asm volatile
 800480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800481c:	bf00      	nop
 800481e:	e7fe      	b.n	800481e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d103      	bne.n	800482e <xQueueGenericSend+0x6e>
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482a:	2b01      	cmp	r3, #1
 800482c:	d101      	bne.n	8004832 <xQueueGenericSend+0x72>
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <xQueueGenericSend+0x74>
 8004832:	2300      	movs	r3, #0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <xQueueGenericSend+0x8e>
	__asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	623b      	str	r3, [r7, #32]
}
 800484a:	bf00      	nop
 800484c:	e7fe      	b.n	800484c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800484e:	f001 fa31 	bl	8005cb4 <xTaskGetSchedulerState>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d102      	bne.n	800485e <xQueueGenericSend+0x9e>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <xQueueGenericSend+0xa2>
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <xQueueGenericSend+0xa4>
 8004862:	2300      	movs	r3, #0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10a      	bne.n	800487e <xQueueGenericSend+0xbe>
	__asm volatile
 8004868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	61fb      	str	r3, [r7, #28]
}
 800487a:	bf00      	nop
 800487c:	e7fe      	b.n	800487c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800487e:	f001 ff71 	bl	8006764 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488a:	429a      	cmp	r2, r3
 800488c:	d302      	bcc.n	8004894 <xQueueGenericSend+0xd4>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b02      	cmp	r3, #2
 8004892:	d129      	bne.n	80048e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	68b9      	ldr	r1, [r7, #8]
 8004898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800489a:	f000 fa0b 	bl	8004cb4 <prvCopyDataToQueue>
 800489e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d010      	beq.n	80048ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048aa:	3324      	adds	r3, #36	; 0x24
 80048ac:	4618      	mov	r0, r3
 80048ae:	f001 f83f 	bl	8005930 <xTaskRemoveFromEventList>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d013      	beq.n	80048e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80048b8:	4b3f      	ldr	r3, [pc, #252]	; (80049b8 <xQueueGenericSend+0x1f8>)
 80048ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	e00a      	b.n	80048e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80048ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d007      	beq.n	80048e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80048d0:	4b39      	ldr	r3, [pc, #228]	; (80049b8 <xQueueGenericSend+0x1f8>)
 80048d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80048e0:	f001 ff70 	bl	80067c4 <vPortExitCritical>
				return pdPASS;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e063      	b.n	80049b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d103      	bne.n	80048f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048ee:	f001 ff69 	bl	80067c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	e05c      	b.n	80049b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d106      	bne.n	800490a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048fc:	f107 0314 	add.w	r3, r7, #20
 8004900:	4618      	mov	r0, r3
 8004902:	f001 f879 	bl	80059f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004906:	2301      	movs	r3, #1
 8004908:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800490a:	f001 ff5b 	bl	80067c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800490e:	f000 fde5 	bl	80054dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004912:	f001 ff27 	bl	8006764 <vPortEnterCritical>
 8004916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004918:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800491c:	b25b      	sxtb	r3, r3
 800491e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004922:	d103      	bne.n	800492c <xQueueGenericSend+0x16c>
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800492c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004932:	b25b      	sxtb	r3, r3
 8004934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004938:	d103      	bne.n	8004942 <xQueueGenericSend+0x182>
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004942:	f001 ff3f 	bl	80067c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004946:	1d3a      	adds	r2, r7, #4
 8004948:	f107 0314 	add.w	r3, r7, #20
 800494c:	4611      	mov	r1, r2
 800494e:	4618      	mov	r0, r3
 8004950:	f001 f868 	bl	8005a24 <xTaskCheckForTimeOut>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d124      	bne.n	80049a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800495a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800495c:	f000 faa2 	bl	8004ea4 <prvIsQueueFull>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d018      	beq.n	8004998 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	3310      	adds	r3, #16
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	4611      	mov	r1, r2
 800496e:	4618      	mov	r0, r3
 8004970:	f000 ff8e 	bl	8005890 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004976:	f000 fa2d 	bl	8004dd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800497a:	f000 fdbd 	bl	80054f8 <xTaskResumeAll>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	f47f af7c 	bne.w	800487e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004986:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <xQueueGenericSend+0x1f8>)
 8004988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	e772      	b.n	800487e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800499a:	f000 fa1b 	bl	8004dd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800499e:	f000 fdab 	bl	80054f8 <xTaskResumeAll>
 80049a2:	e76c      	b.n	800487e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80049a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049a6:	f000 fa15 	bl	8004dd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049aa:	f000 fda5 	bl	80054f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80049ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3738      	adds	r7, #56	; 0x38
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	e000ed04 	.word	0xe000ed04

080049bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b090      	sub	sp, #64	; 0x40
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80049ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10a      	bne.n	80049ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80049d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049e6:	bf00      	nop
 80049e8:	e7fe      	b.n	80049e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d103      	bne.n	80049f8 <xQueueGenericSendFromISR+0x3c>
 80049f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <xQueueGenericSendFromISR+0x40>
 80049f8:	2301      	movs	r3, #1
 80049fa:	e000      	b.n	80049fe <xQueueGenericSendFromISR+0x42>
 80049fc:	2300      	movs	r3, #0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10a      	bne.n	8004a18 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a14:	bf00      	nop
 8004a16:	e7fe      	b.n	8004a16 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d103      	bne.n	8004a26 <xQueueGenericSendFromISR+0x6a>
 8004a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d101      	bne.n	8004a2a <xQueueGenericSendFromISR+0x6e>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <xQueueGenericSendFromISR+0x70>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	623b      	str	r3, [r7, #32]
}
 8004a42:	bf00      	nop
 8004a44:	e7fe      	b.n	8004a44 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a46:	f001 ff6f 	bl	8006928 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a4a:	f3ef 8211 	mrs	r2, BASEPRI
 8004a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	61fa      	str	r2, [r7, #28]
 8004a60:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a62:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a64:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d302      	bcc.n	8004a78 <xQueueGenericSendFromISR+0xbc>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d12f      	bne.n	8004ad8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a86:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a8e:	f000 f911 	bl	8004cb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a92:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9a:	d112      	bne.n	8004ac2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d016      	beq.n	8004ad2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa6:	3324      	adds	r3, #36	; 0x24
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 ff41 	bl	8005930 <xTaskRemoveFromEventList>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00e      	beq.n	8004ad2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00b      	beq.n	8004ad2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	e007      	b.n	8004ad2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ac2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	b25a      	sxtb	r2, r3
 8004acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004ad6:	e001      	b.n	8004adc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ade:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ae6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3740      	adds	r7, #64	; 0x40
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08c      	sub	sp, #48	; 0x30
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b00:	2300      	movs	r3, #0
 8004b02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10a      	bne.n	8004b24 <xQueueReceive+0x30>
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	623b      	str	r3, [r7, #32]
}
 8004b20:	bf00      	nop
 8004b22:	e7fe      	b.n	8004b22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d103      	bne.n	8004b32 <xQueueReceive+0x3e>
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <xQueueReceive+0x42>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <xQueueReceive+0x44>
 8004b36:	2300      	movs	r3, #0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10a      	bne.n	8004b52 <xQueueReceive+0x5e>
	__asm volatile
 8004b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	61fb      	str	r3, [r7, #28]
}
 8004b4e:	bf00      	nop
 8004b50:	e7fe      	b.n	8004b50 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b52:	f001 f8af 	bl	8005cb4 <xTaskGetSchedulerState>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d102      	bne.n	8004b62 <xQueueReceive+0x6e>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <xQueueReceive+0x72>
 8004b62:	2301      	movs	r3, #1
 8004b64:	e000      	b.n	8004b68 <xQueueReceive+0x74>
 8004b66:	2300      	movs	r3, #0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10a      	bne.n	8004b82 <xQueueReceive+0x8e>
	__asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	61bb      	str	r3, [r7, #24]
}
 8004b7e:	bf00      	nop
 8004b80:	e7fe      	b.n	8004b80 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b82:	f001 fdef 	bl	8006764 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d01f      	beq.n	8004bd2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b92:	68b9      	ldr	r1, [r7, #8]
 8004b94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b96:	f000 f8f7 	bl	8004d88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	1e5a      	subs	r2, r3, #1
 8004b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00f      	beq.n	8004bca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	3310      	adds	r3, #16
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 febe 	bl	8005930 <xTaskRemoveFromEventList>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d007      	beq.n	8004bca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004bba:	4b3d      	ldr	r3, [pc, #244]	; (8004cb0 <xQueueReceive+0x1bc>)
 8004bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004bca:	f001 fdfb 	bl	80067c4 <vPortExitCritical>
				return pdPASS;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e069      	b.n	8004ca6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d103      	bne.n	8004be0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bd8:	f001 fdf4 	bl	80067c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	e062      	b.n	8004ca6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004be6:	f107 0310 	add.w	r3, r7, #16
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 ff04 	bl	80059f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bf4:	f001 fde6 	bl	80067c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bf8:	f000 fc70 	bl	80054dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bfc:	f001 fdb2 	bl	8006764 <vPortEnterCritical>
 8004c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c06:	b25b      	sxtb	r3, r3
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d103      	bne.n	8004c16 <xQueueReceive+0x122>
 8004c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c1c:	b25b      	sxtb	r3, r3
 8004c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c22:	d103      	bne.n	8004c2c <xQueueReceive+0x138>
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c2c:	f001 fdca 	bl	80067c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c30:	1d3a      	adds	r2, r7, #4
 8004c32:	f107 0310 	add.w	r3, r7, #16
 8004c36:	4611      	mov	r1, r2
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fef3 	bl	8005a24 <xTaskCheckForTimeOut>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d123      	bne.n	8004c8c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c46:	f000 f917 	bl	8004e78 <prvIsQueueEmpty>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d017      	beq.n	8004c80 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c52:	3324      	adds	r3, #36	; 0x24
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	4611      	mov	r1, r2
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 fe19 	bl	8005890 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c60:	f000 f8b8 	bl	8004dd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c64:	f000 fc48 	bl	80054f8 <xTaskResumeAll>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d189      	bne.n	8004b82 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004c6e:	4b10      	ldr	r3, [pc, #64]	; (8004cb0 <xQueueReceive+0x1bc>)
 8004c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	e780      	b.n	8004b82 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c82:	f000 f8a7 	bl	8004dd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c86:	f000 fc37 	bl	80054f8 <xTaskResumeAll>
 8004c8a:	e77a      	b.n	8004b82 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c8e:	f000 f8a1 	bl	8004dd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c92:	f000 fc31 	bl	80054f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c98:	f000 f8ee 	bl	8004e78 <prvIsQueueEmpty>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f43f af6f 	beq.w	8004b82 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ca4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3730      	adds	r7, #48	; 0x30
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	e000ed04 	.word	0xe000ed04

08004cb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10d      	bne.n	8004cee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d14d      	bne.n	8004d76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f001 f806 	bl	8005cf0 <xTaskPriorityDisinherit>
 8004ce4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	609a      	str	r2, [r3, #8]
 8004cec:	e043      	b.n	8004d76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d119      	bne.n	8004d28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6858      	ldr	r0, [r3, #4]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	68b9      	ldr	r1, [r7, #8]
 8004d00:	f002 fe8f 	bl	8007a22 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0c:	441a      	add	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d32b      	bcc.n	8004d76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	605a      	str	r2, [r3, #4]
 8004d26:	e026      	b.n	8004d76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	68d8      	ldr	r0, [r3, #12]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d30:	461a      	mov	r2, r3
 8004d32:	68b9      	ldr	r1, [r7, #8]
 8004d34:	f002 fe75 	bl	8007a22 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d40:	425b      	negs	r3, r3
 8004d42:	441a      	add	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d207      	bcs.n	8004d64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	425b      	negs	r3, r3
 8004d5e:	441a      	add	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d105      	bne.n	8004d76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d002      	beq.n	8004d76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004d7e:	697b      	ldr	r3, [r7, #20]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d018      	beq.n	8004dcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	441a      	add	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d303      	bcc.n	8004dbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68d9      	ldr	r1, [r3, #12]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	6838      	ldr	r0, [r7, #0]
 8004dc8:	f002 fe2b 	bl	8007a22 <memcpy>
	}
}
 8004dcc:	bf00      	nop
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ddc:	f001 fcc2 	bl	8006764 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004de6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004de8:	e011      	b.n	8004e0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d012      	beq.n	8004e18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	3324      	adds	r3, #36	; 0x24
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 fd9a 	bl	8005930 <xTaskRemoveFromEventList>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e02:	f000 fe71 	bl	8005ae8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e06:	7bfb      	ldrb	r3, [r7, #15]
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	dce9      	bgt.n	8004dea <prvUnlockQueue+0x16>
 8004e16:	e000      	b.n	8004e1a <prvUnlockQueue+0x46>
					break;
 8004e18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	22ff      	movs	r2, #255	; 0xff
 8004e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004e22:	f001 fccf 	bl	80067c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e26:	f001 fc9d 	bl	8006764 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e32:	e011      	b.n	8004e58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d012      	beq.n	8004e62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3310      	adds	r3, #16
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 fd75 	bl	8005930 <xTaskRemoveFromEventList>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e4c:	f000 fe4c 	bl	8005ae8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e50:	7bbb      	ldrb	r3, [r7, #14]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	dce9      	bgt.n	8004e34 <prvUnlockQueue+0x60>
 8004e60:	e000      	b.n	8004e64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	22ff      	movs	r2, #255	; 0xff
 8004e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004e6c:	f001 fcaa 	bl	80067c4 <vPortExitCritical>
}
 8004e70:	bf00      	nop
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e80:	f001 fc70 	bl	8006764 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d102      	bne.n	8004e92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	e001      	b.n	8004e96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e92:	2300      	movs	r3, #0
 8004e94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e96:	f001 fc95 	bl	80067c4 <vPortExitCritical>

	return xReturn;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004eac:	f001 fc5a 	bl	8006764 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d102      	bne.n	8004ec2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	e001      	b.n	8004ec6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ec6:	f001 fc7d 	bl	80067c4 <vPortExitCritical>

	return xReturn;
 8004eca:	68fb      	ldr	r3, [r7, #12]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	e014      	b.n	8004f0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ee4:	4a0f      	ldr	r2, [pc, #60]	; (8004f24 <vQueueAddToRegistry+0x50>)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10b      	bne.n	8004f08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ef0:	490c      	ldr	r1, [pc, #48]	; (8004f24 <vQueueAddToRegistry+0x50>)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004efa:	4a0a      	ldr	r2, [pc, #40]	; (8004f24 <vQueueAddToRegistry+0x50>)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	4413      	add	r3, r2
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004f06:	e006      	b.n	8004f16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2b07      	cmp	r3, #7
 8004f12:	d9e7      	bls.n	8004ee4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	20000a30 	.word	0x20000a30

08004f28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004f38:	f001 fc14 	bl	8006764 <vPortEnterCritical>
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f42:	b25b      	sxtb	r3, r3
 8004f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f48:	d103      	bne.n	8004f52 <vQueueWaitForMessageRestricted+0x2a>
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f58:	b25b      	sxtb	r3, r3
 8004f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5e:	d103      	bne.n	8004f68 <vQueueWaitForMessageRestricted+0x40>
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f68:	f001 fc2c 	bl	80067c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d106      	bne.n	8004f82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	3324      	adds	r3, #36	; 0x24
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 fcab 	bl	80058d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f82:	6978      	ldr	r0, [r7, #20]
 8004f84:	f7ff ff26 	bl	8004dd4 <prvUnlockQueue>
	}
 8004f88:	bf00      	nop
 8004f8a:	3718      	adds	r7, #24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08e      	sub	sp, #56	; 0x38
 8004f94:	af04      	add	r7, sp, #16
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10a      	bne.n	8004fba <xTaskCreateStatic+0x2a>
	__asm volatile
 8004fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa8:	f383 8811 	msr	BASEPRI, r3
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	623b      	str	r3, [r7, #32]
}
 8004fb6:	bf00      	nop
 8004fb8:	e7fe      	b.n	8004fb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10a      	bne.n	8004fd6 <xTaskCreateStatic+0x46>
	__asm volatile
 8004fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	61fb      	str	r3, [r7, #28]
}
 8004fd2:	bf00      	nop
 8004fd4:	e7fe      	b.n	8004fd4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004fd6:	23a8      	movs	r3, #168	; 0xa8
 8004fd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	2ba8      	cmp	r3, #168	; 0xa8
 8004fde:	d00a      	beq.n	8004ff6 <xTaskCreateStatic+0x66>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	61bb      	str	r3, [r7, #24]
}
 8004ff2:	bf00      	nop
 8004ff4:	e7fe      	b.n	8004ff4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ff6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d01e      	beq.n	800503c <xTaskCreateStatic+0xac>
 8004ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01b      	beq.n	800503c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005006:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800500c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	2202      	movs	r2, #2
 8005012:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005016:	2300      	movs	r3, #0
 8005018:	9303      	str	r3, [sp, #12]
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	9302      	str	r3, [sp, #8]
 800501e:	f107 0314 	add.w	r3, r7, #20
 8005022:	9301      	str	r3, [sp, #4]
 8005024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	68b9      	ldr	r1, [r7, #8]
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 f850 	bl	80050d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005034:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005036:	f000 f8f3 	bl	8005220 <prvAddNewTaskToReadyList>
 800503a:	e001      	b.n	8005040 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800503c:	2300      	movs	r3, #0
 800503e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005040:	697b      	ldr	r3, [r7, #20]
	}
 8005042:	4618      	mov	r0, r3
 8005044:	3728      	adds	r7, #40	; 0x28
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800504a:	b580      	push	{r7, lr}
 800504c:	b08c      	sub	sp, #48	; 0x30
 800504e:	af04      	add	r7, sp, #16
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	60b9      	str	r1, [r7, #8]
 8005054:	603b      	str	r3, [r7, #0]
 8005056:	4613      	mov	r3, r2
 8005058:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800505a:	88fb      	ldrh	r3, [r7, #6]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4618      	mov	r0, r3
 8005060:	f001 fca2 	bl	80069a8 <pvPortMalloc>
 8005064:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00e      	beq.n	800508a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800506c:	20a8      	movs	r0, #168	; 0xa8
 800506e:	f001 fc9b 	bl	80069a8 <pvPortMalloc>
 8005072:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	631a      	str	r2, [r3, #48]	; 0x30
 8005080:	e005      	b.n	800508e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005082:	6978      	ldr	r0, [r7, #20]
 8005084:	f001 fd5c 	bl	8006b40 <vPortFree>
 8005088:	e001      	b.n	800508e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800508a:	2300      	movs	r3, #0
 800508c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d017      	beq.n	80050c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800509c:	88fa      	ldrh	r2, [r7, #6]
 800509e:	2300      	movs	r3, #0
 80050a0:	9303      	str	r3, [sp, #12]
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	9302      	str	r3, [sp, #8]
 80050a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a8:	9301      	str	r3, [sp, #4]
 80050aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68b9      	ldr	r1, [r7, #8]
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 f80e 	bl	80050d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050b8:	69f8      	ldr	r0, [r7, #28]
 80050ba:	f000 f8b1 	bl	8005220 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80050be:	2301      	movs	r3, #1
 80050c0:	61bb      	str	r3, [r7, #24]
 80050c2:	e002      	b.n	80050ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80050c4:	f04f 33ff 	mov.w	r3, #4294967295
 80050c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80050ca:	69bb      	ldr	r3, [r7, #24]
	}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3720      	adds	r7, #32
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	461a      	mov	r2, r3
 80050ec:	21a5      	movs	r1, #165	; 0xa5
 80050ee:	f002 fbc2 	bl	8007876 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80050f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80050fc:	3b01      	subs	r3, #1
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	f023 0307 	bic.w	r3, r3, #7
 800510a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511a:	f383 8811 	msr	BASEPRI, r3
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	f3bf 8f4f 	dsb	sy
 8005126:	617b      	str	r3, [r7, #20]
}
 8005128:	bf00      	nop
 800512a:	e7fe      	b.n	800512a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d01f      	beq.n	8005172 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005132:	2300      	movs	r3, #0
 8005134:	61fb      	str	r3, [r7, #28]
 8005136:	e012      	b.n	800515e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	4413      	add	r3, r2
 800513e:	7819      	ldrb	r1, [r3, #0]
 8005140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	4413      	add	r3, r2
 8005146:	3334      	adds	r3, #52	; 0x34
 8005148:	460a      	mov	r2, r1
 800514a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	4413      	add	r3, r2
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d006      	beq.n	8005166 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	3301      	adds	r3, #1
 800515c:	61fb      	str	r3, [r7, #28]
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	2b0f      	cmp	r3, #15
 8005162:	d9e9      	bls.n	8005138 <prvInitialiseNewTask+0x64>
 8005164:	e000      	b.n	8005168 <prvInitialiseNewTask+0x94>
			{
				break;
 8005166:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005170:	e003      	b.n	800517a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800517a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517c:	2b37      	cmp	r3, #55	; 0x37
 800517e:	d901      	bls.n	8005184 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005180:	2337      	movs	r3, #55	; 0x37
 8005182:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005188:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800518a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800518e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005192:	2200      	movs	r2, #0
 8005194:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	3304      	adds	r3, #4
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff f978 	bl	8004490 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a2:	3318      	adds	r3, #24
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7ff f973 	bl	8004490 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80051aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	2200      	movs	r2, #0
 80051c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80051d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d2:	3354      	adds	r3, #84	; 0x54
 80051d4:	224c      	movs	r2, #76	; 0x4c
 80051d6:	2100      	movs	r1, #0
 80051d8:	4618      	mov	r0, r3
 80051da:	f002 fb4c 	bl	8007876 <memset>
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	4a0c      	ldr	r2, [pc, #48]	; (8005214 <prvInitialiseNewTask+0x140>)
 80051e2:	659a      	str	r2, [r3, #88]	; 0x58
 80051e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e6:	4a0c      	ldr	r2, [pc, #48]	; (8005218 <prvInitialiseNewTask+0x144>)
 80051e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80051ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ec:	4a0b      	ldr	r2, [pc, #44]	; (800521c <prvInitialiseNewTask+0x148>)
 80051ee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	68f9      	ldr	r1, [r7, #12]
 80051f4:	69b8      	ldr	r0, [r7, #24]
 80051f6:	f001 f98b 	bl	8006510 <pxPortInitialiseStack>
 80051fa:	4602      	mov	r2, r0
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800520a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800520c:	bf00      	nop
 800520e:	3720      	adds	r7, #32
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	20001c7c 	.word	0x20001c7c
 8005218:	20001ce4 	.word	0x20001ce4
 800521c:	20001d4c 	.word	0x20001d4c

08005220 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005228:	f001 fa9c 	bl	8006764 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800522c:	4b2d      	ldr	r3, [pc, #180]	; (80052e4 <prvAddNewTaskToReadyList+0xc4>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3301      	adds	r3, #1
 8005232:	4a2c      	ldr	r2, [pc, #176]	; (80052e4 <prvAddNewTaskToReadyList+0xc4>)
 8005234:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005236:	4b2c      	ldr	r3, [pc, #176]	; (80052e8 <prvAddNewTaskToReadyList+0xc8>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d109      	bne.n	8005252 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800523e:	4a2a      	ldr	r2, [pc, #168]	; (80052e8 <prvAddNewTaskToReadyList+0xc8>)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005244:	4b27      	ldr	r3, [pc, #156]	; (80052e4 <prvAddNewTaskToReadyList+0xc4>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d110      	bne.n	800526e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800524c:	f000 fc70 	bl	8005b30 <prvInitialiseTaskLists>
 8005250:	e00d      	b.n	800526e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005252:	4b26      	ldr	r3, [pc, #152]	; (80052ec <prvAddNewTaskToReadyList+0xcc>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d109      	bne.n	800526e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800525a:	4b23      	ldr	r3, [pc, #140]	; (80052e8 <prvAddNewTaskToReadyList+0xc8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	429a      	cmp	r2, r3
 8005266:	d802      	bhi.n	800526e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005268:	4a1f      	ldr	r2, [pc, #124]	; (80052e8 <prvAddNewTaskToReadyList+0xc8>)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800526e:	4b20      	ldr	r3, [pc, #128]	; (80052f0 <prvAddNewTaskToReadyList+0xd0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3301      	adds	r3, #1
 8005274:	4a1e      	ldr	r2, [pc, #120]	; (80052f0 <prvAddNewTaskToReadyList+0xd0>)
 8005276:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005278:	4b1d      	ldr	r3, [pc, #116]	; (80052f0 <prvAddNewTaskToReadyList+0xd0>)
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005284:	4b1b      	ldr	r3, [pc, #108]	; (80052f4 <prvAddNewTaskToReadyList+0xd4>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	429a      	cmp	r2, r3
 800528a:	d903      	bls.n	8005294 <prvAddNewTaskToReadyList+0x74>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005290:	4a18      	ldr	r2, [pc, #96]	; (80052f4 <prvAddNewTaskToReadyList+0xd4>)
 8005292:	6013      	str	r3, [r2, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005298:	4613      	mov	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4a15      	ldr	r2, [pc, #84]	; (80052f8 <prvAddNewTaskToReadyList+0xd8>)
 80052a2:	441a      	add	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3304      	adds	r3, #4
 80052a8:	4619      	mov	r1, r3
 80052aa:	4610      	mov	r0, r2
 80052ac:	f7ff f8fd 	bl	80044aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80052b0:	f001 fa88 	bl	80067c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80052b4:	4b0d      	ldr	r3, [pc, #52]	; (80052ec <prvAddNewTaskToReadyList+0xcc>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00e      	beq.n	80052da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80052bc:	4b0a      	ldr	r3, [pc, #40]	; (80052e8 <prvAddNewTaskToReadyList+0xc8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d207      	bcs.n	80052da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80052ca:	4b0c      	ldr	r3, [pc, #48]	; (80052fc <prvAddNewTaskToReadyList+0xdc>)
 80052cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052da:	bf00      	nop
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	20000f44 	.word	0x20000f44
 80052e8:	20000a70 	.word	0x20000a70
 80052ec:	20000f50 	.word	0x20000f50
 80052f0:	20000f60 	.word	0x20000f60
 80052f4:	20000f4c 	.word	0x20000f4c
 80052f8:	20000a74 	.word	0x20000a74
 80052fc:	e000ed04 	.word	0xe000ed04

08005300 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005300:	b580      	push	{r7, lr}
 8005302:	b08a      	sub	sp, #40	; 0x28
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800530a:	2300      	movs	r3, #0
 800530c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10a      	bne.n	800532a <vTaskDelayUntil+0x2a>
	__asm volatile
 8005314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	617b      	str	r3, [r7, #20]
}
 8005326:	bf00      	nop
 8005328:	e7fe      	b.n	8005328 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10a      	bne.n	8005346 <vTaskDelayUntil+0x46>
	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	613b      	str	r3, [r7, #16]
}
 8005342:	bf00      	nop
 8005344:	e7fe      	b.n	8005344 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8005346:	4b2a      	ldr	r3, [pc, #168]	; (80053f0 <vTaskDelayUntil+0xf0>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <vTaskDelayUntil+0x64>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	60fb      	str	r3, [r7, #12]
}
 8005360:	bf00      	nop
 8005362:	e7fe      	b.n	8005362 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8005364:	f000 f8ba 	bl	80054dc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005368:	4b22      	ldr	r3, [pc, #136]	; (80053f4 <vTaskDelayUntil+0xf4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	4413      	add	r3, r2
 8005376:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6a3a      	ldr	r2, [r7, #32]
 800537e:	429a      	cmp	r2, r3
 8005380:	d20b      	bcs.n	800539a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69fa      	ldr	r2, [r7, #28]
 8005388:	429a      	cmp	r2, r3
 800538a:	d211      	bcs.n	80053b0 <vTaskDelayUntil+0xb0>
 800538c:	69fa      	ldr	r2, [r7, #28]
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	429a      	cmp	r2, r3
 8005392:	d90d      	bls.n	80053b0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005394:	2301      	movs	r3, #1
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
 8005398:	e00a      	b.n	80053b0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	69fa      	ldr	r2, [r7, #28]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d303      	bcc.n	80053ac <vTaskDelayUntil+0xac>
 80053a4:	69fa      	ldr	r2, [r7, #28]
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d901      	bls.n	80053b0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80053ac:	2301      	movs	r3, #1
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	69fa      	ldr	r2, [r7, #28]
 80053b4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d006      	beq.n	80053ca <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80053bc:	69fa      	ldr	r2, [r7, #28]
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2100      	movs	r1, #0
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 fd01 	bl	8005dcc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80053ca:	f000 f895 	bl	80054f8 <xTaskResumeAll>
 80053ce:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d107      	bne.n	80053e6 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80053d6:	4b08      	ldr	r3, [pc, #32]	; (80053f8 <vTaskDelayUntil+0xf8>)
 80053d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053e6:	bf00      	nop
 80053e8:	3728      	adds	r7, #40	; 0x28
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	20000f6c 	.word	0x20000f6c
 80053f4:	20000f48 	.word	0x20000f48
 80053f8:	e000ed04 	.word	0xe000ed04

080053fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08a      	sub	sp, #40	; 0x28
 8005400:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005402:	2300      	movs	r3, #0
 8005404:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005406:	2300      	movs	r3, #0
 8005408:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800540a:	463a      	mov	r2, r7
 800540c:	1d39      	adds	r1, r7, #4
 800540e:	f107 0308 	add.w	r3, r7, #8
 8005412:	4618      	mov	r0, r3
 8005414:	f7fe ffe8 	bl	80043e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005418:	6839      	ldr	r1, [r7, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	9202      	str	r2, [sp, #8]
 8005420:	9301      	str	r3, [sp, #4]
 8005422:	2300      	movs	r3, #0
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	2300      	movs	r3, #0
 8005428:	460a      	mov	r2, r1
 800542a:	4924      	ldr	r1, [pc, #144]	; (80054bc <vTaskStartScheduler+0xc0>)
 800542c:	4824      	ldr	r0, [pc, #144]	; (80054c0 <vTaskStartScheduler+0xc4>)
 800542e:	f7ff fdaf 	bl	8004f90 <xTaskCreateStatic>
 8005432:	4603      	mov	r3, r0
 8005434:	4a23      	ldr	r2, [pc, #140]	; (80054c4 <vTaskStartScheduler+0xc8>)
 8005436:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005438:	4b22      	ldr	r3, [pc, #136]	; (80054c4 <vTaskStartScheduler+0xc8>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d002      	beq.n	8005446 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005440:	2301      	movs	r3, #1
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	e001      	b.n	800544a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005446:	2300      	movs	r3, #0
 8005448:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d102      	bne.n	8005456 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005450:	f000 fd10 	bl	8005e74 <xTimerCreateTimerTask>
 8005454:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d11b      	bne.n	8005494 <vTaskStartScheduler+0x98>
	__asm volatile
 800545c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	613b      	str	r3, [r7, #16]
}
 800546e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005470:	4b15      	ldr	r3, [pc, #84]	; (80054c8 <vTaskStartScheduler+0xcc>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3354      	adds	r3, #84	; 0x54
 8005476:	4a15      	ldr	r2, [pc, #84]	; (80054cc <vTaskStartScheduler+0xd0>)
 8005478:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800547a:	4b15      	ldr	r3, [pc, #84]	; (80054d0 <vTaskStartScheduler+0xd4>)
 800547c:	f04f 32ff 	mov.w	r2, #4294967295
 8005480:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005482:	4b14      	ldr	r3, [pc, #80]	; (80054d4 <vTaskStartScheduler+0xd8>)
 8005484:	2201      	movs	r2, #1
 8005486:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005488:	4b13      	ldr	r3, [pc, #76]	; (80054d8 <vTaskStartScheduler+0xdc>)
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800548e:	f001 f8c7 	bl	8006620 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005492:	e00e      	b.n	80054b2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549a:	d10a      	bne.n	80054b2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800549c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	60fb      	str	r3, [r7, #12]
}
 80054ae:	bf00      	nop
 80054b0:	e7fe      	b.n	80054b0 <vTaskStartScheduler+0xb4>
}
 80054b2:	bf00      	nop
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	08009810 	.word	0x08009810
 80054c0:	08005b01 	.word	0x08005b01
 80054c4:	20000f68 	.word	0x20000f68
 80054c8:	20000a70 	.word	0x20000a70
 80054cc:	20000068 	.word	0x20000068
 80054d0:	20000f64 	.word	0x20000f64
 80054d4:	20000f50 	.word	0x20000f50
 80054d8:	20000f48 	.word	0x20000f48

080054dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80054e0:	4b04      	ldr	r3, [pc, #16]	; (80054f4 <vTaskSuspendAll+0x18>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3301      	adds	r3, #1
 80054e6:	4a03      	ldr	r2, [pc, #12]	; (80054f4 <vTaskSuspendAll+0x18>)
 80054e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80054ea:	bf00      	nop
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	20000f6c 	.word	0x20000f6c

080054f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054fe:	2300      	movs	r3, #0
 8005500:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005502:	2300      	movs	r3, #0
 8005504:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005506:	4b42      	ldr	r3, [pc, #264]	; (8005610 <xTaskResumeAll+0x118>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10a      	bne.n	8005524 <xTaskResumeAll+0x2c>
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	603b      	str	r3, [r7, #0]
}
 8005520:	bf00      	nop
 8005522:	e7fe      	b.n	8005522 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005524:	f001 f91e 	bl	8006764 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005528:	4b39      	ldr	r3, [pc, #228]	; (8005610 <xTaskResumeAll+0x118>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3b01      	subs	r3, #1
 800552e:	4a38      	ldr	r2, [pc, #224]	; (8005610 <xTaskResumeAll+0x118>)
 8005530:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005532:	4b37      	ldr	r3, [pc, #220]	; (8005610 <xTaskResumeAll+0x118>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d162      	bne.n	8005600 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800553a:	4b36      	ldr	r3, [pc, #216]	; (8005614 <xTaskResumeAll+0x11c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d05e      	beq.n	8005600 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005542:	e02f      	b.n	80055a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005544:	4b34      	ldr	r3, [pc, #208]	; (8005618 <xTaskResumeAll+0x120>)
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	3318      	adds	r3, #24
 8005550:	4618      	mov	r0, r3
 8005552:	f7ff f807 	bl	8004564 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	3304      	adds	r3, #4
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff f802 	bl	8004564 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005564:	4b2d      	ldr	r3, [pc, #180]	; (800561c <xTaskResumeAll+0x124>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	429a      	cmp	r2, r3
 800556a:	d903      	bls.n	8005574 <xTaskResumeAll+0x7c>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005570:	4a2a      	ldr	r2, [pc, #168]	; (800561c <xTaskResumeAll+0x124>)
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005578:	4613      	mov	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4a27      	ldr	r2, [pc, #156]	; (8005620 <xTaskResumeAll+0x128>)
 8005582:	441a      	add	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	3304      	adds	r3, #4
 8005588:	4619      	mov	r1, r3
 800558a:	4610      	mov	r0, r2
 800558c:	f7fe ff8d 	bl	80044aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005594:	4b23      	ldr	r3, [pc, #140]	; (8005624 <xTaskResumeAll+0x12c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559a:	429a      	cmp	r2, r3
 800559c:	d302      	bcc.n	80055a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800559e:	4b22      	ldr	r3, [pc, #136]	; (8005628 <xTaskResumeAll+0x130>)
 80055a0:	2201      	movs	r2, #1
 80055a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055a4:	4b1c      	ldr	r3, [pc, #112]	; (8005618 <xTaskResumeAll+0x120>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1cb      	bne.n	8005544 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055b2:	f000 fb5f 	bl	8005c74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055b6:	4b1d      	ldr	r3, [pc, #116]	; (800562c <xTaskResumeAll+0x134>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d010      	beq.n	80055e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055c2:	f000 f847 	bl	8005654 <xTaskIncrementTick>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80055cc:	4b16      	ldr	r3, [pc, #88]	; (8005628 <xTaskResumeAll+0x130>)
 80055ce:	2201      	movs	r2, #1
 80055d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	3b01      	subs	r3, #1
 80055d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1f1      	bne.n	80055c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80055de:	4b13      	ldr	r3, [pc, #76]	; (800562c <xTaskResumeAll+0x134>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055e4:	4b10      	ldr	r3, [pc, #64]	; (8005628 <xTaskResumeAll+0x130>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d009      	beq.n	8005600 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055ec:	2301      	movs	r3, #1
 80055ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055f0:	4b0f      	ldr	r3, [pc, #60]	; (8005630 <xTaskResumeAll+0x138>)
 80055f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005600:	f001 f8e0 	bl	80067c4 <vPortExitCritical>

	return xAlreadyYielded;
 8005604:	68bb      	ldr	r3, [r7, #8]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	20000f6c 	.word	0x20000f6c
 8005614:	20000f44 	.word	0x20000f44
 8005618:	20000f04 	.word	0x20000f04
 800561c:	20000f4c 	.word	0x20000f4c
 8005620:	20000a74 	.word	0x20000a74
 8005624:	20000a70 	.word	0x20000a70
 8005628:	20000f58 	.word	0x20000f58
 800562c:	20000f54 	.word	0x20000f54
 8005630:	e000ed04 	.word	0xe000ed04

08005634 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800563a:	4b05      	ldr	r3, [pc, #20]	; (8005650 <xTaskGetTickCount+0x1c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005640:	687b      	ldr	r3, [r7, #4]
}
 8005642:	4618      	mov	r0, r3
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	20000f48 	.word	0x20000f48

08005654 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800565a:	2300      	movs	r3, #0
 800565c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800565e:	4b4f      	ldr	r3, [pc, #316]	; (800579c <xTaskIncrementTick+0x148>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	f040 808f 	bne.w	8005786 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005668:	4b4d      	ldr	r3, [pc, #308]	; (80057a0 <xTaskIncrementTick+0x14c>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	3301      	adds	r3, #1
 800566e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005670:	4a4b      	ldr	r2, [pc, #300]	; (80057a0 <xTaskIncrementTick+0x14c>)
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d120      	bne.n	80056be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800567c:	4b49      	ldr	r3, [pc, #292]	; (80057a4 <xTaskIncrementTick+0x150>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <xTaskIncrementTick+0x48>
	__asm volatile
 8005686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	603b      	str	r3, [r7, #0]
}
 8005698:	bf00      	nop
 800569a:	e7fe      	b.n	800569a <xTaskIncrementTick+0x46>
 800569c:	4b41      	ldr	r3, [pc, #260]	; (80057a4 <xTaskIncrementTick+0x150>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	4b41      	ldr	r3, [pc, #260]	; (80057a8 <xTaskIncrementTick+0x154>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a3f      	ldr	r2, [pc, #252]	; (80057a4 <xTaskIncrementTick+0x150>)
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	4a3f      	ldr	r2, [pc, #252]	; (80057a8 <xTaskIncrementTick+0x154>)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6013      	str	r3, [r2, #0]
 80056b0:	4b3e      	ldr	r3, [pc, #248]	; (80057ac <xTaskIncrementTick+0x158>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3301      	adds	r3, #1
 80056b6:	4a3d      	ldr	r2, [pc, #244]	; (80057ac <xTaskIncrementTick+0x158>)
 80056b8:	6013      	str	r3, [r2, #0]
 80056ba:	f000 fadb 	bl	8005c74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056be:	4b3c      	ldr	r3, [pc, #240]	; (80057b0 <xTaskIncrementTick+0x15c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d349      	bcc.n	800575c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056c8:	4b36      	ldr	r3, [pc, #216]	; (80057a4 <xTaskIncrementTick+0x150>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d104      	bne.n	80056dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056d2:	4b37      	ldr	r3, [pc, #220]	; (80057b0 <xTaskIncrementTick+0x15c>)
 80056d4:	f04f 32ff 	mov.w	r2, #4294967295
 80056d8:	601a      	str	r2, [r3, #0]
					break;
 80056da:	e03f      	b.n	800575c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056dc:	4b31      	ldr	r3, [pc, #196]	; (80057a4 <xTaskIncrementTick+0x150>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d203      	bcs.n	80056fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80056f4:	4a2e      	ldr	r2, [pc, #184]	; (80057b0 <xTaskIncrementTick+0x15c>)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056fa:	e02f      	b.n	800575c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	3304      	adds	r3, #4
 8005700:	4618      	mov	r0, r3
 8005702:	f7fe ff2f 	bl	8004564 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570a:	2b00      	cmp	r3, #0
 800570c:	d004      	beq.n	8005718 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	3318      	adds	r3, #24
 8005712:	4618      	mov	r0, r3
 8005714:	f7fe ff26 	bl	8004564 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800571c:	4b25      	ldr	r3, [pc, #148]	; (80057b4 <xTaskIncrementTick+0x160>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	429a      	cmp	r2, r3
 8005722:	d903      	bls.n	800572c <xTaskIncrementTick+0xd8>
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	4a22      	ldr	r2, [pc, #136]	; (80057b4 <xTaskIncrementTick+0x160>)
 800572a:	6013      	str	r3, [r2, #0]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005730:	4613      	mov	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4a1f      	ldr	r2, [pc, #124]	; (80057b8 <xTaskIncrementTick+0x164>)
 800573a:	441a      	add	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	3304      	adds	r3, #4
 8005740:	4619      	mov	r1, r3
 8005742:	4610      	mov	r0, r2
 8005744:	f7fe feb1 	bl	80044aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574c:	4b1b      	ldr	r3, [pc, #108]	; (80057bc <xTaskIncrementTick+0x168>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005752:	429a      	cmp	r2, r3
 8005754:	d3b8      	bcc.n	80056c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005756:	2301      	movs	r3, #1
 8005758:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800575a:	e7b5      	b.n	80056c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800575c:	4b17      	ldr	r3, [pc, #92]	; (80057bc <xTaskIncrementTick+0x168>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005762:	4915      	ldr	r1, [pc, #84]	; (80057b8 <xTaskIncrementTick+0x164>)
 8005764:	4613      	mov	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	440b      	add	r3, r1
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d901      	bls.n	8005778 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005774:	2301      	movs	r3, #1
 8005776:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005778:	4b11      	ldr	r3, [pc, #68]	; (80057c0 <xTaskIncrementTick+0x16c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d007      	beq.n	8005790 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005780:	2301      	movs	r3, #1
 8005782:	617b      	str	r3, [r7, #20]
 8005784:	e004      	b.n	8005790 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005786:	4b0f      	ldr	r3, [pc, #60]	; (80057c4 <xTaskIncrementTick+0x170>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3301      	adds	r3, #1
 800578c:	4a0d      	ldr	r2, [pc, #52]	; (80057c4 <xTaskIncrementTick+0x170>)
 800578e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005790:	697b      	ldr	r3, [r7, #20]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3718      	adds	r7, #24
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20000f6c 	.word	0x20000f6c
 80057a0:	20000f48 	.word	0x20000f48
 80057a4:	20000efc 	.word	0x20000efc
 80057a8:	20000f00 	.word	0x20000f00
 80057ac:	20000f5c 	.word	0x20000f5c
 80057b0:	20000f64 	.word	0x20000f64
 80057b4:	20000f4c 	.word	0x20000f4c
 80057b8:	20000a74 	.word	0x20000a74
 80057bc:	20000a70 	.word	0x20000a70
 80057c0:	20000f58 	.word	0x20000f58
 80057c4:	20000f54 	.word	0x20000f54

080057c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057ce:	4b2a      	ldr	r3, [pc, #168]	; (8005878 <vTaskSwitchContext+0xb0>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057d6:	4b29      	ldr	r3, [pc, #164]	; (800587c <vTaskSwitchContext+0xb4>)
 80057d8:	2201      	movs	r2, #1
 80057da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057dc:	e046      	b.n	800586c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80057de:	4b27      	ldr	r3, [pc, #156]	; (800587c <vTaskSwitchContext+0xb4>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057e4:	4b26      	ldr	r3, [pc, #152]	; (8005880 <vTaskSwitchContext+0xb8>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	e010      	b.n	800580e <vTaskSwitchContext+0x46>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10a      	bne.n	8005808 <vTaskSwitchContext+0x40>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	607b      	str	r3, [r7, #4]
}
 8005804:	bf00      	nop
 8005806:	e7fe      	b.n	8005806 <vTaskSwitchContext+0x3e>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	3b01      	subs	r3, #1
 800580c:	60fb      	str	r3, [r7, #12]
 800580e:	491d      	ldr	r1, [pc, #116]	; (8005884 <vTaskSwitchContext+0xbc>)
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	440b      	add	r3, r1
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d0e4      	beq.n	80057ec <vTaskSwitchContext+0x24>
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	4613      	mov	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4a15      	ldr	r2, [pc, #84]	; (8005884 <vTaskSwitchContext+0xbc>)
 800582e:	4413      	add	r3, r2
 8005830:	60bb      	str	r3, [r7, #8]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	605a      	str	r2, [r3, #4]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	3308      	adds	r3, #8
 8005844:	429a      	cmp	r2, r3
 8005846:	d104      	bne.n	8005852 <vTaskSwitchContext+0x8a>
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	605a      	str	r2, [r3, #4]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	4a0b      	ldr	r2, [pc, #44]	; (8005888 <vTaskSwitchContext+0xc0>)
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	4a08      	ldr	r2, [pc, #32]	; (8005880 <vTaskSwitchContext+0xb8>)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005862:	4b09      	ldr	r3, [pc, #36]	; (8005888 <vTaskSwitchContext+0xc0>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3354      	adds	r3, #84	; 0x54
 8005868:	4a08      	ldr	r2, [pc, #32]	; (800588c <vTaskSwitchContext+0xc4>)
 800586a:	6013      	str	r3, [r2, #0]
}
 800586c:	bf00      	nop
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	20000f6c 	.word	0x20000f6c
 800587c:	20000f58 	.word	0x20000f58
 8005880:	20000f4c 	.word	0x20000f4c
 8005884:	20000a74 	.word	0x20000a74
 8005888:	20000a70 	.word	0x20000a70
 800588c:	20000068 	.word	0x20000068

08005890 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10a      	bne.n	80058b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	60fb      	str	r3, [r7, #12]
}
 80058b2:	bf00      	nop
 80058b4:	e7fe      	b.n	80058b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058b6:	4b07      	ldr	r3, [pc, #28]	; (80058d4 <vTaskPlaceOnEventList+0x44>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3318      	adds	r3, #24
 80058bc:	4619      	mov	r1, r3
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7fe fe17 	bl	80044f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058c4:	2101      	movs	r1, #1
 80058c6:	6838      	ldr	r0, [r7, #0]
 80058c8:	f000 fa80 	bl	8005dcc <prvAddCurrentTaskToDelayedList>
}
 80058cc:	bf00      	nop
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	20000a70 	.word	0x20000a70

080058d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10a      	bne.n	8005900 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	617b      	str	r3, [r7, #20]
}
 80058fc:	bf00      	nop
 80058fe:	e7fe      	b.n	80058fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005900:	4b0a      	ldr	r3, [pc, #40]	; (800592c <vTaskPlaceOnEventListRestricted+0x54>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	3318      	adds	r3, #24
 8005906:	4619      	mov	r1, r3
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f7fe fdce 	bl	80044aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005914:	f04f 33ff 	mov.w	r3, #4294967295
 8005918:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800591a:	6879      	ldr	r1, [r7, #4]
 800591c:	68b8      	ldr	r0, [r7, #8]
 800591e:	f000 fa55 	bl	8005dcc <prvAddCurrentTaskToDelayedList>
	}
 8005922:	bf00      	nop
 8005924:	3718      	adds	r7, #24
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	20000a70 	.word	0x20000a70

08005930 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10a      	bne.n	800595c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	60fb      	str	r3, [r7, #12]
}
 8005958:	bf00      	nop
 800595a:	e7fe      	b.n	800595a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	3318      	adds	r3, #24
 8005960:	4618      	mov	r0, r3
 8005962:	f7fe fdff 	bl	8004564 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005966:	4b1e      	ldr	r3, [pc, #120]	; (80059e0 <xTaskRemoveFromEventList+0xb0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d11d      	bne.n	80059aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	3304      	adds	r3, #4
 8005972:	4618      	mov	r0, r3
 8005974:	f7fe fdf6 	bl	8004564 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597c:	4b19      	ldr	r3, [pc, #100]	; (80059e4 <xTaskRemoveFromEventList+0xb4>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	d903      	bls.n	800598c <xTaskRemoveFromEventList+0x5c>
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	4a16      	ldr	r2, [pc, #88]	; (80059e4 <xTaskRemoveFromEventList+0xb4>)
 800598a:	6013      	str	r3, [r2, #0]
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005990:	4613      	mov	r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4a13      	ldr	r2, [pc, #76]	; (80059e8 <xTaskRemoveFromEventList+0xb8>)
 800599a:	441a      	add	r2, r3
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	3304      	adds	r3, #4
 80059a0:	4619      	mov	r1, r3
 80059a2:	4610      	mov	r0, r2
 80059a4:	f7fe fd81 	bl	80044aa <vListInsertEnd>
 80059a8:	e005      	b.n	80059b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	3318      	adds	r3, #24
 80059ae:	4619      	mov	r1, r3
 80059b0:	480e      	ldr	r0, [pc, #56]	; (80059ec <xTaskRemoveFromEventList+0xbc>)
 80059b2:	f7fe fd7a 	bl	80044aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ba:	4b0d      	ldr	r3, [pc, #52]	; (80059f0 <xTaskRemoveFromEventList+0xc0>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d905      	bls.n	80059d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059c4:	2301      	movs	r3, #1
 80059c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059c8:	4b0a      	ldr	r3, [pc, #40]	; (80059f4 <xTaskRemoveFromEventList+0xc4>)
 80059ca:	2201      	movs	r2, #1
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	e001      	b.n	80059d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80059d0:	2300      	movs	r3, #0
 80059d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80059d4:	697b      	ldr	r3, [r7, #20]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	20000f6c 	.word	0x20000f6c
 80059e4:	20000f4c 	.word	0x20000f4c
 80059e8:	20000a74 	.word	0x20000a74
 80059ec:	20000f04 	.word	0x20000f04
 80059f0:	20000a70 	.word	0x20000a70
 80059f4:	20000f58 	.word	0x20000f58

080059f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a00:	4b06      	ldr	r3, [pc, #24]	; (8005a1c <vTaskInternalSetTimeOutState+0x24>)
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a08:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <vTaskInternalSetTimeOutState+0x28>)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	605a      	str	r2, [r3, #4]
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	20000f5c 	.word	0x20000f5c
 8005a20:	20000f48 	.word	0x20000f48

08005a24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b088      	sub	sp, #32
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10a      	bne.n	8005a4a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	613b      	str	r3, [r7, #16]
}
 8005a46:	bf00      	nop
 8005a48:	e7fe      	b.n	8005a48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10a      	bne.n	8005a66 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	60fb      	str	r3, [r7, #12]
}
 8005a62:	bf00      	nop
 8005a64:	e7fe      	b.n	8005a64 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005a66:	f000 fe7d 	bl	8006764 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a6a:	4b1d      	ldr	r3, [pc, #116]	; (8005ae0 <xTaskCheckForTimeOut+0xbc>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a82:	d102      	bne.n	8005a8a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a84:	2300      	movs	r3, #0
 8005a86:	61fb      	str	r3, [r7, #28]
 8005a88:	e023      	b.n	8005ad2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	4b15      	ldr	r3, [pc, #84]	; (8005ae4 <xTaskCheckForTimeOut+0xc0>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d007      	beq.n	8005aa6 <xTaskCheckForTimeOut+0x82>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d302      	bcc.n	8005aa6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	61fb      	str	r3, [r7, #28]
 8005aa4:	e015      	b.n	8005ad2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d20b      	bcs.n	8005ac8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	1ad2      	subs	r2, r2, r3
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7ff ff9b 	bl	80059f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	61fb      	str	r3, [r7, #28]
 8005ac6:	e004      	b.n	8005ad2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2200      	movs	r2, #0
 8005acc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ad2:	f000 fe77 	bl	80067c4 <vPortExitCritical>

	return xReturn;
 8005ad6:	69fb      	ldr	r3, [r7, #28]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3720      	adds	r7, #32
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	20000f48 	.word	0x20000f48
 8005ae4:	20000f5c 	.word	0x20000f5c

08005ae8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ae8:	b480      	push	{r7}
 8005aea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005aec:	4b03      	ldr	r3, [pc, #12]	; (8005afc <vTaskMissedYield+0x14>)
 8005aee:	2201      	movs	r2, #1
 8005af0:	601a      	str	r2, [r3, #0]
}
 8005af2:	bf00      	nop
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	20000f58 	.word	0x20000f58

08005b00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b08:	f000 f852 	bl	8005bb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b0c:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <prvIdleTask+0x28>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d9f9      	bls.n	8005b08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b14:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <prvIdleTask+0x2c>)
 8005b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b24:	e7f0      	b.n	8005b08 <prvIdleTask+0x8>
 8005b26:	bf00      	nop
 8005b28:	20000a74 	.word	0x20000a74
 8005b2c:	e000ed04 	.word	0xe000ed04

08005b30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b36:	2300      	movs	r3, #0
 8005b38:	607b      	str	r3, [r7, #4]
 8005b3a:	e00c      	b.n	8005b56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4a12      	ldr	r2, [pc, #72]	; (8005b90 <prvInitialiseTaskLists+0x60>)
 8005b48:	4413      	add	r3, r2
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fe fc80 	bl	8004450 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3301      	adds	r3, #1
 8005b54:	607b      	str	r3, [r7, #4]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b37      	cmp	r3, #55	; 0x37
 8005b5a:	d9ef      	bls.n	8005b3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b5c:	480d      	ldr	r0, [pc, #52]	; (8005b94 <prvInitialiseTaskLists+0x64>)
 8005b5e:	f7fe fc77 	bl	8004450 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b62:	480d      	ldr	r0, [pc, #52]	; (8005b98 <prvInitialiseTaskLists+0x68>)
 8005b64:	f7fe fc74 	bl	8004450 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b68:	480c      	ldr	r0, [pc, #48]	; (8005b9c <prvInitialiseTaskLists+0x6c>)
 8005b6a:	f7fe fc71 	bl	8004450 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b6e:	480c      	ldr	r0, [pc, #48]	; (8005ba0 <prvInitialiseTaskLists+0x70>)
 8005b70:	f7fe fc6e 	bl	8004450 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b74:	480b      	ldr	r0, [pc, #44]	; (8005ba4 <prvInitialiseTaskLists+0x74>)
 8005b76:	f7fe fc6b 	bl	8004450 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ba8 <prvInitialiseTaskLists+0x78>)
 8005b7c:	4a05      	ldr	r2, [pc, #20]	; (8005b94 <prvInitialiseTaskLists+0x64>)
 8005b7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b80:	4b0a      	ldr	r3, [pc, #40]	; (8005bac <prvInitialiseTaskLists+0x7c>)
 8005b82:	4a05      	ldr	r2, [pc, #20]	; (8005b98 <prvInitialiseTaskLists+0x68>)
 8005b84:	601a      	str	r2, [r3, #0]
}
 8005b86:	bf00      	nop
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	20000a74 	.word	0x20000a74
 8005b94:	20000ed4 	.word	0x20000ed4
 8005b98:	20000ee8 	.word	0x20000ee8
 8005b9c:	20000f04 	.word	0x20000f04
 8005ba0:	20000f18 	.word	0x20000f18
 8005ba4:	20000f30 	.word	0x20000f30
 8005ba8:	20000efc 	.word	0x20000efc
 8005bac:	20000f00 	.word	0x20000f00

08005bb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bb6:	e019      	b.n	8005bec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005bb8:	f000 fdd4 	bl	8006764 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bbc:	4b10      	ldr	r3, [pc, #64]	; (8005c00 <prvCheckTasksWaitingTermination+0x50>)
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	3304      	adds	r3, #4
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7fe fccb 	bl	8004564 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bce:	4b0d      	ldr	r3, [pc, #52]	; (8005c04 <prvCheckTasksWaitingTermination+0x54>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	4a0b      	ldr	r2, [pc, #44]	; (8005c04 <prvCheckTasksWaitingTermination+0x54>)
 8005bd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bd8:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <prvCheckTasksWaitingTermination+0x58>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	4a0a      	ldr	r2, [pc, #40]	; (8005c08 <prvCheckTasksWaitingTermination+0x58>)
 8005be0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005be2:	f000 fdef 	bl	80067c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f810 	bl	8005c0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bec:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <prvCheckTasksWaitingTermination+0x58>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1e1      	bne.n	8005bb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005bf4:	bf00      	nop
 8005bf6:	bf00      	nop
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	20000f18 	.word	0x20000f18
 8005c04:	20000f44 	.word	0x20000f44
 8005c08:	20000f2c 	.word	0x20000f2c

08005c0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	3354      	adds	r3, #84	; 0x54
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f001 fe49 	bl	80078b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d108      	bne.n	8005c3a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 ff87 	bl	8006b40 <vPortFree>
				vPortFree( pxTCB );
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 ff84 	bl	8006b40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c38:	e018      	b.n	8005c6c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d103      	bne.n	8005c4c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 ff7b 	bl	8006b40 <vPortFree>
	}
 8005c4a:	e00f      	b.n	8005c6c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d00a      	beq.n	8005c6c <prvDeleteTCB+0x60>
	__asm volatile
 8005c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	60fb      	str	r3, [r7, #12]
}
 8005c68:	bf00      	nop
 8005c6a:	e7fe      	b.n	8005c6a <prvDeleteTCB+0x5e>
	}
 8005c6c:	bf00      	nop
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c7a:	4b0c      	ldr	r3, [pc, #48]	; (8005cac <prvResetNextTaskUnblockTime+0x38>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d104      	bne.n	8005c8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c84:	4b0a      	ldr	r3, [pc, #40]	; (8005cb0 <prvResetNextTaskUnblockTime+0x3c>)
 8005c86:	f04f 32ff 	mov.w	r2, #4294967295
 8005c8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c8c:	e008      	b.n	8005ca0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c8e:	4b07      	ldr	r3, [pc, #28]	; (8005cac <prvResetNextTaskUnblockTime+0x38>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	4a04      	ldr	r2, [pc, #16]	; (8005cb0 <prvResetNextTaskUnblockTime+0x3c>)
 8005c9e:	6013      	str	r3, [r2, #0]
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	20000efc 	.word	0x20000efc
 8005cb0:	20000f64 	.word	0x20000f64

08005cb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005cba:	4b0b      	ldr	r3, [pc, #44]	; (8005ce8 <xTaskGetSchedulerState+0x34>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d102      	bne.n	8005cc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	607b      	str	r3, [r7, #4]
 8005cc6:	e008      	b.n	8005cda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cc8:	4b08      	ldr	r3, [pc, #32]	; (8005cec <xTaskGetSchedulerState+0x38>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d102      	bne.n	8005cd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	607b      	str	r3, [r7, #4]
 8005cd4:	e001      	b.n	8005cda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005cda:	687b      	ldr	r3, [r7, #4]
	}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	20000f50 	.word	0x20000f50
 8005cec:	20000f6c 	.word	0x20000f6c

08005cf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d056      	beq.n	8005db4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d06:	4b2e      	ldr	r3, [pc, #184]	; (8005dc0 <xTaskPriorityDisinherit+0xd0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d00a      	beq.n	8005d26 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	60fb      	str	r3, [r7, #12]
}
 8005d22:	bf00      	nop
 8005d24:	e7fe      	b.n	8005d24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10a      	bne.n	8005d44 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	60bb      	str	r3, [r7, #8]
}
 8005d40:	bf00      	nop
 8005d42:	e7fe      	b.n	8005d42 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d48:	1e5a      	subs	r2, r3, #1
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d02c      	beq.n	8005db4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d128      	bne.n	8005db4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	3304      	adds	r3, #4
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fe fbfc 	bl	8004564 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d78:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d84:	4b0f      	ldr	r3, [pc, #60]	; (8005dc4 <xTaskPriorityDisinherit+0xd4>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d903      	bls.n	8005d94 <xTaskPriorityDisinherit+0xa4>
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d90:	4a0c      	ldr	r2, [pc, #48]	; (8005dc4 <xTaskPriorityDisinherit+0xd4>)
 8005d92:	6013      	str	r3, [r2, #0]
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d98:	4613      	mov	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4a09      	ldr	r2, [pc, #36]	; (8005dc8 <xTaskPriorityDisinherit+0xd8>)
 8005da2:	441a      	add	r2, r3
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	3304      	adds	r3, #4
 8005da8:	4619      	mov	r1, r3
 8005daa:	4610      	mov	r0, r2
 8005dac:	f7fe fb7d 	bl	80044aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005db0:	2301      	movs	r3, #1
 8005db2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005db4:	697b      	ldr	r3, [r7, #20]
	}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3718      	adds	r7, #24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20000a70 	.word	0x20000a70
 8005dc4:	20000f4c 	.word	0x20000f4c
 8005dc8:	20000a74 	.word	0x20000a74

08005dcc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005dd6:	4b21      	ldr	r3, [pc, #132]	; (8005e5c <prvAddCurrentTaskToDelayedList+0x90>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ddc:	4b20      	ldr	r3, [pc, #128]	; (8005e60 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3304      	adds	r3, #4
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7fe fbbe 	bl	8004564 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dee:	d10a      	bne.n	8005e06 <prvAddCurrentTaskToDelayedList+0x3a>
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d007      	beq.n	8005e06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005df6:	4b1a      	ldr	r3, [pc, #104]	; (8005e60 <prvAddCurrentTaskToDelayedList+0x94>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4819      	ldr	r0, [pc, #100]	; (8005e64 <prvAddCurrentTaskToDelayedList+0x98>)
 8005e00:	f7fe fb53 	bl	80044aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e04:	e026      	b.n	8005e54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e0e:	4b14      	ldr	r3, [pc, #80]	; (8005e60 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d209      	bcs.n	8005e32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e1e:	4b12      	ldr	r3, [pc, #72]	; (8005e68 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	4b0f      	ldr	r3, [pc, #60]	; (8005e60 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	3304      	adds	r3, #4
 8005e28:	4619      	mov	r1, r3
 8005e2a:	4610      	mov	r0, r2
 8005e2c:	f7fe fb61 	bl	80044f2 <vListInsert>
}
 8005e30:	e010      	b.n	8005e54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e32:	4b0e      	ldr	r3, [pc, #56]	; (8005e6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	4b0a      	ldr	r3, [pc, #40]	; (8005e60 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4610      	mov	r0, r2
 8005e40:	f7fe fb57 	bl	80044f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e44:	4b0a      	ldr	r3, [pc, #40]	; (8005e70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d202      	bcs.n	8005e54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e4e:	4a08      	ldr	r2, [pc, #32]	; (8005e70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	6013      	str	r3, [r2, #0]
}
 8005e54:	bf00      	nop
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	20000f48 	.word	0x20000f48
 8005e60:	20000a70 	.word	0x20000a70
 8005e64:	20000f30 	.word	0x20000f30
 8005e68:	20000f00 	.word	0x20000f00
 8005e6c:	20000efc 	.word	0x20000efc
 8005e70:	20000f64 	.word	0x20000f64

08005e74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b08a      	sub	sp, #40	; 0x28
 8005e78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e7e:	f000 fb07 	bl	8006490 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e82:	4b1c      	ldr	r3, [pc, #112]	; (8005ef4 <xTimerCreateTimerTask+0x80>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d021      	beq.n	8005ece <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e92:	1d3a      	adds	r2, r7, #4
 8005e94:	f107 0108 	add.w	r1, r7, #8
 8005e98:	f107 030c 	add.w	r3, r7, #12
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fe fabd 	bl	800441c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005ea2:	6879      	ldr	r1, [r7, #4]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	9202      	str	r2, [sp, #8]
 8005eaa:	9301      	str	r3, [sp, #4]
 8005eac:	2302      	movs	r3, #2
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	460a      	mov	r2, r1
 8005eb4:	4910      	ldr	r1, [pc, #64]	; (8005ef8 <xTimerCreateTimerTask+0x84>)
 8005eb6:	4811      	ldr	r0, [pc, #68]	; (8005efc <xTimerCreateTimerTask+0x88>)
 8005eb8:	f7ff f86a 	bl	8004f90 <xTaskCreateStatic>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	4a10      	ldr	r2, [pc, #64]	; (8005f00 <xTimerCreateTimerTask+0x8c>)
 8005ec0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005ec2:	4b0f      	ldr	r3, [pc, #60]	; (8005f00 <xTimerCreateTimerTask+0x8c>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10a      	bne.n	8005eea <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	613b      	str	r3, [r7, #16]
}
 8005ee6:	bf00      	nop
 8005ee8:	e7fe      	b.n	8005ee8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005eea:	697b      	ldr	r3, [r7, #20]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	20000fa0 	.word	0x20000fa0
 8005ef8:	08009818 	.word	0x08009818
 8005efc:	08006039 	.word	0x08006039
 8005f00:	20000fa4 	.word	0x20000fa4

08005f04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08a      	sub	sp, #40	; 0x28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005f12:	2300      	movs	r3, #0
 8005f14:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10a      	bne.n	8005f32 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	623b      	str	r3, [r7, #32]
}
 8005f2e:	bf00      	nop
 8005f30:	e7fe      	b.n	8005f30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005f32:	4b1a      	ldr	r3, [pc, #104]	; (8005f9c <xTimerGenericCommand+0x98>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d02a      	beq.n	8005f90 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2b05      	cmp	r3, #5
 8005f4a:	dc18      	bgt.n	8005f7e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f4c:	f7ff feb2 	bl	8005cb4 <xTaskGetSchedulerState>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d109      	bne.n	8005f6a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f56:	4b11      	ldr	r3, [pc, #68]	; (8005f9c <xTimerGenericCommand+0x98>)
 8005f58:	6818      	ldr	r0, [r3, #0]
 8005f5a:	f107 0110 	add.w	r1, r7, #16
 8005f5e:	2300      	movs	r3, #0
 8005f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f62:	f7fe fc2d 	bl	80047c0 <xQueueGenericSend>
 8005f66:	6278      	str	r0, [r7, #36]	; 0x24
 8005f68:	e012      	b.n	8005f90 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f6a:	4b0c      	ldr	r3, [pc, #48]	; (8005f9c <xTimerGenericCommand+0x98>)
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	f107 0110 	add.w	r1, r7, #16
 8005f72:	2300      	movs	r3, #0
 8005f74:	2200      	movs	r2, #0
 8005f76:	f7fe fc23 	bl	80047c0 <xQueueGenericSend>
 8005f7a:	6278      	str	r0, [r7, #36]	; 0x24
 8005f7c:	e008      	b.n	8005f90 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f7e:	4b07      	ldr	r3, [pc, #28]	; (8005f9c <xTimerGenericCommand+0x98>)
 8005f80:	6818      	ldr	r0, [r3, #0]
 8005f82:	f107 0110 	add.w	r1, r7, #16
 8005f86:	2300      	movs	r3, #0
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	f7fe fd17 	bl	80049bc <xQueueGenericSendFromISR>
 8005f8e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3728      	adds	r7, #40	; 0x28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000fa0 	.word	0x20000fa0

08005fa0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af02      	add	r7, sp, #8
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005faa:	4b22      	ldr	r3, [pc, #136]	; (8006034 <prvProcessExpiredTimer+0x94>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7fe fad3 	bl	8004564 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fc4:	f003 0304 	and.w	r3, r3, #4
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d022      	beq.n	8006012 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	699a      	ldr	r2, [r3, #24]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	18d1      	adds	r1, r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	6978      	ldr	r0, [r7, #20]
 8005fda:	f000 f8d1 	bl	8006180 <prvInsertTimerInActiveList>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d01f      	beq.n	8006024 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	2300      	movs	r3, #0
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	2100      	movs	r1, #0
 8005fee:	6978      	ldr	r0, [r7, #20]
 8005ff0:	f7ff ff88 	bl	8005f04 <xTimerGenericCommand>
 8005ff4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d113      	bne.n	8006024 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	60fb      	str	r3, [r7, #12]
}
 800600e:	bf00      	nop
 8006010:	e7fe      	b.n	8006010 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006018:	f023 0301 	bic.w	r3, r3, #1
 800601c:	b2da      	uxtb	r2, r3
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	6978      	ldr	r0, [r7, #20]
 800602a:	4798      	blx	r3
}
 800602c:	bf00      	nop
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	20000f98 	.word	0x20000f98

08006038 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006040:	f107 0308 	add.w	r3, r7, #8
 8006044:	4618      	mov	r0, r3
 8006046:	f000 f857 	bl	80060f8 <prvGetNextExpireTime>
 800604a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	4619      	mov	r1, r3
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 f803 	bl	800605c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006056:	f000 f8d5 	bl	8006204 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800605a:	e7f1      	b.n	8006040 <prvTimerTask+0x8>

0800605c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006066:	f7ff fa39 	bl	80054dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800606a:	f107 0308 	add.w	r3, r7, #8
 800606e:	4618      	mov	r0, r3
 8006070:	f000 f866 	bl	8006140 <prvSampleTimeNow>
 8006074:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d130      	bne.n	80060de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10a      	bne.n	8006098 <prvProcessTimerOrBlockTask+0x3c>
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	429a      	cmp	r2, r3
 8006088:	d806      	bhi.n	8006098 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800608a:	f7ff fa35 	bl	80054f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800608e:	68f9      	ldr	r1, [r7, #12]
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7ff ff85 	bl	8005fa0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006096:	e024      	b.n	80060e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d008      	beq.n	80060b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800609e:	4b13      	ldr	r3, [pc, #76]	; (80060ec <prvProcessTimerOrBlockTask+0x90>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <prvProcessTimerOrBlockTask+0x50>
 80060a8:	2301      	movs	r3, #1
 80060aa:	e000      	b.n	80060ae <prvProcessTimerOrBlockTask+0x52>
 80060ac:	2300      	movs	r3, #0
 80060ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80060b0:	4b0f      	ldr	r3, [pc, #60]	; (80060f0 <prvProcessTimerOrBlockTask+0x94>)
 80060b2:	6818      	ldr	r0, [r3, #0]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	4619      	mov	r1, r3
 80060be:	f7fe ff33 	bl	8004f28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80060c2:	f7ff fa19 	bl	80054f8 <xTaskResumeAll>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10a      	bne.n	80060e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80060cc:	4b09      	ldr	r3, [pc, #36]	; (80060f4 <prvProcessTimerOrBlockTask+0x98>)
 80060ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	f3bf 8f6f 	isb	sy
}
 80060dc:	e001      	b.n	80060e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80060de:	f7ff fa0b 	bl	80054f8 <xTaskResumeAll>
}
 80060e2:	bf00      	nop
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000f9c 	.word	0x20000f9c
 80060f0:	20000fa0 	.word	0x20000fa0
 80060f4:	e000ed04 	.word	0xe000ed04

080060f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006100:	4b0e      	ldr	r3, [pc, #56]	; (800613c <prvGetNextExpireTime+0x44>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <prvGetNextExpireTime+0x16>
 800610a:	2201      	movs	r2, #1
 800610c:	e000      	b.n	8006110 <prvGetNextExpireTime+0x18>
 800610e:	2200      	movs	r2, #0
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d105      	bne.n	8006128 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800611c:	4b07      	ldr	r3, [pc, #28]	; (800613c <prvGetNextExpireTime+0x44>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	60fb      	str	r3, [r7, #12]
 8006126:	e001      	b.n	800612c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006128:	2300      	movs	r3, #0
 800612a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800612c:	68fb      	ldr	r3, [r7, #12]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3714      	adds	r7, #20
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	20000f98 	.word	0x20000f98

08006140 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006148:	f7ff fa74 	bl	8005634 <xTaskGetTickCount>
 800614c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800614e:	4b0b      	ldr	r3, [pc, #44]	; (800617c <prvSampleTimeNow+0x3c>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	429a      	cmp	r2, r3
 8006156:	d205      	bcs.n	8006164 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006158:	f000 f936 	bl	80063c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	e002      	b.n	800616a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800616a:	4a04      	ldr	r2, [pc, #16]	; (800617c <prvSampleTimeNow+0x3c>)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006170:	68fb      	ldr	r3, [r7, #12]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	20000fa8 	.word	0x20000fa8

08006180 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
 800618c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800618e:	2300      	movs	r3, #0
 8006190:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d812      	bhi.n	80061cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	1ad2      	subs	r2, r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d302      	bcc.n	80061ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80061b4:	2301      	movs	r3, #1
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	e01b      	b.n	80061f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80061ba:	4b10      	ldr	r3, [pc, #64]	; (80061fc <prvInsertTimerInActiveList+0x7c>)
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3304      	adds	r3, #4
 80061c2:	4619      	mov	r1, r3
 80061c4:	4610      	mov	r0, r2
 80061c6:	f7fe f994 	bl	80044f2 <vListInsert>
 80061ca:	e012      	b.n	80061f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d206      	bcs.n	80061e2 <prvInsertTimerInActiveList+0x62>
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d302      	bcc.n	80061e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80061dc:	2301      	movs	r3, #1
 80061de:	617b      	str	r3, [r7, #20]
 80061e0:	e007      	b.n	80061f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061e2:	4b07      	ldr	r3, [pc, #28]	; (8006200 <prvInsertTimerInActiveList+0x80>)
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3304      	adds	r3, #4
 80061ea:	4619      	mov	r1, r3
 80061ec:	4610      	mov	r0, r2
 80061ee:	f7fe f980 	bl	80044f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80061f2:	697b      	ldr	r3, [r7, #20]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3718      	adds	r7, #24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	20000f9c 	.word	0x20000f9c
 8006200:	20000f98 	.word	0x20000f98

08006204 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08e      	sub	sp, #56	; 0x38
 8006208:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800620a:	e0ca      	b.n	80063a2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	da18      	bge.n	8006244 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006212:	1d3b      	adds	r3, r7, #4
 8006214:	3304      	adds	r3, #4
 8006216:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10a      	bne.n	8006234 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	61fb      	str	r3, [r7, #28]
}
 8006230:	bf00      	nop
 8006232:	e7fe      	b.n	8006232 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800623a:	6850      	ldr	r0, [r2, #4]
 800623c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800623e:	6892      	ldr	r2, [r2, #8]
 8006240:	4611      	mov	r1, r2
 8006242:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	f2c0 80ab 	blt.w	80063a2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d004      	beq.n	8006262 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625a:	3304      	adds	r3, #4
 800625c:	4618      	mov	r0, r3
 800625e:	f7fe f981 	bl	8004564 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006262:	463b      	mov	r3, r7
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff ff6b 	bl	8006140 <prvSampleTimeNow>
 800626a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b09      	cmp	r3, #9
 8006270:	f200 8096 	bhi.w	80063a0 <prvProcessReceivedCommands+0x19c>
 8006274:	a201      	add	r2, pc, #4	; (adr r2, 800627c <prvProcessReceivedCommands+0x78>)
 8006276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627a:	bf00      	nop
 800627c:	080062a5 	.word	0x080062a5
 8006280:	080062a5 	.word	0x080062a5
 8006284:	080062a5 	.word	0x080062a5
 8006288:	08006319 	.word	0x08006319
 800628c:	0800632d 	.word	0x0800632d
 8006290:	08006377 	.word	0x08006377
 8006294:	080062a5 	.word	0x080062a5
 8006298:	080062a5 	.word	0x080062a5
 800629c:	08006319 	.word	0x08006319
 80062a0:	0800632d 	.word	0x0800632d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062aa:	f043 0301 	orr.w	r3, r3, #1
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	18d1      	adds	r1, r2, r3
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062c4:	f7ff ff5c 	bl	8006180 <prvInsertTimerInActiveList>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d069      	beq.n	80063a2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d05e      	beq.n	80063a2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	441a      	add	r2, r3
 80062ec:	2300      	movs	r3, #0
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	2300      	movs	r3, #0
 80062f2:	2100      	movs	r1, #0
 80062f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062f6:	f7ff fe05 	bl	8005f04 <xTimerGenericCommand>
 80062fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d14f      	bne.n	80063a2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	61bb      	str	r3, [r7, #24]
}
 8006314:	bf00      	nop
 8006316:	e7fe      	b.n	8006316 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800631e:	f023 0301 	bic.w	r3, r3, #1
 8006322:	b2da      	uxtb	r2, r3
 8006324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800632a:	e03a      	b.n	80063a2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800632c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006332:	f043 0301 	orr.w	r3, r3, #1
 8006336:	b2da      	uxtb	r2, r3
 8006338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006342:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10a      	bne.n	8006362 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	617b      	str	r3, [r7, #20]
}
 800635e:	bf00      	nop
 8006360:	e7fe      	b.n	8006360 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006364:	699a      	ldr	r2, [r3, #24]
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	18d1      	adds	r1, r2, r3
 800636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800636e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006370:	f7ff ff06 	bl	8006180 <prvInsertTimerInActiveList>
					break;
 8006374:	e015      	b.n	80063a2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006378:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d103      	bne.n	800638c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006386:	f000 fbdb 	bl	8006b40 <vPortFree>
 800638a:	e00a      	b.n	80063a2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006392:	f023 0301 	bic.w	r3, r3, #1
 8006396:	b2da      	uxtb	r2, r3
 8006398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800639e:	e000      	b.n	80063a2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80063a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063a2:	4b08      	ldr	r3, [pc, #32]	; (80063c4 <prvProcessReceivedCommands+0x1c0>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	1d39      	adds	r1, r7, #4
 80063a8:	2200      	movs	r2, #0
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fe fba2 	bl	8004af4 <xQueueReceive>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f47f af2a 	bne.w	800620c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80063b8:	bf00      	nop
 80063ba:	bf00      	nop
 80063bc:	3730      	adds	r7, #48	; 0x30
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20000fa0 	.word	0x20000fa0

080063c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063ce:	e048      	b.n	8006462 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063d0:	4b2d      	ldr	r3, [pc, #180]	; (8006488 <prvSwitchTimerLists+0xc0>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063da:	4b2b      	ldr	r3, [pc, #172]	; (8006488 <prvSwitchTimerLists+0xc0>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	3304      	adds	r3, #4
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7fe f8bb 	bl	8004564 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063fc:	f003 0304 	and.w	r3, r3, #4
 8006400:	2b00      	cmp	r3, #0
 8006402:	d02e      	beq.n	8006462 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	4413      	add	r3, r2
 800640c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	429a      	cmp	r2, r3
 8006414:	d90e      	bls.n	8006434 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006422:	4b19      	ldr	r3, [pc, #100]	; (8006488 <prvSwitchTimerLists+0xc0>)
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	3304      	adds	r3, #4
 800642a:	4619      	mov	r1, r3
 800642c:	4610      	mov	r0, r2
 800642e:	f7fe f860 	bl	80044f2 <vListInsert>
 8006432:	e016      	b.n	8006462 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006434:	2300      	movs	r3, #0
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	2300      	movs	r3, #0
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	2100      	movs	r1, #0
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f7ff fd60 	bl	8005f04 <xTimerGenericCommand>
 8006444:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10a      	bne.n	8006462 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800644c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006450:	f383 8811 	msr	BASEPRI, r3
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	603b      	str	r3, [r7, #0]
}
 800645e:	bf00      	nop
 8006460:	e7fe      	b.n	8006460 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006462:	4b09      	ldr	r3, [pc, #36]	; (8006488 <prvSwitchTimerLists+0xc0>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1b1      	bne.n	80063d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800646c:	4b06      	ldr	r3, [pc, #24]	; (8006488 <prvSwitchTimerLists+0xc0>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006472:	4b06      	ldr	r3, [pc, #24]	; (800648c <prvSwitchTimerLists+0xc4>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a04      	ldr	r2, [pc, #16]	; (8006488 <prvSwitchTimerLists+0xc0>)
 8006478:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800647a:	4a04      	ldr	r2, [pc, #16]	; (800648c <prvSwitchTimerLists+0xc4>)
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	6013      	str	r3, [r2, #0]
}
 8006480:	bf00      	nop
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	20000f98 	.word	0x20000f98
 800648c:	20000f9c 	.word	0x20000f9c

08006490 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006496:	f000 f965 	bl	8006764 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800649a:	4b15      	ldr	r3, [pc, #84]	; (80064f0 <prvCheckForValidListAndQueue+0x60>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d120      	bne.n	80064e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80064a2:	4814      	ldr	r0, [pc, #80]	; (80064f4 <prvCheckForValidListAndQueue+0x64>)
 80064a4:	f7fd ffd4 	bl	8004450 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80064a8:	4813      	ldr	r0, [pc, #76]	; (80064f8 <prvCheckForValidListAndQueue+0x68>)
 80064aa:	f7fd ffd1 	bl	8004450 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80064ae:	4b13      	ldr	r3, [pc, #76]	; (80064fc <prvCheckForValidListAndQueue+0x6c>)
 80064b0:	4a10      	ldr	r2, [pc, #64]	; (80064f4 <prvCheckForValidListAndQueue+0x64>)
 80064b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80064b4:	4b12      	ldr	r3, [pc, #72]	; (8006500 <prvCheckForValidListAndQueue+0x70>)
 80064b6:	4a10      	ldr	r2, [pc, #64]	; (80064f8 <prvCheckForValidListAndQueue+0x68>)
 80064b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80064ba:	2300      	movs	r3, #0
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	4b11      	ldr	r3, [pc, #68]	; (8006504 <prvCheckForValidListAndQueue+0x74>)
 80064c0:	4a11      	ldr	r2, [pc, #68]	; (8006508 <prvCheckForValidListAndQueue+0x78>)
 80064c2:	2110      	movs	r1, #16
 80064c4:	200a      	movs	r0, #10
 80064c6:	f7fe f8df 	bl	8004688 <xQueueGenericCreateStatic>
 80064ca:	4603      	mov	r3, r0
 80064cc:	4a08      	ldr	r2, [pc, #32]	; (80064f0 <prvCheckForValidListAndQueue+0x60>)
 80064ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80064d0:	4b07      	ldr	r3, [pc, #28]	; (80064f0 <prvCheckForValidListAndQueue+0x60>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d005      	beq.n	80064e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80064d8:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <prvCheckForValidListAndQueue+0x60>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	490b      	ldr	r1, [pc, #44]	; (800650c <prvCheckForValidListAndQueue+0x7c>)
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe fcf8 	bl	8004ed4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064e4:	f000 f96e 	bl	80067c4 <vPortExitCritical>
}
 80064e8:	bf00      	nop
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	20000fa0 	.word	0x20000fa0
 80064f4:	20000f70 	.word	0x20000f70
 80064f8:	20000f84 	.word	0x20000f84
 80064fc:	20000f98 	.word	0x20000f98
 8006500:	20000f9c 	.word	0x20000f9c
 8006504:	2000104c 	.word	0x2000104c
 8006508:	20000fac 	.word	0x20000fac
 800650c:	08009820 	.word	0x08009820

08006510 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	3b04      	subs	r3, #4
 8006520:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006528:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3b04      	subs	r3, #4
 800652e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	f023 0201 	bic.w	r2, r3, #1
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	3b04      	subs	r3, #4
 800653e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006540:	4a0c      	ldr	r2, [pc, #48]	; (8006574 <pxPortInitialiseStack+0x64>)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	3b14      	subs	r3, #20
 800654a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3b04      	subs	r3, #4
 8006556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f06f 0202 	mvn.w	r2, #2
 800655e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	3b20      	subs	r3, #32
 8006564:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006566:	68fb      	ldr	r3, [r7, #12]
}
 8006568:	4618      	mov	r0, r3
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	08006579 	.word	0x08006579

08006578 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800657e:	2300      	movs	r3, #0
 8006580:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006582:	4b12      	ldr	r3, [pc, #72]	; (80065cc <prvTaskExitError+0x54>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658a:	d00a      	beq.n	80065a2 <prvTaskExitError+0x2a>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	60fb      	str	r3, [r7, #12]
}
 800659e:	bf00      	nop
 80065a0:	e7fe      	b.n	80065a0 <prvTaskExitError+0x28>
	__asm volatile
 80065a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	60bb      	str	r3, [r7, #8]
}
 80065b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80065b6:	bf00      	nop
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0fc      	beq.n	80065b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80065be:	bf00      	nop
 80065c0:	bf00      	nop
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	2000000c 	.word	0x2000000c

080065d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80065d0:	4b07      	ldr	r3, [pc, #28]	; (80065f0 <pxCurrentTCBConst2>)
 80065d2:	6819      	ldr	r1, [r3, #0]
 80065d4:	6808      	ldr	r0, [r1, #0]
 80065d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065da:	f380 8809 	msr	PSP, r0
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f04f 0000 	mov.w	r0, #0
 80065e6:	f380 8811 	msr	BASEPRI, r0
 80065ea:	4770      	bx	lr
 80065ec:	f3af 8000 	nop.w

080065f0 <pxCurrentTCBConst2>:
 80065f0:	20000a70 	.word	0x20000a70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80065f4:	bf00      	nop
 80065f6:	bf00      	nop

080065f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80065f8:	4808      	ldr	r0, [pc, #32]	; (800661c <prvPortStartFirstTask+0x24>)
 80065fa:	6800      	ldr	r0, [r0, #0]
 80065fc:	6800      	ldr	r0, [r0, #0]
 80065fe:	f380 8808 	msr	MSP, r0
 8006602:	f04f 0000 	mov.w	r0, #0
 8006606:	f380 8814 	msr	CONTROL, r0
 800660a:	b662      	cpsie	i
 800660c:	b661      	cpsie	f
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	df00      	svc	0
 8006618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800661a:	bf00      	nop
 800661c:	e000ed08 	.word	0xe000ed08

08006620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006626:	4b46      	ldr	r3, [pc, #280]	; (8006740 <xPortStartScheduler+0x120>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a46      	ldr	r2, [pc, #280]	; (8006744 <xPortStartScheduler+0x124>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d10a      	bne.n	8006646 <xPortStartScheduler+0x26>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	613b      	str	r3, [r7, #16]
}
 8006642:	bf00      	nop
 8006644:	e7fe      	b.n	8006644 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006646:	4b3e      	ldr	r3, [pc, #248]	; (8006740 <xPortStartScheduler+0x120>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a3f      	ldr	r2, [pc, #252]	; (8006748 <xPortStartScheduler+0x128>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d10a      	bne.n	8006666 <xPortStartScheduler+0x46>
	__asm volatile
 8006650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	60fb      	str	r3, [r7, #12]
}
 8006662:	bf00      	nop
 8006664:	e7fe      	b.n	8006664 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006666:	4b39      	ldr	r3, [pc, #228]	; (800674c <xPortStartScheduler+0x12c>)
 8006668:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	b2db      	uxtb	r3, r3
 8006670:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	22ff      	movs	r2, #255	; 0xff
 8006676:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	b2db      	uxtb	r3, r3
 800667e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006680:	78fb      	ldrb	r3, [r7, #3]
 8006682:	b2db      	uxtb	r3, r3
 8006684:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006688:	b2da      	uxtb	r2, r3
 800668a:	4b31      	ldr	r3, [pc, #196]	; (8006750 <xPortStartScheduler+0x130>)
 800668c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800668e:	4b31      	ldr	r3, [pc, #196]	; (8006754 <xPortStartScheduler+0x134>)
 8006690:	2207      	movs	r2, #7
 8006692:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006694:	e009      	b.n	80066aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006696:	4b2f      	ldr	r3, [pc, #188]	; (8006754 <xPortStartScheduler+0x134>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3b01      	subs	r3, #1
 800669c:	4a2d      	ldr	r2, [pc, #180]	; (8006754 <xPortStartScheduler+0x134>)
 800669e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066a0:	78fb      	ldrb	r3, [r7, #3]
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	005b      	lsls	r3, r3, #1
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066aa:	78fb      	ldrb	r3, [r7, #3]
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b2:	2b80      	cmp	r3, #128	; 0x80
 80066b4:	d0ef      	beq.n	8006696 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066b6:	4b27      	ldr	r3, [pc, #156]	; (8006754 <xPortStartScheduler+0x134>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f1c3 0307 	rsb	r3, r3, #7
 80066be:	2b04      	cmp	r3, #4
 80066c0:	d00a      	beq.n	80066d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80066c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c6:	f383 8811 	msr	BASEPRI, r3
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	60bb      	str	r3, [r7, #8]
}
 80066d4:	bf00      	nop
 80066d6:	e7fe      	b.n	80066d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066d8:	4b1e      	ldr	r3, [pc, #120]	; (8006754 <xPortStartScheduler+0x134>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	021b      	lsls	r3, r3, #8
 80066de:	4a1d      	ldr	r2, [pc, #116]	; (8006754 <xPortStartScheduler+0x134>)
 80066e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066e2:	4b1c      	ldr	r3, [pc, #112]	; (8006754 <xPortStartScheduler+0x134>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066ea:	4a1a      	ldr	r2, [pc, #104]	; (8006754 <xPortStartScheduler+0x134>)
 80066ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80066f6:	4b18      	ldr	r3, [pc, #96]	; (8006758 <xPortStartScheduler+0x138>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a17      	ldr	r2, [pc, #92]	; (8006758 <xPortStartScheduler+0x138>)
 80066fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006700:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006702:	4b15      	ldr	r3, [pc, #84]	; (8006758 <xPortStartScheduler+0x138>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a14      	ldr	r2, [pc, #80]	; (8006758 <xPortStartScheduler+0x138>)
 8006708:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800670c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800670e:	f000 f8dd 	bl	80068cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006712:	4b12      	ldr	r3, [pc, #72]	; (800675c <xPortStartScheduler+0x13c>)
 8006714:	2200      	movs	r2, #0
 8006716:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006718:	f000 f8fc 	bl	8006914 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800671c:	4b10      	ldr	r3, [pc, #64]	; (8006760 <xPortStartScheduler+0x140>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a0f      	ldr	r2, [pc, #60]	; (8006760 <xPortStartScheduler+0x140>)
 8006722:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006726:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006728:	f7ff ff66 	bl	80065f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800672c:	f7ff f84c 	bl	80057c8 <vTaskSwitchContext>
	prvTaskExitError();
 8006730:	f7ff ff22 	bl	8006578 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3718      	adds	r7, #24
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	e000ed00 	.word	0xe000ed00
 8006744:	410fc271 	.word	0x410fc271
 8006748:	410fc270 	.word	0x410fc270
 800674c:	e000e400 	.word	0xe000e400
 8006750:	2000109c 	.word	0x2000109c
 8006754:	200010a0 	.word	0x200010a0
 8006758:	e000ed20 	.word	0xe000ed20
 800675c:	2000000c 	.word	0x2000000c
 8006760:	e000ef34 	.word	0xe000ef34

08006764 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
	__asm volatile
 800676a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	607b      	str	r3, [r7, #4]
}
 800677c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800677e:	4b0f      	ldr	r3, [pc, #60]	; (80067bc <vPortEnterCritical+0x58>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	3301      	adds	r3, #1
 8006784:	4a0d      	ldr	r2, [pc, #52]	; (80067bc <vPortEnterCritical+0x58>)
 8006786:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006788:	4b0c      	ldr	r3, [pc, #48]	; (80067bc <vPortEnterCritical+0x58>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d10f      	bne.n	80067b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006790:	4b0b      	ldr	r3, [pc, #44]	; (80067c0 <vPortEnterCritical+0x5c>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00a      	beq.n	80067b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800679a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	603b      	str	r3, [r7, #0]
}
 80067ac:	bf00      	nop
 80067ae:	e7fe      	b.n	80067ae <vPortEnterCritical+0x4a>
	}
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	2000000c 	.word	0x2000000c
 80067c0:	e000ed04 	.word	0xe000ed04

080067c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067ca:	4b12      	ldr	r3, [pc, #72]	; (8006814 <vPortExitCritical+0x50>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10a      	bne.n	80067e8 <vPortExitCritical+0x24>
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	607b      	str	r3, [r7, #4]
}
 80067e4:	bf00      	nop
 80067e6:	e7fe      	b.n	80067e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80067e8:	4b0a      	ldr	r3, [pc, #40]	; (8006814 <vPortExitCritical+0x50>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3b01      	subs	r3, #1
 80067ee:	4a09      	ldr	r2, [pc, #36]	; (8006814 <vPortExitCritical+0x50>)
 80067f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80067f2:	4b08      	ldr	r3, [pc, #32]	; (8006814 <vPortExitCritical+0x50>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d105      	bne.n	8006806 <vPortExitCritical+0x42>
 80067fa:	2300      	movs	r3, #0
 80067fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	f383 8811 	msr	BASEPRI, r3
}
 8006804:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006806:	bf00      	nop
 8006808:	370c      	adds	r7, #12
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	2000000c 	.word	0x2000000c
	...

08006820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006820:	f3ef 8009 	mrs	r0, PSP
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	4b15      	ldr	r3, [pc, #84]	; (8006880 <pxCurrentTCBConst>)
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	f01e 0f10 	tst.w	lr, #16
 8006830:	bf08      	it	eq
 8006832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800683a:	6010      	str	r0, [r2, #0]
 800683c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006840:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006844:	f380 8811 	msr	BASEPRI, r0
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f7fe ffba 	bl	80057c8 <vTaskSwitchContext>
 8006854:	f04f 0000 	mov.w	r0, #0
 8006858:	f380 8811 	msr	BASEPRI, r0
 800685c:	bc09      	pop	{r0, r3}
 800685e:	6819      	ldr	r1, [r3, #0]
 8006860:	6808      	ldr	r0, [r1, #0]
 8006862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006866:	f01e 0f10 	tst.w	lr, #16
 800686a:	bf08      	it	eq
 800686c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006870:	f380 8809 	msr	PSP, r0
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	f3af 8000 	nop.w

08006880 <pxCurrentTCBConst>:
 8006880:	20000a70 	.word	0x20000a70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006884:	bf00      	nop
 8006886:	bf00      	nop

08006888 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	607b      	str	r3, [r7, #4]
}
 80068a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80068a2:	f7fe fed7 	bl	8005654 <xTaskIncrementTick>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068ac:	4b06      	ldr	r3, [pc, #24]	; (80068c8 <xPortSysTickHandler+0x40>)
 80068ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068b2:	601a      	str	r2, [r3, #0]
 80068b4:	2300      	movs	r3, #0
 80068b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	f383 8811 	msr	BASEPRI, r3
}
 80068be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80068c0:	bf00      	nop
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	e000ed04 	.word	0xe000ed04

080068cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068cc:	b480      	push	{r7}
 80068ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068d0:	4b0b      	ldr	r3, [pc, #44]	; (8006900 <vPortSetupTimerInterrupt+0x34>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068d6:	4b0b      	ldr	r3, [pc, #44]	; (8006904 <vPortSetupTimerInterrupt+0x38>)
 80068d8:	2200      	movs	r2, #0
 80068da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068dc:	4b0a      	ldr	r3, [pc, #40]	; (8006908 <vPortSetupTimerInterrupt+0x3c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a0a      	ldr	r2, [pc, #40]	; (800690c <vPortSetupTimerInterrupt+0x40>)
 80068e2:	fba2 2303 	umull	r2, r3, r2, r3
 80068e6:	099b      	lsrs	r3, r3, #6
 80068e8:	4a09      	ldr	r2, [pc, #36]	; (8006910 <vPortSetupTimerInterrupt+0x44>)
 80068ea:	3b01      	subs	r3, #1
 80068ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068ee:	4b04      	ldr	r3, [pc, #16]	; (8006900 <vPortSetupTimerInterrupt+0x34>)
 80068f0:	2207      	movs	r2, #7
 80068f2:	601a      	str	r2, [r3, #0]
}
 80068f4:	bf00      	nop
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	e000e010 	.word	0xe000e010
 8006904:	e000e018 	.word	0xe000e018
 8006908:	20000000 	.word	0x20000000
 800690c:	10624dd3 	.word	0x10624dd3
 8006910:	e000e014 	.word	0xe000e014

08006914 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006914:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006924 <vPortEnableVFP+0x10>
 8006918:	6801      	ldr	r1, [r0, #0]
 800691a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800691e:	6001      	str	r1, [r0, #0]
 8006920:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006922:	bf00      	nop
 8006924:	e000ed88 	.word	0xe000ed88

08006928 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800692e:	f3ef 8305 	mrs	r3, IPSR
 8006932:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2b0f      	cmp	r3, #15
 8006938:	d914      	bls.n	8006964 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800693a:	4a17      	ldr	r2, [pc, #92]	; (8006998 <vPortValidateInterruptPriority+0x70>)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4413      	add	r3, r2
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006944:	4b15      	ldr	r3, [pc, #84]	; (800699c <vPortValidateInterruptPriority+0x74>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	7afa      	ldrb	r2, [r7, #11]
 800694a:	429a      	cmp	r2, r3
 800694c:	d20a      	bcs.n	8006964 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	607b      	str	r3, [r7, #4]
}
 8006960:	bf00      	nop
 8006962:	e7fe      	b.n	8006962 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006964:	4b0e      	ldr	r3, [pc, #56]	; (80069a0 <vPortValidateInterruptPriority+0x78>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800696c:	4b0d      	ldr	r3, [pc, #52]	; (80069a4 <vPortValidateInterruptPriority+0x7c>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	429a      	cmp	r2, r3
 8006972:	d90a      	bls.n	800698a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	603b      	str	r3, [r7, #0]
}
 8006986:	bf00      	nop
 8006988:	e7fe      	b.n	8006988 <vPortValidateInterruptPriority+0x60>
	}
 800698a:	bf00      	nop
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	e000e3f0 	.word	0xe000e3f0
 800699c:	2000109c 	.word	0x2000109c
 80069a0:	e000ed0c 	.word	0xe000ed0c
 80069a4:	200010a0 	.word	0x200010a0

080069a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08a      	sub	sp, #40	; 0x28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069b0:	2300      	movs	r3, #0
 80069b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069b4:	f7fe fd92 	bl	80054dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80069b8:	4b5b      	ldr	r3, [pc, #364]	; (8006b28 <pvPortMalloc+0x180>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069c0:	f000 f920 	bl	8006c04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069c4:	4b59      	ldr	r3, [pc, #356]	; (8006b2c <pvPortMalloc+0x184>)
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4013      	ands	r3, r2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f040 8093 	bne.w	8006af8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d01d      	beq.n	8006a14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80069d8:	2208      	movs	r2, #8
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4413      	add	r3, r2
 80069de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f003 0307 	and.w	r3, r3, #7
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d014      	beq.n	8006a14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f023 0307 	bic.w	r3, r3, #7
 80069f0:	3308      	adds	r3, #8
 80069f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f003 0307 	and.w	r3, r3, #7
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00a      	beq.n	8006a14 <pvPortMalloc+0x6c>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	617b      	str	r3, [r7, #20]
}
 8006a10:	bf00      	nop
 8006a12:	e7fe      	b.n	8006a12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d06e      	beq.n	8006af8 <pvPortMalloc+0x150>
 8006a1a:	4b45      	ldr	r3, [pc, #276]	; (8006b30 <pvPortMalloc+0x188>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d869      	bhi.n	8006af8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a24:	4b43      	ldr	r3, [pc, #268]	; (8006b34 <pvPortMalloc+0x18c>)
 8006a26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a28:	4b42      	ldr	r3, [pc, #264]	; (8006b34 <pvPortMalloc+0x18c>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a2e:	e004      	b.n	8006a3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d903      	bls.n	8006a4c <pvPortMalloc+0xa4>
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1f1      	bne.n	8006a30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a4c:	4b36      	ldr	r3, [pc, #216]	; (8006b28 <pvPortMalloc+0x180>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d050      	beq.n	8006af8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2208      	movs	r2, #8
 8006a5c:	4413      	add	r3, r2
 8006a5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	6a3b      	ldr	r3, [r7, #32]
 8006a66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	1ad2      	subs	r2, r2, r3
 8006a70:	2308      	movs	r3, #8
 8006a72:	005b      	lsls	r3, r3, #1
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d91f      	bls.n	8006ab8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	f003 0307 	and.w	r3, r3, #7
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00a      	beq.n	8006aa0 <pvPortMalloc+0xf8>
	__asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	613b      	str	r3, [r7, #16]
}
 8006a9c:	bf00      	nop
 8006a9e:	e7fe      	b.n	8006a9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	1ad2      	subs	r2, r2, r3
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ab2:	69b8      	ldr	r0, [r7, #24]
 8006ab4:	f000 f908 	bl	8006cc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ab8:	4b1d      	ldr	r3, [pc, #116]	; (8006b30 <pvPortMalloc+0x188>)
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	4a1b      	ldr	r2, [pc, #108]	; (8006b30 <pvPortMalloc+0x188>)
 8006ac4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ac6:	4b1a      	ldr	r3, [pc, #104]	; (8006b30 <pvPortMalloc+0x188>)
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	4b1b      	ldr	r3, [pc, #108]	; (8006b38 <pvPortMalloc+0x190>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d203      	bcs.n	8006ada <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ad2:	4b17      	ldr	r3, [pc, #92]	; (8006b30 <pvPortMalloc+0x188>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a18      	ldr	r2, [pc, #96]	; (8006b38 <pvPortMalloc+0x190>)
 8006ad8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	685a      	ldr	r2, [r3, #4]
 8006ade:	4b13      	ldr	r3, [pc, #76]	; (8006b2c <pvPortMalloc+0x184>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	431a      	orrs	r2, r3
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	2200      	movs	r2, #0
 8006aec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006aee:	4b13      	ldr	r3, [pc, #76]	; (8006b3c <pvPortMalloc+0x194>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3301      	adds	r3, #1
 8006af4:	4a11      	ldr	r2, [pc, #68]	; (8006b3c <pvPortMalloc+0x194>)
 8006af6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006af8:	f7fe fcfe 	bl	80054f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	f003 0307 	and.w	r3, r3, #7
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00a      	beq.n	8006b1c <pvPortMalloc+0x174>
	__asm volatile
 8006b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0a:	f383 8811 	msr	BASEPRI, r3
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	60fb      	str	r3, [r7, #12]
}
 8006b18:	bf00      	nop
 8006b1a:	e7fe      	b.n	8006b1a <pvPortMalloc+0x172>
	return pvReturn;
 8006b1c:	69fb      	ldr	r3, [r7, #28]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3728      	adds	r7, #40	; 0x28
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	20001c64 	.word	0x20001c64
 8006b2c:	20001c78 	.word	0x20001c78
 8006b30:	20001c68 	.word	0x20001c68
 8006b34:	20001c5c 	.word	0x20001c5c
 8006b38:	20001c6c 	.word	0x20001c6c
 8006b3c:	20001c70 	.word	0x20001c70

08006b40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d04d      	beq.n	8006bee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b52:	2308      	movs	r3, #8
 8006b54:	425b      	negs	r3, r3
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	4413      	add	r3, r2
 8006b5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	4b24      	ldr	r3, [pc, #144]	; (8006bf8 <vPortFree+0xb8>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4013      	ands	r3, r2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10a      	bne.n	8006b84 <vPortFree+0x44>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	60fb      	str	r3, [r7, #12]
}
 8006b80:	bf00      	nop
 8006b82:	e7fe      	b.n	8006b82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00a      	beq.n	8006ba2 <vPortFree+0x62>
	__asm volatile
 8006b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	60bb      	str	r3, [r7, #8]
}
 8006b9e:	bf00      	nop
 8006ba0:	e7fe      	b.n	8006ba0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	4b14      	ldr	r3, [pc, #80]	; (8006bf8 <vPortFree+0xb8>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4013      	ands	r3, r2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d01e      	beq.n	8006bee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d11a      	bne.n	8006bee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	4b0e      	ldr	r3, [pc, #56]	; (8006bf8 <vPortFree+0xb8>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	43db      	mvns	r3, r3
 8006bc2:	401a      	ands	r2, r3
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006bc8:	f7fe fc88 	bl	80054dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	685a      	ldr	r2, [r3, #4]
 8006bd0:	4b0a      	ldr	r3, [pc, #40]	; (8006bfc <vPortFree+0xbc>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	4a09      	ldr	r2, [pc, #36]	; (8006bfc <vPortFree+0xbc>)
 8006bd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bda:	6938      	ldr	r0, [r7, #16]
 8006bdc:	f000 f874 	bl	8006cc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006be0:	4b07      	ldr	r3, [pc, #28]	; (8006c00 <vPortFree+0xc0>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3301      	adds	r3, #1
 8006be6:	4a06      	ldr	r2, [pc, #24]	; (8006c00 <vPortFree+0xc0>)
 8006be8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006bea:	f7fe fc85 	bl	80054f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006bee:	bf00      	nop
 8006bf0:	3718      	adds	r7, #24
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20001c78 	.word	0x20001c78
 8006bfc:	20001c68 	.word	0x20001c68
 8006c00:	20001c74 	.word	0x20001c74

08006c04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c0a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006c0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c10:	4b27      	ldr	r3, [pc, #156]	; (8006cb0 <prvHeapInit+0xac>)
 8006c12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f003 0307 	and.w	r3, r3, #7
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00c      	beq.n	8006c38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3307      	adds	r3, #7
 8006c22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0307 	bic.w	r3, r3, #7
 8006c2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	4a1f      	ldr	r2, [pc, #124]	; (8006cb0 <prvHeapInit+0xac>)
 8006c34:	4413      	add	r3, r2
 8006c36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c3c:	4a1d      	ldr	r2, [pc, #116]	; (8006cb4 <prvHeapInit+0xb0>)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c42:	4b1c      	ldr	r3, [pc, #112]	; (8006cb4 <prvHeapInit+0xb0>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c50:	2208      	movs	r2, #8
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	1a9b      	subs	r3, r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f023 0307 	bic.w	r3, r3, #7
 8006c5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4a15      	ldr	r2, [pc, #84]	; (8006cb8 <prvHeapInit+0xb4>)
 8006c64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c66:	4b14      	ldr	r3, [pc, #80]	; (8006cb8 <prvHeapInit+0xb4>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c6e:	4b12      	ldr	r3, [pc, #72]	; (8006cb8 <prvHeapInit+0xb4>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	1ad2      	subs	r2, r2, r3
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c84:	4b0c      	ldr	r3, [pc, #48]	; (8006cb8 <prvHeapInit+0xb4>)
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	4a0a      	ldr	r2, [pc, #40]	; (8006cbc <prvHeapInit+0xb8>)
 8006c92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	4a09      	ldr	r2, [pc, #36]	; (8006cc0 <prvHeapInit+0xbc>)
 8006c9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c9c:	4b09      	ldr	r3, [pc, #36]	; (8006cc4 <prvHeapInit+0xc0>)
 8006c9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ca2:	601a      	str	r2, [r3, #0]
}
 8006ca4:	bf00      	nop
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	200010a4 	.word	0x200010a4
 8006cb4:	20001c5c 	.word	0x20001c5c
 8006cb8:	20001c64 	.word	0x20001c64
 8006cbc:	20001c6c 	.word	0x20001c6c
 8006cc0:	20001c68 	.word	0x20001c68
 8006cc4:	20001c78 	.word	0x20001c78

08006cc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006cd0:	4b28      	ldr	r3, [pc, #160]	; (8006d74 <prvInsertBlockIntoFreeList+0xac>)
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	e002      	b.n	8006cdc <prvInsertBlockIntoFreeList+0x14>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	60fb      	str	r3, [r7, #12]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d8f7      	bhi.n	8006cd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d108      	bne.n	8006d0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	441a      	add	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	441a      	add	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d118      	bne.n	8006d50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	4b15      	ldr	r3, [pc, #84]	; (8006d78 <prvInsertBlockIntoFreeList+0xb0>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d00d      	beq.n	8006d46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	441a      	add	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	e008      	b.n	8006d58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d46:	4b0c      	ldr	r3, [pc, #48]	; (8006d78 <prvInsertBlockIntoFreeList+0xb0>)
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	e003      	b.n	8006d58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d002      	beq.n	8006d66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d66:	bf00      	nop
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	20001c5c 	.word	0x20001c5c
 8006d78:	20001c64 	.word	0x20001c64

08006d7c <__cvt>:
 8006d7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d80:	ec55 4b10 	vmov	r4, r5, d0
 8006d84:	2d00      	cmp	r5, #0
 8006d86:	460e      	mov	r6, r1
 8006d88:	4619      	mov	r1, r3
 8006d8a:	462b      	mov	r3, r5
 8006d8c:	bfbb      	ittet	lt
 8006d8e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006d92:	461d      	movlt	r5, r3
 8006d94:	2300      	movge	r3, #0
 8006d96:	232d      	movlt	r3, #45	; 0x2d
 8006d98:	700b      	strb	r3, [r1, #0]
 8006d9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d9c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006da0:	4691      	mov	r9, r2
 8006da2:	f023 0820 	bic.w	r8, r3, #32
 8006da6:	bfbc      	itt	lt
 8006da8:	4622      	movlt	r2, r4
 8006daa:	4614      	movlt	r4, r2
 8006dac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006db0:	d005      	beq.n	8006dbe <__cvt+0x42>
 8006db2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006db6:	d100      	bne.n	8006dba <__cvt+0x3e>
 8006db8:	3601      	adds	r6, #1
 8006dba:	2102      	movs	r1, #2
 8006dbc:	e000      	b.n	8006dc0 <__cvt+0x44>
 8006dbe:	2103      	movs	r1, #3
 8006dc0:	ab03      	add	r3, sp, #12
 8006dc2:	9301      	str	r3, [sp, #4]
 8006dc4:	ab02      	add	r3, sp, #8
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	ec45 4b10 	vmov	d0, r4, r5
 8006dcc:	4653      	mov	r3, sl
 8006dce:	4632      	mov	r2, r6
 8006dd0:	f000 febe 	bl	8007b50 <_dtoa_r>
 8006dd4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006dd8:	4607      	mov	r7, r0
 8006dda:	d102      	bne.n	8006de2 <__cvt+0x66>
 8006ddc:	f019 0f01 	tst.w	r9, #1
 8006de0:	d022      	beq.n	8006e28 <__cvt+0xac>
 8006de2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006de6:	eb07 0906 	add.w	r9, r7, r6
 8006dea:	d110      	bne.n	8006e0e <__cvt+0x92>
 8006dec:	783b      	ldrb	r3, [r7, #0]
 8006dee:	2b30      	cmp	r3, #48	; 0x30
 8006df0:	d10a      	bne.n	8006e08 <__cvt+0x8c>
 8006df2:	2200      	movs	r2, #0
 8006df4:	2300      	movs	r3, #0
 8006df6:	4620      	mov	r0, r4
 8006df8:	4629      	mov	r1, r5
 8006dfa:	f7f9 fe65 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dfe:	b918      	cbnz	r0, 8006e08 <__cvt+0x8c>
 8006e00:	f1c6 0601 	rsb	r6, r6, #1
 8006e04:	f8ca 6000 	str.w	r6, [sl]
 8006e08:	f8da 3000 	ldr.w	r3, [sl]
 8006e0c:	4499      	add	r9, r3
 8006e0e:	2200      	movs	r2, #0
 8006e10:	2300      	movs	r3, #0
 8006e12:	4620      	mov	r0, r4
 8006e14:	4629      	mov	r1, r5
 8006e16:	f7f9 fe57 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e1a:	b108      	cbz	r0, 8006e20 <__cvt+0xa4>
 8006e1c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e20:	2230      	movs	r2, #48	; 0x30
 8006e22:	9b03      	ldr	r3, [sp, #12]
 8006e24:	454b      	cmp	r3, r9
 8006e26:	d307      	bcc.n	8006e38 <__cvt+0xbc>
 8006e28:	9b03      	ldr	r3, [sp, #12]
 8006e2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e2c:	1bdb      	subs	r3, r3, r7
 8006e2e:	4638      	mov	r0, r7
 8006e30:	6013      	str	r3, [r2, #0]
 8006e32:	b004      	add	sp, #16
 8006e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e38:	1c59      	adds	r1, r3, #1
 8006e3a:	9103      	str	r1, [sp, #12]
 8006e3c:	701a      	strb	r2, [r3, #0]
 8006e3e:	e7f0      	b.n	8006e22 <__cvt+0xa6>

08006e40 <__exponent>:
 8006e40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e42:	4603      	mov	r3, r0
 8006e44:	2900      	cmp	r1, #0
 8006e46:	bfb8      	it	lt
 8006e48:	4249      	neglt	r1, r1
 8006e4a:	f803 2b02 	strb.w	r2, [r3], #2
 8006e4e:	bfb4      	ite	lt
 8006e50:	222d      	movlt	r2, #45	; 0x2d
 8006e52:	222b      	movge	r2, #43	; 0x2b
 8006e54:	2909      	cmp	r1, #9
 8006e56:	7042      	strb	r2, [r0, #1]
 8006e58:	dd2a      	ble.n	8006eb0 <__exponent+0x70>
 8006e5a:	f10d 0207 	add.w	r2, sp, #7
 8006e5e:	4617      	mov	r7, r2
 8006e60:	260a      	movs	r6, #10
 8006e62:	4694      	mov	ip, r2
 8006e64:	fb91 f5f6 	sdiv	r5, r1, r6
 8006e68:	fb06 1415 	mls	r4, r6, r5, r1
 8006e6c:	3430      	adds	r4, #48	; 0x30
 8006e6e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006e72:	460c      	mov	r4, r1
 8006e74:	2c63      	cmp	r4, #99	; 0x63
 8006e76:	f102 32ff 	add.w	r2, r2, #4294967295
 8006e7a:	4629      	mov	r1, r5
 8006e7c:	dcf1      	bgt.n	8006e62 <__exponent+0x22>
 8006e7e:	3130      	adds	r1, #48	; 0x30
 8006e80:	f1ac 0402 	sub.w	r4, ip, #2
 8006e84:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006e88:	1c41      	adds	r1, r0, #1
 8006e8a:	4622      	mov	r2, r4
 8006e8c:	42ba      	cmp	r2, r7
 8006e8e:	d30a      	bcc.n	8006ea6 <__exponent+0x66>
 8006e90:	f10d 0209 	add.w	r2, sp, #9
 8006e94:	eba2 020c 	sub.w	r2, r2, ip
 8006e98:	42bc      	cmp	r4, r7
 8006e9a:	bf88      	it	hi
 8006e9c:	2200      	movhi	r2, #0
 8006e9e:	4413      	add	r3, r2
 8006ea0:	1a18      	subs	r0, r3, r0
 8006ea2:	b003      	add	sp, #12
 8006ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ea6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006eaa:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006eae:	e7ed      	b.n	8006e8c <__exponent+0x4c>
 8006eb0:	2330      	movs	r3, #48	; 0x30
 8006eb2:	3130      	adds	r1, #48	; 0x30
 8006eb4:	7083      	strb	r3, [r0, #2]
 8006eb6:	70c1      	strb	r1, [r0, #3]
 8006eb8:	1d03      	adds	r3, r0, #4
 8006eba:	e7f1      	b.n	8006ea0 <__exponent+0x60>

08006ebc <_printf_float>:
 8006ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec0:	ed2d 8b02 	vpush	{d8}
 8006ec4:	b08d      	sub	sp, #52	; 0x34
 8006ec6:	460c      	mov	r4, r1
 8006ec8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006ecc:	4616      	mov	r6, r2
 8006ece:	461f      	mov	r7, r3
 8006ed0:	4605      	mov	r5, r0
 8006ed2:	f000 fcd9 	bl	8007888 <_localeconv_r>
 8006ed6:	f8d0 a000 	ldr.w	sl, [r0]
 8006eda:	4650      	mov	r0, sl
 8006edc:	f7f9 f9c8 	bl	8000270 <strlen>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	9305      	str	r3, [sp, #20]
 8006ee8:	f8d8 3000 	ldr.w	r3, [r8]
 8006eec:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006ef0:	3307      	adds	r3, #7
 8006ef2:	f023 0307 	bic.w	r3, r3, #7
 8006ef6:	f103 0208 	add.w	r2, r3, #8
 8006efa:	f8c8 2000 	str.w	r2, [r8]
 8006efe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f06:	9307      	str	r3, [sp, #28]
 8006f08:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f0c:	ee08 0a10 	vmov	s16, r0
 8006f10:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006f14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f18:	4b9e      	ldr	r3, [pc, #632]	; (8007194 <_printf_float+0x2d8>)
 8006f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f1e:	f7f9 fe05 	bl	8000b2c <__aeabi_dcmpun>
 8006f22:	bb88      	cbnz	r0, 8006f88 <_printf_float+0xcc>
 8006f24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f28:	4b9a      	ldr	r3, [pc, #616]	; (8007194 <_printf_float+0x2d8>)
 8006f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f2e:	f7f9 fddf 	bl	8000af0 <__aeabi_dcmple>
 8006f32:	bb48      	cbnz	r0, 8006f88 <_printf_float+0xcc>
 8006f34:	2200      	movs	r2, #0
 8006f36:	2300      	movs	r3, #0
 8006f38:	4640      	mov	r0, r8
 8006f3a:	4649      	mov	r1, r9
 8006f3c:	f7f9 fdce 	bl	8000adc <__aeabi_dcmplt>
 8006f40:	b110      	cbz	r0, 8006f48 <_printf_float+0x8c>
 8006f42:	232d      	movs	r3, #45	; 0x2d
 8006f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f48:	4a93      	ldr	r2, [pc, #588]	; (8007198 <_printf_float+0x2dc>)
 8006f4a:	4b94      	ldr	r3, [pc, #592]	; (800719c <_printf_float+0x2e0>)
 8006f4c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006f50:	bf94      	ite	ls
 8006f52:	4690      	movls	r8, r2
 8006f54:	4698      	movhi	r8, r3
 8006f56:	2303      	movs	r3, #3
 8006f58:	6123      	str	r3, [r4, #16]
 8006f5a:	9b05      	ldr	r3, [sp, #20]
 8006f5c:	f023 0304 	bic.w	r3, r3, #4
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	f04f 0900 	mov.w	r9, #0
 8006f66:	9700      	str	r7, [sp, #0]
 8006f68:	4633      	mov	r3, r6
 8006f6a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	4628      	mov	r0, r5
 8006f70:	f000 f9da 	bl	8007328 <_printf_common>
 8006f74:	3001      	adds	r0, #1
 8006f76:	f040 8090 	bne.w	800709a <_printf_float+0x1de>
 8006f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7e:	b00d      	add	sp, #52	; 0x34
 8006f80:	ecbd 8b02 	vpop	{d8}
 8006f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f88:	4642      	mov	r2, r8
 8006f8a:	464b      	mov	r3, r9
 8006f8c:	4640      	mov	r0, r8
 8006f8e:	4649      	mov	r1, r9
 8006f90:	f7f9 fdcc 	bl	8000b2c <__aeabi_dcmpun>
 8006f94:	b140      	cbz	r0, 8006fa8 <_printf_float+0xec>
 8006f96:	464b      	mov	r3, r9
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	bfbc      	itt	lt
 8006f9c:	232d      	movlt	r3, #45	; 0x2d
 8006f9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006fa2:	4a7f      	ldr	r2, [pc, #508]	; (80071a0 <_printf_float+0x2e4>)
 8006fa4:	4b7f      	ldr	r3, [pc, #508]	; (80071a4 <_printf_float+0x2e8>)
 8006fa6:	e7d1      	b.n	8006f4c <_printf_float+0x90>
 8006fa8:	6863      	ldr	r3, [r4, #4]
 8006faa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006fae:	9206      	str	r2, [sp, #24]
 8006fb0:	1c5a      	adds	r2, r3, #1
 8006fb2:	d13f      	bne.n	8007034 <_printf_float+0x178>
 8006fb4:	2306      	movs	r3, #6
 8006fb6:	6063      	str	r3, [r4, #4]
 8006fb8:	9b05      	ldr	r3, [sp, #20]
 8006fba:	6861      	ldr	r1, [r4, #4]
 8006fbc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	9303      	str	r3, [sp, #12]
 8006fc4:	ab0a      	add	r3, sp, #40	; 0x28
 8006fc6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006fca:	ab09      	add	r3, sp, #36	; 0x24
 8006fcc:	ec49 8b10 	vmov	d0, r8, r9
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	6022      	str	r2, [r4, #0]
 8006fd4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006fd8:	4628      	mov	r0, r5
 8006fda:	f7ff fecf 	bl	8006d7c <__cvt>
 8006fde:	9b06      	ldr	r3, [sp, #24]
 8006fe0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fe2:	2b47      	cmp	r3, #71	; 0x47
 8006fe4:	4680      	mov	r8, r0
 8006fe6:	d108      	bne.n	8006ffa <_printf_float+0x13e>
 8006fe8:	1cc8      	adds	r0, r1, #3
 8006fea:	db02      	blt.n	8006ff2 <_printf_float+0x136>
 8006fec:	6863      	ldr	r3, [r4, #4]
 8006fee:	4299      	cmp	r1, r3
 8006ff0:	dd41      	ble.n	8007076 <_printf_float+0x1ba>
 8006ff2:	f1ab 0302 	sub.w	r3, fp, #2
 8006ff6:	fa5f fb83 	uxtb.w	fp, r3
 8006ffa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ffe:	d820      	bhi.n	8007042 <_printf_float+0x186>
 8007000:	3901      	subs	r1, #1
 8007002:	465a      	mov	r2, fp
 8007004:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007008:	9109      	str	r1, [sp, #36]	; 0x24
 800700a:	f7ff ff19 	bl	8006e40 <__exponent>
 800700e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007010:	1813      	adds	r3, r2, r0
 8007012:	2a01      	cmp	r2, #1
 8007014:	4681      	mov	r9, r0
 8007016:	6123      	str	r3, [r4, #16]
 8007018:	dc02      	bgt.n	8007020 <_printf_float+0x164>
 800701a:	6822      	ldr	r2, [r4, #0]
 800701c:	07d2      	lsls	r2, r2, #31
 800701e:	d501      	bpl.n	8007024 <_printf_float+0x168>
 8007020:	3301      	adds	r3, #1
 8007022:	6123      	str	r3, [r4, #16]
 8007024:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007028:	2b00      	cmp	r3, #0
 800702a:	d09c      	beq.n	8006f66 <_printf_float+0xaa>
 800702c:	232d      	movs	r3, #45	; 0x2d
 800702e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007032:	e798      	b.n	8006f66 <_printf_float+0xaa>
 8007034:	9a06      	ldr	r2, [sp, #24]
 8007036:	2a47      	cmp	r2, #71	; 0x47
 8007038:	d1be      	bne.n	8006fb8 <_printf_float+0xfc>
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1bc      	bne.n	8006fb8 <_printf_float+0xfc>
 800703e:	2301      	movs	r3, #1
 8007040:	e7b9      	b.n	8006fb6 <_printf_float+0xfa>
 8007042:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007046:	d118      	bne.n	800707a <_printf_float+0x1be>
 8007048:	2900      	cmp	r1, #0
 800704a:	6863      	ldr	r3, [r4, #4]
 800704c:	dd0b      	ble.n	8007066 <_printf_float+0x1aa>
 800704e:	6121      	str	r1, [r4, #16]
 8007050:	b913      	cbnz	r3, 8007058 <_printf_float+0x19c>
 8007052:	6822      	ldr	r2, [r4, #0]
 8007054:	07d0      	lsls	r0, r2, #31
 8007056:	d502      	bpl.n	800705e <_printf_float+0x1a2>
 8007058:	3301      	adds	r3, #1
 800705a:	440b      	add	r3, r1
 800705c:	6123      	str	r3, [r4, #16]
 800705e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007060:	f04f 0900 	mov.w	r9, #0
 8007064:	e7de      	b.n	8007024 <_printf_float+0x168>
 8007066:	b913      	cbnz	r3, 800706e <_printf_float+0x1b2>
 8007068:	6822      	ldr	r2, [r4, #0]
 800706a:	07d2      	lsls	r2, r2, #31
 800706c:	d501      	bpl.n	8007072 <_printf_float+0x1b6>
 800706e:	3302      	adds	r3, #2
 8007070:	e7f4      	b.n	800705c <_printf_float+0x1a0>
 8007072:	2301      	movs	r3, #1
 8007074:	e7f2      	b.n	800705c <_printf_float+0x1a0>
 8007076:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800707a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800707c:	4299      	cmp	r1, r3
 800707e:	db05      	blt.n	800708c <_printf_float+0x1d0>
 8007080:	6823      	ldr	r3, [r4, #0]
 8007082:	6121      	str	r1, [r4, #16]
 8007084:	07d8      	lsls	r0, r3, #31
 8007086:	d5ea      	bpl.n	800705e <_printf_float+0x1a2>
 8007088:	1c4b      	adds	r3, r1, #1
 800708a:	e7e7      	b.n	800705c <_printf_float+0x1a0>
 800708c:	2900      	cmp	r1, #0
 800708e:	bfd4      	ite	le
 8007090:	f1c1 0202 	rsble	r2, r1, #2
 8007094:	2201      	movgt	r2, #1
 8007096:	4413      	add	r3, r2
 8007098:	e7e0      	b.n	800705c <_printf_float+0x1a0>
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	055a      	lsls	r2, r3, #21
 800709e:	d407      	bmi.n	80070b0 <_printf_float+0x1f4>
 80070a0:	6923      	ldr	r3, [r4, #16]
 80070a2:	4642      	mov	r2, r8
 80070a4:	4631      	mov	r1, r6
 80070a6:	4628      	mov	r0, r5
 80070a8:	47b8      	blx	r7
 80070aa:	3001      	adds	r0, #1
 80070ac:	d12c      	bne.n	8007108 <_printf_float+0x24c>
 80070ae:	e764      	b.n	8006f7a <_printf_float+0xbe>
 80070b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80070b4:	f240 80e0 	bls.w	8007278 <_printf_float+0x3bc>
 80070b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070bc:	2200      	movs	r2, #0
 80070be:	2300      	movs	r3, #0
 80070c0:	f7f9 fd02 	bl	8000ac8 <__aeabi_dcmpeq>
 80070c4:	2800      	cmp	r0, #0
 80070c6:	d034      	beq.n	8007132 <_printf_float+0x276>
 80070c8:	4a37      	ldr	r2, [pc, #220]	; (80071a8 <_printf_float+0x2ec>)
 80070ca:	2301      	movs	r3, #1
 80070cc:	4631      	mov	r1, r6
 80070ce:	4628      	mov	r0, r5
 80070d0:	47b8      	blx	r7
 80070d2:	3001      	adds	r0, #1
 80070d4:	f43f af51 	beq.w	8006f7a <_printf_float+0xbe>
 80070d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070dc:	429a      	cmp	r2, r3
 80070de:	db02      	blt.n	80070e6 <_printf_float+0x22a>
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	07d8      	lsls	r0, r3, #31
 80070e4:	d510      	bpl.n	8007108 <_printf_float+0x24c>
 80070e6:	ee18 3a10 	vmov	r3, s16
 80070ea:	4652      	mov	r2, sl
 80070ec:	4631      	mov	r1, r6
 80070ee:	4628      	mov	r0, r5
 80070f0:	47b8      	blx	r7
 80070f2:	3001      	adds	r0, #1
 80070f4:	f43f af41 	beq.w	8006f7a <_printf_float+0xbe>
 80070f8:	f04f 0800 	mov.w	r8, #0
 80070fc:	f104 091a 	add.w	r9, r4, #26
 8007100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007102:	3b01      	subs	r3, #1
 8007104:	4543      	cmp	r3, r8
 8007106:	dc09      	bgt.n	800711c <_printf_float+0x260>
 8007108:	6823      	ldr	r3, [r4, #0]
 800710a:	079b      	lsls	r3, r3, #30
 800710c:	f100 8107 	bmi.w	800731e <_printf_float+0x462>
 8007110:	68e0      	ldr	r0, [r4, #12]
 8007112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007114:	4298      	cmp	r0, r3
 8007116:	bfb8      	it	lt
 8007118:	4618      	movlt	r0, r3
 800711a:	e730      	b.n	8006f7e <_printf_float+0xc2>
 800711c:	2301      	movs	r3, #1
 800711e:	464a      	mov	r2, r9
 8007120:	4631      	mov	r1, r6
 8007122:	4628      	mov	r0, r5
 8007124:	47b8      	blx	r7
 8007126:	3001      	adds	r0, #1
 8007128:	f43f af27 	beq.w	8006f7a <_printf_float+0xbe>
 800712c:	f108 0801 	add.w	r8, r8, #1
 8007130:	e7e6      	b.n	8007100 <_printf_float+0x244>
 8007132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007134:	2b00      	cmp	r3, #0
 8007136:	dc39      	bgt.n	80071ac <_printf_float+0x2f0>
 8007138:	4a1b      	ldr	r2, [pc, #108]	; (80071a8 <_printf_float+0x2ec>)
 800713a:	2301      	movs	r3, #1
 800713c:	4631      	mov	r1, r6
 800713e:	4628      	mov	r0, r5
 8007140:	47b8      	blx	r7
 8007142:	3001      	adds	r0, #1
 8007144:	f43f af19 	beq.w	8006f7a <_printf_float+0xbe>
 8007148:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800714c:	4313      	orrs	r3, r2
 800714e:	d102      	bne.n	8007156 <_printf_float+0x29a>
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	07d9      	lsls	r1, r3, #31
 8007154:	d5d8      	bpl.n	8007108 <_printf_float+0x24c>
 8007156:	ee18 3a10 	vmov	r3, s16
 800715a:	4652      	mov	r2, sl
 800715c:	4631      	mov	r1, r6
 800715e:	4628      	mov	r0, r5
 8007160:	47b8      	blx	r7
 8007162:	3001      	adds	r0, #1
 8007164:	f43f af09 	beq.w	8006f7a <_printf_float+0xbe>
 8007168:	f04f 0900 	mov.w	r9, #0
 800716c:	f104 0a1a 	add.w	sl, r4, #26
 8007170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007172:	425b      	negs	r3, r3
 8007174:	454b      	cmp	r3, r9
 8007176:	dc01      	bgt.n	800717c <_printf_float+0x2c0>
 8007178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800717a:	e792      	b.n	80070a2 <_printf_float+0x1e6>
 800717c:	2301      	movs	r3, #1
 800717e:	4652      	mov	r2, sl
 8007180:	4631      	mov	r1, r6
 8007182:	4628      	mov	r0, r5
 8007184:	47b8      	blx	r7
 8007186:	3001      	adds	r0, #1
 8007188:	f43f aef7 	beq.w	8006f7a <_printf_float+0xbe>
 800718c:	f109 0901 	add.w	r9, r9, #1
 8007190:	e7ee      	b.n	8007170 <_printf_float+0x2b4>
 8007192:	bf00      	nop
 8007194:	7fefffff 	.word	0x7fefffff
 8007198:	080098b8 	.word	0x080098b8
 800719c:	080098bc 	.word	0x080098bc
 80071a0:	080098c0 	.word	0x080098c0
 80071a4:	080098c4 	.word	0x080098c4
 80071a8:	080098c8 	.word	0x080098c8
 80071ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071b0:	429a      	cmp	r2, r3
 80071b2:	bfa8      	it	ge
 80071b4:	461a      	movge	r2, r3
 80071b6:	2a00      	cmp	r2, #0
 80071b8:	4691      	mov	r9, r2
 80071ba:	dc37      	bgt.n	800722c <_printf_float+0x370>
 80071bc:	f04f 0b00 	mov.w	fp, #0
 80071c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071c4:	f104 021a 	add.w	r2, r4, #26
 80071c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071ca:	9305      	str	r3, [sp, #20]
 80071cc:	eba3 0309 	sub.w	r3, r3, r9
 80071d0:	455b      	cmp	r3, fp
 80071d2:	dc33      	bgt.n	800723c <_printf_float+0x380>
 80071d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071d8:	429a      	cmp	r2, r3
 80071da:	db3b      	blt.n	8007254 <_printf_float+0x398>
 80071dc:	6823      	ldr	r3, [r4, #0]
 80071de:	07da      	lsls	r2, r3, #31
 80071e0:	d438      	bmi.n	8007254 <_printf_float+0x398>
 80071e2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80071e6:	eba2 0903 	sub.w	r9, r2, r3
 80071ea:	9b05      	ldr	r3, [sp, #20]
 80071ec:	1ad2      	subs	r2, r2, r3
 80071ee:	4591      	cmp	r9, r2
 80071f0:	bfa8      	it	ge
 80071f2:	4691      	movge	r9, r2
 80071f4:	f1b9 0f00 	cmp.w	r9, #0
 80071f8:	dc35      	bgt.n	8007266 <_printf_float+0x3aa>
 80071fa:	f04f 0800 	mov.w	r8, #0
 80071fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007202:	f104 0a1a 	add.w	sl, r4, #26
 8007206:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800720a:	1a9b      	subs	r3, r3, r2
 800720c:	eba3 0309 	sub.w	r3, r3, r9
 8007210:	4543      	cmp	r3, r8
 8007212:	f77f af79 	ble.w	8007108 <_printf_float+0x24c>
 8007216:	2301      	movs	r3, #1
 8007218:	4652      	mov	r2, sl
 800721a:	4631      	mov	r1, r6
 800721c:	4628      	mov	r0, r5
 800721e:	47b8      	blx	r7
 8007220:	3001      	adds	r0, #1
 8007222:	f43f aeaa 	beq.w	8006f7a <_printf_float+0xbe>
 8007226:	f108 0801 	add.w	r8, r8, #1
 800722a:	e7ec      	b.n	8007206 <_printf_float+0x34a>
 800722c:	4613      	mov	r3, r2
 800722e:	4631      	mov	r1, r6
 8007230:	4642      	mov	r2, r8
 8007232:	4628      	mov	r0, r5
 8007234:	47b8      	blx	r7
 8007236:	3001      	adds	r0, #1
 8007238:	d1c0      	bne.n	80071bc <_printf_float+0x300>
 800723a:	e69e      	b.n	8006f7a <_printf_float+0xbe>
 800723c:	2301      	movs	r3, #1
 800723e:	4631      	mov	r1, r6
 8007240:	4628      	mov	r0, r5
 8007242:	9205      	str	r2, [sp, #20]
 8007244:	47b8      	blx	r7
 8007246:	3001      	adds	r0, #1
 8007248:	f43f ae97 	beq.w	8006f7a <_printf_float+0xbe>
 800724c:	9a05      	ldr	r2, [sp, #20]
 800724e:	f10b 0b01 	add.w	fp, fp, #1
 8007252:	e7b9      	b.n	80071c8 <_printf_float+0x30c>
 8007254:	ee18 3a10 	vmov	r3, s16
 8007258:	4652      	mov	r2, sl
 800725a:	4631      	mov	r1, r6
 800725c:	4628      	mov	r0, r5
 800725e:	47b8      	blx	r7
 8007260:	3001      	adds	r0, #1
 8007262:	d1be      	bne.n	80071e2 <_printf_float+0x326>
 8007264:	e689      	b.n	8006f7a <_printf_float+0xbe>
 8007266:	9a05      	ldr	r2, [sp, #20]
 8007268:	464b      	mov	r3, r9
 800726a:	4442      	add	r2, r8
 800726c:	4631      	mov	r1, r6
 800726e:	4628      	mov	r0, r5
 8007270:	47b8      	blx	r7
 8007272:	3001      	adds	r0, #1
 8007274:	d1c1      	bne.n	80071fa <_printf_float+0x33e>
 8007276:	e680      	b.n	8006f7a <_printf_float+0xbe>
 8007278:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800727a:	2a01      	cmp	r2, #1
 800727c:	dc01      	bgt.n	8007282 <_printf_float+0x3c6>
 800727e:	07db      	lsls	r3, r3, #31
 8007280:	d53a      	bpl.n	80072f8 <_printf_float+0x43c>
 8007282:	2301      	movs	r3, #1
 8007284:	4642      	mov	r2, r8
 8007286:	4631      	mov	r1, r6
 8007288:	4628      	mov	r0, r5
 800728a:	47b8      	blx	r7
 800728c:	3001      	adds	r0, #1
 800728e:	f43f ae74 	beq.w	8006f7a <_printf_float+0xbe>
 8007292:	ee18 3a10 	vmov	r3, s16
 8007296:	4652      	mov	r2, sl
 8007298:	4631      	mov	r1, r6
 800729a:	4628      	mov	r0, r5
 800729c:	47b8      	blx	r7
 800729e:	3001      	adds	r0, #1
 80072a0:	f43f ae6b 	beq.w	8006f7a <_printf_float+0xbe>
 80072a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072a8:	2200      	movs	r2, #0
 80072aa:	2300      	movs	r3, #0
 80072ac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80072b0:	f7f9 fc0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80072b4:	b9d8      	cbnz	r0, 80072ee <_printf_float+0x432>
 80072b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80072ba:	f108 0201 	add.w	r2, r8, #1
 80072be:	4631      	mov	r1, r6
 80072c0:	4628      	mov	r0, r5
 80072c2:	47b8      	blx	r7
 80072c4:	3001      	adds	r0, #1
 80072c6:	d10e      	bne.n	80072e6 <_printf_float+0x42a>
 80072c8:	e657      	b.n	8006f7a <_printf_float+0xbe>
 80072ca:	2301      	movs	r3, #1
 80072cc:	4652      	mov	r2, sl
 80072ce:	4631      	mov	r1, r6
 80072d0:	4628      	mov	r0, r5
 80072d2:	47b8      	blx	r7
 80072d4:	3001      	adds	r0, #1
 80072d6:	f43f ae50 	beq.w	8006f7a <_printf_float+0xbe>
 80072da:	f108 0801 	add.w	r8, r8, #1
 80072de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e0:	3b01      	subs	r3, #1
 80072e2:	4543      	cmp	r3, r8
 80072e4:	dcf1      	bgt.n	80072ca <_printf_float+0x40e>
 80072e6:	464b      	mov	r3, r9
 80072e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80072ec:	e6da      	b.n	80070a4 <_printf_float+0x1e8>
 80072ee:	f04f 0800 	mov.w	r8, #0
 80072f2:	f104 0a1a 	add.w	sl, r4, #26
 80072f6:	e7f2      	b.n	80072de <_printf_float+0x422>
 80072f8:	2301      	movs	r3, #1
 80072fa:	4642      	mov	r2, r8
 80072fc:	e7df      	b.n	80072be <_printf_float+0x402>
 80072fe:	2301      	movs	r3, #1
 8007300:	464a      	mov	r2, r9
 8007302:	4631      	mov	r1, r6
 8007304:	4628      	mov	r0, r5
 8007306:	47b8      	blx	r7
 8007308:	3001      	adds	r0, #1
 800730a:	f43f ae36 	beq.w	8006f7a <_printf_float+0xbe>
 800730e:	f108 0801 	add.w	r8, r8, #1
 8007312:	68e3      	ldr	r3, [r4, #12]
 8007314:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007316:	1a5b      	subs	r3, r3, r1
 8007318:	4543      	cmp	r3, r8
 800731a:	dcf0      	bgt.n	80072fe <_printf_float+0x442>
 800731c:	e6f8      	b.n	8007110 <_printf_float+0x254>
 800731e:	f04f 0800 	mov.w	r8, #0
 8007322:	f104 0919 	add.w	r9, r4, #25
 8007326:	e7f4      	b.n	8007312 <_printf_float+0x456>

08007328 <_printf_common>:
 8007328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800732c:	4616      	mov	r6, r2
 800732e:	4699      	mov	r9, r3
 8007330:	688a      	ldr	r2, [r1, #8]
 8007332:	690b      	ldr	r3, [r1, #16]
 8007334:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007338:	4293      	cmp	r3, r2
 800733a:	bfb8      	it	lt
 800733c:	4613      	movlt	r3, r2
 800733e:	6033      	str	r3, [r6, #0]
 8007340:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007344:	4607      	mov	r7, r0
 8007346:	460c      	mov	r4, r1
 8007348:	b10a      	cbz	r2, 800734e <_printf_common+0x26>
 800734a:	3301      	adds	r3, #1
 800734c:	6033      	str	r3, [r6, #0]
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	0699      	lsls	r1, r3, #26
 8007352:	bf42      	ittt	mi
 8007354:	6833      	ldrmi	r3, [r6, #0]
 8007356:	3302      	addmi	r3, #2
 8007358:	6033      	strmi	r3, [r6, #0]
 800735a:	6825      	ldr	r5, [r4, #0]
 800735c:	f015 0506 	ands.w	r5, r5, #6
 8007360:	d106      	bne.n	8007370 <_printf_common+0x48>
 8007362:	f104 0a19 	add.w	sl, r4, #25
 8007366:	68e3      	ldr	r3, [r4, #12]
 8007368:	6832      	ldr	r2, [r6, #0]
 800736a:	1a9b      	subs	r3, r3, r2
 800736c:	42ab      	cmp	r3, r5
 800736e:	dc26      	bgt.n	80073be <_printf_common+0x96>
 8007370:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007374:	1e13      	subs	r3, r2, #0
 8007376:	6822      	ldr	r2, [r4, #0]
 8007378:	bf18      	it	ne
 800737a:	2301      	movne	r3, #1
 800737c:	0692      	lsls	r2, r2, #26
 800737e:	d42b      	bmi.n	80073d8 <_printf_common+0xb0>
 8007380:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007384:	4649      	mov	r1, r9
 8007386:	4638      	mov	r0, r7
 8007388:	47c0      	blx	r8
 800738a:	3001      	adds	r0, #1
 800738c:	d01e      	beq.n	80073cc <_printf_common+0xa4>
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	6922      	ldr	r2, [r4, #16]
 8007392:	f003 0306 	and.w	r3, r3, #6
 8007396:	2b04      	cmp	r3, #4
 8007398:	bf02      	ittt	eq
 800739a:	68e5      	ldreq	r5, [r4, #12]
 800739c:	6833      	ldreq	r3, [r6, #0]
 800739e:	1aed      	subeq	r5, r5, r3
 80073a0:	68a3      	ldr	r3, [r4, #8]
 80073a2:	bf0c      	ite	eq
 80073a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073a8:	2500      	movne	r5, #0
 80073aa:	4293      	cmp	r3, r2
 80073ac:	bfc4      	itt	gt
 80073ae:	1a9b      	subgt	r3, r3, r2
 80073b0:	18ed      	addgt	r5, r5, r3
 80073b2:	2600      	movs	r6, #0
 80073b4:	341a      	adds	r4, #26
 80073b6:	42b5      	cmp	r5, r6
 80073b8:	d11a      	bne.n	80073f0 <_printf_common+0xc8>
 80073ba:	2000      	movs	r0, #0
 80073bc:	e008      	b.n	80073d0 <_printf_common+0xa8>
 80073be:	2301      	movs	r3, #1
 80073c0:	4652      	mov	r2, sl
 80073c2:	4649      	mov	r1, r9
 80073c4:	4638      	mov	r0, r7
 80073c6:	47c0      	blx	r8
 80073c8:	3001      	adds	r0, #1
 80073ca:	d103      	bne.n	80073d4 <_printf_common+0xac>
 80073cc:	f04f 30ff 	mov.w	r0, #4294967295
 80073d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d4:	3501      	adds	r5, #1
 80073d6:	e7c6      	b.n	8007366 <_printf_common+0x3e>
 80073d8:	18e1      	adds	r1, r4, r3
 80073da:	1c5a      	adds	r2, r3, #1
 80073dc:	2030      	movs	r0, #48	; 0x30
 80073de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073e2:	4422      	add	r2, r4
 80073e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073ec:	3302      	adds	r3, #2
 80073ee:	e7c7      	b.n	8007380 <_printf_common+0x58>
 80073f0:	2301      	movs	r3, #1
 80073f2:	4622      	mov	r2, r4
 80073f4:	4649      	mov	r1, r9
 80073f6:	4638      	mov	r0, r7
 80073f8:	47c0      	blx	r8
 80073fa:	3001      	adds	r0, #1
 80073fc:	d0e6      	beq.n	80073cc <_printf_common+0xa4>
 80073fe:	3601      	adds	r6, #1
 8007400:	e7d9      	b.n	80073b6 <_printf_common+0x8e>
	...

08007404 <_printf_i>:
 8007404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007408:	7e0f      	ldrb	r7, [r1, #24]
 800740a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800740c:	2f78      	cmp	r7, #120	; 0x78
 800740e:	4691      	mov	r9, r2
 8007410:	4680      	mov	r8, r0
 8007412:	460c      	mov	r4, r1
 8007414:	469a      	mov	sl, r3
 8007416:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800741a:	d807      	bhi.n	800742c <_printf_i+0x28>
 800741c:	2f62      	cmp	r7, #98	; 0x62
 800741e:	d80a      	bhi.n	8007436 <_printf_i+0x32>
 8007420:	2f00      	cmp	r7, #0
 8007422:	f000 80d4 	beq.w	80075ce <_printf_i+0x1ca>
 8007426:	2f58      	cmp	r7, #88	; 0x58
 8007428:	f000 80c0 	beq.w	80075ac <_printf_i+0x1a8>
 800742c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007430:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007434:	e03a      	b.n	80074ac <_printf_i+0xa8>
 8007436:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800743a:	2b15      	cmp	r3, #21
 800743c:	d8f6      	bhi.n	800742c <_printf_i+0x28>
 800743e:	a101      	add	r1, pc, #4	; (adr r1, 8007444 <_printf_i+0x40>)
 8007440:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007444:	0800749d 	.word	0x0800749d
 8007448:	080074b1 	.word	0x080074b1
 800744c:	0800742d 	.word	0x0800742d
 8007450:	0800742d 	.word	0x0800742d
 8007454:	0800742d 	.word	0x0800742d
 8007458:	0800742d 	.word	0x0800742d
 800745c:	080074b1 	.word	0x080074b1
 8007460:	0800742d 	.word	0x0800742d
 8007464:	0800742d 	.word	0x0800742d
 8007468:	0800742d 	.word	0x0800742d
 800746c:	0800742d 	.word	0x0800742d
 8007470:	080075b5 	.word	0x080075b5
 8007474:	080074dd 	.word	0x080074dd
 8007478:	0800756f 	.word	0x0800756f
 800747c:	0800742d 	.word	0x0800742d
 8007480:	0800742d 	.word	0x0800742d
 8007484:	080075d7 	.word	0x080075d7
 8007488:	0800742d 	.word	0x0800742d
 800748c:	080074dd 	.word	0x080074dd
 8007490:	0800742d 	.word	0x0800742d
 8007494:	0800742d 	.word	0x0800742d
 8007498:	08007577 	.word	0x08007577
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	1d1a      	adds	r2, r3, #4
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	602a      	str	r2, [r5, #0]
 80074a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074ac:	2301      	movs	r3, #1
 80074ae:	e09f      	b.n	80075f0 <_printf_i+0x1ec>
 80074b0:	6820      	ldr	r0, [r4, #0]
 80074b2:	682b      	ldr	r3, [r5, #0]
 80074b4:	0607      	lsls	r7, r0, #24
 80074b6:	f103 0104 	add.w	r1, r3, #4
 80074ba:	6029      	str	r1, [r5, #0]
 80074bc:	d501      	bpl.n	80074c2 <_printf_i+0xbe>
 80074be:	681e      	ldr	r6, [r3, #0]
 80074c0:	e003      	b.n	80074ca <_printf_i+0xc6>
 80074c2:	0646      	lsls	r6, r0, #25
 80074c4:	d5fb      	bpl.n	80074be <_printf_i+0xba>
 80074c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80074ca:	2e00      	cmp	r6, #0
 80074cc:	da03      	bge.n	80074d6 <_printf_i+0xd2>
 80074ce:	232d      	movs	r3, #45	; 0x2d
 80074d0:	4276      	negs	r6, r6
 80074d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074d6:	485a      	ldr	r0, [pc, #360]	; (8007640 <_printf_i+0x23c>)
 80074d8:	230a      	movs	r3, #10
 80074da:	e012      	b.n	8007502 <_printf_i+0xfe>
 80074dc:	682b      	ldr	r3, [r5, #0]
 80074de:	6820      	ldr	r0, [r4, #0]
 80074e0:	1d19      	adds	r1, r3, #4
 80074e2:	6029      	str	r1, [r5, #0]
 80074e4:	0605      	lsls	r5, r0, #24
 80074e6:	d501      	bpl.n	80074ec <_printf_i+0xe8>
 80074e8:	681e      	ldr	r6, [r3, #0]
 80074ea:	e002      	b.n	80074f2 <_printf_i+0xee>
 80074ec:	0641      	lsls	r1, r0, #25
 80074ee:	d5fb      	bpl.n	80074e8 <_printf_i+0xe4>
 80074f0:	881e      	ldrh	r6, [r3, #0]
 80074f2:	4853      	ldr	r0, [pc, #332]	; (8007640 <_printf_i+0x23c>)
 80074f4:	2f6f      	cmp	r7, #111	; 0x6f
 80074f6:	bf0c      	ite	eq
 80074f8:	2308      	moveq	r3, #8
 80074fa:	230a      	movne	r3, #10
 80074fc:	2100      	movs	r1, #0
 80074fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007502:	6865      	ldr	r5, [r4, #4]
 8007504:	60a5      	str	r5, [r4, #8]
 8007506:	2d00      	cmp	r5, #0
 8007508:	bfa2      	ittt	ge
 800750a:	6821      	ldrge	r1, [r4, #0]
 800750c:	f021 0104 	bicge.w	r1, r1, #4
 8007510:	6021      	strge	r1, [r4, #0]
 8007512:	b90e      	cbnz	r6, 8007518 <_printf_i+0x114>
 8007514:	2d00      	cmp	r5, #0
 8007516:	d04b      	beq.n	80075b0 <_printf_i+0x1ac>
 8007518:	4615      	mov	r5, r2
 800751a:	fbb6 f1f3 	udiv	r1, r6, r3
 800751e:	fb03 6711 	mls	r7, r3, r1, r6
 8007522:	5dc7      	ldrb	r7, [r0, r7]
 8007524:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007528:	4637      	mov	r7, r6
 800752a:	42bb      	cmp	r3, r7
 800752c:	460e      	mov	r6, r1
 800752e:	d9f4      	bls.n	800751a <_printf_i+0x116>
 8007530:	2b08      	cmp	r3, #8
 8007532:	d10b      	bne.n	800754c <_printf_i+0x148>
 8007534:	6823      	ldr	r3, [r4, #0]
 8007536:	07de      	lsls	r6, r3, #31
 8007538:	d508      	bpl.n	800754c <_printf_i+0x148>
 800753a:	6923      	ldr	r3, [r4, #16]
 800753c:	6861      	ldr	r1, [r4, #4]
 800753e:	4299      	cmp	r1, r3
 8007540:	bfde      	ittt	le
 8007542:	2330      	movle	r3, #48	; 0x30
 8007544:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007548:	f105 35ff 	addle.w	r5, r5, #4294967295
 800754c:	1b52      	subs	r2, r2, r5
 800754e:	6122      	str	r2, [r4, #16]
 8007550:	f8cd a000 	str.w	sl, [sp]
 8007554:	464b      	mov	r3, r9
 8007556:	aa03      	add	r2, sp, #12
 8007558:	4621      	mov	r1, r4
 800755a:	4640      	mov	r0, r8
 800755c:	f7ff fee4 	bl	8007328 <_printf_common>
 8007560:	3001      	adds	r0, #1
 8007562:	d14a      	bne.n	80075fa <_printf_i+0x1f6>
 8007564:	f04f 30ff 	mov.w	r0, #4294967295
 8007568:	b004      	add	sp, #16
 800756a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800756e:	6823      	ldr	r3, [r4, #0]
 8007570:	f043 0320 	orr.w	r3, r3, #32
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	4833      	ldr	r0, [pc, #204]	; (8007644 <_printf_i+0x240>)
 8007578:	2778      	movs	r7, #120	; 0x78
 800757a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800757e:	6823      	ldr	r3, [r4, #0]
 8007580:	6829      	ldr	r1, [r5, #0]
 8007582:	061f      	lsls	r7, r3, #24
 8007584:	f851 6b04 	ldr.w	r6, [r1], #4
 8007588:	d402      	bmi.n	8007590 <_printf_i+0x18c>
 800758a:	065f      	lsls	r7, r3, #25
 800758c:	bf48      	it	mi
 800758e:	b2b6      	uxthmi	r6, r6
 8007590:	07df      	lsls	r7, r3, #31
 8007592:	bf48      	it	mi
 8007594:	f043 0320 	orrmi.w	r3, r3, #32
 8007598:	6029      	str	r1, [r5, #0]
 800759a:	bf48      	it	mi
 800759c:	6023      	strmi	r3, [r4, #0]
 800759e:	b91e      	cbnz	r6, 80075a8 <_printf_i+0x1a4>
 80075a0:	6823      	ldr	r3, [r4, #0]
 80075a2:	f023 0320 	bic.w	r3, r3, #32
 80075a6:	6023      	str	r3, [r4, #0]
 80075a8:	2310      	movs	r3, #16
 80075aa:	e7a7      	b.n	80074fc <_printf_i+0xf8>
 80075ac:	4824      	ldr	r0, [pc, #144]	; (8007640 <_printf_i+0x23c>)
 80075ae:	e7e4      	b.n	800757a <_printf_i+0x176>
 80075b0:	4615      	mov	r5, r2
 80075b2:	e7bd      	b.n	8007530 <_printf_i+0x12c>
 80075b4:	682b      	ldr	r3, [r5, #0]
 80075b6:	6826      	ldr	r6, [r4, #0]
 80075b8:	6961      	ldr	r1, [r4, #20]
 80075ba:	1d18      	adds	r0, r3, #4
 80075bc:	6028      	str	r0, [r5, #0]
 80075be:	0635      	lsls	r5, r6, #24
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	d501      	bpl.n	80075c8 <_printf_i+0x1c4>
 80075c4:	6019      	str	r1, [r3, #0]
 80075c6:	e002      	b.n	80075ce <_printf_i+0x1ca>
 80075c8:	0670      	lsls	r0, r6, #25
 80075ca:	d5fb      	bpl.n	80075c4 <_printf_i+0x1c0>
 80075cc:	8019      	strh	r1, [r3, #0]
 80075ce:	2300      	movs	r3, #0
 80075d0:	6123      	str	r3, [r4, #16]
 80075d2:	4615      	mov	r5, r2
 80075d4:	e7bc      	b.n	8007550 <_printf_i+0x14c>
 80075d6:	682b      	ldr	r3, [r5, #0]
 80075d8:	1d1a      	adds	r2, r3, #4
 80075da:	602a      	str	r2, [r5, #0]
 80075dc:	681d      	ldr	r5, [r3, #0]
 80075de:	6862      	ldr	r2, [r4, #4]
 80075e0:	2100      	movs	r1, #0
 80075e2:	4628      	mov	r0, r5
 80075e4:	f7f8 fdf4 	bl	80001d0 <memchr>
 80075e8:	b108      	cbz	r0, 80075ee <_printf_i+0x1ea>
 80075ea:	1b40      	subs	r0, r0, r5
 80075ec:	6060      	str	r0, [r4, #4]
 80075ee:	6863      	ldr	r3, [r4, #4]
 80075f0:	6123      	str	r3, [r4, #16]
 80075f2:	2300      	movs	r3, #0
 80075f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075f8:	e7aa      	b.n	8007550 <_printf_i+0x14c>
 80075fa:	6923      	ldr	r3, [r4, #16]
 80075fc:	462a      	mov	r2, r5
 80075fe:	4649      	mov	r1, r9
 8007600:	4640      	mov	r0, r8
 8007602:	47d0      	blx	sl
 8007604:	3001      	adds	r0, #1
 8007606:	d0ad      	beq.n	8007564 <_printf_i+0x160>
 8007608:	6823      	ldr	r3, [r4, #0]
 800760a:	079b      	lsls	r3, r3, #30
 800760c:	d413      	bmi.n	8007636 <_printf_i+0x232>
 800760e:	68e0      	ldr	r0, [r4, #12]
 8007610:	9b03      	ldr	r3, [sp, #12]
 8007612:	4298      	cmp	r0, r3
 8007614:	bfb8      	it	lt
 8007616:	4618      	movlt	r0, r3
 8007618:	e7a6      	b.n	8007568 <_printf_i+0x164>
 800761a:	2301      	movs	r3, #1
 800761c:	4632      	mov	r2, r6
 800761e:	4649      	mov	r1, r9
 8007620:	4640      	mov	r0, r8
 8007622:	47d0      	blx	sl
 8007624:	3001      	adds	r0, #1
 8007626:	d09d      	beq.n	8007564 <_printf_i+0x160>
 8007628:	3501      	adds	r5, #1
 800762a:	68e3      	ldr	r3, [r4, #12]
 800762c:	9903      	ldr	r1, [sp, #12]
 800762e:	1a5b      	subs	r3, r3, r1
 8007630:	42ab      	cmp	r3, r5
 8007632:	dcf2      	bgt.n	800761a <_printf_i+0x216>
 8007634:	e7eb      	b.n	800760e <_printf_i+0x20a>
 8007636:	2500      	movs	r5, #0
 8007638:	f104 0619 	add.w	r6, r4, #25
 800763c:	e7f5      	b.n	800762a <_printf_i+0x226>
 800763e:	bf00      	nop
 8007640:	080098ca 	.word	0x080098ca
 8007644:	080098db 	.word	0x080098db

08007648 <std>:
 8007648:	2300      	movs	r3, #0
 800764a:	b510      	push	{r4, lr}
 800764c:	4604      	mov	r4, r0
 800764e:	e9c0 3300 	strd	r3, r3, [r0]
 8007652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007656:	6083      	str	r3, [r0, #8]
 8007658:	8181      	strh	r1, [r0, #12]
 800765a:	6643      	str	r3, [r0, #100]	; 0x64
 800765c:	81c2      	strh	r2, [r0, #14]
 800765e:	6183      	str	r3, [r0, #24]
 8007660:	4619      	mov	r1, r3
 8007662:	2208      	movs	r2, #8
 8007664:	305c      	adds	r0, #92	; 0x5c
 8007666:	f000 f906 	bl	8007876 <memset>
 800766a:	4b0d      	ldr	r3, [pc, #52]	; (80076a0 <std+0x58>)
 800766c:	6263      	str	r3, [r4, #36]	; 0x24
 800766e:	4b0d      	ldr	r3, [pc, #52]	; (80076a4 <std+0x5c>)
 8007670:	62a3      	str	r3, [r4, #40]	; 0x28
 8007672:	4b0d      	ldr	r3, [pc, #52]	; (80076a8 <std+0x60>)
 8007674:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007676:	4b0d      	ldr	r3, [pc, #52]	; (80076ac <std+0x64>)
 8007678:	6323      	str	r3, [r4, #48]	; 0x30
 800767a:	4b0d      	ldr	r3, [pc, #52]	; (80076b0 <std+0x68>)
 800767c:	6224      	str	r4, [r4, #32]
 800767e:	429c      	cmp	r4, r3
 8007680:	d006      	beq.n	8007690 <std+0x48>
 8007682:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007686:	4294      	cmp	r4, r2
 8007688:	d002      	beq.n	8007690 <std+0x48>
 800768a:	33d0      	adds	r3, #208	; 0xd0
 800768c:	429c      	cmp	r4, r3
 800768e:	d105      	bne.n	800769c <std+0x54>
 8007690:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007698:	f000 b9c0 	b.w	8007a1c <__retarget_lock_init_recursive>
 800769c:	bd10      	pop	{r4, pc}
 800769e:	bf00      	nop
 80076a0:	080077f1 	.word	0x080077f1
 80076a4:	08007813 	.word	0x08007813
 80076a8:	0800784b 	.word	0x0800784b
 80076ac:	0800786f 	.word	0x0800786f
 80076b0:	20001c7c 	.word	0x20001c7c

080076b4 <stdio_exit_handler>:
 80076b4:	4a02      	ldr	r2, [pc, #8]	; (80076c0 <stdio_exit_handler+0xc>)
 80076b6:	4903      	ldr	r1, [pc, #12]	; (80076c4 <stdio_exit_handler+0x10>)
 80076b8:	4803      	ldr	r0, [pc, #12]	; (80076c8 <stdio_exit_handler+0x14>)
 80076ba:	f000 b869 	b.w	8007790 <_fwalk_sglue>
 80076be:	bf00      	nop
 80076c0:	20000010 	.word	0x20000010
 80076c4:	080093c1 	.word	0x080093c1
 80076c8:	2000001c 	.word	0x2000001c

080076cc <cleanup_stdio>:
 80076cc:	6841      	ldr	r1, [r0, #4]
 80076ce:	4b0c      	ldr	r3, [pc, #48]	; (8007700 <cleanup_stdio+0x34>)
 80076d0:	4299      	cmp	r1, r3
 80076d2:	b510      	push	{r4, lr}
 80076d4:	4604      	mov	r4, r0
 80076d6:	d001      	beq.n	80076dc <cleanup_stdio+0x10>
 80076d8:	f001 fe72 	bl	80093c0 <_fflush_r>
 80076dc:	68a1      	ldr	r1, [r4, #8]
 80076de:	4b09      	ldr	r3, [pc, #36]	; (8007704 <cleanup_stdio+0x38>)
 80076e0:	4299      	cmp	r1, r3
 80076e2:	d002      	beq.n	80076ea <cleanup_stdio+0x1e>
 80076e4:	4620      	mov	r0, r4
 80076e6:	f001 fe6b 	bl	80093c0 <_fflush_r>
 80076ea:	68e1      	ldr	r1, [r4, #12]
 80076ec:	4b06      	ldr	r3, [pc, #24]	; (8007708 <cleanup_stdio+0x3c>)
 80076ee:	4299      	cmp	r1, r3
 80076f0:	d004      	beq.n	80076fc <cleanup_stdio+0x30>
 80076f2:	4620      	mov	r0, r4
 80076f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076f8:	f001 be62 	b.w	80093c0 <_fflush_r>
 80076fc:	bd10      	pop	{r4, pc}
 80076fe:	bf00      	nop
 8007700:	20001c7c 	.word	0x20001c7c
 8007704:	20001ce4 	.word	0x20001ce4
 8007708:	20001d4c 	.word	0x20001d4c

0800770c <global_stdio_init.part.0>:
 800770c:	b510      	push	{r4, lr}
 800770e:	4b0b      	ldr	r3, [pc, #44]	; (800773c <global_stdio_init.part.0+0x30>)
 8007710:	4c0b      	ldr	r4, [pc, #44]	; (8007740 <global_stdio_init.part.0+0x34>)
 8007712:	4a0c      	ldr	r2, [pc, #48]	; (8007744 <global_stdio_init.part.0+0x38>)
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	4620      	mov	r0, r4
 8007718:	2200      	movs	r2, #0
 800771a:	2104      	movs	r1, #4
 800771c:	f7ff ff94 	bl	8007648 <std>
 8007720:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007724:	2201      	movs	r2, #1
 8007726:	2109      	movs	r1, #9
 8007728:	f7ff ff8e 	bl	8007648 <std>
 800772c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007730:	2202      	movs	r2, #2
 8007732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007736:	2112      	movs	r1, #18
 8007738:	f7ff bf86 	b.w	8007648 <std>
 800773c:	20001db4 	.word	0x20001db4
 8007740:	20001c7c 	.word	0x20001c7c
 8007744:	080076b5 	.word	0x080076b5

08007748 <__sfp_lock_acquire>:
 8007748:	4801      	ldr	r0, [pc, #4]	; (8007750 <__sfp_lock_acquire+0x8>)
 800774a:	f000 b968 	b.w	8007a1e <__retarget_lock_acquire_recursive>
 800774e:	bf00      	nop
 8007750:	20001dbd 	.word	0x20001dbd

08007754 <__sfp_lock_release>:
 8007754:	4801      	ldr	r0, [pc, #4]	; (800775c <__sfp_lock_release+0x8>)
 8007756:	f000 b963 	b.w	8007a20 <__retarget_lock_release_recursive>
 800775a:	bf00      	nop
 800775c:	20001dbd 	.word	0x20001dbd

08007760 <__sinit>:
 8007760:	b510      	push	{r4, lr}
 8007762:	4604      	mov	r4, r0
 8007764:	f7ff fff0 	bl	8007748 <__sfp_lock_acquire>
 8007768:	6a23      	ldr	r3, [r4, #32]
 800776a:	b11b      	cbz	r3, 8007774 <__sinit+0x14>
 800776c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007770:	f7ff bff0 	b.w	8007754 <__sfp_lock_release>
 8007774:	4b04      	ldr	r3, [pc, #16]	; (8007788 <__sinit+0x28>)
 8007776:	6223      	str	r3, [r4, #32]
 8007778:	4b04      	ldr	r3, [pc, #16]	; (800778c <__sinit+0x2c>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1f5      	bne.n	800776c <__sinit+0xc>
 8007780:	f7ff ffc4 	bl	800770c <global_stdio_init.part.0>
 8007784:	e7f2      	b.n	800776c <__sinit+0xc>
 8007786:	bf00      	nop
 8007788:	080076cd 	.word	0x080076cd
 800778c:	20001db4 	.word	0x20001db4

08007790 <_fwalk_sglue>:
 8007790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007794:	4607      	mov	r7, r0
 8007796:	4688      	mov	r8, r1
 8007798:	4614      	mov	r4, r2
 800779a:	2600      	movs	r6, #0
 800779c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077a0:	f1b9 0901 	subs.w	r9, r9, #1
 80077a4:	d505      	bpl.n	80077b2 <_fwalk_sglue+0x22>
 80077a6:	6824      	ldr	r4, [r4, #0]
 80077a8:	2c00      	cmp	r4, #0
 80077aa:	d1f7      	bne.n	800779c <_fwalk_sglue+0xc>
 80077ac:	4630      	mov	r0, r6
 80077ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077b2:	89ab      	ldrh	r3, [r5, #12]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d907      	bls.n	80077c8 <_fwalk_sglue+0x38>
 80077b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077bc:	3301      	adds	r3, #1
 80077be:	d003      	beq.n	80077c8 <_fwalk_sglue+0x38>
 80077c0:	4629      	mov	r1, r5
 80077c2:	4638      	mov	r0, r7
 80077c4:	47c0      	blx	r8
 80077c6:	4306      	orrs	r6, r0
 80077c8:	3568      	adds	r5, #104	; 0x68
 80077ca:	e7e9      	b.n	80077a0 <_fwalk_sglue+0x10>

080077cc <iprintf>:
 80077cc:	b40f      	push	{r0, r1, r2, r3}
 80077ce:	b507      	push	{r0, r1, r2, lr}
 80077d0:	4906      	ldr	r1, [pc, #24]	; (80077ec <iprintf+0x20>)
 80077d2:	ab04      	add	r3, sp, #16
 80077d4:	6808      	ldr	r0, [r1, #0]
 80077d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80077da:	6881      	ldr	r1, [r0, #8]
 80077dc:	9301      	str	r3, [sp, #4]
 80077de:	f001 fc4f 	bl	8009080 <_vfiprintf_r>
 80077e2:	b003      	add	sp, #12
 80077e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80077e8:	b004      	add	sp, #16
 80077ea:	4770      	bx	lr
 80077ec:	20000068 	.word	0x20000068

080077f0 <__sread>:
 80077f0:	b510      	push	{r4, lr}
 80077f2:	460c      	mov	r4, r1
 80077f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077f8:	f000 f8c2 	bl	8007980 <_read_r>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	bfab      	itete	ge
 8007800:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007802:	89a3      	ldrhlt	r3, [r4, #12]
 8007804:	181b      	addge	r3, r3, r0
 8007806:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800780a:	bfac      	ite	ge
 800780c:	6563      	strge	r3, [r4, #84]	; 0x54
 800780e:	81a3      	strhlt	r3, [r4, #12]
 8007810:	bd10      	pop	{r4, pc}

08007812 <__swrite>:
 8007812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007816:	461f      	mov	r7, r3
 8007818:	898b      	ldrh	r3, [r1, #12]
 800781a:	05db      	lsls	r3, r3, #23
 800781c:	4605      	mov	r5, r0
 800781e:	460c      	mov	r4, r1
 8007820:	4616      	mov	r6, r2
 8007822:	d505      	bpl.n	8007830 <__swrite+0x1e>
 8007824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007828:	2302      	movs	r3, #2
 800782a:	2200      	movs	r2, #0
 800782c:	f000 f896 	bl	800795c <_lseek_r>
 8007830:	89a3      	ldrh	r3, [r4, #12]
 8007832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800783a:	81a3      	strh	r3, [r4, #12]
 800783c:	4632      	mov	r2, r6
 800783e:	463b      	mov	r3, r7
 8007840:	4628      	mov	r0, r5
 8007842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007846:	f000 b8ad 	b.w	80079a4 <_write_r>

0800784a <__sseek>:
 800784a:	b510      	push	{r4, lr}
 800784c:	460c      	mov	r4, r1
 800784e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007852:	f000 f883 	bl	800795c <_lseek_r>
 8007856:	1c43      	adds	r3, r0, #1
 8007858:	89a3      	ldrh	r3, [r4, #12]
 800785a:	bf15      	itete	ne
 800785c:	6560      	strne	r0, [r4, #84]	; 0x54
 800785e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007862:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007866:	81a3      	strheq	r3, [r4, #12]
 8007868:	bf18      	it	ne
 800786a:	81a3      	strhne	r3, [r4, #12]
 800786c:	bd10      	pop	{r4, pc}

0800786e <__sclose>:
 800786e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007872:	f000 b80d 	b.w	8007890 <_close_r>

08007876 <memset>:
 8007876:	4402      	add	r2, r0
 8007878:	4603      	mov	r3, r0
 800787a:	4293      	cmp	r3, r2
 800787c:	d100      	bne.n	8007880 <memset+0xa>
 800787e:	4770      	bx	lr
 8007880:	f803 1b01 	strb.w	r1, [r3], #1
 8007884:	e7f9      	b.n	800787a <memset+0x4>
	...

08007888 <_localeconv_r>:
 8007888:	4800      	ldr	r0, [pc, #0]	; (800788c <_localeconv_r+0x4>)
 800788a:	4770      	bx	lr
 800788c:	2000015c 	.word	0x2000015c

08007890 <_close_r>:
 8007890:	b538      	push	{r3, r4, r5, lr}
 8007892:	4d06      	ldr	r5, [pc, #24]	; (80078ac <_close_r+0x1c>)
 8007894:	2300      	movs	r3, #0
 8007896:	4604      	mov	r4, r0
 8007898:	4608      	mov	r0, r1
 800789a:	602b      	str	r3, [r5, #0]
 800789c:	f7f9 fe1f 	bl	80014de <_close>
 80078a0:	1c43      	adds	r3, r0, #1
 80078a2:	d102      	bne.n	80078aa <_close_r+0x1a>
 80078a4:	682b      	ldr	r3, [r5, #0]
 80078a6:	b103      	cbz	r3, 80078aa <_close_r+0x1a>
 80078a8:	6023      	str	r3, [r4, #0]
 80078aa:	bd38      	pop	{r3, r4, r5, pc}
 80078ac:	20001db8 	.word	0x20001db8

080078b0 <_reclaim_reent>:
 80078b0:	4b29      	ldr	r3, [pc, #164]	; (8007958 <_reclaim_reent+0xa8>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4283      	cmp	r3, r0
 80078b6:	b570      	push	{r4, r5, r6, lr}
 80078b8:	4604      	mov	r4, r0
 80078ba:	d04b      	beq.n	8007954 <_reclaim_reent+0xa4>
 80078bc:	69c3      	ldr	r3, [r0, #28]
 80078be:	b143      	cbz	r3, 80078d2 <_reclaim_reent+0x22>
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d144      	bne.n	8007950 <_reclaim_reent+0xa0>
 80078c6:	69e3      	ldr	r3, [r4, #28]
 80078c8:	6819      	ldr	r1, [r3, #0]
 80078ca:	b111      	cbz	r1, 80078d2 <_reclaim_reent+0x22>
 80078cc:	4620      	mov	r0, r4
 80078ce:	f000 ff31 	bl	8008734 <_free_r>
 80078d2:	6961      	ldr	r1, [r4, #20]
 80078d4:	b111      	cbz	r1, 80078dc <_reclaim_reent+0x2c>
 80078d6:	4620      	mov	r0, r4
 80078d8:	f000 ff2c 	bl	8008734 <_free_r>
 80078dc:	69e1      	ldr	r1, [r4, #28]
 80078de:	b111      	cbz	r1, 80078e6 <_reclaim_reent+0x36>
 80078e0:	4620      	mov	r0, r4
 80078e2:	f000 ff27 	bl	8008734 <_free_r>
 80078e6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80078e8:	b111      	cbz	r1, 80078f0 <_reclaim_reent+0x40>
 80078ea:	4620      	mov	r0, r4
 80078ec:	f000 ff22 	bl	8008734 <_free_r>
 80078f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078f2:	b111      	cbz	r1, 80078fa <_reclaim_reent+0x4a>
 80078f4:	4620      	mov	r0, r4
 80078f6:	f000 ff1d 	bl	8008734 <_free_r>
 80078fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80078fc:	b111      	cbz	r1, 8007904 <_reclaim_reent+0x54>
 80078fe:	4620      	mov	r0, r4
 8007900:	f000 ff18 	bl	8008734 <_free_r>
 8007904:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007906:	b111      	cbz	r1, 800790e <_reclaim_reent+0x5e>
 8007908:	4620      	mov	r0, r4
 800790a:	f000 ff13 	bl	8008734 <_free_r>
 800790e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007910:	b111      	cbz	r1, 8007918 <_reclaim_reent+0x68>
 8007912:	4620      	mov	r0, r4
 8007914:	f000 ff0e 	bl	8008734 <_free_r>
 8007918:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800791a:	b111      	cbz	r1, 8007922 <_reclaim_reent+0x72>
 800791c:	4620      	mov	r0, r4
 800791e:	f000 ff09 	bl	8008734 <_free_r>
 8007922:	6a23      	ldr	r3, [r4, #32]
 8007924:	b1b3      	cbz	r3, 8007954 <_reclaim_reent+0xa4>
 8007926:	4620      	mov	r0, r4
 8007928:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800792c:	4718      	bx	r3
 800792e:	5949      	ldr	r1, [r1, r5]
 8007930:	b941      	cbnz	r1, 8007944 <_reclaim_reent+0x94>
 8007932:	3504      	adds	r5, #4
 8007934:	69e3      	ldr	r3, [r4, #28]
 8007936:	2d80      	cmp	r5, #128	; 0x80
 8007938:	68d9      	ldr	r1, [r3, #12]
 800793a:	d1f8      	bne.n	800792e <_reclaim_reent+0x7e>
 800793c:	4620      	mov	r0, r4
 800793e:	f000 fef9 	bl	8008734 <_free_r>
 8007942:	e7c0      	b.n	80078c6 <_reclaim_reent+0x16>
 8007944:	680e      	ldr	r6, [r1, #0]
 8007946:	4620      	mov	r0, r4
 8007948:	f000 fef4 	bl	8008734 <_free_r>
 800794c:	4631      	mov	r1, r6
 800794e:	e7ef      	b.n	8007930 <_reclaim_reent+0x80>
 8007950:	2500      	movs	r5, #0
 8007952:	e7ef      	b.n	8007934 <_reclaim_reent+0x84>
 8007954:	bd70      	pop	{r4, r5, r6, pc}
 8007956:	bf00      	nop
 8007958:	20000068 	.word	0x20000068

0800795c <_lseek_r>:
 800795c:	b538      	push	{r3, r4, r5, lr}
 800795e:	4d07      	ldr	r5, [pc, #28]	; (800797c <_lseek_r+0x20>)
 8007960:	4604      	mov	r4, r0
 8007962:	4608      	mov	r0, r1
 8007964:	4611      	mov	r1, r2
 8007966:	2200      	movs	r2, #0
 8007968:	602a      	str	r2, [r5, #0]
 800796a:	461a      	mov	r2, r3
 800796c:	f7f9 fdde 	bl	800152c <_lseek>
 8007970:	1c43      	adds	r3, r0, #1
 8007972:	d102      	bne.n	800797a <_lseek_r+0x1e>
 8007974:	682b      	ldr	r3, [r5, #0]
 8007976:	b103      	cbz	r3, 800797a <_lseek_r+0x1e>
 8007978:	6023      	str	r3, [r4, #0]
 800797a:	bd38      	pop	{r3, r4, r5, pc}
 800797c:	20001db8 	.word	0x20001db8

08007980 <_read_r>:
 8007980:	b538      	push	{r3, r4, r5, lr}
 8007982:	4d07      	ldr	r5, [pc, #28]	; (80079a0 <_read_r+0x20>)
 8007984:	4604      	mov	r4, r0
 8007986:	4608      	mov	r0, r1
 8007988:	4611      	mov	r1, r2
 800798a:	2200      	movs	r2, #0
 800798c:	602a      	str	r2, [r5, #0]
 800798e:	461a      	mov	r2, r3
 8007990:	f7f9 fd88 	bl	80014a4 <_read>
 8007994:	1c43      	adds	r3, r0, #1
 8007996:	d102      	bne.n	800799e <_read_r+0x1e>
 8007998:	682b      	ldr	r3, [r5, #0]
 800799a:	b103      	cbz	r3, 800799e <_read_r+0x1e>
 800799c:	6023      	str	r3, [r4, #0]
 800799e:	bd38      	pop	{r3, r4, r5, pc}
 80079a0:	20001db8 	.word	0x20001db8

080079a4 <_write_r>:
 80079a4:	b538      	push	{r3, r4, r5, lr}
 80079a6:	4d07      	ldr	r5, [pc, #28]	; (80079c4 <_write_r+0x20>)
 80079a8:	4604      	mov	r4, r0
 80079aa:	4608      	mov	r0, r1
 80079ac:	4611      	mov	r1, r2
 80079ae:	2200      	movs	r2, #0
 80079b0:	602a      	str	r2, [r5, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	f7f9 fa9d 	bl	8000ef2 <_write>
 80079b8:	1c43      	adds	r3, r0, #1
 80079ba:	d102      	bne.n	80079c2 <_write_r+0x1e>
 80079bc:	682b      	ldr	r3, [r5, #0]
 80079be:	b103      	cbz	r3, 80079c2 <_write_r+0x1e>
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	bd38      	pop	{r3, r4, r5, pc}
 80079c4:	20001db8 	.word	0x20001db8

080079c8 <__errno>:
 80079c8:	4b01      	ldr	r3, [pc, #4]	; (80079d0 <__errno+0x8>)
 80079ca:	6818      	ldr	r0, [r3, #0]
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	20000068 	.word	0x20000068

080079d4 <__libc_init_array>:
 80079d4:	b570      	push	{r4, r5, r6, lr}
 80079d6:	4d0d      	ldr	r5, [pc, #52]	; (8007a0c <__libc_init_array+0x38>)
 80079d8:	4c0d      	ldr	r4, [pc, #52]	; (8007a10 <__libc_init_array+0x3c>)
 80079da:	1b64      	subs	r4, r4, r5
 80079dc:	10a4      	asrs	r4, r4, #2
 80079de:	2600      	movs	r6, #0
 80079e0:	42a6      	cmp	r6, r4
 80079e2:	d109      	bne.n	80079f8 <__libc_init_array+0x24>
 80079e4:	4d0b      	ldr	r5, [pc, #44]	; (8007a14 <__libc_init_array+0x40>)
 80079e6:	4c0c      	ldr	r4, [pc, #48]	; (8007a18 <__libc_init_array+0x44>)
 80079e8:	f001 feee 	bl	80097c8 <_init>
 80079ec:	1b64      	subs	r4, r4, r5
 80079ee:	10a4      	asrs	r4, r4, #2
 80079f0:	2600      	movs	r6, #0
 80079f2:	42a6      	cmp	r6, r4
 80079f4:	d105      	bne.n	8007a02 <__libc_init_array+0x2e>
 80079f6:	bd70      	pop	{r4, r5, r6, pc}
 80079f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80079fc:	4798      	blx	r3
 80079fe:	3601      	adds	r6, #1
 8007a00:	e7ee      	b.n	80079e0 <__libc_init_array+0xc>
 8007a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a06:	4798      	blx	r3
 8007a08:	3601      	adds	r6, #1
 8007a0a:	e7f2      	b.n	80079f2 <__libc_init_array+0x1e>
 8007a0c:	08009c34 	.word	0x08009c34
 8007a10:	08009c34 	.word	0x08009c34
 8007a14:	08009c34 	.word	0x08009c34
 8007a18:	08009c38 	.word	0x08009c38

08007a1c <__retarget_lock_init_recursive>:
 8007a1c:	4770      	bx	lr

08007a1e <__retarget_lock_acquire_recursive>:
 8007a1e:	4770      	bx	lr

08007a20 <__retarget_lock_release_recursive>:
 8007a20:	4770      	bx	lr

08007a22 <memcpy>:
 8007a22:	440a      	add	r2, r1
 8007a24:	4291      	cmp	r1, r2
 8007a26:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a2a:	d100      	bne.n	8007a2e <memcpy+0xc>
 8007a2c:	4770      	bx	lr
 8007a2e:	b510      	push	{r4, lr}
 8007a30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a38:	4291      	cmp	r1, r2
 8007a3a:	d1f9      	bne.n	8007a30 <memcpy+0xe>
 8007a3c:	bd10      	pop	{r4, pc}

08007a3e <quorem>:
 8007a3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a42:	6903      	ldr	r3, [r0, #16]
 8007a44:	690c      	ldr	r4, [r1, #16]
 8007a46:	42a3      	cmp	r3, r4
 8007a48:	4607      	mov	r7, r0
 8007a4a:	db7e      	blt.n	8007b4a <quorem+0x10c>
 8007a4c:	3c01      	subs	r4, #1
 8007a4e:	f101 0814 	add.w	r8, r1, #20
 8007a52:	f100 0514 	add.w	r5, r0, #20
 8007a56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a5a:	9301      	str	r3, [sp, #4]
 8007a5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a64:	3301      	adds	r3, #1
 8007a66:	429a      	cmp	r2, r3
 8007a68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a70:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a74:	d331      	bcc.n	8007ada <quorem+0x9c>
 8007a76:	f04f 0e00 	mov.w	lr, #0
 8007a7a:	4640      	mov	r0, r8
 8007a7c:	46ac      	mov	ip, r5
 8007a7e:	46f2      	mov	sl, lr
 8007a80:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a84:	b293      	uxth	r3, r2
 8007a86:	fb06 e303 	mla	r3, r6, r3, lr
 8007a8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a8e:	0c1a      	lsrs	r2, r3, #16
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	ebaa 0303 	sub.w	r3, sl, r3
 8007a96:	f8dc a000 	ldr.w	sl, [ip]
 8007a9a:	fa13 f38a 	uxtah	r3, r3, sl
 8007a9e:	fb06 220e 	mla	r2, r6, lr, r2
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	9b00      	ldr	r3, [sp, #0]
 8007aa6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007aaa:	b292      	uxth	r2, r2
 8007aac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007ab0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ab4:	f8bd 3000 	ldrh.w	r3, [sp]
 8007ab8:	4581      	cmp	r9, r0
 8007aba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007abe:	f84c 3b04 	str.w	r3, [ip], #4
 8007ac2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ac6:	d2db      	bcs.n	8007a80 <quorem+0x42>
 8007ac8:	f855 300b 	ldr.w	r3, [r5, fp]
 8007acc:	b92b      	cbnz	r3, 8007ada <quorem+0x9c>
 8007ace:	9b01      	ldr	r3, [sp, #4]
 8007ad0:	3b04      	subs	r3, #4
 8007ad2:	429d      	cmp	r5, r3
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	d32c      	bcc.n	8007b32 <quorem+0xf4>
 8007ad8:	613c      	str	r4, [r7, #16]
 8007ada:	4638      	mov	r0, r7
 8007adc:	f001 f9a6 	bl	8008e2c <__mcmp>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	db22      	blt.n	8007b2a <quorem+0xec>
 8007ae4:	3601      	adds	r6, #1
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	2000      	movs	r0, #0
 8007aea:	f858 2b04 	ldr.w	r2, [r8], #4
 8007aee:	f8d1 c000 	ldr.w	ip, [r1]
 8007af2:	b293      	uxth	r3, r2
 8007af4:	1ac3      	subs	r3, r0, r3
 8007af6:	0c12      	lsrs	r2, r2, #16
 8007af8:	fa13 f38c 	uxtah	r3, r3, ip
 8007afc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007b00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b0a:	45c1      	cmp	r9, r8
 8007b0c:	f841 3b04 	str.w	r3, [r1], #4
 8007b10:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007b14:	d2e9      	bcs.n	8007aea <quorem+0xac>
 8007b16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b1e:	b922      	cbnz	r2, 8007b2a <quorem+0xec>
 8007b20:	3b04      	subs	r3, #4
 8007b22:	429d      	cmp	r5, r3
 8007b24:	461a      	mov	r2, r3
 8007b26:	d30a      	bcc.n	8007b3e <quorem+0x100>
 8007b28:	613c      	str	r4, [r7, #16]
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	b003      	add	sp, #12
 8007b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b32:	6812      	ldr	r2, [r2, #0]
 8007b34:	3b04      	subs	r3, #4
 8007b36:	2a00      	cmp	r2, #0
 8007b38:	d1ce      	bne.n	8007ad8 <quorem+0x9a>
 8007b3a:	3c01      	subs	r4, #1
 8007b3c:	e7c9      	b.n	8007ad2 <quorem+0x94>
 8007b3e:	6812      	ldr	r2, [r2, #0]
 8007b40:	3b04      	subs	r3, #4
 8007b42:	2a00      	cmp	r2, #0
 8007b44:	d1f0      	bne.n	8007b28 <quorem+0xea>
 8007b46:	3c01      	subs	r4, #1
 8007b48:	e7eb      	b.n	8007b22 <quorem+0xe4>
 8007b4a:	2000      	movs	r0, #0
 8007b4c:	e7ee      	b.n	8007b2c <quorem+0xee>
	...

08007b50 <_dtoa_r>:
 8007b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b54:	ed2d 8b04 	vpush	{d8-d9}
 8007b58:	69c5      	ldr	r5, [r0, #28]
 8007b5a:	b093      	sub	sp, #76	; 0x4c
 8007b5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007b60:	ec57 6b10 	vmov	r6, r7, d0
 8007b64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007b68:	9107      	str	r1, [sp, #28]
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	920a      	str	r2, [sp, #40]	; 0x28
 8007b6e:	930d      	str	r3, [sp, #52]	; 0x34
 8007b70:	b975      	cbnz	r5, 8007b90 <_dtoa_r+0x40>
 8007b72:	2010      	movs	r0, #16
 8007b74:	f000 fe2a 	bl	80087cc <malloc>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	61e0      	str	r0, [r4, #28]
 8007b7c:	b920      	cbnz	r0, 8007b88 <_dtoa_r+0x38>
 8007b7e:	4bae      	ldr	r3, [pc, #696]	; (8007e38 <_dtoa_r+0x2e8>)
 8007b80:	21ef      	movs	r1, #239	; 0xef
 8007b82:	48ae      	ldr	r0, [pc, #696]	; (8007e3c <_dtoa_r+0x2ec>)
 8007b84:	f001 fcea 	bl	800955c <__assert_func>
 8007b88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b8c:	6005      	str	r5, [r0, #0]
 8007b8e:	60c5      	str	r5, [r0, #12]
 8007b90:	69e3      	ldr	r3, [r4, #28]
 8007b92:	6819      	ldr	r1, [r3, #0]
 8007b94:	b151      	cbz	r1, 8007bac <_dtoa_r+0x5c>
 8007b96:	685a      	ldr	r2, [r3, #4]
 8007b98:	604a      	str	r2, [r1, #4]
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	4093      	lsls	r3, r2
 8007b9e:	608b      	str	r3, [r1, #8]
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f000 ff07 	bl	80089b4 <_Bfree>
 8007ba6:	69e3      	ldr	r3, [r4, #28]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	601a      	str	r2, [r3, #0]
 8007bac:	1e3b      	subs	r3, r7, #0
 8007bae:	bfbb      	ittet	lt
 8007bb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007bb4:	9303      	strlt	r3, [sp, #12]
 8007bb6:	2300      	movge	r3, #0
 8007bb8:	2201      	movlt	r2, #1
 8007bba:	bfac      	ite	ge
 8007bbc:	f8c8 3000 	strge.w	r3, [r8]
 8007bc0:	f8c8 2000 	strlt.w	r2, [r8]
 8007bc4:	4b9e      	ldr	r3, [pc, #632]	; (8007e40 <_dtoa_r+0x2f0>)
 8007bc6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007bca:	ea33 0308 	bics.w	r3, r3, r8
 8007bce:	d11b      	bne.n	8007c08 <_dtoa_r+0xb8>
 8007bd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007bd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8007bd6:	6013      	str	r3, [r2, #0]
 8007bd8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007bdc:	4333      	orrs	r3, r6
 8007bde:	f000 8593 	beq.w	8008708 <_dtoa_r+0xbb8>
 8007be2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007be4:	b963      	cbnz	r3, 8007c00 <_dtoa_r+0xb0>
 8007be6:	4b97      	ldr	r3, [pc, #604]	; (8007e44 <_dtoa_r+0x2f4>)
 8007be8:	e027      	b.n	8007c3a <_dtoa_r+0xea>
 8007bea:	4b97      	ldr	r3, [pc, #604]	; (8007e48 <_dtoa_r+0x2f8>)
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	3308      	adds	r3, #8
 8007bf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007bf2:	6013      	str	r3, [r2, #0]
 8007bf4:	9800      	ldr	r0, [sp, #0]
 8007bf6:	b013      	add	sp, #76	; 0x4c
 8007bf8:	ecbd 8b04 	vpop	{d8-d9}
 8007bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c00:	4b90      	ldr	r3, [pc, #576]	; (8007e44 <_dtoa_r+0x2f4>)
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	3303      	adds	r3, #3
 8007c06:	e7f3      	b.n	8007bf0 <_dtoa_r+0xa0>
 8007c08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	ec51 0b17 	vmov	r0, r1, d7
 8007c12:	eeb0 8a47 	vmov.f32	s16, s14
 8007c16:	eef0 8a67 	vmov.f32	s17, s15
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	f7f8 ff54 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c20:	4681      	mov	r9, r0
 8007c22:	b160      	cbz	r0, 8007c3e <_dtoa_r+0xee>
 8007c24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c26:	2301      	movs	r3, #1
 8007c28:	6013      	str	r3, [r2, #0]
 8007c2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f000 8568 	beq.w	8008702 <_dtoa_r+0xbb2>
 8007c32:	4b86      	ldr	r3, [pc, #536]	; (8007e4c <_dtoa_r+0x2fc>)
 8007c34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007c36:	6013      	str	r3, [r2, #0]
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	e7da      	b.n	8007bf4 <_dtoa_r+0xa4>
 8007c3e:	aa10      	add	r2, sp, #64	; 0x40
 8007c40:	a911      	add	r1, sp, #68	; 0x44
 8007c42:	4620      	mov	r0, r4
 8007c44:	eeb0 0a48 	vmov.f32	s0, s16
 8007c48:	eef0 0a68 	vmov.f32	s1, s17
 8007c4c:	f001 f994 	bl	8008f78 <__d2b>
 8007c50:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007c54:	4682      	mov	sl, r0
 8007c56:	2d00      	cmp	r5, #0
 8007c58:	d07f      	beq.n	8007d5a <_dtoa_r+0x20a>
 8007c5a:	ee18 3a90 	vmov	r3, s17
 8007c5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c62:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007c66:	ec51 0b18 	vmov	r0, r1, d8
 8007c6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007c6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c72:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007c76:	4619      	mov	r1, r3
 8007c78:	2200      	movs	r2, #0
 8007c7a:	4b75      	ldr	r3, [pc, #468]	; (8007e50 <_dtoa_r+0x300>)
 8007c7c:	f7f8 fb04 	bl	8000288 <__aeabi_dsub>
 8007c80:	a367      	add	r3, pc, #412	; (adr r3, 8007e20 <_dtoa_r+0x2d0>)
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	f7f8 fcb7 	bl	80005f8 <__aeabi_dmul>
 8007c8a:	a367      	add	r3, pc, #412	; (adr r3, 8007e28 <_dtoa_r+0x2d8>)
 8007c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c90:	f7f8 fafc 	bl	800028c <__adddf3>
 8007c94:	4606      	mov	r6, r0
 8007c96:	4628      	mov	r0, r5
 8007c98:	460f      	mov	r7, r1
 8007c9a:	f7f8 fc43 	bl	8000524 <__aeabi_i2d>
 8007c9e:	a364      	add	r3, pc, #400	; (adr r3, 8007e30 <_dtoa_r+0x2e0>)
 8007ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca4:	f7f8 fca8 	bl	80005f8 <__aeabi_dmul>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	4630      	mov	r0, r6
 8007cae:	4639      	mov	r1, r7
 8007cb0:	f7f8 faec 	bl	800028c <__adddf3>
 8007cb4:	4606      	mov	r6, r0
 8007cb6:	460f      	mov	r7, r1
 8007cb8:	f7f8 ff4e 	bl	8000b58 <__aeabi_d2iz>
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	4683      	mov	fp, r0
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	4639      	mov	r1, r7
 8007cc6:	f7f8 ff09 	bl	8000adc <__aeabi_dcmplt>
 8007cca:	b148      	cbz	r0, 8007ce0 <_dtoa_r+0x190>
 8007ccc:	4658      	mov	r0, fp
 8007cce:	f7f8 fc29 	bl	8000524 <__aeabi_i2d>
 8007cd2:	4632      	mov	r2, r6
 8007cd4:	463b      	mov	r3, r7
 8007cd6:	f7f8 fef7 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cda:	b908      	cbnz	r0, 8007ce0 <_dtoa_r+0x190>
 8007cdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ce0:	f1bb 0f16 	cmp.w	fp, #22
 8007ce4:	d857      	bhi.n	8007d96 <_dtoa_r+0x246>
 8007ce6:	4b5b      	ldr	r3, [pc, #364]	; (8007e54 <_dtoa_r+0x304>)
 8007ce8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf0:	ec51 0b18 	vmov	r0, r1, d8
 8007cf4:	f7f8 fef2 	bl	8000adc <__aeabi_dcmplt>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d04e      	beq.n	8007d9a <_dtoa_r+0x24a>
 8007cfc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007d00:	2300      	movs	r3, #0
 8007d02:	930c      	str	r3, [sp, #48]	; 0x30
 8007d04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d06:	1b5b      	subs	r3, r3, r5
 8007d08:	1e5a      	subs	r2, r3, #1
 8007d0a:	bf45      	ittet	mi
 8007d0c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007d10:	9305      	strmi	r3, [sp, #20]
 8007d12:	2300      	movpl	r3, #0
 8007d14:	2300      	movmi	r3, #0
 8007d16:	9206      	str	r2, [sp, #24]
 8007d18:	bf54      	ite	pl
 8007d1a:	9305      	strpl	r3, [sp, #20]
 8007d1c:	9306      	strmi	r3, [sp, #24]
 8007d1e:	f1bb 0f00 	cmp.w	fp, #0
 8007d22:	db3c      	blt.n	8007d9e <_dtoa_r+0x24e>
 8007d24:	9b06      	ldr	r3, [sp, #24]
 8007d26:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007d2a:	445b      	add	r3, fp
 8007d2c:	9306      	str	r3, [sp, #24]
 8007d2e:	2300      	movs	r3, #0
 8007d30:	9308      	str	r3, [sp, #32]
 8007d32:	9b07      	ldr	r3, [sp, #28]
 8007d34:	2b09      	cmp	r3, #9
 8007d36:	d868      	bhi.n	8007e0a <_dtoa_r+0x2ba>
 8007d38:	2b05      	cmp	r3, #5
 8007d3a:	bfc4      	itt	gt
 8007d3c:	3b04      	subgt	r3, #4
 8007d3e:	9307      	strgt	r3, [sp, #28]
 8007d40:	9b07      	ldr	r3, [sp, #28]
 8007d42:	f1a3 0302 	sub.w	r3, r3, #2
 8007d46:	bfcc      	ite	gt
 8007d48:	2500      	movgt	r5, #0
 8007d4a:	2501      	movle	r5, #1
 8007d4c:	2b03      	cmp	r3, #3
 8007d4e:	f200 8085 	bhi.w	8007e5c <_dtoa_r+0x30c>
 8007d52:	e8df f003 	tbb	[pc, r3]
 8007d56:	3b2e      	.short	0x3b2e
 8007d58:	5839      	.short	0x5839
 8007d5a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007d5e:	441d      	add	r5, r3
 8007d60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007d64:	2b20      	cmp	r3, #32
 8007d66:	bfc1      	itttt	gt
 8007d68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d6c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007d70:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007d74:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007d78:	bfd6      	itet	le
 8007d7a:	f1c3 0320 	rsble	r3, r3, #32
 8007d7e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007d82:	fa06 f003 	lslle.w	r0, r6, r3
 8007d86:	f7f8 fbbd 	bl	8000504 <__aeabi_ui2d>
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007d90:	3d01      	subs	r5, #1
 8007d92:	920e      	str	r2, [sp, #56]	; 0x38
 8007d94:	e76f      	b.n	8007c76 <_dtoa_r+0x126>
 8007d96:	2301      	movs	r3, #1
 8007d98:	e7b3      	b.n	8007d02 <_dtoa_r+0x1b2>
 8007d9a:	900c      	str	r0, [sp, #48]	; 0x30
 8007d9c:	e7b2      	b.n	8007d04 <_dtoa_r+0x1b4>
 8007d9e:	9b05      	ldr	r3, [sp, #20]
 8007da0:	eba3 030b 	sub.w	r3, r3, fp
 8007da4:	9305      	str	r3, [sp, #20]
 8007da6:	f1cb 0300 	rsb	r3, fp, #0
 8007daa:	9308      	str	r3, [sp, #32]
 8007dac:	2300      	movs	r3, #0
 8007dae:	930b      	str	r3, [sp, #44]	; 0x2c
 8007db0:	e7bf      	b.n	8007d32 <_dtoa_r+0x1e2>
 8007db2:	2300      	movs	r3, #0
 8007db4:	9309      	str	r3, [sp, #36]	; 0x24
 8007db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	dc52      	bgt.n	8007e62 <_dtoa_r+0x312>
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	9301      	str	r3, [sp, #4]
 8007dc0:	9304      	str	r3, [sp, #16]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	920a      	str	r2, [sp, #40]	; 0x28
 8007dc6:	e00b      	b.n	8007de0 <_dtoa_r+0x290>
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e7f3      	b.n	8007db4 <_dtoa_r+0x264>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	9309      	str	r3, [sp, #36]	; 0x24
 8007dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dd2:	445b      	add	r3, fp
 8007dd4:	9301      	str	r3, [sp, #4]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	9304      	str	r3, [sp, #16]
 8007ddc:	bfb8      	it	lt
 8007dde:	2301      	movlt	r3, #1
 8007de0:	69e0      	ldr	r0, [r4, #28]
 8007de2:	2100      	movs	r1, #0
 8007de4:	2204      	movs	r2, #4
 8007de6:	f102 0614 	add.w	r6, r2, #20
 8007dea:	429e      	cmp	r6, r3
 8007dec:	d93d      	bls.n	8007e6a <_dtoa_r+0x31a>
 8007dee:	6041      	str	r1, [r0, #4]
 8007df0:	4620      	mov	r0, r4
 8007df2:	f000 fd9f 	bl	8008934 <_Balloc>
 8007df6:	9000      	str	r0, [sp, #0]
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	d139      	bne.n	8007e70 <_dtoa_r+0x320>
 8007dfc:	4b16      	ldr	r3, [pc, #88]	; (8007e58 <_dtoa_r+0x308>)
 8007dfe:	4602      	mov	r2, r0
 8007e00:	f240 11af 	movw	r1, #431	; 0x1af
 8007e04:	e6bd      	b.n	8007b82 <_dtoa_r+0x32>
 8007e06:	2301      	movs	r3, #1
 8007e08:	e7e1      	b.n	8007dce <_dtoa_r+0x27e>
 8007e0a:	2501      	movs	r5, #1
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	9307      	str	r3, [sp, #28]
 8007e10:	9509      	str	r5, [sp, #36]	; 0x24
 8007e12:	f04f 33ff 	mov.w	r3, #4294967295
 8007e16:	9301      	str	r3, [sp, #4]
 8007e18:	9304      	str	r3, [sp, #16]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	2312      	movs	r3, #18
 8007e1e:	e7d1      	b.n	8007dc4 <_dtoa_r+0x274>
 8007e20:	636f4361 	.word	0x636f4361
 8007e24:	3fd287a7 	.word	0x3fd287a7
 8007e28:	8b60c8b3 	.word	0x8b60c8b3
 8007e2c:	3fc68a28 	.word	0x3fc68a28
 8007e30:	509f79fb 	.word	0x509f79fb
 8007e34:	3fd34413 	.word	0x3fd34413
 8007e38:	080098f9 	.word	0x080098f9
 8007e3c:	08009910 	.word	0x08009910
 8007e40:	7ff00000 	.word	0x7ff00000
 8007e44:	080098f5 	.word	0x080098f5
 8007e48:	080098ec 	.word	0x080098ec
 8007e4c:	080098c9 	.word	0x080098c9
 8007e50:	3ff80000 	.word	0x3ff80000
 8007e54:	08009a00 	.word	0x08009a00
 8007e58:	08009968 	.word	0x08009968
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e60:	e7d7      	b.n	8007e12 <_dtoa_r+0x2c2>
 8007e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e64:	9301      	str	r3, [sp, #4]
 8007e66:	9304      	str	r3, [sp, #16]
 8007e68:	e7ba      	b.n	8007de0 <_dtoa_r+0x290>
 8007e6a:	3101      	adds	r1, #1
 8007e6c:	0052      	lsls	r2, r2, #1
 8007e6e:	e7ba      	b.n	8007de6 <_dtoa_r+0x296>
 8007e70:	69e3      	ldr	r3, [r4, #28]
 8007e72:	9a00      	ldr	r2, [sp, #0]
 8007e74:	601a      	str	r2, [r3, #0]
 8007e76:	9b04      	ldr	r3, [sp, #16]
 8007e78:	2b0e      	cmp	r3, #14
 8007e7a:	f200 80a8 	bhi.w	8007fce <_dtoa_r+0x47e>
 8007e7e:	2d00      	cmp	r5, #0
 8007e80:	f000 80a5 	beq.w	8007fce <_dtoa_r+0x47e>
 8007e84:	f1bb 0f00 	cmp.w	fp, #0
 8007e88:	dd38      	ble.n	8007efc <_dtoa_r+0x3ac>
 8007e8a:	4bc0      	ldr	r3, [pc, #768]	; (800818c <_dtoa_r+0x63c>)
 8007e8c:	f00b 020f 	and.w	r2, fp, #15
 8007e90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007e98:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007e9c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007ea0:	d019      	beq.n	8007ed6 <_dtoa_r+0x386>
 8007ea2:	4bbb      	ldr	r3, [pc, #748]	; (8008190 <_dtoa_r+0x640>)
 8007ea4:	ec51 0b18 	vmov	r0, r1, d8
 8007ea8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007eac:	f7f8 fcce 	bl	800084c <__aeabi_ddiv>
 8007eb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eb4:	f008 080f 	and.w	r8, r8, #15
 8007eb8:	2503      	movs	r5, #3
 8007eba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008190 <_dtoa_r+0x640>
 8007ebe:	f1b8 0f00 	cmp.w	r8, #0
 8007ec2:	d10a      	bne.n	8007eda <_dtoa_r+0x38a>
 8007ec4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ec8:	4632      	mov	r2, r6
 8007eca:	463b      	mov	r3, r7
 8007ecc:	f7f8 fcbe 	bl	800084c <__aeabi_ddiv>
 8007ed0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ed4:	e02b      	b.n	8007f2e <_dtoa_r+0x3de>
 8007ed6:	2502      	movs	r5, #2
 8007ed8:	e7ef      	b.n	8007eba <_dtoa_r+0x36a>
 8007eda:	f018 0f01 	tst.w	r8, #1
 8007ede:	d008      	beq.n	8007ef2 <_dtoa_r+0x3a2>
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	4639      	mov	r1, r7
 8007ee4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007ee8:	f7f8 fb86 	bl	80005f8 <__aeabi_dmul>
 8007eec:	3501      	adds	r5, #1
 8007eee:	4606      	mov	r6, r0
 8007ef0:	460f      	mov	r7, r1
 8007ef2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007ef6:	f109 0908 	add.w	r9, r9, #8
 8007efa:	e7e0      	b.n	8007ebe <_dtoa_r+0x36e>
 8007efc:	f000 809f 	beq.w	800803e <_dtoa_r+0x4ee>
 8007f00:	f1cb 0600 	rsb	r6, fp, #0
 8007f04:	4ba1      	ldr	r3, [pc, #644]	; (800818c <_dtoa_r+0x63c>)
 8007f06:	4fa2      	ldr	r7, [pc, #648]	; (8008190 <_dtoa_r+0x640>)
 8007f08:	f006 020f 	and.w	r2, r6, #15
 8007f0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f14:	ec51 0b18 	vmov	r0, r1, d8
 8007f18:	f7f8 fb6e 	bl	80005f8 <__aeabi_dmul>
 8007f1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f20:	1136      	asrs	r6, r6, #4
 8007f22:	2300      	movs	r3, #0
 8007f24:	2502      	movs	r5, #2
 8007f26:	2e00      	cmp	r6, #0
 8007f28:	d17e      	bne.n	8008028 <_dtoa_r+0x4d8>
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1d0      	bne.n	8007ed0 <_dtoa_r+0x380>
 8007f2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f30:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 8084 	beq.w	8008042 <_dtoa_r+0x4f2>
 8007f3a:	4b96      	ldr	r3, [pc, #600]	; (8008194 <_dtoa_r+0x644>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	4640      	mov	r0, r8
 8007f40:	4649      	mov	r1, r9
 8007f42:	f7f8 fdcb 	bl	8000adc <__aeabi_dcmplt>
 8007f46:	2800      	cmp	r0, #0
 8007f48:	d07b      	beq.n	8008042 <_dtoa_r+0x4f2>
 8007f4a:	9b04      	ldr	r3, [sp, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d078      	beq.n	8008042 <_dtoa_r+0x4f2>
 8007f50:	9b01      	ldr	r3, [sp, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	dd39      	ble.n	8007fca <_dtoa_r+0x47a>
 8007f56:	4b90      	ldr	r3, [pc, #576]	; (8008198 <_dtoa_r+0x648>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	4640      	mov	r0, r8
 8007f5c:	4649      	mov	r1, r9
 8007f5e:	f7f8 fb4b 	bl	80005f8 <__aeabi_dmul>
 8007f62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f66:	9e01      	ldr	r6, [sp, #4]
 8007f68:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007f6c:	3501      	adds	r5, #1
 8007f6e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007f72:	4628      	mov	r0, r5
 8007f74:	f7f8 fad6 	bl	8000524 <__aeabi_i2d>
 8007f78:	4642      	mov	r2, r8
 8007f7a:	464b      	mov	r3, r9
 8007f7c:	f7f8 fb3c 	bl	80005f8 <__aeabi_dmul>
 8007f80:	4b86      	ldr	r3, [pc, #536]	; (800819c <_dtoa_r+0x64c>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	f7f8 f982 	bl	800028c <__adddf3>
 8007f88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007f8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f90:	9303      	str	r3, [sp, #12]
 8007f92:	2e00      	cmp	r6, #0
 8007f94:	d158      	bne.n	8008048 <_dtoa_r+0x4f8>
 8007f96:	4b82      	ldr	r3, [pc, #520]	; (80081a0 <_dtoa_r+0x650>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	4640      	mov	r0, r8
 8007f9c:	4649      	mov	r1, r9
 8007f9e:	f7f8 f973 	bl	8000288 <__aeabi_dsub>
 8007fa2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fa6:	4680      	mov	r8, r0
 8007fa8:	4689      	mov	r9, r1
 8007faa:	f7f8 fdb5 	bl	8000b18 <__aeabi_dcmpgt>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	f040 8296 	bne.w	80084e0 <_dtoa_r+0x990>
 8007fb4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007fb8:	4640      	mov	r0, r8
 8007fba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007fbe:	4649      	mov	r1, r9
 8007fc0:	f7f8 fd8c 	bl	8000adc <__aeabi_dcmplt>
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	f040 8289 	bne.w	80084dc <_dtoa_r+0x98c>
 8007fca:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007fce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f2c0 814e 	blt.w	8008272 <_dtoa_r+0x722>
 8007fd6:	f1bb 0f0e 	cmp.w	fp, #14
 8007fda:	f300 814a 	bgt.w	8008272 <_dtoa_r+0x722>
 8007fde:	4b6b      	ldr	r3, [pc, #428]	; (800818c <_dtoa_r+0x63c>)
 8007fe0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007fe4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f280 80dc 	bge.w	80081a8 <_dtoa_r+0x658>
 8007ff0:	9b04      	ldr	r3, [sp, #16]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f300 80d8 	bgt.w	80081a8 <_dtoa_r+0x658>
 8007ff8:	f040 826f 	bne.w	80084da <_dtoa_r+0x98a>
 8007ffc:	4b68      	ldr	r3, [pc, #416]	; (80081a0 <_dtoa_r+0x650>)
 8007ffe:	2200      	movs	r2, #0
 8008000:	4640      	mov	r0, r8
 8008002:	4649      	mov	r1, r9
 8008004:	f7f8 faf8 	bl	80005f8 <__aeabi_dmul>
 8008008:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800800c:	f7f8 fd7a 	bl	8000b04 <__aeabi_dcmpge>
 8008010:	9e04      	ldr	r6, [sp, #16]
 8008012:	4637      	mov	r7, r6
 8008014:	2800      	cmp	r0, #0
 8008016:	f040 8245 	bne.w	80084a4 <_dtoa_r+0x954>
 800801a:	9d00      	ldr	r5, [sp, #0]
 800801c:	2331      	movs	r3, #49	; 0x31
 800801e:	f805 3b01 	strb.w	r3, [r5], #1
 8008022:	f10b 0b01 	add.w	fp, fp, #1
 8008026:	e241      	b.n	80084ac <_dtoa_r+0x95c>
 8008028:	07f2      	lsls	r2, r6, #31
 800802a:	d505      	bpl.n	8008038 <_dtoa_r+0x4e8>
 800802c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008030:	f7f8 fae2 	bl	80005f8 <__aeabi_dmul>
 8008034:	3501      	adds	r5, #1
 8008036:	2301      	movs	r3, #1
 8008038:	1076      	asrs	r6, r6, #1
 800803a:	3708      	adds	r7, #8
 800803c:	e773      	b.n	8007f26 <_dtoa_r+0x3d6>
 800803e:	2502      	movs	r5, #2
 8008040:	e775      	b.n	8007f2e <_dtoa_r+0x3de>
 8008042:	9e04      	ldr	r6, [sp, #16]
 8008044:	465f      	mov	r7, fp
 8008046:	e792      	b.n	8007f6e <_dtoa_r+0x41e>
 8008048:	9900      	ldr	r1, [sp, #0]
 800804a:	4b50      	ldr	r3, [pc, #320]	; (800818c <_dtoa_r+0x63c>)
 800804c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008050:	4431      	add	r1, r6
 8008052:	9102      	str	r1, [sp, #8]
 8008054:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008056:	eeb0 9a47 	vmov.f32	s18, s14
 800805a:	eef0 9a67 	vmov.f32	s19, s15
 800805e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008062:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008066:	2900      	cmp	r1, #0
 8008068:	d044      	beq.n	80080f4 <_dtoa_r+0x5a4>
 800806a:	494e      	ldr	r1, [pc, #312]	; (80081a4 <_dtoa_r+0x654>)
 800806c:	2000      	movs	r0, #0
 800806e:	f7f8 fbed 	bl	800084c <__aeabi_ddiv>
 8008072:	ec53 2b19 	vmov	r2, r3, d9
 8008076:	f7f8 f907 	bl	8000288 <__aeabi_dsub>
 800807a:	9d00      	ldr	r5, [sp, #0]
 800807c:	ec41 0b19 	vmov	d9, r0, r1
 8008080:	4649      	mov	r1, r9
 8008082:	4640      	mov	r0, r8
 8008084:	f7f8 fd68 	bl	8000b58 <__aeabi_d2iz>
 8008088:	4606      	mov	r6, r0
 800808a:	f7f8 fa4b 	bl	8000524 <__aeabi_i2d>
 800808e:	4602      	mov	r2, r0
 8008090:	460b      	mov	r3, r1
 8008092:	4640      	mov	r0, r8
 8008094:	4649      	mov	r1, r9
 8008096:	f7f8 f8f7 	bl	8000288 <__aeabi_dsub>
 800809a:	3630      	adds	r6, #48	; 0x30
 800809c:	f805 6b01 	strb.w	r6, [r5], #1
 80080a0:	ec53 2b19 	vmov	r2, r3, d9
 80080a4:	4680      	mov	r8, r0
 80080a6:	4689      	mov	r9, r1
 80080a8:	f7f8 fd18 	bl	8000adc <__aeabi_dcmplt>
 80080ac:	2800      	cmp	r0, #0
 80080ae:	d164      	bne.n	800817a <_dtoa_r+0x62a>
 80080b0:	4642      	mov	r2, r8
 80080b2:	464b      	mov	r3, r9
 80080b4:	4937      	ldr	r1, [pc, #220]	; (8008194 <_dtoa_r+0x644>)
 80080b6:	2000      	movs	r0, #0
 80080b8:	f7f8 f8e6 	bl	8000288 <__aeabi_dsub>
 80080bc:	ec53 2b19 	vmov	r2, r3, d9
 80080c0:	f7f8 fd0c 	bl	8000adc <__aeabi_dcmplt>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	f040 80b6 	bne.w	8008236 <_dtoa_r+0x6e6>
 80080ca:	9b02      	ldr	r3, [sp, #8]
 80080cc:	429d      	cmp	r5, r3
 80080ce:	f43f af7c 	beq.w	8007fca <_dtoa_r+0x47a>
 80080d2:	4b31      	ldr	r3, [pc, #196]	; (8008198 <_dtoa_r+0x648>)
 80080d4:	ec51 0b19 	vmov	r0, r1, d9
 80080d8:	2200      	movs	r2, #0
 80080da:	f7f8 fa8d 	bl	80005f8 <__aeabi_dmul>
 80080de:	4b2e      	ldr	r3, [pc, #184]	; (8008198 <_dtoa_r+0x648>)
 80080e0:	ec41 0b19 	vmov	d9, r0, r1
 80080e4:	2200      	movs	r2, #0
 80080e6:	4640      	mov	r0, r8
 80080e8:	4649      	mov	r1, r9
 80080ea:	f7f8 fa85 	bl	80005f8 <__aeabi_dmul>
 80080ee:	4680      	mov	r8, r0
 80080f0:	4689      	mov	r9, r1
 80080f2:	e7c5      	b.n	8008080 <_dtoa_r+0x530>
 80080f4:	ec51 0b17 	vmov	r0, r1, d7
 80080f8:	f7f8 fa7e 	bl	80005f8 <__aeabi_dmul>
 80080fc:	9b02      	ldr	r3, [sp, #8]
 80080fe:	9d00      	ldr	r5, [sp, #0]
 8008100:	930f      	str	r3, [sp, #60]	; 0x3c
 8008102:	ec41 0b19 	vmov	d9, r0, r1
 8008106:	4649      	mov	r1, r9
 8008108:	4640      	mov	r0, r8
 800810a:	f7f8 fd25 	bl	8000b58 <__aeabi_d2iz>
 800810e:	4606      	mov	r6, r0
 8008110:	f7f8 fa08 	bl	8000524 <__aeabi_i2d>
 8008114:	3630      	adds	r6, #48	; 0x30
 8008116:	4602      	mov	r2, r0
 8008118:	460b      	mov	r3, r1
 800811a:	4640      	mov	r0, r8
 800811c:	4649      	mov	r1, r9
 800811e:	f7f8 f8b3 	bl	8000288 <__aeabi_dsub>
 8008122:	f805 6b01 	strb.w	r6, [r5], #1
 8008126:	9b02      	ldr	r3, [sp, #8]
 8008128:	429d      	cmp	r5, r3
 800812a:	4680      	mov	r8, r0
 800812c:	4689      	mov	r9, r1
 800812e:	f04f 0200 	mov.w	r2, #0
 8008132:	d124      	bne.n	800817e <_dtoa_r+0x62e>
 8008134:	4b1b      	ldr	r3, [pc, #108]	; (80081a4 <_dtoa_r+0x654>)
 8008136:	ec51 0b19 	vmov	r0, r1, d9
 800813a:	f7f8 f8a7 	bl	800028c <__adddf3>
 800813e:	4602      	mov	r2, r0
 8008140:	460b      	mov	r3, r1
 8008142:	4640      	mov	r0, r8
 8008144:	4649      	mov	r1, r9
 8008146:	f7f8 fce7 	bl	8000b18 <__aeabi_dcmpgt>
 800814a:	2800      	cmp	r0, #0
 800814c:	d173      	bne.n	8008236 <_dtoa_r+0x6e6>
 800814e:	ec53 2b19 	vmov	r2, r3, d9
 8008152:	4914      	ldr	r1, [pc, #80]	; (80081a4 <_dtoa_r+0x654>)
 8008154:	2000      	movs	r0, #0
 8008156:	f7f8 f897 	bl	8000288 <__aeabi_dsub>
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	4640      	mov	r0, r8
 8008160:	4649      	mov	r1, r9
 8008162:	f7f8 fcbb 	bl	8000adc <__aeabi_dcmplt>
 8008166:	2800      	cmp	r0, #0
 8008168:	f43f af2f 	beq.w	8007fca <_dtoa_r+0x47a>
 800816c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800816e:	1e6b      	subs	r3, r5, #1
 8008170:	930f      	str	r3, [sp, #60]	; 0x3c
 8008172:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008176:	2b30      	cmp	r3, #48	; 0x30
 8008178:	d0f8      	beq.n	800816c <_dtoa_r+0x61c>
 800817a:	46bb      	mov	fp, r7
 800817c:	e04a      	b.n	8008214 <_dtoa_r+0x6c4>
 800817e:	4b06      	ldr	r3, [pc, #24]	; (8008198 <_dtoa_r+0x648>)
 8008180:	f7f8 fa3a 	bl	80005f8 <__aeabi_dmul>
 8008184:	4680      	mov	r8, r0
 8008186:	4689      	mov	r9, r1
 8008188:	e7bd      	b.n	8008106 <_dtoa_r+0x5b6>
 800818a:	bf00      	nop
 800818c:	08009a00 	.word	0x08009a00
 8008190:	080099d8 	.word	0x080099d8
 8008194:	3ff00000 	.word	0x3ff00000
 8008198:	40240000 	.word	0x40240000
 800819c:	401c0000 	.word	0x401c0000
 80081a0:	40140000 	.word	0x40140000
 80081a4:	3fe00000 	.word	0x3fe00000
 80081a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80081ac:	9d00      	ldr	r5, [sp, #0]
 80081ae:	4642      	mov	r2, r8
 80081b0:	464b      	mov	r3, r9
 80081b2:	4630      	mov	r0, r6
 80081b4:	4639      	mov	r1, r7
 80081b6:	f7f8 fb49 	bl	800084c <__aeabi_ddiv>
 80081ba:	f7f8 fccd 	bl	8000b58 <__aeabi_d2iz>
 80081be:	9001      	str	r0, [sp, #4]
 80081c0:	f7f8 f9b0 	bl	8000524 <__aeabi_i2d>
 80081c4:	4642      	mov	r2, r8
 80081c6:	464b      	mov	r3, r9
 80081c8:	f7f8 fa16 	bl	80005f8 <__aeabi_dmul>
 80081cc:	4602      	mov	r2, r0
 80081ce:	460b      	mov	r3, r1
 80081d0:	4630      	mov	r0, r6
 80081d2:	4639      	mov	r1, r7
 80081d4:	f7f8 f858 	bl	8000288 <__aeabi_dsub>
 80081d8:	9e01      	ldr	r6, [sp, #4]
 80081da:	9f04      	ldr	r7, [sp, #16]
 80081dc:	3630      	adds	r6, #48	; 0x30
 80081de:	f805 6b01 	strb.w	r6, [r5], #1
 80081e2:	9e00      	ldr	r6, [sp, #0]
 80081e4:	1bae      	subs	r6, r5, r6
 80081e6:	42b7      	cmp	r7, r6
 80081e8:	4602      	mov	r2, r0
 80081ea:	460b      	mov	r3, r1
 80081ec:	d134      	bne.n	8008258 <_dtoa_r+0x708>
 80081ee:	f7f8 f84d 	bl	800028c <__adddf3>
 80081f2:	4642      	mov	r2, r8
 80081f4:	464b      	mov	r3, r9
 80081f6:	4606      	mov	r6, r0
 80081f8:	460f      	mov	r7, r1
 80081fa:	f7f8 fc8d 	bl	8000b18 <__aeabi_dcmpgt>
 80081fe:	b9c8      	cbnz	r0, 8008234 <_dtoa_r+0x6e4>
 8008200:	4642      	mov	r2, r8
 8008202:	464b      	mov	r3, r9
 8008204:	4630      	mov	r0, r6
 8008206:	4639      	mov	r1, r7
 8008208:	f7f8 fc5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800820c:	b110      	cbz	r0, 8008214 <_dtoa_r+0x6c4>
 800820e:	9b01      	ldr	r3, [sp, #4]
 8008210:	07db      	lsls	r3, r3, #31
 8008212:	d40f      	bmi.n	8008234 <_dtoa_r+0x6e4>
 8008214:	4651      	mov	r1, sl
 8008216:	4620      	mov	r0, r4
 8008218:	f000 fbcc 	bl	80089b4 <_Bfree>
 800821c:	2300      	movs	r3, #0
 800821e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008220:	702b      	strb	r3, [r5, #0]
 8008222:	f10b 0301 	add.w	r3, fp, #1
 8008226:	6013      	str	r3, [r2, #0]
 8008228:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800822a:	2b00      	cmp	r3, #0
 800822c:	f43f ace2 	beq.w	8007bf4 <_dtoa_r+0xa4>
 8008230:	601d      	str	r5, [r3, #0]
 8008232:	e4df      	b.n	8007bf4 <_dtoa_r+0xa4>
 8008234:	465f      	mov	r7, fp
 8008236:	462b      	mov	r3, r5
 8008238:	461d      	mov	r5, r3
 800823a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800823e:	2a39      	cmp	r2, #57	; 0x39
 8008240:	d106      	bne.n	8008250 <_dtoa_r+0x700>
 8008242:	9a00      	ldr	r2, [sp, #0]
 8008244:	429a      	cmp	r2, r3
 8008246:	d1f7      	bne.n	8008238 <_dtoa_r+0x6e8>
 8008248:	9900      	ldr	r1, [sp, #0]
 800824a:	2230      	movs	r2, #48	; 0x30
 800824c:	3701      	adds	r7, #1
 800824e:	700a      	strb	r2, [r1, #0]
 8008250:	781a      	ldrb	r2, [r3, #0]
 8008252:	3201      	adds	r2, #1
 8008254:	701a      	strb	r2, [r3, #0]
 8008256:	e790      	b.n	800817a <_dtoa_r+0x62a>
 8008258:	4ba3      	ldr	r3, [pc, #652]	; (80084e8 <_dtoa_r+0x998>)
 800825a:	2200      	movs	r2, #0
 800825c:	f7f8 f9cc 	bl	80005f8 <__aeabi_dmul>
 8008260:	2200      	movs	r2, #0
 8008262:	2300      	movs	r3, #0
 8008264:	4606      	mov	r6, r0
 8008266:	460f      	mov	r7, r1
 8008268:	f7f8 fc2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800826c:	2800      	cmp	r0, #0
 800826e:	d09e      	beq.n	80081ae <_dtoa_r+0x65e>
 8008270:	e7d0      	b.n	8008214 <_dtoa_r+0x6c4>
 8008272:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008274:	2a00      	cmp	r2, #0
 8008276:	f000 80ca 	beq.w	800840e <_dtoa_r+0x8be>
 800827a:	9a07      	ldr	r2, [sp, #28]
 800827c:	2a01      	cmp	r2, #1
 800827e:	f300 80ad 	bgt.w	80083dc <_dtoa_r+0x88c>
 8008282:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008284:	2a00      	cmp	r2, #0
 8008286:	f000 80a5 	beq.w	80083d4 <_dtoa_r+0x884>
 800828a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800828e:	9e08      	ldr	r6, [sp, #32]
 8008290:	9d05      	ldr	r5, [sp, #20]
 8008292:	9a05      	ldr	r2, [sp, #20]
 8008294:	441a      	add	r2, r3
 8008296:	9205      	str	r2, [sp, #20]
 8008298:	9a06      	ldr	r2, [sp, #24]
 800829a:	2101      	movs	r1, #1
 800829c:	441a      	add	r2, r3
 800829e:	4620      	mov	r0, r4
 80082a0:	9206      	str	r2, [sp, #24]
 80082a2:	f000 fc3d 	bl	8008b20 <__i2b>
 80082a6:	4607      	mov	r7, r0
 80082a8:	b165      	cbz	r5, 80082c4 <_dtoa_r+0x774>
 80082aa:	9b06      	ldr	r3, [sp, #24]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	dd09      	ble.n	80082c4 <_dtoa_r+0x774>
 80082b0:	42ab      	cmp	r3, r5
 80082b2:	9a05      	ldr	r2, [sp, #20]
 80082b4:	bfa8      	it	ge
 80082b6:	462b      	movge	r3, r5
 80082b8:	1ad2      	subs	r2, r2, r3
 80082ba:	9205      	str	r2, [sp, #20]
 80082bc:	9a06      	ldr	r2, [sp, #24]
 80082be:	1aed      	subs	r5, r5, r3
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	9306      	str	r3, [sp, #24]
 80082c4:	9b08      	ldr	r3, [sp, #32]
 80082c6:	b1f3      	cbz	r3, 8008306 <_dtoa_r+0x7b6>
 80082c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f000 80a3 	beq.w	8008416 <_dtoa_r+0x8c6>
 80082d0:	2e00      	cmp	r6, #0
 80082d2:	dd10      	ble.n	80082f6 <_dtoa_r+0x7a6>
 80082d4:	4639      	mov	r1, r7
 80082d6:	4632      	mov	r2, r6
 80082d8:	4620      	mov	r0, r4
 80082da:	f000 fce1 	bl	8008ca0 <__pow5mult>
 80082de:	4652      	mov	r2, sl
 80082e0:	4601      	mov	r1, r0
 80082e2:	4607      	mov	r7, r0
 80082e4:	4620      	mov	r0, r4
 80082e6:	f000 fc31 	bl	8008b4c <__multiply>
 80082ea:	4651      	mov	r1, sl
 80082ec:	4680      	mov	r8, r0
 80082ee:	4620      	mov	r0, r4
 80082f0:	f000 fb60 	bl	80089b4 <_Bfree>
 80082f4:	46c2      	mov	sl, r8
 80082f6:	9b08      	ldr	r3, [sp, #32]
 80082f8:	1b9a      	subs	r2, r3, r6
 80082fa:	d004      	beq.n	8008306 <_dtoa_r+0x7b6>
 80082fc:	4651      	mov	r1, sl
 80082fe:	4620      	mov	r0, r4
 8008300:	f000 fcce 	bl	8008ca0 <__pow5mult>
 8008304:	4682      	mov	sl, r0
 8008306:	2101      	movs	r1, #1
 8008308:	4620      	mov	r0, r4
 800830a:	f000 fc09 	bl	8008b20 <__i2b>
 800830e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008310:	2b00      	cmp	r3, #0
 8008312:	4606      	mov	r6, r0
 8008314:	f340 8081 	ble.w	800841a <_dtoa_r+0x8ca>
 8008318:	461a      	mov	r2, r3
 800831a:	4601      	mov	r1, r0
 800831c:	4620      	mov	r0, r4
 800831e:	f000 fcbf 	bl	8008ca0 <__pow5mult>
 8008322:	9b07      	ldr	r3, [sp, #28]
 8008324:	2b01      	cmp	r3, #1
 8008326:	4606      	mov	r6, r0
 8008328:	dd7a      	ble.n	8008420 <_dtoa_r+0x8d0>
 800832a:	f04f 0800 	mov.w	r8, #0
 800832e:	6933      	ldr	r3, [r6, #16]
 8008330:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008334:	6918      	ldr	r0, [r3, #16]
 8008336:	f000 fba5 	bl	8008a84 <__hi0bits>
 800833a:	f1c0 0020 	rsb	r0, r0, #32
 800833e:	9b06      	ldr	r3, [sp, #24]
 8008340:	4418      	add	r0, r3
 8008342:	f010 001f 	ands.w	r0, r0, #31
 8008346:	f000 8094 	beq.w	8008472 <_dtoa_r+0x922>
 800834a:	f1c0 0320 	rsb	r3, r0, #32
 800834e:	2b04      	cmp	r3, #4
 8008350:	f340 8085 	ble.w	800845e <_dtoa_r+0x90e>
 8008354:	9b05      	ldr	r3, [sp, #20]
 8008356:	f1c0 001c 	rsb	r0, r0, #28
 800835a:	4403      	add	r3, r0
 800835c:	9305      	str	r3, [sp, #20]
 800835e:	9b06      	ldr	r3, [sp, #24]
 8008360:	4403      	add	r3, r0
 8008362:	4405      	add	r5, r0
 8008364:	9306      	str	r3, [sp, #24]
 8008366:	9b05      	ldr	r3, [sp, #20]
 8008368:	2b00      	cmp	r3, #0
 800836a:	dd05      	ble.n	8008378 <_dtoa_r+0x828>
 800836c:	4651      	mov	r1, sl
 800836e:	461a      	mov	r2, r3
 8008370:	4620      	mov	r0, r4
 8008372:	f000 fcef 	bl	8008d54 <__lshift>
 8008376:	4682      	mov	sl, r0
 8008378:	9b06      	ldr	r3, [sp, #24]
 800837a:	2b00      	cmp	r3, #0
 800837c:	dd05      	ble.n	800838a <_dtoa_r+0x83a>
 800837e:	4631      	mov	r1, r6
 8008380:	461a      	mov	r2, r3
 8008382:	4620      	mov	r0, r4
 8008384:	f000 fce6 	bl	8008d54 <__lshift>
 8008388:	4606      	mov	r6, r0
 800838a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800838c:	2b00      	cmp	r3, #0
 800838e:	d072      	beq.n	8008476 <_dtoa_r+0x926>
 8008390:	4631      	mov	r1, r6
 8008392:	4650      	mov	r0, sl
 8008394:	f000 fd4a 	bl	8008e2c <__mcmp>
 8008398:	2800      	cmp	r0, #0
 800839a:	da6c      	bge.n	8008476 <_dtoa_r+0x926>
 800839c:	2300      	movs	r3, #0
 800839e:	4651      	mov	r1, sl
 80083a0:	220a      	movs	r2, #10
 80083a2:	4620      	mov	r0, r4
 80083a4:	f000 fb28 	bl	80089f8 <__multadd>
 80083a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083ae:	4682      	mov	sl, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f000 81b0 	beq.w	8008716 <_dtoa_r+0xbc6>
 80083b6:	2300      	movs	r3, #0
 80083b8:	4639      	mov	r1, r7
 80083ba:	220a      	movs	r2, #10
 80083bc:	4620      	mov	r0, r4
 80083be:	f000 fb1b 	bl	80089f8 <__multadd>
 80083c2:	9b01      	ldr	r3, [sp, #4]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	4607      	mov	r7, r0
 80083c8:	f300 8096 	bgt.w	80084f8 <_dtoa_r+0x9a8>
 80083cc:	9b07      	ldr	r3, [sp, #28]
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	dc59      	bgt.n	8008486 <_dtoa_r+0x936>
 80083d2:	e091      	b.n	80084f8 <_dtoa_r+0x9a8>
 80083d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80083da:	e758      	b.n	800828e <_dtoa_r+0x73e>
 80083dc:	9b04      	ldr	r3, [sp, #16]
 80083de:	1e5e      	subs	r6, r3, #1
 80083e0:	9b08      	ldr	r3, [sp, #32]
 80083e2:	42b3      	cmp	r3, r6
 80083e4:	bfbf      	itttt	lt
 80083e6:	9b08      	ldrlt	r3, [sp, #32]
 80083e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80083ea:	9608      	strlt	r6, [sp, #32]
 80083ec:	1af3      	sublt	r3, r6, r3
 80083ee:	bfb4      	ite	lt
 80083f0:	18d2      	addlt	r2, r2, r3
 80083f2:	1b9e      	subge	r6, r3, r6
 80083f4:	9b04      	ldr	r3, [sp, #16]
 80083f6:	bfbc      	itt	lt
 80083f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80083fa:	2600      	movlt	r6, #0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	bfb7      	itett	lt
 8008400:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008404:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008408:	1a9d      	sublt	r5, r3, r2
 800840a:	2300      	movlt	r3, #0
 800840c:	e741      	b.n	8008292 <_dtoa_r+0x742>
 800840e:	9e08      	ldr	r6, [sp, #32]
 8008410:	9d05      	ldr	r5, [sp, #20]
 8008412:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008414:	e748      	b.n	80082a8 <_dtoa_r+0x758>
 8008416:	9a08      	ldr	r2, [sp, #32]
 8008418:	e770      	b.n	80082fc <_dtoa_r+0x7ac>
 800841a:	9b07      	ldr	r3, [sp, #28]
 800841c:	2b01      	cmp	r3, #1
 800841e:	dc19      	bgt.n	8008454 <_dtoa_r+0x904>
 8008420:	9b02      	ldr	r3, [sp, #8]
 8008422:	b9bb      	cbnz	r3, 8008454 <_dtoa_r+0x904>
 8008424:	9b03      	ldr	r3, [sp, #12]
 8008426:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800842a:	b99b      	cbnz	r3, 8008454 <_dtoa_r+0x904>
 800842c:	9b03      	ldr	r3, [sp, #12]
 800842e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008432:	0d1b      	lsrs	r3, r3, #20
 8008434:	051b      	lsls	r3, r3, #20
 8008436:	b183      	cbz	r3, 800845a <_dtoa_r+0x90a>
 8008438:	9b05      	ldr	r3, [sp, #20]
 800843a:	3301      	adds	r3, #1
 800843c:	9305      	str	r3, [sp, #20]
 800843e:	9b06      	ldr	r3, [sp, #24]
 8008440:	3301      	adds	r3, #1
 8008442:	9306      	str	r3, [sp, #24]
 8008444:	f04f 0801 	mov.w	r8, #1
 8008448:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800844a:	2b00      	cmp	r3, #0
 800844c:	f47f af6f 	bne.w	800832e <_dtoa_r+0x7de>
 8008450:	2001      	movs	r0, #1
 8008452:	e774      	b.n	800833e <_dtoa_r+0x7ee>
 8008454:	f04f 0800 	mov.w	r8, #0
 8008458:	e7f6      	b.n	8008448 <_dtoa_r+0x8f8>
 800845a:	4698      	mov	r8, r3
 800845c:	e7f4      	b.n	8008448 <_dtoa_r+0x8f8>
 800845e:	d082      	beq.n	8008366 <_dtoa_r+0x816>
 8008460:	9a05      	ldr	r2, [sp, #20]
 8008462:	331c      	adds	r3, #28
 8008464:	441a      	add	r2, r3
 8008466:	9205      	str	r2, [sp, #20]
 8008468:	9a06      	ldr	r2, [sp, #24]
 800846a:	441a      	add	r2, r3
 800846c:	441d      	add	r5, r3
 800846e:	9206      	str	r2, [sp, #24]
 8008470:	e779      	b.n	8008366 <_dtoa_r+0x816>
 8008472:	4603      	mov	r3, r0
 8008474:	e7f4      	b.n	8008460 <_dtoa_r+0x910>
 8008476:	9b04      	ldr	r3, [sp, #16]
 8008478:	2b00      	cmp	r3, #0
 800847a:	dc37      	bgt.n	80084ec <_dtoa_r+0x99c>
 800847c:	9b07      	ldr	r3, [sp, #28]
 800847e:	2b02      	cmp	r3, #2
 8008480:	dd34      	ble.n	80084ec <_dtoa_r+0x99c>
 8008482:	9b04      	ldr	r3, [sp, #16]
 8008484:	9301      	str	r3, [sp, #4]
 8008486:	9b01      	ldr	r3, [sp, #4]
 8008488:	b963      	cbnz	r3, 80084a4 <_dtoa_r+0x954>
 800848a:	4631      	mov	r1, r6
 800848c:	2205      	movs	r2, #5
 800848e:	4620      	mov	r0, r4
 8008490:	f000 fab2 	bl	80089f8 <__multadd>
 8008494:	4601      	mov	r1, r0
 8008496:	4606      	mov	r6, r0
 8008498:	4650      	mov	r0, sl
 800849a:	f000 fcc7 	bl	8008e2c <__mcmp>
 800849e:	2800      	cmp	r0, #0
 80084a0:	f73f adbb 	bgt.w	800801a <_dtoa_r+0x4ca>
 80084a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084a6:	9d00      	ldr	r5, [sp, #0]
 80084a8:	ea6f 0b03 	mvn.w	fp, r3
 80084ac:	f04f 0800 	mov.w	r8, #0
 80084b0:	4631      	mov	r1, r6
 80084b2:	4620      	mov	r0, r4
 80084b4:	f000 fa7e 	bl	80089b4 <_Bfree>
 80084b8:	2f00      	cmp	r7, #0
 80084ba:	f43f aeab 	beq.w	8008214 <_dtoa_r+0x6c4>
 80084be:	f1b8 0f00 	cmp.w	r8, #0
 80084c2:	d005      	beq.n	80084d0 <_dtoa_r+0x980>
 80084c4:	45b8      	cmp	r8, r7
 80084c6:	d003      	beq.n	80084d0 <_dtoa_r+0x980>
 80084c8:	4641      	mov	r1, r8
 80084ca:	4620      	mov	r0, r4
 80084cc:	f000 fa72 	bl	80089b4 <_Bfree>
 80084d0:	4639      	mov	r1, r7
 80084d2:	4620      	mov	r0, r4
 80084d4:	f000 fa6e 	bl	80089b4 <_Bfree>
 80084d8:	e69c      	b.n	8008214 <_dtoa_r+0x6c4>
 80084da:	2600      	movs	r6, #0
 80084dc:	4637      	mov	r7, r6
 80084de:	e7e1      	b.n	80084a4 <_dtoa_r+0x954>
 80084e0:	46bb      	mov	fp, r7
 80084e2:	4637      	mov	r7, r6
 80084e4:	e599      	b.n	800801a <_dtoa_r+0x4ca>
 80084e6:	bf00      	nop
 80084e8:	40240000 	.word	0x40240000
 80084ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f000 80c8 	beq.w	8008684 <_dtoa_r+0xb34>
 80084f4:	9b04      	ldr	r3, [sp, #16]
 80084f6:	9301      	str	r3, [sp, #4]
 80084f8:	2d00      	cmp	r5, #0
 80084fa:	dd05      	ble.n	8008508 <_dtoa_r+0x9b8>
 80084fc:	4639      	mov	r1, r7
 80084fe:	462a      	mov	r2, r5
 8008500:	4620      	mov	r0, r4
 8008502:	f000 fc27 	bl	8008d54 <__lshift>
 8008506:	4607      	mov	r7, r0
 8008508:	f1b8 0f00 	cmp.w	r8, #0
 800850c:	d05b      	beq.n	80085c6 <_dtoa_r+0xa76>
 800850e:	6879      	ldr	r1, [r7, #4]
 8008510:	4620      	mov	r0, r4
 8008512:	f000 fa0f 	bl	8008934 <_Balloc>
 8008516:	4605      	mov	r5, r0
 8008518:	b928      	cbnz	r0, 8008526 <_dtoa_r+0x9d6>
 800851a:	4b83      	ldr	r3, [pc, #524]	; (8008728 <_dtoa_r+0xbd8>)
 800851c:	4602      	mov	r2, r0
 800851e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008522:	f7ff bb2e 	b.w	8007b82 <_dtoa_r+0x32>
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	3202      	adds	r2, #2
 800852a:	0092      	lsls	r2, r2, #2
 800852c:	f107 010c 	add.w	r1, r7, #12
 8008530:	300c      	adds	r0, #12
 8008532:	f7ff fa76 	bl	8007a22 <memcpy>
 8008536:	2201      	movs	r2, #1
 8008538:	4629      	mov	r1, r5
 800853a:	4620      	mov	r0, r4
 800853c:	f000 fc0a 	bl	8008d54 <__lshift>
 8008540:	9b00      	ldr	r3, [sp, #0]
 8008542:	3301      	adds	r3, #1
 8008544:	9304      	str	r3, [sp, #16]
 8008546:	e9dd 2300 	ldrd	r2, r3, [sp]
 800854a:	4413      	add	r3, r2
 800854c:	9308      	str	r3, [sp, #32]
 800854e:	9b02      	ldr	r3, [sp, #8]
 8008550:	f003 0301 	and.w	r3, r3, #1
 8008554:	46b8      	mov	r8, r7
 8008556:	9306      	str	r3, [sp, #24]
 8008558:	4607      	mov	r7, r0
 800855a:	9b04      	ldr	r3, [sp, #16]
 800855c:	4631      	mov	r1, r6
 800855e:	3b01      	subs	r3, #1
 8008560:	4650      	mov	r0, sl
 8008562:	9301      	str	r3, [sp, #4]
 8008564:	f7ff fa6b 	bl	8007a3e <quorem>
 8008568:	4641      	mov	r1, r8
 800856a:	9002      	str	r0, [sp, #8]
 800856c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008570:	4650      	mov	r0, sl
 8008572:	f000 fc5b 	bl	8008e2c <__mcmp>
 8008576:	463a      	mov	r2, r7
 8008578:	9005      	str	r0, [sp, #20]
 800857a:	4631      	mov	r1, r6
 800857c:	4620      	mov	r0, r4
 800857e:	f000 fc71 	bl	8008e64 <__mdiff>
 8008582:	68c2      	ldr	r2, [r0, #12]
 8008584:	4605      	mov	r5, r0
 8008586:	bb02      	cbnz	r2, 80085ca <_dtoa_r+0xa7a>
 8008588:	4601      	mov	r1, r0
 800858a:	4650      	mov	r0, sl
 800858c:	f000 fc4e 	bl	8008e2c <__mcmp>
 8008590:	4602      	mov	r2, r0
 8008592:	4629      	mov	r1, r5
 8008594:	4620      	mov	r0, r4
 8008596:	9209      	str	r2, [sp, #36]	; 0x24
 8008598:	f000 fa0c 	bl	80089b4 <_Bfree>
 800859c:	9b07      	ldr	r3, [sp, #28]
 800859e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085a0:	9d04      	ldr	r5, [sp, #16]
 80085a2:	ea43 0102 	orr.w	r1, r3, r2
 80085a6:	9b06      	ldr	r3, [sp, #24]
 80085a8:	4319      	orrs	r1, r3
 80085aa:	d110      	bne.n	80085ce <_dtoa_r+0xa7e>
 80085ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80085b0:	d029      	beq.n	8008606 <_dtoa_r+0xab6>
 80085b2:	9b05      	ldr	r3, [sp, #20]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	dd02      	ble.n	80085be <_dtoa_r+0xa6e>
 80085b8:	9b02      	ldr	r3, [sp, #8]
 80085ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80085be:	9b01      	ldr	r3, [sp, #4]
 80085c0:	f883 9000 	strb.w	r9, [r3]
 80085c4:	e774      	b.n	80084b0 <_dtoa_r+0x960>
 80085c6:	4638      	mov	r0, r7
 80085c8:	e7ba      	b.n	8008540 <_dtoa_r+0x9f0>
 80085ca:	2201      	movs	r2, #1
 80085cc:	e7e1      	b.n	8008592 <_dtoa_r+0xa42>
 80085ce:	9b05      	ldr	r3, [sp, #20]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	db04      	blt.n	80085de <_dtoa_r+0xa8e>
 80085d4:	9907      	ldr	r1, [sp, #28]
 80085d6:	430b      	orrs	r3, r1
 80085d8:	9906      	ldr	r1, [sp, #24]
 80085da:	430b      	orrs	r3, r1
 80085dc:	d120      	bne.n	8008620 <_dtoa_r+0xad0>
 80085de:	2a00      	cmp	r2, #0
 80085e0:	dded      	ble.n	80085be <_dtoa_r+0xa6e>
 80085e2:	4651      	mov	r1, sl
 80085e4:	2201      	movs	r2, #1
 80085e6:	4620      	mov	r0, r4
 80085e8:	f000 fbb4 	bl	8008d54 <__lshift>
 80085ec:	4631      	mov	r1, r6
 80085ee:	4682      	mov	sl, r0
 80085f0:	f000 fc1c 	bl	8008e2c <__mcmp>
 80085f4:	2800      	cmp	r0, #0
 80085f6:	dc03      	bgt.n	8008600 <_dtoa_r+0xab0>
 80085f8:	d1e1      	bne.n	80085be <_dtoa_r+0xa6e>
 80085fa:	f019 0f01 	tst.w	r9, #1
 80085fe:	d0de      	beq.n	80085be <_dtoa_r+0xa6e>
 8008600:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008604:	d1d8      	bne.n	80085b8 <_dtoa_r+0xa68>
 8008606:	9a01      	ldr	r2, [sp, #4]
 8008608:	2339      	movs	r3, #57	; 0x39
 800860a:	7013      	strb	r3, [r2, #0]
 800860c:	462b      	mov	r3, r5
 800860e:	461d      	mov	r5, r3
 8008610:	3b01      	subs	r3, #1
 8008612:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008616:	2a39      	cmp	r2, #57	; 0x39
 8008618:	d06c      	beq.n	80086f4 <_dtoa_r+0xba4>
 800861a:	3201      	adds	r2, #1
 800861c:	701a      	strb	r2, [r3, #0]
 800861e:	e747      	b.n	80084b0 <_dtoa_r+0x960>
 8008620:	2a00      	cmp	r2, #0
 8008622:	dd07      	ble.n	8008634 <_dtoa_r+0xae4>
 8008624:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008628:	d0ed      	beq.n	8008606 <_dtoa_r+0xab6>
 800862a:	9a01      	ldr	r2, [sp, #4]
 800862c:	f109 0301 	add.w	r3, r9, #1
 8008630:	7013      	strb	r3, [r2, #0]
 8008632:	e73d      	b.n	80084b0 <_dtoa_r+0x960>
 8008634:	9b04      	ldr	r3, [sp, #16]
 8008636:	9a08      	ldr	r2, [sp, #32]
 8008638:	f803 9c01 	strb.w	r9, [r3, #-1]
 800863c:	4293      	cmp	r3, r2
 800863e:	d043      	beq.n	80086c8 <_dtoa_r+0xb78>
 8008640:	4651      	mov	r1, sl
 8008642:	2300      	movs	r3, #0
 8008644:	220a      	movs	r2, #10
 8008646:	4620      	mov	r0, r4
 8008648:	f000 f9d6 	bl	80089f8 <__multadd>
 800864c:	45b8      	cmp	r8, r7
 800864e:	4682      	mov	sl, r0
 8008650:	f04f 0300 	mov.w	r3, #0
 8008654:	f04f 020a 	mov.w	r2, #10
 8008658:	4641      	mov	r1, r8
 800865a:	4620      	mov	r0, r4
 800865c:	d107      	bne.n	800866e <_dtoa_r+0xb1e>
 800865e:	f000 f9cb 	bl	80089f8 <__multadd>
 8008662:	4680      	mov	r8, r0
 8008664:	4607      	mov	r7, r0
 8008666:	9b04      	ldr	r3, [sp, #16]
 8008668:	3301      	adds	r3, #1
 800866a:	9304      	str	r3, [sp, #16]
 800866c:	e775      	b.n	800855a <_dtoa_r+0xa0a>
 800866e:	f000 f9c3 	bl	80089f8 <__multadd>
 8008672:	4639      	mov	r1, r7
 8008674:	4680      	mov	r8, r0
 8008676:	2300      	movs	r3, #0
 8008678:	220a      	movs	r2, #10
 800867a:	4620      	mov	r0, r4
 800867c:	f000 f9bc 	bl	80089f8 <__multadd>
 8008680:	4607      	mov	r7, r0
 8008682:	e7f0      	b.n	8008666 <_dtoa_r+0xb16>
 8008684:	9b04      	ldr	r3, [sp, #16]
 8008686:	9301      	str	r3, [sp, #4]
 8008688:	9d00      	ldr	r5, [sp, #0]
 800868a:	4631      	mov	r1, r6
 800868c:	4650      	mov	r0, sl
 800868e:	f7ff f9d6 	bl	8007a3e <quorem>
 8008692:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008696:	9b00      	ldr	r3, [sp, #0]
 8008698:	f805 9b01 	strb.w	r9, [r5], #1
 800869c:	1aea      	subs	r2, r5, r3
 800869e:	9b01      	ldr	r3, [sp, #4]
 80086a0:	4293      	cmp	r3, r2
 80086a2:	dd07      	ble.n	80086b4 <_dtoa_r+0xb64>
 80086a4:	4651      	mov	r1, sl
 80086a6:	2300      	movs	r3, #0
 80086a8:	220a      	movs	r2, #10
 80086aa:	4620      	mov	r0, r4
 80086ac:	f000 f9a4 	bl	80089f8 <__multadd>
 80086b0:	4682      	mov	sl, r0
 80086b2:	e7ea      	b.n	800868a <_dtoa_r+0xb3a>
 80086b4:	9b01      	ldr	r3, [sp, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	bfc8      	it	gt
 80086ba:	461d      	movgt	r5, r3
 80086bc:	9b00      	ldr	r3, [sp, #0]
 80086be:	bfd8      	it	le
 80086c0:	2501      	movle	r5, #1
 80086c2:	441d      	add	r5, r3
 80086c4:	f04f 0800 	mov.w	r8, #0
 80086c8:	4651      	mov	r1, sl
 80086ca:	2201      	movs	r2, #1
 80086cc:	4620      	mov	r0, r4
 80086ce:	f000 fb41 	bl	8008d54 <__lshift>
 80086d2:	4631      	mov	r1, r6
 80086d4:	4682      	mov	sl, r0
 80086d6:	f000 fba9 	bl	8008e2c <__mcmp>
 80086da:	2800      	cmp	r0, #0
 80086dc:	dc96      	bgt.n	800860c <_dtoa_r+0xabc>
 80086de:	d102      	bne.n	80086e6 <_dtoa_r+0xb96>
 80086e0:	f019 0f01 	tst.w	r9, #1
 80086e4:	d192      	bne.n	800860c <_dtoa_r+0xabc>
 80086e6:	462b      	mov	r3, r5
 80086e8:	461d      	mov	r5, r3
 80086ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086ee:	2a30      	cmp	r2, #48	; 0x30
 80086f0:	d0fa      	beq.n	80086e8 <_dtoa_r+0xb98>
 80086f2:	e6dd      	b.n	80084b0 <_dtoa_r+0x960>
 80086f4:	9a00      	ldr	r2, [sp, #0]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d189      	bne.n	800860e <_dtoa_r+0xabe>
 80086fa:	f10b 0b01 	add.w	fp, fp, #1
 80086fe:	2331      	movs	r3, #49	; 0x31
 8008700:	e796      	b.n	8008630 <_dtoa_r+0xae0>
 8008702:	4b0a      	ldr	r3, [pc, #40]	; (800872c <_dtoa_r+0xbdc>)
 8008704:	f7ff ba99 	b.w	8007c3a <_dtoa_r+0xea>
 8008708:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800870a:	2b00      	cmp	r3, #0
 800870c:	f47f aa6d 	bne.w	8007bea <_dtoa_r+0x9a>
 8008710:	4b07      	ldr	r3, [pc, #28]	; (8008730 <_dtoa_r+0xbe0>)
 8008712:	f7ff ba92 	b.w	8007c3a <_dtoa_r+0xea>
 8008716:	9b01      	ldr	r3, [sp, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	dcb5      	bgt.n	8008688 <_dtoa_r+0xb38>
 800871c:	9b07      	ldr	r3, [sp, #28]
 800871e:	2b02      	cmp	r3, #2
 8008720:	f73f aeb1 	bgt.w	8008486 <_dtoa_r+0x936>
 8008724:	e7b0      	b.n	8008688 <_dtoa_r+0xb38>
 8008726:	bf00      	nop
 8008728:	08009968 	.word	0x08009968
 800872c:	080098c8 	.word	0x080098c8
 8008730:	080098ec 	.word	0x080098ec

08008734 <_free_r>:
 8008734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008736:	2900      	cmp	r1, #0
 8008738:	d044      	beq.n	80087c4 <_free_r+0x90>
 800873a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800873e:	9001      	str	r0, [sp, #4]
 8008740:	2b00      	cmp	r3, #0
 8008742:	f1a1 0404 	sub.w	r4, r1, #4
 8008746:	bfb8      	it	lt
 8008748:	18e4      	addlt	r4, r4, r3
 800874a:	f000 f8e7 	bl	800891c <__malloc_lock>
 800874e:	4a1e      	ldr	r2, [pc, #120]	; (80087c8 <_free_r+0x94>)
 8008750:	9801      	ldr	r0, [sp, #4]
 8008752:	6813      	ldr	r3, [r2, #0]
 8008754:	b933      	cbnz	r3, 8008764 <_free_r+0x30>
 8008756:	6063      	str	r3, [r4, #4]
 8008758:	6014      	str	r4, [r2, #0]
 800875a:	b003      	add	sp, #12
 800875c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008760:	f000 b8e2 	b.w	8008928 <__malloc_unlock>
 8008764:	42a3      	cmp	r3, r4
 8008766:	d908      	bls.n	800877a <_free_r+0x46>
 8008768:	6825      	ldr	r5, [r4, #0]
 800876a:	1961      	adds	r1, r4, r5
 800876c:	428b      	cmp	r3, r1
 800876e:	bf01      	itttt	eq
 8008770:	6819      	ldreq	r1, [r3, #0]
 8008772:	685b      	ldreq	r3, [r3, #4]
 8008774:	1949      	addeq	r1, r1, r5
 8008776:	6021      	streq	r1, [r4, #0]
 8008778:	e7ed      	b.n	8008756 <_free_r+0x22>
 800877a:	461a      	mov	r2, r3
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	b10b      	cbz	r3, 8008784 <_free_r+0x50>
 8008780:	42a3      	cmp	r3, r4
 8008782:	d9fa      	bls.n	800877a <_free_r+0x46>
 8008784:	6811      	ldr	r1, [r2, #0]
 8008786:	1855      	adds	r5, r2, r1
 8008788:	42a5      	cmp	r5, r4
 800878a:	d10b      	bne.n	80087a4 <_free_r+0x70>
 800878c:	6824      	ldr	r4, [r4, #0]
 800878e:	4421      	add	r1, r4
 8008790:	1854      	adds	r4, r2, r1
 8008792:	42a3      	cmp	r3, r4
 8008794:	6011      	str	r1, [r2, #0]
 8008796:	d1e0      	bne.n	800875a <_free_r+0x26>
 8008798:	681c      	ldr	r4, [r3, #0]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	6053      	str	r3, [r2, #4]
 800879e:	440c      	add	r4, r1
 80087a0:	6014      	str	r4, [r2, #0]
 80087a2:	e7da      	b.n	800875a <_free_r+0x26>
 80087a4:	d902      	bls.n	80087ac <_free_r+0x78>
 80087a6:	230c      	movs	r3, #12
 80087a8:	6003      	str	r3, [r0, #0]
 80087aa:	e7d6      	b.n	800875a <_free_r+0x26>
 80087ac:	6825      	ldr	r5, [r4, #0]
 80087ae:	1961      	adds	r1, r4, r5
 80087b0:	428b      	cmp	r3, r1
 80087b2:	bf04      	itt	eq
 80087b4:	6819      	ldreq	r1, [r3, #0]
 80087b6:	685b      	ldreq	r3, [r3, #4]
 80087b8:	6063      	str	r3, [r4, #4]
 80087ba:	bf04      	itt	eq
 80087bc:	1949      	addeq	r1, r1, r5
 80087be:	6021      	streq	r1, [r4, #0]
 80087c0:	6054      	str	r4, [r2, #4]
 80087c2:	e7ca      	b.n	800875a <_free_r+0x26>
 80087c4:	b003      	add	sp, #12
 80087c6:	bd30      	pop	{r4, r5, pc}
 80087c8:	20001dc0 	.word	0x20001dc0

080087cc <malloc>:
 80087cc:	4b02      	ldr	r3, [pc, #8]	; (80087d8 <malloc+0xc>)
 80087ce:	4601      	mov	r1, r0
 80087d0:	6818      	ldr	r0, [r3, #0]
 80087d2:	f000 b823 	b.w	800881c <_malloc_r>
 80087d6:	bf00      	nop
 80087d8:	20000068 	.word	0x20000068

080087dc <sbrk_aligned>:
 80087dc:	b570      	push	{r4, r5, r6, lr}
 80087de:	4e0e      	ldr	r6, [pc, #56]	; (8008818 <sbrk_aligned+0x3c>)
 80087e0:	460c      	mov	r4, r1
 80087e2:	6831      	ldr	r1, [r6, #0]
 80087e4:	4605      	mov	r5, r0
 80087e6:	b911      	cbnz	r1, 80087ee <sbrk_aligned+0x12>
 80087e8:	f000 fea8 	bl	800953c <_sbrk_r>
 80087ec:	6030      	str	r0, [r6, #0]
 80087ee:	4621      	mov	r1, r4
 80087f0:	4628      	mov	r0, r5
 80087f2:	f000 fea3 	bl	800953c <_sbrk_r>
 80087f6:	1c43      	adds	r3, r0, #1
 80087f8:	d00a      	beq.n	8008810 <sbrk_aligned+0x34>
 80087fa:	1cc4      	adds	r4, r0, #3
 80087fc:	f024 0403 	bic.w	r4, r4, #3
 8008800:	42a0      	cmp	r0, r4
 8008802:	d007      	beq.n	8008814 <sbrk_aligned+0x38>
 8008804:	1a21      	subs	r1, r4, r0
 8008806:	4628      	mov	r0, r5
 8008808:	f000 fe98 	bl	800953c <_sbrk_r>
 800880c:	3001      	adds	r0, #1
 800880e:	d101      	bne.n	8008814 <sbrk_aligned+0x38>
 8008810:	f04f 34ff 	mov.w	r4, #4294967295
 8008814:	4620      	mov	r0, r4
 8008816:	bd70      	pop	{r4, r5, r6, pc}
 8008818:	20001dc4 	.word	0x20001dc4

0800881c <_malloc_r>:
 800881c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008820:	1ccd      	adds	r5, r1, #3
 8008822:	f025 0503 	bic.w	r5, r5, #3
 8008826:	3508      	adds	r5, #8
 8008828:	2d0c      	cmp	r5, #12
 800882a:	bf38      	it	cc
 800882c:	250c      	movcc	r5, #12
 800882e:	2d00      	cmp	r5, #0
 8008830:	4607      	mov	r7, r0
 8008832:	db01      	blt.n	8008838 <_malloc_r+0x1c>
 8008834:	42a9      	cmp	r1, r5
 8008836:	d905      	bls.n	8008844 <_malloc_r+0x28>
 8008838:	230c      	movs	r3, #12
 800883a:	603b      	str	r3, [r7, #0]
 800883c:	2600      	movs	r6, #0
 800883e:	4630      	mov	r0, r6
 8008840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008844:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008918 <_malloc_r+0xfc>
 8008848:	f000 f868 	bl	800891c <__malloc_lock>
 800884c:	f8d8 3000 	ldr.w	r3, [r8]
 8008850:	461c      	mov	r4, r3
 8008852:	bb5c      	cbnz	r4, 80088ac <_malloc_r+0x90>
 8008854:	4629      	mov	r1, r5
 8008856:	4638      	mov	r0, r7
 8008858:	f7ff ffc0 	bl	80087dc <sbrk_aligned>
 800885c:	1c43      	adds	r3, r0, #1
 800885e:	4604      	mov	r4, r0
 8008860:	d155      	bne.n	800890e <_malloc_r+0xf2>
 8008862:	f8d8 4000 	ldr.w	r4, [r8]
 8008866:	4626      	mov	r6, r4
 8008868:	2e00      	cmp	r6, #0
 800886a:	d145      	bne.n	80088f8 <_malloc_r+0xdc>
 800886c:	2c00      	cmp	r4, #0
 800886e:	d048      	beq.n	8008902 <_malloc_r+0xe6>
 8008870:	6823      	ldr	r3, [r4, #0]
 8008872:	4631      	mov	r1, r6
 8008874:	4638      	mov	r0, r7
 8008876:	eb04 0903 	add.w	r9, r4, r3
 800887a:	f000 fe5f 	bl	800953c <_sbrk_r>
 800887e:	4581      	cmp	r9, r0
 8008880:	d13f      	bne.n	8008902 <_malloc_r+0xe6>
 8008882:	6821      	ldr	r1, [r4, #0]
 8008884:	1a6d      	subs	r5, r5, r1
 8008886:	4629      	mov	r1, r5
 8008888:	4638      	mov	r0, r7
 800888a:	f7ff ffa7 	bl	80087dc <sbrk_aligned>
 800888e:	3001      	adds	r0, #1
 8008890:	d037      	beq.n	8008902 <_malloc_r+0xe6>
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	442b      	add	r3, r5
 8008896:	6023      	str	r3, [r4, #0]
 8008898:	f8d8 3000 	ldr.w	r3, [r8]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d038      	beq.n	8008912 <_malloc_r+0xf6>
 80088a0:	685a      	ldr	r2, [r3, #4]
 80088a2:	42a2      	cmp	r2, r4
 80088a4:	d12b      	bne.n	80088fe <_malloc_r+0xe2>
 80088a6:	2200      	movs	r2, #0
 80088a8:	605a      	str	r2, [r3, #4]
 80088aa:	e00f      	b.n	80088cc <_malloc_r+0xb0>
 80088ac:	6822      	ldr	r2, [r4, #0]
 80088ae:	1b52      	subs	r2, r2, r5
 80088b0:	d41f      	bmi.n	80088f2 <_malloc_r+0xd6>
 80088b2:	2a0b      	cmp	r2, #11
 80088b4:	d917      	bls.n	80088e6 <_malloc_r+0xca>
 80088b6:	1961      	adds	r1, r4, r5
 80088b8:	42a3      	cmp	r3, r4
 80088ba:	6025      	str	r5, [r4, #0]
 80088bc:	bf18      	it	ne
 80088be:	6059      	strne	r1, [r3, #4]
 80088c0:	6863      	ldr	r3, [r4, #4]
 80088c2:	bf08      	it	eq
 80088c4:	f8c8 1000 	streq.w	r1, [r8]
 80088c8:	5162      	str	r2, [r4, r5]
 80088ca:	604b      	str	r3, [r1, #4]
 80088cc:	4638      	mov	r0, r7
 80088ce:	f104 060b 	add.w	r6, r4, #11
 80088d2:	f000 f829 	bl	8008928 <__malloc_unlock>
 80088d6:	f026 0607 	bic.w	r6, r6, #7
 80088da:	1d23      	adds	r3, r4, #4
 80088dc:	1af2      	subs	r2, r6, r3
 80088de:	d0ae      	beq.n	800883e <_malloc_r+0x22>
 80088e0:	1b9b      	subs	r3, r3, r6
 80088e2:	50a3      	str	r3, [r4, r2]
 80088e4:	e7ab      	b.n	800883e <_malloc_r+0x22>
 80088e6:	42a3      	cmp	r3, r4
 80088e8:	6862      	ldr	r2, [r4, #4]
 80088ea:	d1dd      	bne.n	80088a8 <_malloc_r+0x8c>
 80088ec:	f8c8 2000 	str.w	r2, [r8]
 80088f0:	e7ec      	b.n	80088cc <_malloc_r+0xb0>
 80088f2:	4623      	mov	r3, r4
 80088f4:	6864      	ldr	r4, [r4, #4]
 80088f6:	e7ac      	b.n	8008852 <_malloc_r+0x36>
 80088f8:	4634      	mov	r4, r6
 80088fa:	6876      	ldr	r6, [r6, #4]
 80088fc:	e7b4      	b.n	8008868 <_malloc_r+0x4c>
 80088fe:	4613      	mov	r3, r2
 8008900:	e7cc      	b.n	800889c <_malloc_r+0x80>
 8008902:	230c      	movs	r3, #12
 8008904:	603b      	str	r3, [r7, #0]
 8008906:	4638      	mov	r0, r7
 8008908:	f000 f80e 	bl	8008928 <__malloc_unlock>
 800890c:	e797      	b.n	800883e <_malloc_r+0x22>
 800890e:	6025      	str	r5, [r4, #0]
 8008910:	e7dc      	b.n	80088cc <_malloc_r+0xb0>
 8008912:	605b      	str	r3, [r3, #4]
 8008914:	deff      	udf	#255	; 0xff
 8008916:	bf00      	nop
 8008918:	20001dc0 	.word	0x20001dc0

0800891c <__malloc_lock>:
 800891c:	4801      	ldr	r0, [pc, #4]	; (8008924 <__malloc_lock+0x8>)
 800891e:	f7ff b87e 	b.w	8007a1e <__retarget_lock_acquire_recursive>
 8008922:	bf00      	nop
 8008924:	20001dbc 	.word	0x20001dbc

08008928 <__malloc_unlock>:
 8008928:	4801      	ldr	r0, [pc, #4]	; (8008930 <__malloc_unlock+0x8>)
 800892a:	f7ff b879 	b.w	8007a20 <__retarget_lock_release_recursive>
 800892e:	bf00      	nop
 8008930:	20001dbc 	.word	0x20001dbc

08008934 <_Balloc>:
 8008934:	b570      	push	{r4, r5, r6, lr}
 8008936:	69c6      	ldr	r6, [r0, #28]
 8008938:	4604      	mov	r4, r0
 800893a:	460d      	mov	r5, r1
 800893c:	b976      	cbnz	r6, 800895c <_Balloc+0x28>
 800893e:	2010      	movs	r0, #16
 8008940:	f7ff ff44 	bl	80087cc <malloc>
 8008944:	4602      	mov	r2, r0
 8008946:	61e0      	str	r0, [r4, #28]
 8008948:	b920      	cbnz	r0, 8008954 <_Balloc+0x20>
 800894a:	4b18      	ldr	r3, [pc, #96]	; (80089ac <_Balloc+0x78>)
 800894c:	4818      	ldr	r0, [pc, #96]	; (80089b0 <_Balloc+0x7c>)
 800894e:	216b      	movs	r1, #107	; 0x6b
 8008950:	f000 fe04 	bl	800955c <__assert_func>
 8008954:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008958:	6006      	str	r6, [r0, #0]
 800895a:	60c6      	str	r6, [r0, #12]
 800895c:	69e6      	ldr	r6, [r4, #28]
 800895e:	68f3      	ldr	r3, [r6, #12]
 8008960:	b183      	cbz	r3, 8008984 <_Balloc+0x50>
 8008962:	69e3      	ldr	r3, [r4, #28]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800896a:	b9b8      	cbnz	r0, 800899c <_Balloc+0x68>
 800896c:	2101      	movs	r1, #1
 800896e:	fa01 f605 	lsl.w	r6, r1, r5
 8008972:	1d72      	adds	r2, r6, #5
 8008974:	0092      	lsls	r2, r2, #2
 8008976:	4620      	mov	r0, r4
 8008978:	f000 fe0e 	bl	8009598 <_calloc_r>
 800897c:	b160      	cbz	r0, 8008998 <_Balloc+0x64>
 800897e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008982:	e00e      	b.n	80089a2 <_Balloc+0x6e>
 8008984:	2221      	movs	r2, #33	; 0x21
 8008986:	2104      	movs	r1, #4
 8008988:	4620      	mov	r0, r4
 800898a:	f000 fe05 	bl	8009598 <_calloc_r>
 800898e:	69e3      	ldr	r3, [r4, #28]
 8008990:	60f0      	str	r0, [r6, #12]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1e4      	bne.n	8008962 <_Balloc+0x2e>
 8008998:	2000      	movs	r0, #0
 800899a:	bd70      	pop	{r4, r5, r6, pc}
 800899c:	6802      	ldr	r2, [r0, #0]
 800899e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089a2:	2300      	movs	r3, #0
 80089a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089a8:	e7f7      	b.n	800899a <_Balloc+0x66>
 80089aa:	bf00      	nop
 80089ac:	080098f9 	.word	0x080098f9
 80089b0:	08009979 	.word	0x08009979

080089b4 <_Bfree>:
 80089b4:	b570      	push	{r4, r5, r6, lr}
 80089b6:	69c6      	ldr	r6, [r0, #28]
 80089b8:	4605      	mov	r5, r0
 80089ba:	460c      	mov	r4, r1
 80089bc:	b976      	cbnz	r6, 80089dc <_Bfree+0x28>
 80089be:	2010      	movs	r0, #16
 80089c0:	f7ff ff04 	bl	80087cc <malloc>
 80089c4:	4602      	mov	r2, r0
 80089c6:	61e8      	str	r0, [r5, #28]
 80089c8:	b920      	cbnz	r0, 80089d4 <_Bfree+0x20>
 80089ca:	4b09      	ldr	r3, [pc, #36]	; (80089f0 <_Bfree+0x3c>)
 80089cc:	4809      	ldr	r0, [pc, #36]	; (80089f4 <_Bfree+0x40>)
 80089ce:	218f      	movs	r1, #143	; 0x8f
 80089d0:	f000 fdc4 	bl	800955c <__assert_func>
 80089d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089d8:	6006      	str	r6, [r0, #0]
 80089da:	60c6      	str	r6, [r0, #12]
 80089dc:	b13c      	cbz	r4, 80089ee <_Bfree+0x3a>
 80089de:	69eb      	ldr	r3, [r5, #28]
 80089e0:	6862      	ldr	r2, [r4, #4]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089e8:	6021      	str	r1, [r4, #0]
 80089ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089ee:	bd70      	pop	{r4, r5, r6, pc}
 80089f0:	080098f9 	.word	0x080098f9
 80089f4:	08009979 	.word	0x08009979

080089f8 <__multadd>:
 80089f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089fc:	690d      	ldr	r5, [r1, #16]
 80089fe:	4607      	mov	r7, r0
 8008a00:	460c      	mov	r4, r1
 8008a02:	461e      	mov	r6, r3
 8008a04:	f101 0c14 	add.w	ip, r1, #20
 8008a08:	2000      	movs	r0, #0
 8008a0a:	f8dc 3000 	ldr.w	r3, [ip]
 8008a0e:	b299      	uxth	r1, r3
 8008a10:	fb02 6101 	mla	r1, r2, r1, r6
 8008a14:	0c1e      	lsrs	r6, r3, #16
 8008a16:	0c0b      	lsrs	r3, r1, #16
 8008a18:	fb02 3306 	mla	r3, r2, r6, r3
 8008a1c:	b289      	uxth	r1, r1
 8008a1e:	3001      	adds	r0, #1
 8008a20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a24:	4285      	cmp	r5, r0
 8008a26:	f84c 1b04 	str.w	r1, [ip], #4
 8008a2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a2e:	dcec      	bgt.n	8008a0a <__multadd+0x12>
 8008a30:	b30e      	cbz	r6, 8008a76 <__multadd+0x7e>
 8008a32:	68a3      	ldr	r3, [r4, #8]
 8008a34:	42ab      	cmp	r3, r5
 8008a36:	dc19      	bgt.n	8008a6c <__multadd+0x74>
 8008a38:	6861      	ldr	r1, [r4, #4]
 8008a3a:	4638      	mov	r0, r7
 8008a3c:	3101      	adds	r1, #1
 8008a3e:	f7ff ff79 	bl	8008934 <_Balloc>
 8008a42:	4680      	mov	r8, r0
 8008a44:	b928      	cbnz	r0, 8008a52 <__multadd+0x5a>
 8008a46:	4602      	mov	r2, r0
 8008a48:	4b0c      	ldr	r3, [pc, #48]	; (8008a7c <__multadd+0x84>)
 8008a4a:	480d      	ldr	r0, [pc, #52]	; (8008a80 <__multadd+0x88>)
 8008a4c:	21ba      	movs	r1, #186	; 0xba
 8008a4e:	f000 fd85 	bl	800955c <__assert_func>
 8008a52:	6922      	ldr	r2, [r4, #16]
 8008a54:	3202      	adds	r2, #2
 8008a56:	f104 010c 	add.w	r1, r4, #12
 8008a5a:	0092      	lsls	r2, r2, #2
 8008a5c:	300c      	adds	r0, #12
 8008a5e:	f7fe ffe0 	bl	8007a22 <memcpy>
 8008a62:	4621      	mov	r1, r4
 8008a64:	4638      	mov	r0, r7
 8008a66:	f7ff ffa5 	bl	80089b4 <_Bfree>
 8008a6a:	4644      	mov	r4, r8
 8008a6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a70:	3501      	adds	r5, #1
 8008a72:	615e      	str	r6, [r3, #20]
 8008a74:	6125      	str	r5, [r4, #16]
 8008a76:	4620      	mov	r0, r4
 8008a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a7c:	08009968 	.word	0x08009968
 8008a80:	08009979 	.word	0x08009979

08008a84 <__hi0bits>:
 8008a84:	0c03      	lsrs	r3, r0, #16
 8008a86:	041b      	lsls	r3, r3, #16
 8008a88:	b9d3      	cbnz	r3, 8008ac0 <__hi0bits+0x3c>
 8008a8a:	0400      	lsls	r0, r0, #16
 8008a8c:	2310      	movs	r3, #16
 8008a8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008a92:	bf04      	itt	eq
 8008a94:	0200      	lsleq	r0, r0, #8
 8008a96:	3308      	addeq	r3, #8
 8008a98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008a9c:	bf04      	itt	eq
 8008a9e:	0100      	lsleq	r0, r0, #4
 8008aa0:	3304      	addeq	r3, #4
 8008aa2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008aa6:	bf04      	itt	eq
 8008aa8:	0080      	lsleq	r0, r0, #2
 8008aaa:	3302      	addeq	r3, #2
 8008aac:	2800      	cmp	r0, #0
 8008aae:	db05      	blt.n	8008abc <__hi0bits+0x38>
 8008ab0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ab4:	f103 0301 	add.w	r3, r3, #1
 8008ab8:	bf08      	it	eq
 8008aba:	2320      	moveq	r3, #32
 8008abc:	4618      	mov	r0, r3
 8008abe:	4770      	bx	lr
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	e7e4      	b.n	8008a8e <__hi0bits+0xa>

08008ac4 <__lo0bits>:
 8008ac4:	6803      	ldr	r3, [r0, #0]
 8008ac6:	f013 0207 	ands.w	r2, r3, #7
 8008aca:	d00c      	beq.n	8008ae6 <__lo0bits+0x22>
 8008acc:	07d9      	lsls	r1, r3, #31
 8008ace:	d422      	bmi.n	8008b16 <__lo0bits+0x52>
 8008ad0:	079a      	lsls	r2, r3, #30
 8008ad2:	bf49      	itett	mi
 8008ad4:	085b      	lsrmi	r3, r3, #1
 8008ad6:	089b      	lsrpl	r3, r3, #2
 8008ad8:	6003      	strmi	r3, [r0, #0]
 8008ada:	2201      	movmi	r2, #1
 8008adc:	bf5c      	itt	pl
 8008ade:	6003      	strpl	r3, [r0, #0]
 8008ae0:	2202      	movpl	r2, #2
 8008ae2:	4610      	mov	r0, r2
 8008ae4:	4770      	bx	lr
 8008ae6:	b299      	uxth	r1, r3
 8008ae8:	b909      	cbnz	r1, 8008aee <__lo0bits+0x2a>
 8008aea:	0c1b      	lsrs	r3, r3, #16
 8008aec:	2210      	movs	r2, #16
 8008aee:	b2d9      	uxtb	r1, r3
 8008af0:	b909      	cbnz	r1, 8008af6 <__lo0bits+0x32>
 8008af2:	3208      	adds	r2, #8
 8008af4:	0a1b      	lsrs	r3, r3, #8
 8008af6:	0719      	lsls	r1, r3, #28
 8008af8:	bf04      	itt	eq
 8008afa:	091b      	lsreq	r3, r3, #4
 8008afc:	3204      	addeq	r2, #4
 8008afe:	0799      	lsls	r1, r3, #30
 8008b00:	bf04      	itt	eq
 8008b02:	089b      	lsreq	r3, r3, #2
 8008b04:	3202      	addeq	r2, #2
 8008b06:	07d9      	lsls	r1, r3, #31
 8008b08:	d403      	bmi.n	8008b12 <__lo0bits+0x4e>
 8008b0a:	085b      	lsrs	r3, r3, #1
 8008b0c:	f102 0201 	add.w	r2, r2, #1
 8008b10:	d003      	beq.n	8008b1a <__lo0bits+0x56>
 8008b12:	6003      	str	r3, [r0, #0]
 8008b14:	e7e5      	b.n	8008ae2 <__lo0bits+0x1e>
 8008b16:	2200      	movs	r2, #0
 8008b18:	e7e3      	b.n	8008ae2 <__lo0bits+0x1e>
 8008b1a:	2220      	movs	r2, #32
 8008b1c:	e7e1      	b.n	8008ae2 <__lo0bits+0x1e>
	...

08008b20 <__i2b>:
 8008b20:	b510      	push	{r4, lr}
 8008b22:	460c      	mov	r4, r1
 8008b24:	2101      	movs	r1, #1
 8008b26:	f7ff ff05 	bl	8008934 <_Balloc>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	b928      	cbnz	r0, 8008b3a <__i2b+0x1a>
 8008b2e:	4b05      	ldr	r3, [pc, #20]	; (8008b44 <__i2b+0x24>)
 8008b30:	4805      	ldr	r0, [pc, #20]	; (8008b48 <__i2b+0x28>)
 8008b32:	f240 1145 	movw	r1, #325	; 0x145
 8008b36:	f000 fd11 	bl	800955c <__assert_func>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	6144      	str	r4, [r0, #20]
 8008b3e:	6103      	str	r3, [r0, #16]
 8008b40:	bd10      	pop	{r4, pc}
 8008b42:	bf00      	nop
 8008b44:	08009968 	.word	0x08009968
 8008b48:	08009979 	.word	0x08009979

08008b4c <__multiply>:
 8008b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b50:	4691      	mov	r9, r2
 8008b52:	690a      	ldr	r2, [r1, #16]
 8008b54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	bfb8      	it	lt
 8008b5c:	460b      	movlt	r3, r1
 8008b5e:	460c      	mov	r4, r1
 8008b60:	bfbc      	itt	lt
 8008b62:	464c      	movlt	r4, r9
 8008b64:	4699      	movlt	r9, r3
 8008b66:	6927      	ldr	r7, [r4, #16]
 8008b68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008b6c:	68a3      	ldr	r3, [r4, #8]
 8008b6e:	6861      	ldr	r1, [r4, #4]
 8008b70:	eb07 060a 	add.w	r6, r7, sl
 8008b74:	42b3      	cmp	r3, r6
 8008b76:	b085      	sub	sp, #20
 8008b78:	bfb8      	it	lt
 8008b7a:	3101      	addlt	r1, #1
 8008b7c:	f7ff feda 	bl	8008934 <_Balloc>
 8008b80:	b930      	cbnz	r0, 8008b90 <__multiply+0x44>
 8008b82:	4602      	mov	r2, r0
 8008b84:	4b44      	ldr	r3, [pc, #272]	; (8008c98 <__multiply+0x14c>)
 8008b86:	4845      	ldr	r0, [pc, #276]	; (8008c9c <__multiply+0x150>)
 8008b88:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008b8c:	f000 fce6 	bl	800955c <__assert_func>
 8008b90:	f100 0514 	add.w	r5, r0, #20
 8008b94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008b98:	462b      	mov	r3, r5
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	4543      	cmp	r3, r8
 8008b9e:	d321      	bcc.n	8008be4 <__multiply+0x98>
 8008ba0:	f104 0314 	add.w	r3, r4, #20
 8008ba4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008ba8:	f109 0314 	add.w	r3, r9, #20
 8008bac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008bb0:	9202      	str	r2, [sp, #8]
 8008bb2:	1b3a      	subs	r2, r7, r4
 8008bb4:	3a15      	subs	r2, #21
 8008bb6:	f022 0203 	bic.w	r2, r2, #3
 8008bba:	3204      	adds	r2, #4
 8008bbc:	f104 0115 	add.w	r1, r4, #21
 8008bc0:	428f      	cmp	r7, r1
 8008bc2:	bf38      	it	cc
 8008bc4:	2204      	movcc	r2, #4
 8008bc6:	9201      	str	r2, [sp, #4]
 8008bc8:	9a02      	ldr	r2, [sp, #8]
 8008bca:	9303      	str	r3, [sp, #12]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d80c      	bhi.n	8008bea <__multiply+0x9e>
 8008bd0:	2e00      	cmp	r6, #0
 8008bd2:	dd03      	ble.n	8008bdc <__multiply+0x90>
 8008bd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d05b      	beq.n	8008c94 <__multiply+0x148>
 8008bdc:	6106      	str	r6, [r0, #16]
 8008bde:	b005      	add	sp, #20
 8008be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be4:	f843 2b04 	str.w	r2, [r3], #4
 8008be8:	e7d8      	b.n	8008b9c <__multiply+0x50>
 8008bea:	f8b3 a000 	ldrh.w	sl, [r3]
 8008bee:	f1ba 0f00 	cmp.w	sl, #0
 8008bf2:	d024      	beq.n	8008c3e <__multiply+0xf2>
 8008bf4:	f104 0e14 	add.w	lr, r4, #20
 8008bf8:	46a9      	mov	r9, r5
 8008bfa:	f04f 0c00 	mov.w	ip, #0
 8008bfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008c02:	f8d9 1000 	ldr.w	r1, [r9]
 8008c06:	fa1f fb82 	uxth.w	fp, r2
 8008c0a:	b289      	uxth	r1, r1
 8008c0c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008c10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008c14:	f8d9 2000 	ldr.w	r2, [r9]
 8008c18:	4461      	add	r1, ip
 8008c1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c1e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008c22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008c26:	b289      	uxth	r1, r1
 8008c28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c2c:	4577      	cmp	r7, lr
 8008c2e:	f849 1b04 	str.w	r1, [r9], #4
 8008c32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c36:	d8e2      	bhi.n	8008bfe <__multiply+0xb2>
 8008c38:	9a01      	ldr	r2, [sp, #4]
 8008c3a:	f845 c002 	str.w	ip, [r5, r2]
 8008c3e:	9a03      	ldr	r2, [sp, #12]
 8008c40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008c44:	3304      	adds	r3, #4
 8008c46:	f1b9 0f00 	cmp.w	r9, #0
 8008c4a:	d021      	beq.n	8008c90 <__multiply+0x144>
 8008c4c:	6829      	ldr	r1, [r5, #0]
 8008c4e:	f104 0c14 	add.w	ip, r4, #20
 8008c52:	46ae      	mov	lr, r5
 8008c54:	f04f 0a00 	mov.w	sl, #0
 8008c58:	f8bc b000 	ldrh.w	fp, [ip]
 8008c5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008c60:	fb09 220b 	mla	r2, r9, fp, r2
 8008c64:	4452      	add	r2, sl
 8008c66:	b289      	uxth	r1, r1
 8008c68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c6c:	f84e 1b04 	str.w	r1, [lr], #4
 8008c70:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008c74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008c78:	f8be 1000 	ldrh.w	r1, [lr]
 8008c7c:	fb09 110a 	mla	r1, r9, sl, r1
 8008c80:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008c84:	4567      	cmp	r7, ip
 8008c86:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008c8a:	d8e5      	bhi.n	8008c58 <__multiply+0x10c>
 8008c8c:	9a01      	ldr	r2, [sp, #4]
 8008c8e:	50a9      	str	r1, [r5, r2]
 8008c90:	3504      	adds	r5, #4
 8008c92:	e799      	b.n	8008bc8 <__multiply+0x7c>
 8008c94:	3e01      	subs	r6, #1
 8008c96:	e79b      	b.n	8008bd0 <__multiply+0x84>
 8008c98:	08009968 	.word	0x08009968
 8008c9c:	08009979 	.word	0x08009979

08008ca0 <__pow5mult>:
 8008ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ca4:	4615      	mov	r5, r2
 8008ca6:	f012 0203 	ands.w	r2, r2, #3
 8008caa:	4606      	mov	r6, r0
 8008cac:	460f      	mov	r7, r1
 8008cae:	d007      	beq.n	8008cc0 <__pow5mult+0x20>
 8008cb0:	4c25      	ldr	r4, [pc, #148]	; (8008d48 <__pow5mult+0xa8>)
 8008cb2:	3a01      	subs	r2, #1
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008cba:	f7ff fe9d 	bl	80089f8 <__multadd>
 8008cbe:	4607      	mov	r7, r0
 8008cc0:	10ad      	asrs	r5, r5, #2
 8008cc2:	d03d      	beq.n	8008d40 <__pow5mult+0xa0>
 8008cc4:	69f4      	ldr	r4, [r6, #28]
 8008cc6:	b97c      	cbnz	r4, 8008ce8 <__pow5mult+0x48>
 8008cc8:	2010      	movs	r0, #16
 8008cca:	f7ff fd7f 	bl	80087cc <malloc>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	61f0      	str	r0, [r6, #28]
 8008cd2:	b928      	cbnz	r0, 8008ce0 <__pow5mult+0x40>
 8008cd4:	4b1d      	ldr	r3, [pc, #116]	; (8008d4c <__pow5mult+0xac>)
 8008cd6:	481e      	ldr	r0, [pc, #120]	; (8008d50 <__pow5mult+0xb0>)
 8008cd8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008cdc:	f000 fc3e 	bl	800955c <__assert_func>
 8008ce0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ce4:	6004      	str	r4, [r0, #0]
 8008ce6:	60c4      	str	r4, [r0, #12]
 8008ce8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008cec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008cf0:	b94c      	cbnz	r4, 8008d06 <__pow5mult+0x66>
 8008cf2:	f240 2171 	movw	r1, #625	; 0x271
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	f7ff ff12 	bl	8008b20 <__i2b>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d02:	4604      	mov	r4, r0
 8008d04:	6003      	str	r3, [r0, #0]
 8008d06:	f04f 0900 	mov.w	r9, #0
 8008d0a:	07eb      	lsls	r3, r5, #31
 8008d0c:	d50a      	bpl.n	8008d24 <__pow5mult+0x84>
 8008d0e:	4639      	mov	r1, r7
 8008d10:	4622      	mov	r2, r4
 8008d12:	4630      	mov	r0, r6
 8008d14:	f7ff ff1a 	bl	8008b4c <__multiply>
 8008d18:	4639      	mov	r1, r7
 8008d1a:	4680      	mov	r8, r0
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	f7ff fe49 	bl	80089b4 <_Bfree>
 8008d22:	4647      	mov	r7, r8
 8008d24:	106d      	asrs	r5, r5, #1
 8008d26:	d00b      	beq.n	8008d40 <__pow5mult+0xa0>
 8008d28:	6820      	ldr	r0, [r4, #0]
 8008d2a:	b938      	cbnz	r0, 8008d3c <__pow5mult+0x9c>
 8008d2c:	4622      	mov	r2, r4
 8008d2e:	4621      	mov	r1, r4
 8008d30:	4630      	mov	r0, r6
 8008d32:	f7ff ff0b 	bl	8008b4c <__multiply>
 8008d36:	6020      	str	r0, [r4, #0]
 8008d38:	f8c0 9000 	str.w	r9, [r0]
 8008d3c:	4604      	mov	r4, r0
 8008d3e:	e7e4      	b.n	8008d0a <__pow5mult+0x6a>
 8008d40:	4638      	mov	r0, r7
 8008d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d46:	bf00      	nop
 8008d48:	08009ac8 	.word	0x08009ac8
 8008d4c:	080098f9 	.word	0x080098f9
 8008d50:	08009979 	.word	0x08009979

08008d54 <__lshift>:
 8008d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d58:	460c      	mov	r4, r1
 8008d5a:	6849      	ldr	r1, [r1, #4]
 8008d5c:	6923      	ldr	r3, [r4, #16]
 8008d5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d62:	68a3      	ldr	r3, [r4, #8]
 8008d64:	4607      	mov	r7, r0
 8008d66:	4691      	mov	r9, r2
 8008d68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d6c:	f108 0601 	add.w	r6, r8, #1
 8008d70:	42b3      	cmp	r3, r6
 8008d72:	db0b      	blt.n	8008d8c <__lshift+0x38>
 8008d74:	4638      	mov	r0, r7
 8008d76:	f7ff fddd 	bl	8008934 <_Balloc>
 8008d7a:	4605      	mov	r5, r0
 8008d7c:	b948      	cbnz	r0, 8008d92 <__lshift+0x3e>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	4b28      	ldr	r3, [pc, #160]	; (8008e24 <__lshift+0xd0>)
 8008d82:	4829      	ldr	r0, [pc, #164]	; (8008e28 <__lshift+0xd4>)
 8008d84:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008d88:	f000 fbe8 	bl	800955c <__assert_func>
 8008d8c:	3101      	adds	r1, #1
 8008d8e:	005b      	lsls	r3, r3, #1
 8008d90:	e7ee      	b.n	8008d70 <__lshift+0x1c>
 8008d92:	2300      	movs	r3, #0
 8008d94:	f100 0114 	add.w	r1, r0, #20
 8008d98:	f100 0210 	add.w	r2, r0, #16
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	4553      	cmp	r3, sl
 8008da0:	db33      	blt.n	8008e0a <__lshift+0xb6>
 8008da2:	6920      	ldr	r0, [r4, #16]
 8008da4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008da8:	f104 0314 	add.w	r3, r4, #20
 8008dac:	f019 091f 	ands.w	r9, r9, #31
 8008db0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008db4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008db8:	d02b      	beq.n	8008e12 <__lshift+0xbe>
 8008dba:	f1c9 0e20 	rsb	lr, r9, #32
 8008dbe:	468a      	mov	sl, r1
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	6818      	ldr	r0, [r3, #0]
 8008dc4:	fa00 f009 	lsl.w	r0, r0, r9
 8008dc8:	4310      	orrs	r0, r2
 8008dca:	f84a 0b04 	str.w	r0, [sl], #4
 8008dce:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dd2:	459c      	cmp	ip, r3
 8008dd4:	fa22 f20e 	lsr.w	r2, r2, lr
 8008dd8:	d8f3      	bhi.n	8008dc2 <__lshift+0x6e>
 8008dda:	ebac 0304 	sub.w	r3, ip, r4
 8008dde:	3b15      	subs	r3, #21
 8008de0:	f023 0303 	bic.w	r3, r3, #3
 8008de4:	3304      	adds	r3, #4
 8008de6:	f104 0015 	add.w	r0, r4, #21
 8008dea:	4584      	cmp	ip, r0
 8008dec:	bf38      	it	cc
 8008dee:	2304      	movcc	r3, #4
 8008df0:	50ca      	str	r2, [r1, r3]
 8008df2:	b10a      	cbz	r2, 8008df8 <__lshift+0xa4>
 8008df4:	f108 0602 	add.w	r6, r8, #2
 8008df8:	3e01      	subs	r6, #1
 8008dfa:	4638      	mov	r0, r7
 8008dfc:	612e      	str	r6, [r5, #16]
 8008dfe:	4621      	mov	r1, r4
 8008e00:	f7ff fdd8 	bl	80089b4 <_Bfree>
 8008e04:	4628      	mov	r0, r5
 8008e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e0e:	3301      	adds	r3, #1
 8008e10:	e7c5      	b.n	8008d9e <__lshift+0x4a>
 8008e12:	3904      	subs	r1, #4
 8008e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e18:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e1c:	459c      	cmp	ip, r3
 8008e1e:	d8f9      	bhi.n	8008e14 <__lshift+0xc0>
 8008e20:	e7ea      	b.n	8008df8 <__lshift+0xa4>
 8008e22:	bf00      	nop
 8008e24:	08009968 	.word	0x08009968
 8008e28:	08009979 	.word	0x08009979

08008e2c <__mcmp>:
 8008e2c:	b530      	push	{r4, r5, lr}
 8008e2e:	6902      	ldr	r2, [r0, #16]
 8008e30:	690c      	ldr	r4, [r1, #16]
 8008e32:	1b12      	subs	r2, r2, r4
 8008e34:	d10e      	bne.n	8008e54 <__mcmp+0x28>
 8008e36:	f100 0314 	add.w	r3, r0, #20
 8008e3a:	3114      	adds	r1, #20
 8008e3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008e40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008e44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008e48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e4c:	42a5      	cmp	r5, r4
 8008e4e:	d003      	beq.n	8008e58 <__mcmp+0x2c>
 8008e50:	d305      	bcc.n	8008e5e <__mcmp+0x32>
 8008e52:	2201      	movs	r2, #1
 8008e54:	4610      	mov	r0, r2
 8008e56:	bd30      	pop	{r4, r5, pc}
 8008e58:	4283      	cmp	r3, r0
 8008e5a:	d3f3      	bcc.n	8008e44 <__mcmp+0x18>
 8008e5c:	e7fa      	b.n	8008e54 <__mcmp+0x28>
 8008e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e62:	e7f7      	b.n	8008e54 <__mcmp+0x28>

08008e64 <__mdiff>:
 8008e64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e68:	460c      	mov	r4, r1
 8008e6a:	4606      	mov	r6, r0
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	4620      	mov	r0, r4
 8008e70:	4690      	mov	r8, r2
 8008e72:	f7ff ffdb 	bl	8008e2c <__mcmp>
 8008e76:	1e05      	subs	r5, r0, #0
 8008e78:	d110      	bne.n	8008e9c <__mdiff+0x38>
 8008e7a:	4629      	mov	r1, r5
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	f7ff fd59 	bl	8008934 <_Balloc>
 8008e82:	b930      	cbnz	r0, 8008e92 <__mdiff+0x2e>
 8008e84:	4b3a      	ldr	r3, [pc, #232]	; (8008f70 <__mdiff+0x10c>)
 8008e86:	4602      	mov	r2, r0
 8008e88:	f240 2137 	movw	r1, #567	; 0x237
 8008e8c:	4839      	ldr	r0, [pc, #228]	; (8008f74 <__mdiff+0x110>)
 8008e8e:	f000 fb65 	bl	800955c <__assert_func>
 8008e92:	2301      	movs	r3, #1
 8008e94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e9c:	bfa4      	itt	ge
 8008e9e:	4643      	movge	r3, r8
 8008ea0:	46a0      	movge	r8, r4
 8008ea2:	4630      	mov	r0, r6
 8008ea4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008ea8:	bfa6      	itte	ge
 8008eaa:	461c      	movge	r4, r3
 8008eac:	2500      	movge	r5, #0
 8008eae:	2501      	movlt	r5, #1
 8008eb0:	f7ff fd40 	bl	8008934 <_Balloc>
 8008eb4:	b920      	cbnz	r0, 8008ec0 <__mdiff+0x5c>
 8008eb6:	4b2e      	ldr	r3, [pc, #184]	; (8008f70 <__mdiff+0x10c>)
 8008eb8:	4602      	mov	r2, r0
 8008eba:	f240 2145 	movw	r1, #581	; 0x245
 8008ebe:	e7e5      	b.n	8008e8c <__mdiff+0x28>
 8008ec0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008ec4:	6926      	ldr	r6, [r4, #16]
 8008ec6:	60c5      	str	r5, [r0, #12]
 8008ec8:	f104 0914 	add.w	r9, r4, #20
 8008ecc:	f108 0514 	add.w	r5, r8, #20
 8008ed0:	f100 0e14 	add.w	lr, r0, #20
 8008ed4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008ed8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008edc:	f108 0210 	add.w	r2, r8, #16
 8008ee0:	46f2      	mov	sl, lr
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ee8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008eec:	fa11 f88b 	uxtah	r8, r1, fp
 8008ef0:	b299      	uxth	r1, r3
 8008ef2:	0c1b      	lsrs	r3, r3, #16
 8008ef4:	eba8 0801 	sub.w	r8, r8, r1
 8008ef8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008efc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008f00:	fa1f f888 	uxth.w	r8, r8
 8008f04:	1419      	asrs	r1, r3, #16
 8008f06:	454e      	cmp	r6, r9
 8008f08:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008f0c:	f84a 3b04 	str.w	r3, [sl], #4
 8008f10:	d8e8      	bhi.n	8008ee4 <__mdiff+0x80>
 8008f12:	1b33      	subs	r3, r6, r4
 8008f14:	3b15      	subs	r3, #21
 8008f16:	f023 0303 	bic.w	r3, r3, #3
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	3415      	adds	r4, #21
 8008f1e:	42a6      	cmp	r6, r4
 8008f20:	bf38      	it	cc
 8008f22:	2304      	movcc	r3, #4
 8008f24:	441d      	add	r5, r3
 8008f26:	4473      	add	r3, lr
 8008f28:	469e      	mov	lr, r3
 8008f2a:	462e      	mov	r6, r5
 8008f2c:	4566      	cmp	r6, ip
 8008f2e:	d30e      	bcc.n	8008f4e <__mdiff+0xea>
 8008f30:	f10c 0203 	add.w	r2, ip, #3
 8008f34:	1b52      	subs	r2, r2, r5
 8008f36:	f022 0203 	bic.w	r2, r2, #3
 8008f3a:	3d03      	subs	r5, #3
 8008f3c:	45ac      	cmp	ip, r5
 8008f3e:	bf38      	it	cc
 8008f40:	2200      	movcc	r2, #0
 8008f42:	4413      	add	r3, r2
 8008f44:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008f48:	b17a      	cbz	r2, 8008f6a <__mdiff+0x106>
 8008f4a:	6107      	str	r7, [r0, #16]
 8008f4c:	e7a4      	b.n	8008e98 <__mdiff+0x34>
 8008f4e:	f856 8b04 	ldr.w	r8, [r6], #4
 8008f52:	fa11 f288 	uxtah	r2, r1, r8
 8008f56:	1414      	asrs	r4, r2, #16
 8008f58:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008f5c:	b292      	uxth	r2, r2
 8008f5e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008f62:	f84e 2b04 	str.w	r2, [lr], #4
 8008f66:	1421      	asrs	r1, r4, #16
 8008f68:	e7e0      	b.n	8008f2c <__mdiff+0xc8>
 8008f6a:	3f01      	subs	r7, #1
 8008f6c:	e7ea      	b.n	8008f44 <__mdiff+0xe0>
 8008f6e:	bf00      	nop
 8008f70:	08009968 	.word	0x08009968
 8008f74:	08009979 	.word	0x08009979

08008f78 <__d2b>:
 8008f78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f7c:	460f      	mov	r7, r1
 8008f7e:	2101      	movs	r1, #1
 8008f80:	ec59 8b10 	vmov	r8, r9, d0
 8008f84:	4616      	mov	r6, r2
 8008f86:	f7ff fcd5 	bl	8008934 <_Balloc>
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	b930      	cbnz	r0, 8008f9c <__d2b+0x24>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	4b24      	ldr	r3, [pc, #144]	; (8009024 <__d2b+0xac>)
 8008f92:	4825      	ldr	r0, [pc, #148]	; (8009028 <__d2b+0xb0>)
 8008f94:	f240 310f 	movw	r1, #783	; 0x30f
 8008f98:	f000 fae0 	bl	800955c <__assert_func>
 8008f9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008fa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008fa4:	bb2d      	cbnz	r5, 8008ff2 <__d2b+0x7a>
 8008fa6:	9301      	str	r3, [sp, #4]
 8008fa8:	f1b8 0300 	subs.w	r3, r8, #0
 8008fac:	d026      	beq.n	8008ffc <__d2b+0x84>
 8008fae:	4668      	mov	r0, sp
 8008fb0:	9300      	str	r3, [sp, #0]
 8008fb2:	f7ff fd87 	bl	8008ac4 <__lo0bits>
 8008fb6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008fba:	b1e8      	cbz	r0, 8008ff8 <__d2b+0x80>
 8008fbc:	f1c0 0320 	rsb	r3, r0, #32
 8008fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc4:	430b      	orrs	r3, r1
 8008fc6:	40c2      	lsrs	r2, r0
 8008fc8:	6163      	str	r3, [r4, #20]
 8008fca:	9201      	str	r2, [sp, #4]
 8008fcc:	9b01      	ldr	r3, [sp, #4]
 8008fce:	61a3      	str	r3, [r4, #24]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	bf14      	ite	ne
 8008fd4:	2202      	movne	r2, #2
 8008fd6:	2201      	moveq	r2, #1
 8008fd8:	6122      	str	r2, [r4, #16]
 8008fda:	b1bd      	cbz	r5, 800900c <__d2b+0x94>
 8008fdc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008fe0:	4405      	add	r5, r0
 8008fe2:	603d      	str	r5, [r7, #0]
 8008fe4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008fe8:	6030      	str	r0, [r6, #0]
 8008fea:	4620      	mov	r0, r4
 8008fec:	b003      	add	sp, #12
 8008fee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ff2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ff6:	e7d6      	b.n	8008fa6 <__d2b+0x2e>
 8008ff8:	6161      	str	r1, [r4, #20]
 8008ffa:	e7e7      	b.n	8008fcc <__d2b+0x54>
 8008ffc:	a801      	add	r0, sp, #4
 8008ffe:	f7ff fd61 	bl	8008ac4 <__lo0bits>
 8009002:	9b01      	ldr	r3, [sp, #4]
 8009004:	6163      	str	r3, [r4, #20]
 8009006:	3020      	adds	r0, #32
 8009008:	2201      	movs	r2, #1
 800900a:	e7e5      	b.n	8008fd8 <__d2b+0x60>
 800900c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009010:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009014:	6038      	str	r0, [r7, #0]
 8009016:	6918      	ldr	r0, [r3, #16]
 8009018:	f7ff fd34 	bl	8008a84 <__hi0bits>
 800901c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009020:	e7e2      	b.n	8008fe8 <__d2b+0x70>
 8009022:	bf00      	nop
 8009024:	08009968 	.word	0x08009968
 8009028:	08009979 	.word	0x08009979

0800902c <__sfputc_r>:
 800902c:	6893      	ldr	r3, [r2, #8]
 800902e:	3b01      	subs	r3, #1
 8009030:	2b00      	cmp	r3, #0
 8009032:	b410      	push	{r4}
 8009034:	6093      	str	r3, [r2, #8]
 8009036:	da08      	bge.n	800904a <__sfputc_r+0x1e>
 8009038:	6994      	ldr	r4, [r2, #24]
 800903a:	42a3      	cmp	r3, r4
 800903c:	db01      	blt.n	8009042 <__sfputc_r+0x16>
 800903e:	290a      	cmp	r1, #10
 8009040:	d103      	bne.n	800904a <__sfputc_r+0x1e>
 8009042:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009046:	f000 b9e3 	b.w	8009410 <__swbuf_r>
 800904a:	6813      	ldr	r3, [r2, #0]
 800904c:	1c58      	adds	r0, r3, #1
 800904e:	6010      	str	r0, [r2, #0]
 8009050:	7019      	strb	r1, [r3, #0]
 8009052:	4608      	mov	r0, r1
 8009054:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009058:	4770      	bx	lr

0800905a <__sfputs_r>:
 800905a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905c:	4606      	mov	r6, r0
 800905e:	460f      	mov	r7, r1
 8009060:	4614      	mov	r4, r2
 8009062:	18d5      	adds	r5, r2, r3
 8009064:	42ac      	cmp	r4, r5
 8009066:	d101      	bne.n	800906c <__sfputs_r+0x12>
 8009068:	2000      	movs	r0, #0
 800906a:	e007      	b.n	800907c <__sfputs_r+0x22>
 800906c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009070:	463a      	mov	r2, r7
 8009072:	4630      	mov	r0, r6
 8009074:	f7ff ffda 	bl	800902c <__sfputc_r>
 8009078:	1c43      	adds	r3, r0, #1
 800907a:	d1f3      	bne.n	8009064 <__sfputs_r+0xa>
 800907c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009080 <_vfiprintf_r>:
 8009080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009084:	460d      	mov	r5, r1
 8009086:	b09d      	sub	sp, #116	; 0x74
 8009088:	4614      	mov	r4, r2
 800908a:	4698      	mov	r8, r3
 800908c:	4606      	mov	r6, r0
 800908e:	b118      	cbz	r0, 8009098 <_vfiprintf_r+0x18>
 8009090:	6a03      	ldr	r3, [r0, #32]
 8009092:	b90b      	cbnz	r3, 8009098 <_vfiprintf_r+0x18>
 8009094:	f7fe fb64 	bl	8007760 <__sinit>
 8009098:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800909a:	07d9      	lsls	r1, r3, #31
 800909c:	d405      	bmi.n	80090aa <_vfiprintf_r+0x2a>
 800909e:	89ab      	ldrh	r3, [r5, #12]
 80090a0:	059a      	lsls	r2, r3, #22
 80090a2:	d402      	bmi.n	80090aa <_vfiprintf_r+0x2a>
 80090a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090a6:	f7fe fcba 	bl	8007a1e <__retarget_lock_acquire_recursive>
 80090aa:	89ab      	ldrh	r3, [r5, #12]
 80090ac:	071b      	lsls	r3, r3, #28
 80090ae:	d501      	bpl.n	80090b4 <_vfiprintf_r+0x34>
 80090b0:	692b      	ldr	r3, [r5, #16]
 80090b2:	b99b      	cbnz	r3, 80090dc <_vfiprintf_r+0x5c>
 80090b4:	4629      	mov	r1, r5
 80090b6:	4630      	mov	r0, r6
 80090b8:	f000 f9e8 	bl	800948c <__swsetup_r>
 80090bc:	b170      	cbz	r0, 80090dc <_vfiprintf_r+0x5c>
 80090be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090c0:	07dc      	lsls	r4, r3, #31
 80090c2:	d504      	bpl.n	80090ce <_vfiprintf_r+0x4e>
 80090c4:	f04f 30ff 	mov.w	r0, #4294967295
 80090c8:	b01d      	add	sp, #116	; 0x74
 80090ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ce:	89ab      	ldrh	r3, [r5, #12]
 80090d0:	0598      	lsls	r0, r3, #22
 80090d2:	d4f7      	bmi.n	80090c4 <_vfiprintf_r+0x44>
 80090d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090d6:	f7fe fca3 	bl	8007a20 <__retarget_lock_release_recursive>
 80090da:	e7f3      	b.n	80090c4 <_vfiprintf_r+0x44>
 80090dc:	2300      	movs	r3, #0
 80090de:	9309      	str	r3, [sp, #36]	; 0x24
 80090e0:	2320      	movs	r3, #32
 80090e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80090ea:	2330      	movs	r3, #48	; 0x30
 80090ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80092a0 <_vfiprintf_r+0x220>
 80090f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090f4:	f04f 0901 	mov.w	r9, #1
 80090f8:	4623      	mov	r3, r4
 80090fa:	469a      	mov	sl, r3
 80090fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009100:	b10a      	cbz	r2, 8009106 <_vfiprintf_r+0x86>
 8009102:	2a25      	cmp	r2, #37	; 0x25
 8009104:	d1f9      	bne.n	80090fa <_vfiprintf_r+0x7a>
 8009106:	ebba 0b04 	subs.w	fp, sl, r4
 800910a:	d00b      	beq.n	8009124 <_vfiprintf_r+0xa4>
 800910c:	465b      	mov	r3, fp
 800910e:	4622      	mov	r2, r4
 8009110:	4629      	mov	r1, r5
 8009112:	4630      	mov	r0, r6
 8009114:	f7ff ffa1 	bl	800905a <__sfputs_r>
 8009118:	3001      	adds	r0, #1
 800911a:	f000 80a9 	beq.w	8009270 <_vfiprintf_r+0x1f0>
 800911e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009120:	445a      	add	r2, fp
 8009122:	9209      	str	r2, [sp, #36]	; 0x24
 8009124:	f89a 3000 	ldrb.w	r3, [sl]
 8009128:	2b00      	cmp	r3, #0
 800912a:	f000 80a1 	beq.w	8009270 <_vfiprintf_r+0x1f0>
 800912e:	2300      	movs	r3, #0
 8009130:	f04f 32ff 	mov.w	r2, #4294967295
 8009134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009138:	f10a 0a01 	add.w	sl, sl, #1
 800913c:	9304      	str	r3, [sp, #16]
 800913e:	9307      	str	r3, [sp, #28]
 8009140:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009144:	931a      	str	r3, [sp, #104]	; 0x68
 8009146:	4654      	mov	r4, sl
 8009148:	2205      	movs	r2, #5
 800914a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800914e:	4854      	ldr	r0, [pc, #336]	; (80092a0 <_vfiprintf_r+0x220>)
 8009150:	f7f7 f83e 	bl	80001d0 <memchr>
 8009154:	9a04      	ldr	r2, [sp, #16]
 8009156:	b9d8      	cbnz	r0, 8009190 <_vfiprintf_r+0x110>
 8009158:	06d1      	lsls	r1, r2, #27
 800915a:	bf44      	itt	mi
 800915c:	2320      	movmi	r3, #32
 800915e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009162:	0713      	lsls	r3, r2, #28
 8009164:	bf44      	itt	mi
 8009166:	232b      	movmi	r3, #43	; 0x2b
 8009168:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800916c:	f89a 3000 	ldrb.w	r3, [sl]
 8009170:	2b2a      	cmp	r3, #42	; 0x2a
 8009172:	d015      	beq.n	80091a0 <_vfiprintf_r+0x120>
 8009174:	9a07      	ldr	r2, [sp, #28]
 8009176:	4654      	mov	r4, sl
 8009178:	2000      	movs	r0, #0
 800917a:	f04f 0c0a 	mov.w	ip, #10
 800917e:	4621      	mov	r1, r4
 8009180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009184:	3b30      	subs	r3, #48	; 0x30
 8009186:	2b09      	cmp	r3, #9
 8009188:	d94d      	bls.n	8009226 <_vfiprintf_r+0x1a6>
 800918a:	b1b0      	cbz	r0, 80091ba <_vfiprintf_r+0x13a>
 800918c:	9207      	str	r2, [sp, #28]
 800918e:	e014      	b.n	80091ba <_vfiprintf_r+0x13a>
 8009190:	eba0 0308 	sub.w	r3, r0, r8
 8009194:	fa09 f303 	lsl.w	r3, r9, r3
 8009198:	4313      	orrs	r3, r2
 800919a:	9304      	str	r3, [sp, #16]
 800919c:	46a2      	mov	sl, r4
 800919e:	e7d2      	b.n	8009146 <_vfiprintf_r+0xc6>
 80091a0:	9b03      	ldr	r3, [sp, #12]
 80091a2:	1d19      	adds	r1, r3, #4
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	9103      	str	r1, [sp, #12]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	bfbb      	ittet	lt
 80091ac:	425b      	neglt	r3, r3
 80091ae:	f042 0202 	orrlt.w	r2, r2, #2
 80091b2:	9307      	strge	r3, [sp, #28]
 80091b4:	9307      	strlt	r3, [sp, #28]
 80091b6:	bfb8      	it	lt
 80091b8:	9204      	strlt	r2, [sp, #16]
 80091ba:	7823      	ldrb	r3, [r4, #0]
 80091bc:	2b2e      	cmp	r3, #46	; 0x2e
 80091be:	d10c      	bne.n	80091da <_vfiprintf_r+0x15a>
 80091c0:	7863      	ldrb	r3, [r4, #1]
 80091c2:	2b2a      	cmp	r3, #42	; 0x2a
 80091c4:	d134      	bne.n	8009230 <_vfiprintf_r+0x1b0>
 80091c6:	9b03      	ldr	r3, [sp, #12]
 80091c8:	1d1a      	adds	r2, r3, #4
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	9203      	str	r2, [sp, #12]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	bfb8      	it	lt
 80091d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80091d6:	3402      	adds	r4, #2
 80091d8:	9305      	str	r3, [sp, #20]
 80091da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80092b0 <_vfiprintf_r+0x230>
 80091de:	7821      	ldrb	r1, [r4, #0]
 80091e0:	2203      	movs	r2, #3
 80091e2:	4650      	mov	r0, sl
 80091e4:	f7f6 fff4 	bl	80001d0 <memchr>
 80091e8:	b138      	cbz	r0, 80091fa <_vfiprintf_r+0x17a>
 80091ea:	9b04      	ldr	r3, [sp, #16]
 80091ec:	eba0 000a 	sub.w	r0, r0, sl
 80091f0:	2240      	movs	r2, #64	; 0x40
 80091f2:	4082      	lsls	r2, r0
 80091f4:	4313      	orrs	r3, r2
 80091f6:	3401      	adds	r4, #1
 80091f8:	9304      	str	r3, [sp, #16]
 80091fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091fe:	4829      	ldr	r0, [pc, #164]	; (80092a4 <_vfiprintf_r+0x224>)
 8009200:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009204:	2206      	movs	r2, #6
 8009206:	f7f6 ffe3 	bl	80001d0 <memchr>
 800920a:	2800      	cmp	r0, #0
 800920c:	d03f      	beq.n	800928e <_vfiprintf_r+0x20e>
 800920e:	4b26      	ldr	r3, [pc, #152]	; (80092a8 <_vfiprintf_r+0x228>)
 8009210:	bb1b      	cbnz	r3, 800925a <_vfiprintf_r+0x1da>
 8009212:	9b03      	ldr	r3, [sp, #12]
 8009214:	3307      	adds	r3, #7
 8009216:	f023 0307 	bic.w	r3, r3, #7
 800921a:	3308      	adds	r3, #8
 800921c:	9303      	str	r3, [sp, #12]
 800921e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009220:	443b      	add	r3, r7
 8009222:	9309      	str	r3, [sp, #36]	; 0x24
 8009224:	e768      	b.n	80090f8 <_vfiprintf_r+0x78>
 8009226:	fb0c 3202 	mla	r2, ip, r2, r3
 800922a:	460c      	mov	r4, r1
 800922c:	2001      	movs	r0, #1
 800922e:	e7a6      	b.n	800917e <_vfiprintf_r+0xfe>
 8009230:	2300      	movs	r3, #0
 8009232:	3401      	adds	r4, #1
 8009234:	9305      	str	r3, [sp, #20]
 8009236:	4619      	mov	r1, r3
 8009238:	f04f 0c0a 	mov.w	ip, #10
 800923c:	4620      	mov	r0, r4
 800923e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009242:	3a30      	subs	r2, #48	; 0x30
 8009244:	2a09      	cmp	r2, #9
 8009246:	d903      	bls.n	8009250 <_vfiprintf_r+0x1d0>
 8009248:	2b00      	cmp	r3, #0
 800924a:	d0c6      	beq.n	80091da <_vfiprintf_r+0x15a>
 800924c:	9105      	str	r1, [sp, #20]
 800924e:	e7c4      	b.n	80091da <_vfiprintf_r+0x15a>
 8009250:	fb0c 2101 	mla	r1, ip, r1, r2
 8009254:	4604      	mov	r4, r0
 8009256:	2301      	movs	r3, #1
 8009258:	e7f0      	b.n	800923c <_vfiprintf_r+0x1bc>
 800925a:	ab03      	add	r3, sp, #12
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	462a      	mov	r2, r5
 8009260:	4b12      	ldr	r3, [pc, #72]	; (80092ac <_vfiprintf_r+0x22c>)
 8009262:	a904      	add	r1, sp, #16
 8009264:	4630      	mov	r0, r6
 8009266:	f7fd fe29 	bl	8006ebc <_printf_float>
 800926a:	4607      	mov	r7, r0
 800926c:	1c78      	adds	r0, r7, #1
 800926e:	d1d6      	bne.n	800921e <_vfiprintf_r+0x19e>
 8009270:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009272:	07d9      	lsls	r1, r3, #31
 8009274:	d405      	bmi.n	8009282 <_vfiprintf_r+0x202>
 8009276:	89ab      	ldrh	r3, [r5, #12]
 8009278:	059a      	lsls	r2, r3, #22
 800927a:	d402      	bmi.n	8009282 <_vfiprintf_r+0x202>
 800927c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800927e:	f7fe fbcf 	bl	8007a20 <__retarget_lock_release_recursive>
 8009282:	89ab      	ldrh	r3, [r5, #12]
 8009284:	065b      	lsls	r3, r3, #25
 8009286:	f53f af1d 	bmi.w	80090c4 <_vfiprintf_r+0x44>
 800928a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800928c:	e71c      	b.n	80090c8 <_vfiprintf_r+0x48>
 800928e:	ab03      	add	r3, sp, #12
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	462a      	mov	r2, r5
 8009294:	4b05      	ldr	r3, [pc, #20]	; (80092ac <_vfiprintf_r+0x22c>)
 8009296:	a904      	add	r1, sp, #16
 8009298:	4630      	mov	r0, r6
 800929a:	f7fe f8b3 	bl	8007404 <_printf_i>
 800929e:	e7e4      	b.n	800926a <_vfiprintf_r+0x1ea>
 80092a0:	08009ad4 	.word	0x08009ad4
 80092a4:	08009ade 	.word	0x08009ade
 80092a8:	08006ebd 	.word	0x08006ebd
 80092ac:	0800905b 	.word	0x0800905b
 80092b0:	08009ada 	.word	0x08009ada

080092b4 <__sflush_r>:
 80092b4:	898a      	ldrh	r2, [r1, #12]
 80092b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092ba:	4605      	mov	r5, r0
 80092bc:	0710      	lsls	r0, r2, #28
 80092be:	460c      	mov	r4, r1
 80092c0:	d458      	bmi.n	8009374 <__sflush_r+0xc0>
 80092c2:	684b      	ldr	r3, [r1, #4]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	dc05      	bgt.n	80092d4 <__sflush_r+0x20>
 80092c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	dc02      	bgt.n	80092d4 <__sflush_r+0x20>
 80092ce:	2000      	movs	r0, #0
 80092d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092d6:	2e00      	cmp	r6, #0
 80092d8:	d0f9      	beq.n	80092ce <__sflush_r+0x1a>
 80092da:	2300      	movs	r3, #0
 80092dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092e0:	682f      	ldr	r7, [r5, #0]
 80092e2:	6a21      	ldr	r1, [r4, #32]
 80092e4:	602b      	str	r3, [r5, #0]
 80092e6:	d032      	beq.n	800934e <__sflush_r+0x9a>
 80092e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092ea:	89a3      	ldrh	r3, [r4, #12]
 80092ec:	075a      	lsls	r2, r3, #29
 80092ee:	d505      	bpl.n	80092fc <__sflush_r+0x48>
 80092f0:	6863      	ldr	r3, [r4, #4]
 80092f2:	1ac0      	subs	r0, r0, r3
 80092f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092f6:	b10b      	cbz	r3, 80092fc <__sflush_r+0x48>
 80092f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092fa:	1ac0      	subs	r0, r0, r3
 80092fc:	2300      	movs	r3, #0
 80092fe:	4602      	mov	r2, r0
 8009300:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009302:	6a21      	ldr	r1, [r4, #32]
 8009304:	4628      	mov	r0, r5
 8009306:	47b0      	blx	r6
 8009308:	1c43      	adds	r3, r0, #1
 800930a:	89a3      	ldrh	r3, [r4, #12]
 800930c:	d106      	bne.n	800931c <__sflush_r+0x68>
 800930e:	6829      	ldr	r1, [r5, #0]
 8009310:	291d      	cmp	r1, #29
 8009312:	d82b      	bhi.n	800936c <__sflush_r+0xb8>
 8009314:	4a29      	ldr	r2, [pc, #164]	; (80093bc <__sflush_r+0x108>)
 8009316:	410a      	asrs	r2, r1
 8009318:	07d6      	lsls	r6, r2, #31
 800931a:	d427      	bmi.n	800936c <__sflush_r+0xb8>
 800931c:	2200      	movs	r2, #0
 800931e:	6062      	str	r2, [r4, #4]
 8009320:	04d9      	lsls	r1, r3, #19
 8009322:	6922      	ldr	r2, [r4, #16]
 8009324:	6022      	str	r2, [r4, #0]
 8009326:	d504      	bpl.n	8009332 <__sflush_r+0x7e>
 8009328:	1c42      	adds	r2, r0, #1
 800932a:	d101      	bne.n	8009330 <__sflush_r+0x7c>
 800932c:	682b      	ldr	r3, [r5, #0]
 800932e:	b903      	cbnz	r3, 8009332 <__sflush_r+0x7e>
 8009330:	6560      	str	r0, [r4, #84]	; 0x54
 8009332:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009334:	602f      	str	r7, [r5, #0]
 8009336:	2900      	cmp	r1, #0
 8009338:	d0c9      	beq.n	80092ce <__sflush_r+0x1a>
 800933a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800933e:	4299      	cmp	r1, r3
 8009340:	d002      	beq.n	8009348 <__sflush_r+0x94>
 8009342:	4628      	mov	r0, r5
 8009344:	f7ff f9f6 	bl	8008734 <_free_r>
 8009348:	2000      	movs	r0, #0
 800934a:	6360      	str	r0, [r4, #52]	; 0x34
 800934c:	e7c0      	b.n	80092d0 <__sflush_r+0x1c>
 800934e:	2301      	movs	r3, #1
 8009350:	4628      	mov	r0, r5
 8009352:	47b0      	blx	r6
 8009354:	1c41      	adds	r1, r0, #1
 8009356:	d1c8      	bne.n	80092ea <__sflush_r+0x36>
 8009358:	682b      	ldr	r3, [r5, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d0c5      	beq.n	80092ea <__sflush_r+0x36>
 800935e:	2b1d      	cmp	r3, #29
 8009360:	d001      	beq.n	8009366 <__sflush_r+0xb2>
 8009362:	2b16      	cmp	r3, #22
 8009364:	d101      	bne.n	800936a <__sflush_r+0xb6>
 8009366:	602f      	str	r7, [r5, #0]
 8009368:	e7b1      	b.n	80092ce <__sflush_r+0x1a>
 800936a:	89a3      	ldrh	r3, [r4, #12]
 800936c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009370:	81a3      	strh	r3, [r4, #12]
 8009372:	e7ad      	b.n	80092d0 <__sflush_r+0x1c>
 8009374:	690f      	ldr	r7, [r1, #16]
 8009376:	2f00      	cmp	r7, #0
 8009378:	d0a9      	beq.n	80092ce <__sflush_r+0x1a>
 800937a:	0793      	lsls	r3, r2, #30
 800937c:	680e      	ldr	r6, [r1, #0]
 800937e:	bf08      	it	eq
 8009380:	694b      	ldreq	r3, [r1, #20]
 8009382:	600f      	str	r7, [r1, #0]
 8009384:	bf18      	it	ne
 8009386:	2300      	movne	r3, #0
 8009388:	eba6 0807 	sub.w	r8, r6, r7
 800938c:	608b      	str	r3, [r1, #8]
 800938e:	f1b8 0f00 	cmp.w	r8, #0
 8009392:	dd9c      	ble.n	80092ce <__sflush_r+0x1a>
 8009394:	6a21      	ldr	r1, [r4, #32]
 8009396:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009398:	4643      	mov	r3, r8
 800939a:	463a      	mov	r2, r7
 800939c:	4628      	mov	r0, r5
 800939e:	47b0      	blx	r6
 80093a0:	2800      	cmp	r0, #0
 80093a2:	dc06      	bgt.n	80093b2 <__sflush_r+0xfe>
 80093a4:	89a3      	ldrh	r3, [r4, #12]
 80093a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093aa:	81a3      	strh	r3, [r4, #12]
 80093ac:	f04f 30ff 	mov.w	r0, #4294967295
 80093b0:	e78e      	b.n	80092d0 <__sflush_r+0x1c>
 80093b2:	4407      	add	r7, r0
 80093b4:	eba8 0800 	sub.w	r8, r8, r0
 80093b8:	e7e9      	b.n	800938e <__sflush_r+0xda>
 80093ba:	bf00      	nop
 80093bc:	dfbffffe 	.word	0xdfbffffe

080093c0 <_fflush_r>:
 80093c0:	b538      	push	{r3, r4, r5, lr}
 80093c2:	690b      	ldr	r3, [r1, #16]
 80093c4:	4605      	mov	r5, r0
 80093c6:	460c      	mov	r4, r1
 80093c8:	b913      	cbnz	r3, 80093d0 <_fflush_r+0x10>
 80093ca:	2500      	movs	r5, #0
 80093cc:	4628      	mov	r0, r5
 80093ce:	bd38      	pop	{r3, r4, r5, pc}
 80093d0:	b118      	cbz	r0, 80093da <_fflush_r+0x1a>
 80093d2:	6a03      	ldr	r3, [r0, #32]
 80093d4:	b90b      	cbnz	r3, 80093da <_fflush_r+0x1a>
 80093d6:	f7fe f9c3 	bl	8007760 <__sinit>
 80093da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d0f3      	beq.n	80093ca <_fflush_r+0xa>
 80093e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80093e4:	07d0      	lsls	r0, r2, #31
 80093e6:	d404      	bmi.n	80093f2 <_fflush_r+0x32>
 80093e8:	0599      	lsls	r1, r3, #22
 80093ea:	d402      	bmi.n	80093f2 <_fflush_r+0x32>
 80093ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093ee:	f7fe fb16 	bl	8007a1e <__retarget_lock_acquire_recursive>
 80093f2:	4628      	mov	r0, r5
 80093f4:	4621      	mov	r1, r4
 80093f6:	f7ff ff5d 	bl	80092b4 <__sflush_r>
 80093fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093fc:	07da      	lsls	r2, r3, #31
 80093fe:	4605      	mov	r5, r0
 8009400:	d4e4      	bmi.n	80093cc <_fflush_r+0xc>
 8009402:	89a3      	ldrh	r3, [r4, #12]
 8009404:	059b      	lsls	r3, r3, #22
 8009406:	d4e1      	bmi.n	80093cc <_fflush_r+0xc>
 8009408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800940a:	f7fe fb09 	bl	8007a20 <__retarget_lock_release_recursive>
 800940e:	e7dd      	b.n	80093cc <_fflush_r+0xc>

08009410 <__swbuf_r>:
 8009410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009412:	460e      	mov	r6, r1
 8009414:	4614      	mov	r4, r2
 8009416:	4605      	mov	r5, r0
 8009418:	b118      	cbz	r0, 8009422 <__swbuf_r+0x12>
 800941a:	6a03      	ldr	r3, [r0, #32]
 800941c:	b90b      	cbnz	r3, 8009422 <__swbuf_r+0x12>
 800941e:	f7fe f99f 	bl	8007760 <__sinit>
 8009422:	69a3      	ldr	r3, [r4, #24]
 8009424:	60a3      	str	r3, [r4, #8]
 8009426:	89a3      	ldrh	r3, [r4, #12]
 8009428:	071a      	lsls	r2, r3, #28
 800942a:	d525      	bpl.n	8009478 <__swbuf_r+0x68>
 800942c:	6923      	ldr	r3, [r4, #16]
 800942e:	b31b      	cbz	r3, 8009478 <__swbuf_r+0x68>
 8009430:	6823      	ldr	r3, [r4, #0]
 8009432:	6922      	ldr	r2, [r4, #16]
 8009434:	1a98      	subs	r0, r3, r2
 8009436:	6963      	ldr	r3, [r4, #20]
 8009438:	b2f6      	uxtb	r6, r6
 800943a:	4283      	cmp	r3, r0
 800943c:	4637      	mov	r7, r6
 800943e:	dc04      	bgt.n	800944a <__swbuf_r+0x3a>
 8009440:	4621      	mov	r1, r4
 8009442:	4628      	mov	r0, r5
 8009444:	f7ff ffbc 	bl	80093c0 <_fflush_r>
 8009448:	b9e0      	cbnz	r0, 8009484 <__swbuf_r+0x74>
 800944a:	68a3      	ldr	r3, [r4, #8]
 800944c:	3b01      	subs	r3, #1
 800944e:	60a3      	str	r3, [r4, #8]
 8009450:	6823      	ldr	r3, [r4, #0]
 8009452:	1c5a      	adds	r2, r3, #1
 8009454:	6022      	str	r2, [r4, #0]
 8009456:	701e      	strb	r6, [r3, #0]
 8009458:	6962      	ldr	r2, [r4, #20]
 800945a:	1c43      	adds	r3, r0, #1
 800945c:	429a      	cmp	r2, r3
 800945e:	d004      	beq.n	800946a <__swbuf_r+0x5a>
 8009460:	89a3      	ldrh	r3, [r4, #12]
 8009462:	07db      	lsls	r3, r3, #31
 8009464:	d506      	bpl.n	8009474 <__swbuf_r+0x64>
 8009466:	2e0a      	cmp	r6, #10
 8009468:	d104      	bne.n	8009474 <__swbuf_r+0x64>
 800946a:	4621      	mov	r1, r4
 800946c:	4628      	mov	r0, r5
 800946e:	f7ff ffa7 	bl	80093c0 <_fflush_r>
 8009472:	b938      	cbnz	r0, 8009484 <__swbuf_r+0x74>
 8009474:	4638      	mov	r0, r7
 8009476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009478:	4621      	mov	r1, r4
 800947a:	4628      	mov	r0, r5
 800947c:	f000 f806 	bl	800948c <__swsetup_r>
 8009480:	2800      	cmp	r0, #0
 8009482:	d0d5      	beq.n	8009430 <__swbuf_r+0x20>
 8009484:	f04f 37ff 	mov.w	r7, #4294967295
 8009488:	e7f4      	b.n	8009474 <__swbuf_r+0x64>
	...

0800948c <__swsetup_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	4b2a      	ldr	r3, [pc, #168]	; (8009538 <__swsetup_r+0xac>)
 8009490:	4605      	mov	r5, r0
 8009492:	6818      	ldr	r0, [r3, #0]
 8009494:	460c      	mov	r4, r1
 8009496:	b118      	cbz	r0, 80094a0 <__swsetup_r+0x14>
 8009498:	6a03      	ldr	r3, [r0, #32]
 800949a:	b90b      	cbnz	r3, 80094a0 <__swsetup_r+0x14>
 800949c:	f7fe f960 	bl	8007760 <__sinit>
 80094a0:	89a3      	ldrh	r3, [r4, #12]
 80094a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094a6:	0718      	lsls	r0, r3, #28
 80094a8:	d422      	bmi.n	80094f0 <__swsetup_r+0x64>
 80094aa:	06d9      	lsls	r1, r3, #27
 80094ac:	d407      	bmi.n	80094be <__swsetup_r+0x32>
 80094ae:	2309      	movs	r3, #9
 80094b0:	602b      	str	r3, [r5, #0]
 80094b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80094b6:	81a3      	strh	r3, [r4, #12]
 80094b8:	f04f 30ff 	mov.w	r0, #4294967295
 80094bc:	e034      	b.n	8009528 <__swsetup_r+0x9c>
 80094be:	0758      	lsls	r0, r3, #29
 80094c0:	d512      	bpl.n	80094e8 <__swsetup_r+0x5c>
 80094c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094c4:	b141      	cbz	r1, 80094d8 <__swsetup_r+0x4c>
 80094c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094ca:	4299      	cmp	r1, r3
 80094cc:	d002      	beq.n	80094d4 <__swsetup_r+0x48>
 80094ce:	4628      	mov	r0, r5
 80094d0:	f7ff f930 	bl	8008734 <_free_r>
 80094d4:	2300      	movs	r3, #0
 80094d6:	6363      	str	r3, [r4, #52]	; 0x34
 80094d8:	89a3      	ldrh	r3, [r4, #12]
 80094da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80094de:	81a3      	strh	r3, [r4, #12]
 80094e0:	2300      	movs	r3, #0
 80094e2:	6063      	str	r3, [r4, #4]
 80094e4:	6923      	ldr	r3, [r4, #16]
 80094e6:	6023      	str	r3, [r4, #0]
 80094e8:	89a3      	ldrh	r3, [r4, #12]
 80094ea:	f043 0308 	orr.w	r3, r3, #8
 80094ee:	81a3      	strh	r3, [r4, #12]
 80094f0:	6923      	ldr	r3, [r4, #16]
 80094f2:	b94b      	cbnz	r3, 8009508 <__swsetup_r+0x7c>
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80094fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094fe:	d003      	beq.n	8009508 <__swsetup_r+0x7c>
 8009500:	4621      	mov	r1, r4
 8009502:	4628      	mov	r0, r5
 8009504:	f000 f8b6 	bl	8009674 <__smakebuf_r>
 8009508:	89a0      	ldrh	r0, [r4, #12]
 800950a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800950e:	f010 0301 	ands.w	r3, r0, #1
 8009512:	d00a      	beq.n	800952a <__swsetup_r+0x9e>
 8009514:	2300      	movs	r3, #0
 8009516:	60a3      	str	r3, [r4, #8]
 8009518:	6963      	ldr	r3, [r4, #20]
 800951a:	425b      	negs	r3, r3
 800951c:	61a3      	str	r3, [r4, #24]
 800951e:	6923      	ldr	r3, [r4, #16]
 8009520:	b943      	cbnz	r3, 8009534 <__swsetup_r+0xa8>
 8009522:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009526:	d1c4      	bne.n	80094b2 <__swsetup_r+0x26>
 8009528:	bd38      	pop	{r3, r4, r5, pc}
 800952a:	0781      	lsls	r1, r0, #30
 800952c:	bf58      	it	pl
 800952e:	6963      	ldrpl	r3, [r4, #20]
 8009530:	60a3      	str	r3, [r4, #8]
 8009532:	e7f4      	b.n	800951e <__swsetup_r+0x92>
 8009534:	2000      	movs	r0, #0
 8009536:	e7f7      	b.n	8009528 <__swsetup_r+0x9c>
 8009538:	20000068 	.word	0x20000068

0800953c <_sbrk_r>:
 800953c:	b538      	push	{r3, r4, r5, lr}
 800953e:	4d06      	ldr	r5, [pc, #24]	; (8009558 <_sbrk_r+0x1c>)
 8009540:	2300      	movs	r3, #0
 8009542:	4604      	mov	r4, r0
 8009544:	4608      	mov	r0, r1
 8009546:	602b      	str	r3, [r5, #0]
 8009548:	f7f7 fffe 	bl	8001548 <_sbrk>
 800954c:	1c43      	adds	r3, r0, #1
 800954e:	d102      	bne.n	8009556 <_sbrk_r+0x1a>
 8009550:	682b      	ldr	r3, [r5, #0]
 8009552:	b103      	cbz	r3, 8009556 <_sbrk_r+0x1a>
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	bd38      	pop	{r3, r4, r5, pc}
 8009558:	20001db8 	.word	0x20001db8

0800955c <__assert_func>:
 800955c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800955e:	4614      	mov	r4, r2
 8009560:	461a      	mov	r2, r3
 8009562:	4b09      	ldr	r3, [pc, #36]	; (8009588 <__assert_func+0x2c>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4605      	mov	r5, r0
 8009568:	68d8      	ldr	r0, [r3, #12]
 800956a:	b14c      	cbz	r4, 8009580 <__assert_func+0x24>
 800956c:	4b07      	ldr	r3, [pc, #28]	; (800958c <__assert_func+0x30>)
 800956e:	9100      	str	r1, [sp, #0]
 8009570:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009574:	4906      	ldr	r1, [pc, #24]	; (8009590 <__assert_func+0x34>)
 8009576:	462b      	mov	r3, r5
 8009578:	f000 f844 	bl	8009604 <fiprintf>
 800957c:	f000 f8d8 	bl	8009730 <abort>
 8009580:	4b04      	ldr	r3, [pc, #16]	; (8009594 <__assert_func+0x38>)
 8009582:	461c      	mov	r4, r3
 8009584:	e7f3      	b.n	800956e <__assert_func+0x12>
 8009586:	bf00      	nop
 8009588:	20000068 	.word	0x20000068
 800958c:	08009aef 	.word	0x08009aef
 8009590:	08009afc 	.word	0x08009afc
 8009594:	08009b2a 	.word	0x08009b2a

08009598 <_calloc_r>:
 8009598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800959a:	fba1 2402 	umull	r2, r4, r1, r2
 800959e:	b94c      	cbnz	r4, 80095b4 <_calloc_r+0x1c>
 80095a0:	4611      	mov	r1, r2
 80095a2:	9201      	str	r2, [sp, #4]
 80095a4:	f7ff f93a 	bl	800881c <_malloc_r>
 80095a8:	9a01      	ldr	r2, [sp, #4]
 80095aa:	4605      	mov	r5, r0
 80095ac:	b930      	cbnz	r0, 80095bc <_calloc_r+0x24>
 80095ae:	4628      	mov	r0, r5
 80095b0:	b003      	add	sp, #12
 80095b2:	bd30      	pop	{r4, r5, pc}
 80095b4:	220c      	movs	r2, #12
 80095b6:	6002      	str	r2, [r0, #0]
 80095b8:	2500      	movs	r5, #0
 80095ba:	e7f8      	b.n	80095ae <_calloc_r+0x16>
 80095bc:	4621      	mov	r1, r4
 80095be:	f7fe f95a 	bl	8007876 <memset>
 80095c2:	e7f4      	b.n	80095ae <_calloc_r+0x16>

080095c4 <__ascii_mbtowc>:
 80095c4:	b082      	sub	sp, #8
 80095c6:	b901      	cbnz	r1, 80095ca <__ascii_mbtowc+0x6>
 80095c8:	a901      	add	r1, sp, #4
 80095ca:	b142      	cbz	r2, 80095de <__ascii_mbtowc+0x1a>
 80095cc:	b14b      	cbz	r3, 80095e2 <__ascii_mbtowc+0x1e>
 80095ce:	7813      	ldrb	r3, [r2, #0]
 80095d0:	600b      	str	r3, [r1, #0]
 80095d2:	7812      	ldrb	r2, [r2, #0]
 80095d4:	1e10      	subs	r0, r2, #0
 80095d6:	bf18      	it	ne
 80095d8:	2001      	movne	r0, #1
 80095da:	b002      	add	sp, #8
 80095dc:	4770      	bx	lr
 80095de:	4610      	mov	r0, r2
 80095e0:	e7fb      	b.n	80095da <__ascii_mbtowc+0x16>
 80095e2:	f06f 0001 	mvn.w	r0, #1
 80095e6:	e7f8      	b.n	80095da <__ascii_mbtowc+0x16>

080095e8 <__ascii_wctomb>:
 80095e8:	b149      	cbz	r1, 80095fe <__ascii_wctomb+0x16>
 80095ea:	2aff      	cmp	r2, #255	; 0xff
 80095ec:	bf85      	ittet	hi
 80095ee:	238a      	movhi	r3, #138	; 0x8a
 80095f0:	6003      	strhi	r3, [r0, #0]
 80095f2:	700a      	strbls	r2, [r1, #0]
 80095f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80095f8:	bf98      	it	ls
 80095fa:	2001      	movls	r0, #1
 80095fc:	4770      	bx	lr
 80095fe:	4608      	mov	r0, r1
 8009600:	4770      	bx	lr
	...

08009604 <fiprintf>:
 8009604:	b40e      	push	{r1, r2, r3}
 8009606:	b503      	push	{r0, r1, lr}
 8009608:	4601      	mov	r1, r0
 800960a:	ab03      	add	r3, sp, #12
 800960c:	4805      	ldr	r0, [pc, #20]	; (8009624 <fiprintf+0x20>)
 800960e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009612:	6800      	ldr	r0, [r0, #0]
 8009614:	9301      	str	r3, [sp, #4]
 8009616:	f7ff fd33 	bl	8009080 <_vfiprintf_r>
 800961a:	b002      	add	sp, #8
 800961c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009620:	b003      	add	sp, #12
 8009622:	4770      	bx	lr
 8009624:	20000068 	.word	0x20000068

08009628 <__swhatbuf_r>:
 8009628:	b570      	push	{r4, r5, r6, lr}
 800962a:	460c      	mov	r4, r1
 800962c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009630:	2900      	cmp	r1, #0
 8009632:	b096      	sub	sp, #88	; 0x58
 8009634:	4615      	mov	r5, r2
 8009636:	461e      	mov	r6, r3
 8009638:	da0d      	bge.n	8009656 <__swhatbuf_r+0x2e>
 800963a:	89a3      	ldrh	r3, [r4, #12]
 800963c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009640:	f04f 0100 	mov.w	r1, #0
 8009644:	bf0c      	ite	eq
 8009646:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800964a:	2340      	movne	r3, #64	; 0x40
 800964c:	2000      	movs	r0, #0
 800964e:	6031      	str	r1, [r6, #0]
 8009650:	602b      	str	r3, [r5, #0]
 8009652:	b016      	add	sp, #88	; 0x58
 8009654:	bd70      	pop	{r4, r5, r6, pc}
 8009656:	466a      	mov	r2, sp
 8009658:	f000 f848 	bl	80096ec <_fstat_r>
 800965c:	2800      	cmp	r0, #0
 800965e:	dbec      	blt.n	800963a <__swhatbuf_r+0x12>
 8009660:	9901      	ldr	r1, [sp, #4]
 8009662:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009666:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800966a:	4259      	negs	r1, r3
 800966c:	4159      	adcs	r1, r3
 800966e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009672:	e7eb      	b.n	800964c <__swhatbuf_r+0x24>

08009674 <__smakebuf_r>:
 8009674:	898b      	ldrh	r3, [r1, #12]
 8009676:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009678:	079d      	lsls	r5, r3, #30
 800967a:	4606      	mov	r6, r0
 800967c:	460c      	mov	r4, r1
 800967e:	d507      	bpl.n	8009690 <__smakebuf_r+0x1c>
 8009680:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009684:	6023      	str	r3, [r4, #0]
 8009686:	6123      	str	r3, [r4, #16]
 8009688:	2301      	movs	r3, #1
 800968a:	6163      	str	r3, [r4, #20]
 800968c:	b002      	add	sp, #8
 800968e:	bd70      	pop	{r4, r5, r6, pc}
 8009690:	ab01      	add	r3, sp, #4
 8009692:	466a      	mov	r2, sp
 8009694:	f7ff ffc8 	bl	8009628 <__swhatbuf_r>
 8009698:	9900      	ldr	r1, [sp, #0]
 800969a:	4605      	mov	r5, r0
 800969c:	4630      	mov	r0, r6
 800969e:	f7ff f8bd 	bl	800881c <_malloc_r>
 80096a2:	b948      	cbnz	r0, 80096b8 <__smakebuf_r+0x44>
 80096a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096a8:	059a      	lsls	r2, r3, #22
 80096aa:	d4ef      	bmi.n	800968c <__smakebuf_r+0x18>
 80096ac:	f023 0303 	bic.w	r3, r3, #3
 80096b0:	f043 0302 	orr.w	r3, r3, #2
 80096b4:	81a3      	strh	r3, [r4, #12]
 80096b6:	e7e3      	b.n	8009680 <__smakebuf_r+0xc>
 80096b8:	89a3      	ldrh	r3, [r4, #12]
 80096ba:	6020      	str	r0, [r4, #0]
 80096bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096c0:	81a3      	strh	r3, [r4, #12]
 80096c2:	9b00      	ldr	r3, [sp, #0]
 80096c4:	6163      	str	r3, [r4, #20]
 80096c6:	9b01      	ldr	r3, [sp, #4]
 80096c8:	6120      	str	r0, [r4, #16]
 80096ca:	b15b      	cbz	r3, 80096e4 <__smakebuf_r+0x70>
 80096cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096d0:	4630      	mov	r0, r6
 80096d2:	f000 f81d 	bl	8009710 <_isatty_r>
 80096d6:	b128      	cbz	r0, 80096e4 <__smakebuf_r+0x70>
 80096d8:	89a3      	ldrh	r3, [r4, #12]
 80096da:	f023 0303 	bic.w	r3, r3, #3
 80096de:	f043 0301 	orr.w	r3, r3, #1
 80096e2:	81a3      	strh	r3, [r4, #12]
 80096e4:	89a3      	ldrh	r3, [r4, #12]
 80096e6:	431d      	orrs	r5, r3
 80096e8:	81a5      	strh	r5, [r4, #12]
 80096ea:	e7cf      	b.n	800968c <__smakebuf_r+0x18>

080096ec <_fstat_r>:
 80096ec:	b538      	push	{r3, r4, r5, lr}
 80096ee:	4d07      	ldr	r5, [pc, #28]	; (800970c <_fstat_r+0x20>)
 80096f0:	2300      	movs	r3, #0
 80096f2:	4604      	mov	r4, r0
 80096f4:	4608      	mov	r0, r1
 80096f6:	4611      	mov	r1, r2
 80096f8:	602b      	str	r3, [r5, #0]
 80096fa:	f7f7 fefc 	bl	80014f6 <_fstat>
 80096fe:	1c43      	adds	r3, r0, #1
 8009700:	d102      	bne.n	8009708 <_fstat_r+0x1c>
 8009702:	682b      	ldr	r3, [r5, #0]
 8009704:	b103      	cbz	r3, 8009708 <_fstat_r+0x1c>
 8009706:	6023      	str	r3, [r4, #0]
 8009708:	bd38      	pop	{r3, r4, r5, pc}
 800970a:	bf00      	nop
 800970c:	20001db8 	.word	0x20001db8

08009710 <_isatty_r>:
 8009710:	b538      	push	{r3, r4, r5, lr}
 8009712:	4d06      	ldr	r5, [pc, #24]	; (800972c <_isatty_r+0x1c>)
 8009714:	2300      	movs	r3, #0
 8009716:	4604      	mov	r4, r0
 8009718:	4608      	mov	r0, r1
 800971a:	602b      	str	r3, [r5, #0]
 800971c:	f7f7 fefb 	bl	8001516 <_isatty>
 8009720:	1c43      	adds	r3, r0, #1
 8009722:	d102      	bne.n	800972a <_isatty_r+0x1a>
 8009724:	682b      	ldr	r3, [r5, #0]
 8009726:	b103      	cbz	r3, 800972a <_isatty_r+0x1a>
 8009728:	6023      	str	r3, [r4, #0]
 800972a:	bd38      	pop	{r3, r4, r5, pc}
 800972c:	20001db8 	.word	0x20001db8

08009730 <abort>:
 8009730:	b508      	push	{r3, lr}
 8009732:	2006      	movs	r0, #6
 8009734:	f000 f82c 	bl	8009790 <raise>
 8009738:	2001      	movs	r0, #1
 800973a:	f7f7 fea9 	bl	8001490 <_exit>

0800973e <_raise_r>:
 800973e:	291f      	cmp	r1, #31
 8009740:	b538      	push	{r3, r4, r5, lr}
 8009742:	4604      	mov	r4, r0
 8009744:	460d      	mov	r5, r1
 8009746:	d904      	bls.n	8009752 <_raise_r+0x14>
 8009748:	2316      	movs	r3, #22
 800974a:	6003      	str	r3, [r0, #0]
 800974c:	f04f 30ff 	mov.w	r0, #4294967295
 8009750:	bd38      	pop	{r3, r4, r5, pc}
 8009752:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009754:	b112      	cbz	r2, 800975c <_raise_r+0x1e>
 8009756:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800975a:	b94b      	cbnz	r3, 8009770 <_raise_r+0x32>
 800975c:	4620      	mov	r0, r4
 800975e:	f000 f831 	bl	80097c4 <_getpid_r>
 8009762:	462a      	mov	r2, r5
 8009764:	4601      	mov	r1, r0
 8009766:	4620      	mov	r0, r4
 8009768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800976c:	f000 b818 	b.w	80097a0 <_kill_r>
 8009770:	2b01      	cmp	r3, #1
 8009772:	d00a      	beq.n	800978a <_raise_r+0x4c>
 8009774:	1c59      	adds	r1, r3, #1
 8009776:	d103      	bne.n	8009780 <_raise_r+0x42>
 8009778:	2316      	movs	r3, #22
 800977a:	6003      	str	r3, [r0, #0]
 800977c:	2001      	movs	r0, #1
 800977e:	e7e7      	b.n	8009750 <_raise_r+0x12>
 8009780:	2400      	movs	r4, #0
 8009782:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009786:	4628      	mov	r0, r5
 8009788:	4798      	blx	r3
 800978a:	2000      	movs	r0, #0
 800978c:	e7e0      	b.n	8009750 <_raise_r+0x12>
	...

08009790 <raise>:
 8009790:	4b02      	ldr	r3, [pc, #8]	; (800979c <raise+0xc>)
 8009792:	4601      	mov	r1, r0
 8009794:	6818      	ldr	r0, [r3, #0]
 8009796:	f7ff bfd2 	b.w	800973e <_raise_r>
 800979a:	bf00      	nop
 800979c:	20000068 	.word	0x20000068

080097a0 <_kill_r>:
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	4d07      	ldr	r5, [pc, #28]	; (80097c0 <_kill_r+0x20>)
 80097a4:	2300      	movs	r3, #0
 80097a6:	4604      	mov	r4, r0
 80097a8:	4608      	mov	r0, r1
 80097aa:	4611      	mov	r1, r2
 80097ac:	602b      	str	r3, [r5, #0]
 80097ae:	f7f7 fe5f 	bl	8001470 <_kill>
 80097b2:	1c43      	adds	r3, r0, #1
 80097b4:	d102      	bne.n	80097bc <_kill_r+0x1c>
 80097b6:	682b      	ldr	r3, [r5, #0]
 80097b8:	b103      	cbz	r3, 80097bc <_kill_r+0x1c>
 80097ba:	6023      	str	r3, [r4, #0]
 80097bc:	bd38      	pop	{r3, r4, r5, pc}
 80097be:	bf00      	nop
 80097c0:	20001db8 	.word	0x20001db8

080097c4 <_getpid_r>:
 80097c4:	f7f7 be4c 	b.w	8001460 <_getpid>

080097c8 <_init>:
 80097c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ca:	bf00      	nop
 80097cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ce:	bc08      	pop	{r3}
 80097d0:	469e      	mov	lr, r3
 80097d2:	4770      	bx	lr

080097d4 <_fini>:
 80097d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d6:	bf00      	nop
 80097d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097da:	bc08      	pop	{r3}
 80097dc:	469e      	mov	lr, r3
 80097de:	4770      	bx	lr
