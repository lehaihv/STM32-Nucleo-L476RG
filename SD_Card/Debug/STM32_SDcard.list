
STM32_SDcard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e08  08006480  08006480  00016480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007288  08007288  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007288  08007288  00017288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007290  08007290  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007290  08007290  00017290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007294  08007294  00017294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f64  20000090  08007328  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ff4  08007328  00020ff4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000188e7  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d9a  00000000  00000000  000389a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001328  00000000  00000000  0003b748  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011c0  00000000  00000000  0003ca70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000477e  00000000  00000000  0003dc30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000108ce  00000000  00000000  000423ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00100e73  00000000  00000000  00052c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00153aef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053d0  00000000  00000000  00153b6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006468 	.word	0x08006468

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08006468 	.word	0x08006468

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f001 f83e 	bl	8001604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f934 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 fae2 	bl	8000b54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000590:	f000 fab0 	bl	8000af4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000594:	f000 f9b8 	bl	8000908 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000598:	f000 fa2e 	bl	80009f8 <MX_I2C1_Init>
  MX_SPI2_Init();
 800059c:	f000 fa6c 	bl	8000a78 <MX_SPI2_Init>
  MX_FATFS_Init();
 80005a0:	f005 fa64 	bl	8005a6c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init (); // initialize the diaply
 80005a4:	f000 fb46 	bl	8000c34 <SSD1306_Init>
  SSD1306_GotoXY (8,0); // goto 10, 10
 80005a8:	2100      	movs	r1, #0
 80005aa:	2008      	movs	r0, #8
 80005ac:	f000 fcac 	bl	8000f08 <SSD1306_GotoXY>
  SSD1306_Puts ("Voltmeter", &Font_11x18, 1); // print Voltmeter_Back to Intel Nuc
 80005b0:	2201      	movs	r2, #1
 80005b2:	4981      	ldr	r1, [pc, #516]	; (80007b8 <main+0x238>)
 80005b4:	4881      	ldr	r0, [pc, #516]	; (80007bc <main+0x23c>)
 80005b6:	f000 fd3d 	bl	8001034 <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 80005ba:	f000 fbff 	bl	8000dbc <SSD1306_UpdateScreen>
  //HAL_Delay(3000);
  SSD1306_GotoXY (0,20);
 80005be:	2114      	movs	r1, #20
 80005c0:	2000      	movs	r0, #0
 80005c2:	f000 fca1 	bl	8000f08 <SSD1306_GotoXY>
  SSD1306_Puts ("Digit:  ", &Font_11x18, 1);
 80005c6:	2201      	movs	r2, #1
 80005c8:	497b      	ldr	r1, [pc, #492]	; (80007b8 <main+0x238>)
 80005ca:	487d      	ldr	r0, [pc, #500]	; (80007c0 <main+0x240>)
 80005cc:	f000 fd32 	bl	8001034 <SSD1306_Puts>
  SSD1306_GotoXY (0,42);
 80005d0:	212a      	movs	r1, #42	; 0x2a
 80005d2:	2000      	movs	r0, #0
 80005d4:	f000 fc98 	bl	8000f08 <SSD1306_GotoXY>
  SSD1306_Puts ("Volts:  ", &Font_11x18, 1);
 80005d8:	2201      	movs	r2, #1
 80005da:	4977      	ldr	r1, [pc, #476]	; (80007b8 <main+0x238>)
 80005dc:	4879      	ldr	r0, [pc, #484]	; (80007c4 <main+0x244>)
 80005de:	f000 fd29 	bl	8001034 <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 80005e2:	f000 fbeb 	bl	8000dbc <SSD1306_UpdateScreen>
  // Get ADC value
  HAL_ADC_Start(&hadc1);
 80005e6:	4878      	ldr	r0, [pc, #480]	; (80007c8 <main+0x248>)
 80005e8:	f001 fbe2 	bl	8001db0 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005ec:	f04f 31ff 	mov.w	r1, #4294967295
 80005f0:	4875      	ldr	r0, [pc, #468]	; (80007c8 <main+0x248>)
 80005f2:	f001 fc97 	bl	8001f24 <HAL_ADC_PollForConversion>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	value_adc = HAL_ADC_GetValue(&hadc1);
 80005f6:	4874      	ldr	r0, [pc, #464]	; (80007c8 <main+0x248>)
 80005f8:	f001 fd64 	bl	80020c4 <HAL_ADC_GetValue>
 80005fc:	4603      	mov	r3, r0
 80005fe:	b29a      	uxth	r2, r3
 8000600:	4b72      	ldr	r3, [pc, #456]	; (80007cc <main+0x24c>)
 8000602:	801a      	strh	r2, [r3, #0]
	SSD1306_GotoXY (70,20); // goto 10, 10
 8000604:	2114      	movs	r1, #20
 8000606:	2046      	movs	r0, #70	; 0x46
 8000608:	f000 fc7e 	bl	8000f08 <SSD1306_GotoXY>
	SSD1306_Putc ((char)(value_adc/1000+48), &Font_11x18, 1);
 800060c:	4b6f      	ldr	r3, [pc, #444]	; (80007cc <main+0x24c>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	4a6f      	ldr	r2, [pc, #444]	; (80007d0 <main+0x250>)
 8000612:	fba2 2303 	umull	r2, r3, r2, r3
 8000616:	099b      	lsrs	r3, r3, #6
 8000618:	b29b      	uxth	r3, r3
 800061a:	b2db      	uxtb	r3, r3
 800061c:	3330      	adds	r3, #48	; 0x30
 800061e:	b2db      	uxtb	r3, r3
 8000620:	2201      	movs	r2, #1
 8000622:	4965      	ldr	r1, [pc, #404]	; (80007b8 <main+0x238>)
 8000624:	4618      	mov	r0, r3
 8000626:	f000 fc85 	bl	8000f34 <SSD1306_Putc>
	SSD1306_Putc ((char)((value_adc%1000)/100+48), &Font_11x18, 1);
 800062a:	4b68      	ldr	r3, [pc, #416]	; (80007cc <main+0x24c>)
 800062c:	881b      	ldrh	r3, [r3, #0]
 800062e:	4a68      	ldr	r2, [pc, #416]	; (80007d0 <main+0x250>)
 8000630:	fba2 1203 	umull	r1, r2, r2, r3
 8000634:	0992      	lsrs	r2, r2, #6
 8000636:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800063a:	fb01 f202 	mul.w	r2, r1, r2
 800063e:	1a9b      	subs	r3, r3, r2
 8000640:	b29b      	uxth	r3, r3
 8000642:	4a64      	ldr	r2, [pc, #400]	; (80007d4 <main+0x254>)
 8000644:	fba2 2303 	umull	r2, r3, r2, r3
 8000648:	095b      	lsrs	r3, r3, #5
 800064a:	b29b      	uxth	r3, r3
 800064c:	b2db      	uxtb	r3, r3
 800064e:	3330      	adds	r3, #48	; 0x30
 8000650:	b2db      	uxtb	r3, r3
 8000652:	2201      	movs	r2, #1
 8000654:	4958      	ldr	r1, [pc, #352]	; (80007b8 <main+0x238>)
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fc6c 	bl	8000f34 <SSD1306_Putc>
	SSD1306_Putc ((char)((value_adc%100)/10+48), &Font_11x18, 1);
 800065c:	4b5b      	ldr	r3, [pc, #364]	; (80007cc <main+0x24c>)
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	4a5c      	ldr	r2, [pc, #368]	; (80007d4 <main+0x254>)
 8000662:	fba2 1203 	umull	r1, r2, r2, r3
 8000666:	0952      	lsrs	r2, r2, #5
 8000668:	2164      	movs	r1, #100	; 0x64
 800066a:	fb01 f202 	mul.w	r2, r1, r2
 800066e:	1a9b      	subs	r3, r3, r2
 8000670:	b29b      	uxth	r3, r3
 8000672:	4a59      	ldr	r2, [pc, #356]	; (80007d8 <main+0x258>)
 8000674:	fba2 2303 	umull	r2, r3, r2, r3
 8000678:	08db      	lsrs	r3, r3, #3
 800067a:	b29b      	uxth	r3, r3
 800067c:	b2db      	uxtb	r3, r3
 800067e:	3330      	adds	r3, #48	; 0x30
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2201      	movs	r2, #1
 8000684:	494c      	ldr	r1, [pc, #304]	; (80007b8 <main+0x238>)
 8000686:	4618      	mov	r0, r3
 8000688:	f000 fc54 	bl	8000f34 <SSD1306_Putc>
	SSD1306_Putc ((char)(value_adc%10+48), &Font_11x18, 1);
 800068c:	4b4f      	ldr	r3, [pc, #316]	; (80007cc <main+0x24c>)
 800068e:	881a      	ldrh	r2, [r3, #0]
 8000690:	4b51      	ldr	r3, [pc, #324]	; (80007d8 <main+0x258>)
 8000692:	fba3 1302 	umull	r1, r3, r3, r2
 8000696:	08d9      	lsrs	r1, r3, #3
 8000698:	460b      	mov	r3, r1
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	440b      	add	r3, r1
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	3330      	adds	r3, #48	; 0x30
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2201      	movs	r2, #1
 80006ac:	4942      	ldr	r1, [pc, #264]	; (80007b8 <main+0x238>)
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 fc40 	bl	8000f34 <SSD1306_Putc>
	volts = value_adc*333/4096;
 80006b4:	4b45      	ldr	r3, [pc, #276]	; (80007cc <main+0x24c>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	f240 134d 	movw	r3, #333	; 0x14d
 80006be:	fb03 f302 	mul.w	r3, r3, r2
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	da01      	bge.n	80006ca <main+0x14a>
 80006c6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80006ca:	131b      	asrs	r3, r3, #12
 80006cc:	ee07 3a90 	vmov	s15, r3
 80006d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006d4:	4b41      	ldr	r3, [pc, #260]	; (80007dc <main+0x25c>)
 80006d6:	edc3 7a00 	vstr	s15, [r3]
	SSD1306_GotoXY (70,42); // goto 10, 10
 80006da:	212a      	movs	r1, #42	; 0x2a
 80006dc:	2046      	movs	r0, #70	; 0x46
 80006de:	f000 fc13 	bl	8000f08 <SSD1306_GotoXY>
	SSD1306_Putc ((char)((int)(volts)/100+48), &Font_11x18, 1);
 80006e2:	4b3e      	ldr	r3, [pc, #248]	; (80007dc <main+0x25c>)
 80006e4:	edd3 7a00 	vldr	s15, [r3]
 80006e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006ec:	ee17 1a90 	vmov	r1, s15
 80006f0:	4b38      	ldr	r3, [pc, #224]	; (80007d4 <main+0x254>)
 80006f2:	fb83 2301 	smull	r2, r3, r3, r1
 80006f6:	115a      	asrs	r2, r3, #5
 80006f8:	17cb      	asrs	r3, r1, #31
 80006fa:	1ad3      	subs	r3, r2, r3
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	3330      	adds	r3, #48	; 0x30
 8000700:	b2db      	uxtb	r3, r3
 8000702:	2201      	movs	r2, #1
 8000704:	492c      	ldr	r1, [pc, #176]	; (80007b8 <main+0x238>)
 8000706:	4618      	mov	r0, r3
 8000708:	f000 fc14 	bl	8000f34 <SSD1306_Putc>
	SSD1306_Puts (".", &Font_11x18, 1);
 800070c:	2201      	movs	r2, #1
 800070e:	492a      	ldr	r1, [pc, #168]	; (80007b8 <main+0x238>)
 8000710:	4833      	ldr	r0, [pc, #204]	; (80007e0 <main+0x260>)
 8000712:	f000 fc8f 	bl	8001034 <SSD1306_Puts>
	SSD1306_Putc ((char)(((int)(volts)%100)/10+48), &Font_11x18, 1);
 8000716:	4b31      	ldr	r3, [pc, #196]	; (80007dc <main+0x25c>)
 8000718:	edd3 7a00 	vldr	s15, [r3]
 800071c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000720:	ee17 2a90 	vmov	r2, s15
 8000724:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <main+0x254>)
 8000726:	fb83 1302 	smull	r1, r3, r3, r2
 800072a:	1159      	asrs	r1, r3, #5
 800072c:	17d3      	asrs	r3, r2, #31
 800072e:	1acb      	subs	r3, r1, r3
 8000730:	2164      	movs	r1, #100	; 0x64
 8000732:	fb01 f303 	mul.w	r3, r1, r3
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	4a2a      	ldr	r2, [pc, #168]	; (80007e4 <main+0x264>)
 800073a:	fb82 1203 	smull	r1, r2, r2, r3
 800073e:	1092      	asrs	r2, r2, #2
 8000740:	17db      	asrs	r3, r3, #31
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	b2db      	uxtb	r3, r3
 8000746:	3330      	adds	r3, #48	; 0x30
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2201      	movs	r2, #1
 800074c:	491a      	ldr	r1, [pc, #104]	; (80007b8 <main+0x238>)
 800074e:	4618      	mov	r0, r3
 8000750:	f000 fbf0 	bl	8000f34 <SSD1306_Putc>
	SSD1306_Putc ((char)((int)(volts)%10+48), &Font_11x18, 1);
 8000754:	4b21      	ldr	r3, [pc, #132]	; (80007dc <main+0x25c>)
 8000756:	edd3 7a00 	vldr	s15, [r3]
 800075a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800075e:	ee17 1a90 	vmov	r1, s15
 8000762:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <main+0x264>)
 8000764:	fb83 2301 	smull	r2, r3, r3, r1
 8000768:	109a      	asrs	r2, r3, #2
 800076a:	17cb      	asrs	r3, r1, #31
 800076c:	1ad2      	subs	r2, r2, r3
 800076e:	4613      	mov	r3, r2
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	4413      	add	r3, r2
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	1aca      	subs	r2, r1, r3
 8000778:	b2d3      	uxtb	r3, r2
 800077a:	3330      	adds	r3, #48	; 0x30
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2201      	movs	r2, #1
 8000780:	490d      	ldr	r1, [pc, #52]	; (80007b8 <main+0x238>)
 8000782:	4618      	mov	r0, r3
 8000784:	f000 fbd6 	bl	8000f34 <SSD1306_Putc>
	SSD1306_UpdateScreen(); // update screen
 8000788:	f000 fb18 	bl	8000dbc <SSD1306_UpdateScreen>
	//Convert to string and print
	sprintf(msg,"%hu\r\n",value_adc);
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <main+0x24c>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	4915      	ldr	r1, [pc, #84]	; (80007e8 <main+0x268>)
 8000794:	4815      	ldr	r0, [pc, #84]	; (80007ec <main+0x26c>)
 8000796:	f005 fa61 	bl	8005c5c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800079a:	4814      	ldr	r0, [pc, #80]	; (80007ec <main+0x26c>)
 800079c:	f7ff fd18 	bl	80001d0 <strlen>
 80007a0:	4603      	mov	r3, r0
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	f04f 33ff 	mov.w	r3, #4294967295
 80007a8:	4910      	ldr	r1, [pc, #64]	; (80007ec <main+0x26c>)
 80007aa:	4811      	ldr	r0, [pc, #68]	; (80007f0 <main+0x270>)
 80007ac:	f004 fcdf 	bl	800516e <HAL_UART_Transmit>
	HAL_Delay(100);
 80007b0:	2064      	movs	r0, #100	; 0x64
 80007b2:	f000 ffa3 	bl	80016fc <HAL_Delay>
	value_adc = HAL_ADC_GetValue(&hadc1);
 80007b6:	e71e      	b.n	80005f6 <main+0x76>
 80007b8:	20000000 	.word	0x20000000
 80007bc:	08006480 	.word	0x08006480
 80007c0:	0800648c 	.word	0x0800648c
 80007c4:	08006498 	.word	0x08006498
 80007c8:	200007d8 	.word	0x200007d8
 80007cc:	20000008 	.word	0x20000008
 80007d0:	10624dd3 	.word	0x10624dd3
 80007d4:	51eb851f 	.word	0x51eb851f
 80007d8:	cccccccd 	.word	0xcccccccd
 80007dc:	200000ac 	.word	0x200000ac
 80007e0:	080064a4 	.word	0x080064a4
 80007e4:	66666667 	.word	0x66666667
 80007e8:	080064a8 	.word	0x080064a8
 80007ec:	200007cc 	.word	0x200007cc
 80007f0:	200008cc 	.word	0x200008cc

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b0b8      	sub	sp, #224	; 0xe0
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007fe:	2244      	movs	r2, #68	; 0x44
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f005 fa22 	bl	8005c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000818:	463b      	mov	r3, r7
 800081a:	2288      	movs	r2, #136	; 0x88
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f005 fa14 	bl	8005c4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000824:	2302      	movs	r3, #2
 8000826:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800082e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000832:	2310      	movs	r3, #16
 8000834:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000838:	2302      	movs	r3, #2
 800083a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800083e:	2302      	movs	r3, #2
 8000840:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000844:	2301      	movs	r3, #1
 8000846:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800084a:	230a      	movs	r3, #10
 800084c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000850:	2307      	movs	r3, #7
 8000852:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000856:	2302      	movs	r3, #2
 8000858:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800085c:	2302      	movs	r3, #2
 800085e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000862:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000866:	4618      	mov	r0, r3
 8000868:	f003 f8f6 	bl	8003a58 <HAL_RCC_OscConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000872:	f000 f9d7 	bl	8000c24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000876:	230f      	movs	r3, #15
 8000878:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087c:	2303      	movs	r3, #3
 800087e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000894:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000898:	2104      	movs	r1, #4
 800089a:	4618      	mov	r0, r3
 800089c:	f003 fcc2 	bl	8004224 <HAL_RCC_ClockConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80008a6:	f000 f9bd 	bl	8000c24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80008aa:	f244 0342 	movw	r3, #16450	; 0x4042
 80008ae:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80008b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008bc:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80008be:	2302      	movs	r3, #2
 80008c0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008c2:	2301      	movs	r3, #1
 80008c4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80008c6:	2308      	movs	r3, #8
 80008c8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80008ca:	2307      	movs	r3, #7
 80008cc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008ce:	2302      	movs	r3, #2
 80008d0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80008d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008da:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008dc:	463b      	mov	r3, r7
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 fea4 	bl	800462c <HAL_RCCEx_PeriphCLKConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80008ea:	f000 f99b 	bl	8000c24 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008f2:	f003 f85b 	bl	80039ac <HAL_PWREx_ControlVoltageScaling>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80008fc:	f000 f992 	bl	8000c24 <Error_Handler>
  }
}
 8000900:	bf00      	nop
 8000902:	37e0      	adds	r7, #224	; 0xe0
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
 8000928:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800092a:	4b30      	ldr	r3, [pc, #192]	; (80009ec <MX_ADC1_Init+0xe4>)
 800092c:	4a30      	ldr	r2, [pc, #192]	; (80009f0 <MX_ADC1_Init+0xe8>)
 800092e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000930:	4b2e      	ldr	r3, [pc, #184]	; (80009ec <MX_ADC1_Init+0xe4>)
 8000932:	2200      	movs	r2, #0
 8000934:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000936:	4b2d      	ldr	r3, [pc, #180]	; (80009ec <MX_ADC1_Init+0xe4>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800093c:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <MX_ADC1_Init+0xe4>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000942:	4b2a      	ldr	r3, [pc, #168]	; (80009ec <MX_ADC1_Init+0xe4>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000948:	4b28      	ldr	r3, [pc, #160]	; (80009ec <MX_ADC1_Init+0xe4>)
 800094a:	2208      	movs	r2, #8
 800094c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800094e:	4b27      	ldr	r3, [pc, #156]	; (80009ec <MX_ADC1_Init+0xe4>)
 8000950:	2200      	movs	r2, #0
 8000952:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000954:	4b25      	ldr	r3, [pc, #148]	; (80009ec <MX_ADC1_Init+0xe4>)
 8000956:	2201      	movs	r2, #1
 8000958:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800095a:	4b24      	ldr	r3, [pc, #144]	; (80009ec <MX_ADC1_Init+0xe4>)
 800095c:	2201      	movs	r2, #1
 800095e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000960:	4b22      	ldr	r3, [pc, #136]	; (80009ec <MX_ADC1_Init+0xe4>)
 8000962:	2200      	movs	r2, #0
 8000964:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000968:	4b20      	ldr	r3, [pc, #128]	; (80009ec <MX_ADC1_Init+0xe4>)
 800096a:	2200      	movs	r2, #0
 800096c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800096e:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <MX_ADC1_Init+0xe4>)
 8000970:	2200      	movs	r2, #0
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <MX_ADC1_Init+0xe4>)
 8000976:	2200      	movs	r2, #0
 8000978:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_ADC1_Init+0xe4>)
 800097e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000982:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000984:	4b19      	ldr	r3, [pc, #100]	; (80009ec <MX_ADC1_Init+0xe4>)
 8000986:	2200      	movs	r2, #0
 8000988:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800098c:	4817      	ldr	r0, [pc, #92]	; (80009ec <MX_ADC1_Init+0xe4>)
 800098e:	f001 f8bb 	bl	8001b08 <HAL_ADC_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000998:	f000 f944 	bl	8000c24 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	4811      	ldr	r0, [pc, #68]	; (80009ec <MX_ADC1_Init+0xe4>)
 80009a8:	f002 f808 	bl	80029bc <HAL_ADCEx_MultiModeConfigChannel>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80009b2:	f000 f937 	bl	8000c24 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_ADC1_Init+0xec>)
 80009b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ba:	2306      	movs	r3, #6
 80009bc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009c2:	237f      	movs	r3, #127	; 0x7f
 80009c4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009c6:	2304      	movs	r3, #4
 80009c8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	4619      	mov	r1, r3
 80009d2:	4806      	ldr	r0, [pc, #24]	; (80009ec <MX_ADC1_Init+0xe4>)
 80009d4:	f001 fb84 	bl	80020e0 <HAL_ADC_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80009de:	f000 f921 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	3728      	adds	r7, #40	; 0x28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200007d8 	.word	0x200007d8
 80009f0:	50040000 	.word	0x50040000
 80009f4:	04300002 	.word	0x04300002

080009f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_I2C1_Init+0x74>)
 80009fe:	4a1c      	ldr	r2, [pc, #112]	; (8000a70 <MX_I2C1_Init+0x78>)
 8000a00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a04:	4a1b      	ldr	r2, [pc, #108]	; (8000a74 <MX_I2C1_Init+0x7c>)
 8000a06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a08:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a32:	480e      	ldr	r0, [pc, #56]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a34:	f002 fb14 	bl	8003060 <HAL_I2C_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a3e:	f000 f8f1 	bl	8000c24 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a42:	2100      	movs	r1, #0
 8000a44:	4809      	ldr	r0, [pc, #36]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a46:	f002 ff0b 	bl	8003860 <HAL_I2CEx_ConfigAnalogFilter>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a50:	f000 f8e8 	bl	8000c24 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a54:	2100      	movs	r1, #0
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a58:	f002 ff4d 	bl	80038f6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a62:	f000 f8df 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000780 	.word	0x20000780
 8000a70:	40005400 	.word	0x40005400
 8000a74:	00702991 	.word	0x00702991

08000a78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a7c:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <MX_SPI2_Init+0x74>)
 8000a7e:	4a1c      	ldr	r2, [pc, #112]	; (8000af0 <MX_SPI2_Init+0x78>)
 8000a80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a82:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <MX_SPI2_Init+0x74>)
 8000a84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a8a:	4b18      	ldr	r3, [pc, #96]	; (8000aec <MX_SPI2_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a90:	4b16      	ldr	r3, [pc, #88]	; (8000aec <MX_SPI2_Init+0x74>)
 8000a92:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a96:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_SPI2_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <MX_SPI2_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_SPI2_Init+0x74>)
 8000aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aaa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_SPI2_Init+0x74>)
 8000aae:	2220      	movs	r2, #32
 8000ab0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_SPI2_Init+0x74>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_SPI2_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_SPI2_Init+0x74>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_SPI2_Init+0x74>)
 8000ac6:	2207      	movs	r2, #7
 8000ac8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_SPI2_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_SPI2_Init+0x74>)
 8000ad2:	2208      	movs	r2, #8
 8000ad4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_SPI2_Init+0x74>)
 8000ad8:	f004 fa58 	bl	8004f8c <HAL_SPI_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000ae2:	f000 f89f 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200004d4 	.word	0x200004d4
 8000af0:	40003800 	.word	0x40003800

08000af4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_USART2_UART_Init+0x58>)
 8000afa:	4a15      	ldr	r2, [pc, #84]	; (8000b50 <MX_USART2_UART_Init+0x5c>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000afe:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b38:	f004 facb 	bl	80050d2 <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b42:	f000 f86f 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200008cc 	.word	0x200008cc
 8000b50:	40004400 	.word	0x40004400

08000b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	4b2b      	ldr	r3, [pc, #172]	; (8000c18 <MX_GPIO_Init+0xc4>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	4a2a      	ldr	r2, [pc, #168]	; (8000c18 <MX_GPIO_Init+0xc4>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b76:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <MX_GPIO_Init+0xc4>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	f003 0304 	and.w	r3, r3, #4
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b82:	4b25      	ldr	r3, [pc, #148]	; (8000c18 <MX_GPIO_Init+0xc4>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	4a24      	ldr	r2, [pc, #144]	; (8000c18 <MX_GPIO_Init+0xc4>)
 8000b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8e:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <MX_GPIO_Init+0xc4>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <MX_GPIO_Init+0xc4>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	4a1e      	ldr	r2, [pc, #120]	; (8000c18 <MX_GPIO_Init+0xc4>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MX_GPIO_Init+0xc4>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <MX_GPIO_Init+0xc4>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	4a18      	ldr	r2, [pc, #96]	; (8000c18 <MX_GPIO_Init+0xc4>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_GPIO_Init+0xc4>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2120      	movs	r1, #32
 8000bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd2:	f002 fa2d 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_GPIO_Init+0xc8>)
 8000bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	480d      	ldr	r0, [pc, #52]	; (8000c20 <MX_GPIO_Init+0xcc>)
 8000bec:	f002 f878 	bl	8002ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bf0:	2320      	movs	r3, #32
 8000bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0a:	f002 f869 	bl	8002ce0 <HAL_GPIO_Init>

}
 8000c0e:	bf00      	nop
 8000c10:	3728      	adds	r7, #40	; 0x28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	10210000 	.word	0x10210000
 8000c20:	48000800 	.word	0x48000800

08000c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000c3a:	f000 fa21 	bl	8001080 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000c3e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000c42:	2201      	movs	r2, #1
 8000c44:	2178      	movs	r1, #120	; 0x78
 8000c46:	485b      	ldr	r0, [pc, #364]	; (8000db4 <SSD1306_Init+0x180>)
 8000c48:	f002 fb8e 	bl	8003368 <HAL_I2C_IsDeviceReady>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e0a9      	b.n	8000daa <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000c56:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000c5a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c5c:	e002      	b.n	8000c64 <SSD1306_Init+0x30>
		p--;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1f9      	bne.n	8000c5e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000c6a:	22ae      	movs	r2, #174	; 0xae
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2078      	movs	r0, #120	; 0x78
 8000c70:	f000 fa62 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000c74:	2220      	movs	r2, #32
 8000c76:	2100      	movs	r1, #0
 8000c78:	2078      	movs	r0, #120	; 0x78
 8000c7a:	f000 fa5d 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000c7e:	2210      	movs	r2, #16
 8000c80:	2100      	movs	r1, #0
 8000c82:	2078      	movs	r0, #120	; 0x78
 8000c84:	f000 fa58 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000c88:	22b0      	movs	r2, #176	; 0xb0
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2078      	movs	r0, #120	; 0x78
 8000c8e:	f000 fa53 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000c92:	22c8      	movs	r2, #200	; 0xc8
 8000c94:	2100      	movs	r1, #0
 8000c96:	2078      	movs	r0, #120	; 0x78
 8000c98:	f000 fa4e 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	2078      	movs	r0, #120	; 0x78
 8000ca2:	f000 fa49 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000ca6:	2210      	movs	r2, #16
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2078      	movs	r0, #120	; 0x78
 8000cac:	f000 fa44 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000cb0:	2240      	movs	r2, #64	; 0x40
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2078      	movs	r0, #120	; 0x78
 8000cb6:	f000 fa3f 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000cba:	2281      	movs	r2, #129	; 0x81
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2078      	movs	r0, #120	; 0x78
 8000cc0:	f000 fa3a 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000cc4:	22ff      	movs	r2, #255	; 0xff
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2078      	movs	r0, #120	; 0x78
 8000cca:	f000 fa35 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000cce:	22a1      	movs	r2, #161	; 0xa1
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2078      	movs	r0, #120	; 0x78
 8000cd4:	f000 fa30 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000cd8:	22a6      	movs	r2, #166	; 0xa6
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2078      	movs	r0, #120	; 0x78
 8000cde:	f000 fa2b 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000ce2:	22a8      	movs	r2, #168	; 0xa8
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2078      	movs	r0, #120	; 0x78
 8000ce8:	f000 fa26 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000cec:	223f      	movs	r2, #63	; 0x3f
 8000cee:	2100      	movs	r1, #0
 8000cf0:	2078      	movs	r0, #120	; 0x78
 8000cf2:	f000 fa21 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000cf6:	22a4      	movs	r2, #164	; 0xa4
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2078      	movs	r0, #120	; 0x78
 8000cfc:	f000 fa1c 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000d00:	22d3      	movs	r2, #211	; 0xd3
 8000d02:	2100      	movs	r1, #0
 8000d04:	2078      	movs	r0, #120	; 0x78
 8000d06:	f000 fa17 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2078      	movs	r0, #120	; 0x78
 8000d10:	f000 fa12 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000d14:	22d5      	movs	r2, #213	; 0xd5
 8000d16:	2100      	movs	r1, #0
 8000d18:	2078      	movs	r0, #120	; 0x78
 8000d1a:	f000 fa0d 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000d1e:	22f0      	movs	r2, #240	; 0xf0
 8000d20:	2100      	movs	r1, #0
 8000d22:	2078      	movs	r0, #120	; 0x78
 8000d24:	f000 fa08 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000d28:	22d9      	movs	r2, #217	; 0xd9
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2078      	movs	r0, #120	; 0x78
 8000d2e:	f000 fa03 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000d32:	2222      	movs	r2, #34	; 0x22
 8000d34:	2100      	movs	r1, #0
 8000d36:	2078      	movs	r0, #120	; 0x78
 8000d38:	f000 f9fe 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000d3c:	22da      	movs	r2, #218	; 0xda
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2078      	movs	r0, #120	; 0x78
 8000d42:	f000 f9f9 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000d46:	2212      	movs	r2, #18
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2078      	movs	r0, #120	; 0x78
 8000d4c:	f000 f9f4 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000d50:	22db      	movs	r2, #219	; 0xdb
 8000d52:	2100      	movs	r1, #0
 8000d54:	2078      	movs	r0, #120	; 0x78
 8000d56:	f000 f9ef 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000d5a:	2220      	movs	r2, #32
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2078      	movs	r0, #120	; 0x78
 8000d60:	f000 f9ea 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000d64:	228d      	movs	r2, #141	; 0x8d
 8000d66:	2100      	movs	r1, #0
 8000d68:	2078      	movs	r0, #120	; 0x78
 8000d6a:	f000 f9e5 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000d6e:	2214      	movs	r2, #20
 8000d70:	2100      	movs	r1, #0
 8000d72:	2078      	movs	r0, #120	; 0x78
 8000d74:	f000 f9e0 	bl	8001138 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000d78:	22af      	movs	r2, #175	; 0xaf
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2078      	movs	r0, #120	; 0x78
 8000d7e:	f000 f9db 	bl	8001138 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000d82:	222e      	movs	r2, #46	; 0x2e
 8000d84:	2100      	movs	r1, #0
 8000d86:	2078      	movs	r0, #120	; 0x78
 8000d88:	f000 f9d6 	bl	8001138 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f000 f843 	bl	8000e18 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000d92:	f000 f813 	bl	8000dbc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <SSD1306_Init+0x184>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <SSD1306_Init+0x184>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000da2:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <SSD1306_Init+0x184>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000da8:	2301      	movs	r3, #1
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000780 	.word	0x20000780
 8000db8:	200004b0 	.word	0x200004b0

08000dbc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	71fb      	strb	r3, [r7, #7]
 8000dc6:	e01d      	b.n	8000e04 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	3b50      	subs	r3, #80	; 0x50
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	461a      	mov	r2, r3
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2078      	movs	r0, #120	; 0x78
 8000dd4:	f000 f9b0 	bl	8001138 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2078      	movs	r0, #120	; 0x78
 8000dde:	f000 f9ab 	bl	8001138 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000de2:	2210      	movs	r2, #16
 8000de4:	2100      	movs	r1, #0
 8000de6:	2078      	movs	r0, #120	; 0x78
 8000de8:	f000 f9a6 	bl	8001138 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	01db      	lsls	r3, r3, #7
 8000df0:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <SSD1306_UpdateScreen+0x58>)
 8000df2:	441a      	add	r2, r3
 8000df4:	2380      	movs	r3, #128	; 0x80
 8000df6:	2140      	movs	r1, #64	; 0x40
 8000df8:	2078      	movs	r0, #120	; 0x78
 8000dfa:	f000 f955 	bl	80010a8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	3301      	adds	r3, #1
 8000e02:	71fb      	strb	r3, [r7, #7]
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	2b07      	cmp	r3, #7
 8000e08:	d9de      	bls.n	8000dc8 <SSD1306_UpdateScreen+0xc>
	}
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200000b0 	.word	0x200000b0

08000e18 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d101      	bne.n	8000e2c <SSD1306_Fill+0x14>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	e000      	b.n	8000e2e <SSD1306_Fill+0x16>
 8000e2c:	23ff      	movs	r3, #255	; 0xff
 8000e2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e32:	4619      	mov	r1, r3
 8000e34:	4803      	ldr	r0, [pc, #12]	; (8000e44 <SSD1306_Fill+0x2c>)
 8000e36:	f004 ff09 	bl	8005c4c <memset>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200000b0 	.word	0x200000b0

08000e48 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	80fb      	strh	r3, [r7, #6]
 8000e52:	460b      	mov	r3, r1
 8000e54:	80bb      	strh	r3, [r7, #4]
 8000e56:	4613      	mov	r3, r2
 8000e58:	70fb      	strb	r3, [r7, #3]
	if (
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	2b7f      	cmp	r3, #127	; 0x7f
 8000e5e:	d848      	bhi.n	8000ef2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000e60:	88bb      	ldrh	r3, [r7, #4]
 8000e62:	2b3f      	cmp	r3, #63	; 0x3f
 8000e64:	d845      	bhi.n	8000ef2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000e66:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <SSD1306_DrawPixel+0xb8>)
 8000e68:	791b      	ldrb	r3, [r3, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d006      	beq.n	8000e7c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000e6e:	78fb      	ldrb	r3, [r7, #3]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	bf0c      	ite	eq
 8000e74:	2301      	moveq	r3, #1
 8000e76:	2300      	movne	r3, #0
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000e7c:	78fb      	ldrb	r3, [r7, #3]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d11a      	bne.n	8000eb8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000e82:	88fa      	ldrh	r2, [r7, #6]
 8000e84:	88bb      	ldrh	r3, [r7, #4]
 8000e86:	08db      	lsrs	r3, r3, #3
 8000e88:	b298      	uxth	r0, r3
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	01db      	lsls	r3, r3, #7
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a1c      	ldr	r2, [pc, #112]	; (8000f04 <SSD1306_DrawPixel+0xbc>)
 8000e92:	5cd3      	ldrb	r3, [r2, r3]
 8000e94:	b25a      	sxtb	r2, r3
 8000e96:	88bb      	ldrh	r3, [r7, #4]
 8000e98:	f003 0307 	and.w	r3, r3, #7
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	b25b      	sxtb	r3, r3
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b259      	sxtb	r1, r3
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	4603      	mov	r3, r0
 8000eac:	01db      	lsls	r3, r3, #7
 8000eae:	4413      	add	r3, r2
 8000eb0:	b2c9      	uxtb	r1, r1
 8000eb2:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <SSD1306_DrawPixel+0xbc>)
 8000eb4:	54d1      	strb	r1, [r2, r3]
 8000eb6:	e01d      	b.n	8000ef4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000eb8:	88fa      	ldrh	r2, [r7, #6]
 8000eba:	88bb      	ldrh	r3, [r7, #4]
 8000ebc:	08db      	lsrs	r3, r3, #3
 8000ebe:	b298      	uxth	r0, r3
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	01db      	lsls	r3, r3, #7
 8000ec4:	4413      	add	r3, r2
 8000ec6:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <SSD1306_DrawPixel+0xbc>)
 8000ec8:	5cd3      	ldrb	r3, [r2, r3]
 8000eca:	b25a      	sxtb	r2, r3
 8000ecc:	88bb      	ldrh	r3, [r7, #4]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	4013      	ands	r3, r2
 8000ee0:	b259      	sxtb	r1, r3
 8000ee2:	88fa      	ldrh	r2, [r7, #6]
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	01db      	lsls	r3, r3, #7
 8000ee8:	4413      	add	r3, r2
 8000eea:	b2c9      	uxtb	r1, r1
 8000eec:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <SSD1306_DrawPixel+0xbc>)
 8000eee:	54d1      	strb	r1, [r2, r3]
 8000ef0:	e000      	b.n	8000ef4 <SSD1306_DrawPixel+0xac>
		return;
 8000ef2:	bf00      	nop
	}
}
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	200004b0 	.word	0x200004b0
 8000f04:	200000b0 	.word	0x200000b0

08000f08 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	460a      	mov	r2, r1
 8000f12:	80fb      	strh	r3, [r7, #6]
 8000f14:	4613      	mov	r3, r2
 8000f16:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000f18:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <SSD1306_GotoXY+0x28>)
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000f1e:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <SSD1306_GotoXY+0x28>)
 8000f20:	88bb      	ldrh	r3, [r7, #4]
 8000f22:	8053      	strh	r3, [r2, #2]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	200004b0 	.word	0x200004b0

08000f34 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6039      	str	r1, [r7, #0]
 8000f3e:	71fb      	strb	r3, [r7, #7]
 8000f40:	4613      	mov	r3, r2
 8000f42:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000f44:	4b3a      	ldr	r3, [pc, #232]	; (8001030 <SSD1306_Putc+0xfc>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
	if (
 8000f50:	2b7f      	cmp	r3, #127	; 0x7f
 8000f52:	dc07      	bgt.n	8000f64 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000f54:	4b36      	ldr	r3, [pc, #216]	; (8001030 <SSD1306_Putc+0xfc>)
 8000f56:	885b      	ldrh	r3, [r3, #2]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	785b      	ldrb	r3, [r3, #1]
 8000f5e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000f60:	2b3f      	cmp	r3, #63	; 0x3f
 8000f62:	dd01      	ble.n	8000f68 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	e05e      	b.n	8001026 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	e04b      	b.n	8001006 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	3b20      	subs	r3, #32
 8000f76:	6839      	ldr	r1, [r7, #0]
 8000f78:	7849      	ldrb	r1, [r1, #1]
 8000f7a:	fb01 f303 	mul.w	r3, r1, r3
 8000f7e:	4619      	mov	r1, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	440b      	add	r3, r1
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4413      	add	r3, r2
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	e030      	b.n	8000ff4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d010      	beq.n	8000fc4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000fa2:	4b23      	ldr	r3, [pc, #140]	; (8001030 <SSD1306_Putc+0xfc>)
 8000fa4:	881a      	ldrh	r2, [r3, #0]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	4413      	add	r3, r2
 8000fac:	b298      	uxth	r0, r3
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <SSD1306_Putc+0xfc>)
 8000fb0:	885a      	ldrh	r2, [r3, #2]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	79ba      	ldrb	r2, [r7, #6]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f7ff ff43 	bl	8000e48 <SSD1306_DrawPixel>
 8000fc2:	e014      	b.n	8000fee <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <SSD1306_Putc+0xfc>)
 8000fc6:	881a      	ldrh	r2, [r3, #0]
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	4413      	add	r3, r2
 8000fce:	b298      	uxth	r0, r3
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <SSD1306_Putc+0xfc>)
 8000fd2:	885a      	ldrh	r2, [r3, #2]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	4413      	add	r3, r2
 8000fda:	b299      	uxth	r1, r3
 8000fdc:	79bb      	ldrb	r3, [r7, #6]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	bf0c      	ite	eq
 8000fe2:	2301      	moveq	r3, #1
 8000fe4:	2300      	movne	r3, #0
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	461a      	mov	r2, r3
 8000fea:	f7ff ff2d 	bl	8000e48 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d3c8      	bcc.n	8000f92 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	3301      	adds	r3, #1
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	785b      	ldrb	r3, [r3, #1]
 800100a:	461a      	mov	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	4293      	cmp	r3, r2
 8001010:	d3ad      	bcc.n	8000f6e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <SSD1306_Putc+0xfc>)
 8001014:	881a      	ldrh	r2, [r3, #0]
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b29b      	uxth	r3, r3
 800101c:	4413      	add	r3, r2
 800101e:	b29a      	uxth	r2, r3
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <SSD1306_Putc+0xfc>)
 8001022:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001024:	79fb      	ldrb	r3, [r7, #7]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200004b0 	.word	0x200004b0

08001034 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	4613      	mov	r3, r2
 8001040:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001042:	e012      	b.n	800106a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	79fa      	ldrb	r2, [r7, #7]
 800104a:	68b9      	ldr	r1, [r7, #8]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff71 	bl	8000f34 <SSD1306_Putc>
 8001052:	4603      	mov	r3, r0
 8001054:	461a      	mov	r2, r3
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	429a      	cmp	r2, r3
 800105c:	d002      	beq.n	8001064 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	e008      	b.n	8001076 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3301      	adds	r3, #1
 8001068:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1e8      	bne.n	8001044 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	781b      	ldrb	r3, [r3, #0]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <ssd1306_I2C_Init+0x24>)
 8001088:	607b      	str	r3, [r7, #4]
	while(p>0)
 800108a:	e002      	b.n	8001092 <ssd1306_I2C_Init+0x12>
		p--;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1f9      	bne.n	800108c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	0003d090 	.word	0x0003d090

080010a8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b0c7      	sub	sp, #284	; 0x11c
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	4604      	mov	r4, r0
 80010b0:	4608      	mov	r0, r1
 80010b2:	4639      	mov	r1, r7
 80010b4:	600a      	str	r2, [r1, #0]
 80010b6:	4619      	mov	r1, r3
 80010b8:	1dfb      	adds	r3, r7, #7
 80010ba:	4622      	mov	r2, r4
 80010bc:	701a      	strb	r2, [r3, #0]
 80010be:	1dbb      	adds	r3, r7, #6
 80010c0:	4602      	mov	r2, r0
 80010c2:	701a      	strb	r2, [r3, #0]
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	460a      	mov	r2, r1
 80010c8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	1dba      	adds	r2, r7, #6
 80010d0:	7812      	ldrb	r2, [r2, #0]
 80010d2:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80010d4:	2300      	movs	r3, #0
 80010d6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80010da:	e010      	b.n	80010fe <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80010dc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80010e0:	463a      	mov	r2, r7
 80010e2:	6812      	ldr	r2, [r2, #0]
 80010e4:	441a      	add	r2, r3
 80010e6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80010ea:	3301      	adds	r3, #1
 80010ec:	7811      	ldrb	r1, [r2, #0]
 80010ee:	f107 020c 	add.w	r2, r7, #12
 80010f2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80010f4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80010f8:	3301      	adds	r3, #1
 80010fa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80010fe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001102:	b29b      	uxth	r3, r3
 8001104:	1d3a      	adds	r2, r7, #4
 8001106:	8812      	ldrh	r2, [r2, #0]
 8001108:	429a      	cmp	r2, r3
 800110a:	d8e7      	bhi.n	80010dc <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800110c:	1dfb      	adds	r3, r7, #7
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b299      	uxth	r1, r3
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	b298      	uxth	r0, r3
 800111a:	f107 020c 	add.w	r2, r7, #12
 800111e:	230a      	movs	r3, #10
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	4603      	mov	r3, r0
 8001124:	4803      	ldr	r0, [pc, #12]	; (8001134 <ssd1306_I2C_WriteMulti+0x8c>)
 8001126:	f002 f82b 	bl	8003180 <HAL_I2C_Master_Transmit>
}
 800112a:	bf00      	nop
 800112c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001130:	46bd      	mov	sp, r7
 8001132:	bd90      	pop	{r4, r7, pc}
 8001134:	20000780 	.word	0x20000780

08001138 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af02      	add	r7, sp, #8
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
 8001142:	460b      	mov	r3, r1
 8001144:	71bb      	strb	r3, [r7, #6]
 8001146:	4613      	mov	r3, r2
 8001148:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800114a:	79bb      	ldrb	r3, [r7, #6]
 800114c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800114e:	797b      	ldrb	r3, [r7, #5]
 8001150:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	b299      	uxth	r1, r3
 8001156:	f107 020c 	add.w	r2, r7, #12
 800115a:	230a      	movs	r3, #10
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2302      	movs	r3, #2
 8001160:	4803      	ldr	r0, [pc, #12]	; (8001170 <ssd1306_I2C_Write+0x38>)
 8001162:	f002 f80d 	bl	8003180 <HAL_I2C_Master_Transmit>
}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000780 	.word	0x20000780

08001174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <HAL_MspInit+0x44>)
 800117c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117e:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <HAL_MspInit+0x44>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6613      	str	r3, [r2, #96]	; 0x60
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <HAL_MspInit+0x44>)
 8001188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <HAL_MspInit+0x44>)
 8001194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001196:	4a08      	ldr	r2, [pc, #32]	; (80011b8 <HAL_MspInit+0x44>)
 8001198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119c:	6593      	str	r3, [r2, #88]	; 0x58
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_MspInit+0x44>)
 80011a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000

080011bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a15      	ldr	r2, [pc, #84]	; (8001230 <HAL_ADC_MspInit+0x74>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d123      	bne.n	8001226 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_ADC_MspInit+0x78>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	4a14      	ldr	r2, [pc, #80]	; (8001234 <HAL_ADC_MspInit+0x78>)
 80011e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_ADC_MspInit+0x78>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <HAL_ADC_MspInit+0x78>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <HAL_ADC_MspInit+0x78>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <HAL_ADC_MspInit+0x78>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800120e:	2301      	movs	r3, #1
 8001210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001212:	230b      	movs	r3, #11
 8001214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	4805      	ldr	r0, [pc, #20]	; (8001238 <HAL_ADC_MspInit+0x7c>)
 8001222:	f001 fd5d 	bl	8002ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001226:	bf00      	nop
 8001228:	3728      	adds	r7, #40	; 0x28
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	50040000 	.word	0x50040000
 8001234:	40021000 	.word	0x40021000
 8001238:	48000800 	.word	0x48000800

0800123c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a17      	ldr	r2, [pc, #92]	; (80012b8 <HAL_I2C_MspInit+0x7c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d127      	bne.n	80012ae <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <HAL_I2C_MspInit+0x80>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a16      	ldr	r2, [pc, #88]	; (80012bc <HAL_I2C_MspInit+0x80>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <HAL_I2C_MspInit+0x80>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001276:	23c0      	movs	r3, #192	; 0xc0
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800127a:	2312      	movs	r3, #18
 800127c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800127e:	2301      	movs	r3, #1
 8001280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001286:	2304      	movs	r3, #4
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4619      	mov	r1, r3
 8001290:	480b      	ldr	r0, [pc, #44]	; (80012c0 <HAL_I2C_MspInit+0x84>)
 8001292:	f001 fd25 	bl	8002ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <HAL_I2C_MspInit+0x80>)
 8001298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129a:	4a08      	ldr	r2, [pc, #32]	; (80012bc <HAL_I2C_MspInit+0x80>)
 800129c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012a0:	6593      	str	r3, [r2, #88]	; 0x58
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_I2C_MspInit+0x80>)
 80012a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012ae:	bf00      	nop
 80012b0:	3728      	adds	r7, #40	; 0x28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40005400 	.word	0x40005400
 80012bc:	40021000 	.word	0x40021000
 80012c0:	48000400 	.word	0x48000400

080012c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	; 0x28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a25      	ldr	r2, [pc, #148]	; (8001378 <HAL_SPI_MspInit+0xb4>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d144      	bne.n	8001370 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012e6:	4b25      	ldr	r3, [pc, #148]	; (800137c <HAL_SPI_MspInit+0xb8>)
 80012e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ea:	4a24      	ldr	r2, [pc, #144]	; (800137c <HAL_SPI_MspInit+0xb8>)
 80012ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f0:	6593      	str	r3, [r2, #88]	; 0x58
 80012f2:	4b22      	ldr	r3, [pc, #136]	; (800137c <HAL_SPI_MspInit+0xb8>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fe:	4b1f      	ldr	r3, [pc, #124]	; (800137c <HAL_SPI_MspInit+0xb8>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001302:	4a1e      	ldr	r2, [pc, #120]	; (800137c <HAL_SPI_MspInit+0xb8>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <HAL_SPI_MspInit+0xb8>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	4b19      	ldr	r3, [pc, #100]	; (800137c <HAL_SPI_MspInit+0xb8>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131a:	4a18      	ldr	r2, [pc, #96]	; (800137c <HAL_SPI_MspInit+0xb8>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001322:	4b16      	ldr	r3, [pc, #88]	; (800137c <HAL_SPI_MspInit+0xb8>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800132e:	230c      	movs	r3, #12
 8001330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800133e:	2305      	movs	r3, #5
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4619      	mov	r1, r3
 8001348:	480d      	ldr	r0, [pc, #52]	; (8001380 <HAL_SPI_MspInit+0xbc>)
 800134a:	f001 fcc9 	bl	8002ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800134e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135c:	2303      	movs	r3, #3
 800135e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001360:	2305      	movs	r3, #5
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	4806      	ldr	r0, [pc, #24]	; (8001384 <HAL_SPI_MspInit+0xc0>)
 800136c:	f001 fcb8 	bl	8002ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001370:	bf00      	nop
 8001372:	3728      	adds	r7, #40	; 0x28
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40003800 	.word	0x40003800
 800137c:	40021000 	.word	0x40021000
 8001380:	48000800 	.word	0x48000800
 8001384:	48000400 	.word	0x48000400

08001388 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a17      	ldr	r2, [pc, #92]	; (8001404 <HAL_UART_MspInit+0x7c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d128      	bne.n	80013fc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013aa:	4b17      	ldr	r3, [pc, #92]	; (8001408 <HAL_UART_MspInit+0x80>)
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ae:	4a16      	ldr	r2, [pc, #88]	; (8001408 <HAL_UART_MspInit+0x80>)
 80013b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b4:	6593      	str	r3, [r2, #88]	; 0x58
 80013b6:	4b14      	ldr	r3, [pc, #80]	; (8001408 <HAL_UART_MspInit+0x80>)
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_UART_MspInit+0x80>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	4a10      	ldr	r2, [pc, #64]	; (8001408 <HAL_UART_MspInit+0x80>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <HAL_UART_MspInit+0x80>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013da:	230c      	movs	r3, #12
 80013dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e6:	2303      	movs	r3, #3
 80013e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ea:	2307      	movs	r3, #7
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f8:	f001 fc72 	bl	8002ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013fc:	bf00      	nop
 80013fe:	3728      	adds	r7, #40	; 0x28
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40004400 	.word	0x40004400
 8001408:	40021000 	.word	0x40021000

0800140c <SDTimer_Handler>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void SDTimer_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001410:	4b0e      	ldr	r3, [pc, #56]	; (800144c <SDTimer_Handler+0x40>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d006      	beq.n	8001428 <SDTimer_Handler+0x1c>
    Timer1--;
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <SDTimer_Handler+0x40>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	3b01      	subs	r3, #1
 8001422:	b2da      	uxtb	r2, r3
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <SDTimer_Handler+0x40>)
 8001426:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <SDTimer_Handler+0x44>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d006      	beq.n	8001440 <SDTimer_Handler+0x34>
    Timer2--;
 8001432:	4b07      	ldr	r3, [pc, #28]	; (8001450 <SDTimer_Handler+0x44>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	3b01      	subs	r3, #1
 800143a:	b2da      	uxtb	r2, r3
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <SDTimer_Handler+0x44>)
 800143e:	701a      	strb	r2, [r3, #0]
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000b81 	.word	0x20000b81
 8001450:	20000b80 	.word	0x20000b80

08001454 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <SysTick_Handler+0x30>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	3301      	adds	r3, #1
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <SysTick_Handler+0x30>)
 8001464:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8001466:	4b07      	ldr	r3, [pc, #28]	; (8001484 <SysTick_Handler+0x30>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b09      	cmp	r3, #9
 800146e:	d904      	bls.n	800147a <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <SysTick_Handler+0x30>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8001476:	f7ff ffc9 	bl	800140c <SDTimer_Handler>
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800147a:	f000 f91f 	bl	80016bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200004b6 	.word	0x200004b6

08001488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <HardFault_Handler+0x4>

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <MemManage_Handler+0x4>

080014a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <BusFault_Handler+0x4>

080014a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <UsageFault_Handler+0x4>

080014ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e0:	4a14      	ldr	r2, [pc, #80]	; (8001534 <_sbrk+0x5c>)
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <_sbrk+0x60>)
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014ec:	4b13      	ldr	r3, [pc, #76]	; (800153c <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d102      	bne.n	80014fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <_sbrk+0x64>)
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <_sbrk+0x68>)
 80014f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	429a      	cmp	r2, r3
 8001506:	d207      	bcs.n	8001518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001508:	f004 fb76 	bl	8005bf8 <__errno>
 800150c:	4602      	mov	r2, r0
 800150e:	230c      	movs	r3, #12
 8001510:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295
 8001516:	e009      	b.n	800152c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <_sbrk+0x64>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <_sbrk+0x64>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <_sbrk+0x64>)
 8001528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800152a:	68fb      	ldr	r3, [r7, #12]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20018000 	.word	0x20018000
 8001538:	00000400 	.word	0x00000400
 800153c:	200004b8 	.word	0x200004b8
 8001540:	20000ff8 	.word	0x20000ff8

08001544 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001548:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <SystemInit+0x64>)
 800154a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800154e:	4a16      	ldr	r2, [pc, #88]	; (80015a8 <SystemInit+0x64>)
 8001550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <SystemInit+0x68>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a13      	ldr	r2, [pc, #76]	; (80015ac <SystemInit+0x68>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <SystemInit+0x68>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <SystemInit+0x68>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a0f      	ldr	r2, [pc, #60]	; (80015ac <SystemInit+0x68>)
 8001570:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001574:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001578:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <SystemInit+0x68>)
 800157c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001580:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <SystemInit+0x68>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a09      	ldr	r2, [pc, #36]	; (80015ac <SystemInit+0x68>)
 8001588:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800158c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <SystemInit+0x68>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <SystemInit+0x64>)
 8001596:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800159a:	609a      	str	r2, [r3, #8]
#endif
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000ed00 	.word	0xe000ed00
 80015ac:	40021000 	.word	0x40021000

080015b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015b4:	f7ff ffc6 	bl	8001544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80015b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80015ba:	e003      	b.n	80015c4 <LoopCopyDataInit>

080015bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80015be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80015c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80015c2:	3104      	adds	r1, #4

080015c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80015c4:	480a      	ldr	r0, [pc, #40]	; (80015f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80015c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80015ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80015cc:	d3f6      	bcc.n	80015bc <CopyDataInit>
	ldr	r2, =_sbss
 80015ce:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80015d0:	e002      	b.n	80015d8 <LoopFillZerobss>

080015d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80015d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80015d4:	f842 3b04 	str.w	r3, [r2], #4

080015d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <LoopForever+0x16>)
	cmp	r2, r3
 80015da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80015dc:	d3f9      	bcc.n	80015d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015de:	f004 fb11 	bl	8005c04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015e2:	f7fe ffcd 	bl	8000580 <main>

080015e6 <LoopForever>:

LoopForever:
    b LoopForever
 80015e6:	e7fe      	b.n	80015e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015e8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80015ec:	08007298 	.word	0x08007298
	ldr	r0, =_sdata
 80015f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80015f4:	20000090 	.word	0x20000090
	ldr	r2, =_sbss
 80015f8:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 80015fc:	20000ff4 	.word	0x20000ff4

08001600 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001600:	e7fe      	b.n	8001600 <ADC1_2_IRQHandler>
	...

08001604 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <HAL_Init+0x3c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a0b      	ldr	r2, [pc, #44]	; (8001640 <HAL_Init+0x3c>)
 8001614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001618:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800161a:	2003      	movs	r0, #3
 800161c:	f001 fb2c 	bl	8002c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001620:	2000      	movs	r0, #0
 8001622:	f000 f80f 	bl	8001644 <HAL_InitTick>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d002      	beq.n	8001632 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	71fb      	strb	r3, [r7, #7]
 8001630:	e001      	b.n	8001636 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001632:	f7ff fd9f 	bl	8001174 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001636:	79fb      	ldrb	r3, [r7, #7]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40022000 	.word	0x40022000

08001644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800164c:	2300      	movs	r3, #0
 800164e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001650:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <HAL_InitTick+0x6c>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d023      	beq.n	80016a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_InitTick+0x70>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <HAL_InitTick+0x6c>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001666:	fbb3 f3f1 	udiv	r3, r3, r1
 800166a:	fbb2 f3f3 	udiv	r3, r2, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f001 fb29 	bl	8002cc6 <HAL_SYSTICK_Config>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10f      	bne.n	800169a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b0f      	cmp	r3, #15
 800167e:	d809      	bhi.n	8001694 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001680:	2200      	movs	r2, #0
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	f001 fb01 	bl	8002c8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800168c:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <HAL_InitTick+0x74>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	e007      	b.n	80016a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	73fb      	strb	r3, [r7, #15]
 8001698:	e004      	b.n	80016a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	73fb      	strb	r3, [r7, #15]
 800169e:	e001      	b.n	80016a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000014 	.word	0x20000014
 80016b4:	2000000c 	.word	0x2000000c
 80016b8:	20000010 	.word	0x20000010

080016bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_IncTick+0x20>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_IncTick+0x24>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <HAL_IncTick+0x24>)
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000014 	.word	0x20000014
 80016e0:	20000b84 	.word	0x20000b84

080016e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <HAL_GetTick+0x14>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000b84 	.word	0x20000b84

080016fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001704:	f7ff ffee 	bl	80016e4 <HAL_GetTick>
 8001708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001714:	d005      	beq.n	8001722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <HAL_Delay+0x40>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001722:	bf00      	nop
 8001724:	f7ff ffde 	bl	80016e4 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	429a      	cmp	r2, r3
 8001732:	d8f7      	bhi.n	8001724 <HAL_Delay+0x28>
  {
  }
}
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000014 	.word	0x20000014

08001740 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	431a      	orrs	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	609a      	str	r2, [r3, #8]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	609a      	str	r2, [r3, #8]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b087      	sub	sp, #28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	3360      	adds	r3, #96	; 0x60
 80017ba:	461a      	mov	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <LL_ADC_SetOffset+0x44>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	4313      	orrs	r3, r2
 80017d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017e0:	bf00      	nop
 80017e2:	371c      	adds	r7, #28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	03fff000 	.word	0x03fff000

080017f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3360      	adds	r3, #96	; 0x60
 80017fe:	461a      	mov	r2, r3
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001810:	4618      	mov	r0, r3
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	3360      	adds	r3, #96	; 0x60
 800182c:	461a      	mov	r2, r3
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	431a      	orrs	r2, r3
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001846:	bf00      	nop
 8001848:	371c      	adds	r7, #28
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	3330      	adds	r3, #48	; 0x30
 8001888:	461a      	mov	r2, r3
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	4413      	add	r3, r2
 8001896:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	f003 031f 	and.w	r3, r3, #31
 80018a2:	211f      	movs	r1, #31
 80018a4:	fa01 f303 	lsl.w	r3, r1, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	401a      	ands	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	0e9b      	lsrs	r3, r3, #26
 80018b0:	f003 011f 	and.w	r1, r3, #31
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	f003 031f 	and.w	r3, r3, #31
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	431a      	orrs	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018c4:	bf00      	nop
 80018c6:	371c      	adds	r7, #28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b087      	sub	sp, #28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	3314      	adds	r3, #20
 80018e0:	461a      	mov	r2, r3
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	0e5b      	lsrs	r3, r3, #25
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	4413      	add	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	0d1b      	lsrs	r3, r3, #20
 80018f8:	f003 031f 	and.w	r3, r3, #31
 80018fc:	2107      	movs	r1, #7
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	401a      	ands	r2, r3
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	0d1b      	lsrs	r3, r3, #20
 800190a:	f003 031f 	and.w	r3, r3, #31
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	fa01 f303 	lsl.w	r3, r1, r3
 8001914:	431a      	orrs	r2, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800191a:	bf00      	nop
 800191c:	371c      	adds	r7, #28
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
	...

08001928 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001940:	43db      	mvns	r3, r3
 8001942:	401a      	ands	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f003 0318 	and.w	r3, r3, #24
 800194a:	4908      	ldr	r1, [pc, #32]	; (800196c <LL_ADC_SetChannelSingleDiff+0x44>)
 800194c:	40d9      	lsrs	r1, r3
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	400b      	ands	r3, r1
 8001952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001956:	431a      	orrs	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800195e:	bf00      	nop
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	0007ffff 	.word	0x0007ffff

08001970 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 031f 	and.w	r3, r3, #31
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80019b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6093      	str	r3, [r2, #8]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019e0:	d101      	bne.n	80019e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a30:	d101      	bne.n	8001a36 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a58:	f043 0201 	orr.w	r2, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <LL_ADC_IsEnabled+0x18>
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <LL_ADC_IsEnabled+0x1a>
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001aa2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001aa6:	f043 0204 	orr.w	r2, r3, #4
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d101      	bne.n	8001ad2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d101      	bne.n	8001af8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b089      	sub	sp, #36	; 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e134      	b.n	8001d8c <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d109      	bne.n	8001b44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff fb43 	bl	80011bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff3f 	bl	80019cc <LL_ADC_IsDeepPowerDownEnabled>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d004      	beq.n	8001b5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ff25 	bl	80019a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff ff5a 	bl	8001a1c <LL_ADC_IsInternalRegulatorEnabled>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d113      	bne.n	8001b96 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff ff3e 	bl	80019f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001b78:	4b86      	ldr	r3, [pc, #536]	; (8001d94 <HAL_ADC_Init+0x28c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	099b      	lsrs	r3, r3, #6
 8001b7e:	4a86      	ldr	r2, [pc, #536]	; (8001d98 <HAL_ADC_Init+0x290>)
 8001b80:	fba2 2303 	umull	r2, r3, r2, r3
 8001b84:	099b      	lsrs	r3, r3, #6
 8001b86:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b88:	e002      	b.n	8001b90 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f9      	bne.n	8001b8a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff ff3e 	bl	8001a1c <LL_ADC_IsInternalRegulatorEnabled>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10d      	bne.n	8001bc2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001baa:	f043 0210 	orr.w	r2, r3, #16
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb6:	f043 0201 	orr.w	r2, r3, #1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff ff77 	bl	8001aba <LL_ADC_REG_IsConversionOngoing>
 8001bcc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd2:	f003 0310 	and.w	r3, r3, #16
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f040 80cf 	bne.w	8001d7a <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f040 80cb 	bne.w	8001d7a <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bec:	f043 0202 	orr.w	r2, r3, #2
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff37 	bl	8001a6c <LL_ADC_IsEnabled>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d115      	bne.n	8001c30 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c04:	4865      	ldr	r0, [pc, #404]	; (8001d9c <HAL_ADC_Init+0x294>)
 8001c06:	f7ff ff31 	bl	8001a6c <LL_ADC_IsEnabled>
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	4864      	ldr	r0, [pc, #400]	; (8001da0 <HAL_ADC_Init+0x298>)
 8001c0e:	f7ff ff2d 	bl	8001a6c <LL_ADC_IsEnabled>
 8001c12:	4603      	mov	r3, r0
 8001c14:	431c      	orrs	r4, r3
 8001c16:	4863      	ldr	r0, [pc, #396]	; (8001da4 <HAL_ADC_Init+0x29c>)
 8001c18:	f7ff ff28 	bl	8001a6c <LL_ADC_IsEnabled>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4323      	orrs	r3, r4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d105      	bne.n	8001c30 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	485f      	ldr	r0, [pc, #380]	; (8001da8 <HAL_ADC_Init+0x2a0>)
 8001c2c:	f7ff fd88 	bl	8001740 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	7e5b      	ldrb	r3, [r3, #25]
 8001c34:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c3a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001c40:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001c46:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c4e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d106      	bne.n	8001c6c <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	3b01      	subs	r3, #1
 8001c64:	045b      	lsls	r3, r3, #17
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d009      	beq.n	8001c88 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c78:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c80:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68da      	ldr	r2, [r3, #12]
 8001c8e:	4b47      	ldr	r3, [pc, #284]	; (8001dac <HAL_ADC_Init+0x2a4>)
 8001c90:	4013      	ands	r3, r2
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	69b9      	ldr	r1, [r7, #24]
 8001c98:	430b      	orrs	r3, r1
 8001c9a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff0a 	bl	8001aba <LL_ADC_REG_IsConversionOngoing>
 8001ca6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff17 	bl	8001ae0 <LL_ADC_INJ_IsConversionOngoing>
 8001cb2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d13d      	bne.n	8001d36 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d13a      	bne.n	8001d36 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cc4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ccc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cdc:	f023 0302 	bic.w	r3, r3, #2
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	69b9      	ldr	r1, [r7, #24]
 8001ce6:	430b      	orrs	r3, r1
 8001ce8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d118      	bne.n	8001d26 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001cfe:	f023 0304 	bic.w	r3, r3, #4
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d0a:	4311      	orrs	r1, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d10:	4311      	orrs	r1, r2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d16:	430a      	orrs	r2, r1
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0201 	orr.w	r2, r2, #1
 8001d22:	611a      	str	r2, [r3, #16]
 8001d24:	e007      	b.n	8001d36 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0201 	bic.w	r2, r2, #1
 8001d34:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d10c      	bne.n	8001d58 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	f023 010f 	bic.w	r1, r3, #15
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	1e5a      	subs	r2, r3, #1
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	631a      	str	r2, [r3, #48]	; 0x30
 8001d56:	e007      	b.n	8001d68 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 020f 	bic.w	r2, r2, #15
 8001d66:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6c:	f023 0303 	bic.w	r3, r3, #3
 8001d70:	f043 0201 	orr.w	r2, r3, #1
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	655a      	str	r2, [r3, #84]	; 0x54
 8001d78:	e007      	b.n	8001d8a <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7e:	f043 0210 	orr.w	r2, r3, #16
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3724      	adds	r7, #36	; 0x24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd90      	pop	{r4, r7, pc}
 8001d94:	2000000c 	.word	0x2000000c
 8001d98:	053e2d63 	.word	0x053e2d63
 8001d9c:	50040000 	.word	0x50040000
 8001da0:	50040100 	.word	0x50040100
 8001da4:	50040200 	.word	0x50040200
 8001da8:	50040300 	.word	0x50040300
 8001dac:	fff0c007 	.word	0xfff0c007

08001db0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001db8:	4857      	ldr	r0, [pc, #348]	; (8001f18 <HAL_ADC_Start+0x168>)
 8001dba:	f7ff fdd9 	bl	8001970 <LL_ADC_GetMultimode>
 8001dbe:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fe78 	bl	8001aba <LL_ADC_REG_IsConversionOngoing>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f040 809c 	bne.w	8001f0a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_ADC_Start+0x30>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e097      	b.n	8001f10 <HAL_ADC_Start+0x160>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 fd67 	bl	80028bc <ADC_Enable>
 8001dee:	4603      	mov	r3, r0
 8001df0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001df2:	7dfb      	ldrb	r3, [r7, #23]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f040 8083 	bne.w	8001f00 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e02:	f023 0301 	bic.w	r3, r3, #1
 8001e06:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a42      	ldr	r2, [pc, #264]	; (8001f1c <HAL_ADC_Start+0x16c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d002      	beq.n	8001e1e <HAL_ADC_Start+0x6e>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	e000      	b.n	8001e20 <HAL_ADC_Start+0x70>
 8001e1e:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <HAL_ADC_Start+0x170>)
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d002      	beq.n	8001e2e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d105      	bne.n	8001e3a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e46:	d106      	bne.n	8001e56 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4c:	f023 0206 	bic.w	r2, r3, #6
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	659a      	str	r2, [r3, #88]	; 0x58
 8001e54:	e002      	b.n	8001e5c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	221c      	movs	r2, #28
 8001e62:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a2a      	ldr	r2, [pc, #168]	; (8001f1c <HAL_ADC_Start+0x16c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d002      	beq.n	8001e7c <HAL_ADC_Start+0xcc>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	e000      	b.n	8001e7e <HAL_ADC_Start+0xce>
 8001e7c:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <HAL_ADC_Start+0x170>)
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d008      	beq.n	8001e98 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	2b05      	cmp	r3, #5
 8001e90:	d002      	beq.n	8001e98 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	2b09      	cmp	r3, #9
 8001e96:	d114      	bne.n	8001ec2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d007      	beq.n	8001eb6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eaa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001eae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fde9 	bl	8001a92 <LL_ADC_REG_StartConversion>
 8001ec0:	e025      	b.n	8001f0e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <HAL_ADC_Start+0x16c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d002      	beq.n	8001ede <HAL_ADC_Start+0x12e>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	e000      	b.n	8001ee0 <HAL_ADC_Start+0x130>
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <HAL_ADC_Start+0x170>)
 8001ee0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00f      	beq.n	8001f0e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ef6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	655a      	str	r2, [r3, #84]	; 0x54
 8001efe:	e006      	b.n	8001f0e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001f08:	e001      	b.n	8001f0e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	50040300 	.word	0x50040300
 8001f1c:	50040100 	.word	0x50040100
 8001f20:	50040000 	.word	0x50040000

08001f24 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f2e:	4862      	ldr	r0, [pc, #392]	; (80020b8 <HAL_ADC_PollForConversion+0x194>)
 8001f30:	f7ff fd1e 	bl	8001970 <LL_ADC_GetMultimode>
 8001f34:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d102      	bne.n	8001f44 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001f3e:	2308      	movs	r3, #8
 8001f40:	61fb      	str	r3, [r7, #28]
 8001f42:	e02a      	b.n	8001f9a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2b05      	cmp	r3, #5
 8001f4e:	d002      	beq.n	8001f56 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2b09      	cmp	r3, #9
 8001f54:	d111      	bne.n	8001f7a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d007      	beq.n	8001f74 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f68:	f043 0220 	orr.w	r2, r3, #32
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e09d      	b.n	80020b0 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f74:	2304      	movs	r3, #4
 8001f76:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f78:	e00f      	b.n	8001f9a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001f7a:	484f      	ldr	r0, [pc, #316]	; (80020b8 <HAL_ADC_PollForConversion+0x194>)
 8001f7c:	f7ff fd06 	bl	800198c <LL_ADC_GetMultiDMATransfer>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d007      	beq.n	8001f96 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8a:	f043 0220 	orr.w	r2, r3, #32
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e08c      	b.n	80020b0 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f96:	2304      	movs	r3, #4
 8001f98:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f9a:	f7ff fba3 	bl	80016e4 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fa0:	e01a      	b.n	8001fd8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa8:	d016      	beq.n	8001fd8 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001faa:	f7ff fb9b 	bl	80016e4 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d302      	bcc.n	8001fc0 <HAL_ADC_PollForConversion+0x9c>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10b      	bne.n	8001fd8 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc4:	f043 0204 	orr.w	r2, r3, #4
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e06b      	b.n	80020b0 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0dd      	beq.n	8001fa2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fc2b 	bl	8001852 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d01c      	beq.n	800203c <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	7e5b      	ldrb	r3, [r3, #25]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d118      	bne.n	800203c <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	2b08      	cmp	r3, #8
 8002016:	d111      	bne.n	800203c <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002034:	f043 0201 	orr.w	r2, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a1e      	ldr	r2, [pc, #120]	; (80020bc <HAL_ADC_PollForConversion+0x198>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d002      	beq.n	800204c <HAL_ADC_PollForConversion+0x128>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	e000      	b.n	800204e <HAL_ADC_PollForConversion+0x12a>
 800204c:	4b1c      	ldr	r3, [pc, #112]	; (80020c0 <HAL_ADC_PollForConversion+0x19c>)
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	4293      	cmp	r3, r2
 8002054:	d008      	beq.n	8002068 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2b05      	cmp	r3, #5
 8002060:	d002      	beq.n	8002068 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2b09      	cmp	r3, #9
 8002066:	d104      	bne.n	8002072 <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	61bb      	str	r3, [r7, #24]
 8002070:	e00c      	b.n	800208c <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a11      	ldr	r2, [pc, #68]	; (80020bc <HAL_ADC_PollForConversion+0x198>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d002      	beq.n	8002082 <HAL_ADC_PollForConversion+0x15e>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	e000      	b.n	8002084 <HAL_ADC_PollForConversion+0x160>
 8002082:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <HAL_ADC_PollForConversion+0x19c>)
 8002084:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	2b08      	cmp	r3, #8
 8002090:	d104      	bne.n	800209c <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2208      	movs	r2, #8
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	e008      	b.n	80020ae <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d103      	bne.n	80020ae <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	220c      	movs	r2, #12
 80020ac:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3720      	adds	r7, #32
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	50040300 	.word	0x50040300
 80020bc:	50040100 	.word	0x50040100
 80020c0:	50040000 	.word	0x50040000

080020c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b0b6      	sub	sp, #216	; 0xd8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x22>
 80020fe:	2302      	movs	r3, #2
 8002100:	e3c6      	b.n	8002890 <HAL_ADC_ConfigChannel+0x7b0>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fcd3 	bl	8001aba <LL_ADC_REG_IsConversionOngoing>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	f040 83a7 	bne.w	800286a <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b05      	cmp	r3, #5
 8002122:	d824      	bhi.n	800216e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	3b02      	subs	r3, #2
 800212a:	2b03      	cmp	r3, #3
 800212c:	d81b      	bhi.n	8002166 <HAL_ADC_ConfigChannel+0x86>
 800212e:	a201      	add	r2, pc, #4	; (adr r2, 8002134 <HAL_ADC_ConfigChannel+0x54>)
 8002130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002134:	08002145 	.word	0x08002145
 8002138:	0800214d 	.word	0x0800214d
 800213c:	08002155 	.word	0x08002155
 8002140:	0800215d 	.word	0x0800215d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	220c      	movs	r2, #12
 8002148:	605a      	str	r2, [r3, #4]
          break;
 800214a:	e011      	b.n	8002170 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	2212      	movs	r2, #18
 8002150:	605a      	str	r2, [r3, #4]
          break;
 8002152:	e00d      	b.n	8002170 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2218      	movs	r2, #24
 8002158:	605a      	str	r2, [r3, #4]
          break;
 800215a:	e009      	b.n	8002170 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002162:	605a      	str	r2, [r3, #4]
          break;
 8002164:	e004      	b.n	8002170 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	2206      	movs	r2, #6
 800216a:	605a      	str	r2, [r3, #4]
          break;
 800216c:	e000      	b.n	8002170 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800216e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6818      	ldr	r0, [r3, #0]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	6859      	ldr	r1, [r3, #4]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	f7ff fb7b 	bl	8001878 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fc97 	bl	8001aba <LL_ADC_REG_IsConversionOngoing>
 800218c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fca3 	bl	8001ae0 <LL_ADC_INJ_IsConversionOngoing>
 800219a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800219e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f040 81a6 	bne.w	80024f4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f040 81a1 	bne.w	80024f4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	6819      	ldr	r1, [r3, #0]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	461a      	mov	r2, r3
 80021c0:	f7ff fb86 	bl	80018d0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	695a      	ldr	r2, [r3, #20]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	08db      	lsrs	r3, r3, #3
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d00a      	beq.n	80021fc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	6919      	ldr	r1, [r3, #16]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021f6:	f7ff fad7 	bl	80017a8 <LL_ADC_SetOffset>
 80021fa:	e17b      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2100      	movs	r1, #0
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff faf4 	bl	80017f0 <LL_ADC_GetOffsetChannel>
 8002208:	4603      	mov	r3, r0
 800220a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10a      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x148>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2100      	movs	r1, #0
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fae9 	bl	80017f0 <LL_ADC_GetOffsetChannel>
 800221e:	4603      	mov	r3, r0
 8002220:	0e9b      	lsrs	r3, r3, #26
 8002222:	f003 021f 	and.w	r2, r3, #31
 8002226:	e01e      	b.n	8002266 <HAL_ADC_ConfigChannel+0x186>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2100      	movs	r1, #0
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fade 	bl	80017f0 <LL_ADC_GetOffsetChannel>
 8002234:	4603      	mov	r3, r0
 8002236:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800223e:	fa93 f3a3 	rbit	r3, r3
 8002242:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002246:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800224a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800224e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002256:	2320      	movs	r3, #32
 8002258:	e004      	b.n	8002264 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800225a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226e:	2b00      	cmp	r3, #0
 8002270:	d105      	bne.n	800227e <HAL_ADC_ConfigChannel+0x19e>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	0e9b      	lsrs	r3, r3, #26
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	e018      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x1d0>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002296:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800229a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80022a2:	2320      	movs	r3, #32
 80022a4:	e004      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80022a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022aa:	fab3 f383 	clz	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d106      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2200      	movs	r2, #0
 80022ba:	2100      	movs	r1, #0
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff faad 	bl	800181c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2101      	movs	r1, #1
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fa91 	bl	80017f0 <LL_ADC_GetOffsetChannel>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10a      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x20e>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2101      	movs	r1, #1
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fa86 	bl	80017f0 <LL_ADC_GetOffsetChannel>
 80022e4:	4603      	mov	r3, r0
 80022e6:	0e9b      	lsrs	r3, r3, #26
 80022e8:	f003 021f 	and.w	r2, r3, #31
 80022ec:	e01e      	b.n	800232c <HAL_ADC_ConfigChannel+0x24c>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2101      	movs	r1, #1
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff fa7b 	bl	80017f0 <LL_ADC_GetOffsetChannel>
 80022fa:	4603      	mov	r3, r0
 80022fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002304:	fa93 f3a3 	rbit	r3, r3
 8002308:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800230c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002310:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002314:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800231c:	2320      	movs	r3, #32
 800231e:	e004      	b.n	800232a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002320:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	b2db      	uxtb	r3, r3
 800232a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002334:	2b00      	cmp	r3, #0
 8002336:	d105      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x264>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	0e9b      	lsrs	r3, r3, #26
 800233e:	f003 031f 	and.w	r3, r3, #31
 8002342:	e018      	b.n	8002376 <HAL_ADC_ConfigChannel+0x296>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002350:	fa93 f3a3 	rbit	r3, r3
 8002354:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002358:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800235c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002360:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002368:	2320      	movs	r3, #32
 800236a:	e004      	b.n	8002376 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800236c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002370:	fab3 f383 	clz	r3, r3
 8002374:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002376:	429a      	cmp	r2, r3
 8002378:	d106      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2200      	movs	r2, #0
 8002380:	2101      	movs	r1, #1
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fa4a 	bl	800181c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2102      	movs	r1, #2
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fa2e 	bl	80017f0 <LL_ADC_GetOffsetChannel>
 8002394:	4603      	mov	r3, r0
 8002396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10a      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x2d4>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2102      	movs	r1, #2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fa23 	bl	80017f0 <LL_ADC_GetOffsetChannel>
 80023aa:	4603      	mov	r3, r0
 80023ac:	0e9b      	lsrs	r3, r3, #26
 80023ae:	f003 021f 	and.w	r2, r3, #31
 80023b2:	e01e      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x312>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2102      	movs	r1, #2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fa18 	bl	80017f0 <LL_ADC_GetOffsetChannel>
 80023c0:	4603      	mov	r3, r0
 80023c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023ca:	fa93 f3a3 	rbit	r3, r3
 80023ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80023d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80023da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80023e2:	2320      	movs	r3, #32
 80023e4:	e004      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80023e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d105      	bne.n	800240a <HAL_ADC_ConfigChannel+0x32a>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	0e9b      	lsrs	r3, r3, #26
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	e016      	b.n	8002438 <HAL_ADC_ConfigChannel+0x358>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002416:	fa93 f3a3 	rbit	r3, r3
 800241a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800241c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800241e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002422:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800242a:	2320      	movs	r3, #32
 800242c:	e004      	b.n	8002438 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800242e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002438:	429a      	cmp	r2, r3
 800243a:	d106      	bne.n	800244a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2200      	movs	r2, #0
 8002442:	2102      	movs	r1, #2
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff f9e9 	bl	800181c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2103      	movs	r1, #3
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff f9cd 	bl	80017f0 <LL_ADC_GetOffsetChannel>
 8002456:	4603      	mov	r3, r0
 8002458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10a      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x396>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2103      	movs	r1, #3
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff f9c2 	bl	80017f0 <LL_ADC_GetOffsetChannel>
 800246c:	4603      	mov	r3, r0
 800246e:	0e9b      	lsrs	r3, r3, #26
 8002470:	f003 021f 	and.w	r2, r3, #31
 8002474:	e017      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x3c6>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2103      	movs	r1, #3
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff f9b7 	bl	80017f0 <LL_ADC_GetOffsetChannel>
 8002482:	4603      	mov	r3, r0
 8002484:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002488:	fa93 f3a3 	rbit	r3, r3
 800248c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800248e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002490:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002492:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002498:	2320      	movs	r3, #32
 800249a:	e003      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800249c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d105      	bne.n	80024be <HAL_ADC_ConfigChannel+0x3de>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	0e9b      	lsrs	r3, r3, #26
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	e011      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x402>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024c6:	fa93 f3a3 	rbit	r3, r3
 80024ca:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80024cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80024d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80024d6:	2320      	movs	r3, #32
 80024d8:	e003      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80024da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d106      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2200      	movs	r2, #0
 80024ec:	2103      	movs	r1, #3
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff f994 	bl	800181c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff fab7 	bl	8001a6c <LL_ADC_IsEnabled>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	f040 813f 	bne.w	8002784 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6819      	ldr	r1, [r3, #0]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	461a      	mov	r2, r3
 8002514:	f7ff fa08 	bl	8001928 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	4a8e      	ldr	r2, [pc, #568]	; (8002758 <HAL_ADC_ConfigChannel+0x678>)
 800251e:	4293      	cmp	r3, r2
 8002520:	f040 8130 	bne.w	8002784 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10b      	bne.n	800254c <HAL_ADC_ConfigChannel+0x46c>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	0e9b      	lsrs	r3, r3, #26
 800253a:	3301      	adds	r3, #1
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	2b09      	cmp	r3, #9
 8002542:	bf94      	ite	ls
 8002544:	2301      	movls	r3, #1
 8002546:	2300      	movhi	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	e019      	b.n	8002580 <HAL_ADC_ConfigChannel+0x4a0>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002554:	fa93 f3a3 	rbit	r3, r3
 8002558:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800255a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800255c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800255e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002564:	2320      	movs	r3, #32
 8002566:	e003      	b.n	8002570 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002568:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800256a:	fab3 f383 	clz	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	3301      	adds	r3, #1
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	2b09      	cmp	r3, #9
 8002578:	bf94      	ite	ls
 800257a:	2301      	movls	r3, #1
 800257c:	2300      	movhi	r3, #0
 800257e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002580:	2b00      	cmp	r3, #0
 8002582:	d079      	beq.n	8002678 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258c:	2b00      	cmp	r3, #0
 800258e:	d107      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x4c0>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	0e9b      	lsrs	r3, r3, #26
 8002596:	3301      	adds	r3, #1
 8002598:	069b      	lsls	r3, r3, #26
 800259a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800259e:	e015      	b.n	80025cc <HAL_ADC_ConfigChannel+0x4ec>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025a8:	fa93 f3a3 	rbit	r3, r3
 80025ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80025b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80025b8:	2320      	movs	r3, #32
 80025ba:	e003      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80025bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	3301      	adds	r3, #1
 80025c6:	069b      	lsls	r3, r3, #26
 80025c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d109      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x50c>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	0e9b      	lsrs	r3, r3, #26
 80025de:	3301      	adds	r3, #1
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	2101      	movs	r1, #1
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	e017      	b.n	800261c <HAL_ADC_ConfigChannel+0x53c>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025f4:	fa93 f3a3 	rbit	r3, r3
 80025f8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80025fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025fc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80025fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002604:	2320      	movs	r3, #32
 8002606:	e003      	b.n	8002610 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800260a:	fab3 f383 	clz	r3, r3
 800260e:	b2db      	uxtb	r3, r3
 8002610:	3301      	adds	r3, #1
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	2101      	movs	r1, #1
 8002618:	fa01 f303 	lsl.w	r3, r1, r3
 800261c:	ea42 0103 	orr.w	r1, r2, r3
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10a      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x562>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	0e9b      	lsrs	r3, r3, #26
 8002632:	3301      	adds	r3, #1
 8002634:	f003 021f 	and.w	r2, r3, #31
 8002638:	4613      	mov	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	051b      	lsls	r3, r3, #20
 8002640:	e018      	b.n	8002674 <HAL_ADC_ConfigChannel+0x594>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264a:	fa93 f3a3 	rbit	r3, r3
 800264e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002652:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800265a:	2320      	movs	r3, #32
 800265c:	e003      	b.n	8002666 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800265e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002660:	fab3 f383 	clz	r3, r3
 8002664:	b2db      	uxtb	r3, r3
 8002666:	3301      	adds	r3, #1
 8002668:	f003 021f 	and.w	r2, r3, #31
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002674:	430b      	orrs	r3, r1
 8002676:	e080      	b.n	800277a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002680:	2b00      	cmp	r3, #0
 8002682:	d107      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x5b4>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	0e9b      	lsrs	r3, r3, #26
 800268a:	3301      	adds	r3, #1
 800268c:	069b      	lsls	r3, r3, #26
 800268e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002692:	e015      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x5e0>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269c:	fa93 f3a3 	rbit	r3, r3
 80026a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80026a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80026a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80026ac:	2320      	movs	r3, #32
 80026ae:	e003      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80026b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	3301      	adds	r3, #1
 80026ba:	069b      	lsls	r3, r3, #26
 80026bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d109      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x600>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	0e9b      	lsrs	r3, r3, #26
 80026d2:	3301      	adds	r3, #1
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	2101      	movs	r1, #1
 80026da:	fa01 f303 	lsl.w	r3, r1, r3
 80026de:	e017      	b.n	8002710 <HAL_ADC_ConfigChannel+0x630>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	61fb      	str	r3, [r7, #28]
  return result;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80026f8:	2320      	movs	r3, #32
 80026fa:	e003      	b.n	8002704 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	fab3 f383 	clz	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	3301      	adds	r3, #1
 8002706:	f003 031f 	and.w	r3, r3, #31
 800270a:	2101      	movs	r1, #1
 800270c:	fa01 f303 	lsl.w	r3, r1, r3
 8002710:	ea42 0103 	orr.w	r1, r2, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10d      	bne.n	800273c <HAL_ADC_ConfigChannel+0x65c>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	0e9b      	lsrs	r3, r3, #26
 8002726:	3301      	adds	r3, #1
 8002728:	f003 021f 	and.w	r2, r3, #31
 800272c:	4613      	mov	r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4413      	add	r3, r2
 8002732:	3b1e      	subs	r3, #30
 8002734:	051b      	lsls	r3, r3, #20
 8002736:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800273a:	e01d      	b.n	8002778 <HAL_ADC_ConfigChannel+0x698>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	613b      	str	r3, [r7, #16]
  return result;
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d103      	bne.n	800275c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002754:	2320      	movs	r3, #32
 8002756:	e005      	b.n	8002764 <HAL_ADC_ConfigChannel+0x684>
 8002758:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	3301      	adds	r3, #1
 8002766:	f003 021f 	and.w	r2, r3, #31
 800276a:	4613      	mov	r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	4413      	add	r3, r2
 8002770:	3b1e      	subs	r3, #30
 8002772:	051b      	lsls	r3, r3, #20
 8002774:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002778:	430b      	orrs	r3, r1
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	6892      	ldr	r2, [r2, #8]
 800277e:	4619      	mov	r1, r3
 8002780:	f7ff f8a6 	bl	80018d0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4b43      	ldr	r3, [pc, #268]	; (8002898 <HAL_ADC_ConfigChannel+0x7b8>)
 800278a:	4013      	ands	r3, r2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d079      	beq.n	8002884 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002790:	4842      	ldr	r0, [pc, #264]	; (800289c <HAL_ADC_ConfigChannel+0x7bc>)
 8002792:	f7fe fffb 	bl	800178c <LL_ADC_GetCommonPathInternalCh>
 8002796:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a40      	ldr	r2, [pc, #256]	; (80028a0 <HAL_ADC_ConfigChannel+0x7c0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d12b      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d125      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a3b      	ldr	r2, [pc, #236]	; (80028a4 <HAL_ADC_ConfigChannel+0x7c4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d004      	beq.n	80027c4 <HAL_ADC_ConfigChannel+0x6e4>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a3a      	ldr	r2, [pc, #232]	; (80028a8 <HAL_ADC_ConfigChannel+0x7c8>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d15c      	bne.n	800287e <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027cc:	4619      	mov	r1, r3
 80027ce:	4833      	ldr	r0, [pc, #204]	; (800289c <HAL_ADC_ConfigChannel+0x7bc>)
 80027d0:	f7fe ffc9 	bl	8001766 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80027d4:	4b35      	ldr	r3, [pc, #212]	; (80028ac <HAL_ADC_ConfigChannel+0x7cc>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	099b      	lsrs	r3, r3, #6
 80027da:	4a35      	ldr	r2, [pc, #212]	; (80028b0 <HAL_ADC_ConfigChannel+0x7d0>)
 80027dc:	fba2 2303 	umull	r2, r3, r2, r3
 80027e0:	099a      	lsrs	r2, r3, #6
 80027e2:	4613      	mov	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027ec:	e002      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f9      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027fa:	e040      	b.n	800287e <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a2c      	ldr	r2, [pc, #176]	; (80028b4 <HAL_ADC_ConfigChannel+0x7d4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d118      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x758>
 8002806:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800280a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d112      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a23      	ldr	r2, [pc, #140]	; (80028a4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d004      	beq.n	8002826 <HAL_ADC_ConfigChannel+0x746>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a21      	ldr	r2, [pc, #132]	; (80028a8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d12d      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002826:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800282a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800282e:	4619      	mov	r1, r3
 8002830:	481a      	ldr	r0, [pc, #104]	; (800289c <HAL_ADC_ConfigChannel+0x7bc>)
 8002832:	f7fe ff98 	bl	8001766 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002836:	e024      	b.n	8002882 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1e      	ldr	r2, [pc, #120]	; (80028b8 <HAL_ADC_ConfigChannel+0x7d8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d120      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002842:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d11a      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a14      	ldr	r2, [pc, #80]	; (80028a4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d115      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002858:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800285c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002860:	4619      	mov	r1, r3
 8002862:	480e      	ldr	r0, [pc, #56]	; (800289c <HAL_ADC_ConfigChannel+0x7bc>)
 8002864:	f7fe ff7f 	bl	8001766 <LL_ADC_SetCommonPathInternalCh>
 8002868:	e00c      	b.n	8002884 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286e:	f043 0220 	orr.w	r2, r3, #32
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800287c:	e002      	b.n	8002884 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800287e:	bf00      	nop
 8002880:	e000      	b.n	8002884 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002882:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800288c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002890:	4618      	mov	r0, r3
 8002892:	37d8      	adds	r7, #216	; 0xd8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	80080000 	.word	0x80080000
 800289c:	50040300 	.word	0x50040300
 80028a0:	c7520000 	.word	0xc7520000
 80028a4:	50040000 	.word	0x50040000
 80028a8:	50040200 	.word	0x50040200
 80028ac:	2000000c 	.word	0x2000000c
 80028b0:	053e2d63 	.word	0x053e2d63
 80028b4:	cb840000 	.word	0xcb840000
 80028b8:	80000001 	.word	0x80000001

080028bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff f8cf 	bl	8001a6c <LL_ADC_IsEnabled>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d146      	bne.n	8002962 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	4b24      	ldr	r3, [pc, #144]	; (800296c <ADC_Enable+0xb0>)
 80028dc:	4013      	ands	r3, r2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00d      	beq.n	80028fe <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e6:	f043 0210 	orr.w	r2, r3, #16
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f2:	f043 0201 	orr.w	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e032      	b.n	8002964 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff f89e 	bl	8001a44 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002908:	f7fe feec 	bl	80016e4 <HAL_GetTick>
 800290c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800290e:	e021      	b.n	8002954 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff f8a9 	bl	8001a6c <LL_ADC_IsEnabled>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d104      	bne.n	800292a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff f88d 	bl	8001a44 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800292a:	f7fe fedb 	bl	80016e4 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d90d      	bls.n	8002954 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293c:	f043 0210 	orr.w	r2, r3, #16
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002948:	f043 0201 	orr.w	r2, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e007      	b.n	8002964 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b01      	cmp	r3, #1
 8002960:	d1d6      	bne.n	8002910 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	8000003f 	.word	0x8000003f

08002970 <LL_ADC_IsEnabled>:
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <LL_ADC_IsEnabled+0x18>
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <LL_ADC_IsEnabled+0x1a>
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <LL_ADC_REG_IsConversionOngoing>:
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d101      	bne.n	80029ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80029bc:	b590      	push	{r4, r7, lr}
 80029be:	b09f      	sub	sp, #124	; 0x7c
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e08f      	b.n	8002afa <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a47      	ldr	r2, [pc, #284]	; (8002b04 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d102      	bne.n	80029f2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80029ec:	4b46      	ldr	r3, [pc, #280]	; (8002b08 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80029ee:	60bb      	str	r3, [r7, #8]
 80029f0:	e001      	b.n	80029f6 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80029f2:	2300      	movs	r3, #0
 80029f4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10b      	bne.n	8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a00:	f043 0220 	orr.w	r2, r3, #32
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e072      	b.n	8002afa <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff ffbd 	bl	8002996 <LL_ADC_REG_IsConversionOngoing>
 8002a1c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff ffb7 	bl	8002996 <LL_ADC_REG_IsConversionOngoing>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d154      	bne.n	8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d151      	bne.n	8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a34:	4b35      	ldr	r3, [pc, #212]	; (8002b0c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002a36:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d02c      	beq.n	8002a9a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	6859      	ldr	r1, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a52:	035b      	lsls	r3, r3, #13
 8002a54:	430b      	orrs	r3, r1
 8002a56:	431a      	orrs	r2, r3
 8002a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a5a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a5c:	4829      	ldr	r0, [pc, #164]	; (8002b04 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002a5e:	f7ff ff87 	bl	8002970 <LL_ADC_IsEnabled>
 8002a62:	4604      	mov	r4, r0
 8002a64:	4828      	ldr	r0, [pc, #160]	; (8002b08 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002a66:	f7ff ff83 	bl	8002970 <LL_ADC_IsEnabled>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	431c      	orrs	r4, r3
 8002a6e:	4828      	ldr	r0, [pc, #160]	; (8002b10 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a70:	f7ff ff7e 	bl	8002970 <LL_ADC_IsEnabled>
 8002a74:	4603      	mov	r3, r0
 8002a76:	4323      	orrs	r3, r4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d137      	bne.n	8002aec <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a84:	f023 030f 	bic.w	r3, r3, #15
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	6811      	ldr	r1, [r2, #0]
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	6892      	ldr	r2, [r2, #8]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	431a      	orrs	r2, r3
 8002a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a96:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a98:	e028      	b.n	8002aec <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aa6:	4817      	ldr	r0, [pc, #92]	; (8002b04 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002aa8:	f7ff ff62 	bl	8002970 <LL_ADC_IsEnabled>
 8002aac:	4604      	mov	r4, r0
 8002aae:	4816      	ldr	r0, [pc, #88]	; (8002b08 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002ab0:	f7ff ff5e 	bl	8002970 <LL_ADC_IsEnabled>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	431c      	orrs	r4, r3
 8002ab8:	4815      	ldr	r0, [pc, #84]	; (8002b10 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002aba:	f7ff ff59 	bl	8002970 <LL_ADC_IsEnabled>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	4323      	orrs	r3, r4
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d112      	bne.n	8002aec <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ace:	f023 030f 	bic.w	r3, r3, #15
 8002ad2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ad4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ad6:	e009      	b.n	8002aec <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002adc:	f043 0220 	orr.w	r2, r3, #32
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002aea:	e000      	b.n	8002aee <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002aec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002af6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	377c      	adds	r7, #124	; 0x7c
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd90      	pop	{r4, r7, pc}
 8002b02:	bf00      	nop
 8002b04:	50040000 	.word	0x50040000
 8002b08:	50040100 	.word	0x50040100
 8002b0c:	50040300 	.word	0x50040300
 8002b10:	50040200 	.word	0x50040200

08002b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <__NVIC_SetPriorityGrouping+0x44>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b30:	4013      	ands	r3, r2
 8002b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b46:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <__NVIC_SetPriorityGrouping+0x44>)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	60d3      	str	r3, [r2, #12]
}
 8002b4c:	bf00      	nop
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	e000ed00 	.word	0xe000ed00

08002b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b60:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <__NVIC_GetPriorityGrouping+0x18>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	0a1b      	lsrs	r3, r3, #8
 8002b66:	f003 0307 	and.w	r3, r3, #7
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	6039      	str	r1, [r7, #0]
 8002b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	db0a      	blt.n	8002ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	490c      	ldr	r1, [pc, #48]	; (8002bc4 <__NVIC_SetPriority+0x4c>)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	0112      	lsls	r2, r2, #4
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba0:	e00a      	b.n	8002bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	4908      	ldr	r1, [pc, #32]	; (8002bc8 <__NVIC_SetPriority+0x50>)
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	3b04      	subs	r3, #4
 8002bb0:	0112      	lsls	r2, r2, #4
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	761a      	strb	r2, [r3, #24]
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000e100 	.word	0xe000e100
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	; 0x24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f1c3 0307 	rsb	r3, r3, #7
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	bf28      	it	cs
 8002bea:	2304      	movcs	r3, #4
 8002bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	2b06      	cmp	r3, #6
 8002bf4:	d902      	bls.n	8002bfc <NVIC_EncodePriority+0x30>
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3b03      	subs	r3, #3
 8002bfa:	e000      	b.n	8002bfe <NVIC_EncodePriority+0x32>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c00:	f04f 32ff 	mov.w	r2, #4294967295
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	401a      	ands	r2, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c14:	f04f 31ff 	mov.w	r1, #4294967295
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1e:	43d9      	mvns	r1, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c24:	4313      	orrs	r3, r2
         );
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3724      	adds	r7, #36	; 0x24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
	...

08002c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c44:	d301      	bcc.n	8002c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c46:	2301      	movs	r3, #1
 8002c48:	e00f      	b.n	8002c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c4a:	4a0a      	ldr	r2, [pc, #40]	; (8002c74 <SysTick_Config+0x40>)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c52:	210f      	movs	r1, #15
 8002c54:	f04f 30ff 	mov.w	r0, #4294967295
 8002c58:	f7ff ff8e 	bl	8002b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <SysTick_Config+0x40>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c62:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <SysTick_Config+0x40>)
 8002c64:	2207      	movs	r2, #7
 8002c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	e000e010 	.word	0xe000e010

08002c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ff47 	bl	8002b14 <__NVIC_SetPriorityGrouping>
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b086      	sub	sp, #24
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	4603      	mov	r3, r0
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca0:	f7ff ff5c 	bl	8002b5c <__NVIC_GetPriorityGrouping>
 8002ca4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	6978      	ldr	r0, [r7, #20]
 8002cac:	f7ff ff8e 	bl	8002bcc <NVIC_EncodePriority>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff ff5d 	bl	8002b78 <__NVIC_SetPriority>
}
 8002cbe:	bf00      	nop
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff ffb0 	bl	8002c34 <SysTick_Config>
 8002cd4:	4603      	mov	r3, r0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cee:	e17f      	b.n	8002ff0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 8171 	beq.w	8002fea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d00b      	beq.n	8002d28 <HAL_GPIO_Init+0x48>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d007      	beq.n	8002d28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d1c:	2b11      	cmp	r3, #17
 8002d1e:	d003      	beq.n	8002d28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b12      	cmp	r3, #18
 8002d26:	d130      	bne.n	8002d8a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	2203      	movs	r2, #3
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d5e:	2201      	movs	r2, #1
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	091b      	lsrs	r3, r3, #4
 8002d74:	f003 0201 	and.w	r2, r3, #1
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d118      	bne.n	8002dc8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4013      	ands	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	08db      	lsrs	r3, r3, #3
 8002db2:	f003 0201 	and.w	r2, r3, #1
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d003      	beq.n	8002e08 <HAL_GPIO_Init+0x128>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b12      	cmp	r3, #18
 8002e06:	d123      	bne.n	8002e50 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	08da      	lsrs	r2, r3, #3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3208      	adds	r2, #8
 8002e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e14:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	220f      	movs	r2, #15
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	08da      	lsrs	r2, r3, #3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3208      	adds	r2, #8
 8002e4a:	6939      	ldr	r1, [r7, #16]
 8002e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	4013      	ands	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 0203 	and.w	r2, r3, #3
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80ac 	beq.w	8002fea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e92:	4b5e      	ldr	r3, [pc, #376]	; (800300c <HAL_GPIO_Init+0x32c>)
 8002e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e96:	4a5d      	ldr	r2, [pc, #372]	; (800300c <HAL_GPIO_Init+0x32c>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6613      	str	r3, [r2, #96]	; 0x60
 8002e9e:	4b5b      	ldr	r3, [pc, #364]	; (800300c <HAL_GPIO_Init+0x32c>)
 8002ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002eaa:	4a59      	ldr	r2, [pc, #356]	; (8003010 <HAL_GPIO_Init+0x330>)
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	089b      	lsrs	r3, r3, #2
 8002eb0:	3302      	adds	r3, #2
 8002eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	220f      	movs	r2, #15
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ed4:	d025      	beq.n	8002f22 <HAL_GPIO_Init+0x242>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a4e      	ldr	r2, [pc, #312]	; (8003014 <HAL_GPIO_Init+0x334>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d01f      	beq.n	8002f1e <HAL_GPIO_Init+0x23e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a4d      	ldr	r2, [pc, #308]	; (8003018 <HAL_GPIO_Init+0x338>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d019      	beq.n	8002f1a <HAL_GPIO_Init+0x23a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a4c      	ldr	r2, [pc, #304]	; (800301c <HAL_GPIO_Init+0x33c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d013      	beq.n	8002f16 <HAL_GPIO_Init+0x236>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a4b      	ldr	r2, [pc, #300]	; (8003020 <HAL_GPIO_Init+0x340>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00d      	beq.n	8002f12 <HAL_GPIO_Init+0x232>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a4a      	ldr	r2, [pc, #296]	; (8003024 <HAL_GPIO_Init+0x344>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d007      	beq.n	8002f0e <HAL_GPIO_Init+0x22e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a49      	ldr	r2, [pc, #292]	; (8003028 <HAL_GPIO_Init+0x348>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d101      	bne.n	8002f0a <HAL_GPIO_Init+0x22a>
 8002f06:	2306      	movs	r3, #6
 8002f08:	e00c      	b.n	8002f24 <HAL_GPIO_Init+0x244>
 8002f0a:	2307      	movs	r3, #7
 8002f0c:	e00a      	b.n	8002f24 <HAL_GPIO_Init+0x244>
 8002f0e:	2305      	movs	r3, #5
 8002f10:	e008      	b.n	8002f24 <HAL_GPIO_Init+0x244>
 8002f12:	2304      	movs	r3, #4
 8002f14:	e006      	b.n	8002f24 <HAL_GPIO_Init+0x244>
 8002f16:	2303      	movs	r3, #3
 8002f18:	e004      	b.n	8002f24 <HAL_GPIO_Init+0x244>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e002      	b.n	8002f24 <HAL_GPIO_Init+0x244>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <HAL_GPIO_Init+0x244>
 8002f22:	2300      	movs	r3, #0
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	f002 0203 	and.w	r2, r2, #3
 8002f2a:	0092      	lsls	r2, r2, #2
 8002f2c:	4093      	lsls	r3, r2
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f34:	4936      	ldr	r1, [pc, #216]	; (8003010 <HAL_GPIO_Init+0x330>)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	089b      	lsrs	r3, r3, #2
 8002f3a:	3302      	adds	r3, #2
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f42:	4b3a      	ldr	r3, [pc, #232]	; (800302c <HAL_GPIO_Init+0x34c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f66:	4a31      	ldr	r2, [pc, #196]	; (800302c <HAL_GPIO_Init+0x34c>)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002f6c:	4b2f      	ldr	r3, [pc, #188]	; (800302c <HAL_GPIO_Init+0x34c>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	43db      	mvns	r3, r3
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f90:	4a26      	ldr	r2, [pc, #152]	; (800302c <HAL_GPIO_Init+0x34c>)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f96:	4b25      	ldr	r3, [pc, #148]	; (800302c <HAL_GPIO_Init+0x34c>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fba:	4a1c      	ldr	r2, [pc, #112]	; (800302c <HAL_GPIO_Init+0x34c>)
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fc0:	4b1a      	ldr	r3, [pc, #104]	; (800302c <HAL_GPIO_Init+0x34c>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fe4:	4a11      	ldr	r2, [pc, #68]	; (800302c <HAL_GPIO_Init+0x34c>)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	3301      	adds	r3, #1
 8002fee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f47f ae78 	bne.w	8002cf0 <HAL_GPIO_Init+0x10>
  }
}
 8003000:	bf00      	nop
 8003002:	371c      	adds	r7, #28
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	40021000 	.word	0x40021000
 8003010:	40010000 	.word	0x40010000
 8003014:	48000400 	.word	0x48000400
 8003018:	48000800 	.word	0x48000800
 800301c:	48000c00 	.word	0x48000c00
 8003020:	48001000 	.word	0x48001000
 8003024:	48001400 	.word	0x48001400
 8003028:	48001800 	.word	0x48001800
 800302c:	40010400 	.word	0x40010400

08003030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	807b      	strh	r3, [r7, #2]
 800303c:	4613      	mov	r3, r2
 800303e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003040:	787b      	ldrb	r3, [r7, #1]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003046:	887a      	ldrh	r2, [r7, #2]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800304c:	e002      	b.n	8003054 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800304e:	887a      	ldrh	r2, [r7, #2]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e081      	b.n	8003176 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d106      	bne.n	800308c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fe f8d8 	bl	800123c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2224      	movs	r2, #36	; 0x24
 8003090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0201 	bic.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d107      	bne.n	80030da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	e006      	b.n	80030e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80030e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d104      	bne.n	80030fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800310c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800311c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	ea42 0103 	orr.w	r1, r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	021a      	lsls	r2, r3, #8
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69d9      	ldr	r1, [r3, #28]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1a      	ldr	r2, [r3, #32]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0201 	orr.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2220      	movs	r2, #32
 8003162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af02      	add	r7, sp, #8
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	461a      	mov	r2, r3
 800318c:	460b      	mov	r3, r1
 800318e:	817b      	strh	r3, [r7, #10]
 8003190:	4613      	mov	r3, r2
 8003192:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b20      	cmp	r3, #32
 800319e:	f040 80da 	bne.w	8003356 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_I2C_Master_Transmit+0x30>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e0d3      	b.n	8003358 <HAL_I2C_Master_Transmit+0x1d8>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031b8:	f7fe fa94 	bl	80016e4 <HAL_GetTick>
 80031bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	2319      	movs	r3, #25
 80031c4:	2201      	movs	r2, #1
 80031c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f9f7 	bl	80035be <I2C_WaitOnFlagUntilTimeout>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e0be      	b.n	8003358 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2221      	movs	r2, #33	; 0x21
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2210      	movs	r2, #16
 80031e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	893a      	ldrh	r2, [r7, #8]
 80031fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003206:	b29b      	uxth	r3, r3
 8003208:	2bff      	cmp	r3, #255	; 0xff
 800320a:	d90e      	bls.n	800322a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	22ff      	movs	r2, #255	; 0xff
 8003210:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003216:	b2da      	uxtb	r2, r3
 8003218:	8979      	ldrh	r1, [r7, #10]
 800321a:	4b51      	ldr	r3, [pc, #324]	; (8003360 <HAL_I2C_Master_Transmit+0x1e0>)
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 faee 	bl	8003804 <I2C_TransferConfig>
 8003228:	e06c      	b.n	8003304 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003238:	b2da      	uxtb	r2, r3
 800323a:	8979      	ldrh	r1, [r7, #10]
 800323c:	4b48      	ldr	r3, [pc, #288]	; (8003360 <HAL_I2C_Master_Transmit+0x1e0>)
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 fadd 	bl	8003804 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800324a:	e05b      	b.n	8003304 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	6a39      	ldr	r1, [r7, #32]
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 f9f4 	bl	800363e <I2C_WaitOnTXISFlagUntilTimeout>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e07b      	b.n	8003358 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	781a      	ldrb	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327a:	b29b      	uxth	r3, r3
 800327c:	3b01      	subs	r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d034      	beq.n	8003304 <HAL_I2C_Master_Transmit+0x184>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d130      	bne.n	8003304 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	2200      	movs	r2, #0
 80032aa:	2180      	movs	r1, #128	; 0x80
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 f986 	bl	80035be <I2C_WaitOnFlagUntilTimeout>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e04d      	b.n	8003358 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2bff      	cmp	r3, #255	; 0xff
 80032c4:	d90e      	bls.n	80032e4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	22ff      	movs	r2, #255	; 0xff
 80032ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	8979      	ldrh	r1, [r7, #10]
 80032d4:	2300      	movs	r3, #0
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 fa91 	bl	8003804 <I2C_TransferConfig>
 80032e2:	e00f      	b.n	8003304 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	8979      	ldrh	r1, [r7, #10]
 80032f6:	2300      	movs	r3, #0
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 fa80 	bl	8003804 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d19e      	bne.n	800324c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	6a39      	ldr	r1, [r7, #32]
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f9d3 	bl	80036be <I2C_WaitOnSTOPFlagUntilTimeout>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e01a      	b.n	8003358 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2220      	movs	r2, #32
 8003328:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6859      	ldr	r1, [r3, #4]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <HAL_I2C_Master_Transmit+0x1e4>)
 8003336:	400b      	ands	r3, r1
 8003338:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2220      	movs	r2, #32
 800333e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	e000      	b.n	8003358 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003356:	2302      	movs	r3, #2
  }
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	80002000 	.word	0x80002000
 8003364:	fe00e800 	.word	0xfe00e800

08003368 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08a      	sub	sp, #40	; 0x28
 800336c:	af02      	add	r7, sp, #8
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	607a      	str	r2, [r7, #4]
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	460b      	mov	r3, r1
 8003376:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003378:	2300      	movs	r3, #0
 800337a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b20      	cmp	r3, #32
 8003386:	f040 80f1 	bne.w	800356c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003398:	d101      	bne.n	800339e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800339a:	2302      	movs	r3, #2
 800339c:	e0e7      	b.n	800356e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_I2C_IsDeviceReady+0x44>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e0e0      	b.n	800356e <HAL_I2C_IsDeviceReady+0x206>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2224      	movs	r2, #36	; 0x24
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d107      	bne.n	80033da <HAL_I2C_IsDeviceReady+0x72>
 80033ca:	897b      	ldrh	r3, [r7, #10]
 80033cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033d8:	e004      	b.n	80033e4 <HAL_I2C_IsDeviceReady+0x7c>
 80033da:	897b      	ldrh	r3, [r7, #10]
 80033dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033e0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	6812      	ldr	r2, [r2, #0]
 80033e8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80033ea:	f7fe f97b 	bl	80016e4 <HAL_GetTick>
 80033ee:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	f003 0320 	and.w	r3, r3, #32
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	bf0c      	ite	eq
 80033fe:	2301      	moveq	r3, #1
 8003400:	2300      	movne	r3, #0
 8003402:	b2db      	uxtb	r3, r3
 8003404:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	2b10      	cmp	r3, #16
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800341c:	e034      	b.n	8003488 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003424:	d01a      	beq.n	800345c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003426:	f7fe f95d 	bl	80016e4 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d302      	bcc.n	800343c <HAL_I2C_IsDeviceReady+0xd4>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10f      	bne.n	800345c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003448:	f043 0220 	orr.w	r2, r3, #32
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e088      	b.n	800356e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b20      	cmp	r3, #32
 8003468:	bf0c      	ite	eq
 800346a:	2301      	moveq	r3, #1
 800346c:	2300      	movne	r3, #0
 800346e:	b2db      	uxtb	r3, r3
 8003470:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b10      	cmp	r3, #16
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003488:	7ffb      	ldrb	r3, [r7, #31]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d102      	bne.n	8003494 <HAL_I2C_IsDeviceReady+0x12c>
 800348e:	7fbb      	ldrb	r3, [r7, #30]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0c4      	beq.n	800341e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	f003 0310 	and.w	r3, r3, #16
 800349e:	2b10      	cmp	r3, #16
 80034a0:	d01a      	beq.n	80034d8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2200      	movs	r2, #0
 80034aa:	2120      	movs	r1, #32
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f886 	bl	80035be <I2C_WaitOnFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e058      	b.n	800356e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2220      	movs	r2, #32
 80034c2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	e04a      	b.n	800356e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	2200      	movs	r2, #0
 80034e0:	2120      	movs	r1, #32
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 f86b 	bl	80035be <I2C_WaitOnFlagUntilTimeout>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e03d      	b.n	800356e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2210      	movs	r2, #16
 80034f8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2220      	movs	r2, #32
 8003500:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	429a      	cmp	r2, r3
 8003508:	d118      	bne.n	800353c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003518:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2200      	movs	r2, #0
 8003522:	2120      	movs	r1, #32
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f84a 	bl	80035be <I2C_WaitOnFlagUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e01c      	b.n	800356e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2220      	movs	r2, #32
 800353a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	3301      	adds	r3, #1
 8003540:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	429a      	cmp	r2, r3
 8003548:	f63f af3b 	bhi.w	80033c2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003558:	f043 0220 	orr.w	r2, r3, #32
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800356c:	2302      	movs	r3, #2
  }
}
 800356e:	4618      	mov	r0, r3
 8003570:	3720      	adds	r7, #32
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b02      	cmp	r3, #2
 800358a:	d103      	bne.n	8003594 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2200      	movs	r2, #0
 8003592:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d007      	beq.n	80035b2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699a      	ldr	r2, [r3, #24]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0201 	orr.w	r2, r2, #1
 80035b0:	619a      	str	r2, [r3, #24]
  }
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	603b      	str	r3, [r7, #0]
 80035ca:	4613      	mov	r3, r2
 80035cc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035ce:	e022      	b.n	8003616 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d6:	d01e      	beq.n	8003616 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d8:	f7fe f884 	bl	80016e4 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d302      	bcc.n	80035ee <I2C_WaitOnFlagUntilTimeout+0x30>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d113      	bne.n	8003616 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f2:	f043 0220 	orr.w	r2, r3, #32
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e00f      	b.n	8003636 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	699a      	ldr	r2, [r3, #24]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4013      	ands	r3, r2
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	429a      	cmp	r2, r3
 8003624:	bf0c      	ite	eq
 8003626:	2301      	moveq	r3, #1
 8003628:	2300      	movne	r3, #0
 800362a:	b2db      	uxtb	r3, r3
 800362c:	461a      	mov	r2, r3
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	429a      	cmp	r2, r3
 8003632:	d0cd      	beq.n	80035d0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b084      	sub	sp, #16
 8003642:	af00      	add	r7, sp, #0
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800364a:	e02c      	b.n	80036a6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 f871 	bl	8003738 <I2C_IsAcknowledgeFailed>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e02a      	b.n	80036b6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003666:	d01e      	beq.n	80036a6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003668:	f7fe f83c 	bl	80016e4 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	429a      	cmp	r2, r3
 8003676:	d302      	bcc.n	800367e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d113      	bne.n	80036a6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003682:	f043 0220 	orr.w	r2, r3, #32
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e007      	b.n	80036b6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d1cb      	bne.n	800364c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	60f8      	str	r0, [r7, #12]
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036ca:	e028      	b.n	800371e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	68b9      	ldr	r1, [r7, #8]
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f831 	bl	8003738 <I2C_IsAcknowledgeFailed>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e026      	b.n	800372e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e0:	f7fe f800 	bl	80016e4 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d302      	bcc.n	80036f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d113      	bne.n	800371e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	f043 0220 	orr.w	r2, r3, #32
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e007      	b.n	800372e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	f003 0320 	and.w	r3, r3, #32
 8003728:	2b20      	cmp	r3, #32
 800372a:	d1cf      	bne.n	80036cc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	f003 0310 	and.w	r3, r3, #16
 800374e:	2b10      	cmp	r3, #16
 8003750:	d151      	bne.n	80037f6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003752:	e022      	b.n	800379a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375a:	d01e      	beq.n	800379a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375c:	f7fd ffc2 	bl	80016e4 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	429a      	cmp	r2, r3
 800376a:	d302      	bcc.n	8003772 <I2C_IsAcknowledgeFailed+0x3a>
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d113      	bne.n	800379a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	f043 0220 	orr.w	r2, r3, #32
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2220      	movs	r2, #32
 8003782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e02e      	b.n	80037f8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b20      	cmp	r3, #32
 80037a6:	d1d5      	bne.n	8003754 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2210      	movs	r2, #16
 80037ae:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2220      	movs	r2, #32
 80037b6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f7ff fedc 	bl	8003576 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6859      	ldr	r1, [r3, #4]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <I2C_IsAcknowledgeFailed+0xc8>)
 80037ca:	400b      	ands	r3, r1
 80037cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d2:	f043 0204 	orr.w	r2, r3, #4
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	fe00e800 	.word	0xfe00e800

08003804 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	607b      	str	r3, [r7, #4]
 800380e:	460b      	mov	r3, r1
 8003810:	817b      	strh	r3, [r7, #10]
 8003812:	4613      	mov	r3, r2
 8003814:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	0d5b      	lsrs	r3, r3, #21
 8003820:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003824:	4b0d      	ldr	r3, [pc, #52]	; (800385c <I2C_TransferConfig+0x58>)
 8003826:	430b      	orrs	r3, r1
 8003828:	43db      	mvns	r3, r3
 800382a:	ea02 0103 	and.w	r1, r2, r3
 800382e:	897b      	ldrh	r3, [r7, #10]
 8003830:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003834:	7a7b      	ldrb	r3, [r7, #9]
 8003836:	041b      	lsls	r3, r3, #16
 8003838:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	431a      	orrs	r2, r3
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	431a      	orrs	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800384e:	bf00      	nop
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	03ff63ff 	.word	0x03ff63ff

08003860 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b20      	cmp	r3, #32
 8003874:	d138      	bne.n	80038e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003880:	2302      	movs	r3, #2
 8003882:	e032      	b.n	80038ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2224      	movs	r2, #36	; 0x24
 8003890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0201 	bic.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6819      	ldr	r1, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	e000      	b.n	80038ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038e8:	2302      	movs	r3, #2
  }
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b085      	sub	sp, #20
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b20      	cmp	r3, #32
 800390a:	d139      	bne.n	8003980 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003916:	2302      	movs	r3, #2
 8003918:	e033      	b.n	8003982 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2224      	movs	r2, #36	; 0x24
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0201 	bic.w	r2, r2, #1
 8003938:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003948:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	021b      	lsls	r3, r3, #8
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	e000      	b.n	8003982 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003980:	2302      	movs	r3, #2
  }
}
 8003982:	4618      	mov	r0, r3
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
	...

08003990 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003994:	4b04      	ldr	r3, [pc, #16]	; (80039a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800399c:	4618      	mov	r0, r3
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40007000 	.word	0x40007000

080039ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ba:	d130      	bne.n	8003a1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80039bc:	4b23      	ldr	r3, [pc, #140]	; (8003a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c8:	d038      	beq.n	8003a3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039ca:	4b20      	ldr	r3, [pc, #128]	; (8003a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039d2:	4a1e      	ldr	r2, [pc, #120]	; (8003a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039da:	4b1d      	ldr	r3, [pc, #116]	; (8003a50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2232      	movs	r2, #50	; 0x32
 80039e0:	fb02 f303 	mul.w	r3, r2, r3
 80039e4:	4a1b      	ldr	r2, [pc, #108]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80039e6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ea:	0c9b      	lsrs	r3, r3, #18
 80039ec:	3301      	adds	r3, #1
 80039ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039f0:	e002      	b.n	80039f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	3b01      	subs	r3, #1
 80039f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039f8:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a04:	d102      	bne.n	8003a0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1f2      	bne.n	80039f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a18:	d110      	bne.n	8003a3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e00f      	b.n	8003a3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a2a:	d007      	beq.n	8003a3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a2c:	4b07      	ldr	r3, [pc, #28]	; (8003a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a34:	4a05      	ldr	r2, [pc, #20]	; (8003a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40007000 	.word	0x40007000
 8003a50:	2000000c 	.word	0x2000000c
 8003a54:	431bde83 	.word	0x431bde83

08003a58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e3d4      	b.n	8004214 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a6a:	4ba1      	ldr	r3, [pc, #644]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a74:	4b9e      	ldr	r3, [pc, #632]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f003 0303 	and.w	r3, r3, #3
 8003a7c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0310 	and.w	r3, r3, #16
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 80e4 	beq.w	8003c54 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d007      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x4a>
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	2b0c      	cmp	r3, #12
 8003a96:	f040 808b 	bne.w	8003bb0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	f040 8087 	bne.w	8003bb0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003aa2:	4b93      	ldr	r3, [pc, #588]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <HAL_RCC_OscConfig+0x62>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e3ac      	b.n	8004214 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1a      	ldr	r2, [r3, #32]
 8003abe:	4b8c      	ldr	r3, [pc, #560]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d004      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x7c>
 8003aca:	4b89      	ldr	r3, [pc, #548]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ad2:	e005      	b.n	8003ae0 <HAL_RCC_OscConfig+0x88>
 8003ad4:	4b86      	ldr	r3, [pc, #536]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ada:	091b      	lsrs	r3, r3, #4
 8003adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d223      	bcs.n	8003b2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 fd3f 	bl	800456c <RCC_SetFlashLatencyFromMSIRange>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e38d      	b.n	8004214 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003af8:	4b7d      	ldr	r3, [pc, #500]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a7c      	ldr	r2, [pc, #496]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003afe:	f043 0308 	orr.w	r3, r3, #8
 8003b02:	6013      	str	r3, [r2, #0]
 8003b04:	4b7a      	ldr	r3, [pc, #488]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	4977      	ldr	r1, [pc, #476]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b16:	4b76      	ldr	r3, [pc, #472]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	021b      	lsls	r3, r3, #8
 8003b24:	4972      	ldr	r1, [pc, #456]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	604b      	str	r3, [r1, #4]
 8003b2a:	e025      	b.n	8003b78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b2c:	4b70      	ldr	r3, [pc, #448]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a6f      	ldr	r2, [pc, #444]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003b32:	f043 0308 	orr.w	r3, r3, #8
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	4b6d      	ldr	r3, [pc, #436]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	496a      	ldr	r1, [pc, #424]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b4a:	4b69      	ldr	r3, [pc, #420]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	021b      	lsls	r3, r3, #8
 8003b58:	4965      	ldr	r1, [pc, #404]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d109      	bne.n	8003b78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fcff 	bl	800456c <RCC_SetFlashLatencyFromMSIRange>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e34d      	b.n	8004214 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b78:	f000 fc36 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 8003b7c:	4601      	mov	r1, r0
 8003b7e:	4b5c      	ldr	r3, [pc, #368]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	091b      	lsrs	r3, r3, #4
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	4a5a      	ldr	r2, [pc, #360]	; (8003cf4 <HAL_RCC_OscConfig+0x29c>)
 8003b8a:	5cd3      	ldrb	r3, [r2, r3]
 8003b8c:	f003 031f 	and.w	r3, r3, #31
 8003b90:	fa21 f303 	lsr.w	r3, r1, r3
 8003b94:	4a58      	ldr	r2, [pc, #352]	; (8003cf8 <HAL_RCC_OscConfig+0x2a0>)
 8003b96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b98:	4b58      	ldr	r3, [pc, #352]	; (8003cfc <HAL_RCC_OscConfig+0x2a4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fd fd51 	bl	8001644 <HAL_InitTick>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d052      	beq.n	8003c52 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
 8003bae:	e331      	b.n	8004214 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d032      	beq.n	8003c1e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003bb8:	4b4d      	ldr	r3, [pc, #308]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a4c      	ldr	r2, [pc, #304]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bc4:	f7fd fd8e 	bl	80016e4 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bcc:	f7fd fd8a 	bl	80016e4 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e31a      	b.n	8004214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bde:	4b44      	ldr	r3, [pc, #272]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bea:	4b41      	ldr	r3, [pc, #260]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a40      	ldr	r2, [pc, #256]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003bf0:	f043 0308 	orr.w	r3, r3, #8
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	4b3e      	ldr	r3, [pc, #248]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	493b      	ldr	r1, [pc, #236]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c08:	4b39      	ldr	r3, [pc, #228]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	021b      	lsls	r3, r3, #8
 8003c16:	4936      	ldr	r1, [pc, #216]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	604b      	str	r3, [r1, #4]
 8003c1c:	e01a      	b.n	8003c54 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c1e:	4b34      	ldr	r3, [pc, #208]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a33      	ldr	r2, [pc, #204]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003c24:	f023 0301 	bic.w	r3, r3, #1
 8003c28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c2a:	f7fd fd5b 	bl	80016e4 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c32:	f7fd fd57 	bl	80016e4 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e2e7      	b.n	8004214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c44:	4b2a      	ldr	r3, [pc, #168]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1f0      	bne.n	8003c32 <HAL_RCC_OscConfig+0x1da>
 8003c50:	e000      	b.n	8003c54 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d074      	beq.n	8003d4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d005      	beq.n	8003c72 <HAL_RCC_OscConfig+0x21a>
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	2b0c      	cmp	r3, #12
 8003c6a:	d10e      	bne.n	8003c8a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d10b      	bne.n	8003c8a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c72:	4b1f      	ldr	r3, [pc, #124]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d064      	beq.n	8003d48 <HAL_RCC_OscConfig+0x2f0>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d160      	bne.n	8003d48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e2c4      	b.n	8004214 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c92:	d106      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x24a>
 8003c94:	4b16      	ldr	r3, [pc, #88]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a15      	ldr	r2, [pc, #84]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9e:	6013      	str	r3, [r2, #0]
 8003ca0:	e01d      	b.n	8003cde <HAL_RCC_OscConfig+0x286>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003caa:	d10c      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x26e>
 8003cac:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a0f      	ldr	r2, [pc, #60]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003cb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cb6:	6013      	str	r3, [r2, #0]
 8003cb8:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a0c      	ldr	r2, [pc, #48]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc2:	6013      	str	r3, [r2, #0]
 8003cc4:	e00b      	b.n	8003cde <HAL_RCC_OscConfig+0x286>
 8003cc6:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a09      	ldr	r2, [pc, #36]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a06      	ldr	r2, [pc, #24]	; (8003cf0 <HAL_RCC_OscConfig+0x298>)
 8003cd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cdc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d01c      	beq.n	8003d20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce6:	f7fd fcfd 	bl	80016e4 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cec:	e011      	b.n	8003d12 <HAL_RCC_OscConfig+0x2ba>
 8003cee:	bf00      	nop
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	0800720c 	.word	0x0800720c
 8003cf8:	2000000c 	.word	0x2000000c
 8003cfc:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d00:	f7fd fcf0 	bl	80016e4 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	; 0x64
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e280      	b.n	8004214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d12:	4baf      	ldr	r3, [pc, #700]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0f0      	beq.n	8003d00 <HAL_RCC_OscConfig+0x2a8>
 8003d1e:	e014      	b.n	8003d4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d20:	f7fd fce0 	bl	80016e4 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d28:	f7fd fcdc 	bl	80016e4 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b64      	cmp	r3, #100	; 0x64
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e26c      	b.n	8004214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d3a:	4ba5      	ldr	r3, [pc, #660]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f0      	bne.n	8003d28 <HAL_RCC_OscConfig+0x2d0>
 8003d46:	e000      	b.n	8003d4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d060      	beq.n	8003e18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d005      	beq.n	8003d68 <HAL_RCC_OscConfig+0x310>
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	2b0c      	cmp	r3, #12
 8003d60:	d119      	bne.n	8003d96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d116      	bne.n	8003d96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d68:	4b99      	ldr	r3, [pc, #612]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_RCC_OscConfig+0x328>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e249      	b.n	8004214 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d80:	4b93      	ldr	r3, [pc, #588]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	061b      	lsls	r3, r3, #24
 8003d8e:	4990      	ldr	r1, [pc, #576]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d94:	e040      	b.n	8003e18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d023      	beq.n	8003de6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d9e:	4b8c      	ldr	r3, [pc, #560]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a8b      	ldr	r2, [pc, #556]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003daa:	f7fd fc9b 	bl	80016e4 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003db2:	f7fd fc97 	bl	80016e4 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e227      	b.n	8004214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dc4:	4b82      	ldr	r3, [pc, #520]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f0      	beq.n	8003db2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd0:	4b7f      	ldr	r3, [pc, #508]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	061b      	lsls	r3, r3, #24
 8003dde:	497c      	ldr	r1, [pc, #496]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	604b      	str	r3, [r1, #4]
 8003de4:	e018      	b.n	8003e18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003de6:	4b7a      	ldr	r3, [pc, #488]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a79      	ldr	r2, [pc, #484]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df2:	f7fd fc77 	bl	80016e4 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dfa:	f7fd fc73 	bl	80016e4 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e203      	b.n	8004214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e0c:	4b70      	ldr	r3, [pc, #448]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1f0      	bne.n	8003dfa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d03c      	beq.n	8003e9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d01c      	beq.n	8003e66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e2c:	4b68      	ldr	r3, [pc, #416]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e32:	4a67      	ldr	r2, [pc, #412]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3c:	f7fd fc52 	bl	80016e4 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e44:	f7fd fc4e 	bl	80016e4 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e1de      	b.n	8004214 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e56:	4b5e      	ldr	r3, [pc, #376]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0ef      	beq.n	8003e44 <HAL_RCC_OscConfig+0x3ec>
 8003e64:	e01b      	b.n	8003e9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e66:	4b5a      	ldr	r3, [pc, #360]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e6c:	4a58      	ldr	r2, [pc, #352]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003e6e:	f023 0301 	bic.w	r3, r3, #1
 8003e72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e76:	f7fd fc35 	bl	80016e4 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e7e:	f7fd fc31 	bl	80016e4 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e1c1      	b.n	8004214 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e90:	4b4f      	ldr	r3, [pc, #316]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1ef      	bne.n	8003e7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 80a6 	beq.w	8003ff8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eac:	2300      	movs	r3, #0
 8003eae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003eb0:	4b47      	ldr	r3, [pc, #284]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10d      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ebc:	4b44      	ldr	r3, [pc, #272]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec0:	4a43      	ldr	r2, [pc, #268]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ec8:	4b41      	ldr	r3, [pc, #260]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ed8:	4b3e      	ldr	r3, [pc, #248]	; (8003fd4 <HAL_RCC_OscConfig+0x57c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d118      	bne.n	8003f16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ee4:	4b3b      	ldr	r3, [pc, #236]	; (8003fd4 <HAL_RCC_OscConfig+0x57c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a3a      	ldr	r2, [pc, #232]	; (8003fd4 <HAL_RCC_OscConfig+0x57c>)
 8003eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef0:	f7fd fbf8 	bl	80016e4 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef8:	f7fd fbf4 	bl	80016e4 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e184      	b.n	8004214 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f0a:	4b32      	ldr	r3, [pc, #200]	; (8003fd4 <HAL_RCC_OscConfig+0x57c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0f0      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d108      	bne.n	8003f30 <HAL_RCC_OscConfig+0x4d8>
 8003f1e:	4b2c      	ldr	r3, [pc, #176]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f24:	4a2a      	ldr	r2, [pc, #168]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f2e:	e024      	b.n	8003f7a <HAL_RCC_OscConfig+0x522>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2b05      	cmp	r3, #5
 8003f36:	d110      	bne.n	8003f5a <HAL_RCC_OscConfig+0x502>
 8003f38:	4b25      	ldr	r3, [pc, #148]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3e:	4a24      	ldr	r2, [pc, #144]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003f40:	f043 0304 	orr.w	r3, r3, #4
 8003f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f48:	4b21      	ldr	r3, [pc, #132]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4e:	4a20      	ldr	r2, [pc, #128]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f58:	e00f      	b.n	8003f7a <HAL_RCC_OscConfig+0x522>
 8003f5a:	4b1d      	ldr	r3, [pc, #116]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f60:	4a1b      	ldr	r2, [pc, #108]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003f62:	f023 0301 	bic.w	r3, r3, #1
 8003f66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f6a:	4b19      	ldr	r3, [pc, #100]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f70:	4a17      	ldr	r2, [pc, #92]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003f72:	f023 0304 	bic.w	r3, r3, #4
 8003f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d016      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f82:	f7fd fbaf 	bl	80016e4 <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f88:	e00a      	b.n	8003fa0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f8a:	f7fd fbab 	bl	80016e4 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e139      	b.n	8004214 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <HAL_RCC_OscConfig+0x578>)
 8003fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0ed      	beq.n	8003f8a <HAL_RCC_OscConfig+0x532>
 8003fae:	e01a      	b.n	8003fe6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb0:	f7fd fb98 	bl	80016e4 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fb6:	e00f      	b.n	8003fd8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb8:	f7fd fb94 	bl	80016e4 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d906      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e122      	b.n	8004214 <HAL_RCC_OscConfig+0x7bc>
 8003fce:	bf00      	nop
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fd8:	4b90      	ldr	r3, [pc, #576]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 8003fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1e8      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fe6:	7ffb      	ldrb	r3, [r7, #31]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d105      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fec:	4b8b      	ldr	r3, [pc, #556]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 8003fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff0:	4a8a      	ldr	r2, [pc, #552]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 8003ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 8108 	beq.w	8004212 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004006:	2b02      	cmp	r3, #2
 8004008:	f040 80d0 	bne.w	80041ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800400c:	4b83      	ldr	r3, [pc, #524]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f003 0203 	and.w	r2, r3, #3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	429a      	cmp	r2, r3
 800401e:	d130      	bne.n	8004082 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	3b01      	subs	r3, #1
 800402c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800402e:	429a      	cmp	r2, r3
 8004030:	d127      	bne.n	8004082 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800403e:	429a      	cmp	r2, r3
 8004040:	d11f      	bne.n	8004082 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800404c:	2a07      	cmp	r2, #7
 800404e:	bf14      	ite	ne
 8004050:	2201      	movne	r2, #1
 8004052:	2200      	moveq	r2, #0
 8004054:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004056:	4293      	cmp	r3, r2
 8004058:	d113      	bne.n	8004082 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004064:	085b      	lsrs	r3, r3, #1
 8004066:	3b01      	subs	r3, #1
 8004068:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800406a:	429a      	cmp	r2, r3
 800406c:	d109      	bne.n	8004082 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	3b01      	subs	r3, #1
 800407c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d06e      	beq.n	8004160 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	2b0c      	cmp	r3, #12
 8004086:	d069      	beq.n	800415c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004088:	4b64      	ldr	r3, [pc, #400]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d105      	bne.n	80040a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004094:	4b61      	ldr	r3, [pc, #388]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0b7      	b.n	8004214 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80040a4:	4b5d      	ldr	r3, [pc, #372]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a5c      	ldr	r2, [pc, #368]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 80040aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040b0:	f7fd fb18 	bl	80016e4 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b8:	f7fd fb14 	bl	80016e4 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e0a4      	b.n	8004214 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040ca:	4b54      	ldr	r3, [pc, #336]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f0      	bne.n	80040b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040d6:	4b51      	ldr	r3, [pc, #324]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	4b51      	ldr	r3, [pc, #324]	; (8004220 <HAL_RCC_OscConfig+0x7c8>)
 80040dc:	4013      	ands	r3, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80040e6:	3a01      	subs	r2, #1
 80040e8:	0112      	lsls	r2, r2, #4
 80040ea:	4311      	orrs	r1, r2
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040f0:	0212      	lsls	r2, r2, #8
 80040f2:	4311      	orrs	r1, r2
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040f8:	0852      	lsrs	r2, r2, #1
 80040fa:	3a01      	subs	r2, #1
 80040fc:	0552      	lsls	r2, r2, #21
 80040fe:	4311      	orrs	r1, r2
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004104:	0852      	lsrs	r2, r2, #1
 8004106:	3a01      	subs	r2, #1
 8004108:	0652      	lsls	r2, r2, #25
 800410a:	4311      	orrs	r1, r2
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004110:	0912      	lsrs	r2, r2, #4
 8004112:	0452      	lsls	r2, r2, #17
 8004114:	430a      	orrs	r2, r1
 8004116:	4941      	ldr	r1, [pc, #260]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 8004118:	4313      	orrs	r3, r2
 800411a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800411c:	4b3f      	ldr	r3, [pc, #252]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a3e      	ldr	r2, [pc, #248]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 8004122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004126:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004128:	4b3c      	ldr	r3, [pc, #240]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4a3b      	ldr	r2, [pc, #236]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 800412e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004132:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004134:	f7fd fad6 	bl	80016e4 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800413c:	f7fd fad2 	bl	80016e4 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e062      	b.n	8004214 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800414e:	4b33      	ldr	r3, [pc, #204]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0f0      	beq.n	800413c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800415a:	e05a      	b.n	8004212 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e059      	b.n	8004214 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004160:	4b2e      	ldr	r3, [pc, #184]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d152      	bne.n	8004212 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800416c:	4b2b      	ldr	r3, [pc, #172]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a2a      	ldr	r2, [pc, #168]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 8004172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004176:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004178:	4b28      	ldr	r3, [pc, #160]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4a27      	ldr	r2, [pc, #156]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 800417e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004182:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004184:	f7fd faae 	bl	80016e4 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800418c:	f7fd faaa 	bl	80016e4 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e03a      	b.n	8004214 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800419e:	4b1f      	ldr	r3, [pc, #124]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCC_OscConfig+0x734>
 80041aa:	e032      	b.n	8004212 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	2b0c      	cmp	r3, #12
 80041b0:	d02d      	beq.n	800420e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b2:	4b1a      	ldr	r3, [pc, #104]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a19      	ldr	r2, [pc, #100]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 80041b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041bc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80041be:	4b17      	ldr	r3, [pc, #92]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d105      	bne.n	80041d6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80041ca:	4b14      	ldr	r3, [pc, #80]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	4a13      	ldr	r2, [pc, #76]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 80041d0:	f023 0303 	bic.w	r3, r3, #3
 80041d4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80041d6:	4b11      	ldr	r3, [pc, #68]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	4a10      	ldr	r2, [pc, #64]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 80041dc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80041e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e6:	f7fd fa7d 	bl	80016e4 <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ee:	f7fd fa79 	bl	80016e4 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e009      	b.n	8004214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004200:	4b06      	ldr	r3, [pc, #24]	; (800421c <HAL_RCC_OscConfig+0x7c4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1f0      	bne.n	80041ee <HAL_RCC_OscConfig+0x796>
 800420c:	e001      	b.n	8004212 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3720      	adds	r7, #32
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40021000 	.word	0x40021000
 8004220:	f99d808c 	.word	0xf99d808c

08004224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e0c8      	b.n	80043ca <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004238:	4b66      	ldr	r3, [pc, #408]	; (80043d4 <HAL_RCC_ClockConfig+0x1b0>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d910      	bls.n	8004268 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004246:	4b63      	ldr	r3, [pc, #396]	; (80043d4 <HAL_RCC_ClockConfig+0x1b0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f023 0207 	bic.w	r2, r3, #7
 800424e:	4961      	ldr	r1, [pc, #388]	; (80043d4 <HAL_RCC_ClockConfig+0x1b0>)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	4313      	orrs	r3, r2
 8004254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004256:	4b5f      	ldr	r3, [pc, #380]	; (80043d4 <HAL_RCC_ClockConfig+0x1b0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d001      	beq.n	8004268 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e0b0      	b.n	80043ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d04c      	beq.n	800430e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b03      	cmp	r3, #3
 800427a:	d107      	bne.n	800428c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800427c:	4b56      	ldr	r3, [pc, #344]	; (80043d8 <HAL_RCC_ClockConfig+0x1b4>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d121      	bne.n	80042cc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e09e      	b.n	80043ca <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2b02      	cmp	r3, #2
 8004292:	d107      	bne.n	80042a4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004294:	4b50      	ldr	r3, [pc, #320]	; (80043d8 <HAL_RCC_ClockConfig+0x1b4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d115      	bne.n	80042cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e092      	b.n	80043ca <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d107      	bne.n	80042bc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042ac:	4b4a      	ldr	r3, [pc, #296]	; (80043d8 <HAL_RCC_ClockConfig+0x1b4>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d109      	bne.n	80042cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e086      	b.n	80043ca <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042bc:	4b46      	ldr	r3, [pc, #280]	; (80043d8 <HAL_RCC_ClockConfig+0x1b4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e07e      	b.n	80043ca <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042cc:	4b42      	ldr	r3, [pc, #264]	; (80043d8 <HAL_RCC_ClockConfig+0x1b4>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f023 0203 	bic.w	r2, r3, #3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	493f      	ldr	r1, [pc, #252]	; (80043d8 <HAL_RCC_ClockConfig+0x1b4>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042de:	f7fd fa01 	bl	80016e4 <HAL_GetTick>
 80042e2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e4:	e00a      	b.n	80042fc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e6:	f7fd f9fd 	bl	80016e4 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e066      	b.n	80043ca <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fc:	4b36      	ldr	r3, [pc, #216]	; (80043d8 <HAL_RCC_ClockConfig+0x1b4>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 020c 	and.w	r2, r3, #12
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	429a      	cmp	r2, r3
 800430c:	d1eb      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d008      	beq.n	800432c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800431a:	4b2f      	ldr	r3, [pc, #188]	; (80043d8 <HAL_RCC_ClockConfig+0x1b4>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	492c      	ldr	r1, [pc, #176]	; (80043d8 <HAL_RCC_ClockConfig+0x1b4>)
 8004328:	4313      	orrs	r3, r2
 800432a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800432c:	4b29      	ldr	r3, [pc, #164]	; (80043d4 <HAL_RCC_ClockConfig+0x1b0>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d210      	bcs.n	800435c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800433a:	4b26      	ldr	r3, [pc, #152]	; (80043d4 <HAL_RCC_ClockConfig+0x1b0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f023 0207 	bic.w	r2, r3, #7
 8004342:	4924      	ldr	r1, [pc, #144]	; (80043d4 <HAL_RCC_ClockConfig+0x1b0>)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	4313      	orrs	r3, r2
 8004348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800434a:	4b22      	ldr	r3, [pc, #136]	; (80043d4 <HAL_RCC_ClockConfig+0x1b0>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d001      	beq.n	800435c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e036      	b.n	80043ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004368:	4b1b      	ldr	r3, [pc, #108]	; (80043d8 <HAL_RCC_ClockConfig+0x1b4>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4918      	ldr	r1, [pc, #96]	; (80043d8 <HAL_RCC_ClockConfig+0x1b4>)
 8004376:	4313      	orrs	r3, r2
 8004378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004386:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <HAL_RCC_ClockConfig+0x1b4>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	4910      	ldr	r1, [pc, #64]	; (80043d8 <HAL_RCC_ClockConfig+0x1b4>)
 8004396:	4313      	orrs	r3, r2
 8004398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800439a:	f000 f825 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 800439e:	4601      	mov	r1, r0
 80043a0:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <HAL_RCC_ClockConfig+0x1b4>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	4a0c      	ldr	r2, [pc, #48]	; (80043dc <HAL_RCC_ClockConfig+0x1b8>)
 80043ac:	5cd3      	ldrb	r3, [r2, r3]
 80043ae:	f003 031f 	and.w	r3, r3, #31
 80043b2:	fa21 f303 	lsr.w	r3, r1, r3
 80043b6:	4a0a      	ldr	r2, [pc, #40]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 80043b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043ba:	4b0a      	ldr	r3, [pc, #40]	; (80043e4 <HAL_RCC_ClockConfig+0x1c0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fd f940 	bl	8001644 <HAL_InitTick>
 80043c4:	4603      	mov	r3, r0
 80043c6:	72fb      	strb	r3, [r7, #11]

  return status;
 80043c8:	7afb      	ldrb	r3, [r7, #11]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	40022000 	.word	0x40022000
 80043d8:	40021000 	.word	0x40021000
 80043dc:	0800720c 	.word	0x0800720c
 80043e0:	2000000c 	.word	0x2000000c
 80043e4:	20000010 	.word	0x20000010

080043e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b089      	sub	sp, #36	; 0x24
 80043ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	61fb      	str	r3, [r7, #28]
 80043f2:	2300      	movs	r3, #0
 80043f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043f6:	4b3d      	ldr	r3, [pc, #244]	; (80044ec <HAL_RCC_GetSysClockFreq+0x104>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 030c 	and.w	r3, r3, #12
 80043fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004400:	4b3a      	ldr	r3, [pc, #232]	; (80044ec <HAL_RCC_GetSysClockFreq+0x104>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f003 0303 	and.w	r3, r3, #3
 8004408:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d005      	beq.n	800441c <HAL_RCC_GetSysClockFreq+0x34>
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	2b0c      	cmp	r3, #12
 8004414:	d121      	bne.n	800445a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d11e      	bne.n	800445a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800441c:	4b33      	ldr	r3, [pc, #204]	; (80044ec <HAL_RCC_GetSysClockFreq+0x104>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0308 	and.w	r3, r3, #8
 8004424:	2b00      	cmp	r3, #0
 8004426:	d107      	bne.n	8004438 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004428:	4b30      	ldr	r3, [pc, #192]	; (80044ec <HAL_RCC_GetSysClockFreq+0x104>)
 800442a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800442e:	0a1b      	lsrs	r3, r3, #8
 8004430:	f003 030f 	and.w	r3, r3, #15
 8004434:	61fb      	str	r3, [r7, #28]
 8004436:	e005      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004438:	4b2c      	ldr	r3, [pc, #176]	; (80044ec <HAL_RCC_GetSysClockFreq+0x104>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	091b      	lsrs	r3, r3, #4
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004444:	4a2a      	ldr	r2, [pc, #168]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800444c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10d      	bne.n	8004470 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004458:	e00a      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	2b04      	cmp	r3, #4
 800445e:	d102      	bne.n	8004466 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004460:	4b24      	ldr	r3, [pc, #144]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004462:	61bb      	str	r3, [r7, #24]
 8004464:	e004      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	2b08      	cmp	r3, #8
 800446a:	d101      	bne.n	8004470 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800446c:	4b22      	ldr	r3, [pc, #136]	; (80044f8 <HAL_RCC_GetSysClockFreq+0x110>)
 800446e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	2b0c      	cmp	r3, #12
 8004474:	d133      	bne.n	80044de <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004476:	4b1d      	ldr	r3, [pc, #116]	; (80044ec <HAL_RCC_GetSysClockFreq+0x104>)
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d002      	beq.n	800448c <HAL_RCC_GetSysClockFreq+0xa4>
 8004486:	2b03      	cmp	r3, #3
 8004488:	d003      	beq.n	8004492 <HAL_RCC_GetSysClockFreq+0xaa>
 800448a:	e005      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800448c:	4b19      	ldr	r3, [pc, #100]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800448e:	617b      	str	r3, [r7, #20]
      break;
 8004490:	e005      	b.n	800449e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004492:	4b19      	ldr	r3, [pc, #100]	; (80044f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004494:	617b      	str	r3, [r7, #20]
      break;
 8004496:	e002      	b.n	800449e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	617b      	str	r3, [r7, #20]
      break;
 800449c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800449e:	4b13      	ldr	r3, [pc, #76]	; (80044ec <HAL_RCC_GetSysClockFreq+0x104>)
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	091b      	lsrs	r3, r3, #4
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	3301      	adds	r3, #1
 80044aa:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044ac:	4b0f      	ldr	r3, [pc, #60]	; (80044ec <HAL_RCC_GetSysClockFreq+0x104>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	0a1b      	lsrs	r3, r3, #8
 80044b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	fb02 f203 	mul.w	r2, r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044c4:	4b09      	ldr	r3, [pc, #36]	; (80044ec <HAL_RCC_GetSysClockFreq+0x104>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	0e5b      	lsrs	r3, r3, #25
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	3301      	adds	r3, #1
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044dc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80044de:	69bb      	ldr	r3, [r7, #24]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3724      	adds	r7, #36	; 0x24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	40021000 	.word	0x40021000
 80044f0:	08007224 	.word	0x08007224
 80044f4:	00f42400 	.word	0x00f42400
 80044f8:	007a1200 	.word	0x007a1200

080044fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004500:	4b03      	ldr	r3, [pc, #12]	; (8004510 <HAL_RCC_GetHCLKFreq+0x14>)
 8004502:	681b      	ldr	r3, [r3, #0]
}
 8004504:	4618      	mov	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	2000000c 	.word	0x2000000c

08004514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004518:	f7ff fff0 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 800451c:	4601      	mov	r1, r0
 800451e:	4b06      	ldr	r3, [pc, #24]	; (8004538 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	0a1b      	lsrs	r3, r3, #8
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	4a04      	ldr	r2, [pc, #16]	; (800453c <HAL_RCC_GetPCLK1Freq+0x28>)
 800452a:	5cd3      	ldrb	r3, [r2, r3]
 800452c:	f003 031f 	and.w	r3, r3, #31
 8004530:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004534:	4618      	mov	r0, r3
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40021000 	.word	0x40021000
 800453c:	0800721c 	.word	0x0800721c

08004540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004544:	f7ff ffda 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 8004548:	4601      	mov	r1, r0
 800454a:	4b06      	ldr	r3, [pc, #24]	; (8004564 <HAL_RCC_GetPCLK2Freq+0x24>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	0adb      	lsrs	r3, r3, #11
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	4a04      	ldr	r2, [pc, #16]	; (8004568 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004556:	5cd3      	ldrb	r3, [r2, r3]
 8004558:	f003 031f 	and.w	r3, r3, #31
 800455c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004560:	4618      	mov	r0, r3
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40021000 	.word	0x40021000
 8004568:	0800721c 	.word	0x0800721c

0800456c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004574:	2300      	movs	r3, #0
 8004576:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004578:	4b2a      	ldr	r3, [pc, #168]	; (8004624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800457a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004584:	f7ff fa04 	bl	8003990 <HAL_PWREx_GetVoltageRange>
 8004588:	6178      	str	r0, [r7, #20]
 800458a:	e014      	b.n	80045b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800458c:	4b25      	ldr	r3, [pc, #148]	; (8004624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800458e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004590:	4a24      	ldr	r2, [pc, #144]	; (8004624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004596:	6593      	str	r3, [r2, #88]	; 0x58
 8004598:	4b22      	ldr	r3, [pc, #136]	; (8004624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800459a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80045a4:	f7ff f9f4 	bl	8003990 <HAL_PWREx_GetVoltageRange>
 80045a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80045aa:	4b1e      	ldr	r3, [pc, #120]	; (8004624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ae:	4a1d      	ldr	r2, [pc, #116]	; (8004624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045bc:	d10b      	bne.n	80045d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b80      	cmp	r3, #128	; 0x80
 80045c2:	d919      	bls.n	80045f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2ba0      	cmp	r3, #160	; 0xa0
 80045c8:	d902      	bls.n	80045d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045ca:	2302      	movs	r3, #2
 80045cc:	613b      	str	r3, [r7, #16]
 80045ce:	e013      	b.n	80045f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045d0:	2301      	movs	r3, #1
 80045d2:	613b      	str	r3, [r7, #16]
 80045d4:	e010      	b.n	80045f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b80      	cmp	r3, #128	; 0x80
 80045da:	d902      	bls.n	80045e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80045dc:	2303      	movs	r3, #3
 80045de:	613b      	str	r3, [r7, #16]
 80045e0:	e00a      	b.n	80045f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b80      	cmp	r3, #128	; 0x80
 80045e6:	d102      	bne.n	80045ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045e8:	2302      	movs	r3, #2
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	e004      	b.n	80045f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b70      	cmp	r3, #112	; 0x70
 80045f2:	d101      	bne.n	80045f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045f4:	2301      	movs	r3, #1
 80045f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045f8:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f023 0207 	bic.w	r2, r3, #7
 8004600:	4909      	ldr	r1, [pc, #36]	; (8004628 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004608:	4b07      	ldr	r3, [pc, #28]	; (8004628 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	429a      	cmp	r2, r3
 8004614:	d001      	beq.n	800461a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e000      	b.n	800461c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40021000 	.word	0x40021000
 8004628:	40022000 	.word	0x40022000

0800462c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004634:	2300      	movs	r3, #0
 8004636:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004638:	2300      	movs	r3, #0
 800463a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004644:	2b00      	cmp	r3, #0
 8004646:	d03f      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800464c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004650:	d01c      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004656:	d802      	bhi.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00e      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800465c:	e01f      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800465e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004662:	d003      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004664:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004668:	d01c      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800466a:	e018      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800466c:	4b85      	ldr	r3, [pc, #532]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	4a84      	ldr	r2, [pc, #528]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004676:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004678:	e015      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	3304      	adds	r3, #4
 800467e:	2100      	movs	r1, #0
 8004680:	4618      	mov	r0, r3
 8004682:	f000 fab9 	bl	8004bf8 <RCCEx_PLLSAI1_Config>
 8004686:	4603      	mov	r3, r0
 8004688:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800468a:	e00c      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3320      	adds	r3, #32
 8004690:	2100      	movs	r1, #0
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fba0 	bl	8004dd8 <RCCEx_PLLSAI2_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800469c:	e003      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	74fb      	strb	r3, [r7, #19]
      break;
 80046a2:	e000      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80046a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046a6:	7cfb      	ldrb	r3, [r7, #19]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10b      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046ac:	4b75      	ldr	r3, [pc, #468]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046ba:	4972      	ldr	r1, [pc, #456]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80046c2:	e001      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c4:	7cfb      	ldrb	r3, [r7, #19]
 80046c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d03f      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046dc:	d01c      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80046de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046e2:	d802      	bhi.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00e      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80046e8:	e01f      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80046ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046ee:	d003      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80046f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046f4:	d01c      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80046f6:	e018      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046f8:	4b62      	ldr	r3, [pc, #392]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	4a61      	ldr	r2, [pc, #388]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004702:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004704:	e015      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	3304      	adds	r3, #4
 800470a:	2100      	movs	r1, #0
 800470c:	4618      	mov	r0, r3
 800470e:	f000 fa73 	bl	8004bf8 <RCCEx_PLLSAI1_Config>
 8004712:	4603      	mov	r3, r0
 8004714:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004716:	e00c      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3320      	adds	r3, #32
 800471c:	2100      	movs	r1, #0
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fb5a 	bl	8004dd8 <RCCEx_PLLSAI2_Config>
 8004724:	4603      	mov	r3, r0
 8004726:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004728:	e003      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	74fb      	strb	r3, [r7, #19]
      break;
 800472e:	e000      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004730:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004732:	7cfb      	ldrb	r3, [r7, #19]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10b      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004738:	4b52      	ldr	r3, [pc, #328]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004746:	494f      	ldr	r1, [pc, #316]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004748:	4313      	orrs	r3, r2
 800474a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800474e:	e001      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004750:	7cfb      	ldrb	r3, [r7, #19]
 8004752:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 80a0 	beq.w	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004762:	2300      	movs	r3, #0
 8004764:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004766:	4b47      	ldr	r3, [pc, #284]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004776:	2300      	movs	r3, #0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00d      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800477c:	4b41      	ldr	r3, [pc, #260]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800477e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004780:	4a40      	ldr	r2, [pc, #256]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004786:	6593      	str	r3, [r2, #88]	; 0x58
 8004788:	4b3e      	ldr	r3, [pc, #248]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800478a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004790:	60bb      	str	r3, [r7, #8]
 8004792:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004794:	2301      	movs	r3, #1
 8004796:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004798:	4b3b      	ldr	r3, [pc, #236]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a3a      	ldr	r2, [pc, #232]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800479e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047a4:	f7fc ff9e 	bl	80016e4 <HAL_GetTick>
 80047a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047aa:	e009      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ac:	f7fc ff9a 	bl	80016e4 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d902      	bls.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	74fb      	strb	r3, [r7, #19]
        break;
 80047be:	e005      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047c0:	4b31      	ldr	r3, [pc, #196]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0ef      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80047cc:	7cfb      	ldrb	r3, [r7, #19]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d15c      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047d2:	4b2c      	ldr	r3, [pc, #176]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01f      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d019      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047f0:	4b24      	ldr	r3, [pc, #144]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047fc:	4b21      	ldr	r3, [pc, #132]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004802:	4a20      	ldr	r2, [pc, #128]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800480c:	4b1d      	ldr	r3, [pc, #116]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800480e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004812:	4a1c      	ldr	r2, [pc, #112]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800481c:	4a19      	ldr	r2, [pc, #100]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d016      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482e:	f7fc ff59 	bl	80016e4 <HAL_GetTick>
 8004832:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004834:	e00b      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004836:	f7fc ff55 	bl	80016e4 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	f241 3288 	movw	r2, #5000	; 0x1388
 8004844:	4293      	cmp	r3, r2
 8004846:	d902      	bls.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	74fb      	strb	r3, [r7, #19]
            break;
 800484c:	e006      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800484e:	4b0d      	ldr	r3, [pc, #52]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0ec      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800485c:	7cfb      	ldrb	r3, [r7, #19]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10c      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004862:	4b08      	ldr	r3, [pc, #32]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004868:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004872:	4904      	ldr	r1, [pc, #16]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800487a:	e009      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800487c:	7cfb      	ldrb	r3, [r7, #19]
 800487e:	74bb      	strb	r3, [r7, #18]
 8004880:	e006      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004882:	bf00      	nop
 8004884:	40021000 	.word	0x40021000
 8004888:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488c:	7cfb      	ldrb	r3, [r7, #19]
 800488e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004890:	7c7b      	ldrb	r3, [r7, #17]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d105      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004896:	4b9e      	ldr	r3, [pc, #632]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489a:	4a9d      	ldr	r2, [pc, #628]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800489c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048ae:	4b98      	ldr	r3, [pc, #608]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b4:	f023 0203 	bic.w	r2, r3, #3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048bc:	4994      	ldr	r1, [pc, #592]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048d0:	4b8f      	ldr	r3, [pc, #572]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d6:	f023 020c 	bic.w	r2, r3, #12
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048de:	498c      	ldr	r1, [pc, #560]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048f2:	4b87      	ldr	r3, [pc, #540]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004900:	4983      	ldr	r1, [pc, #524]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00a      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004914:	4b7e      	ldr	r3, [pc, #504]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004922:	497b      	ldr	r1, [pc, #492]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004924:	4313      	orrs	r3, r2
 8004926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0310 	and.w	r3, r3, #16
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004936:	4b76      	ldr	r3, [pc, #472]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004944:	4972      	ldr	r1, [pc, #456]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0320 	and.w	r3, r3, #32
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00a      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004958:	4b6d      	ldr	r3, [pc, #436]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800495a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004966:	496a      	ldr	r1, [pc, #424]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004968:	4313      	orrs	r3, r2
 800496a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800497a:	4b65      	ldr	r3, [pc, #404]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800497c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004980:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004988:	4961      	ldr	r1, [pc, #388]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00a      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800499c:	4b5c      	ldr	r3, [pc, #368]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800499e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049aa:	4959      	ldr	r1, [pc, #356]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049be:	4b54      	ldr	r3, [pc, #336]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049cc:	4950      	ldr	r1, [pc, #320]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049e0:	4b4b      	ldr	r3, [pc, #300]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ee:	4948      	ldr	r1, [pc, #288]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a02:	4b43      	ldr	r3, [pc, #268]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a10:	493f      	ldr	r1, [pc, #252]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d028      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a24:	4b3a      	ldr	r3, [pc, #232]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a32:	4937      	ldr	r1, [pc, #220]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a42:	d106      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a44:	4b32      	ldr	r3, [pc, #200]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	4a31      	ldr	r2, [pc, #196]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a4e:	60d3      	str	r3, [r2, #12]
 8004a50:	e011      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a5a:	d10c      	bne.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3304      	adds	r3, #4
 8004a60:	2101      	movs	r1, #1
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 f8c8 	bl	8004bf8 <RCCEx_PLLSAI1_Config>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a6c:	7cfb      	ldrb	r3, [r7, #19]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004a72:	7cfb      	ldrb	r3, [r7, #19]
 8004a74:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d028      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a82:	4b23      	ldr	r3, [pc, #140]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a90:	491f      	ldr	r1, [pc, #124]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aa0:	d106      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aa2:	4b1b      	ldr	r3, [pc, #108]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	4a1a      	ldr	r2, [pc, #104]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004aa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aac:	60d3      	str	r3, [r2, #12]
 8004aae:	e011      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ab8:	d10c      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	3304      	adds	r3, #4
 8004abe:	2101      	movs	r1, #1
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 f899 	bl	8004bf8 <RCCEx_PLLSAI1_Config>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aca:	7cfb      	ldrb	r3, [r7, #19]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004ad0:	7cfb      	ldrb	r3, [r7, #19]
 8004ad2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d02b      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aee:	4908      	ldr	r1, [pc, #32]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004afa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004afe:	d109      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b00:	4b03      	ldr	r3, [pc, #12]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	4a02      	ldr	r2, [pc, #8]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b0a:	60d3      	str	r3, [r2, #12]
 8004b0c:	e014      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004b0e:	bf00      	nop
 8004b10:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b1c:	d10c      	bne.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3304      	adds	r3, #4
 8004b22:	2101      	movs	r1, #1
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 f867 	bl	8004bf8 <RCCEx_PLLSAI1_Config>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b2e:	7cfb      	ldrb	r3, [r7, #19]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004b34:	7cfb      	ldrb	r3, [r7, #19]
 8004b36:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d02f      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b44:	4b2b      	ldr	r3, [pc, #172]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b52:	4928      	ldr	r1, [pc, #160]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b62:	d10d      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3304      	adds	r3, #4
 8004b68:	2102      	movs	r1, #2
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 f844 	bl	8004bf8 <RCCEx_PLLSAI1_Config>
 8004b70:	4603      	mov	r3, r0
 8004b72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b74:	7cfb      	ldrb	r3, [r7, #19]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d014      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004b7a:	7cfb      	ldrb	r3, [r7, #19]
 8004b7c:	74bb      	strb	r3, [r7, #18]
 8004b7e:	e011      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b88:	d10c      	bne.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3320      	adds	r3, #32
 8004b8e:	2102      	movs	r1, #2
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 f921 	bl	8004dd8 <RCCEx_PLLSAI2_Config>
 8004b96:	4603      	mov	r3, r0
 8004b98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b9a:	7cfb      	ldrb	r3, [r7, #19]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004ba0:	7cfb      	ldrb	r3, [r7, #19]
 8004ba2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00a      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004bb0:	4b10      	ldr	r3, [pc, #64]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bbe:	490d      	ldr	r1, [pc, #52]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00b      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bd2:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004be2:	4904      	ldr	r1, [pc, #16]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004bea:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	40021000 	.word	0x40021000

08004bf8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c06:	4b73      	ldr	r3, [pc, #460]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d018      	beq.n	8004c44 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c12:	4b70      	ldr	r3, [pc, #448]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f003 0203 	and.w	r2, r3, #3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d10d      	bne.n	8004c3e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
       ||
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d009      	beq.n	8004c3e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c2a:	4b6a      	ldr	r3, [pc, #424]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	091b      	lsrs	r3, r3, #4
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
       ||
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d044      	beq.n	8004cc8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	73fb      	strb	r3, [r7, #15]
 8004c42:	e041      	b.n	8004cc8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d00c      	beq.n	8004c66 <RCCEx_PLLSAI1_Config+0x6e>
 8004c4c:	2b03      	cmp	r3, #3
 8004c4e:	d013      	beq.n	8004c78 <RCCEx_PLLSAI1_Config+0x80>
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d120      	bne.n	8004c96 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c54:	4b5f      	ldr	r3, [pc, #380]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d11d      	bne.n	8004c9c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c64:	e01a      	b.n	8004c9c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c66:	4b5b      	ldr	r3, [pc, #364]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d116      	bne.n	8004ca0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c76:	e013      	b.n	8004ca0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c78:	4b56      	ldr	r3, [pc, #344]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10f      	bne.n	8004ca4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c84:	4b53      	ldr	r3, [pc, #332]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d109      	bne.n	8004ca4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c94:	e006      	b.n	8004ca4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	73fb      	strb	r3, [r7, #15]
      break;
 8004c9a:	e004      	b.n	8004ca6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004c9c:	bf00      	nop
 8004c9e:	e002      	b.n	8004ca6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004ca0:	bf00      	nop
 8004ca2:	e000      	b.n	8004ca6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004ca4:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10d      	bne.n	8004cc8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004cac:	4b49      	ldr	r3, [pc, #292]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6819      	ldr	r1, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	011b      	lsls	r3, r3, #4
 8004cc0:	430b      	orrs	r3, r1
 8004cc2:	4944      	ldr	r1, [pc, #272]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d17d      	bne.n	8004dca <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004cce:	4b41      	ldr	r3, [pc, #260]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a40      	ldr	r2, [pc, #256]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cd4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cda:	f7fc fd03 	bl	80016e4 <HAL_GetTick>
 8004cde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ce0:	e009      	b.n	8004cf6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ce2:	f7fc fcff 	bl	80016e4 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d902      	bls.n	8004cf6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	73fb      	strb	r3, [r7, #15]
        break;
 8004cf4:	e005      	b.n	8004d02 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cf6:	4b37      	ldr	r3, [pc, #220]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1ef      	bne.n	8004ce2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d160      	bne.n	8004dca <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d111      	bne.n	8004d32 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d0e:	4b31      	ldr	r3, [pc, #196]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6892      	ldr	r2, [r2, #8]
 8004d1e:	0211      	lsls	r1, r2, #8
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	68d2      	ldr	r2, [r2, #12]
 8004d24:	0912      	lsrs	r2, r2, #4
 8004d26:	0452      	lsls	r2, r2, #17
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	492a      	ldr	r1, [pc, #168]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	610b      	str	r3, [r1, #16]
 8004d30:	e027      	b.n	8004d82 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d112      	bne.n	8004d5e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d38:	4b26      	ldr	r3, [pc, #152]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004d40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6892      	ldr	r2, [r2, #8]
 8004d48:	0211      	lsls	r1, r2, #8
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6912      	ldr	r2, [r2, #16]
 8004d4e:	0852      	lsrs	r2, r2, #1
 8004d50:	3a01      	subs	r2, #1
 8004d52:	0552      	lsls	r2, r2, #21
 8004d54:	430a      	orrs	r2, r1
 8004d56:	491f      	ldr	r1, [pc, #124]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	610b      	str	r3, [r1, #16]
 8004d5c:	e011      	b.n	8004d82 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d5e:	4b1d      	ldr	r3, [pc, #116]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d66:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6892      	ldr	r2, [r2, #8]
 8004d6e:	0211      	lsls	r1, r2, #8
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6952      	ldr	r2, [r2, #20]
 8004d74:	0852      	lsrs	r2, r2, #1
 8004d76:	3a01      	subs	r2, #1
 8004d78:	0652      	lsls	r2, r2, #25
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	4915      	ldr	r1, [pc, #84]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d82:	4b14      	ldr	r3, [pc, #80]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a13      	ldr	r2, [pc, #76]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d8c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8e:	f7fc fca9 	bl	80016e4 <HAL_GetTick>
 8004d92:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d94:	e009      	b.n	8004daa <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d96:	f7fc fca5 	bl	80016e4 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d902      	bls.n	8004daa <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	73fb      	strb	r3, [r7, #15]
          break;
 8004da8:	e005      	b.n	8004db6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004daa:	4b0a      	ldr	r3, [pc, #40]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0ef      	beq.n	8004d96 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004db6:	7bfb      	ldrb	r3, [r7, #15]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d106      	bne.n	8004dca <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004dbc:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dbe:	691a      	ldr	r2, [r3, #16]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	4903      	ldr	r1, [pc, #12]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40021000 	.word	0x40021000

08004dd8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004de6:	4b68      	ldr	r3, [pc, #416]	; (8004f88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d018      	beq.n	8004e24 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004df2:	4b65      	ldr	r3, [pc, #404]	; (8004f88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f003 0203 	and.w	r2, r3, #3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d10d      	bne.n	8004e1e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
       ||
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d009      	beq.n	8004e1e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004e0a:	4b5f      	ldr	r3, [pc, #380]	; (8004f88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	091b      	lsrs	r3, r3, #4
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
       ||
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d044      	beq.n	8004ea8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	73fb      	strb	r3, [r7, #15]
 8004e22:	e041      	b.n	8004ea8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d00c      	beq.n	8004e46 <RCCEx_PLLSAI2_Config+0x6e>
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d013      	beq.n	8004e58 <RCCEx_PLLSAI2_Config+0x80>
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d120      	bne.n	8004e76 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e34:	4b54      	ldr	r3, [pc, #336]	; (8004f88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d11d      	bne.n	8004e7c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e44:	e01a      	b.n	8004e7c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e46:	4b50      	ldr	r3, [pc, #320]	; (8004f88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d116      	bne.n	8004e80 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e56:	e013      	b.n	8004e80 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e58:	4b4b      	ldr	r3, [pc, #300]	; (8004f88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10f      	bne.n	8004e84 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e64:	4b48      	ldr	r3, [pc, #288]	; (8004f88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d109      	bne.n	8004e84 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e74:	e006      	b.n	8004e84 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	73fb      	strb	r3, [r7, #15]
      break;
 8004e7a:	e004      	b.n	8004e86 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004e7c:	bf00      	nop
 8004e7e:	e002      	b.n	8004e86 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004e80:	bf00      	nop
 8004e82:	e000      	b.n	8004e86 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004e84:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10d      	bne.n	8004ea8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e8c:	4b3e      	ldr	r3, [pc, #248]	; (8004f88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6819      	ldr	r1, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	430b      	orrs	r3, r1
 8004ea2:	4939      	ldr	r1, [pc, #228]	; (8004f88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d167      	bne.n	8004f7e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004eae:	4b36      	ldr	r3, [pc, #216]	; (8004f88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a35      	ldr	r2, [pc, #212]	; (8004f88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eba:	f7fc fc13 	bl	80016e4 <HAL_GetTick>
 8004ebe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ec0:	e009      	b.n	8004ed6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ec2:	f7fc fc0f 	bl	80016e4 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d902      	bls.n	8004ed6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	73fb      	strb	r3, [r7, #15]
        break;
 8004ed4:	e005      	b.n	8004ee2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ed6:	4b2c      	ldr	r3, [pc, #176]	; (8004f88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1ef      	bne.n	8004ec2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d14a      	bne.n	8004f7e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d111      	bne.n	8004f12 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004eee:	4b26      	ldr	r3, [pc, #152]	; (8004f88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6892      	ldr	r2, [r2, #8]
 8004efe:	0211      	lsls	r1, r2, #8
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	68d2      	ldr	r2, [r2, #12]
 8004f04:	0912      	lsrs	r2, r2, #4
 8004f06:	0452      	lsls	r2, r2, #17
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	491f      	ldr	r1, [pc, #124]	; (8004f88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	614b      	str	r3, [r1, #20]
 8004f10:	e011      	b.n	8004f36 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f12:	4b1d      	ldr	r3, [pc, #116]	; (8004f88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f1a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6892      	ldr	r2, [r2, #8]
 8004f22:	0211      	lsls	r1, r2, #8
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	6912      	ldr	r2, [r2, #16]
 8004f28:	0852      	lsrs	r2, r2, #1
 8004f2a:	3a01      	subs	r2, #1
 8004f2c:	0652      	lsls	r2, r2, #25
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	4915      	ldr	r1, [pc, #84]	; (8004f88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f36:	4b14      	ldr	r3, [pc, #80]	; (8004f88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a13      	ldr	r2, [pc, #76]	; (8004f88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f40:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f42:	f7fc fbcf 	bl	80016e4 <HAL_GetTick>
 8004f46:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f48:	e009      	b.n	8004f5e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f4a:	f7fc fbcb 	bl	80016e4 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d902      	bls.n	8004f5e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	73fb      	strb	r3, [r7, #15]
          break;
 8004f5c:	e005      	b.n	8004f6a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f5e:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0ef      	beq.n	8004f4a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d106      	bne.n	8004f7e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f70:	4b05      	ldr	r3, [pc, #20]	; (8004f88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f72:	695a      	ldr	r2, [r3, #20]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	4903      	ldr	r1, [pc, #12]	; (8004f88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	40021000 	.word	0x40021000

08004f8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e095      	b.n	80050ca <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d108      	bne.n	8004fb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fae:	d009      	beq.n	8004fc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	61da      	str	r2, [r3, #28]
 8004fb6:	e005      	b.n	8004fc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d106      	bne.n	8004fe4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fc f970 	bl	80012c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ffa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005004:	d902      	bls.n	800500c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	e002      	b.n	8005012 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800500c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005010:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800501a:	d007      	beq.n	800502c <HAL_SPI_Init+0xa0>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005024:	d002      	beq.n	800502c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	431a      	orrs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	431a      	orrs	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005064:	431a      	orrs	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506e:	ea42 0103 	orr.w	r1, r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005076:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	0c1b      	lsrs	r3, r3, #16
 8005088:	f003 0204 	and.w	r2, r3, #4
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	f003 0310 	and.w	r3, r3, #16
 8005094:	431a      	orrs	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509a:	f003 0308 	and.w	r3, r3, #8
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80050a8:	ea42 0103 	orr.w	r1, r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b082      	sub	sp, #8
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e040      	b.n	8005166 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d106      	bne.n	80050fa <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7fc f947 	bl	8001388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2224      	movs	r2, #36	; 0x24
 80050fe:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0201 	bic.w	r2, r2, #1
 800510e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f8bf 	bl	8005294 <UART_SetConfig>
 8005116:	4603      	mov	r3, r0
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e022      	b.n	8005166 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fb3d 	bl	80057a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800513c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800514c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f042 0201 	orr.w	r2, r2, #1
 800515c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fbc4 	bl	80058ec <UART_CheckIdleState>
 8005164:	4603      	mov	r3, r0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b08a      	sub	sp, #40	; 0x28
 8005172:	af02      	add	r7, sp, #8
 8005174:	60f8      	str	r0, [r7, #12]
 8005176:	60b9      	str	r1, [r7, #8]
 8005178:	603b      	str	r3, [r7, #0]
 800517a:	4613      	mov	r3, r2
 800517c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005182:	2b20      	cmp	r3, #32
 8005184:	f040 8081 	bne.w	800528a <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <HAL_UART_Transmit+0x26>
 800518e:	88fb      	ldrh	r3, [r7, #6]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e079      	b.n	800528c <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_UART_Transmit+0x38>
 80051a2:	2302      	movs	r3, #2
 80051a4:	e072      	b.n	800528c <HAL_UART_Transmit+0x11e>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2221      	movs	r2, #33	; 0x21
 80051b8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80051ba:	f7fc fa93 	bl	80016e4 <HAL_GetTick>
 80051be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	88fa      	ldrh	r2, [r7, #6]
 80051c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	88fa      	ldrh	r2, [r7, #6]
 80051cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d8:	d108      	bne.n	80051ec <HAL_UART_Transmit+0x7e>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d104      	bne.n	80051ec <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	61bb      	str	r3, [r7, #24]
 80051ea:	e003      	b.n	80051f4 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051f0:	2300      	movs	r3, #0
 80051f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80051fc:	e02d      	b.n	800525a <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2200      	movs	r2, #0
 8005206:	2180      	movs	r1, #128	; 0x80
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 fbb4 	bl	8005976 <UART_WaitOnFlagUntilTimeout>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e039      	b.n	800528c <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10b      	bne.n	8005236 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	881a      	ldrh	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800522a:	b292      	uxth	r2, r2
 800522c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	3302      	adds	r3, #2
 8005232:	61bb      	str	r3, [r7, #24]
 8005234:	e008      	b.n	8005248 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	781a      	ldrb	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	b292      	uxth	r2, r2
 8005240:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	3301      	adds	r3, #1
 8005246:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800524e:	b29b      	uxth	r3, r3
 8005250:	3b01      	subs	r3, #1
 8005252:	b29a      	uxth	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005260:	b29b      	uxth	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1cb      	bne.n	80051fe <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2200      	movs	r2, #0
 800526e:	2140      	movs	r1, #64	; 0x40
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 fb80 	bl	8005976 <UART_WaitOnFlagUntilTimeout>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e005      	b.n	800528c <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2220      	movs	r2, #32
 8005284:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005286:	2300      	movs	r3, #0
 8005288:	e000      	b.n	800528c <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800528a:	2302      	movs	r3, #2
  }
}
 800528c:	4618      	mov	r0, r3
 800528e:	3720      	adds	r7, #32
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005294:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005298:	b088      	sub	sp, #32
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689a      	ldr	r2, [r3, #8]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	431a      	orrs	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	4bac      	ldr	r3, [pc, #688]	; (8005574 <UART_SetConfig+0x2e0>)
 80052c2:	4013      	ands	r3, r2
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6812      	ldr	r2, [r2, #0]
 80052c8:	69f9      	ldr	r1, [r7, #28]
 80052ca:	430b      	orrs	r3, r1
 80052cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68da      	ldr	r2, [r3, #12]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4aa2      	ldr	r2, [pc, #648]	; (8005578 <UART_SetConfig+0x2e4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d004      	beq.n	80052fe <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	69fa      	ldr	r2, [r7, #28]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	430a      	orrs	r2, r1
 8005310:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a99      	ldr	r2, [pc, #612]	; (800557c <UART_SetConfig+0x2e8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d121      	bne.n	8005360 <UART_SetConfig+0xcc>
 800531c:	4b98      	ldr	r3, [pc, #608]	; (8005580 <UART_SetConfig+0x2ec>)
 800531e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	2b03      	cmp	r3, #3
 8005328:	d816      	bhi.n	8005358 <UART_SetConfig+0xc4>
 800532a:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <UART_SetConfig+0x9c>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	08005341 	.word	0x08005341
 8005334:	0800534d 	.word	0x0800534d
 8005338:	08005347 	.word	0x08005347
 800533c:	08005353 	.word	0x08005353
 8005340:	2301      	movs	r3, #1
 8005342:	76fb      	strb	r3, [r7, #27]
 8005344:	e0e8      	b.n	8005518 <UART_SetConfig+0x284>
 8005346:	2302      	movs	r3, #2
 8005348:	76fb      	strb	r3, [r7, #27]
 800534a:	e0e5      	b.n	8005518 <UART_SetConfig+0x284>
 800534c:	2304      	movs	r3, #4
 800534e:	76fb      	strb	r3, [r7, #27]
 8005350:	e0e2      	b.n	8005518 <UART_SetConfig+0x284>
 8005352:	2308      	movs	r3, #8
 8005354:	76fb      	strb	r3, [r7, #27]
 8005356:	e0df      	b.n	8005518 <UART_SetConfig+0x284>
 8005358:	2310      	movs	r3, #16
 800535a:	76fb      	strb	r3, [r7, #27]
 800535c:	bf00      	nop
 800535e:	e0db      	b.n	8005518 <UART_SetConfig+0x284>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a87      	ldr	r2, [pc, #540]	; (8005584 <UART_SetConfig+0x2f0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d134      	bne.n	80053d4 <UART_SetConfig+0x140>
 800536a:	4b85      	ldr	r3, [pc, #532]	; (8005580 <UART_SetConfig+0x2ec>)
 800536c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005370:	f003 030c 	and.w	r3, r3, #12
 8005374:	2b0c      	cmp	r3, #12
 8005376:	d829      	bhi.n	80053cc <UART_SetConfig+0x138>
 8005378:	a201      	add	r2, pc, #4	; (adr r2, 8005380 <UART_SetConfig+0xec>)
 800537a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537e:	bf00      	nop
 8005380:	080053b5 	.word	0x080053b5
 8005384:	080053cd 	.word	0x080053cd
 8005388:	080053cd 	.word	0x080053cd
 800538c:	080053cd 	.word	0x080053cd
 8005390:	080053c1 	.word	0x080053c1
 8005394:	080053cd 	.word	0x080053cd
 8005398:	080053cd 	.word	0x080053cd
 800539c:	080053cd 	.word	0x080053cd
 80053a0:	080053bb 	.word	0x080053bb
 80053a4:	080053cd 	.word	0x080053cd
 80053a8:	080053cd 	.word	0x080053cd
 80053ac:	080053cd 	.word	0x080053cd
 80053b0:	080053c7 	.word	0x080053c7
 80053b4:	2300      	movs	r3, #0
 80053b6:	76fb      	strb	r3, [r7, #27]
 80053b8:	e0ae      	b.n	8005518 <UART_SetConfig+0x284>
 80053ba:	2302      	movs	r3, #2
 80053bc:	76fb      	strb	r3, [r7, #27]
 80053be:	e0ab      	b.n	8005518 <UART_SetConfig+0x284>
 80053c0:	2304      	movs	r3, #4
 80053c2:	76fb      	strb	r3, [r7, #27]
 80053c4:	e0a8      	b.n	8005518 <UART_SetConfig+0x284>
 80053c6:	2308      	movs	r3, #8
 80053c8:	76fb      	strb	r3, [r7, #27]
 80053ca:	e0a5      	b.n	8005518 <UART_SetConfig+0x284>
 80053cc:	2310      	movs	r3, #16
 80053ce:	76fb      	strb	r3, [r7, #27]
 80053d0:	bf00      	nop
 80053d2:	e0a1      	b.n	8005518 <UART_SetConfig+0x284>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a6b      	ldr	r2, [pc, #428]	; (8005588 <UART_SetConfig+0x2f4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d120      	bne.n	8005420 <UART_SetConfig+0x18c>
 80053de:	4b68      	ldr	r3, [pc, #416]	; (8005580 <UART_SetConfig+0x2ec>)
 80053e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053e8:	2b10      	cmp	r3, #16
 80053ea:	d00f      	beq.n	800540c <UART_SetConfig+0x178>
 80053ec:	2b10      	cmp	r3, #16
 80053ee:	d802      	bhi.n	80053f6 <UART_SetConfig+0x162>
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d005      	beq.n	8005400 <UART_SetConfig+0x16c>
 80053f4:	e010      	b.n	8005418 <UART_SetConfig+0x184>
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	d005      	beq.n	8005406 <UART_SetConfig+0x172>
 80053fa:	2b30      	cmp	r3, #48	; 0x30
 80053fc:	d009      	beq.n	8005412 <UART_SetConfig+0x17e>
 80053fe:	e00b      	b.n	8005418 <UART_SetConfig+0x184>
 8005400:	2300      	movs	r3, #0
 8005402:	76fb      	strb	r3, [r7, #27]
 8005404:	e088      	b.n	8005518 <UART_SetConfig+0x284>
 8005406:	2302      	movs	r3, #2
 8005408:	76fb      	strb	r3, [r7, #27]
 800540a:	e085      	b.n	8005518 <UART_SetConfig+0x284>
 800540c:	2304      	movs	r3, #4
 800540e:	76fb      	strb	r3, [r7, #27]
 8005410:	e082      	b.n	8005518 <UART_SetConfig+0x284>
 8005412:	2308      	movs	r3, #8
 8005414:	76fb      	strb	r3, [r7, #27]
 8005416:	e07f      	b.n	8005518 <UART_SetConfig+0x284>
 8005418:	2310      	movs	r3, #16
 800541a:	76fb      	strb	r3, [r7, #27]
 800541c:	bf00      	nop
 800541e:	e07b      	b.n	8005518 <UART_SetConfig+0x284>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a59      	ldr	r2, [pc, #356]	; (800558c <UART_SetConfig+0x2f8>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d120      	bne.n	800546c <UART_SetConfig+0x1d8>
 800542a:	4b55      	ldr	r3, [pc, #340]	; (8005580 <UART_SetConfig+0x2ec>)
 800542c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005430:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005434:	2b40      	cmp	r3, #64	; 0x40
 8005436:	d00f      	beq.n	8005458 <UART_SetConfig+0x1c4>
 8005438:	2b40      	cmp	r3, #64	; 0x40
 800543a:	d802      	bhi.n	8005442 <UART_SetConfig+0x1ae>
 800543c:	2b00      	cmp	r3, #0
 800543e:	d005      	beq.n	800544c <UART_SetConfig+0x1b8>
 8005440:	e010      	b.n	8005464 <UART_SetConfig+0x1d0>
 8005442:	2b80      	cmp	r3, #128	; 0x80
 8005444:	d005      	beq.n	8005452 <UART_SetConfig+0x1be>
 8005446:	2bc0      	cmp	r3, #192	; 0xc0
 8005448:	d009      	beq.n	800545e <UART_SetConfig+0x1ca>
 800544a:	e00b      	b.n	8005464 <UART_SetConfig+0x1d0>
 800544c:	2300      	movs	r3, #0
 800544e:	76fb      	strb	r3, [r7, #27]
 8005450:	e062      	b.n	8005518 <UART_SetConfig+0x284>
 8005452:	2302      	movs	r3, #2
 8005454:	76fb      	strb	r3, [r7, #27]
 8005456:	e05f      	b.n	8005518 <UART_SetConfig+0x284>
 8005458:	2304      	movs	r3, #4
 800545a:	76fb      	strb	r3, [r7, #27]
 800545c:	e05c      	b.n	8005518 <UART_SetConfig+0x284>
 800545e:	2308      	movs	r3, #8
 8005460:	76fb      	strb	r3, [r7, #27]
 8005462:	e059      	b.n	8005518 <UART_SetConfig+0x284>
 8005464:	2310      	movs	r3, #16
 8005466:	76fb      	strb	r3, [r7, #27]
 8005468:	bf00      	nop
 800546a:	e055      	b.n	8005518 <UART_SetConfig+0x284>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a47      	ldr	r2, [pc, #284]	; (8005590 <UART_SetConfig+0x2fc>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d124      	bne.n	80054c0 <UART_SetConfig+0x22c>
 8005476:	4b42      	ldr	r3, [pc, #264]	; (8005580 <UART_SetConfig+0x2ec>)
 8005478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005484:	d012      	beq.n	80054ac <UART_SetConfig+0x218>
 8005486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800548a:	d802      	bhi.n	8005492 <UART_SetConfig+0x1fe>
 800548c:	2b00      	cmp	r3, #0
 800548e:	d007      	beq.n	80054a0 <UART_SetConfig+0x20c>
 8005490:	e012      	b.n	80054b8 <UART_SetConfig+0x224>
 8005492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005496:	d006      	beq.n	80054a6 <UART_SetConfig+0x212>
 8005498:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800549c:	d009      	beq.n	80054b2 <UART_SetConfig+0x21e>
 800549e:	e00b      	b.n	80054b8 <UART_SetConfig+0x224>
 80054a0:	2300      	movs	r3, #0
 80054a2:	76fb      	strb	r3, [r7, #27]
 80054a4:	e038      	b.n	8005518 <UART_SetConfig+0x284>
 80054a6:	2302      	movs	r3, #2
 80054a8:	76fb      	strb	r3, [r7, #27]
 80054aa:	e035      	b.n	8005518 <UART_SetConfig+0x284>
 80054ac:	2304      	movs	r3, #4
 80054ae:	76fb      	strb	r3, [r7, #27]
 80054b0:	e032      	b.n	8005518 <UART_SetConfig+0x284>
 80054b2:	2308      	movs	r3, #8
 80054b4:	76fb      	strb	r3, [r7, #27]
 80054b6:	e02f      	b.n	8005518 <UART_SetConfig+0x284>
 80054b8:	2310      	movs	r3, #16
 80054ba:	76fb      	strb	r3, [r7, #27]
 80054bc:	bf00      	nop
 80054be:	e02b      	b.n	8005518 <UART_SetConfig+0x284>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a2c      	ldr	r2, [pc, #176]	; (8005578 <UART_SetConfig+0x2e4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d124      	bne.n	8005514 <UART_SetConfig+0x280>
 80054ca:	4b2d      	ldr	r3, [pc, #180]	; (8005580 <UART_SetConfig+0x2ec>)
 80054cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d8:	d012      	beq.n	8005500 <UART_SetConfig+0x26c>
 80054da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054de:	d802      	bhi.n	80054e6 <UART_SetConfig+0x252>
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d007      	beq.n	80054f4 <UART_SetConfig+0x260>
 80054e4:	e012      	b.n	800550c <UART_SetConfig+0x278>
 80054e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ea:	d006      	beq.n	80054fa <UART_SetConfig+0x266>
 80054ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054f0:	d009      	beq.n	8005506 <UART_SetConfig+0x272>
 80054f2:	e00b      	b.n	800550c <UART_SetConfig+0x278>
 80054f4:	2300      	movs	r3, #0
 80054f6:	76fb      	strb	r3, [r7, #27]
 80054f8:	e00e      	b.n	8005518 <UART_SetConfig+0x284>
 80054fa:	2302      	movs	r3, #2
 80054fc:	76fb      	strb	r3, [r7, #27]
 80054fe:	e00b      	b.n	8005518 <UART_SetConfig+0x284>
 8005500:	2304      	movs	r3, #4
 8005502:	76fb      	strb	r3, [r7, #27]
 8005504:	e008      	b.n	8005518 <UART_SetConfig+0x284>
 8005506:	2308      	movs	r3, #8
 8005508:	76fb      	strb	r3, [r7, #27]
 800550a:	e005      	b.n	8005518 <UART_SetConfig+0x284>
 800550c:	2310      	movs	r3, #16
 800550e:	76fb      	strb	r3, [r7, #27]
 8005510:	bf00      	nop
 8005512:	e001      	b.n	8005518 <UART_SetConfig+0x284>
 8005514:	2310      	movs	r3, #16
 8005516:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a16      	ldr	r2, [pc, #88]	; (8005578 <UART_SetConfig+0x2e4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	f040 8087 	bne.w	8005632 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005524:	7efb      	ldrb	r3, [r7, #27]
 8005526:	2b08      	cmp	r3, #8
 8005528:	d836      	bhi.n	8005598 <UART_SetConfig+0x304>
 800552a:	a201      	add	r2, pc, #4	; (adr r2, 8005530 <UART_SetConfig+0x29c>)
 800552c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005530:	08005555 	.word	0x08005555
 8005534:	08005599 	.word	0x08005599
 8005538:	0800555d 	.word	0x0800555d
 800553c:	08005599 	.word	0x08005599
 8005540:	08005563 	.word	0x08005563
 8005544:	08005599 	.word	0x08005599
 8005548:	08005599 	.word	0x08005599
 800554c:	08005599 	.word	0x08005599
 8005550:	0800556b 	.word	0x0800556b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005554:	f7fe ffde 	bl	8004514 <HAL_RCC_GetPCLK1Freq>
 8005558:	6178      	str	r0, [r7, #20]
        break;
 800555a:	e022      	b.n	80055a2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800555c:	4b0d      	ldr	r3, [pc, #52]	; (8005594 <UART_SetConfig+0x300>)
 800555e:	617b      	str	r3, [r7, #20]
        break;
 8005560:	e01f      	b.n	80055a2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005562:	f7fe ff41 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 8005566:	6178      	str	r0, [r7, #20]
        break;
 8005568:	e01b      	b.n	80055a2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800556a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800556e:	617b      	str	r3, [r7, #20]
        break;
 8005570:	e017      	b.n	80055a2 <UART_SetConfig+0x30e>
 8005572:	bf00      	nop
 8005574:	efff69f3 	.word	0xefff69f3
 8005578:	40008000 	.word	0x40008000
 800557c:	40013800 	.word	0x40013800
 8005580:	40021000 	.word	0x40021000
 8005584:	40004400 	.word	0x40004400
 8005588:	40004800 	.word	0x40004800
 800558c:	40004c00 	.word	0x40004c00
 8005590:	40005000 	.word	0x40005000
 8005594:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005598:	2300      	movs	r3, #0
 800559a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	76bb      	strb	r3, [r7, #26]
        break;
 80055a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 80f1 	beq.w	800578c <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	4413      	add	r3, r2
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d305      	bcc.n	80055c6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d902      	bls.n	80055cc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	76bb      	strb	r3, [r7, #26]
 80055ca:	e0df      	b.n	800578c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	4619      	mov	r1, r3
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	f04f 0400 	mov.w	r4, #0
 80055dc:	0214      	lsls	r4, r2, #8
 80055de:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80055e2:	020b      	lsls	r3, r1, #8
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6852      	ldr	r2, [r2, #4]
 80055e8:	0852      	lsrs	r2, r2, #1
 80055ea:	4611      	mov	r1, r2
 80055ec:	f04f 0200 	mov.w	r2, #0
 80055f0:	eb13 0b01 	adds.w	fp, r3, r1
 80055f4:	eb44 0c02 	adc.w	ip, r4, r2
 80055f8:	4658      	mov	r0, fp
 80055fa:	4661      	mov	r1, ip
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f04f 0400 	mov.w	r4, #0
 8005604:	461a      	mov	r2, r3
 8005606:	4623      	mov	r3, r4
 8005608:	f7fa fe3a 	bl	8000280 <__aeabi_uldivmod>
 800560c:	4603      	mov	r3, r0
 800560e:	460c      	mov	r4, r1
 8005610:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005618:	d308      	bcc.n	800562c <UART_SetConfig+0x398>
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005620:	d204      	bcs.n	800562c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	60da      	str	r2, [r3, #12]
 800562a:	e0af      	b.n	800578c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	76bb      	strb	r3, [r7, #26]
 8005630:	e0ac      	b.n	800578c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800563a:	d15b      	bne.n	80056f4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800563c:	7efb      	ldrb	r3, [r7, #27]
 800563e:	2b08      	cmp	r3, #8
 8005640:	d827      	bhi.n	8005692 <UART_SetConfig+0x3fe>
 8005642:	a201      	add	r2, pc, #4	; (adr r2, 8005648 <UART_SetConfig+0x3b4>)
 8005644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005648:	0800566d 	.word	0x0800566d
 800564c:	08005675 	.word	0x08005675
 8005650:	0800567d 	.word	0x0800567d
 8005654:	08005693 	.word	0x08005693
 8005658:	08005683 	.word	0x08005683
 800565c:	08005693 	.word	0x08005693
 8005660:	08005693 	.word	0x08005693
 8005664:	08005693 	.word	0x08005693
 8005668:	0800568b 	.word	0x0800568b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800566c:	f7fe ff52 	bl	8004514 <HAL_RCC_GetPCLK1Freq>
 8005670:	6178      	str	r0, [r7, #20]
        break;
 8005672:	e013      	b.n	800569c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005674:	f7fe ff64 	bl	8004540 <HAL_RCC_GetPCLK2Freq>
 8005678:	6178      	str	r0, [r7, #20]
        break;
 800567a:	e00f      	b.n	800569c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800567c:	4b49      	ldr	r3, [pc, #292]	; (80057a4 <UART_SetConfig+0x510>)
 800567e:	617b      	str	r3, [r7, #20]
        break;
 8005680:	e00c      	b.n	800569c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005682:	f7fe feb1 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 8005686:	6178      	str	r0, [r7, #20]
        break;
 8005688:	e008      	b.n	800569c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800568a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800568e:	617b      	str	r3, [r7, #20]
        break;
 8005690:	e004      	b.n	800569c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	76bb      	strb	r3, [r7, #26]
        break;
 800569a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d074      	beq.n	800578c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	005a      	lsls	r2, r3, #1
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	085b      	lsrs	r3, r3, #1
 80056ac:	441a      	add	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	2b0f      	cmp	r3, #15
 80056be:	d916      	bls.n	80056ee <UART_SetConfig+0x45a>
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c6:	d212      	bcs.n	80056ee <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f023 030f 	bic.w	r3, r3, #15
 80056d0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	085b      	lsrs	r3, r3, #1
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	b29a      	uxth	r2, r3
 80056de:	89fb      	ldrh	r3, [r7, #14]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	89fa      	ldrh	r2, [r7, #14]
 80056ea:	60da      	str	r2, [r3, #12]
 80056ec:	e04e      	b.n	800578c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	76bb      	strb	r3, [r7, #26]
 80056f2:	e04b      	b.n	800578c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056f4:	7efb      	ldrb	r3, [r7, #27]
 80056f6:	2b08      	cmp	r3, #8
 80056f8:	d827      	bhi.n	800574a <UART_SetConfig+0x4b6>
 80056fa:	a201      	add	r2, pc, #4	; (adr r2, 8005700 <UART_SetConfig+0x46c>)
 80056fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005700:	08005725 	.word	0x08005725
 8005704:	0800572d 	.word	0x0800572d
 8005708:	08005735 	.word	0x08005735
 800570c:	0800574b 	.word	0x0800574b
 8005710:	0800573b 	.word	0x0800573b
 8005714:	0800574b 	.word	0x0800574b
 8005718:	0800574b 	.word	0x0800574b
 800571c:	0800574b 	.word	0x0800574b
 8005720:	08005743 	.word	0x08005743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005724:	f7fe fef6 	bl	8004514 <HAL_RCC_GetPCLK1Freq>
 8005728:	6178      	str	r0, [r7, #20]
        break;
 800572a:	e013      	b.n	8005754 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800572c:	f7fe ff08 	bl	8004540 <HAL_RCC_GetPCLK2Freq>
 8005730:	6178      	str	r0, [r7, #20]
        break;
 8005732:	e00f      	b.n	8005754 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005734:	4b1b      	ldr	r3, [pc, #108]	; (80057a4 <UART_SetConfig+0x510>)
 8005736:	617b      	str	r3, [r7, #20]
        break;
 8005738:	e00c      	b.n	8005754 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800573a:	f7fe fe55 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 800573e:	6178      	str	r0, [r7, #20]
        break;
 8005740:	e008      	b.n	8005754 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005746:	617b      	str	r3, [r7, #20]
        break;
 8005748:	e004      	b.n	8005754 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800574a:	2300      	movs	r3, #0
 800574c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	76bb      	strb	r3, [r7, #26]
        break;
 8005752:	bf00      	nop
    }

    if (pclk != 0U)
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d018      	beq.n	800578c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	085a      	lsrs	r2, r3, #1
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	441a      	add	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	fbb2 f3f3 	udiv	r3, r2, r3
 800576c:	b29b      	uxth	r3, r3
 800576e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	2b0f      	cmp	r3, #15
 8005774:	d908      	bls.n	8005788 <UART_SetConfig+0x4f4>
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800577c:	d204      	bcs.n	8005788 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	60da      	str	r2, [r3, #12]
 8005786:	e001      	b.n	800578c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005798:	7ebb      	ldrb	r3, [r7, #26]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3720      	adds	r7, #32
 800579e:	46bd      	mov	sp, r7
 80057a0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80057a4:	00f42400 	.word	0x00f42400

080057a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00a      	beq.n	80057d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	f003 0308 	and.w	r3, r3, #8
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00a      	beq.n	8005838 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	f003 0310 	and.w	r3, r3, #16
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00a      	beq.n	800585a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005884:	2b00      	cmp	r3, #0
 8005886:	d01a      	beq.n	80058be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058a6:	d10a      	bne.n	80058be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	605a      	str	r2, [r3, #4]
  }
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80058fa:	f7fb fef3 	bl	80016e4 <HAL_GetTick>
 80058fe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0308 	and.w	r3, r3, #8
 800590a:	2b08      	cmp	r3, #8
 800590c:	d10e      	bne.n	800592c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800590e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 f82a 	bl	8005976 <UART_WaitOnFlagUntilTimeout>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e020      	b.n	800596e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0304 	and.w	r3, r3, #4
 8005936:	2b04      	cmp	r3, #4
 8005938:	d10e      	bne.n	8005958 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800593a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f814 	bl	8005976 <UART_WaitOnFlagUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e00a      	b.n	800596e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2220      	movs	r2, #32
 800595c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2220      	movs	r2, #32
 8005962:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b084      	sub	sp, #16
 800597a:	af00      	add	r7, sp, #0
 800597c:	60f8      	str	r0, [r7, #12]
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	603b      	str	r3, [r7, #0]
 8005982:	4613      	mov	r3, r2
 8005984:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005986:	e05d      	b.n	8005a44 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598e:	d059      	beq.n	8005a44 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005990:	f7fb fea8 	bl	80016e4 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	429a      	cmp	r2, r3
 800599e:	d302      	bcc.n	80059a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d11b      	bne.n	80059de <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059b4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0201 	bic.w	r2, r2, #1
 80059c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2220      	movs	r2, #32
 80059ca:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2220      	movs	r2, #32
 80059d0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e042      	b.n	8005a64 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d02b      	beq.n	8005a44 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059fa:	d123      	bne.n	8005a44 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a04:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a14:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 0201 	bic.w	r2, r2, #1
 8005a24:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2220      	movs	r2, #32
 8005a36:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e00f      	b.n	8005a64 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	69da      	ldr	r2, [r3, #28]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	bf0c      	ite	eq
 8005a54:	2301      	moveq	r3, #1
 8005a56:	2300      	movne	r3, #0
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	79fb      	ldrb	r3, [r7, #7]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d092      	beq.n	8005988 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005a70:	4904      	ldr	r1, [pc, #16]	; (8005a84 <MX_FATFS_Init+0x18>)
 8005a72:	4805      	ldr	r0, [pc, #20]	; (8005a88 <MX_FATFS_Init+0x1c>)
 8005a74:	f000 f8b0 	bl	8005bd8 <FATFS_LinkDriver>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	4b03      	ldr	r3, [pc, #12]	; (8005a8c <MX_FATFS_Init+0x20>)
 8005a7e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005a80:	bf00      	nop
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	20000b88 	.word	0x20000b88
 8005a88:	20000018 	.word	0x20000018
 8005a8c:	20000b8c 	.word	0x20000b8c

08005a90 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	4603      	mov	r3, r0
 8005a98:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8005a9a:	4b06      	ldr	r3, [pc, #24]	; (8005ab4 <USER_initialize+0x24>)
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005aa0:	4b04      	ldr	r3, [pc, #16]	; (8005ab4 <USER_initialize+0x24>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	20000015 	.word	0x20000015

08005ab8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	4603      	mov	r3, r0
 8005ac0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8005ac2:	4b06      	ldr	r3, [pc, #24]	; (8005adc <USER_status+0x24>)
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005ac8:	4b04      	ldr	r3, [pc, #16]	; (8005adc <USER_status+0x24>)
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	20000015 	.word	0x20000015

08005ae0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60b9      	str	r1, [r7, #8]
 8005ae8:	607a      	str	r2, [r7, #4]
 8005aea:	603b      	str	r3, [r7, #0]
 8005aec:	4603      	mov	r3, r0
 8005aee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8005af0:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b085      	sub	sp, #20
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	603b      	str	r3, [r7, #0]
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8005b0e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	4603      	mov	r3, r0
 8005b24:	603a      	str	r2, [r7, #0]
 8005b26:	71fb      	strb	r3, [r7, #7]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	73fb      	strb	r3, [r7, #15]
    return res;
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
	...

08005b40 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005b52:	2300      	movs	r3, #0
 8005b54:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005b56:	4b1f      	ldr	r3, [pc, #124]	; (8005bd4 <FATFS_LinkDriverEx+0x94>)
 8005b58:	7a5b      	ldrb	r3, [r3, #9]
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d131      	bne.n	8005bc4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005b60:	4b1c      	ldr	r3, [pc, #112]	; (8005bd4 <FATFS_LinkDriverEx+0x94>)
 8005b62:	7a5b      	ldrb	r3, [r3, #9]
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	461a      	mov	r2, r3
 8005b68:	4b1a      	ldr	r3, [pc, #104]	; (8005bd4 <FATFS_LinkDriverEx+0x94>)
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005b6e:	4b19      	ldr	r3, [pc, #100]	; (8005bd4 <FATFS_LinkDriverEx+0x94>)
 8005b70:	7a5b      	ldrb	r3, [r3, #9]
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	4a17      	ldr	r2, [pc, #92]	; (8005bd4 <FATFS_LinkDriverEx+0x94>)
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005b7e:	4b15      	ldr	r3, [pc, #84]	; (8005bd4 <FATFS_LinkDriverEx+0x94>)
 8005b80:	7a5b      	ldrb	r3, [r3, #9]
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	461a      	mov	r2, r3
 8005b86:	4b13      	ldr	r3, [pc, #76]	; (8005bd4 <FATFS_LinkDriverEx+0x94>)
 8005b88:	4413      	add	r3, r2
 8005b8a:	79fa      	ldrb	r2, [r7, #7]
 8005b8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005b8e:	4b11      	ldr	r3, [pc, #68]	; (8005bd4 <FATFS_LinkDriverEx+0x94>)
 8005b90:	7a5b      	ldrb	r3, [r3, #9]
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	1c5a      	adds	r2, r3, #1
 8005b96:	b2d1      	uxtb	r1, r2
 8005b98:	4a0e      	ldr	r2, [pc, #56]	; (8005bd4 <FATFS_LinkDriverEx+0x94>)
 8005b9a:	7251      	strb	r1, [r2, #9]
 8005b9c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005b9e:	7dbb      	ldrb	r3, [r7, #22]
 8005ba0:	3330      	adds	r3, #48	; 0x30
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	3301      	adds	r3, #1
 8005bac:	223a      	movs	r2, #58	; 0x3a
 8005bae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	3302      	adds	r3, #2
 8005bb4:	222f      	movs	r2, #47	; 0x2f
 8005bb6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	3303      	adds	r3, #3
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	371c      	adds	r7, #28
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	200004bc 	.word	0x200004bc

08005bd8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005be2:	2200      	movs	r2, #0
 8005be4:	6839      	ldr	r1, [r7, #0]
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7ff ffaa 	bl	8005b40 <FATFS_LinkDriverEx>
 8005bec:	4603      	mov	r3, r0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
	...

08005bf8 <__errno>:
 8005bf8:	4b01      	ldr	r3, [pc, #4]	; (8005c00 <__errno+0x8>)
 8005bfa:	6818      	ldr	r0, [r3, #0]
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	2000002c 	.word	0x2000002c

08005c04 <__libc_init_array>:
 8005c04:	b570      	push	{r4, r5, r6, lr}
 8005c06:	4e0d      	ldr	r6, [pc, #52]	; (8005c3c <__libc_init_array+0x38>)
 8005c08:	4c0d      	ldr	r4, [pc, #52]	; (8005c40 <__libc_init_array+0x3c>)
 8005c0a:	1ba4      	subs	r4, r4, r6
 8005c0c:	10a4      	asrs	r4, r4, #2
 8005c0e:	2500      	movs	r5, #0
 8005c10:	42a5      	cmp	r5, r4
 8005c12:	d109      	bne.n	8005c28 <__libc_init_array+0x24>
 8005c14:	4e0b      	ldr	r6, [pc, #44]	; (8005c44 <__libc_init_array+0x40>)
 8005c16:	4c0c      	ldr	r4, [pc, #48]	; (8005c48 <__libc_init_array+0x44>)
 8005c18:	f000 fc26 	bl	8006468 <_init>
 8005c1c:	1ba4      	subs	r4, r4, r6
 8005c1e:	10a4      	asrs	r4, r4, #2
 8005c20:	2500      	movs	r5, #0
 8005c22:	42a5      	cmp	r5, r4
 8005c24:	d105      	bne.n	8005c32 <__libc_init_array+0x2e>
 8005c26:	bd70      	pop	{r4, r5, r6, pc}
 8005c28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c2c:	4798      	blx	r3
 8005c2e:	3501      	adds	r5, #1
 8005c30:	e7ee      	b.n	8005c10 <__libc_init_array+0xc>
 8005c32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c36:	4798      	blx	r3
 8005c38:	3501      	adds	r5, #1
 8005c3a:	e7f2      	b.n	8005c22 <__libc_init_array+0x1e>
 8005c3c:	08007290 	.word	0x08007290
 8005c40:	08007290 	.word	0x08007290
 8005c44:	08007290 	.word	0x08007290
 8005c48:	08007294 	.word	0x08007294

08005c4c <memset>:
 8005c4c:	4402      	add	r2, r0
 8005c4e:	4603      	mov	r3, r0
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d100      	bne.n	8005c56 <memset+0xa>
 8005c54:	4770      	bx	lr
 8005c56:	f803 1b01 	strb.w	r1, [r3], #1
 8005c5a:	e7f9      	b.n	8005c50 <memset+0x4>

08005c5c <siprintf>:
 8005c5c:	b40e      	push	{r1, r2, r3}
 8005c5e:	b500      	push	{lr}
 8005c60:	b09c      	sub	sp, #112	; 0x70
 8005c62:	ab1d      	add	r3, sp, #116	; 0x74
 8005c64:	9002      	str	r0, [sp, #8]
 8005c66:	9006      	str	r0, [sp, #24]
 8005c68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c6c:	4809      	ldr	r0, [pc, #36]	; (8005c94 <siprintf+0x38>)
 8005c6e:	9107      	str	r1, [sp, #28]
 8005c70:	9104      	str	r1, [sp, #16]
 8005c72:	4909      	ldr	r1, [pc, #36]	; (8005c98 <siprintf+0x3c>)
 8005c74:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c78:	9105      	str	r1, [sp, #20]
 8005c7a:	6800      	ldr	r0, [r0, #0]
 8005c7c:	9301      	str	r3, [sp, #4]
 8005c7e:	a902      	add	r1, sp, #8
 8005c80:	f000 f866 	bl	8005d50 <_svfiprintf_r>
 8005c84:	9b02      	ldr	r3, [sp, #8]
 8005c86:	2200      	movs	r2, #0
 8005c88:	701a      	strb	r2, [r3, #0]
 8005c8a:	b01c      	add	sp, #112	; 0x70
 8005c8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c90:	b003      	add	sp, #12
 8005c92:	4770      	bx	lr
 8005c94:	2000002c 	.word	0x2000002c
 8005c98:	ffff0208 	.word	0xffff0208

08005c9c <__ssputs_r>:
 8005c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ca0:	688e      	ldr	r6, [r1, #8]
 8005ca2:	429e      	cmp	r6, r3
 8005ca4:	4682      	mov	sl, r0
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	4690      	mov	r8, r2
 8005caa:	4699      	mov	r9, r3
 8005cac:	d837      	bhi.n	8005d1e <__ssputs_r+0x82>
 8005cae:	898a      	ldrh	r2, [r1, #12]
 8005cb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005cb4:	d031      	beq.n	8005d1a <__ssputs_r+0x7e>
 8005cb6:	6825      	ldr	r5, [r4, #0]
 8005cb8:	6909      	ldr	r1, [r1, #16]
 8005cba:	1a6f      	subs	r7, r5, r1
 8005cbc:	6965      	ldr	r5, [r4, #20]
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cc4:	fb95 f5f3 	sdiv	r5, r5, r3
 8005cc8:	f109 0301 	add.w	r3, r9, #1
 8005ccc:	443b      	add	r3, r7
 8005cce:	429d      	cmp	r5, r3
 8005cd0:	bf38      	it	cc
 8005cd2:	461d      	movcc	r5, r3
 8005cd4:	0553      	lsls	r3, r2, #21
 8005cd6:	d530      	bpl.n	8005d3a <__ssputs_r+0x9e>
 8005cd8:	4629      	mov	r1, r5
 8005cda:	f000 fb2b 	bl	8006334 <_malloc_r>
 8005cde:	4606      	mov	r6, r0
 8005ce0:	b950      	cbnz	r0, 8005cf8 <__ssputs_r+0x5c>
 8005ce2:	230c      	movs	r3, #12
 8005ce4:	f8ca 3000 	str.w	r3, [sl]
 8005ce8:	89a3      	ldrh	r3, [r4, #12]
 8005cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cee:	81a3      	strh	r3, [r4, #12]
 8005cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf8:	463a      	mov	r2, r7
 8005cfa:	6921      	ldr	r1, [r4, #16]
 8005cfc:	f000 faa8 	bl	8006250 <memcpy>
 8005d00:	89a3      	ldrh	r3, [r4, #12]
 8005d02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d0a:	81a3      	strh	r3, [r4, #12]
 8005d0c:	6126      	str	r6, [r4, #16]
 8005d0e:	6165      	str	r5, [r4, #20]
 8005d10:	443e      	add	r6, r7
 8005d12:	1bed      	subs	r5, r5, r7
 8005d14:	6026      	str	r6, [r4, #0]
 8005d16:	60a5      	str	r5, [r4, #8]
 8005d18:	464e      	mov	r6, r9
 8005d1a:	454e      	cmp	r6, r9
 8005d1c:	d900      	bls.n	8005d20 <__ssputs_r+0x84>
 8005d1e:	464e      	mov	r6, r9
 8005d20:	4632      	mov	r2, r6
 8005d22:	4641      	mov	r1, r8
 8005d24:	6820      	ldr	r0, [r4, #0]
 8005d26:	f000 fa9e 	bl	8006266 <memmove>
 8005d2a:	68a3      	ldr	r3, [r4, #8]
 8005d2c:	1b9b      	subs	r3, r3, r6
 8005d2e:	60a3      	str	r3, [r4, #8]
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	441e      	add	r6, r3
 8005d34:	6026      	str	r6, [r4, #0]
 8005d36:	2000      	movs	r0, #0
 8005d38:	e7dc      	b.n	8005cf4 <__ssputs_r+0x58>
 8005d3a:	462a      	mov	r2, r5
 8005d3c:	f000 fb54 	bl	80063e8 <_realloc_r>
 8005d40:	4606      	mov	r6, r0
 8005d42:	2800      	cmp	r0, #0
 8005d44:	d1e2      	bne.n	8005d0c <__ssputs_r+0x70>
 8005d46:	6921      	ldr	r1, [r4, #16]
 8005d48:	4650      	mov	r0, sl
 8005d4a:	f000 faa5 	bl	8006298 <_free_r>
 8005d4e:	e7c8      	b.n	8005ce2 <__ssputs_r+0x46>

08005d50 <_svfiprintf_r>:
 8005d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d54:	461d      	mov	r5, r3
 8005d56:	898b      	ldrh	r3, [r1, #12]
 8005d58:	061f      	lsls	r7, r3, #24
 8005d5a:	b09d      	sub	sp, #116	; 0x74
 8005d5c:	4680      	mov	r8, r0
 8005d5e:	460c      	mov	r4, r1
 8005d60:	4616      	mov	r6, r2
 8005d62:	d50f      	bpl.n	8005d84 <_svfiprintf_r+0x34>
 8005d64:	690b      	ldr	r3, [r1, #16]
 8005d66:	b96b      	cbnz	r3, 8005d84 <_svfiprintf_r+0x34>
 8005d68:	2140      	movs	r1, #64	; 0x40
 8005d6a:	f000 fae3 	bl	8006334 <_malloc_r>
 8005d6e:	6020      	str	r0, [r4, #0]
 8005d70:	6120      	str	r0, [r4, #16]
 8005d72:	b928      	cbnz	r0, 8005d80 <_svfiprintf_r+0x30>
 8005d74:	230c      	movs	r3, #12
 8005d76:	f8c8 3000 	str.w	r3, [r8]
 8005d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d7e:	e0c8      	b.n	8005f12 <_svfiprintf_r+0x1c2>
 8005d80:	2340      	movs	r3, #64	; 0x40
 8005d82:	6163      	str	r3, [r4, #20]
 8005d84:	2300      	movs	r3, #0
 8005d86:	9309      	str	r3, [sp, #36]	; 0x24
 8005d88:	2320      	movs	r3, #32
 8005d8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d8e:	2330      	movs	r3, #48	; 0x30
 8005d90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d94:	9503      	str	r5, [sp, #12]
 8005d96:	f04f 0b01 	mov.w	fp, #1
 8005d9a:	4637      	mov	r7, r6
 8005d9c:	463d      	mov	r5, r7
 8005d9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005da2:	b10b      	cbz	r3, 8005da8 <_svfiprintf_r+0x58>
 8005da4:	2b25      	cmp	r3, #37	; 0x25
 8005da6:	d13e      	bne.n	8005e26 <_svfiprintf_r+0xd6>
 8005da8:	ebb7 0a06 	subs.w	sl, r7, r6
 8005dac:	d00b      	beq.n	8005dc6 <_svfiprintf_r+0x76>
 8005dae:	4653      	mov	r3, sl
 8005db0:	4632      	mov	r2, r6
 8005db2:	4621      	mov	r1, r4
 8005db4:	4640      	mov	r0, r8
 8005db6:	f7ff ff71 	bl	8005c9c <__ssputs_r>
 8005dba:	3001      	adds	r0, #1
 8005dbc:	f000 80a4 	beq.w	8005f08 <_svfiprintf_r+0x1b8>
 8005dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dc2:	4453      	add	r3, sl
 8005dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8005dc6:	783b      	ldrb	r3, [r7, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 809d 	beq.w	8005f08 <_svfiprintf_r+0x1b8>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dd8:	9304      	str	r3, [sp, #16]
 8005dda:	9307      	str	r3, [sp, #28]
 8005ddc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005de0:	931a      	str	r3, [sp, #104]	; 0x68
 8005de2:	462f      	mov	r7, r5
 8005de4:	2205      	movs	r2, #5
 8005de6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005dea:	4850      	ldr	r0, [pc, #320]	; (8005f2c <_svfiprintf_r+0x1dc>)
 8005dec:	f7fa f9f8 	bl	80001e0 <memchr>
 8005df0:	9b04      	ldr	r3, [sp, #16]
 8005df2:	b9d0      	cbnz	r0, 8005e2a <_svfiprintf_r+0xda>
 8005df4:	06d9      	lsls	r1, r3, #27
 8005df6:	bf44      	itt	mi
 8005df8:	2220      	movmi	r2, #32
 8005dfa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005dfe:	071a      	lsls	r2, r3, #28
 8005e00:	bf44      	itt	mi
 8005e02:	222b      	movmi	r2, #43	; 0x2b
 8005e04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e08:	782a      	ldrb	r2, [r5, #0]
 8005e0a:	2a2a      	cmp	r2, #42	; 0x2a
 8005e0c:	d015      	beq.n	8005e3a <_svfiprintf_r+0xea>
 8005e0e:	9a07      	ldr	r2, [sp, #28]
 8005e10:	462f      	mov	r7, r5
 8005e12:	2000      	movs	r0, #0
 8005e14:	250a      	movs	r5, #10
 8005e16:	4639      	mov	r1, r7
 8005e18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e1c:	3b30      	subs	r3, #48	; 0x30
 8005e1e:	2b09      	cmp	r3, #9
 8005e20:	d94d      	bls.n	8005ebe <_svfiprintf_r+0x16e>
 8005e22:	b1b8      	cbz	r0, 8005e54 <_svfiprintf_r+0x104>
 8005e24:	e00f      	b.n	8005e46 <_svfiprintf_r+0xf6>
 8005e26:	462f      	mov	r7, r5
 8005e28:	e7b8      	b.n	8005d9c <_svfiprintf_r+0x4c>
 8005e2a:	4a40      	ldr	r2, [pc, #256]	; (8005f2c <_svfiprintf_r+0x1dc>)
 8005e2c:	1a80      	subs	r0, r0, r2
 8005e2e:	fa0b f000 	lsl.w	r0, fp, r0
 8005e32:	4318      	orrs	r0, r3
 8005e34:	9004      	str	r0, [sp, #16]
 8005e36:	463d      	mov	r5, r7
 8005e38:	e7d3      	b.n	8005de2 <_svfiprintf_r+0x92>
 8005e3a:	9a03      	ldr	r2, [sp, #12]
 8005e3c:	1d11      	adds	r1, r2, #4
 8005e3e:	6812      	ldr	r2, [r2, #0]
 8005e40:	9103      	str	r1, [sp, #12]
 8005e42:	2a00      	cmp	r2, #0
 8005e44:	db01      	blt.n	8005e4a <_svfiprintf_r+0xfa>
 8005e46:	9207      	str	r2, [sp, #28]
 8005e48:	e004      	b.n	8005e54 <_svfiprintf_r+0x104>
 8005e4a:	4252      	negs	r2, r2
 8005e4c:	f043 0302 	orr.w	r3, r3, #2
 8005e50:	9207      	str	r2, [sp, #28]
 8005e52:	9304      	str	r3, [sp, #16]
 8005e54:	783b      	ldrb	r3, [r7, #0]
 8005e56:	2b2e      	cmp	r3, #46	; 0x2e
 8005e58:	d10c      	bne.n	8005e74 <_svfiprintf_r+0x124>
 8005e5a:	787b      	ldrb	r3, [r7, #1]
 8005e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e5e:	d133      	bne.n	8005ec8 <_svfiprintf_r+0x178>
 8005e60:	9b03      	ldr	r3, [sp, #12]
 8005e62:	1d1a      	adds	r2, r3, #4
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	9203      	str	r2, [sp, #12]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	bfb8      	it	lt
 8005e6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e70:	3702      	adds	r7, #2
 8005e72:	9305      	str	r3, [sp, #20]
 8005e74:	4d2e      	ldr	r5, [pc, #184]	; (8005f30 <_svfiprintf_r+0x1e0>)
 8005e76:	7839      	ldrb	r1, [r7, #0]
 8005e78:	2203      	movs	r2, #3
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	f7fa f9b0 	bl	80001e0 <memchr>
 8005e80:	b138      	cbz	r0, 8005e92 <_svfiprintf_r+0x142>
 8005e82:	2340      	movs	r3, #64	; 0x40
 8005e84:	1b40      	subs	r0, r0, r5
 8005e86:	fa03 f000 	lsl.w	r0, r3, r0
 8005e8a:	9b04      	ldr	r3, [sp, #16]
 8005e8c:	4303      	orrs	r3, r0
 8005e8e:	3701      	adds	r7, #1
 8005e90:	9304      	str	r3, [sp, #16]
 8005e92:	7839      	ldrb	r1, [r7, #0]
 8005e94:	4827      	ldr	r0, [pc, #156]	; (8005f34 <_svfiprintf_r+0x1e4>)
 8005e96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e9a:	2206      	movs	r2, #6
 8005e9c:	1c7e      	adds	r6, r7, #1
 8005e9e:	f7fa f99f 	bl	80001e0 <memchr>
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	d038      	beq.n	8005f18 <_svfiprintf_r+0x1c8>
 8005ea6:	4b24      	ldr	r3, [pc, #144]	; (8005f38 <_svfiprintf_r+0x1e8>)
 8005ea8:	bb13      	cbnz	r3, 8005ef0 <_svfiprintf_r+0x1a0>
 8005eaa:	9b03      	ldr	r3, [sp, #12]
 8005eac:	3307      	adds	r3, #7
 8005eae:	f023 0307 	bic.w	r3, r3, #7
 8005eb2:	3308      	adds	r3, #8
 8005eb4:	9303      	str	r3, [sp, #12]
 8005eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eb8:	444b      	add	r3, r9
 8005eba:	9309      	str	r3, [sp, #36]	; 0x24
 8005ebc:	e76d      	b.n	8005d9a <_svfiprintf_r+0x4a>
 8005ebe:	fb05 3202 	mla	r2, r5, r2, r3
 8005ec2:	2001      	movs	r0, #1
 8005ec4:	460f      	mov	r7, r1
 8005ec6:	e7a6      	b.n	8005e16 <_svfiprintf_r+0xc6>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	3701      	adds	r7, #1
 8005ecc:	9305      	str	r3, [sp, #20]
 8005ece:	4619      	mov	r1, r3
 8005ed0:	250a      	movs	r5, #10
 8005ed2:	4638      	mov	r0, r7
 8005ed4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ed8:	3a30      	subs	r2, #48	; 0x30
 8005eda:	2a09      	cmp	r2, #9
 8005edc:	d903      	bls.n	8005ee6 <_svfiprintf_r+0x196>
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d0c8      	beq.n	8005e74 <_svfiprintf_r+0x124>
 8005ee2:	9105      	str	r1, [sp, #20]
 8005ee4:	e7c6      	b.n	8005e74 <_svfiprintf_r+0x124>
 8005ee6:	fb05 2101 	mla	r1, r5, r1, r2
 8005eea:	2301      	movs	r3, #1
 8005eec:	4607      	mov	r7, r0
 8005eee:	e7f0      	b.n	8005ed2 <_svfiprintf_r+0x182>
 8005ef0:	ab03      	add	r3, sp, #12
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	4622      	mov	r2, r4
 8005ef6:	4b11      	ldr	r3, [pc, #68]	; (8005f3c <_svfiprintf_r+0x1ec>)
 8005ef8:	a904      	add	r1, sp, #16
 8005efa:	4640      	mov	r0, r8
 8005efc:	f3af 8000 	nop.w
 8005f00:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005f04:	4681      	mov	r9, r0
 8005f06:	d1d6      	bne.n	8005eb6 <_svfiprintf_r+0x166>
 8005f08:	89a3      	ldrh	r3, [r4, #12]
 8005f0a:	065b      	lsls	r3, r3, #25
 8005f0c:	f53f af35 	bmi.w	8005d7a <_svfiprintf_r+0x2a>
 8005f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f12:	b01d      	add	sp, #116	; 0x74
 8005f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f18:	ab03      	add	r3, sp, #12
 8005f1a:	9300      	str	r3, [sp, #0]
 8005f1c:	4622      	mov	r2, r4
 8005f1e:	4b07      	ldr	r3, [pc, #28]	; (8005f3c <_svfiprintf_r+0x1ec>)
 8005f20:	a904      	add	r1, sp, #16
 8005f22:	4640      	mov	r0, r8
 8005f24:	f000 f882 	bl	800602c <_printf_i>
 8005f28:	e7ea      	b.n	8005f00 <_svfiprintf_r+0x1b0>
 8005f2a:	bf00      	nop
 8005f2c:	08007254 	.word	0x08007254
 8005f30:	0800725a 	.word	0x0800725a
 8005f34:	0800725e 	.word	0x0800725e
 8005f38:	00000000 	.word	0x00000000
 8005f3c:	08005c9d 	.word	0x08005c9d

08005f40 <_printf_common>:
 8005f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f44:	4691      	mov	r9, r2
 8005f46:	461f      	mov	r7, r3
 8005f48:	688a      	ldr	r2, [r1, #8]
 8005f4a:	690b      	ldr	r3, [r1, #16]
 8005f4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f50:	4293      	cmp	r3, r2
 8005f52:	bfb8      	it	lt
 8005f54:	4613      	movlt	r3, r2
 8005f56:	f8c9 3000 	str.w	r3, [r9]
 8005f5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f5e:	4606      	mov	r6, r0
 8005f60:	460c      	mov	r4, r1
 8005f62:	b112      	cbz	r2, 8005f6a <_printf_common+0x2a>
 8005f64:	3301      	adds	r3, #1
 8005f66:	f8c9 3000 	str.w	r3, [r9]
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	0699      	lsls	r1, r3, #26
 8005f6e:	bf42      	ittt	mi
 8005f70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005f74:	3302      	addmi	r3, #2
 8005f76:	f8c9 3000 	strmi.w	r3, [r9]
 8005f7a:	6825      	ldr	r5, [r4, #0]
 8005f7c:	f015 0506 	ands.w	r5, r5, #6
 8005f80:	d107      	bne.n	8005f92 <_printf_common+0x52>
 8005f82:	f104 0a19 	add.w	sl, r4, #25
 8005f86:	68e3      	ldr	r3, [r4, #12]
 8005f88:	f8d9 2000 	ldr.w	r2, [r9]
 8005f8c:	1a9b      	subs	r3, r3, r2
 8005f8e:	42ab      	cmp	r3, r5
 8005f90:	dc28      	bgt.n	8005fe4 <_printf_common+0xa4>
 8005f92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005f96:	6822      	ldr	r2, [r4, #0]
 8005f98:	3300      	adds	r3, #0
 8005f9a:	bf18      	it	ne
 8005f9c:	2301      	movne	r3, #1
 8005f9e:	0692      	lsls	r2, r2, #26
 8005fa0:	d42d      	bmi.n	8005ffe <_printf_common+0xbe>
 8005fa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fa6:	4639      	mov	r1, r7
 8005fa8:	4630      	mov	r0, r6
 8005faa:	47c0      	blx	r8
 8005fac:	3001      	adds	r0, #1
 8005fae:	d020      	beq.n	8005ff2 <_printf_common+0xb2>
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	68e5      	ldr	r5, [r4, #12]
 8005fb4:	f8d9 2000 	ldr.w	r2, [r9]
 8005fb8:	f003 0306 	and.w	r3, r3, #6
 8005fbc:	2b04      	cmp	r3, #4
 8005fbe:	bf08      	it	eq
 8005fc0:	1aad      	subeq	r5, r5, r2
 8005fc2:	68a3      	ldr	r3, [r4, #8]
 8005fc4:	6922      	ldr	r2, [r4, #16]
 8005fc6:	bf0c      	ite	eq
 8005fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fcc:	2500      	movne	r5, #0
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	bfc4      	itt	gt
 8005fd2:	1a9b      	subgt	r3, r3, r2
 8005fd4:	18ed      	addgt	r5, r5, r3
 8005fd6:	f04f 0900 	mov.w	r9, #0
 8005fda:	341a      	adds	r4, #26
 8005fdc:	454d      	cmp	r5, r9
 8005fde:	d11a      	bne.n	8006016 <_printf_common+0xd6>
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	e008      	b.n	8005ff6 <_printf_common+0xb6>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	4652      	mov	r2, sl
 8005fe8:	4639      	mov	r1, r7
 8005fea:	4630      	mov	r0, r6
 8005fec:	47c0      	blx	r8
 8005fee:	3001      	adds	r0, #1
 8005ff0:	d103      	bne.n	8005ffa <_printf_common+0xba>
 8005ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ffa:	3501      	adds	r5, #1
 8005ffc:	e7c3      	b.n	8005f86 <_printf_common+0x46>
 8005ffe:	18e1      	adds	r1, r4, r3
 8006000:	1c5a      	adds	r2, r3, #1
 8006002:	2030      	movs	r0, #48	; 0x30
 8006004:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006008:	4422      	add	r2, r4
 800600a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800600e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006012:	3302      	adds	r3, #2
 8006014:	e7c5      	b.n	8005fa2 <_printf_common+0x62>
 8006016:	2301      	movs	r3, #1
 8006018:	4622      	mov	r2, r4
 800601a:	4639      	mov	r1, r7
 800601c:	4630      	mov	r0, r6
 800601e:	47c0      	blx	r8
 8006020:	3001      	adds	r0, #1
 8006022:	d0e6      	beq.n	8005ff2 <_printf_common+0xb2>
 8006024:	f109 0901 	add.w	r9, r9, #1
 8006028:	e7d8      	b.n	8005fdc <_printf_common+0x9c>
	...

0800602c <_printf_i>:
 800602c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006030:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006034:	460c      	mov	r4, r1
 8006036:	7e09      	ldrb	r1, [r1, #24]
 8006038:	b085      	sub	sp, #20
 800603a:	296e      	cmp	r1, #110	; 0x6e
 800603c:	4617      	mov	r7, r2
 800603e:	4606      	mov	r6, r0
 8006040:	4698      	mov	r8, r3
 8006042:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006044:	f000 80b3 	beq.w	80061ae <_printf_i+0x182>
 8006048:	d822      	bhi.n	8006090 <_printf_i+0x64>
 800604a:	2963      	cmp	r1, #99	; 0x63
 800604c:	d036      	beq.n	80060bc <_printf_i+0x90>
 800604e:	d80a      	bhi.n	8006066 <_printf_i+0x3a>
 8006050:	2900      	cmp	r1, #0
 8006052:	f000 80b9 	beq.w	80061c8 <_printf_i+0x19c>
 8006056:	2958      	cmp	r1, #88	; 0x58
 8006058:	f000 8083 	beq.w	8006162 <_printf_i+0x136>
 800605c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006060:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006064:	e032      	b.n	80060cc <_printf_i+0xa0>
 8006066:	2964      	cmp	r1, #100	; 0x64
 8006068:	d001      	beq.n	800606e <_printf_i+0x42>
 800606a:	2969      	cmp	r1, #105	; 0x69
 800606c:	d1f6      	bne.n	800605c <_printf_i+0x30>
 800606e:	6820      	ldr	r0, [r4, #0]
 8006070:	6813      	ldr	r3, [r2, #0]
 8006072:	0605      	lsls	r5, r0, #24
 8006074:	f103 0104 	add.w	r1, r3, #4
 8006078:	d52a      	bpl.n	80060d0 <_printf_i+0xa4>
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6011      	str	r1, [r2, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	da03      	bge.n	800608a <_printf_i+0x5e>
 8006082:	222d      	movs	r2, #45	; 0x2d
 8006084:	425b      	negs	r3, r3
 8006086:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800608a:	486f      	ldr	r0, [pc, #444]	; (8006248 <_printf_i+0x21c>)
 800608c:	220a      	movs	r2, #10
 800608e:	e039      	b.n	8006104 <_printf_i+0xd8>
 8006090:	2973      	cmp	r1, #115	; 0x73
 8006092:	f000 809d 	beq.w	80061d0 <_printf_i+0x1a4>
 8006096:	d808      	bhi.n	80060aa <_printf_i+0x7e>
 8006098:	296f      	cmp	r1, #111	; 0x6f
 800609a:	d020      	beq.n	80060de <_printf_i+0xb2>
 800609c:	2970      	cmp	r1, #112	; 0x70
 800609e:	d1dd      	bne.n	800605c <_printf_i+0x30>
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	f043 0320 	orr.w	r3, r3, #32
 80060a6:	6023      	str	r3, [r4, #0]
 80060a8:	e003      	b.n	80060b2 <_printf_i+0x86>
 80060aa:	2975      	cmp	r1, #117	; 0x75
 80060ac:	d017      	beq.n	80060de <_printf_i+0xb2>
 80060ae:	2978      	cmp	r1, #120	; 0x78
 80060b0:	d1d4      	bne.n	800605c <_printf_i+0x30>
 80060b2:	2378      	movs	r3, #120	; 0x78
 80060b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060b8:	4864      	ldr	r0, [pc, #400]	; (800624c <_printf_i+0x220>)
 80060ba:	e055      	b.n	8006168 <_printf_i+0x13c>
 80060bc:	6813      	ldr	r3, [r2, #0]
 80060be:	1d19      	adds	r1, r3, #4
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6011      	str	r1, [r2, #0]
 80060c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060cc:	2301      	movs	r3, #1
 80060ce:	e08c      	b.n	80061ea <_printf_i+0x1be>
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6011      	str	r1, [r2, #0]
 80060d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060d8:	bf18      	it	ne
 80060da:	b21b      	sxthne	r3, r3
 80060dc:	e7cf      	b.n	800607e <_printf_i+0x52>
 80060de:	6813      	ldr	r3, [r2, #0]
 80060e0:	6825      	ldr	r5, [r4, #0]
 80060e2:	1d18      	adds	r0, r3, #4
 80060e4:	6010      	str	r0, [r2, #0]
 80060e6:	0628      	lsls	r0, r5, #24
 80060e8:	d501      	bpl.n	80060ee <_printf_i+0xc2>
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	e002      	b.n	80060f4 <_printf_i+0xc8>
 80060ee:	0668      	lsls	r0, r5, #25
 80060f0:	d5fb      	bpl.n	80060ea <_printf_i+0xbe>
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	4854      	ldr	r0, [pc, #336]	; (8006248 <_printf_i+0x21c>)
 80060f6:	296f      	cmp	r1, #111	; 0x6f
 80060f8:	bf14      	ite	ne
 80060fa:	220a      	movne	r2, #10
 80060fc:	2208      	moveq	r2, #8
 80060fe:	2100      	movs	r1, #0
 8006100:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006104:	6865      	ldr	r5, [r4, #4]
 8006106:	60a5      	str	r5, [r4, #8]
 8006108:	2d00      	cmp	r5, #0
 800610a:	f2c0 8095 	blt.w	8006238 <_printf_i+0x20c>
 800610e:	6821      	ldr	r1, [r4, #0]
 8006110:	f021 0104 	bic.w	r1, r1, #4
 8006114:	6021      	str	r1, [r4, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d13d      	bne.n	8006196 <_printf_i+0x16a>
 800611a:	2d00      	cmp	r5, #0
 800611c:	f040 808e 	bne.w	800623c <_printf_i+0x210>
 8006120:	4665      	mov	r5, ip
 8006122:	2a08      	cmp	r2, #8
 8006124:	d10b      	bne.n	800613e <_printf_i+0x112>
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	07db      	lsls	r3, r3, #31
 800612a:	d508      	bpl.n	800613e <_printf_i+0x112>
 800612c:	6923      	ldr	r3, [r4, #16]
 800612e:	6862      	ldr	r2, [r4, #4]
 8006130:	429a      	cmp	r2, r3
 8006132:	bfde      	ittt	le
 8006134:	2330      	movle	r3, #48	; 0x30
 8006136:	f805 3c01 	strble.w	r3, [r5, #-1]
 800613a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800613e:	ebac 0305 	sub.w	r3, ip, r5
 8006142:	6123      	str	r3, [r4, #16]
 8006144:	f8cd 8000 	str.w	r8, [sp]
 8006148:	463b      	mov	r3, r7
 800614a:	aa03      	add	r2, sp, #12
 800614c:	4621      	mov	r1, r4
 800614e:	4630      	mov	r0, r6
 8006150:	f7ff fef6 	bl	8005f40 <_printf_common>
 8006154:	3001      	adds	r0, #1
 8006156:	d14d      	bne.n	80061f4 <_printf_i+0x1c8>
 8006158:	f04f 30ff 	mov.w	r0, #4294967295
 800615c:	b005      	add	sp, #20
 800615e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006162:	4839      	ldr	r0, [pc, #228]	; (8006248 <_printf_i+0x21c>)
 8006164:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006168:	6813      	ldr	r3, [r2, #0]
 800616a:	6821      	ldr	r1, [r4, #0]
 800616c:	1d1d      	adds	r5, r3, #4
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6015      	str	r5, [r2, #0]
 8006172:	060a      	lsls	r2, r1, #24
 8006174:	d50b      	bpl.n	800618e <_printf_i+0x162>
 8006176:	07ca      	lsls	r2, r1, #31
 8006178:	bf44      	itt	mi
 800617a:	f041 0120 	orrmi.w	r1, r1, #32
 800617e:	6021      	strmi	r1, [r4, #0]
 8006180:	b91b      	cbnz	r3, 800618a <_printf_i+0x15e>
 8006182:	6822      	ldr	r2, [r4, #0]
 8006184:	f022 0220 	bic.w	r2, r2, #32
 8006188:	6022      	str	r2, [r4, #0]
 800618a:	2210      	movs	r2, #16
 800618c:	e7b7      	b.n	80060fe <_printf_i+0xd2>
 800618e:	064d      	lsls	r5, r1, #25
 8006190:	bf48      	it	mi
 8006192:	b29b      	uxthmi	r3, r3
 8006194:	e7ef      	b.n	8006176 <_printf_i+0x14a>
 8006196:	4665      	mov	r5, ip
 8006198:	fbb3 f1f2 	udiv	r1, r3, r2
 800619c:	fb02 3311 	mls	r3, r2, r1, r3
 80061a0:	5cc3      	ldrb	r3, [r0, r3]
 80061a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80061a6:	460b      	mov	r3, r1
 80061a8:	2900      	cmp	r1, #0
 80061aa:	d1f5      	bne.n	8006198 <_printf_i+0x16c>
 80061ac:	e7b9      	b.n	8006122 <_printf_i+0xf6>
 80061ae:	6813      	ldr	r3, [r2, #0]
 80061b0:	6825      	ldr	r5, [r4, #0]
 80061b2:	6961      	ldr	r1, [r4, #20]
 80061b4:	1d18      	adds	r0, r3, #4
 80061b6:	6010      	str	r0, [r2, #0]
 80061b8:	0628      	lsls	r0, r5, #24
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	d501      	bpl.n	80061c2 <_printf_i+0x196>
 80061be:	6019      	str	r1, [r3, #0]
 80061c0:	e002      	b.n	80061c8 <_printf_i+0x19c>
 80061c2:	066a      	lsls	r2, r5, #25
 80061c4:	d5fb      	bpl.n	80061be <_printf_i+0x192>
 80061c6:	8019      	strh	r1, [r3, #0]
 80061c8:	2300      	movs	r3, #0
 80061ca:	6123      	str	r3, [r4, #16]
 80061cc:	4665      	mov	r5, ip
 80061ce:	e7b9      	b.n	8006144 <_printf_i+0x118>
 80061d0:	6813      	ldr	r3, [r2, #0]
 80061d2:	1d19      	adds	r1, r3, #4
 80061d4:	6011      	str	r1, [r2, #0]
 80061d6:	681d      	ldr	r5, [r3, #0]
 80061d8:	6862      	ldr	r2, [r4, #4]
 80061da:	2100      	movs	r1, #0
 80061dc:	4628      	mov	r0, r5
 80061de:	f7f9 ffff 	bl	80001e0 <memchr>
 80061e2:	b108      	cbz	r0, 80061e8 <_printf_i+0x1bc>
 80061e4:	1b40      	subs	r0, r0, r5
 80061e6:	6060      	str	r0, [r4, #4]
 80061e8:	6863      	ldr	r3, [r4, #4]
 80061ea:	6123      	str	r3, [r4, #16]
 80061ec:	2300      	movs	r3, #0
 80061ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061f2:	e7a7      	b.n	8006144 <_printf_i+0x118>
 80061f4:	6923      	ldr	r3, [r4, #16]
 80061f6:	462a      	mov	r2, r5
 80061f8:	4639      	mov	r1, r7
 80061fa:	4630      	mov	r0, r6
 80061fc:	47c0      	blx	r8
 80061fe:	3001      	adds	r0, #1
 8006200:	d0aa      	beq.n	8006158 <_printf_i+0x12c>
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	079b      	lsls	r3, r3, #30
 8006206:	d413      	bmi.n	8006230 <_printf_i+0x204>
 8006208:	68e0      	ldr	r0, [r4, #12]
 800620a:	9b03      	ldr	r3, [sp, #12]
 800620c:	4298      	cmp	r0, r3
 800620e:	bfb8      	it	lt
 8006210:	4618      	movlt	r0, r3
 8006212:	e7a3      	b.n	800615c <_printf_i+0x130>
 8006214:	2301      	movs	r3, #1
 8006216:	464a      	mov	r2, r9
 8006218:	4639      	mov	r1, r7
 800621a:	4630      	mov	r0, r6
 800621c:	47c0      	blx	r8
 800621e:	3001      	adds	r0, #1
 8006220:	d09a      	beq.n	8006158 <_printf_i+0x12c>
 8006222:	3501      	adds	r5, #1
 8006224:	68e3      	ldr	r3, [r4, #12]
 8006226:	9a03      	ldr	r2, [sp, #12]
 8006228:	1a9b      	subs	r3, r3, r2
 800622a:	42ab      	cmp	r3, r5
 800622c:	dcf2      	bgt.n	8006214 <_printf_i+0x1e8>
 800622e:	e7eb      	b.n	8006208 <_printf_i+0x1dc>
 8006230:	2500      	movs	r5, #0
 8006232:	f104 0919 	add.w	r9, r4, #25
 8006236:	e7f5      	b.n	8006224 <_printf_i+0x1f8>
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1ac      	bne.n	8006196 <_printf_i+0x16a>
 800623c:	7803      	ldrb	r3, [r0, #0]
 800623e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006242:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006246:	e76c      	b.n	8006122 <_printf_i+0xf6>
 8006248:	08007265 	.word	0x08007265
 800624c:	08007276 	.word	0x08007276

08006250 <memcpy>:
 8006250:	b510      	push	{r4, lr}
 8006252:	1e43      	subs	r3, r0, #1
 8006254:	440a      	add	r2, r1
 8006256:	4291      	cmp	r1, r2
 8006258:	d100      	bne.n	800625c <memcpy+0xc>
 800625a:	bd10      	pop	{r4, pc}
 800625c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006260:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006264:	e7f7      	b.n	8006256 <memcpy+0x6>

08006266 <memmove>:
 8006266:	4288      	cmp	r0, r1
 8006268:	b510      	push	{r4, lr}
 800626a:	eb01 0302 	add.w	r3, r1, r2
 800626e:	d807      	bhi.n	8006280 <memmove+0x1a>
 8006270:	1e42      	subs	r2, r0, #1
 8006272:	4299      	cmp	r1, r3
 8006274:	d00a      	beq.n	800628c <memmove+0x26>
 8006276:	f811 4b01 	ldrb.w	r4, [r1], #1
 800627a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800627e:	e7f8      	b.n	8006272 <memmove+0xc>
 8006280:	4283      	cmp	r3, r0
 8006282:	d9f5      	bls.n	8006270 <memmove+0xa>
 8006284:	1881      	adds	r1, r0, r2
 8006286:	1ad2      	subs	r2, r2, r3
 8006288:	42d3      	cmn	r3, r2
 800628a:	d100      	bne.n	800628e <memmove+0x28>
 800628c:	bd10      	pop	{r4, pc}
 800628e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006292:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006296:	e7f7      	b.n	8006288 <memmove+0x22>

08006298 <_free_r>:
 8006298:	b538      	push	{r3, r4, r5, lr}
 800629a:	4605      	mov	r5, r0
 800629c:	2900      	cmp	r1, #0
 800629e:	d045      	beq.n	800632c <_free_r+0x94>
 80062a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062a4:	1f0c      	subs	r4, r1, #4
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	bfb8      	it	lt
 80062aa:	18e4      	addlt	r4, r4, r3
 80062ac:	f000 f8d2 	bl	8006454 <__malloc_lock>
 80062b0:	4a1f      	ldr	r2, [pc, #124]	; (8006330 <_free_r+0x98>)
 80062b2:	6813      	ldr	r3, [r2, #0]
 80062b4:	4610      	mov	r0, r2
 80062b6:	b933      	cbnz	r3, 80062c6 <_free_r+0x2e>
 80062b8:	6063      	str	r3, [r4, #4]
 80062ba:	6014      	str	r4, [r2, #0]
 80062bc:	4628      	mov	r0, r5
 80062be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062c2:	f000 b8c8 	b.w	8006456 <__malloc_unlock>
 80062c6:	42a3      	cmp	r3, r4
 80062c8:	d90c      	bls.n	80062e4 <_free_r+0x4c>
 80062ca:	6821      	ldr	r1, [r4, #0]
 80062cc:	1862      	adds	r2, r4, r1
 80062ce:	4293      	cmp	r3, r2
 80062d0:	bf04      	itt	eq
 80062d2:	681a      	ldreq	r2, [r3, #0]
 80062d4:	685b      	ldreq	r3, [r3, #4]
 80062d6:	6063      	str	r3, [r4, #4]
 80062d8:	bf04      	itt	eq
 80062da:	1852      	addeq	r2, r2, r1
 80062dc:	6022      	streq	r2, [r4, #0]
 80062de:	6004      	str	r4, [r0, #0]
 80062e0:	e7ec      	b.n	80062bc <_free_r+0x24>
 80062e2:	4613      	mov	r3, r2
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	b10a      	cbz	r2, 80062ec <_free_r+0x54>
 80062e8:	42a2      	cmp	r2, r4
 80062ea:	d9fa      	bls.n	80062e2 <_free_r+0x4a>
 80062ec:	6819      	ldr	r1, [r3, #0]
 80062ee:	1858      	adds	r0, r3, r1
 80062f0:	42a0      	cmp	r0, r4
 80062f2:	d10b      	bne.n	800630c <_free_r+0x74>
 80062f4:	6820      	ldr	r0, [r4, #0]
 80062f6:	4401      	add	r1, r0
 80062f8:	1858      	adds	r0, r3, r1
 80062fa:	4282      	cmp	r2, r0
 80062fc:	6019      	str	r1, [r3, #0]
 80062fe:	d1dd      	bne.n	80062bc <_free_r+0x24>
 8006300:	6810      	ldr	r0, [r2, #0]
 8006302:	6852      	ldr	r2, [r2, #4]
 8006304:	605a      	str	r2, [r3, #4]
 8006306:	4401      	add	r1, r0
 8006308:	6019      	str	r1, [r3, #0]
 800630a:	e7d7      	b.n	80062bc <_free_r+0x24>
 800630c:	d902      	bls.n	8006314 <_free_r+0x7c>
 800630e:	230c      	movs	r3, #12
 8006310:	602b      	str	r3, [r5, #0]
 8006312:	e7d3      	b.n	80062bc <_free_r+0x24>
 8006314:	6820      	ldr	r0, [r4, #0]
 8006316:	1821      	adds	r1, r4, r0
 8006318:	428a      	cmp	r2, r1
 800631a:	bf04      	itt	eq
 800631c:	6811      	ldreq	r1, [r2, #0]
 800631e:	6852      	ldreq	r2, [r2, #4]
 8006320:	6062      	str	r2, [r4, #4]
 8006322:	bf04      	itt	eq
 8006324:	1809      	addeq	r1, r1, r0
 8006326:	6021      	streq	r1, [r4, #0]
 8006328:	605c      	str	r4, [r3, #4]
 800632a:	e7c7      	b.n	80062bc <_free_r+0x24>
 800632c:	bd38      	pop	{r3, r4, r5, pc}
 800632e:	bf00      	nop
 8006330:	200004c8 	.word	0x200004c8

08006334 <_malloc_r>:
 8006334:	b570      	push	{r4, r5, r6, lr}
 8006336:	1ccd      	adds	r5, r1, #3
 8006338:	f025 0503 	bic.w	r5, r5, #3
 800633c:	3508      	adds	r5, #8
 800633e:	2d0c      	cmp	r5, #12
 8006340:	bf38      	it	cc
 8006342:	250c      	movcc	r5, #12
 8006344:	2d00      	cmp	r5, #0
 8006346:	4606      	mov	r6, r0
 8006348:	db01      	blt.n	800634e <_malloc_r+0x1a>
 800634a:	42a9      	cmp	r1, r5
 800634c:	d903      	bls.n	8006356 <_malloc_r+0x22>
 800634e:	230c      	movs	r3, #12
 8006350:	6033      	str	r3, [r6, #0]
 8006352:	2000      	movs	r0, #0
 8006354:	bd70      	pop	{r4, r5, r6, pc}
 8006356:	f000 f87d 	bl	8006454 <__malloc_lock>
 800635a:	4a21      	ldr	r2, [pc, #132]	; (80063e0 <_malloc_r+0xac>)
 800635c:	6814      	ldr	r4, [r2, #0]
 800635e:	4621      	mov	r1, r4
 8006360:	b991      	cbnz	r1, 8006388 <_malloc_r+0x54>
 8006362:	4c20      	ldr	r4, [pc, #128]	; (80063e4 <_malloc_r+0xb0>)
 8006364:	6823      	ldr	r3, [r4, #0]
 8006366:	b91b      	cbnz	r3, 8006370 <_malloc_r+0x3c>
 8006368:	4630      	mov	r0, r6
 800636a:	f000 f863 	bl	8006434 <_sbrk_r>
 800636e:	6020      	str	r0, [r4, #0]
 8006370:	4629      	mov	r1, r5
 8006372:	4630      	mov	r0, r6
 8006374:	f000 f85e 	bl	8006434 <_sbrk_r>
 8006378:	1c43      	adds	r3, r0, #1
 800637a:	d124      	bne.n	80063c6 <_malloc_r+0x92>
 800637c:	230c      	movs	r3, #12
 800637e:	6033      	str	r3, [r6, #0]
 8006380:	4630      	mov	r0, r6
 8006382:	f000 f868 	bl	8006456 <__malloc_unlock>
 8006386:	e7e4      	b.n	8006352 <_malloc_r+0x1e>
 8006388:	680b      	ldr	r3, [r1, #0]
 800638a:	1b5b      	subs	r3, r3, r5
 800638c:	d418      	bmi.n	80063c0 <_malloc_r+0x8c>
 800638e:	2b0b      	cmp	r3, #11
 8006390:	d90f      	bls.n	80063b2 <_malloc_r+0x7e>
 8006392:	600b      	str	r3, [r1, #0]
 8006394:	50cd      	str	r5, [r1, r3]
 8006396:	18cc      	adds	r4, r1, r3
 8006398:	4630      	mov	r0, r6
 800639a:	f000 f85c 	bl	8006456 <__malloc_unlock>
 800639e:	f104 000b 	add.w	r0, r4, #11
 80063a2:	1d23      	adds	r3, r4, #4
 80063a4:	f020 0007 	bic.w	r0, r0, #7
 80063a8:	1ac3      	subs	r3, r0, r3
 80063aa:	d0d3      	beq.n	8006354 <_malloc_r+0x20>
 80063ac:	425a      	negs	r2, r3
 80063ae:	50e2      	str	r2, [r4, r3]
 80063b0:	e7d0      	b.n	8006354 <_malloc_r+0x20>
 80063b2:	428c      	cmp	r4, r1
 80063b4:	684b      	ldr	r3, [r1, #4]
 80063b6:	bf16      	itet	ne
 80063b8:	6063      	strne	r3, [r4, #4]
 80063ba:	6013      	streq	r3, [r2, #0]
 80063bc:	460c      	movne	r4, r1
 80063be:	e7eb      	b.n	8006398 <_malloc_r+0x64>
 80063c0:	460c      	mov	r4, r1
 80063c2:	6849      	ldr	r1, [r1, #4]
 80063c4:	e7cc      	b.n	8006360 <_malloc_r+0x2c>
 80063c6:	1cc4      	adds	r4, r0, #3
 80063c8:	f024 0403 	bic.w	r4, r4, #3
 80063cc:	42a0      	cmp	r0, r4
 80063ce:	d005      	beq.n	80063dc <_malloc_r+0xa8>
 80063d0:	1a21      	subs	r1, r4, r0
 80063d2:	4630      	mov	r0, r6
 80063d4:	f000 f82e 	bl	8006434 <_sbrk_r>
 80063d8:	3001      	adds	r0, #1
 80063da:	d0cf      	beq.n	800637c <_malloc_r+0x48>
 80063dc:	6025      	str	r5, [r4, #0]
 80063de:	e7db      	b.n	8006398 <_malloc_r+0x64>
 80063e0:	200004c8 	.word	0x200004c8
 80063e4:	200004cc 	.word	0x200004cc

080063e8 <_realloc_r>:
 80063e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ea:	4607      	mov	r7, r0
 80063ec:	4614      	mov	r4, r2
 80063ee:	460e      	mov	r6, r1
 80063f0:	b921      	cbnz	r1, 80063fc <_realloc_r+0x14>
 80063f2:	4611      	mov	r1, r2
 80063f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80063f8:	f7ff bf9c 	b.w	8006334 <_malloc_r>
 80063fc:	b922      	cbnz	r2, 8006408 <_realloc_r+0x20>
 80063fe:	f7ff ff4b 	bl	8006298 <_free_r>
 8006402:	4625      	mov	r5, r4
 8006404:	4628      	mov	r0, r5
 8006406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006408:	f000 f826 	bl	8006458 <_malloc_usable_size_r>
 800640c:	42a0      	cmp	r0, r4
 800640e:	d20f      	bcs.n	8006430 <_realloc_r+0x48>
 8006410:	4621      	mov	r1, r4
 8006412:	4638      	mov	r0, r7
 8006414:	f7ff ff8e 	bl	8006334 <_malloc_r>
 8006418:	4605      	mov	r5, r0
 800641a:	2800      	cmp	r0, #0
 800641c:	d0f2      	beq.n	8006404 <_realloc_r+0x1c>
 800641e:	4631      	mov	r1, r6
 8006420:	4622      	mov	r2, r4
 8006422:	f7ff ff15 	bl	8006250 <memcpy>
 8006426:	4631      	mov	r1, r6
 8006428:	4638      	mov	r0, r7
 800642a:	f7ff ff35 	bl	8006298 <_free_r>
 800642e:	e7e9      	b.n	8006404 <_realloc_r+0x1c>
 8006430:	4635      	mov	r5, r6
 8006432:	e7e7      	b.n	8006404 <_realloc_r+0x1c>

08006434 <_sbrk_r>:
 8006434:	b538      	push	{r3, r4, r5, lr}
 8006436:	4c06      	ldr	r4, [pc, #24]	; (8006450 <_sbrk_r+0x1c>)
 8006438:	2300      	movs	r3, #0
 800643a:	4605      	mov	r5, r0
 800643c:	4608      	mov	r0, r1
 800643e:	6023      	str	r3, [r4, #0]
 8006440:	f7fb f84a 	bl	80014d8 <_sbrk>
 8006444:	1c43      	adds	r3, r0, #1
 8006446:	d102      	bne.n	800644e <_sbrk_r+0x1a>
 8006448:	6823      	ldr	r3, [r4, #0]
 800644a:	b103      	cbz	r3, 800644e <_sbrk_r+0x1a>
 800644c:	602b      	str	r3, [r5, #0]
 800644e:	bd38      	pop	{r3, r4, r5, pc}
 8006450:	20000ff0 	.word	0x20000ff0

08006454 <__malloc_lock>:
 8006454:	4770      	bx	lr

08006456 <__malloc_unlock>:
 8006456:	4770      	bx	lr

08006458 <_malloc_usable_size_r>:
 8006458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800645c:	1f18      	subs	r0, r3, #4
 800645e:	2b00      	cmp	r3, #0
 8006460:	bfbc      	itt	lt
 8006462:	580b      	ldrlt	r3, [r1, r0]
 8006464:	18c0      	addlt	r0, r0, r3
 8006466:	4770      	bx	lr

08006468 <_init>:
 8006468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646a:	bf00      	nop
 800646c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800646e:	bc08      	pop	{r3}
 8006470:	469e      	mov	lr, r3
 8006472:	4770      	bx	lr

08006474 <_fini>:
 8006474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006476:	bf00      	nop
 8006478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800647a:	bc08      	pop	{r3}
 800647c:	469e      	mov	lr, r3
 800647e:	4770      	bx	lr
