
STM32_SDcard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000648c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e08  0800661c  0800661c  0001661c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007424  08007424  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007424  08007424  00017424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800742c  0800742c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800742c  0800742c  0001742c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007430  08007430  00017430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f4  20000090  080074c4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000684  080074c4  00020684  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013efd  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c79  00000000  00000000  00033fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  00036c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  00037f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000472e  00000000  00000000  00039120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015deb  00000000  00000000  0003d84e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< Updated upstream
 18 .debug_str    00100acc  00000000  00000000  00053639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00154105  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054a8  00000000  00000000  00154158  2**2
=======
 18 .debug_str    00100a8f  00000000  00000000  00053d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001547d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054a8  00000000  00000000  00154828  2**2
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006604 	.word	0x08006604

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08006604 	.word	0x08006604

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f001 f85e 	bl	8001648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f934 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 fae2 	bl	8000b58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000594:	f000 fab0 	bl	8000af8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000598:	f000 f9b8 	bl	800090c <MX_ADC1_Init>
  MX_I2C1_Init();
 800059c:	f000 fa2e 	bl	80009fc <MX_I2C1_Init>
  MX_SPI2_Init();
 80005a0:	f000 fa6c 	bl	8000a7c <MX_SPI2_Init>
  MX_FATFS_Init();
 80005a4:	f005 fac8 	bl	8005b38 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init (); // initialize the diaply
 80005a8:	f000 fb46 	bl	8000c38 <SSD1306_Init>
  SSD1306_GotoXY (8,0); // goto 10, 10
 80005ac:	2100      	movs	r1, #0
 80005ae:	2008      	movs	r0, #8
 80005b0:	f000 fcac 	bl	8000f0c <SSD1306_GotoXY>
  SSD1306_Puts ("Voltmeter", &Font_11x18, 1); // print Voltmeter_Back to Intel Nuc
 80005b4:	2201      	movs	r2, #1
 80005b6:	4981      	ldr	r1, [pc, #516]	; (80007bc <main+0x238>)
 80005b8:	4881      	ldr	r0, [pc, #516]	; (80007c0 <main+0x23c>)
 80005ba:	f000 fd3d 	bl	8001038 <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 80005be:	f000 fbff 	bl	8000dc0 <SSD1306_UpdateScreen>
  //HAL_Delay(3000);
  SSD1306_GotoXY (0,20);
 80005c2:	2114      	movs	r1, #20
 80005c4:	2000      	movs	r0, #0
 80005c6:	f000 fca1 	bl	8000f0c <SSD1306_GotoXY>
  SSD1306_Puts ("Digit:  ", &Font_11x18, 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	497b      	ldr	r1, [pc, #492]	; (80007bc <main+0x238>)
 80005ce:	487d      	ldr	r0, [pc, #500]	; (80007c4 <main+0x240>)
 80005d0:	f000 fd32 	bl	8001038 <SSD1306_Puts>
  SSD1306_GotoXY (0,42);
 80005d4:	212a      	movs	r1, #42	; 0x2a
 80005d6:	2000      	movs	r0, #0
 80005d8:	f000 fc98 	bl	8000f0c <SSD1306_GotoXY>
  SSD1306_Puts ("Volts:  ", &Font_11x18, 1);
 80005dc:	2201      	movs	r2, #1
 80005de:	4977      	ldr	r1, [pc, #476]	; (80007bc <main+0x238>)
 80005e0:	4879      	ldr	r0, [pc, #484]	; (80007c8 <main+0x244>)
 80005e2:	f000 fd29 	bl	8001038 <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 80005e6:	f000 fbeb 	bl	8000dc0 <SSD1306_UpdateScreen>
  // Get ADC value
  HAL_ADC_Start(&hadc1);
 80005ea:	4878      	ldr	r0, [pc, #480]	; (80007cc <main+0x248>)
 80005ec:	f001 fc04 	bl	8001df8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80005f4:	4875      	ldr	r0, [pc, #468]	; (80007cc <main+0x248>)
 80005f6:	f001 fcb9 	bl	8001f6c <HAL_ADC_PollForConversion>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	value_adc = HAL_ADC_GetValue(&hadc1);
 80005fa:	4874      	ldr	r0, [pc, #464]	; (80007cc <main+0x248>)
 80005fc:	f001 fd86 	bl	800210c <HAL_ADC_GetValue>
 8000600:	4603      	mov	r3, r0
 8000602:	b29a      	uxth	r2, r3
 8000604:	4b72      	ldr	r3, [pc, #456]	; (80007d0 <main+0x24c>)
 8000606:	801a      	strh	r2, [r3, #0]
	SSD1306_GotoXY (70,20); // goto 10, 10
 8000608:	2114      	movs	r1, #20
 800060a:	2046      	movs	r0, #70	; 0x46
 800060c:	f000 fc7e 	bl	8000f0c <SSD1306_GotoXY>
	SSD1306_Putc ((char)(value_adc/1000+48), &Font_11x18, 1);
 8000610:	4b6f      	ldr	r3, [pc, #444]	; (80007d0 <main+0x24c>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	4a6f      	ldr	r2, [pc, #444]	; (80007d4 <main+0x250>)
 8000616:	fba2 2303 	umull	r2, r3, r2, r3
 800061a:	099b      	lsrs	r3, r3, #6
 800061c:	b29b      	uxth	r3, r3
 800061e:	b2db      	uxtb	r3, r3
 8000620:	3330      	adds	r3, #48	; 0x30
 8000622:	b2db      	uxtb	r3, r3
 8000624:	2201      	movs	r2, #1
 8000626:	4965      	ldr	r1, [pc, #404]	; (80007bc <main+0x238>)
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fc85 	bl	8000f38 <SSD1306_Putc>
	SSD1306_Putc ((char)((value_adc%1000)/100+48), &Font_11x18, 1);
 800062e:	4b68      	ldr	r3, [pc, #416]	; (80007d0 <main+0x24c>)
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	4a68      	ldr	r2, [pc, #416]	; (80007d4 <main+0x250>)
 8000634:	fba2 1203 	umull	r1, r2, r2, r3
 8000638:	0992      	lsrs	r2, r2, #6
 800063a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	b29b      	uxth	r3, r3
 8000646:	4a64      	ldr	r2, [pc, #400]	; (80007d8 <main+0x254>)
 8000648:	fba2 2303 	umull	r2, r3, r2, r3
 800064c:	095b      	lsrs	r3, r3, #5
 800064e:	b29b      	uxth	r3, r3
 8000650:	b2db      	uxtb	r3, r3
 8000652:	3330      	adds	r3, #48	; 0x30
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2201      	movs	r2, #1
 8000658:	4958      	ldr	r1, [pc, #352]	; (80007bc <main+0x238>)
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fc6c 	bl	8000f38 <SSD1306_Putc>
	SSD1306_Putc ((char)((value_adc%100)/10+48), &Font_11x18, 1);
 8000660:	4b5b      	ldr	r3, [pc, #364]	; (80007d0 <main+0x24c>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	4a5c      	ldr	r2, [pc, #368]	; (80007d8 <main+0x254>)
 8000666:	fba2 1203 	umull	r1, r2, r2, r3
 800066a:	0952      	lsrs	r2, r2, #5
 800066c:	2164      	movs	r1, #100	; 0x64
 800066e:	fb01 f202 	mul.w	r2, r1, r2
 8000672:	1a9b      	subs	r3, r3, r2
 8000674:	b29b      	uxth	r3, r3
 8000676:	4a59      	ldr	r2, [pc, #356]	; (80007dc <main+0x258>)
 8000678:	fba2 2303 	umull	r2, r3, r2, r3
 800067c:	08db      	lsrs	r3, r3, #3
 800067e:	b29b      	uxth	r3, r3
 8000680:	b2db      	uxtb	r3, r3
 8000682:	3330      	adds	r3, #48	; 0x30
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2201      	movs	r2, #1
 8000688:	494c      	ldr	r1, [pc, #304]	; (80007bc <main+0x238>)
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fc54 	bl	8000f38 <SSD1306_Putc>
	SSD1306_Putc ((char)(value_adc%10+48), &Font_11x18, 1);
 8000690:	4b4f      	ldr	r3, [pc, #316]	; (80007d0 <main+0x24c>)
 8000692:	881a      	ldrh	r2, [r3, #0]
 8000694:	4b51      	ldr	r3, [pc, #324]	; (80007dc <main+0x258>)
 8000696:	fba3 1302 	umull	r1, r3, r3, r2
 800069a:	08d9      	lsrs	r1, r3, #3
 800069c:	460b      	mov	r3, r1
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	440b      	add	r3, r1
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	3330      	adds	r3, #48	; 0x30
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2201      	movs	r2, #1
 80006b0:	4942      	ldr	r1, [pc, #264]	; (80007bc <main+0x238>)
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 fc40 	bl	8000f38 <SSD1306_Putc>
	volts = value_adc*333/4096;
 80006b8:	4b45      	ldr	r3, [pc, #276]	; (80007d0 <main+0x24c>)
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	f240 134d 	movw	r3, #333	; 0x14d
 80006c2:	fb02 f303 	mul.w	r3, r2, r3
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	da01      	bge.n	80006ce <main+0x14a>
 80006ca:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80006ce:	131b      	asrs	r3, r3, #12
 80006d0:	ee07 3a90 	vmov	s15, r3
 80006d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006d8:	4b41      	ldr	r3, [pc, #260]	; (80007e0 <main+0x25c>)
 80006da:	edc3 7a00 	vstr	s15, [r3]
	SSD1306_GotoXY (70,42); // goto 10, 10
 80006de:	212a      	movs	r1, #42	; 0x2a
 80006e0:	2046      	movs	r0, #70	; 0x46
 80006e2:	f000 fc13 	bl	8000f0c <SSD1306_GotoXY>
	SSD1306_Putc ((char)((int)(volts)/100+48), &Font_11x18, 1);
 80006e6:	4b3e      	ldr	r3, [pc, #248]	; (80007e0 <main+0x25c>)
 80006e8:	edd3 7a00 	vldr	s15, [r3]
 80006ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006f0:	ee17 1a90 	vmov	r1, s15
 80006f4:	4b38      	ldr	r3, [pc, #224]	; (80007d8 <main+0x254>)
 80006f6:	fb83 2301 	smull	r2, r3, r3, r1
 80006fa:	115a      	asrs	r2, r3, #5
 80006fc:	17cb      	asrs	r3, r1, #31
 80006fe:	1ad3      	subs	r3, r2, r3
 8000700:	b2db      	uxtb	r3, r3
 8000702:	3330      	adds	r3, #48	; 0x30
 8000704:	b2db      	uxtb	r3, r3
 8000706:	2201      	movs	r2, #1
 8000708:	492c      	ldr	r1, [pc, #176]	; (80007bc <main+0x238>)
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fc14 	bl	8000f38 <SSD1306_Putc>
	SSD1306_Puts (".", &Font_11x18, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	492a      	ldr	r1, [pc, #168]	; (80007bc <main+0x238>)
 8000714:	4833      	ldr	r0, [pc, #204]	; (80007e4 <main+0x260>)
 8000716:	f000 fc8f 	bl	8001038 <SSD1306_Puts>
	SSD1306_Putc ((char)(((int)(volts)%100)/10+48), &Font_11x18, 1);
 800071a:	4b31      	ldr	r3, [pc, #196]	; (80007e0 <main+0x25c>)
 800071c:	edd3 7a00 	vldr	s15, [r3]
 8000720:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000724:	ee17 2a90 	vmov	r2, s15
 8000728:	4b2b      	ldr	r3, [pc, #172]	; (80007d8 <main+0x254>)
 800072a:	fb83 1302 	smull	r1, r3, r3, r2
 800072e:	1159      	asrs	r1, r3, #5
 8000730:	17d3      	asrs	r3, r2, #31
 8000732:	1acb      	subs	r3, r1, r3
 8000734:	2164      	movs	r1, #100	; 0x64
 8000736:	fb01 f303 	mul.w	r3, r1, r3
 800073a:	1ad3      	subs	r3, r2, r3
 800073c:	4a2a      	ldr	r2, [pc, #168]	; (80007e8 <main+0x264>)
 800073e:	fb82 1203 	smull	r1, r2, r2, r3
 8000742:	1092      	asrs	r2, r2, #2
 8000744:	17db      	asrs	r3, r3, #31
 8000746:	1ad3      	subs	r3, r2, r3
 8000748:	b2db      	uxtb	r3, r3
 800074a:	3330      	adds	r3, #48	; 0x30
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2201      	movs	r2, #1
 8000750:	491a      	ldr	r1, [pc, #104]	; (80007bc <main+0x238>)
 8000752:	4618      	mov	r0, r3
 8000754:	f000 fbf0 	bl	8000f38 <SSD1306_Putc>
	SSD1306_Putc ((char)((int)(volts)%10+48), &Font_11x18, 1);
 8000758:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <main+0x25c>)
 800075a:	edd3 7a00 	vldr	s15, [r3]
 800075e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000762:	ee17 1a90 	vmov	r1, s15
 8000766:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <main+0x264>)
 8000768:	fb83 2301 	smull	r2, r3, r3, r1
 800076c:	109a      	asrs	r2, r3, #2
 800076e:	17cb      	asrs	r3, r1, #31
 8000770:	1ad2      	subs	r2, r2, r3
 8000772:	4613      	mov	r3, r2
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4413      	add	r3, r2
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	1aca      	subs	r2, r1, r3
 800077c:	b2d3      	uxtb	r3, r2
 800077e:	3330      	adds	r3, #48	; 0x30
 8000780:	b2db      	uxtb	r3, r3
 8000782:	2201      	movs	r2, #1
 8000784:	490d      	ldr	r1, [pc, #52]	; (80007bc <main+0x238>)
 8000786:	4618      	mov	r0, r3
 8000788:	f000 fbd6 	bl	8000f38 <SSD1306_Putc>
	SSD1306_UpdateScreen(); // update screen
 800078c:	f000 fb18 	bl	8000dc0 <SSD1306_UpdateScreen>
	//Convert to string and print
	sprintf(msg,"%hu\r\n",value_adc);
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <main+0x24c>)
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	461a      	mov	r2, r3
 8000796:	4915      	ldr	r1, [pc, #84]	; (80007ec <main+0x268>)
 8000798:	4815      	ldr	r0, [pc, #84]	; (80007f0 <main+0x26c>)
 800079a:	f005 fac5 	bl	8005d28 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800079e:	4814      	ldr	r0, [pc, #80]	; (80007f0 <main+0x26c>)
 80007a0:	f7ff fd16 	bl	80001d0 <strlen>
 80007a4:	4603      	mov	r3, r0
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007ac:	4910      	ldr	r1, [pc, #64]	; (80007f0 <main+0x26c>)
 80007ae:	4811      	ldr	r0, [pc, #68]	; (80007f4 <main+0x270>)
 80007b0:	f004 fd13 	bl	80051da <HAL_UART_Transmit>
	HAL_Delay(100);
 80007b4:	2064      	movs	r0, #100	; 0x64
 80007b6:	f000 ffc3 	bl	8001740 <HAL_Delay>
	value_adc = HAL_ADC_GetValue(&hadc1);
 80007ba:	e71e      	b.n	80005fa <main+0x76>
 80007bc:	20000000 	.word	0x20000000
 80007c0:	0800661c 	.word	0x0800661c
 80007c4:	08006628 	.word	0x08006628
 80007c8:	08006634 	.word	0x08006634
 80007cc:	200000ac 	.word	0x200000ac
 80007d0:	20000008 	.word	0x20000008
 80007d4:	10624dd3 	.word	0x10624dd3
 80007d8:	51eb851f 	.word	0x51eb851f
 80007dc:	cccccccd 	.word	0xcccccccd
 80007e0:	20000240 	.word	0x20000240
 80007e4:	08006640 	.word	0x08006640
 80007e8:	66666667 	.word	0x66666667
 80007ec:	08006644 	.word	0x08006644
 80007f0:	20000244 	.word	0x20000244
 80007f4:	200001c0 	.word	0x200001c0

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b0b8      	sub	sp, #224	; 0xe0
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000802:	2244      	movs	r2, #68	; 0x44
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f005 fa86 	bl	8005d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800081c:	463b      	mov	r3, r7
 800081e:	2288      	movs	r2, #136	; 0x88
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f005 fa78 	bl	8005d18 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000828:	2302      	movs	r3, #2
 800082a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000832:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000836:	2310      	movs	r3, #16
 8000838:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083c:	2302      	movs	r3, #2
 800083e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000842:	2302      	movs	r3, #2
 8000844:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000848:	2301      	movs	r3, #1
 800084a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800084e:	230a      	movs	r3, #10
 8000850:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000854:	2307      	movs	r3, #7
 8000856:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800085a:	2302      	movs	r3, #2
 800085c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000860:	2302      	movs	r3, #2
 8000862:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000866:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800086a:	4618      	mov	r0, r3
 800086c:	f003 f91a 	bl	8003aa4 <HAL_RCC_OscConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000876:	f000 f9d7 	bl	8000c28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087a:	230f      	movs	r3, #15
 800087c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000880:	2303      	movs	r3, #3
 8000882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000898:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800089c:	2104      	movs	r1, #4
 800089e:	4618      	mov	r0, r3
 80008a0:	f003 fce8 	bl	8004274 <HAL_RCC_ClockConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80008aa:	f000 f9bd 	bl	8000c28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80008ae:	f244 0342 	movw	r3, #16450	; 0x4042
 80008b2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80008bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008c0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80008c2:	2302      	movs	r3, #2
 80008c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80008ca:	2308      	movs	r3, #8
 80008cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80008ce:	2307      	movs	r3, #7
 80008d0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80008da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008de:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e0:	463b      	mov	r3, r7
 80008e2:	4618      	mov	r0, r3
 80008e4:	f003 fecc 	bl	8004680 <HAL_RCCEx_PeriphCLKConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80008ee:	f000 f99b 	bl	8000c28 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008f6:	f003 f87f 	bl	80039f8 <HAL_PWREx_ControlVoltageScaling>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8000900:	f000 f992 	bl	8000c28 <Error_Handler>
  }
}
 8000904:	bf00      	nop
 8000906:	37e0      	adds	r7, #224	; 0xe0
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
 800092c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800092e:	4b30      	ldr	r3, [pc, #192]	; (80009f0 <MX_ADC1_Init+0xe4>)
 8000930:	4a30      	ldr	r2, [pc, #192]	; (80009f4 <MX_ADC1_Init+0xe8>)
 8000932:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000934:	4b2e      	ldr	r3, [pc, #184]	; (80009f0 <MX_ADC1_Init+0xe4>)
 8000936:	2200      	movs	r2, #0
 8000938:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800093a:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <MX_ADC1_Init+0xe4>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000940:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <MX_ADC1_Init+0xe4>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000946:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <MX_ADC1_Init+0xe4>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800094c:	4b28      	ldr	r3, [pc, #160]	; (80009f0 <MX_ADC1_Init+0xe4>)
 800094e:	2208      	movs	r2, #8
 8000950:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000952:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <MX_ADC1_Init+0xe4>)
 8000954:	2200      	movs	r2, #0
 8000956:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000958:	4b25      	ldr	r3, [pc, #148]	; (80009f0 <MX_ADC1_Init+0xe4>)
 800095a:	2201      	movs	r2, #1
 800095c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800095e:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <MX_ADC1_Init+0xe4>)
 8000960:	2201      	movs	r2, #1
 8000962:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000964:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <MX_ADC1_Init+0xe4>)
 8000966:	2200      	movs	r2, #0
 8000968:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800096c:	4b20      	ldr	r3, [pc, #128]	; (80009f0 <MX_ADC1_Init+0xe4>)
 800096e:	2200      	movs	r2, #0
 8000970:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000972:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <MX_ADC1_Init+0xe4>)
 8000974:	2200      	movs	r2, #0
 8000976:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000978:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <MX_ADC1_Init+0xe4>)
 800097a:	2200      	movs	r2, #0
 800097c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000980:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MX_ADC1_Init+0xe4>)
 8000982:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000986:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MX_ADC1_Init+0xe4>)
 800098a:	2200      	movs	r2, #0
 800098c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000990:	4817      	ldr	r0, [pc, #92]	; (80009f0 <MX_ADC1_Init+0xe4>)
 8000992:	f001 f8dd 	bl	8001b50 <HAL_ADC_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800099c:	f000 f944 	bl	8000c28 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	4811      	ldr	r0, [pc, #68]	; (80009f0 <MX_ADC1_Init+0xe4>)
 80009ac:	f002 f82a 	bl	8002a04 <HAL_ADCEx_MultiModeConfigChannel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80009b6:	f000 f937 	bl	8000c28 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_ADC1_Init+0xec>)
 80009bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009be:	2306      	movs	r3, #6
 80009c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009c6:	237f      	movs	r3, #127	; 0x7f
 80009c8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009ca:	2304      	movs	r3, #4
 80009cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	4619      	mov	r1, r3
 80009d6:	4806      	ldr	r0, [pc, #24]	; (80009f0 <MX_ADC1_Init+0xe4>)
 80009d8:	f001 fba6 	bl	8002128 <HAL_ADC_ConfigChannel>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80009e2:	f000 f921 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	; 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200000ac 	.word	0x200000ac
 80009f4:	50040000 	.word	0x50040000
 80009f8:	04300002 	.word	0x04300002

080009fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a02:	4a1c      	ldr	r2, [pc, #112]	; (8000a74 <MX_I2C1_Init+0x78>)
 8000a04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a08:	4a1b      	ldr	r2, [pc, #108]	; (8000a78 <MX_I2C1_Init+0x7c>)
 8000a0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a18:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a36:	480e      	ldr	r0, [pc, #56]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a38:	f002 fb38 	bl	80030ac <HAL_I2C_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a42:	f000 f8f1 	bl	8000c28 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a46:	2100      	movs	r1, #0
 8000a48:	4809      	ldr	r0, [pc, #36]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a4a:	f002 ff2f 	bl	80038ac <HAL_I2CEx_ConfigAnalogFilter>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a54:	f000 f8e8 	bl	8000c28 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a5c:	f002 ff71 	bl	8003942 <HAL_I2CEx_ConfigDigitalFilter>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a66:	f000 f8df 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000110 	.word	0x20000110
 8000a74:	40005400 	.word	0x40005400
 8000a78:	00702991 	.word	0x00702991

08000a7c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a80:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000a82:	4a1c      	ldr	r2, [pc, #112]	; (8000af4 <MX_SPI2_Init+0x78>)
 8000a84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a86:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000a88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a94:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000a96:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a9a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000ab2:	2220      	movs	r2, #32
 8000ab4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000aca:	2207      	movs	r2, #7
 8000acc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000ad6:	2208      	movs	r2, #8
 8000ad8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000adc:	f004 fa8c 	bl	8004ff8 <HAL_SPI_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000ae6:	f000 f89f 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	2000015c 	.word	0x2000015c
 8000af4:	40003800 	.word	0x40003800

08000af8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_USART2_UART_Init+0x58>)
 8000afe:	4a15      	ldr	r2, [pc, #84]	; (8000b54 <MX_USART2_UART_Init+0x5c>)
 8000b00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <MX_USART2_UART_Init+0x58>)
 8000b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_USART2_UART_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_USART2_UART_Init+0x58>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_USART2_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_USART2_UART_Init+0x58>)
 8000b1e:	220c      	movs	r2, #12
 8000b20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <MX_USART2_UART_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_USART2_UART_Init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <MX_USART2_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_USART2_UART_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_USART2_UART_Init+0x58>)
 8000b3c:	f004 faff 	bl	800513e <HAL_UART_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b46:	f000 f86f 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200001c0 	.word	0x200001c0
 8000b54:	40004400 	.word	0x40004400

08000b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	4b2b      	ldr	r3, [pc, #172]	; (8000c1c <MX_GPIO_Init+0xc4>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	4a2a      	ldr	r2, [pc, #168]	; (8000c1c <MX_GPIO_Init+0xc4>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7a:	4b28      	ldr	r3, [pc, #160]	; (8000c1c <MX_GPIO_Init+0xc4>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b86:	4b25      	ldr	r3, [pc, #148]	; (8000c1c <MX_GPIO_Init+0xc4>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	4a24      	ldr	r2, [pc, #144]	; (8000c1c <MX_GPIO_Init+0xc4>)
 8000b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b92:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <MX_GPIO_Init+0xc4>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <MX_GPIO_Init+0xc4>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	4a1e      	ldr	r2, [pc, #120]	; (8000c1c <MX_GPIO_Init+0xc4>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <MX_GPIO_Init+0xc4>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <MX_GPIO_Init+0xc4>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	4a18      	ldr	r2, [pc, #96]	; (8000c1c <MX_GPIO_Init+0xc4>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <MX_GPIO_Init+0xc4>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd6:	f002 fa51 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <MX_GPIO_Init+0xc8>)
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	480d      	ldr	r0, [pc, #52]	; (8000c24 <MX_GPIO_Init+0xcc>)
 8000bf0:	f002 f89a 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bf4:	2320      	movs	r3, #32
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0e:	f002 f88b 	bl	8002d28 <HAL_GPIO_Init>

}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	; 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	10210000 	.word	0x10210000
 8000c24:	48000800 	.word	0x48000800

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000c3e:	f000 fa21 	bl	8001084 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000c42:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000c46:	2201      	movs	r2, #1
 8000c48:	2178      	movs	r1, #120	; 0x78
 8000c4a:	485b      	ldr	r0, [pc, #364]	; (8000db8 <SSD1306_Init+0x180>)
 8000c4c:	f002 fbb2 	bl	80033b4 <HAL_I2C_IsDeviceReady>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	e0a9      	b.n	8000dae <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000c5a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000c5e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c60:	e002      	b.n	8000c68 <SSD1306_Init+0x30>
		p--;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3b01      	subs	r3, #1
 8000c66:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d1f9      	bne.n	8000c62 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000c6e:	22ae      	movs	r2, #174	; 0xae
 8000c70:	2100      	movs	r1, #0
 8000c72:	2078      	movs	r0, #120	; 0x78
 8000c74:	f000 fa82 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000c78:	2220      	movs	r2, #32
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2078      	movs	r0, #120	; 0x78
 8000c7e:	f000 fa7d 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000c82:	2210      	movs	r2, #16
 8000c84:	2100      	movs	r1, #0
 8000c86:	2078      	movs	r0, #120	; 0x78
 8000c88:	f000 fa78 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000c8c:	22b0      	movs	r2, #176	; 0xb0
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2078      	movs	r0, #120	; 0x78
 8000c92:	f000 fa73 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000c96:	22c8      	movs	r2, #200	; 0xc8
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2078      	movs	r0, #120	; 0x78
 8000c9c:	f000 fa6e 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2078      	movs	r0, #120	; 0x78
 8000ca6:	f000 fa69 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000caa:	2210      	movs	r2, #16
 8000cac:	2100      	movs	r1, #0
 8000cae:	2078      	movs	r0, #120	; 0x78
 8000cb0:	f000 fa64 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000cb4:	2240      	movs	r2, #64	; 0x40
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	2078      	movs	r0, #120	; 0x78
 8000cba:	f000 fa5f 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000cbe:	2281      	movs	r2, #129	; 0x81
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2078      	movs	r0, #120	; 0x78
 8000cc4:	f000 fa5a 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000cc8:	22ff      	movs	r2, #255	; 0xff
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2078      	movs	r0, #120	; 0x78
 8000cce:	f000 fa55 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000cd2:	22a1      	movs	r2, #161	; 0xa1
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2078      	movs	r0, #120	; 0x78
 8000cd8:	f000 fa50 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000cdc:	22a6      	movs	r2, #166	; 0xa6
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2078      	movs	r0, #120	; 0x78
 8000ce2:	f000 fa4b 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000ce6:	22a8      	movs	r2, #168	; 0xa8
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2078      	movs	r0, #120	; 0x78
 8000cec:	f000 fa46 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000cf0:	223f      	movs	r2, #63	; 0x3f
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	2078      	movs	r0, #120	; 0x78
 8000cf6:	f000 fa41 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000cfa:	22a4      	movs	r2, #164	; 0xa4
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2078      	movs	r0, #120	; 0x78
 8000d00:	f000 fa3c 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000d04:	22d3      	movs	r2, #211	; 0xd3
 8000d06:	2100      	movs	r1, #0
 8000d08:	2078      	movs	r0, #120	; 0x78
 8000d0a:	f000 fa37 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	2078      	movs	r0, #120	; 0x78
 8000d14:	f000 fa32 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000d18:	22d5      	movs	r2, #213	; 0xd5
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	2078      	movs	r0, #120	; 0x78
 8000d1e:	f000 fa2d 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000d22:	22f0      	movs	r2, #240	; 0xf0
 8000d24:	2100      	movs	r1, #0
 8000d26:	2078      	movs	r0, #120	; 0x78
 8000d28:	f000 fa28 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000d2c:	22d9      	movs	r2, #217	; 0xd9
 8000d2e:	2100      	movs	r1, #0
 8000d30:	2078      	movs	r0, #120	; 0x78
 8000d32:	f000 fa23 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000d36:	2222      	movs	r2, #34	; 0x22
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2078      	movs	r0, #120	; 0x78
 8000d3c:	f000 fa1e 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000d40:	22da      	movs	r2, #218	; 0xda
 8000d42:	2100      	movs	r1, #0
 8000d44:	2078      	movs	r0, #120	; 0x78
 8000d46:	f000 fa19 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000d4a:	2212      	movs	r2, #18
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2078      	movs	r0, #120	; 0x78
 8000d50:	f000 fa14 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000d54:	22db      	movs	r2, #219	; 0xdb
 8000d56:	2100      	movs	r1, #0
 8000d58:	2078      	movs	r0, #120	; 0x78
 8000d5a:	f000 fa0f 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000d5e:	2220      	movs	r2, #32
 8000d60:	2100      	movs	r1, #0
 8000d62:	2078      	movs	r0, #120	; 0x78
 8000d64:	f000 fa0a 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000d68:	228d      	movs	r2, #141	; 0x8d
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	2078      	movs	r0, #120	; 0x78
 8000d6e:	f000 fa05 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000d72:	2214      	movs	r2, #20
 8000d74:	2100      	movs	r1, #0
 8000d76:	2078      	movs	r0, #120	; 0x78
 8000d78:	f000 fa00 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000d7c:	22af      	movs	r2, #175	; 0xaf
 8000d7e:	2100      	movs	r1, #0
 8000d80:	2078      	movs	r0, #120	; 0x78
 8000d82:	f000 f9fb 	bl	800117c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000d86:	222e      	movs	r2, #46	; 0x2e
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2078      	movs	r0, #120	; 0x78
 8000d8c:	f000 f9f6 	bl	800117c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000d90:	2000      	movs	r0, #0
 8000d92:	f000 f843 	bl	8000e1c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000d96:	f000 f813 	bl	8000dc0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <SSD1306_Init+0x184>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <SSD1306_Init+0x184>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000da6:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <SSD1306_Init+0x184>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000dac:	2301      	movs	r3, #1
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000110 	.word	0x20000110
 8000dbc:	2000064c 	.word	0x2000064c

08000dc0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	71fb      	strb	r3, [r7, #7]
 8000dca:	e01d      	b.n	8000e08 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	3b50      	subs	r3, #80	; 0x50
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2078      	movs	r0, #120	; 0x78
 8000dd8:	f000 f9d0 	bl	800117c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2100      	movs	r1, #0
 8000de0:	2078      	movs	r0, #120	; 0x78
 8000de2:	f000 f9cb 	bl	800117c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000de6:	2210      	movs	r2, #16
 8000de8:	2100      	movs	r1, #0
 8000dea:	2078      	movs	r0, #120	; 0x78
 8000dec:	f000 f9c6 	bl	800117c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	01db      	lsls	r3, r3, #7
 8000df4:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <SSD1306_UpdateScreen+0x58>)
 8000df6:	441a      	add	r2, r3
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	2140      	movs	r1, #64	; 0x40
 8000dfc:	2078      	movs	r0, #120	; 0x78
 8000dfe:	f000 f957 	bl	80010b0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	3301      	adds	r3, #1
 8000e06:	71fb      	strb	r3, [r7, #7]
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2b07      	cmp	r3, #7
 8000e0c:	d9de      	bls.n	8000dcc <SSD1306_UpdateScreen+0xc>
	}
}
 8000e0e:	bf00      	nop
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	2000024c 	.word	0x2000024c

08000e1c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d101      	bne.n	8000e30 <SSD1306_Fill+0x14>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	e000      	b.n	8000e32 <SSD1306_Fill+0x16>
 8000e30:	23ff      	movs	r3, #255	; 0xff
 8000e32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e36:	4619      	mov	r1, r3
 8000e38:	4803      	ldr	r0, [pc, #12]	; (8000e48 <SSD1306_Fill+0x2c>)
 8000e3a:	f004 ff6d 	bl	8005d18 <memset>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	2000024c 	.word	0x2000024c

08000e4c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	80fb      	strh	r3, [r7, #6]
 8000e56:	460b      	mov	r3, r1
 8000e58:	80bb      	strh	r3, [r7, #4]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	70fb      	strb	r3, [r7, #3]
	if (
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	2b7f      	cmp	r3, #127	; 0x7f
 8000e62:	d848      	bhi.n	8000ef6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000e64:	88bb      	ldrh	r3, [r7, #4]
 8000e66:	2b3f      	cmp	r3, #63	; 0x3f
 8000e68:	d845      	bhi.n	8000ef6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000e6a:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <SSD1306_DrawPixel+0xb8>)
 8000e6c:	791b      	ldrb	r3, [r3, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d006      	beq.n	8000e80 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000e72:	78fb      	ldrb	r3, [r7, #3]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	bf0c      	ite	eq
 8000e78:	2301      	moveq	r3, #1
 8000e7a:	2300      	movne	r3, #0
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000e80:	78fb      	ldrb	r3, [r7, #3]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d11a      	bne.n	8000ebc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000e86:	88fa      	ldrh	r2, [r7, #6]
 8000e88:	88bb      	ldrh	r3, [r7, #4]
 8000e8a:	08db      	lsrs	r3, r3, #3
 8000e8c:	b298      	uxth	r0, r3
 8000e8e:	4603      	mov	r3, r0
 8000e90:	01db      	lsls	r3, r3, #7
 8000e92:	4413      	add	r3, r2
 8000e94:	4a1c      	ldr	r2, [pc, #112]	; (8000f08 <SSD1306_DrawPixel+0xbc>)
 8000e96:	5cd3      	ldrb	r3, [r2, r3]
 8000e98:	b25a      	sxtb	r2, r3
 8000e9a:	88bb      	ldrh	r3, [r7, #4]
 8000e9c:	f003 0307 	and.w	r3, r3, #7
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b259      	sxtb	r1, r3
 8000eac:	88fa      	ldrh	r2, [r7, #6]
 8000eae:	4603      	mov	r3, r0
 8000eb0:	01db      	lsls	r3, r3, #7
 8000eb2:	4413      	add	r3, r2
 8000eb4:	b2c9      	uxtb	r1, r1
 8000eb6:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <SSD1306_DrawPixel+0xbc>)
 8000eb8:	54d1      	strb	r1, [r2, r3]
 8000eba:	e01d      	b.n	8000ef8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000ebc:	88fa      	ldrh	r2, [r7, #6]
 8000ebe:	88bb      	ldrh	r3, [r7, #4]
 8000ec0:	08db      	lsrs	r3, r3, #3
 8000ec2:	b298      	uxth	r0, r3
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	01db      	lsls	r3, r3, #7
 8000ec8:	4413      	add	r3, r2
 8000eca:	4a0f      	ldr	r2, [pc, #60]	; (8000f08 <SSD1306_DrawPixel+0xbc>)
 8000ecc:	5cd3      	ldrb	r3, [r2, r3]
 8000ece:	b25a      	sxtb	r2, r3
 8000ed0:	88bb      	ldrh	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	b259      	sxtb	r1, r3
 8000ee6:	88fa      	ldrh	r2, [r7, #6]
 8000ee8:	4603      	mov	r3, r0
 8000eea:	01db      	lsls	r3, r3, #7
 8000eec:	4413      	add	r3, r2
 8000eee:	b2c9      	uxtb	r1, r1
 8000ef0:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <SSD1306_DrawPixel+0xbc>)
 8000ef2:	54d1      	strb	r1, [r2, r3]
 8000ef4:	e000      	b.n	8000ef8 <SSD1306_DrawPixel+0xac>
		return;
 8000ef6:	bf00      	nop
	}
}
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	2000064c 	.word	0x2000064c
 8000f08:	2000024c 	.word	0x2000024c

08000f0c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	460a      	mov	r2, r1
 8000f16:	80fb      	strh	r3, [r7, #6]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000f1c:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <SSD1306_GotoXY+0x28>)
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000f22:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <SSD1306_GotoXY+0x28>)
 8000f24:	88bb      	ldrh	r3, [r7, #4]
 8000f26:	8053      	strh	r3, [r2, #2]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	2000064c 	.word	0x2000064c

08000f38 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	6039      	str	r1, [r7, #0]
 8000f42:	71fb      	strb	r3, [r7, #7]
 8000f44:	4613      	mov	r3, r2
 8000f46:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000f48:	4b3a      	ldr	r3, [pc, #232]	; (8001034 <SSD1306_Putc+0xfc>)
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
	if (
 8000f54:	2b7f      	cmp	r3, #127	; 0x7f
 8000f56:	dc07      	bgt.n	8000f68 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000f58:	4b36      	ldr	r3, [pc, #216]	; (8001034 <SSD1306_Putc+0xfc>)
 8000f5a:	885b      	ldrh	r3, [r3, #2]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	785b      	ldrb	r3, [r3, #1]
 8000f62:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000f64:	2b3f      	cmp	r3, #63	; 0x3f
 8000f66:	dd01      	ble.n	8000f6c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e05e      	b.n	800102a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	e04b      	b.n	800100a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	3b20      	subs	r3, #32
 8000f7a:	6839      	ldr	r1, [r7, #0]
 8000f7c:	7849      	ldrb	r1, [r1, #1]
 8000f7e:	fb01 f303 	mul.w	r3, r1, r3
 8000f82:	4619      	mov	r1, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	440b      	add	r3, r1
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4413      	add	r3, r2
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	e030      	b.n	8000ff8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d010      	beq.n	8000fc8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000fa6:	4b23      	ldr	r3, [pc, #140]	; (8001034 <SSD1306_Putc+0xfc>)
 8000fa8:	881a      	ldrh	r2, [r3, #0]
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	4413      	add	r3, r2
 8000fb0:	b298      	uxth	r0, r3
 8000fb2:	4b20      	ldr	r3, [pc, #128]	; (8001034 <SSD1306_Putc+0xfc>)
 8000fb4:	885a      	ldrh	r2, [r3, #2]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	4413      	add	r3, r2
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	79ba      	ldrb	r2, [r7, #6]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f7ff ff43 	bl	8000e4c <SSD1306_DrawPixel>
 8000fc6:	e014      	b.n	8000ff2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <SSD1306_Putc+0xfc>)
 8000fca:	881a      	ldrh	r2, [r3, #0]
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	4413      	add	r3, r2
 8000fd2:	b298      	uxth	r0, r3
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <SSD1306_Putc+0xfc>)
 8000fd6:	885a      	ldrh	r2, [r3, #2]
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	4413      	add	r3, r2
 8000fde:	b299      	uxth	r1, r3
 8000fe0:	79bb      	ldrb	r3, [r7, #6]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	bf0c      	ite	eq
 8000fe6:	2301      	moveq	r3, #1
 8000fe8:	2300      	movne	r3, #0
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	461a      	mov	r2, r3
 8000fee:	f7ff ff2d 	bl	8000e4c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	4293      	cmp	r3, r2
 8001002:	d3c8      	bcc.n	8000f96 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	785b      	ldrb	r3, [r3, #1]
 800100e:	461a      	mov	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	4293      	cmp	r3, r2
 8001014:	d3ad      	bcc.n	8000f72 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <SSD1306_Putc+0xfc>)
 8001018:	881a      	ldrh	r2, [r3, #0]
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	b29b      	uxth	r3, r3
 8001020:	4413      	add	r3, r2
 8001022:	b29a      	uxth	r2, r3
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <SSD1306_Putc+0xfc>)
 8001026:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001028:	79fb      	ldrb	r3, [r7, #7]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	2000064c 	.word	0x2000064c

08001038 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	4613      	mov	r3, r2
 8001044:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001046:	e012      	b.n	800106e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	79fa      	ldrb	r2, [r7, #7]
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff71 	bl	8000f38 <SSD1306_Putc>
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	429a      	cmp	r2, r3
 8001060:	d002      	beq.n	8001068 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	e008      	b.n	800107a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	3301      	adds	r3, #1
 800106c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1e8      	bne.n	8001048 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	781b      	ldrb	r3, [r3, #0]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <ssd1306_I2C_Init+0x28>)
 800108c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800108e:	e002      	b.n	8001096 <ssd1306_I2C_Init+0x12>
		p--;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1f9      	bne.n	8001090 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	0003d090 	.word	0x0003d090

080010b0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b0c7      	sub	sp, #284	; 0x11c
 80010b4:	af02      	add	r7, sp, #8
 80010b6:	4604      	mov	r4, r0
 80010b8:	4608      	mov	r0, r1
 80010ba:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80010be:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80010c2:	600a      	str	r2, [r1, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010ca:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80010ce:	4622      	mov	r2, r4
 80010d0:	701a      	strb	r2, [r3, #0]
 80010d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010d6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80010da:	4602      	mov	r2, r0
 80010dc:	701a      	strb	r2, [r3, #0]
 80010de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010e6:	460a      	mov	r2, r1
 80010e8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80010ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80010f2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80010f6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80010fa:	7812      	ldrb	r2, [r2, #0]
 80010fc:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80010fe:	2300      	movs	r3, #0
 8001100:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001104:	e015      	b.n	8001132 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001106:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800110a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800110e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001112:	6812      	ldr	r2, [r2, #0]
 8001114:	441a      	add	r2, r3
 8001116:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800111a:	3301      	adds	r3, #1
 800111c:	7811      	ldrb	r1, [r2, #0]
 800111e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001122:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001126:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001128:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800112c:	3301      	adds	r3, #1
 800112e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001132:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001136:	b29b      	uxth	r3, r3
 8001138:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800113c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001140:	8812      	ldrh	r2, [r2, #0]
 8001142:	429a      	cmp	r2, r3
 8001144:	d8df      	bhi.n	8001106 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001146:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800114a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b299      	uxth	r1, r3
 8001152:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001156:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	3301      	adds	r3, #1
 800115e:	b29b      	uxth	r3, r3
 8001160:	f107 020c 	add.w	r2, r7, #12
 8001164:	200a      	movs	r0, #10
 8001166:	9000      	str	r0, [sp, #0]
 8001168:	4803      	ldr	r0, [pc, #12]	; (8001178 <ssd1306_I2C_WriteMulti+0xc8>)
 800116a:	f002 f82f 	bl	80031cc <HAL_I2C_Master_Transmit>
}
 800116e:	bf00      	nop
 8001170:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001174:	46bd      	mov	sp, r7
 8001176:	bd90      	pop	{r4, r7, pc}
 8001178:	20000110 	.word	0x20000110

0800117c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af02      	add	r7, sp, #8
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
 8001186:	460b      	mov	r3, r1
 8001188:	71bb      	strb	r3, [r7, #6]
 800118a:	4613      	mov	r3, r2
 800118c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800118e:	79bb      	ldrb	r3, [r7, #6]
 8001190:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001192:	797b      	ldrb	r3, [r7, #5]
 8001194:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	b299      	uxth	r1, r3
 800119a:	f107 020c 	add.w	r2, r7, #12
 800119e:	230a      	movs	r3, #10
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2302      	movs	r3, #2
 80011a4:	4803      	ldr	r0, [pc, #12]	; (80011b4 <ssd1306_I2C_Write+0x38>)
 80011a6:	f002 f811 	bl	80031cc <HAL_I2C_Master_Transmit>
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000110 	.word	0x20000110

080011b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HAL_MspInit+0x44>)
 80011c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c2:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <HAL_MspInit+0x44>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6613      	str	r3, [r2, #96]	; 0x60
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HAL_MspInit+0x44>)
 80011cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_MspInit+0x44>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	4a08      	ldr	r2, [pc, #32]	; (80011fc <HAL_MspInit+0x44>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	6593      	str	r3, [r2, #88]	; 0x58
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_MspInit+0x44>)
 80011e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000

08001200 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a15      	ldr	r2, [pc, #84]	; (8001274 <HAL_ADC_MspInit+0x74>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d123      	bne.n	800126a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <HAL_ADC_MspInit+0x78>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	4a14      	ldr	r2, [pc, #80]	; (8001278 <HAL_ADC_MspInit+0x78>)
 8001228:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800122c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_ADC_MspInit+0x78>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <HAL_ADC_MspInit+0x78>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <HAL_ADC_MspInit+0x78>)
 8001240:	f043 0304 	orr.w	r3, r3, #4
 8001244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <HAL_ADC_MspInit+0x78>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001252:	2301      	movs	r3, #1
 8001254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001256:	230b      	movs	r3, #11
 8001258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <HAL_ADC_MspInit+0x7c>)
 8001266:	f001 fd5f 	bl	8002d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	; 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	50040000 	.word	0x50040000
 8001278:	40021000 	.word	0x40021000
 800127c:	48000800 	.word	0x48000800

08001280 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a17      	ldr	r2, [pc, #92]	; (80012fc <HAL_I2C_MspInit+0x7c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d127      	bne.n	80012f2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_I2C_MspInit+0x80>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	4a16      	ldr	r2, [pc, #88]	; (8001300 <HAL_I2C_MspInit+0x80>)
 80012a8:	f043 0302 	orr.w	r3, r3, #2
 80012ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <HAL_I2C_MspInit+0x80>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012ba:	23c0      	movs	r3, #192	; 0xc0
 80012bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012be:	2312      	movs	r3, #18
 80012c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ca:	2304      	movs	r3, #4
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	480b      	ldr	r0, [pc, #44]	; (8001304 <HAL_I2C_MspInit+0x84>)
 80012d6:	f001 fd27 	bl	8002d28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <HAL_I2C_MspInit+0x80>)
 80012dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012de:	4a08      	ldr	r2, [pc, #32]	; (8001300 <HAL_I2C_MspInit+0x80>)
 80012e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012e4:	6593      	str	r3, [r2, #88]	; 0x58
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_I2C_MspInit+0x80>)
 80012e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	3728      	adds	r7, #40	; 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40005400 	.word	0x40005400
 8001300:	40021000 	.word	0x40021000
 8001304:	48000400 	.word	0x48000400

08001308 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a25      	ldr	r2, [pc, #148]	; (80013bc <HAL_SPI_MspInit+0xb4>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d144      	bne.n	80013b4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800132a:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <HAL_SPI_MspInit+0xb8>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132e:	4a24      	ldr	r2, [pc, #144]	; (80013c0 <HAL_SPI_MspInit+0xb8>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001334:	6593      	str	r3, [r2, #88]	; 0x58
 8001336:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <HAL_SPI_MspInit+0xb8>)
 8001338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <HAL_SPI_MspInit+0xb8>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	4a1e      	ldr	r2, [pc, #120]	; (80013c0 <HAL_SPI_MspInit+0xb8>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <HAL_SPI_MspInit+0xb8>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <HAL_SPI_MspInit+0xb8>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	4a18      	ldr	r2, [pc, #96]	; (80013c0 <HAL_SPI_MspInit+0xb8>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001366:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <HAL_SPI_MspInit+0xb8>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001372:	230c      	movs	r3, #12
 8001374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137e:	2303      	movs	r3, #3
 8001380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001382:	2305      	movs	r3, #5
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	480d      	ldr	r0, [pc, #52]	; (80013c4 <HAL_SPI_MspInit+0xbc>)
 800138e:	f001 fccb 	bl	8002d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013a4:	2305      	movs	r3, #5
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4619      	mov	r1, r3
 80013ae:	4806      	ldr	r0, [pc, #24]	; (80013c8 <HAL_SPI_MspInit+0xc0>)
 80013b0:	f001 fcba 	bl	8002d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80013b4:	bf00      	nop
 80013b6:	3728      	adds	r7, #40	; 0x28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40003800 	.word	0x40003800
 80013c0:	40021000 	.word	0x40021000
 80013c4:	48000800 	.word	0x48000800
 80013c8:	48000400 	.word	0x48000400

080013cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a17      	ldr	r2, [pc, #92]	; (8001448 <HAL_UART_MspInit+0x7c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d128      	bne.n	8001440 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ee:	4b17      	ldr	r3, [pc, #92]	; (800144c <HAL_UART_MspInit+0x80>)
 80013f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f2:	4a16      	ldr	r2, [pc, #88]	; (800144c <HAL_UART_MspInit+0x80>)
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f8:	6593      	str	r3, [r2, #88]	; 0x58
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <HAL_UART_MspInit+0x80>)
 80013fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <HAL_UART_MspInit+0x80>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	4a10      	ldr	r2, [pc, #64]	; (800144c <HAL_UART_MspInit+0x80>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <HAL_UART_MspInit+0x80>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800141e:	230c      	movs	r3, #12
 8001420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142a:	2303      	movs	r3, #3
 800142c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800142e:	2307      	movs	r3, #7
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143c:	f001 fc74 	bl	8002d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001440:	bf00      	nop
 8001442:	3728      	adds	r7, #40	; 0x28
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40004400 	.word	0x40004400
 800144c:	40021000 	.word	0x40021000

08001450 <SDTimer_Handler>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void SDTimer_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <SDTimer_Handler+0x40>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d006      	beq.n	800146c <SDTimer_Handler+0x1c>
    Timer1--;
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <SDTimer_Handler+0x40>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	3b01      	subs	r3, #1
 8001466:	b2da      	uxtb	r2, r3
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <SDTimer_Handler+0x40>)
 800146a:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <SDTimer_Handler+0x44>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d006      	beq.n	8001484 <SDTimer_Handler+0x34>
    Timer2--;
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <SDTimer_Handler+0x44>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	3b01      	subs	r3, #1
 800147e:	b2da      	uxtb	r2, r3
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <SDTimer_Handler+0x44>)
 8001482:	701a      	strb	r2, [r3, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000653 	.word	0x20000653
 8001494:	20000654 	.word	0x20000654

08001498 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <SysTick_Handler+0x30>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	3301      	adds	r3, #1
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <SysTick_Handler+0x30>)
 80014a8:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <SysTick_Handler+0x30>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b09      	cmp	r3, #9
 80014b2:	d904      	bls.n	80014be <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <SysTick_Handler+0x30>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 80014ba:	f7ff ffc9 	bl	8001450 <SDTimer_Handler>
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014be:	f000 f91f 	bl	8001700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000652 	.word	0x20000652

080014cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <HardFault_Handler+0x4>

080014e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <MemManage_Handler+0x4>

080014e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <BusFault_Handler+0x4>

080014ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <UsageFault_Handler+0x4>

080014f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001524:	4a14      	ldr	r2, [pc, #80]	; (8001578 <_sbrk+0x5c>)
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <_sbrk+0x60>)
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001530:	4b13      	ldr	r3, [pc, #76]	; (8001580 <_sbrk+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d102      	bne.n	800153e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <_sbrk+0x64>)
 800153a:	4a12      	ldr	r2, [pc, #72]	; (8001584 <_sbrk+0x68>)
 800153c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <_sbrk+0x64>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	429a      	cmp	r2, r3
 800154a:	d207      	bcs.n	800155c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800154c:	f004 fbba 	bl	8005cc4 <__errno>
 8001550:	4603      	mov	r3, r0
 8001552:	220c      	movs	r2, #12
 8001554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800155a:	e009      	b.n	8001570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <_sbrk+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001562:	4b07      	ldr	r3, [pc, #28]	; (8001580 <_sbrk+0x64>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	4a05      	ldr	r2, [pc, #20]	; (8001580 <_sbrk+0x64>)
 800156c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800156e:	68fb      	ldr	r3, [r7, #12]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20018000 	.word	0x20018000
 800157c:	00000400 	.word	0x00000400
 8001580:	20000658 	.word	0x20000658
 8001584:	20000688 	.word	0x20000688

08001588 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800158c:	4b17      	ldr	r3, [pc, #92]	; (80015ec <SystemInit+0x64>)
 800158e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001592:	4a16      	ldr	r2, [pc, #88]	; (80015ec <SystemInit+0x64>)
 8001594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <SystemInit+0x68>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a13      	ldr	r2, [pc, #76]	; (80015f0 <SystemInit+0x68>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <SystemInit+0x68>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <SystemInit+0x68>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a0f      	ldr	r2, [pc, #60]	; (80015f0 <SystemInit+0x68>)
 80015b4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80015b8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80015bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <SystemInit+0x68>)
 80015c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015c4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <SystemInit+0x68>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a09      	ldr	r2, [pc, #36]	; (80015f0 <SystemInit+0x68>)
 80015cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <SystemInit+0x68>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <SystemInit+0x64>)
 80015da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015de:	609a      	str	r2, [r3, #8]
#endif
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000ed00 	.word	0xe000ed00
 80015f0:	40021000 	.word	0x40021000

080015f4 <Reset_Handler>:
 80015f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800162c <LoopForever+0x2>
 80015f8:	f7ff ffc6 	bl	8001588 <SystemInit>
 80015fc:	2100      	movs	r1, #0
 80015fe:	e003      	b.n	8001608 <LoopCopyDataInit>

08001600 <CopyDataInit>:
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <LoopForever+0x6>)
 8001602:	585b      	ldr	r3, [r3, r1]
 8001604:	5043      	str	r3, [r0, r1]
 8001606:	3104      	adds	r1, #4

08001608 <LoopCopyDataInit>:
 8001608:	480a      	ldr	r0, [pc, #40]	; (8001634 <LoopForever+0xa>)
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <LoopForever+0xe>)
 800160c:	1842      	adds	r2, r0, r1
 800160e:	429a      	cmp	r2, r3
 8001610:	d3f6      	bcc.n	8001600 <CopyDataInit>
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <LoopForever+0x12>)
 8001614:	e002      	b.n	800161c <LoopFillZerobss>

08001616 <FillZerobss>:
 8001616:	2300      	movs	r3, #0
 8001618:	f842 3b04 	str.w	r3, [r2], #4

0800161c <LoopFillZerobss>:
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <LoopForever+0x16>)
 800161e:	429a      	cmp	r2, r3
 8001620:	d3f9      	bcc.n	8001616 <FillZerobss>
 8001622:	f004 fb55 	bl	8005cd0 <__libc_init_array>
 8001626:	f7fe ffad 	bl	8000584 <main>

0800162a <LoopForever>:
 800162a:	e7fe      	b.n	800162a <LoopForever>
 800162c:	20018000 	.word	0x20018000
 8001630:	08007434 	.word	0x08007434
 8001634:	20000000 	.word	0x20000000
 8001638:	20000090 	.word	0x20000090
 800163c:	20000090 	.word	0x20000090
 8001640:	20000684 	.word	0x20000684

08001644 <ADC1_2_IRQHandler>:
 8001644:	e7fe      	b.n	8001644 <ADC1_2_IRQHandler>
	...

08001648 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <HAL_Init+0x3c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <HAL_Init+0x3c>)
 8001658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165e:	2003      	movs	r0, #3
 8001660:	f001 fb2e 	bl	8002cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001664:	2000      	movs	r0, #0
 8001666:	f000 f80f 	bl	8001688 <HAL_InitTick>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d002      	beq.n	8001676 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	71fb      	strb	r3, [r7, #7]
 8001674:	e001      	b.n	800167a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001676:	f7ff fd9f 	bl	80011b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800167a:	79fb      	ldrb	r3, [r7, #7]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40022000 	.word	0x40022000

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001694:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <HAL_InitTick+0x6c>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d023      	beq.n	80016e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_InitTick+0x70>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <HAL_InitTick+0x6c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4619      	mov	r1, r3
 80016a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f001 fb2b 	bl	8002d0e <HAL_SYSTICK_Config>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10f      	bne.n	80016de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b0f      	cmp	r3, #15
 80016c2:	d809      	bhi.n	80016d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c4:	2200      	movs	r2, #0
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016cc:	f001 fb03 	bl	8002cd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016d0:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <HAL_InitTick+0x74>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	e007      	b.n	80016e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
 80016dc:	e004      	b.n	80016e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	73fb      	strb	r3, [r7, #15]
 80016e2:	e001      	b.n	80016e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000014 	.word	0x20000014
 80016f8:	2000000c 	.word	0x2000000c
 80016fc:	20000010 	.word	0x20000010

08001700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_IncTick+0x20>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_IncTick+0x24>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <HAL_IncTick+0x24>)
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000014 	.word	0x20000014
 8001724:	2000065c 	.word	0x2000065c

08001728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_GetTick+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	2000065c 	.word	0x2000065c

08001740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001748:	f7ff ffee 	bl	8001728 <HAL_GetTick>
 800174c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001758:	d005      	beq.n	8001766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <HAL_Delay+0x44>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001766:	bf00      	nop
 8001768:	f7ff ffde 	bl	8001728 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	429a      	cmp	r2, r3
 8001776:	d8f7      	bhi.n	8001768 <HAL_Delay+0x28>
  {
  }
}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000014 	.word	0x20000014

08001788 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	431a      	orrs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	609a      	str	r2, [r3, #8]
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	609a      	str	r2, [r3, #8]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3360      	adds	r3, #96	; 0x60
 8001802:	461a      	mov	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <LL_ADC_SetOffset+0x44>)
 8001812:	4013      	ands	r3, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	4313      	orrs	r3, r2
 8001820:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001828:	bf00      	nop
 800182a:	371c      	adds	r7, #28
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	03fff000 	.word	0x03fff000

08001838 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3360      	adds	r3, #96	; 0x60
 8001846:	461a      	mov	r2, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001858:	4618      	mov	r0, r3
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	3360      	adds	r3, #96	; 0x60
 8001874:	461a      	mov	r2, r3
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	431a      	orrs	r2, r3
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800188e:	bf00      	nop
 8001890:	371c      	adds	r7, #28
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018ae:	2301      	movs	r3, #1
 80018b0:	e000      	b.n	80018b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	3330      	adds	r3, #48	; 0x30
 80018d0:	461a      	mov	r2, r3
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	f003 030c 	and.w	r3, r3, #12
 80018dc:	4413      	add	r3, r2
 80018de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	f003 031f 	and.w	r3, r3, #31
 80018ea:	211f      	movs	r1, #31
 80018ec:	fa01 f303 	lsl.w	r3, r1, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	401a      	ands	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	0e9b      	lsrs	r3, r3, #26
 80018f8:	f003 011f 	and.w	r1, r3, #31
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	f003 031f 	and.w	r3, r3, #31
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	431a      	orrs	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800190c:	bf00      	nop
 800190e:	371c      	adds	r7, #28
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001918:	b480      	push	{r7}
 800191a:	b087      	sub	sp, #28
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3314      	adds	r3, #20
 8001928:	461a      	mov	r2, r3
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	0e5b      	lsrs	r3, r3, #25
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	4413      	add	r3, r2
 8001936:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	0d1b      	lsrs	r3, r3, #20
 8001940:	f003 031f 	and.w	r3, r3, #31
 8001944:	2107      	movs	r1, #7
 8001946:	fa01 f303 	lsl.w	r3, r1, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	401a      	ands	r2, r3
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	0d1b      	lsrs	r3, r3, #20
 8001952:	f003 031f 	and.w	r3, r3, #31
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	431a      	orrs	r2, r3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001962:	bf00      	nop
 8001964:	371c      	adds	r7, #28
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001988:	43db      	mvns	r3, r3
 800198a:	401a      	ands	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f003 0318 	and.w	r3, r3, #24
 8001992:	4908      	ldr	r1, [pc, #32]	; (80019b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001994:	40d9      	lsrs	r1, r3
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	400b      	ands	r3, r1
 800199a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800199e:	431a      	orrs	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	0007ffff 	.word	0x0007ffff

080019b8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 031f 	and.w	r3, r3, #31
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6093      	str	r3, [r2, #8]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a28:	d101      	bne.n	8001a2e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a78:	d101      	bne.n	8001a7e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001aa0:	f043 0201 	orr.w	r2, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <LL_ADC_IsEnabled+0x18>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <LL_ADC_IsEnabled+0x1a>
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001aea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001aee:	f043 0204 	orr.w	r2, r3, #4
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d101      	bne.n	8001b1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d101      	bne.n	8001b40 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b089      	sub	sp, #36	; 0x24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e134      	b.n	8001dd4 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d109      	bne.n	8001b8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff fb41 	bl	8001200 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff3f 	bl	8001a14 <LL_ADC_IsDeepPowerDownEnabled>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d004      	beq.n	8001ba6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff25 	bl	80019f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ff5a 	bl	8001a64 <LL_ADC_IsInternalRegulatorEnabled>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d113      	bne.n	8001bde <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff ff3e 	bl	8001a3c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001bc0:	4b86      	ldr	r3, [pc, #536]	; (8001ddc <HAL_ADC_Init+0x28c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	099b      	lsrs	r3, r3, #6
 8001bc6:	4a86      	ldr	r2, [pc, #536]	; (8001de0 <HAL_ADC_Init+0x290>)
 8001bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bcc:	099b      	lsrs	r3, r3, #6
 8001bce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bd0:	e002      	b.n	8001bd8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f9      	bne.n	8001bd2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff ff3e 	bl	8001a64 <LL_ADC_IsInternalRegulatorEnabled>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10d      	bne.n	8001c0a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf2:	f043 0210 	orr.w	r2, r3, #16
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfe:	f043 0201 	orr.w	r2, r3, #1
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ff77 	bl	8001b02 <LL_ADC_REG_IsConversionOngoing>
 8001c14:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1a:	f003 0310 	and.w	r3, r3, #16
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f040 80cf 	bne.w	8001dc2 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f040 80cb 	bne.w	8001dc2 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c30:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c34:	f043 0202 	orr.w	r2, r3, #2
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff37 	bl	8001ab4 <LL_ADC_IsEnabled>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d115      	bne.n	8001c78 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c4c:	4865      	ldr	r0, [pc, #404]	; (8001de4 <HAL_ADC_Init+0x294>)
 8001c4e:	f7ff ff31 	bl	8001ab4 <LL_ADC_IsEnabled>
 8001c52:	4604      	mov	r4, r0
 8001c54:	4864      	ldr	r0, [pc, #400]	; (8001de8 <HAL_ADC_Init+0x298>)
 8001c56:	f7ff ff2d 	bl	8001ab4 <LL_ADC_IsEnabled>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	431c      	orrs	r4, r3
 8001c5e:	4863      	ldr	r0, [pc, #396]	; (8001dec <HAL_ADC_Init+0x29c>)
 8001c60:	f7ff ff28 	bl	8001ab4 <LL_ADC_IsEnabled>
 8001c64:	4603      	mov	r3, r0
 8001c66:	4323      	orrs	r3, r4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d105      	bne.n	8001c78 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	4619      	mov	r1, r3
 8001c72:	485f      	ldr	r0, [pc, #380]	; (8001df0 <HAL_ADC_Init+0x2a0>)
 8001c74:	f7ff fd88 	bl	8001788 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	7e5b      	ldrb	r3, [r3, #25]
 8001c7c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c82:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001c88:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001c8e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c96:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d106      	bne.n	8001cb4 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	3b01      	subs	r3, #1
 8001cac:	045b      	lsls	r3, r3, #17
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d009      	beq.n	8001cd0 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	4b47      	ldr	r3, [pc, #284]	; (8001df4 <HAL_ADC_Init+0x2a4>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	69b9      	ldr	r1, [r7, #24]
 8001ce0:	430b      	orrs	r3, r1
 8001ce2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff0a 	bl	8001b02 <LL_ADC_REG_IsConversionOngoing>
 8001cee:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff17 	bl	8001b28 <LL_ADC_INJ_IsConversionOngoing>
 8001cfa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d13d      	bne.n	8001d7e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d13a      	bne.n	8001d7e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d0c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d14:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d24:	f023 0302 	bic.w	r3, r3, #2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	69b9      	ldr	r1, [r7, #24]
 8001d2e:	430b      	orrs	r3, r1
 8001d30:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d118      	bne.n	8001d6e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d46:	f023 0304 	bic.w	r3, r3, #4
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d52:	4311      	orrs	r1, r2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d58:	4311      	orrs	r1, r2
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0201 	orr.w	r2, r2, #1
 8001d6a:	611a      	str	r2, [r3, #16]
 8001d6c:	e007      	b.n	8001d7e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0201 	bic.w	r2, r2, #1
 8001d7c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d10c      	bne.n	8001da0 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	f023 010f 	bic.w	r1, r3, #15
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	1e5a      	subs	r2, r3, #1
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d9e:	e007      	b.n	8001db0 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 020f 	bic.w	r2, r2, #15
 8001dae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db4:	f023 0303 	bic.w	r3, r3, #3
 8001db8:	f043 0201 	orr.w	r2, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	655a      	str	r2, [r3, #84]	; 0x54
 8001dc0:	e007      	b.n	8001dd2 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc6:	f043 0210 	orr.w	r2, r3, #16
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dd2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3724      	adds	r7, #36	; 0x24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd90      	pop	{r4, r7, pc}
 8001ddc:	2000000c 	.word	0x2000000c
 8001de0:	053e2d63 	.word	0x053e2d63
 8001de4:	50040000 	.word	0x50040000
 8001de8:	50040100 	.word	0x50040100
 8001dec:	50040200 	.word	0x50040200
 8001df0:	50040300 	.word	0x50040300
 8001df4:	fff0c007 	.word	0xfff0c007

08001df8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e00:	4857      	ldr	r0, [pc, #348]	; (8001f60 <HAL_ADC_Start+0x168>)
 8001e02:	f7ff fdd9 	bl	80019b8 <LL_ADC_GetMultimode>
 8001e06:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fe78 	bl	8001b02 <LL_ADC_REG_IsConversionOngoing>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f040 809c 	bne.w	8001f52 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_ADC_Start+0x30>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e097      	b.n	8001f58 <HAL_ADC_Start+0x160>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 fd67 	bl	8002904 <ADC_Enable>
 8001e36:	4603      	mov	r3, r0
 8001e38:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e3a:	7dfb      	ldrb	r3, [r7, #23]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f040 8083 	bne.w	8001f48 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e46:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e4a:	f023 0301 	bic.w	r3, r3, #1
 8001e4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a42      	ldr	r2, [pc, #264]	; (8001f64 <HAL_ADC_Start+0x16c>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d002      	beq.n	8001e66 <HAL_ADC_Start+0x6e>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	e000      	b.n	8001e68 <HAL_ADC_Start+0x70>
 8001e66:	4b40      	ldr	r3, [pc, #256]	; (8001f68 <HAL_ADC_Start+0x170>)
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6812      	ldr	r2, [r2, #0]
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d002      	beq.n	8001e76 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d105      	bne.n	8001e82 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e8e:	d106      	bne.n	8001e9e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e94:	f023 0206 	bic.w	r2, r3, #6
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	659a      	str	r2, [r3, #88]	; 0x58
 8001e9c:	e002      	b.n	8001ea4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	221c      	movs	r2, #28
 8001eaa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a2a      	ldr	r2, [pc, #168]	; (8001f64 <HAL_ADC_Start+0x16c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d002      	beq.n	8001ec4 <HAL_ADC_Start+0xcc>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	e000      	b.n	8001ec6 <HAL_ADC_Start+0xce>
 8001ec4:	4b28      	ldr	r3, [pc, #160]	; (8001f68 <HAL_ADC_Start+0x170>)
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d008      	beq.n	8001ee0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	2b05      	cmp	r3, #5
 8001ed8:	d002      	beq.n	8001ee0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	2b09      	cmp	r3, #9
 8001ede:	d114      	bne.n	8001f0a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ef6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fde9 	bl	8001ada <LL_ADC_REG_StartConversion>
 8001f08:	e025      	b.n	8001f56 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <HAL_ADC_Start+0x16c>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d002      	beq.n	8001f26 <HAL_ADC_Start+0x12e>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	e000      	b.n	8001f28 <HAL_ADC_Start+0x130>
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <HAL_ADC_Start+0x170>)
 8001f28:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00f      	beq.n	8001f56 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f3e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	655a      	str	r2, [r3, #84]	; 0x54
 8001f46:	e006      	b.n	8001f56 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001f50:	e001      	b.n	8001f56 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f52:	2302      	movs	r3, #2
 8001f54:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	50040300 	.word	0x50040300
 8001f64:	50040100 	.word	0x50040100
 8001f68:	50040000 	.word	0x50040000

08001f6c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f76:	4862      	ldr	r0, [pc, #392]	; (8002100 <HAL_ADC_PollForConversion+0x194>)
 8001f78:	f7ff fd1e 	bl	80019b8 <LL_ADC_GetMultimode>
 8001f7c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d102      	bne.n	8001f8c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001f86:	2308      	movs	r3, #8
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	e02a      	b.n	8001fe2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d005      	beq.n	8001f9e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	2b05      	cmp	r3, #5
 8001f96:	d002      	beq.n	8001f9e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	2b09      	cmp	r3, #9
 8001f9c:	d111      	bne.n	8001fc2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d007      	beq.n	8001fbc <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb0:	f043 0220 	orr.w	r2, r3, #32
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e09d      	b.n	80020f8 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001fbc:	2304      	movs	r3, #4
 8001fbe:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001fc0:	e00f      	b.n	8001fe2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001fc2:	484f      	ldr	r0, [pc, #316]	; (8002100 <HAL_ADC_PollForConversion+0x194>)
 8001fc4:	f7ff fd06 	bl	80019d4 <LL_ADC_GetMultiDMATransfer>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d007      	beq.n	8001fde <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd2:	f043 0220 	orr.w	r2, r3, #32
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e08c      	b.n	80020f8 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001fde:	2304      	movs	r3, #4
 8001fe0:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001fe2:	f7ff fba1 	bl	8001728 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fe8:	e01a      	b.n	8002020 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ff0:	d016      	beq.n	8002020 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001ff2:	f7ff fb99 	bl	8001728 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d302      	bcc.n	8002008 <HAL_ADC_PollForConversion+0x9c>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10b      	bne.n	8002020 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200c:	f043 0204 	orr.w	r2, r3, #4
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e06b      	b.n	80020f8 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	4013      	ands	r3, r2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0dd      	beq.n	8001fea <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002032:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fc2b 	bl	800189a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d01c      	beq.n	8002084 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	7e5b      	ldrb	r3, [r3, #25]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d118      	bne.n	8002084 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	2b08      	cmp	r3, #8
 800205e:	d111      	bne.n	8002084 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002064:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002070:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d105      	bne.n	8002084 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207c:	f043 0201 	orr.w	r2, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a1e      	ldr	r2, [pc, #120]	; (8002104 <HAL_ADC_PollForConversion+0x198>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d002      	beq.n	8002094 <HAL_ADC_PollForConversion+0x128>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	e000      	b.n	8002096 <HAL_ADC_PollForConversion+0x12a>
 8002094:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <HAL_ADC_PollForConversion+0x19c>)
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6812      	ldr	r2, [r2, #0]
 800209a:	4293      	cmp	r3, r2
 800209c:	d008      	beq.n	80020b0 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	2b05      	cmp	r3, #5
 80020a8:	d002      	beq.n	80020b0 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2b09      	cmp	r3, #9
 80020ae:	d104      	bne.n	80020ba <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	61bb      	str	r3, [r7, #24]
 80020b8:	e00c      	b.n	80020d4 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a11      	ldr	r2, [pc, #68]	; (8002104 <HAL_ADC_PollForConversion+0x198>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d002      	beq.n	80020ca <HAL_ADC_PollForConversion+0x15e>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	e000      	b.n	80020cc <HAL_ADC_PollForConversion+0x160>
 80020ca:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <HAL_ADC_PollForConversion+0x19c>)
 80020cc:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d104      	bne.n	80020e4 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2208      	movs	r2, #8
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	e008      	b.n	80020f6 <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d103      	bne.n	80020f6 <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	220c      	movs	r2, #12
 80020f4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3720      	adds	r7, #32
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	50040300 	.word	0x50040300
 8002104:	50040100 	.word	0x50040100
 8002108:	50040000 	.word	0x50040000

0800210c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b0b6      	sub	sp, #216	; 0xd8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002142:	2b01      	cmp	r3, #1
 8002144:	d101      	bne.n	800214a <HAL_ADC_ConfigChannel+0x22>
 8002146:	2302      	movs	r3, #2
 8002148:	e3c6      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x7b0>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fcd3 	bl	8001b02 <LL_ADC_REG_IsConversionOngoing>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	f040 83a7 	bne.w	80028b2 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b05      	cmp	r3, #5
 800216a:	d824      	bhi.n	80021b6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	3b02      	subs	r3, #2
 8002172:	2b03      	cmp	r3, #3
 8002174:	d81b      	bhi.n	80021ae <HAL_ADC_ConfigChannel+0x86>
 8002176:	a201      	add	r2, pc, #4	; (adr r2, 800217c <HAL_ADC_ConfigChannel+0x54>)
 8002178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217c:	0800218d 	.word	0x0800218d
 8002180:	08002195 	.word	0x08002195
 8002184:	0800219d 	.word	0x0800219d
 8002188:	080021a5 	.word	0x080021a5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	220c      	movs	r2, #12
 8002190:	605a      	str	r2, [r3, #4]
          break;
 8002192:	e011      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	2212      	movs	r2, #18
 8002198:	605a      	str	r2, [r3, #4]
          break;
 800219a:	e00d      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	2218      	movs	r2, #24
 80021a0:	605a      	str	r2, [r3, #4]
          break;
 80021a2:	e009      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021aa:	605a      	str	r2, [r3, #4]
          break;
 80021ac:	e004      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2206      	movs	r2, #6
 80021b2:	605a      	str	r2, [r3, #4]
          break;
 80021b4:	e000      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80021b6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6818      	ldr	r0, [r3, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	6859      	ldr	r1, [r3, #4]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	f7ff fb7b 	bl	80018c0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff fc97 	bl	8001b02 <LL_ADC_REG_IsConversionOngoing>
 80021d4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff fca3 	bl	8001b28 <LL_ADC_INJ_IsConversionOngoing>
 80021e2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 81a6 	bne.w	800253c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f040 81a1 	bne.w	800253c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	6819      	ldr	r1, [r3, #0]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	461a      	mov	r2, r3
 8002208:	f7ff fb86 	bl	8001918 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	695a      	ldr	r2, [r3, #20]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	08db      	lsrs	r3, r3, #3
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	2b04      	cmp	r3, #4
 800222c:	d00a      	beq.n	8002244 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	6919      	ldr	r1, [r3, #16]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800223e:	f7ff fad7 	bl	80017f0 <LL_ADC_SetOffset>
 8002242:	e17b      	b.n	800253c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2100      	movs	r1, #0
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff faf4 	bl	8001838 <LL_ADC_GetOffsetChannel>
 8002250:	4603      	mov	r3, r0
 8002252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10a      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x148>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fae9 	bl	8001838 <LL_ADC_GetOffsetChannel>
 8002266:	4603      	mov	r3, r0
 8002268:	0e9b      	lsrs	r3, r3, #26
 800226a:	f003 021f 	and.w	r2, r3, #31
 800226e:	e01e      	b.n	80022ae <HAL_ADC_ConfigChannel+0x186>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff fade 	bl	8001838 <LL_ADC_GetOffsetChannel>
 800227c:	4603      	mov	r3, r0
 800227e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002286:	fa93 f3a3 	rbit	r3, r3
 800228a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800228e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002292:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002296:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800229e:	2320      	movs	r3, #32
 80022a0:	e004      	b.n	80022ac <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80022a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022a6:	fab3 f383 	clz	r3, r3
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d105      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x19e>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	0e9b      	lsrs	r3, r3, #26
 80022c0:	f003 031f 	and.w	r3, r3, #31
 80022c4:	e018      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x1d0>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022d2:	fa93 f3a3 	rbit	r3, r3
 80022d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80022da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80022e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80022ea:	2320      	movs	r3, #32
 80022ec:	e004      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80022ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022f2:	fab3 f383 	clz	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d106      	bne.n	800230a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2200      	movs	r2, #0
 8002302:	2100      	movs	r1, #0
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff faad 	bl	8001864 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2101      	movs	r1, #1
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fa91 	bl	8001838 <LL_ADC_GetOffsetChannel>
 8002316:	4603      	mov	r3, r0
 8002318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10a      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x20e>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2101      	movs	r1, #1
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fa86 	bl	8001838 <LL_ADC_GetOffsetChannel>
 800232c:	4603      	mov	r3, r0
 800232e:	0e9b      	lsrs	r3, r3, #26
 8002330:	f003 021f 	and.w	r2, r3, #31
 8002334:	e01e      	b.n	8002374 <HAL_ADC_ConfigChannel+0x24c>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2101      	movs	r1, #1
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fa7b 	bl	8001838 <LL_ADC_GetOffsetChannel>
 8002342:	4603      	mov	r3, r0
 8002344:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800234c:	fa93 f3a3 	rbit	r3, r3
 8002350:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002354:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002358:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800235c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002364:	2320      	movs	r3, #32
 8002366:	e004      	b.n	8002372 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002368:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800236c:	fab3 f383 	clz	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800237c:	2b00      	cmp	r3, #0
 800237e:	d105      	bne.n	800238c <HAL_ADC_ConfigChannel+0x264>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	0e9b      	lsrs	r3, r3, #26
 8002386:	f003 031f 	and.w	r3, r3, #31
 800238a:	e018      	b.n	80023be <HAL_ADC_ConfigChannel+0x296>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002394:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002398:	fa93 f3a3 	rbit	r3, r3
 800239c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80023a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80023a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80023b0:	2320      	movs	r3, #32
 80023b2:	e004      	b.n	80023be <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80023b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023b8:	fab3 f383 	clz	r3, r3
 80023bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023be:	429a      	cmp	r2, r3
 80023c0:	d106      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2200      	movs	r2, #0
 80023c8:	2101      	movs	r1, #1
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fa4a 	bl	8001864 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2102      	movs	r1, #2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fa2e 	bl	8001838 <LL_ADC_GetOffsetChannel>
 80023dc:	4603      	mov	r3, r0
 80023de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10a      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x2d4>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2102      	movs	r1, #2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fa23 	bl	8001838 <LL_ADC_GetOffsetChannel>
 80023f2:	4603      	mov	r3, r0
 80023f4:	0e9b      	lsrs	r3, r3, #26
 80023f6:	f003 021f 	and.w	r2, r3, #31
 80023fa:	e01e      	b.n	800243a <HAL_ADC_ConfigChannel+0x312>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2102      	movs	r1, #2
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fa18 	bl	8001838 <LL_ADC_GetOffsetChannel>
 8002408:	4603      	mov	r3, r0
 800240a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800241a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800241e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002422:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800242a:	2320      	movs	r3, #32
 800242c:	e004      	b.n	8002438 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800242e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002442:	2b00      	cmp	r3, #0
 8002444:	d105      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x32a>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	0e9b      	lsrs	r3, r3, #26
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	e016      	b.n	8002480 <HAL_ADC_ConfigChannel+0x358>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800245e:	fa93 f3a3 	rbit	r3, r3
 8002462:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002464:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002466:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800246a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002472:	2320      	movs	r3, #32
 8002474:	e004      	b.n	8002480 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002476:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800247a:	fab3 f383 	clz	r3, r3
 800247e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002480:	429a      	cmp	r2, r3
 8002482:	d106      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2200      	movs	r2, #0
 800248a:	2102      	movs	r1, #2
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff f9e9 	bl	8001864 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2103      	movs	r1, #3
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff f9cd 	bl	8001838 <LL_ADC_GetOffsetChannel>
 800249e:	4603      	mov	r3, r0
 80024a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10a      	bne.n	80024be <HAL_ADC_ConfigChannel+0x396>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2103      	movs	r1, #3
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff f9c2 	bl	8001838 <LL_ADC_GetOffsetChannel>
 80024b4:	4603      	mov	r3, r0
 80024b6:	0e9b      	lsrs	r3, r3, #26
 80024b8:	f003 021f 	and.w	r2, r3, #31
 80024bc:	e017      	b.n	80024ee <HAL_ADC_ConfigChannel+0x3c6>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2103      	movs	r1, #3
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff f9b7 	bl	8001838 <LL_ADC_GetOffsetChannel>
 80024ca:	4603      	mov	r3, r0
 80024cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024d0:	fa93 f3a3 	rbit	r3, r3
 80024d4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80024d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024d8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80024da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80024e0:	2320      	movs	r3, #32
 80024e2:	e003      	b.n	80024ec <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80024e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024e6:	fab3 f383 	clz	r3, r3
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d105      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x3de>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	0e9b      	lsrs	r3, r3, #26
 8002500:	f003 031f 	and.w	r3, r3, #31
 8002504:	e011      	b.n	800252a <HAL_ADC_ConfigChannel+0x402>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800250e:	fa93 f3a3 	rbit	r3, r3
 8002512:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002516:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800251e:	2320      	movs	r3, #32
 8002520:	e003      	b.n	800252a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002524:	fab3 f383 	clz	r3, r3
 8002528:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800252a:	429a      	cmp	r2, r3
 800252c:	d106      	bne.n	800253c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2200      	movs	r2, #0
 8002534:	2103      	movs	r1, #3
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff f994 	bl	8001864 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fab7 	bl	8001ab4 <LL_ADC_IsEnabled>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	f040 813f 	bne.w	80027cc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	6819      	ldr	r1, [r3, #0]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	461a      	mov	r2, r3
 800255c:	f7ff fa08 	bl	8001970 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	4a8e      	ldr	r2, [pc, #568]	; (80027a0 <HAL_ADC_ConfigChannel+0x678>)
 8002566:	4293      	cmp	r3, r2
 8002568:	f040 8130 	bne.w	80027cc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10b      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x46c>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	0e9b      	lsrs	r3, r3, #26
 8002582:	3301      	adds	r3, #1
 8002584:	f003 031f 	and.w	r3, r3, #31
 8002588:	2b09      	cmp	r3, #9
 800258a:	bf94      	ite	ls
 800258c:	2301      	movls	r3, #1
 800258e:	2300      	movhi	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	e019      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x4a0>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80025a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025a4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80025a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80025ac:	2320      	movs	r3, #32
 80025ae:	e003      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80025b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025b2:	fab3 f383 	clz	r3, r3
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	3301      	adds	r3, #1
 80025ba:	f003 031f 	and.w	r3, r3, #31
 80025be:	2b09      	cmp	r3, #9
 80025c0:	bf94      	ite	ls
 80025c2:	2301      	movls	r3, #1
 80025c4:	2300      	movhi	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d079      	beq.n	80026c0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d107      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x4c0>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	0e9b      	lsrs	r3, r3, #26
 80025de:	3301      	adds	r3, #1
 80025e0:	069b      	lsls	r3, r3, #26
 80025e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025e6:	e015      	b.n	8002614 <HAL_ADC_ConfigChannel+0x4ec>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025f0:	fa93 f3a3 	rbit	r3, r3
 80025f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80025fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002600:	2320      	movs	r3, #32
 8002602:	e003      	b.n	800260c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	3301      	adds	r3, #1
 800260e:	069b      	lsls	r3, r3, #26
 8002610:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800261c:	2b00      	cmp	r3, #0
 800261e:	d109      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x50c>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	0e9b      	lsrs	r3, r3, #26
 8002626:	3301      	adds	r3, #1
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	2101      	movs	r1, #1
 800262e:	fa01 f303 	lsl.w	r3, r1, r3
 8002632:	e017      	b.n	8002664 <HAL_ADC_ConfigChannel+0x53c>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800263c:	fa93 f3a3 	rbit	r3, r3
 8002640:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002644:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800264c:	2320      	movs	r3, #32
 800264e:	e003      	b.n	8002658 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	3301      	adds	r3, #1
 800265a:	f003 031f 	and.w	r3, r3, #31
 800265e:	2101      	movs	r1, #1
 8002660:	fa01 f303 	lsl.w	r3, r1, r3
 8002664:	ea42 0103 	orr.w	r1, r2, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10a      	bne.n	800268a <HAL_ADC_ConfigChannel+0x562>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	0e9b      	lsrs	r3, r3, #26
 800267a:	3301      	adds	r3, #1
 800267c:	f003 021f 	and.w	r2, r3, #31
 8002680:	4613      	mov	r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4413      	add	r3, r2
 8002686:	051b      	lsls	r3, r3, #20
 8002688:	e018      	b.n	80026bc <HAL_ADC_ConfigChannel+0x594>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002692:	fa93 f3a3 	rbit	r3, r3
 8002696:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800269c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80026a2:	2320      	movs	r3, #32
 80026a4:	e003      	b.n	80026ae <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80026a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026a8:	fab3 f383 	clz	r3, r3
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	3301      	adds	r3, #1
 80026b0:	f003 021f 	and.w	r2, r3, #31
 80026b4:	4613      	mov	r3, r2
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4413      	add	r3, r2
 80026ba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026bc:	430b      	orrs	r3, r1
 80026be:	e080      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d107      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x5b4>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	0e9b      	lsrs	r3, r3, #26
 80026d2:	3301      	adds	r3, #1
 80026d4:	069b      	lsls	r3, r3, #26
 80026d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026da:	e015      	b.n	8002708 <HAL_ADC_ConfigChannel+0x5e0>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e4:	fa93 f3a3 	rbit	r3, r3
 80026e8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80026ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ec:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80026ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80026f4:	2320      	movs	r3, #32
 80026f6:	e003      	b.n	8002700 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80026f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	3301      	adds	r3, #1
 8002702:	069b      	lsls	r3, r3, #26
 8002704:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002710:	2b00      	cmp	r3, #0
 8002712:	d109      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x600>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	0e9b      	lsrs	r3, r3, #26
 800271a:	3301      	adds	r3, #1
 800271c:	f003 031f 	and.w	r3, r3, #31
 8002720:	2101      	movs	r1, #1
 8002722:	fa01 f303 	lsl.w	r3, r1, r3
 8002726:	e017      	b.n	8002758 <HAL_ADC_ConfigChannel+0x630>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	fa93 f3a3 	rbit	r3, r3
 8002734:	61fb      	str	r3, [r7, #28]
  return result;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002740:	2320      	movs	r3, #32
 8002742:	e003      	b.n	800274c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	fab3 f383 	clz	r3, r3
 800274a:	b2db      	uxtb	r3, r3
 800274c:	3301      	adds	r3, #1
 800274e:	f003 031f 	and.w	r3, r3, #31
 8002752:	2101      	movs	r1, #1
 8002754:	fa01 f303 	lsl.w	r3, r1, r3
 8002758:	ea42 0103 	orr.w	r1, r2, r3
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10d      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x65c>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	0e9b      	lsrs	r3, r3, #26
 800276e:	3301      	adds	r3, #1
 8002770:	f003 021f 	and.w	r2, r3, #31
 8002774:	4613      	mov	r3, r2
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4413      	add	r3, r2
 800277a:	3b1e      	subs	r3, #30
 800277c:	051b      	lsls	r3, r3, #20
 800277e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002782:	e01d      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x698>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	fa93 f3a3 	rbit	r3, r3
 8002790:	613b      	str	r3, [r7, #16]
  return result;
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d103      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800279c:	2320      	movs	r3, #32
 800279e:	e005      	b.n	80027ac <HAL_ADC_ConfigChannel+0x684>
 80027a0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	fab3 f383 	clz	r3, r3
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	3301      	adds	r3, #1
 80027ae:	f003 021f 	and.w	r2, r3, #31
 80027b2:	4613      	mov	r3, r2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	4413      	add	r3, r2
 80027b8:	3b1e      	subs	r3, #30
 80027ba:	051b      	lsls	r3, r3, #20
 80027bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027c0:	430b      	orrs	r3, r1
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	6892      	ldr	r2, [r2, #8]
 80027c6:	4619      	mov	r1, r3
 80027c8:	f7ff f8a6 	bl	8001918 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4b43      	ldr	r3, [pc, #268]	; (80028e0 <HAL_ADC_ConfigChannel+0x7b8>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d079      	beq.n	80028cc <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027d8:	4842      	ldr	r0, [pc, #264]	; (80028e4 <HAL_ADC_ConfigChannel+0x7bc>)
 80027da:	f7fe fffb 	bl	80017d4 <LL_ADC_GetCommonPathInternalCh>
 80027de:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a40      	ldr	r2, [pc, #256]	; (80028e8 <HAL_ADC_ConfigChannel+0x7c0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d12b      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d125      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a3b      	ldr	r2, [pc, #236]	; (80028ec <HAL_ADC_ConfigChannel+0x7c4>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d004      	beq.n	800280c <HAL_ADC_ConfigChannel+0x6e4>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a3a      	ldr	r2, [pc, #232]	; (80028f0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d15c      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800280c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002810:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002814:	4619      	mov	r1, r3
 8002816:	4833      	ldr	r0, [pc, #204]	; (80028e4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002818:	f7fe ffc9 	bl	80017ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800281c:	4b35      	ldr	r3, [pc, #212]	; (80028f4 <HAL_ADC_ConfigChannel+0x7cc>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	099b      	lsrs	r3, r3, #6
 8002822:	4a35      	ldr	r2, [pc, #212]	; (80028f8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002824:	fba2 2303 	umull	r2, r3, r2, r3
 8002828:	099a      	lsrs	r2, r3, #6
 800282a:	4613      	mov	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002834:	e002      	b.n	800283c <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	3b01      	subs	r3, #1
 800283a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f9      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002842:	e040      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a2c      	ldr	r2, [pc, #176]	; (80028fc <HAL_ADC_ConfigChannel+0x7d4>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d118      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x758>
 800284e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002852:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d112      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a23      	ldr	r2, [pc, #140]	; (80028ec <HAL_ADC_ConfigChannel+0x7c4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d004      	beq.n	800286e <HAL_ADC_ConfigChannel+0x746>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a21      	ldr	r2, [pc, #132]	; (80028f0 <HAL_ADC_ConfigChannel+0x7c8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d12d      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800286e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002876:	4619      	mov	r1, r3
 8002878:	481a      	ldr	r0, [pc, #104]	; (80028e4 <HAL_ADC_ConfigChannel+0x7bc>)
 800287a:	f7fe ff98 	bl	80017ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800287e:	e024      	b.n	80028ca <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a1e      	ldr	r2, [pc, #120]	; (8002900 <HAL_ADC_ConfigChannel+0x7d8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d120      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800288a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800288e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d11a      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a14      	ldr	r2, [pc, #80]	; (80028ec <HAL_ADC_ConfigChannel+0x7c4>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d115      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028a8:	4619      	mov	r1, r3
 80028aa:	480e      	ldr	r0, [pc, #56]	; (80028e4 <HAL_ADC_ConfigChannel+0x7bc>)
 80028ac:	f7fe ff7f 	bl	80017ae <LL_ADC_SetCommonPathInternalCh>
 80028b0:	e00c      	b.n	80028cc <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b6:	f043 0220 	orr.w	r2, r3, #32
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80028c4:	e002      	b.n	80028cc <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028c6:	bf00      	nop
 80028c8:	e000      	b.n	80028cc <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028ca:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028d4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80028d8:	4618      	mov	r0, r3
 80028da:	37d8      	adds	r7, #216	; 0xd8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	80080000 	.word	0x80080000
 80028e4:	50040300 	.word	0x50040300
 80028e8:	c7520000 	.word	0xc7520000
 80028ec:	50040000 	.word	0x50040000
 80028f0:	50040200 	.word	0x50040200
 80028f4:	2000000c 	.word	0x2000000c
 80028f8:	053e2d63 	.word	0x053e2d63
 80028fc:	cb840000 	.word	0xcb840000
 8002900:	80000001 	.word	0x80000001

08002904 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff f8cf 	bl	8001ab4 <LL_ADC_IsEnabled>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d146      	bne.n	80029aa <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	4b24      	ldr	r3, [pc, #144]	; (80029b4 <ADC_Enable+0xb0>)
 8002924:	4013      	ands	r3, r2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00d      	beq.n	8002946 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292e:	f043 0210 	orr.w	r2, r3, #16
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293a:	f043 0201 	orr.w	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e032      	b.n	80029ac <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff f89e 	bl	8001a8c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002950:	f7fe feea 	bl	8001728 <HAL_GetTick>
 8002954:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002956:	e021      	b.n	800299c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff f8a9 	bl	8001ab4 <LL_ADC_IsEnabled>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d104      	bne.n	8002972 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff f88d 	bl	8001a8c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002972:	f7fe fed9 	bl	8001728 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d90d      	bls.n	800299c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002984:	f043 0210 	orr.w	r2, r3, #16
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002990:	f043 0201 	orr.w	r2, r3, #1
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e007      	b.n	80029ac <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d1d6      	bne.n	8002958 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	8000003f 	.word	0x8000003f

080029b8 <LL_ADC_IsEnabled>:
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <LL_ADC_IsEnabled+0x18>
 80029cc:	2301      	movs	r3, #1
 80029ce:	e000      	b.n	80029d2 <LL_ADC_IsEnabled+0x1a>
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <LL_ADC_REG_IsConversionOngoing>:
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d101      	bne.n	80029f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b09f      	sub	sp, #124	; 0x7c
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e08f      	b.n	8002b42 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a47      	ldr	r2, [pc, #284]	; (8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d102      	bne.n	8002a3a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002a34:	4b46      	ldr	r3, [pc, #280]	; (8002b50 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	e001      	b.n	8002a3e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10b      	bne.n	8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a48:	f043 0220 	orr.w	r2, r3, #32
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e072      	b.n	8002b42 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff ffbd 	bl	80029de <LL_ADC_REG_IsConversionOngoing>
 8002a64:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff ffb7 	bl	80029de <LL_ADC_REG_IsConversionOngoing>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d154      	bne.n	8002b20 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d151      	bne.n	8002b20 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a7c:	4b35      	ldr	r3, [pc, #212]	; (8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002a7e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d02c      	beq.n	8002ae2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	6859      	ldr	r1, [r3, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a9a:	035b      	lsls	r3, r3, #13
 8002a9c:	430b      	orrs	r3, r1
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aa4:	4829      	ldr	r0, [pc, #164]	; (8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002aa6:	f7ff ff87 	bl	80029b8 <LL_ADC_IsEnabled>
 8002aaa:	4604      	mov	r4, r0
 8002aac:	4828      	ldr	r0, [pc, #160]	; (8002b50 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002aae:	f7ff ff83 	bl	80029b8 <LL_ADC_IsEnabled>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	431c      	orrs	r4, r3
 8002ab6:	4828      	ldr	r0, [pc, #160]	; (8002b58 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ab8:	f7ff ff7e 	bl	80029b8 <LL_ADC_IsEnabled>
 8002abc:	4603      	mov	r3, r0
 8002abe:	4323      	orrs	r3, r4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d137      	bne.n	8002b34 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002acc:	f023 030f 	bic.w	r3, r3, #15
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	6811      	ldr	r1, [r2, #0]
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	6892      	ldr	r2, [r2, #8]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	431a      	orrs	r2, r3
 8002adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ade:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ae0:	e028      	b.n	8002b34 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aec:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aee:	4817      	ldr	r0, [pc, #92]	; (8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002af0:	f7ff ff62 	bl	80029b8 <LL_ADC_IsEnabled>
 8002af4:	4604      	mov	r4, r0
 8002af6:	4816      	ldr	r0, [pc, #88]	; (8002b50 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002af8:	f7ff ff5e 	bl	80029b8 <LL_ADC_IsEnabled>
 8002afc:	4603      	mov	r3, r0
 8002afe:	431c      	orrs	r4, r3
 8002b00:	4815      	ldr	r0, [pc, #84]	; (8002b58 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b02:	f7ff ff59 	bl	80029b8 <LL_ADC_IsEnabled>
 8002b06:	4603      	mov	r3, r0
 8002b08:	4323      	orrs	r3, r4
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d112      	bne.n	8002b34 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b16:	f023 030f 	bic.w	r3, r3, #15
 8002b1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b1c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b1e:	e009      	b.n	8002b34 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b24:	f043 0220 	orr.w	r2, r3, #32
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002b32:	e000      	b.n	8002b36 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b3e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	377c      	adds	r7, #124	; 0x7c
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd90      	pop	{r4, r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	50040000 	.word	0x50040000
 8002b50:	50040100 	.word	0x50040100
 8002b54:	50040300 	.word	0x50040300
 8002b58:	50040200 	.word	0x50040200

08002b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b8e:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	60d3      	str	r3, [r2, #12]
}
 8002b94:	bf00      	nop
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ba8:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <__NVIC_GetPriorityGrouping+0x18>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	0a1b      	lsrs	r3, r3, #8
 8002bae:	f003 0307 	and.w	r3, r3, #7
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	6039      	str	r1, [r7, #0]
 8002bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	db0a      	blt.n	8002bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	490c      	ldr	r1, [pc, #48]	; (8002c0c <__NVIC_SetPriority+0x4c>)
 8002bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bde:	0112      	lsls	r2, r2, #4
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	440b      	add	r3, r1
 8002be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002be8:	e00a      	b.n	8002c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	4908      	ldr	r1, [pc, #32]	; (8002c10 <__NVIC_SetPriority+0x50>)
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	3b04      	subs	r3, #4
 8002bf8:	0112      	lsls	r2, r2, #4
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	761a      	strb	r2, [r3, #24]
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	e000e100 	.word	0xe000e100
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b089      	sub	sp, #36	; 0x24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f1c3 0307 	rsb	r3, r3, #7
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	bf28      	it	cs
 8002c32:	2304      	movcs	r3, #4
 8002c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	2b06      	cmp	r3, #6
 8002c3c:	d902      	bls.n	8002c44 <NVIC_EncodePriority+0x30>
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3b03      	subs	r3, #3
 8002c42:	e000      	b.n	8002c46 <NVIC_EncodePriority+0x32>
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43da      	mvns	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	401a      	ands	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	43d9      	mvns	r1, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c6c:	4313      	orrs	r3, r2
         );
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3724      	adds	r7, #36	; 0x24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
	...

08002c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c8c:	d301      	bcc.n	8002c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e00f      	b.n	8002cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c92:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <SysTick_Config+0x40>)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c9a:	210f      	movs	r1, #15
 8002c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ca0:	f7ff ff8e 	bl	8002bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ca4:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <SysTick_Config+0x40>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002caa:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <SysTick_Config+0x40>)
 8002cac:	2207      	movs	r2, #7
 8002cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	e000e010 	.word	0xe000e010

08002cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff ff47 	bl	8002b5c <__NVIC_SetPriorityGrouping>
}
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b086      	sub	sp, #24
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	4603      	mov	r3, r0
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
 8002ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ce8:	f7ff ff5c 	bl	8002ba4 <__NVIC_GetPriorityGrouping>
 8002cec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	6978      	ldr	r0, [r7, #20]
 8002cf4:	f7ff ff8e 	bl	8002c14 <NVIC_EncodePriority>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cfe:	4611      	mov	r1, r2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff ff5d 	bl	8002bc0 <__NVIC_SetPriority>
}
 8002d06:	bf00      	nop
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff ffb0 	bl	8002c7c <SysTick_Config>
 8002d1c:	4603      	mov	r3, r0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d36:	e17f      	b.n	8003038 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	fa01 f303 	lsl.w	r3, r1, r3
 8002d44:	4013      	ands	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 8171 	beq.w	8003032 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d00b      	beq.n	8002d70 <HAL_GPIO_Init+0x48>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d007      	beq.n	8002d70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d64:	2b11      	cmp	r3, #17
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b12      	cmp	r3, #18
 8002d6e:	d130      	bne.n	8002dd2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4013      	ands	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002da6:	2201      	movs	r2, #1
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4013      	ands	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	091b      	lsrs	r3, r3, #4
 8002dbc:	f003 0201 	and.w	r2, r3, #1
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d118      	bne.n	8002e10 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002de4:	2201      	movs	r2, #1
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4013      	ands	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	08db      	lsrs	r3, r3, #3
 8002dfa:	f003 0201 	and.w	r2, r3, #1
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4013      	ands	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_Init+0x128>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b12      	cmp	r3, #18
 8002e4e:	d123      	bne.n	8002e98 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	08da      	lsrs	r2, r3, #3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3208      	adds	r2, #8
 8002e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	220f      	movs	r2, #15
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4013      	ands	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	08da      	lsrs	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3208      	adds	r2, #8
 8002e92:	6939      	ldr	r1, [r7, #16]
 8002e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4013      	ands	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 0203 	and.w	r2, r3, #3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80ac 	beq.w	8003032 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eda:	4b5f      	ldr	r3, [pc, #380]	; (8003058 <HAL_GPIO_Init+0x330>)
 8002edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ede:	4a5e      	ldr	r2, [pc, #376]	; (8003058 <HAL_GPIO_Init+0x330>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	6613      	str	r3, [r2, #96]	; 0x60
 8002ee6:	4b5c      	ldr	r3, [pc, #368]	; (8003058 <HAL_GPIO_Init+0x330>)
 8002ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ef2:	4a5a      	ldr	r2, [pc, #360]	; (800305c <HAL_GPIO_Init+0x334>)
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	089b      	lsrs	r3, r3, #2
 8002ef8:	3302      	adds	r3, #2
 8002efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002efe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	220f      	movs	r2, #15
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4013      	ands	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f1c:	d025      	beq.n	8002f6a <HAL_GPIO_Init+0x242>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a4f      	ldr	r2, [pc, #316]	; (8003060 <HAL_GPIO_Init+0x338>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d01f      	beq.n	8002f66 <HAL_GPIO_Init+0x23e>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a4e      	ldr	r2, [pc, #312]	; (8003064 <HAL_GPIO_Init+0x33c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d019      	beq.n	8002f62 <HAL_GPIO_Init+0x23a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a4d      	ldr	r2, [pc, #308]	; (8003068 <HAL_GPIO_Init+0x340>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d013      	beq.n	8002f5e <HAL_GPIO_Init+0x236>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a4c      	ldr	r2, [pc, #304]	; (800306c <HAL_GPIO_Init+0x344>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00d      	beq.n	8002f5a <HAL_GPIO_Init+0x232>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a4b      	ldr	r2, [pc, #300]	; (8003070 <HAL_GPIO_Init+0x348>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d007      	beq.n	8002f56 <HAL_GPIO_Init+0x22e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a4a      	ldr	r2, [pc, #296]	; (8003074 <HAL_GPIO_Init+0x34c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d101      	bne.n	8002f52 <HAL_GPIO_Init+0x22a>
 8002f4e:	2306      	movs	r3, #6
 8002f50:	e00c      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f52:	2307      	movs	r3, #7
 8002f54:	e00a      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f56:	2305      	movs	r3, #5
 8002f58:	e008      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	e006      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e004      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e002      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	f002 0203 	and.w	r2, r2, #3
 8002f72:	0092      	lsls	r2, r2, #2
 8002f74:	4093      	lsls	r3, r2
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f7c:	4937      	ldr	r1, [pc, #220]	; (800305c <HAL_GPIO_Init+0x334>)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	089b      	lsrs	r3, r3, #2
 8002f82:	3302      	adds	r3, #2
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f8a:	4b3b      	ldr	r3, [pc, #236]	; (8003078 <HAL_GPIO_Init+0x350>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	43db      	mvns	r3, r3
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4013      	ands	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fae:	4a32      	ldr	r2, [pc, #200]	; (8003078 <HAL_GPIO_Init+0x350>)
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002fb4:	4b30      	ldr	r3, [pc, #192]	; (8003078 <HAL_GPIO_Init+0x350>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fd8:	4a27      	ldr	r2, [pc, #156]	; (8003078 <HAL_GPIO_Init+0x350>)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fde:	4b26      	ldr	r3, [pc, #152]	; (8003078 <HAL_GPIO_Init+0x350>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4013      	ands	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003002:	4a1d      	ldr	r2, [pc, #116]	; (8003078 <HAL_GPIO_Init+0x350>)
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003008:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <HAL_GPIO_Init+0x350>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	43db      	mvns	r3, r3
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800302c:	4a12      	ldr	r2, [pc, #72]	; (8003078 <HAL_GPIO_Init+0x350>)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	3301      	adds	r3, #1
 8003036:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	fa22 f303 	lsr.w	r3, r2, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	f47f ae78 	bne.w	8002d38 <HAL_GPIO_Init+0x10>
  }
}
 8003048:	bf00      	nop
 800304a:	bf00      	nop
 800304c:	371c      	adds	r7, #28
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40021000 	.word	0x40021000
 800305c:	40010000 	.word	0x40010000
 8003060:	48000400 	.word	0x48000400
 8003064:	48000800 	.word	0x48000800
 8003068:	48000c00 	.word	0x48000c00
 800306c:	48001000 	.word	0x48001000
 8003070:	48001400 	.word	0x48001400
 8003074:	48001800 	.word	0x48001800
 8003078:	40010400 	.word	0x40010400

0800307c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	807b      	strh	r3, [r7, #2]
 8003088:	4613      	mov	r3, r2
 800308a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800308c:	787b      	ldrb	r3, [r7, #1]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003092:	887a      	ldrh	r2, [r7, #2]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003098:	e002      	b.n	80030a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800309a:	887a      	ldrh	r2, [r7, #2]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e081      	b.n	80031c2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d106      	bne.n	80030d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7fe f8d4 	bl	8001280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2224      	movs	r2, #36	; 0x24
 80030dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0201 	bic.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800310c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d107      	bne.n	8003126 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	e006      	b.n	8003134 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003132:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d104      	bne.n	8003146 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003144:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6812      	ldr	r2, [r2, #0]
 8003150:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003158:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003168:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	ea42 0103 	orr.w	r1, r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	021a      	lsls	r2, r3, #8
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69d9      	ldr	r1, [r3, #28]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1a      	ldr	r2, [r3, #32]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af02      	add	r7, sp, #8
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	607a      	str	r2, [r7, #4]
 80031d6:	461a      	mov	r2, r3
 80031d8:	460b      	mov	r3, r1
 80031da:	817b      	strh	r3, [r7, #10]
 80031dc:	4613      	mov	r3, r2
 80031de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b20      	cmp	r3, #32
 80031ea:	f040 80da 	bne.w	80033a2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_I2C_Master_Transmit+0x30>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e0d3      	b.n	80033a4 <HAL_I2C_Master_Transmit+0x1d8>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003204:	f7fe fa90 	bl	8001728 <HAL_GetTick>
 8003208:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	2319      	movs	r3, #25
 8003210:	2201      	movs	r2, #1
 8003212:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 f9f7 	bl	800360a <I2C_WaitOnFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e0be      	b.n	80033a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2221      	movs	r2, #33	; 0x21
 800322a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2210      	movs	r2, #16
 8003232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	893a      	ldrh	r2, [r7, #8]
 8003246:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003252:	b29b      	uxth	r3, r3
 8003254:	2bff      	cmp	r3, #255	; 0xff
 8003256:	d90e      	bls.n	8003276 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	22ff      	movs	r2, #255	; 0xff
 800325c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003262:	b2da      	uxtb	r2, r3
 8003264:	8979      	ldrh	r1, [r7, #10]
 8003266:	4b51      	ldr	r3, [pc, #324]	; (80033ac <HAL_I2C_Master_Transmit+0x1e0>)
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 faee 	bl	8003850 <I2C_TransferConfig>
 8003274:	e06c      	b.n	8003350 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003284:	b2da      	uxtb	r2, r3
 8003286:	8979      	ldrh	r1, [r7, #10]
 8003288:	4b48      	ldr	r3, [pc, #288]	; (80033ac <HAL_I2C_Master_Transmit+0x1e0>)
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 fadd 	bl	8003850 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003296:	e05b      	b.n	8003350 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	6a39      	ldr	r1, [r7, #32]
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 f9f4 	bl	800368a <I2C_WaitOnTXISFlagUntilTimeout>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e07b      	b.n	80033a4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	781a      	ldrb	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d034      	beq.n	8003350 <HAL_I2C_Master_Transmit+0x184>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d130      	bne.n	8003350 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	2200      	movs	r2, #0
 80032f6:	2180      	movs	r1, #128	; 0x80
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 f986 	bl	800360a <I2C_WaitOnFlagUntilTimeout>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e04d      	b.n	80033a4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330c:	b29b      	uxth	r3, r3
 800330e:	2bff      	cmp	r3, #255	; 0xff
 8003310:	d90e      	bls.n	8003330 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	22ff      	movs	r2, #255	; 0xff
 8003316:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331c:	b2da      	uxtb	r2, r3
 800331e:	8979      	ldrh	r1, [r7, #10]
 8003320:	2300      	movs	r3, #0
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 fa91 	bl	8003850 <I2C_TransferConfig>
 800332e:	e00f      	b.n	8003350 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333e:	b2da      	uxtb	r2, r3
 8003340:	8979      	ldrh	r1, [r7, #10]
 8003342:	2300      	movs	r3, #0
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 fa80 	bl	8003850 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003354:	b29b      	uxth	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d19e      	bne.n	8003298 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	6a39      	ldr	r1, [r7, #32]
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 f9d3 	bl	800370a <I2C_WaitOnSTOPFlagUntilTimeout>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e01a      	b.n	80033a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2220      	movs	r2, #32
 8003374:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6859      	ldr	r1, [r3, #4]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_I2C_Master_Transmit+0x1e4>)
 8003382:	400b      	ands	r3, r1
 8003384:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2220      	movs	r2, #32
 800338a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	e000      	b.n	80033a4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80033a2:	2302      	movs	r3, #2
  }
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	80002000 	.word	0x80002000
 80033b0:	fe00e800 	.word	0xfe00e800

080033b4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08a      	sub	sp, #40	; 0x28
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	460b      	mov	r3, r1
 80033c2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b20      	cmp	r3, #32
 80033d2:	f040 80f1 	bne.w	80035b8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033e4:	d101      	bne.n	80033ea <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80033e6:	2302      	movs	r3, #2
 80033e8:	e0e7      	b.n	80035ba <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_I2C_IsDeviceReady+0x44>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e0e0      	b.n	80035ba <HAL_I2C_IsDeviceReady+0x206>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2224      	movs	r2, #36	; 0x24
 8003404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d107      	bne.n	8003426 <HAL_I2C_IsDeviceReady+0x72>
 8003416:	897b      	ldrh	r3, [r7, #10]
 8003418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800341c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003420:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003424:	e004      	b.n	8003430 <HAL_I2C_IsDeviceReady+0x7c>
 8003426:	897b      	ldrh	r3, [r7, #10]
 8003428:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800342c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	6812      	ldr	r2, [r2, #0]
 8003434:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003436:	f7fe f977 	bl	8001728 <HAL_GetTick>
 800343a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b20      	cmp	r3, #32
 8003448:	bf0c      	ite	eq
 800344a:	2301      	moveq	r3, #1
 800344c:	2300      	movne	r3, #0
 800344e:	b2db      	uxtb	r3, r3
 8003450:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	f003 0310 	and.w	r3, r3, #16
 800345c:	2b10      	cmp	r3, #16
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003468:	e034      	b.n	80034d4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003470:	d01a      	beq.n	80034a8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003472:	f7fe f959 	bl	8001728 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d302      	bcc.n	8003488 <HAL_I2C_IsDeviceReady+0xd4>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10f      	bne.n	80034a8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2220      	movs	r2, #32
 800348c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003494:	f043 0220 	orr.w	r2, r3, #32
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e088      	b.n	80035ba <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b20      	cmp	r3, #32
 80034b4:	bf0c      	ite	eq
 80034b6:	2301      	moveq	r3, #1
 80034b8:	2300      	movne	r3, #0
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	f003 0310 	and.w	r3, r3, #16
 80034c8:	2b10      	cmp	r3, #16
 80034ca:	bf0c      	ite	eq
 80034cc:	2301      	moveq	r3, #1
 80034ce:	2300      	movne	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80034d4:	7ffb      	ldrb	r3, [r7, #31]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d102      	bne.n	80034e0 <HAL_I2C_IsDeviceReady+0x12c>
 80034da:	7fbb      	ldrb	r3, [r7, #30]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0c4      	beq.n	800346a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	2b10      	cmp	r3, #16
 80034ec:	d01a      	beq.n	8003524 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2200      	movs	r2, #0
 80034f6:	2120      	movs	r1, #32
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 f886 	bl	800360a <I2C_WaitOnFlagUntilTimeout>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e058      	b.n	80035ba <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2220      	movs	r2, #32
 800350e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	e04a      	b.n	80035ba <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	2200      	movs	r2, #0
 800352c:	2120      	movs	r1, #32
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f86b 	bl	800360a <I2C_WaitOnFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e03d      	b.n	80035ba <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2210      	movs	r2, #16
 8003544:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2220      	movs	r2, #32
 800354c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	429a      	cmp	r2, r3
 8003554:	d118      	bne.n	8003588 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003564:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2200      	movs	r2, #0
 800356e:	2120      	movs	r1, #32
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 f84a 	bl	800360a <I2C_WaitOnFlagUntilTimeout>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e01c      	b.n	80035ba <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2220      	movs	r2, #32
 8003586:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	3301      	adds	r3, #1
 800358c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	429a      	cmp	r2, r3
 8003594:	f63f af3b 	bhi.w	800340e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a4:	f043 0220 	orr.w	r2, r3, #32
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80035b8:	2302      	movs	r3, #2
  }
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3720      	adds	r7, #32
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d103      	bne.n	80035e0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2200      	movs	r2, #0
 80035de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d007      	beq.n	80035fe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699a      	ldr	r2, [r3, #24]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0201 	orr.w	r2, r2, #1
 80035fc:	619a      	str	r2, [r3, #24]
  }
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b084      	sub	sp, #16
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	603b      	str	r3, [r7, #0]
 8003616:	4613      	mov	r3, r2
 8003618:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800361a:	e022      	b.n	8003662 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003622:	d01e      	beq.n	8003662 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003624:	f7fe f880 	bl	8001728 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d302      	bcc.n	800363a <I2C_WaitOnFlagUntilTimeout+0x30>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d113      	bne.n	8003662 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363e:	f043 0220 	orr.w	r2, r3, #32
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e00f      	b.n	8003682 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699a      	ldr	r2, [r3, #24]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4013      	ands	r3, r2
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	429a      	cmp	r2, r3
 8003670:	bf0c      	ite	eq
 8003672:	2301      	moveq	r3, #1
 8003674:	2300      	movne	r3, #0
 8003676:	b2db      	uxtb	r3, r3
 8003678:	461a      	mov	r2, r3
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	429a      	cmp	r2, r3
 800367e:	d0cd      	beq.n	800361c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003696:	e02c      	b.n	80036f2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	68b9      	ldr	r1, [r7, #8]
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f871 	bl	8003784 <I2C_IsAcknowledgeFailed>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e02a      	b.n	8003702 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036b2:	d01e      	beq.n	80036f2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b4:	f7fe f838 	bl	8001728 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d302      	bcc.n	80036ca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d113      	bne.n	80036f2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ce:	f043 0220 	orr.w	r2, r3, #32
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2220      	movs	r2, #32
 80036da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e007      	b.n	8003702 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d1cb      	bne.n	8003698 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af00      	add	r7, sp, #0
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003716:	e028      	b.n	800376a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	68b9      	ldr	r1, [r7, #8]
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 f831 	bl	8003784 <I2C_IsAcknowledgeFailed>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e026      	b.n	800377a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372c:	f7fd fffc 	bl	8001728 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	429a      	cmp	r2, r3
 800373a:	d302      	bcc.n	8003742 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d113      	bne.n	800376a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	f043 0220 	orr.w	r2, r3, #32
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e007      	b.n	800377a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b20      	cmp	r3, #32
 8003776:	d1cf      	bne.n	8003718 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	f003 0310 	and.w	r3, r3, #16
 800379a:	2b10      	cmp	r3, #16
 800379c:	d151      	bne.n	8003842 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800379e:	e022      	b.n	80037e6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037a6:	d01e      	beq.n	80037e6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a8:	f7fd ffbe 	bl	8001728 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d302      	bcc.n	80037be <I2C_IsAcknowledgeFailed+0x3a>
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d113      	bne.n	80037e6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c2:	f043 0220 	orr.w	r2, r3, #32
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e02e      	b.n	8003844 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	d1d5      	bne.n	80037a0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2210      	movs	r2, #16
 80037fa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2220      	movs	r2, #32
 8003802:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f7ff fedc 	bl	80035c2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6859      	ldr	r1, [r3, #4]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	4b0d      	ldr	r3, [pc, #52]	; (800384c <I2C_IsAcknowledgeFailed+0xc8>)
 8003816:	400b      	ands	r3, r1
 8003818:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381e:	f043 0204 	orr.w	r2, r3, #4
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e000      	b.n	8003844 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	fe00e800 	.word	0xfe00e800

08003850 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	607b      	str	r3, [r7, #4]
 800385a:	460b      	mov	r3, r1
 800385c:	817b      	strh	r3, [r7, #10]
 800385e:	4613      	mov	r3, r2
 8003860:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	0d5b      	lsrs	r3, r3, #21
 800386c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003870:	4b0d      	ldr	r3, [pc, #52]	; (80038a8 <I2C_TransferConfig+0x58>)
 8003872:	430b      	orrs	r3, r1
 8003874:	43db      	mvns	r3, r3
 8003876:	ea02 0103 	and.w	r1, r2, r3
 800387a:	897b      	ldrh	r3, [r7, #10]
 800387c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003880:	7a7b      	ldrb	r3, [r7, #9]
 8003882:	041b      	lsls	r3, r3, #16
 8003884:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	431a      	orrs	r2, r3
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	431a      	orrs	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800389a:	bf00      	nop
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	03ff63ff 	.word	0x03ff63ff

080038ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b20      	cmp	r3, #32
 80038c0:	d138      	bne.n	8003934 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e032      	b.n	8003936 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2224      	movs	r2, #36	; 0x24
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0201 	bic.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6819      	ldr	r1, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	e000      	b.n	8003936 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003934:	2302      	movs	r3, #2
  }
}
 8003936:	4618      	mov	r0, r3
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003942:	b480      	push	{r7}
 8003944:	b085      	sub	sp, #20
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b20      	cmp	r3, #32
 8003956:	d139      	bne.n	80039cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003962:	2302      	movs	r3, #2
 8003964:	e033      	b.n	80039ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2224      	movs	r2, #36	; 0x24
 8003972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0201 	bic.w	r2, r2, #1
 8003984:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003994:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	021b      	lsls	r3, r3, #8
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039c8:	2300      	movs	r3, #0
 80039ca:	e000      	b.n	80039ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039cc:	2302      	movs	r3, #2
  }
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
	...

080039dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80039e0:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40007000 	.word	0x40007000

080039f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a06:	d130      	bne.n	8003a6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a08:	4b23      	ldr	r3, [pc, #140]	; (8003a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a14:	d038      	beq.n	8003a88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a16:	4b20      	ldr	r3, [pc, #128]	; (8003a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a1e:	4a1e      	ldr	r2, [pc, #120]	; (8003a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a26:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2232      	movs	r2, #50	; 0x32
 8003a2c:	fb02 f303 	mul.w	r3, r2, r3
 8003a30:	4a1b      	ldr	r2, [pc, #108]	; (8003aa0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	0c9b      	lsrs	r3, r3, #18
 8003a38:	3301      	adds	r3, #1
 8003a3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a3c:	e002      	b.n	8003a44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	3b01      	subs	r3, #1
 8003a42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a44:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a50:	d102      	bne.n	8003a58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1f2      	bne.n	8003a3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a58:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a64:	d110      	bne.n	8003a88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e00f      	b.n	8003a8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a6a:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a76:	d007      	beq.n	8003a88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a78:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a80:	4a05      	ldr	r2, [pc, #20]	; (8003a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	40007000 	.word	0x40007000
 8003a9c:	2000000c 	.word	0x2000000c
 8003aa0:	431bde83 	.word	0x431bde83

08003aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e3d8      	b.n	8004268 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ab6:	4b97      	ldr	r3, [pc, #604]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ac0:	4b94      	ldr	r3, [pc, #592]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0303 	and.w	r3, r3, #3
 8003ac8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0310 	and.w	r3, r3, #16
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 80e4 	beq.w	8003ca0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d007      	beq.n	8003aee <HAL_RCC_OscConfig+0x4a>
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	2b0c      	cmp	r3, #12
 8003ae2:	f040 808b 	bne.w	8003bfc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	f040 8087 	bne.w	8003bfc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003aee:	4b89      	ldr	r3, [pc, #548]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <HAL_RCC_OscConfig+0x62>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e3b0      	b.n	8004268 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1a      	ldr	r2, [r3, #32]
 8003b0a:	4b82      	ldr	r3, [pc, #520]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d004      	beq.n	8003b20 <HAL_RCC_OscConfig+0x7c>
 8003b16:	4b7f      	ldr	r3, [pc, #508]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b1e:	e005      	b.n	8003b2c <HAL_RCC_OscConfig+0x88>
 8003b20:	4b7c      	ldr	r3, [pc, #496]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b26:	091b      	lsrs	r3, r3, #4
 8003b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d223      	bcs.n	8003b78 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fd43 	bl	80045c0 <RCC_SetFlashLatencyFromMSIRange>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e391      	b.n	8004268 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b44:	4b73      	ldr	r3, [pc, #460]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a72      	ldr	r2, [pc, #456]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003b4a:	f043 0308 	orr.w	r3, r3, #8
 8003b4e:	6013      	str	r3, [r2, #0]
 8003b50:	4b70      	ldr	r3, [pc, #448]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	496d      	ldr	r1, [pc, #436]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b62:	4b6c      	ldr	r3, [pc, #432]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	021b      	lsls	r3, r3, #8
 8003b70:	4968      	ldr	r1, [pc, #416]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	604b      	str	r3, [r1, #4]
 8003b76:	e025      	b.n	8003bc4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b78:	4b66      	ldr	r3, [pc, #408]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a65      	ldr	r2, [pc, #404]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003b7e:	f043 0308 	orr.w	r3, r3, #8
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	4b63      	ldr	r3, [pc, #396]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	4960      	ldr	r1, [pc, #384]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b96:	4b5f      	ldr	r3, [pc, #380]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	021b      	lsls	r3, r3, #8
 8003ba4:	495b      	ldr	r1, [pc, #364]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d109      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 fd03 	bl	80045c0 <RCC_SetFlashLatencyFromMSIRange>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e351      	b.n	8004268 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bc4:	f000 fc38 	bl	8004438 <HAL_RCC_GetSysClockFreq>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	4b52      	ldr	r3, [pc, #328]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	091b      	lsrs	r3, r3, #4
 8003bd0:	f003 030f 	and.w	r3, r3, #15
 8003bd4:	4950      	ldr	r1, [pc, #320]	; (8003d18 <HAL_RCC_OscConfig+0x274>)
 8003bd6:	5ccb      	ldrb	r3, [r1, r3]
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8003be0:	4a4e      	ldr	r2, [pc, #312]	; (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003be2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003be4:	4b4e      	ldr	r3, [pc, #312]	; (8003d20 <HAL_RCC_OscConfig+0x27c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fd fd4d 	bl	8001688 <HAL_InitTick>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d052      	beq.n	8003c9e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003bf8:	7bfb      	ldrb	r3, [r7, #15]
 8003bfa:	e335      	b.n	8004268 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d032      	beq.n	8003c6a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c04:	4b43      	ldr	r3, [pc, #268]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a42      	ldr	r2, [pc, #264]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c10:	f7fd fd8a 	bl	8001728 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c18:	f7fd fd86 	bl	8001728 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e31e      	b.n	8004268 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c2a:	4b3a      	ldr	r3, [pc, #232]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c36:	4b37      	ldr	r3, [pc, #220]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a36      	ldr	r2, [pc, #216]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003c3c:	f043 0308 	orr.w	r3, r3, #8
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	4b34      	ldr	r3, [pc, #208]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	4931      	ldr	r1, [pc, #196]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c54:	4b2f      	ldr	r3, [pc, #188]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	021b      	lsls	r3, r3, #8
 8003c62:	492c      	ldr	r1, [pc, #176]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	604b      	str	r3, [r1, #4]
 8003c68:	e01a      	b.n	8003ca0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c6a:	4b2a      	ldr	r3, [pc, #168]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a29      	ldr	r2, [pc, #164]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003c70:	f023 0301 	bic.w	r3, r3, #1
 8003c74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c76:	f7fd fd57 	bl	8001728 <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c7c:	e008      	b.n	8003c90 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c7e:	f7fd fd53 	bl	8001728 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e2eb      	b.n	8004268 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c90:	4b20      	ldr	r3, [pc, #128]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1f0      	bne.n	8003c7e <HAL_RCC_OscConfig+0x1da>
 8003c9c:	e000      	b.n	8003ca0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c9e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d074      	beq.n	8003d96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d005      	beq.n	8003cbe <HAL_RCC_OscConfig+0x21a>
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	2b0c      	cmp	r3, #12
 8003cb6:	d10e      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d10b      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cbe:	4b15      	ldr	r3, [pc, #84]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d064      	beq.n	8003d94 <HAL_RCC_OscConfig+0x2f0>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d160      	bne.n	8003d94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e2c8      	b.n	8004268 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cde:	d106      	bne.n	8003cee <HAL_RCC_OscConfig+0x24a>
 8003ce0:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a0b      	ldr	r2, [pc, #44]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	e026      	b.n	8003d3c <HAL_RCC_OscConfig+0x298>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cf6:	d115      	bne.n	8003d24 <HAL_RCC_OscConfig+0x280>
 8003cf8:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a05      	ldr	r2, [pc, #20]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003cfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	4b03      	ldr	r3, [pc, #12]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a02      	ldr	r2, [pc, #8]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d0e:	6013      	str	r3, [r2, #0]
 8003d10:	e014      	b.n	8003d3c <HAL_RCC_OscConfig+0x298>
 8003d12:	bf00      	nop
 8003d14:	40021000 	.word	0x40021000
 8003d18:	080073a8 	.word	0x080073a8
 8003d1c:	2000000c 	.word	0x2000000c
 8003d20:	20000010 	.word	0x20000010
 8003d24:	4ba0      	ldr	r3, [pc, #640]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a9f      	ldr	r2, [pc, #636]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d2e:	6013      	str	r3, [r2, #0]
 8003d30:	4b9d      	ldr	r3, [pc, #628]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a9c      	ldr	r2, [pc, #624]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d013      	beq.n	8003d6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d44:	f7fd fcf0 	bl	8001728 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d4c:	f7fd fcec 	bl	8001728 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b64      	cmp	r3, #100	; 0x64
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e284      	b.n	8004268 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d5e:	4b92      	ldr	r3, [pc, #584]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0f0      	beq.n	8003d4c <HAL_RCC_OscConfig+0x2a8>
 8003d6a:	e014      	b.n	8003d96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6c:	f7fd fcdc 	bl	8001728 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d74:	f7fd fcd8 	bl	8001728 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b64      	cmp	r3, #100	; 0x64
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e270      	b.n	8004268 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d86:	4b88      	ldr	r3, [pc, #544]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f0      	bne.n	8003d74 <HAL_RCC_OscConfig+0x2d0>
 8003d92:	e000      	b.n	8003d96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d060      	beq.n	8003e64 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d005      	beq.n	8003db4 <HAL_RCC_OscConfig+0x310>
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	2b0c      	cmp	r3, #12
 8003dac:	d119      	bne.n	8003de2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d116      	bne.n	8003de2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003db4:	4b7c      	ldr	r3, [pc, #496]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <HAL_RCC_OscConfig+0x328>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e24d      	b.n	8004268 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dcc:	4b76      	ldr	r3, [pc, #472]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	061b      	lsls	r3, r3, #24
 8003dda:	4973      	ldr	r1, [pc, #460]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003de0:	e040      	b.n	8003e64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d023      	beq.n	8003e32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dea:	4b6f      	ldr	r3, [pc, #444]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a6e      	ldr	r2, [pc, #440]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df6:	f7fd fc97 	bl	8001728 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dfe:	f7fd fc93 	bl	8001728 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e22b      	b.n	8004268 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e10:	4b65      	ldr	r3, [pc, #404]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d0f0      	beq.n	8003dfe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e1c:	4b62      	ldr	r3, [pc, #392]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	061b      	lsls	r3, r3, #24
 8003e2a:	495f      	ldr	r1, [pc, #380]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	604b      	str	r3, [r1, #4]
 8003e30:	e018      	b.n	8003e64 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e32:	4b5d      	ldr	r3, [pc, #372]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a5c      	ldr	r2, [pc, #368]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3e:	f7fd fc73 	bl	8001728 <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e46:	f7fd fc6f 	bl	8001728 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e207      	b.n	8004268 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e58:	4b53      	ldr	r3, [pc, #332]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1f0      	bne.n	8003e46 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d03c      	beq.n	8003eea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01c      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e78:	4b4b      	ldr	r3, [pc, #300]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e7e:	4a4a      	ldr	r2, [pc, #296]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e88:	f7fd fc4e 	bl	8001728 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e90:	f7fd fc4a 	bl	8001728 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e1e2      	b.n	8004268 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ea2:	4b41      	ldr	r3, [pc, #260]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0ef      	beq.n	8003e90 <HAL_RCC_OscConfig+0x3ec>
 8003eb0:	e01b      	b.n	8003eea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eb2:	4b3d      	ldr	r3, [pc, #244]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eb8:	4a3b      	ldr	r2, [pc, #236]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003eba:	f023 0301 	bic.w	r3, r3, #1
 8003ebe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec2:	f7fd fc31 	bl	8001728 <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eca:	f7fd fc2d 	bl	8001728 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e1c5      	b.n	8004268 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003edc:	4b32      	ldr	r3, [pc, #200]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1ef      	bne.n	8003eca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0304 	and.w	r3, r3, #4
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 80a6 	beq.w	8004044 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003efc:	4b2a      	ldr	r3, [pc, #168]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10d      	bne.n	8003f24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f08:	4b27      	ldr	r3, [pc, #156]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0c:	4a26      	ldr	r2, [pc, #152]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f12:	6593      	str	r3, [r2, #88]	; 0x58
 8003f14:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f20:	2301      	movs	r3, #1
 8003f22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f24:	4b21      	ldr	r3, [pc, #132]	; (8003fac <HAL_RCC_OscConfig+0x508>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d118      	bne.n	8003f62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f30:	4b1e      	ldr	r3, [pc, #120]	; (8003fac <HAL_RCC_OscConfig+0x508>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a1d      	ldr	r2, [pc, #116]	; (8003fac <HAL_RCC_OscConfig+0x508>)
 8003f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f3c:	f7fd fbf4 	bl	8001728 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f44:	f7fd fbf0 	bl	8001728 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e188      	b.n	8004268 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f56:	4b15      	ldr	r3, [pc, #84]	; (8003fac <HAL_RCC_OscConfig+0x508>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d108      	bne.n	8003f7c <HAL_RCC_OscConfig+0x4d8>
 8003f6a:	4b0f      	ldr	r3, [pc, #60]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f70:	4a0d      	ldr	r2, [pc, #52]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003f72:	f043 0301 	orr.w	r3, r3, #1
 8003f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f7a:	e029      	b.n	8003fd0 <HAL_RCC_OscConfig+0x52c>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	2b05      	cmp	r3, #5
 8003f82:	d115      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x50c>
 8003f84:	4b08      	ldr	r3, [pc, #32]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8a:	4a07      	ldr	r2, [pc, #28]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003f8c:	f043 0304 	orr.w	r3, r3, #4
 8003f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f94:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9a:	4a03      	ldr	r2, [pc, #12]	; (8003fa8 <HAL_RCC_OscConfig+0x504>)
 8003f9c:	f043 0301 	orr.w	r3, r3, #1
 8003fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fa4:	e014      	b.n	8003fd0 <HAL_RCC_OscConfig+0x52c>
 8003fa6:	bf00      	nop
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	40007000 	.word	0x40007000
 8003fb0:	4b91      	ldr	r3, [pc, #580]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 8003fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb6:	4a90      	ldr	r2, [pc, #576]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 8003fb8:	f023 0301 	bic.w	r3, r3, #1
 8003fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fc0:	4b8d      	ldr	r3, [pc, #564]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc6:	4a8c      	ldr	r2, [pc, #560]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 8003fc8:	f023 0304 	bic.w	r3, r3, #4
 8003fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d016      	beq.n	8004006 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd8:	f7fd fba6 	bl	8001728 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fde:	e00a      	b.n	8003ff6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe0:	f7fd fba2 	bl	8001728 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e138      	b.n	8004268 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ff6:	4b80      	ldr	r3, [pc, #512]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 8003ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0ed      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x53c>
 8004004:	e015      	b.n	8004032 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004006:	f7fd fb8f 	bl	8001728 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800400c:	e00a      	b.n	8004024 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800400e:	f7fd fb8b 	bl	8001728 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	f241 3288 	movw	r2, #5000	; 0x1388
 800401c:	4293      	cmp	r3, r2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e121      	b.n	8004268 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004024:	4b74      	ldr	r3, [pc, #464]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 8004026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1ed      	bne.n	800400e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004032:	7ffb      	ldrb	r3, [r7, #31]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d105      	bne.n	8004044 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004038:	4b6f      	ldr	r3, [pc, #444]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 800403a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403c:	4a6e      	ldr	r2, [pc, #440]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 800403e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004042:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 810c 	beq.w	8004266 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004052:	2b02      	cmp	r3, #2
 8004054:	f040 80d4 	bne.w	8004200 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004058:	4b67      	ldr	r3, [pc, #412]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f003 0203 	and.w	r2, r3, #3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	429a      	cmp	r2, r3
 800406a:	d130      	bne.n	80040ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	3b01      	subs	r3, #1
 8004078:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800407a:	429a      	cmp	r2, r3
 800407c:	d127      	bne.n	80040ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004088:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800408a:	429a      	cmp	r2, r3
 800408c:	d11f      	bne.n	80040ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004098:	2a07      	cmp	r2, #7
 800409a:	bf14      	ite	ne
 800409c:	2201      	movne	r2, #1
 800409e:	2200      	moveq	r2, #0
 80040a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d113      	bne.n	80040ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b0:	085b      	lsrs	r3, r3, #1
 80040b2:	3b01      	subs	r3, #1
 80040b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d109      	bne.n	80040ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	085b      	lsrs	r3, r3, #1
 80040c6:	3b01      	subs	r3, #1
 80040c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d06e      	beq.n	80041ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	2b0c      	cmp	r3, #12
 80040d2:	d069      	beq.n	80041a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80040d4:	4b48      	ldr	r3, [pc, #288]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d105      	bne.n	80040ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80040e0:	4b45      	ldr	r3, [pc, #276]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e0bb      	b.n	8004268 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80040f0:	4b41      	ldr	r3, [pc, #260]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a40      	ldr	r2, [pc, #256]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 80040f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040fc:	f7fd fb14 	bl	8001728 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004104:	f7fd fb10 	bl	8001728 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e0a8      	b.n	8004268 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004116:	4b38      	ldr	r3, [pc, #224]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004122:	4b35      	ldr	r3, [pc, #212]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	4b35      	ldr	r3, [pc, #212]	; (80041fc <HAL_RCC_OscConfig+0x758>)
 8004128:	4013      	ands	r3, r2
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004132:	3a01      	subs	r2, #1
 8004134:	0112      	lsls	r2, r2, #4
 8004136:	4311      	orrs	r1, r2
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800413c:	0212      	lsls	r2, r2, #8
 800413e:	4311      	orrs	r1, r2
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004144:	0852      	lsrs	r2, r2, #1
 8004146:	3a01      	subs	r2, #1
 8004148:	0552      	lsls	r2, r2, #21
 800414a:	4311      	orrs	r1, r2
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004150:	0852      	lsrs	r2, r2, #1
 8004152:	3a01      	subs	r2, #1
 8004154:	0652      	lsls	r2, r2, #25
 8004156:	4311      	orrs	r1, r2
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800415c:	0912      	lsrs	r2, r2, #4
 800415e:	0452      	lsls	r2, r2, #17
 8004160:	430a      	orrs	r2, r1
 8004162:	4925      	ldr	r1, [pc, #148]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 8004164:	4313      	orrs	r3, r2
 8004166:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004168:	4b23      	ldr	r3, [pc, #140]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a22      	ldr	r2, [pc, #136]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 800416e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004172:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004174:	4b20      	ldr	r3, [pc, #128]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4a1f      	ldr	r2, [pc, #124]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 800417a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800417e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004180:	f7fd fad2 	bl	8001728 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004188:	f7fd face 	bl	8001728 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e066      	b.n	8004268 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800419a:	4b17      	ldr	r3, [pc, #92]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0f0      	beq.n	8004188 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041a6:	e05e      	b.n	8004266 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e05d      	b.n	8004268 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ac:	4b12      	ldr	r3, [pc, #72]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d156      	bne.n	8004266 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80041b8:	4b0f      	ldr	r3, [pc, #60]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a0e      	ldr	r2, [pc, #56]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 80041be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041c4:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	4a0b      	ldr	r2, [pc, #44]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 80041ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041d0:	f7fd faaa 	bl	8001728 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d8:	f7fd faa6 	bl	8001728 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e03e      	b.n	8004268 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ea:	4b03      	ldr	r3, [pc, #12]	; (80041f8 <HAL_RCC_OscConfig+0x754>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCC_OscConfig+0x734>
 80041f6:	e036      	b.n	8004266 <HAL_RCC_OscConfig+0x7c2>
 80041f8:	40021000 	.word	0x40021000
 80041fc:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	2b0c      	cmp	r3, #12
 8004204:	d02d      	beq.n	8004262 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004206:	4b1a      	ldr	r3, [pc, #104]	; (8004270 <HAL_RCC_OscConfig+0x7cc>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a19      	ldr	r2, [pc, #100]	; (8004270 <HAL_RCC_OscConfig+0x7cc>)
 800420c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004210:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004212:	4b17      	ldr	r3, [pc, #92]	; (8004270 <HAL_RCC_OscConfig+0x7cc>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d105      	bne.n	800422a <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800421e:	4b14      	ldr	r3, [pc, #80]	; (8004270 <HAL_RCC_OscConfig+0x7cc>)
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	4a13      	ldr	r2, [pc, #76]	; (8004270 <HAL_RCC_OscConfig+0x7cc>)
 8004224:	f023 0303 	bic.w	r3, r3, #3
 8004228:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800422a:	4b11      	ldr	r3, [pc, #68]	; (8004270 <HAL_RCC_OscConfig+0x7cc>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	4a10      	ldr	r2, [pc, #64]	; (8004270 <HAL_RCC_OscConfig+0x7cc>)
 8004230:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004238:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423a:	f7fd fa75 	bl	8001728 <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004240:	e008      	b.n	8004254 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004242:	f7fd fa71 	bl	8001728 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d901      	bls.n	8004254 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e009      	b.n	8004268 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004254:	4b06      	ldr	r3, [pc, #24]	; (8004270 <HAL_RCC_OscConfig+0x7cc>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1f0      	bne.n	8004242 <HAL_RCC_OscConfig+0x79e>
 8004260:	e001      	b.n	8004266 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e000      	b.n	8004268 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3720      	adds	r7, #32
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40021000 	.word	0x40021000

08004274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e0c8      	b.n	800441a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004288:	4b66      	ldr	r3, [pc, #408]	; (8004424 <HAL_RCC_ClockConfig+0x1b0>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d910      	bls.n	80042b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004296:	4b63      	ldr	r3, [pc, #396]	; (8004424 <HAL_RCC_ClockConfig+0x1b0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f023 0207 	bic.w	r2, r3, #7
 800429e:	4961      	ldr	r1, [pc, #388]	; (8004424 <HAL_RCC_ClockConfig+0x1b0>)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a6:	4b5f      	ldr	r3, [pc, #380]	; (8004424 <HAL_RCC_ClockConfig+0x1b0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d001      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e0b0      	b.n	800441a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d04c      	beq.n	800435e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2b03      	cmp	r3, #3
 80042ca:	d107      	bne.n	80042dc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042cc:	4b56      	ldr	r3, [pc, #344]	; (8004428 <HAL_RCC_ClockConfig+0x1b4>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d121      	bne.n	800431c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e09e      	b.n	800441a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d107      	bne.n	80042f4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042e4:	4b50      	ldr	r3, [pc, #320]	; (8004428 <HAL_RCC_ClockConfig+0x1b4>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d115      	bne.n	800431c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e092      	b.n	800441a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d107      	bne.n	800430c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042fc:	4b4a      	ldr	r3, [pc, #296]	; (8004428 <HAL_RCC_ClockConfig+0x1b4>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d109      	bne.n	800431c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e086      	b.n	800441a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800430c:	4b46      	ldr	r3, [pc, #280]	; (8004428 <HAL_RCC_ClockConfig+0x1b4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e07e      	b.n	800441a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800431c:	4b42      	ldr	r3, [pc, #264]	; (8004428 <HAL_RCC_ClockConfig+0x1b4>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f023 0203 	bic.w	r2, r3, #3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	493f      	ldr	r1, [pc, #252]	; (8004428 <HAL_RCC_ClockConfig+0x1b4>)
 800432a:	4313      	orrs	r3, r2
 800432c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800432e:	f7fd f9fb 	bl	8001728 <HAL_GetTick>
 8004332:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004334:	e00a      	b.n	800434c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004336:	f7fd f9f7 	bl	8001728 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	f241 3288 	movw	r2, #5000	; 0x1388
 8004344:	4293      	cmp	r3, r2
 8004346:	d901      	bls.n	800434c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e066      	b.n	800441a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434c:	4b36      	ldr	r3, [pc, #216]	; (8004428 <HAL_RCC_ClockConfig+0x1b4>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 020c 	and.w	r2, r3, #12
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	429a      	cmp	r2, r3
 800435c:	d1eb      	bne.n	8004336 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d008      	beq.n	800437c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800436a:	4b2f      	ldr	r3, [pc, #188]	; (8004428 <HAL_RCC_ClockConfig+0x1b4>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	492c      	ldr	r1, [pc, #176]	; (8004428 <HAL_RCC_ClockConfig+0x1b4>)
 8004378:	4313      	orrs	r3, r2
 800437a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800437c:	4b29      	ldr	r3, [pc, #164]	; (8004424 <HAL_RCC_ClockConfig+0x1b0>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d210      	bcs.n	80043ac <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438a:	4b26      	ldr	r3, [pc, #152]	; (8004424 <HAL_RCC_ClockConfig+0x1b0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f023 0207 	bic.w	r2, r3, #7
 8004392:	4924      	ldr	r1, [pc, #144]	; (8004424 <HAL_RCC_ClockConfig+0x1b0>)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	4313      	orrs	r3, r2
 8004398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800439a:	4b22      	ldr	r3, [pc, #136]	; (8004424 <HAL_RCC_ClockConfig+0x1b0>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d001      	beq.n	80043ac <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e036      	b.n	800441a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d008      	beq.n	80043ca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043b8:	4b1b      	ldr	r3, [pc, #108]	; (8004428 <HAL_RCC_ClockConfig+0x1b4>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4918      	ldr	r1, [pc, #96]	; (8004428 <HAL_RCC_ClockConfig+0x1b4>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d009      	beq.n	80043ea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043d6:	4b14      	ldr	r3, [pc, #80]	; (8004428 <HAL_RCC_ClockConfig+0x1b4>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	4910      	ldr	r1, [pc, #64]	; (8004428 <HAL_RCC_ClockConfig+0x1b4>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043ea:	f000 f825 	bl	8004438 <HAL_RCC_GetSysClockFreq>
 80043ee:	4602      	mov	r2, r0
 80043f0:	4b0d      	ldr	r3, [pc, #52]	; (8004428 <HAL_RCC_ClockConfig+0x1b4>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	091b      	lsrs	r3, r3, #4
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	490c      	ldr	r1, [pc, #48]	; (800442c <HAL_RCC_ClockConfig+0x1b8>)
 80043fc:	5ccb      	ldrb	r3, [r1, r3]
 80043fe:	f003 031f 	and.w	r3, r3, #31
 8004402:	fa22 f303 	lsr.w	r3, r2, r3
 8004406:	4a0a      	ldr	r2, [pc, #40]	; (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 8004408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800440a:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <HAL_RCC_ClockConfig+0x1c0>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f7fd f93a 	bl	8001688 <HAL_InitTick>
 8004414:	4603      	mov	r3, r0
 8004416:	72fb      	strb	r3, [r7, #11]

  return status;
 8004418:	7afb      	ldrb	r3, [r7, #11]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40022000 	.word	0x40022000
 8004428:	40021000 	.word	0x40021000
 800442c:	080073a8 	.word	0x080073a8
 8004430:	2000000c 	.word	0x2000000c
 8004434:	20000010 	.word	0x20000010

08004438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004438:	b480      	push	{r7}
 800443a:	b089      	sub	sp, #36	; 0x24
 800443c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800443e:	2300      	movs	r3, #0
 8004440:	61fb      	str	r3, [r7, #28]
 8004442:	2300      	movs	r3, #0
 8004444:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004446:	4b3e      	ldr	r3, [pc, #248]	; (8004540 <HAL_RCC_GetSysClockFreq+0x108>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 030c 	and.w	r3, r3, #12
 800444e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004450:	4b3b      	ldr	r3, [pc, #236]	; (8004540 <HAL_RCC_GetSysClockFreq+0x108>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f003 0303 	and.w	r3, r3, #3
 8004458:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d005      	beq.n	800446c <HAL_RCC_GetSysClockFreq+0x34>
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	2b0c      	cmp	r3, #12
 8004464:	d121      	bne.n	80044aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d11e      	bne.n	80044aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800446c:	4b34      	ldr	r3, [pc, #208]	; (8004540 <HAL_RCC_GetSysClockFreq+0x108>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b00      	cmp	r3, #0
 8004476:	d107      	bne.n	8004488 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004478:	4b31      	ldr	r3, [pc, #196]	; (8004540 <HAL_RCC_GetSysClockFreq+0x108>)
 800447a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800447e:	0a1b      	lsrs	r3, r3, #8
 8004480:	f003 030f 	and.w	r3, r3, #15
 8004484:	61fb      	str	r3, [r7, #28]
 8004486:	e005      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004488:	4b2d      	ldr	r3, [pc, #180]	; (8004540 <HAL_RCC_GetSysClockFreq+0x108>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	091b      	lsrs	r3, r3, #4
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004494:	4a2b      	ldr	r2, [pc, #172]	; (8004544 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800449c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10d      	bne.n	80044c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044a8:	e00a      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d102      	bne.n	80044b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044b0:	4b25      	ldr	r3, [pc, #148]	; (8004548 <HAL_RCC_GetSysClockFreq+0x110>)
 80044b2:	61bb      	str	r3, [r7, #24]
 80044b4:	e004      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d101      	bne.n	80044c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044bc:	4b23      	ldr	r3, [pc, #140]	; (800454c <HAL_RCC_GetSysClockFreq+0x114>)
 80044be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	2b0c      	cmp	r3, #12
 80044c4:	d134      	bne.n	8004530 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044c6:	4b1e      	ldr	r3, [pc, #120]	; (8004540 <HAL_RCC_GetSysClockFreq+0x108>)
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d003      	beq.n	80044de <HAL_RCC_GetSysClockFreq+0xa6>
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2b03      	cmp	r3, #3
 80044da:	d003      	beq.n	80044e4 <HAL_RCC_GetSysClockFreq+0xac>
 80044dc:	e005      	b.n	80044ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044de:	4b1a      	ldr	r3, [pc, #104]	; (8004548 <HAL_RCC_GetSysClockFreq+0x110>)
 80044e0:	617b      	str	r3, [r7, #20]
      break;
 80044e2:	e005      	b.n	80044f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044e4:	4b19      	ldr	r3, [pc, #100]	; (800454c <HAL_RCC_GetSysClockFreq+0x114>)
 80044e6:	617b      	str	r3, [r7, #20]
      break;
 80044e8:	e002      	b.n	80044f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	617b      	str	r3, [r7, #20]
      break;
 80044ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044f0:	4b13      	ldr	r3, [pc, #76]	; (8004540 <HAL_RCC_GetSysClockFreq+0x108>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	091b      	lsrs	r3, r3, #4
 80044f6:	f003 0307 	and.w	r3, r3, #7
 80044fa:	3301      	adds	r3, #1
 80044fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044fe:	4b10      	ldr	r3, [pc, #64]	; (8004540 <HAL_RCC_GetSysClockFreq+0x108>)
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	0a1b      	lsrs	r3, r3, #8
 8004504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	fb03 f202 	mul.w	r2, r3, r2
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	fbb2 f3f3 	udiv	r3, r2, r3
 8004514:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004516:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <HAL_RCC_GetSysClockFreq+0x108>)
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	0e5b      	lsrs	r3, r3, #25
 800451c:	f003 0303 	and.w	r3, r3, #3
 8004520:	3301      	adds	r3, #1
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	fbb2 f3f3 	udiv	r3, r2, r3
 800452e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004530:	69bb      	ldr	r3, [r7, #24]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3724      	adds	r7, #36	; 0x24
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	40021000 	.word	0x40021000
 8004544:	080073c0 	.word	0x080073c0
 8004548:	00f42400 	.word	0x00f42400
 800454c:	007a1200 	.word	0x007a1200

08004550 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004554:	4b03      	ldr	r3, [pc, #12]	; (8004564 <HAL_RCC_GetHCLKFreq+0x14>)
 8004556:	681b      	ldr	r3, [r3, #0]
}
 8004558:	4618      	mov	r0, r3
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	2000000c 	.word	0x2000000c

08004568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800456c:	f7ff fff0 	bl	8004550 <HAL_RCC_GetHCLKFreq>
 8004570:	4602      	mov	r2, r0
 8004572:	4b06      	ldr	r3, [pc, #24]	; (800458c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	0a1b      	lsrs	r3, r3, #8
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	4904      	ldr	r1, [pc, #16]	; (8004590 <HAL_RCC_GetPCLK1Freq+0x28>)
 800457e:	5ccb      	ldrb	r3, [r1, r3]
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004588:	4618      	mov	r0, r3
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40021000 	.word	0x40021000
 8004590:	080073b8 	.word	0x080073b8

08004594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004598:	f7ff ffda 	bl	8004550 <HAL_RCC_GetHCLKFreq>
 800459c:	4602      	mov	r2, r0
 800459e:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	0adb      	lsrs	r3, r3, #11
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	4904      	ldr	r1, [pc, #16]	; (80045bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80045aa:	5ccb      	ldrb	r3, [r1, r3]
 80045ac:	f003 031f 	and.w	r3, r3, #31
 80045b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40021000 	.word	0x40021000
 80045bc:	080073b8 	.word	0x080073b8

080045c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045c8:	2300      	movs	r3, #0
 80045ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045cc:	4b2a      	ldr	r3, [pc, #168]	; (8004678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045d8:	f7ff fa00 	bl	80039dc <HAL_PWREx_GetVoltageRange>
 80045dc:	6178      	str	r0, [r7, #20]
 80045de:	e014      	b.n	800460a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045e0:	4b25      	ldr	r3, [pc, #148]	; (8004678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e4:	4a24      	ldr	r2, [pc, #144]	; (8004678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ea:	6593      	str	r3, [r2, #88]	; 0x58
 80045ec:	4b22      	ldr	r3, [pc, #136]	; (8004678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80045f8:	f7ff f9f0 	bl	80039dc <HAL_PWREx_GetVoltageRange>
 80045fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80045fe:	4b1e      	ldr	r3, [pc, #120]	; (8004678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004602:	4a1d      	ldr	r2, [pc, #116]	; (8004678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004608:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004610:	d10b      	bne.n	800462a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b80      	cmp	r3, #128	; 0x80
 8004616:	d919      	bls.n	800464c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2ba0      	cmp	r3, #160	; 0xa0
 800461c:	d902      	bls.n	8004624 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800461e:	2302      	movs	r3, #2
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	e013      	b.n	800464c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004624:	2301      	movs	r3, #1
 8004626:	613b      	str	r3, [r7, #16]
 8004628:	e010      	b.n	800464c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b80      	cmp	r3, #128	; 0x80
 800462e:	d902      	bls.n	8004636 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004630:	2303      	movs	r3, #3
 8004632:	613b      	str	r3, [r7, #16]
 8004634:	e00a      	b.n	800464c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b80      	cmp	r3, #128	; 0x80
 800463a:	d102      	bne.n	8004642 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800463c:	2302      	movs	r3, #2
 800463e:	613b      	str	r3, [r7, #16]
 8004640:	e004      	b.n	800464c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b70      	cmp	r3, #112	; 0x70
 8004646:	d101      	bne.n	800464c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004648:	2301      	movs	r3, #1
 800464a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800464c:	4b0b      	ldr	r3, [pc, #44]	; (800467c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f023 0207 	bic.w	r2, r3, #7
 8004654:	4909      	ldr	r1, [pc, #36]	; (800467c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	4313      	orrs	r3, r2
 800465a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800465c:	4b07      	ldr	r3, [pc, #28]	; (800467c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	429a      	cmp	r2, r3
 8004668:	d001      	beq.n	800466e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40021000 	.word	0x40021000
 800467c:	40022000 	.word	0x40022000

08004680 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004688:	2300      	movs	r3, #0
 800468a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800468c:	2300      	movs	r3, #0
 800468e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004698:	2b00      	cmp	r3, #0
 800469a:	d041      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046a4:	d02a      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80046a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046aa:	d824      	bhi.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046b0:	d008      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80046b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046b6:	d81e      	bhi.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00a      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80046bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046c0:	d010      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046c2:	e018      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046c4:	4b86      	ldr	r3, [pc, #536]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4a85      	ldr	r2, [pc, #532]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046d0:	e015      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3304      	adds	r3, #4
 80046d6:	2100      	movs	r1, #0
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 fabb 	bl	8004c54 <RCCEx_PLLSAI1_Config>
 80046de:	4603      	mov	r3, r0
 80046e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046e2:	e00c      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3320      	adds	r3, #32
 80046e8:	2100      	movs	r1, #0
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 fba6 	bl	8004e3c <RCCEx_PLLSAI2_Config>
 80046f0:	4603      	mov	r3, r0
 80046f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046f4:	e003      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	74fb      	strb	r3, [r7, #19]
      break;
 80046fa:	e000      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80046fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046fe:	7cfb      	ldrb	r3, [r7, #19]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10b      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004704:	4b76      	ldr	r3, [pc, #472]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004712:	4973      	ldr	r1, [pc, #460]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800471a:	e001      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800471c:	7cfb      	ldrb	r3, [r7, #19]
 800471e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d041      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004730:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004734:	d02a      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004736:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800473a:	d824      	bhi.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800473c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004740:	d008      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004742:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004746:	d81e      	bhi.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800474c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004750:	d010      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004752:	e018      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004754:	4b62      	ldr	r3, [pc, #392]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	4a61      	ldr	r2, [pc, #388]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800475a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800475e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004760:	e015      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3304      	adds	r3, #4
 8004766:	2100      	movs	r1, #0
 8004768:	4618      	mov	r0, r3
 800476a:	f000 fa73 	bl	8004c54 <RCCEx_PLLSAI1_Config>
 800476e:	4603      	mov	r3, r0
 8004770:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004772:	e00c      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3320      	adds	r3, #32
 8004778:	2100      	movs	r1, #0
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fb5e 	bl	8004e3c <RCCEx_PLLSAI2_Config>
 8004780:	4603      	mov	r3, r0
 8004782:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004784:	e003      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	74fb      	strb	r3, [r7, #19]
      break;
 800478a:	e000      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800478c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800478e:	7cfb      	ldrb	r3, [r7, #19]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10b      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004794:	4b52      	ldr	r3, [pc, #328]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047a2:	494f      	ldr	r1, [pc, #316]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80047aa:	e001      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ac:	7cfb      	ldrb	r3, [r7, #19]
 80047ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 80a0 	beq.w	80048fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047be:	2300      	movs	r3, #0
 80047c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047c2:	4b47      	ldr	r3, [pc, #284]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80047d2:	2300      	movs	r3, #0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00d      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047d8:	4b41      	ldr	r3, [pc, #260]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047dc:	4a40      	ldr	r2, [pc, #256]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e2:	6593      	str	r3, [r2, #88]	; 0x58
 80047e4:	4b3e      	ldr	r3, [pc, #248]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ec:	60bb      	str	r3, [r7, #8]
 80047ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047f0:	2301      	movs	r3, #1
 80047f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047f4:	4b3b      	ldr	r3, [pc, #236]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a3a      	ldr	r2, [pc, #232]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004800:	f7fc ff92 	bl	8001728 <HAL_GetTick>
 8004804:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004806:	e009      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004808:	f7fc ff8e 	bl	8001728 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d902      	bls.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	74fb      	strb	r3, [r7, #19]
        break;
 800481a:	e005      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800481c:	4b31      	ldr	r3, [pc, #196]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0ef      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004828:	7cfb      	ldrb	r3, [r7, #19]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d15c      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800482e:	4b2c      	ldr	r3, [pc, #176]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004838:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d01f      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	429a      	cmp	r2, r3
 800484a:	d019      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800484c:	4b24      	ldr	r3, [pc, #144]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004856:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004858:	4b21      	ldr	r3, [pc, #132]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485e:	4a20      	ldr	r2, [pc, #128]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004868:	4b1d      	ldr	r3, [pc, #116]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800486a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486e:	4a1c      	ldr	r2, [pc, #112]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004878:	4a19      	ldr	r2, [pc, #100]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d016      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488a:	f7fc ff4d 	bl	8001728 <HAL_GetTick>
 800488e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004890:	e00b      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004892:	f7fc ff49 	bl	8001728 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d902      	bls.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	74fb      	strb	r3, [r7, #19]
            break;
 80048a8:	e006      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048aa:	4b0d      	ldr	r3, [pc, #52]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0ec      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80048b8:	7cfb      	ldrb	r3, [r7, #19]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10c      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048be:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ce:	4904      	ldr	r1, [pc, #16]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048d6:	e009      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048d8:	7cfb      	ldrb	r3, [r7, #19]
 80048da:	74bb      	strb	r3, [r7, #18]
 80048dc:	e006      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80048de:	bf00      	nop
 80048e0:	40021000 	.word	0x40021000
 80048e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e8:	7cfb      	ldrb	r3, [r7, #19]
 80048ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048ec:	7c7b      	ldrb	r3, [r7, #17]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d105      	bne.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048f2:	4b9e      	ldr	r3, [pc, #632]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f6:	4a9d      	ldr	r2, [pc, #628]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800490a:	4b98      	ldr	r3, [pc, #608]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004910:	f023 0203 	bic.w	r2, r3, #3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004918:	4994      	ldr	r1, [pc, #592]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00a      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800492c:	4b8f      	ldr	r3, [pc, #572]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800492e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004932:	f023 020c 	bic.w	r2, r3, #12
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493a:	498c      	ldr	r1, [pc, #560]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800494e:	4b87      	ldr	r3, [pc, #540]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004954:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495c:	4983      	ldr	r1, [pc, #524]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0308 	and.w	r3, r3, #8
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00a      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004970:	4b7e      	ldr	r3, [pc, #504]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004976:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497e:	497b      	ldr	r1, [pc, #492]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004980:	4313      	orrs	r3, r2
 8004982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0310 	and.w	r3, r3, #16
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004992:	4b76      	ldr	r3, [pc, #472]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004998:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a0:	4972      	ldr	r1, [pc, #456]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0320 	and.w	r3, r3, #32
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049b4:	4b6d      	ldr	r3, [pc, #436]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c2:	496a      	ldr	r1, [pc, #424]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049d6:	4b65      	ldr	r3, [pc, #404]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e4:	4961      	ldr	r1, [pc, #388]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049f8:	4b5c      	ldr	r3, [pc, #368]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a06:	4959      	ldr	r1, [pc, #356]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a1a:	4b54      	ldr	r3, [pc, #336]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a28:	4950      	ldr	r1, [pc, #320]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a3c:	4b4b      	ldr	r3, [pc, #300]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4a:	4948      	ldr	r1, [pc, #288]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a5e:	4b43      	ldr	r3, [pc, #268]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6c:	493f      	ldr	r1, [pc, #252]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d028      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a80:	4b3a      	ldr	r3, [pc, #232]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a8e:	4937      	ldr	r1, [pc, #220]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a9e:	d106      	bne.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aa0:	4b32      	ldr	r3, [pc, #200]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	4a31      	ldr	r2, [pc, #196]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aaa:	60d3      	str	r3, [r2, #12]
 8004aac:	e011      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ab2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ab6:	d10c      	bne.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3304      	adds	r3, #4
 8004abc:	2101      	movs	r1, #1
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 f8c8 	bl	8004c54 <RCCEx_PLLSAI1_Config>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ac8:	7cfb      	ldrb	r3, [r7, #19]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004ace:	7cfb      	ldrb	r3, [r7, #19]
 8004ad0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d028      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ade:	4b23      	ldr	r3, [pc, #140]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aec:	491f      	ldr	r1, [pc, #124]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004afc:	d106      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004afe:	4b1b      	ldr	r3, [pc, #108]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	4a1a      	ldr	r2, [pc, #104]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b08:	60d3      	str	r3, [r2, #12]
 8004b0a:	e011      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b14:	d10c      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	3304      	adds	r3, #4
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 f899 	bl	8004c54 <RCCEx_PLLSAI1_Config>
 8004b22:	4603      	mov	r3, r0
 8004b24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b26:	7cfb      	ldrb	r3, [r7, #19]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004b2c:	7cfb      	ldrb	r3, [r7, #19]
 8004b2e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d02b      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b4a:	4908      	ldr	r1, [pc, #32]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b5a:	d109      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b5c:	4b03      	ldr	r3, [pc, #12]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	4a02      	ldr	r2, [pc, #8]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b66:	60d3      	str	r3, [r2, #12]
 8004b68:	e014      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004b6a:	bf00      	nop
 8004b6c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b78:	d10c      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	2101      	movs	r1, #1
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 f867 	bl	8004c54 <RCCEx_PLLSAI1_Config>
 8004b86:	4603      	mov	r3, r0
 8004b88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b8a:	7cfb      	ldrb	r3, [r7, #19]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004b90:	7cfb      	ldrb	r3, [r7, #19]
 8004b92:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d02f      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ba0:	4b2b      	ldr	r3, [pc, #172]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bae:	4928      	ldr	r1, [pc, #160]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bbe:	d10d      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	2102      	movs	r1, #2
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 f844 	bl	8004c54 <RCCEx_PLLSAI1_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bd0:	7cfb      	ldrb	r3, [r7, #19]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d014      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004bd6:	7cfb      	ldrb	r3, [r7, #19]
 8004bd8:	74bb      	strb	r3, [r7, #18]
 8004bda:	e011      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004be0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004be4:	d10c      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	3320      	adds	r3, #32
 8004bea:	2102      	movs	r1, #2
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 f925 	bl	8004e3c <RCCEx_PLLSAI2_Config>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bf6:	7cfb      	ldrb	r3, [r7, #19]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004bfc:	7cfb      	ldrb	r3, [r7, #19]
 8004bfe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00a      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c0c:	4b10      	ldr	r3, [pc, #64]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c12:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c1a:	490d      	ldr	r1, [pc, #52]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00b      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c2e:	4b08      	ldr	r3, [pc, #32]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c3e:	4904      	ldr	r1, [pc, #16]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c46:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40021000 	.word	0x40021000

08004c54 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c62:	4b75      	ldr	r3, [pc, #468]	; (8004e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d018      	beq.n	8004ca0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c6e:	4b72      	ldr	r3, [pc, #456]	; (8004e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	f003 0203 	and.w	r2, r3, #3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d10d      	bne.n	8004c9a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
       ||
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d009      	beq.n	8004c9a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c86:	4b6c      	ldr	r3, [pc, #432]	; (8004e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	091b      	lsrs	r3, r3, #4
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
       ||
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d047      	beq.n	8004d2a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	73fb      	strb	r3, [r7, #15]
 8004c9e:	e044      	b.n	8004d2a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b03      	cmp	r3, #3
 8004ca6:	d018      	beq.n	8004cda <RCCEx_PLLSAI1_Config+0x86>
 8004ca8:	2b03      	cmp	r3, #3
 8004caa:	d825      	bhi.n	8004cf8 <RCCEx_PLLSAI1_Config+0xa4>
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d002      	beq.n	8004cb6 <RCCEx_PLLSAI1_Config+0x62>
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d009      	beq.n	8004cc8 <RCCEx_PLLSAI1_Config+0x74>
 8004cb4:	e020      	b.n	8004cf8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cb6:	4b60      	ldr	r3, [pc, #384]	; (8004e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d11d      	bne.n	8004cfe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cc6:	e01a      	b.n	8004cfe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cc8:	4b5b      	ldr	r3, [pc, #364]	; (8004e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d116      	bne.n	8004d02 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cd8:	e013      	b.n	8004d02 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cda:	4b57      	ldr	r3, [pc, #348]	; (8004e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10f      	bne.n	8004d06 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ce6:	4b54      	ldr	r3, [pc, #336]	; (8004e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d109      	bne.n	8004d06 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cf6:	e006      	b.n	8004d06 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8004cfc:	e004      	b.n	8004d08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004cfe:	bf00      	nop
 8004d00:	e002      	b.n	8004d08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d02:	bf00      	nop
 8004d04:	e000      	b.n	8004d08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d06:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d08:	7bfb      	ldrb	r3, [r7, #15]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10d      	bne.n	8004d2a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d0e:	4b4a      	ldr	r3, [pc, #296]	; (8004e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6819      	ldr	r1, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	430b      	orrs	r3, r1
 8004d24:	4944      	ldr	r1, [pc, #272]	; (8004e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d17d      	bne.n	8004e2c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d30:	4b41      	ldr	r3, [pc, #260]	; (8004e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a40      	ldr	r2, [pc, #256]	; (8004e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d3c:	f7fc fcf4 	bl	8001728 <HAL_GetTick>
 8004d40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d42:	e009      	b.n	8004d58 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d44:	f7fc fcf0 	bl	8001728 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d902      	bls.n	8004d58 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	73fb      	strb	r3, [r7, #15]
        break;
 8004d56:	e005      	b.n	8004d64 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d58:	4b37      	ldr	r3, [pc, #220]	; (8004e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1ef      	bne.n	8004d44 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d160      	bne.n	8004e2c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d111      	bne.n	8004d94 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d70:	4b31      	ldr	r3, [pc, #196]	; (8004e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6892      	ldr	r2, [r2, #8]
 8004d80:	0211      	lsls	r1, r2, #8
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	68d2      	ldr	r2, [r2, #12]
 8004d86:	0912      	lsrs	r2, r2, #4
 8004d88:	0452      	lsls	r2, r2, #17
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	492a      	ldr	r1, [pc, #168]	; (8004e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	610b      	str	r3, [r1, #16]
 8004d92:	e027      	b.n	8004de4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d112      	bne.n	8004dc0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d9a:	4b27      	ldr	r3, [pc, #156]	; (8004e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004da2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6892      	ldr	r2, [r2, #8]
 8004daa:	0211      	lsls	r1, r2, #8
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6912      	ldr	r2, [r2, #16]
 8004db0:	0852      	lsrs	r2, r2, #1
 8004db2:	3a01      	subs	r2, #1
 8004db4:	0552      	lsls	r2, r2, #21
 8004db6:	430a      	orrs	r2, r1
 8004db8:	491f      	ldr	r1, [pc, #124]	; (8004e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	610b      	str	r3, [r1, #16]
 8004dbe:	e011      	b.n	8004de4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dc0:	4b1d      	ldr	r3, [pc, #116]	; (8004e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004dc8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6892      	ldr	r2, [r2, #8]
 8004dd0:	0211      	lsls	r1, r2, #8
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6952      	ldr	r2, [r2, #20]
 8004dd6:	0852      	lsrs	r2, r2, #1
 8004dd8:	3a01      	subs	r2, #1
 8004dda:	0652      	lsls	r2, r2, #25
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	4916      	ldr	r1, [pc, #88]	; (8004e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004de4:	4b14      	ldr	r3, [pc, #80]	; (8004e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a13      	ldr	r2, [pc, #76]	; (8004e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004dee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df0:	f7fc fc9a 	bl	8001728 <HAL_GetTick>
 8004df4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004df6:	e009      	b.n	8004e0c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004df8:	f7fc fc96 	bl	8001728 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d902      	bls.n	8004e0c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	73fb      	strb	r3, [r7, #15]
          break;
 8004e0a:	e005      	b.n	8004e18 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e0c:	4b0a      	ldr	r3, [pc, #40]	; (8004e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0ef      	beq.n	8004df8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d106      	bne.n	8004e2c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e1e:	4b06      	ldr	r3, [pc, #24]	; (8004e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e20:	691a      	ldr	r2, [r3, #16]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	4904      	ldr	r1, [pc, #16]	; (8004e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	40021000 	.word	0x40021000

08004e3c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e4a:	4b6a      	ldr	r3, [pc, #424]	; (8004ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d018      	beq.n	8004e88 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004e56:	4b67      	ldr	r3, [pc, #412]	; (8004ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f003 0203 	and.w	r2, r3, #3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d10d      	bne.n	8004e82 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
       ||
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d009      	beq.n	8004e82 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004e6e:	4b61      	ldr	r3, [pc, #388]	; (8004ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	091b      	lsrs	r3, r3, #4
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
       ||
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d047      	beq.n	8004f12 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	73fb      	strb	r3, [r7, #15]
 8004e86:	e044      	b.n	8004f12 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b03      	cmp	r3, #3
 8004e8e:	d018      	beq.n	8004ec2 <RCCEx_PLLSAI2_Config+0x86>
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d825      	bhi.n	8004ee0 <RCCEx_PLLSAI2_Config+0xa4>
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d002      	beq.n	8004e9e <RCCEx_PLLSAI2_Config+0x62>
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d009      	beq.n	8004eb0 <RCCEx_PLLSAI2_Config+0x74>
 8004e9c:	e020      	b.n	8004ee0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e9e:	4b55      	ldr	r3, [pc, #340]	; (8004ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d11d      	bne.n	8004ee6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eae:	e01a      	b.n	8004ee6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004eb0:	4b50      	ldr	r3, [pc, #320]	; (8004ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d116      	bne.n	8004eea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ec0:	e013      	b.n	8004eea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ec2:	4b4c      	ldr	r3, [pc, #304]	; (8004ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10f      	bne.n	8004eee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ece:	4b49      	ldr	r3, [pc, #292]	; (8004ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d109      	bne.n	8004eee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ede:	e006      	b.n	8004eee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ee4:	e004      	b.n	8004ef0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ee6:	bf00      	nop
 8004ee8:	e002      	b.n	8004ef0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004eea:	bf00      	nop
 8004eec:	e000      	b.n	8004ef0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004eee:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10d      	bne.n	8004f12 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ef6:	4b3f      	ldr	r3, [pc, #252]	; (8004ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6819      	ldr	r1, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	430b      	orrs	r3, r1
 8004f0c:	4939      	ldr	r1, [pc, #228]	; (8004ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f12:	7bfb      	ldrb	r3, [r7, #15]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d167      	bne.n	8004fe8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f18:	4b36      	ldr	r3, [pc, #216]	; (8004ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a35      	ldr	r2, [pc, #212]	; (8004ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f24:	f7fc fc00 	bl	8001728 <HAL_GetTick>
 8004f28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f2a:	e009      	b.n	8004f40 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f2c:	f7fc fbfc 	bl	8001728 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d902      	bls.n	8004f40 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	73fb      	strb	r3, [r7, #15]
        break;
 8004f3e:	e005      	b.n	8004f4c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f40:	4b2c      	ldr	r3, [pc, #176]	; (8004ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1ef      	bne.n	8004f2c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d14a      	bne.n	8004fe8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d111      	bne.n	8004f7c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f58:	4b26      	ldr	r3, [pc, #152]	; (8004ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6892      	ldr	r2, [r2, #8]
 8004f68:	0211      	lsls	r1, r2, #8
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	68d2      	ldr	r2, [r2, #12]
 8004f6e:	0912      	lsrs	r2, r2, #4
 8004f70:	0452      	lsls	r2, r2, #17
 8004f72:	430a      	orrs	r2, r1
 8004f74:	491f      	ldr	r1, [pc, #124]	; (8004ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	614b      	str	r3, [r1, #20]
 8004f7a:	e011      	b.n	8004fa0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f7c:	4b1d      	ldr	r3, [pc, #116]	; (8004ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6892      	ldr	r2, [r2, #8]
 8004f8c:	0211      	lsls	r1, r2, #8
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6912      	ldr	r2, [r2, #16]
 8004f92:	0852      	lsrs	r2, r2, #1
 8004f94:	3a01      	subs	r2, #1
 8004f96:	0652      	lsls	r2, r2, #25
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	4916      	ldr	r1, [pc, #88]	; (8004ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004fa0:	4b14      	ldr	r3, [pc, #80]	; (8004ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a13      	ldr	r2, [pc, #76]	; (8004ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004faa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fac:	f7fc fbbc 	bl	8001728 <HAL_GetTick>
 8004fb0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fb2:	e009      	b.n	8004fc8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fb4:	f7fc fbb8 	bl	8001728 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d902      	bls.n	8004fc8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	73fb      	strb	r3, [r7, #15]
          break;
 8004fc6:	e005      	b.n	8004fd4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fc8:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0ef      	beq.n	8004fb4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004fd4:	7bfb      	ldrb	r3, [r7, #15]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d106      	bne.n	8004fe8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004fda:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fdc:	695a      	ldr	r2, [r3, #20]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	4904      	ldr	r1, [pc, #16]	; (8004ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40021000 	.word	0x40021000

08004ff8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e095      	b.n	8005136 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	2b00      	cmp	r3, #0
 8005010:	d108      	bne.n	8005024 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800501a:	d009      	beq.n	8005030 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	61da      	str	r2, [r3, #28]
 8005022:	e005      	b.n	8005030 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d106      	bne.n	8005050 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7fc f95c 	bl	8001308 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005066:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005070:	d902      	bls.n	8005078 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005072:	2300      	movs	r3, #0
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	e002      	b.n	800507e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800507c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005086:	d007      	beq.n	8005098 <HAL_SPI_Init+0xa0>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005090:	d002      	beq.n	8005098 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050a8:	431a      	orrs	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050c6:	431a      	orrs	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050d0:	431a      	orrs	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050da:	ea42 0103 	orr.w	r1, r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	0c1b      	lsrs	r3, r3, #16
 80050f4:	f003 0204 	and.w	r2, r3, #4
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	f003 0310 	and.w	r3, r3, #16
 8005100:	431a      	orrs	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005106:	f003 0308 	and.w	r3, r3, #8
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005114:	ea42 0103 	orr.w	r1, r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b082      	sub	sp, #8
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e040      	b.n	80051d2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005154:	2b00      	cmp	r3, #0
 8005156:	d106      	bne.n	8005166 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7fc f933 	bl	80013cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2224      	movs	r2, #36	; 0x24
 800516a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0201 	bic.w	r2, r2, #1
 800517a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f8bf 	bl	8005300 <UART_SetConfig>
 8005182:	4603      	mov	r3, r0
 8005184:	2b01      	cmp	r3, #1
 8005186:	d101      	bne.n	800518c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e022      	b.n	80051d2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fb6d 	bl	8005874 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f042 0201 	orr.w	r2, r2, #1
 80051c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fbf4 	bl	80059b8 <UART_CheckIdleState>
 80051d0:	4603      	mov	r3, r0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b08a      	sub	sp, #40	; 0x28
 80051de:	af02      	add	r7, sp, #8
 80051e0:	60f8      	str	r0, [r7, #12]
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	603b      	str	r3, [r7, #0]
 80051e6:	4613      	mov	r3, r2
 80051e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ee:	2b20      	cmp	r3, #32
 80051f0:	f040 8081 	bne.w	80052f6 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d002      	beq.n	8005200 <HAL_UART_Transmit+0x26>
 80051fa:	88fb      	ldrh	r3, [r7, #6]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e079      	b.n	80052f8 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800520a:	2b01      	cmp	r3, #1
 800520c:	d101      	bne.n	8005212 <HAL_UART_Transmit+0x38>
 800520e:	2302      	movs	r3, #2
 8005210:	e072      	b.n	80052f8 <HAL_UART_Transmit+0x11e>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2221      	movs	r2, #33	; 0x21
 8005224:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005226:	f7fc fa7f 	bl	8001728 <HAL_GetTick>
 800522a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	88fa      	ldrh	r2, [r7, #6]
 8005230:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	88fa      	ldrh	r2, [r7, #6]
 8005238:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005244:	d108      	bne.n	8005258 <HAL_UART_Transmit+0x7e>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d104      	bne.n	8005258 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800524e:	2300      	movs	r3, #0
 8005250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	61bb      	str	r3, [r7, #24]
 8005256:	e003      	b.n	8005260 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800525c:	2300      	movs	r3, #0
 800525e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005268:	e02d      	b.n	80052c6 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2200      	movs	r2, #0
 8005272:	2180      	movs	r1, #128	; 0x80
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 fbe4 	bl	8005a42 <UART_WaitOnFlagUntilTimeout>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e039      	b.n	80052f8 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10b      	bne.n	80052a2 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	881a      	ldrh	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005296:	b292      	uxth	r2, r2
 8005298:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	3302      	adds	r3, #2
 800529e:	61bb      	str	r3, [r7, #24]
 80052a0:	e008      	b.n	80052b4 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	781a      	ldrb	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	b292      	uxth	r2, r2
 80052ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	3301      	adds	r3, #1
 80052b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1cb      	bne.n	800526a <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2200      	movs	r2, #0
 80052da:	2140      	movs	r1, #64	; 0x40
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 fbb0 	bl	8005a42 <UART_WaitOnFlagUntilTimeout>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e005      	b.n	80052f8 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2220      	movs	r2, #32
 80052f0:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80052f2:	2300      	movs	r3, #0
 80052f4:	e000      	b.n	80052f8 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80052f6:	2302      	movs	r3, #2
  }
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3720      	adds	r7, #32
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005304:	b08a      	sub	sp, #40	; 0x28
 8005306:	af00      	add	r7, sp, #0
 8005308:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	431a      	orrs	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	431a      	orrs	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	69db      	ldr	r3, [r3, #28]
 8005324:	4313      	orrs	r3, r2
 8005326:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	4ba4      	ldr	r3, [pc, #656]	; (80055c0 <UART_SetConfig+0x2c0>)
 8005330:	4013      	ands	r3, r2
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	6812      	ldr	r2, [r2, #0]
 8005336:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005338:	430b      	orrs	r3, r1
 800533a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a99      	ldr	r2, [pc, #612]	; (80055c4 <UART_SetConfig+0x2c4>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d004      	beq.n	800536c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005368:	4313      	orrs	r3, r2
 800536a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800537c:	430a      	orrs	r2, r1
 800537e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a90      	ldr	r2, [pc, #576]	; (80055c8 <UART_SetConfig+0x2c8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d126      	bne.n	80053d8 <UART_SetConfig+0xd8>
 800538a:	4b90      	ldr	r3, [pc, #576]	; (80055cc <UART_SetConfig+0x2cc>)
 800538c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005390:	f003 0303 	and.w	r3, r3, #3
 8005394:	2b03      	cmp	r3, #3
 8005396:	d81b      	bhi.n	80053d0 <UART_SetConfig+0xd0>
 8005398:	a201      	add	r2, pc, #4	; (adr r2, 80053a0 <UART_SetConfig+0xa0>)
 800539a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539e:	bf00      	nop
 80053a0:	080053b1 	.word	0x080053b1
 80053a4:	080053c1 	.word	0x080053c1
 80053a8:	080053b9 	.word	0x080053b9
 80053ac:	080053c9 	.word	0x080053c9
 80053b0:	2301      	movs	r3, #1
 80053b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053b6:	e116      	b.n	80055e6 <UART_SetConfig+0x2e6>
 80053b8:	2302      	movs	r3, #2
 80053ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053be:	e112      	b.n	80055e6 <UART_SetConfig+0x2e6>
 80053c0:	2304      	movs	r3, #4
 80053c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053c6:	e10e      	b.n	80055e6 <UART_SetConfig+0x2e6>
 80053c8:	2308      	movs	r3, #8
 80053ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ce:	e10a      	b.n	80055e6 <UART_SetConfig+0x2e6>
 80053d0:	2310      	movs	r3, #16
 80053d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053d6:	e106      	b.n	80055e6 <UART_SetConfig+0x2e6>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a7c      	ldr	r2, [pc, #496]	; (80055d0 <UART_SetConfig+0x2d0>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d138      	bne.n	8005454 <UART_SetConfig+0x154>
 80053e2:	4b7a      	ldr	r3, [pc, #488]	; (80055cc <UART_SetConfig+0x2cc>)
 80053e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e8:	f003 030c 	and.w	r3, r3, #12
 80053ec:	2b0c      	cmp	r3, #12
 80053ee:	d82d      	bhi.n	800544c <UART_SetConfig+0x14c>
 80053f0:	a201      	add	r2, pc, #4	; (adr r2, 80053f8 <UART_SetConfig+0xf8>)
 80053f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f6:	bf00      	nop
 80053f8:	0800542d 	.word	0x0800542d
 80053fc:	0800544d 	.word	0x0800544d
 8005400:	0800544d 	.word	0x0800544d
 8005404:	0800544d 	.word	0x0800544d
 8005408:	0800543d 	.word	0x0800543d
 800540c:	0800544d 	.word	0x0800544d
 8005410:	0800544d 	.word	0x0800544d
 8005414:	0800544d 	.word	0x0800544d
 8005418:	08005435 	.word	0x08005435
 800541c:	0800544d 	.word	0x0800544d
 8005420:	0800544d 	.word	0x0800544d
 8005424:	0800544d 	.word	0x0800544d
 8005428:	08005445 	.word	0x08005445
 800542c:	2300      	movs	r3, #0
 800542e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005432:	e0d8      	b.n	80055e6 <UART_SetConfig+0x2e6>
 8005434:	2302      	movs	r3, #2
 8005436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800543a:	e0d4      	b.n	80055e6 <UART_SetConfig+0x2e6>
 800543c:	2304      	movs	r3, #4
 800543e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005442:	e0d0      	b.n	80055e6 <UART_SetConfig+0x2e6>
 8005444:	2308      	movs	r3, #8
 8005446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800544a:	e0cc      	b.n	80055e6 <UART_SetConfig+0x2e6>
 800544c:	2310      	movs	r3, #16
 800544e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005452:	e0c8      	b.n	80055e6 <UART_SetConfig+0x2e6>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a5e      	ldr	r2, [pc, #376]	; (80055d4 <UART_SetConfig+0x2d4>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d125      	bne.n	80054aa <UART_SetConfig+0x1aa>
 800545e:	4b5b      	ldr	r3, [pc, #364]	; (80055cc <UART_SetConfig+0x2cc>)
 8005460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005464:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005468:	2b30      	cmp	r3, #48	; 0x30
 800546a:	d016      	beq.n	800549a <UART_SetConfig+0x19a>
 800546c:	2b30      	cmp	r3, #48	; 0x30
 800546e:	d818      	bhi.n	80054a2 <UART_SetConfig+0x1a2>
 8005470:	2b20      	cmp	r3, #32
 8005472:	d00a      	beq.n	800548a <UART_SetConfig+0x18a>
 8005474:	2b20      	cmp	r3, #32
 8005476:	d814      	bhi.n	80054a2 <UART_SetConfig+0x1a2>
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <UART_SetConfig+0x182>
 800547c:	2b10      	cmp	r3, #16
 800547e:	d008      	beq.n	8005492 <UART_SetConfig+0x192>
 8005480:	e00f      	b.n	80054a2 <UART_SetConfig+0x1a2>
 8005482:	2300      	movs	r3, #0
 8005484:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005488:	e0ad      	b.n	80055e6 <UART_SetConfig+0x2e6>
 800548a:	2302      	movs	r3, #2
 800548c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005490:	e0a9      	b.n	80055e6 <UART_SetConfig+0x2e6>
 8005492:	2304      	movs	r3, #4
 8005494:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005498:	e0a5      	b.n	80055e6 <UART_SetConfig+0x2e6>
 800549a:	2308      	movs	r3, #8
 800549c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054a0:	e0a1      	b.n	80055e6 <UART_SetConfig+0x2e6>
 80054a2:	2310      	movs	r3, #16
 80054a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054a8:	e09d      	b.n	80055e6 <UART_SetConfig+0x2e6>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a4a      	ldr	r2, [pc, #296]	; (80055d8 <UART_SetConfig+0x2d8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d125      	bne.n	8005500 <UART_SetConfig+0x200>
 80054b4:	4b45      	ldr	r3, [pc, #276]	; (80055cc <UART_SetConfig+0x2cc>)
 80054b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054be:	2bc0      	cmp	r3, #192	; 0xc0
 80054c0:	d016      	beq.n	80054f0 <UART_SetConfig+0x1f0>
 80054c2:	2bc0      	cmp	r3, #192	; 0xc0
 80054c4:	d818      	bhi.n	80054f8 <UART_SetConfig+0x1f8>
 80054c6:	2b80      	cmp	r3, #128	; 0x80
 80054c8:	d00a      	beq.n	80054e0 <UART_SetConfig+0x1e0>
 80054ca:	2b80      	cmp	r3, #128	; 0x80
 80054cc:	d814      	bhi.n	80054f8 <UART_SetConfig+0x1f8>
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <UART_SetConfig+0x1d8>
 80054d2:	2b40      	cmp	r3, #64	; 0x40
 80054d4:	d008      	beq.n	80054e8 <UART_SetConfig+0x1e8>
 80054d6:	e00f      	b.n	80054f8 <UART_SetConfig+0x1f8>
 80054d8:	2300      	movs	r3, #0
 80054da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054de:	e082      	b.n	80055e6 <UART_SetConfig+0x2e6>
 80054e0:	2302      	movs	r3, #2
 80054e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054e6:	e07e      	b.n	80055e6 <UART_SetConfig+0x2e6>
 80054e8:	2304      	movs	r3, #4
 80054ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ee:	e07a      	b.n	80055e6 <UART_SetConfig+0x2e6>
 80054f0:	2308      	movs	r3, #8
 80054f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054f6:	e076      	b.n	80055e6 <UART_SetConfig+0x2e6>
 80054f8:	2310      	movs	r3, #16
 80054fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054fe:	e072      	b.n	80055e6 <UART_SetConfig+0x2e6>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a35      	ldr	r2, [pc, #212]	; (80055dc <UART_SetConfig+0x2dc>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d12a      	bne.n	8005560 <UART_SetConfig+0x260>
 800550a:	4b30      	ldr	r3, [pc, #192]	; (80055cc <UART_SetConfig+0x2cc>)
 800550c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005510:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005514:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005518:	d01a      	beq.n	8005550 <UART_SetConfig+0x250>
 800551a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800551e:	d81b      	bhi.n	8005558 <UART_SetConfig+0x258>
 8005520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005524:	d00c      	beq.n	8005540 <UART_SetConfig+0x240>
 8005526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800552a:	d815      	bhi.n	8005558 <UART_SetConfig+0x258>
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <UART_SetConfig+0x238>
 8005530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005534:	d008      	beq.n	8005548 <UART_SetConfig+0x248>
 8005536:	e00f      	b.n	8005558 <UART_SetConfig+0x258>
 8005538:	2300      	movs	r3, #0
 800553a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800553e:	e052      	b.n	80055e6 <UART_SetConfig+0x2e6>
 8005540:	2302      	movs	r3, #2
 8005542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005546:	e04e      	b.n	80055e6 <UART_SetConfig+0x2e6>
 8005548:	2304      	movs	r3, #4
 800554a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800554e:	e04a      	b.n	80055e6 <UART_SetConfig+0x2e6>
 8005550:	2308      	movs	r3, #8
 8005552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005556:	e046      	b.n	80055e6 <UART_SetConfig+0x2e6>
 8005558:	2310      	movs	r3, #16
 800555a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800555e:	e042      	b.n	80055e6 <UART_SetConfig+0x2e6>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a17      	ldr	r2, [pc, #92]	; (80055c4 <UART_SetConfig+0x2c4>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d13a      	bne.n	80055e0 <UART_SetConfig+0x2e0>
 800556a:	4b18      	ldr	r3, [pc, #96]	; (80055cc <UART_SetConfig+0x2cc>)
 800556c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005570:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005574:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005578:	d01a      	beq.n	80055b0 <UART_SetConfig+0x2b0>
 800557a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800557e:	d81b      	bhi.n	80055b8 <UART_SetConfig+0x2b8>
 8005580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005584:	d00c      	beq.n	80055a0 <UART_SetConfig+0x2a0>
 8005586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800558a:	d815      	bhi.n	80055b8 <UART_SetConfig+0x2b8>
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <UART_SetConfig+0x298>
 8005590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005594:	d008      	beq.n	80055a8 <UART_SetConfig+0x2a8>
 8005596:	e00f      	b.n	80055b8 <UART_SetConfig+0x2b8>
 8005598:	2300      	movs	r3, #0
 800559a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800559e:	e022      	b.n	80055e6 <UART_SetConfig+0x2e6>
 80055a0:	2302      	movs	r3, #2
 80055a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055a6:	e01e      	b.n	80055e6 <UART_SetConfig+0x2e6>
 80055a8:	2304      	movs	r3, #4
 80055aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ae:	e01a      	b.n	80055e6 <UART_SetConfig+0x2e6>
 80055b0:	2308      	movs	r3, #8
 80055b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055b6:	e016      	b.n	80055e6 <UART_SetConfig+0x2e6>
 80055b8:	2310      	movs	r3, #16
 80055ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055be:	e012      	b.n	80055e6 <UART_SetConfig+0x2e6>
 80055c0:	efff69f3 	.word	0xefff69f3
 80055c4:	40008000 	.word	0x40008000
 80055c8:	40013800 	.word	0x40013800
 80055cc:	40021000 	.word	0x40021000
 80055d0:	40004400 	.word	0x40004400
 80055d4:	40004800 	.word	0x40004800
 80055d8:	40004c00 	.word	0x40004c00
 80055dc:	40005000 	.word	0x40005000
 80055e0:	2310      	movs	r3, #16
 80055e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4aa0      	ldr	r2, [pc, #640]	; (800586c <UART_SetConfig+0x56c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d17a      	bne.n	80056e6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055f4:	2b08      	cmp	r3, #8
 80055f6:	d824      	bhi.n	8005642 <UART_SetConfig+0x342>
 80055f8:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <UART_SetConfig+0x300>)
 80055fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fe:	bf00      	nop
 8005600:	08005625 	.word	0x08005625
 8005604:	08005643 	.word	0x08005643
 8005608:	0800562d 	.word	0x0800562d
 800560c:	08005643 	.word	0x08005643
 8005610:	08005633 	.word	0x08005633
 8005614:	08005643 	.word	0x08005643
 8005618:	08005643 	.word	0x08005643
 800561c:	08005643 	.word	0x08005643
 8005620:	0800563b 	.word	0x0800563b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005624:	f7fe ffa0 	bl	8004568 <HAL_RCC_GetPCLK1Freq>
 8005628:	61f8      	str	r0, [r7, #28]
        break;
 800562a:	e010      	b.n	800564e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800562c:	4b90      	ldr	r3, [pc, #576]	; (8005870 <UART_SetConfig+0x570>)
 800562e:	61fb      	str	r3, [r7, #28]
        break;
 8005630:	e00d      	b.n	800564e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005632:	f7fe ff01 	bl	8004438 <HAL_RCC_GetSysClockFreq>
 8005636:	61f8      	str	r0, [r7, #28]
        break;
 8005638:	e009      	b.n	800564e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800563a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800563e:	61fb      	str	r3, [r7, #28]
        break;
 8005640:	e005      	b.n	800564e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005642:	2300      	movs	r3, #0
 8005644:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800564c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 80fd 	beq.w	8005850 <UART_SetConfig+0x550>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	4613      	mov	r3, r2
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	4413      	add	r3, r2
 8005660:	69fa      	ldr	r2, [r7, #28]
 8005662:	429a      	cmp	r2, r3
 8005664:	d305      	bcc.n	8005672 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800566c:	69fa      	ldr	r2, [r7, #28]
 800566e:	429a      	cmp	r2, r3
 8005670:	d903      	bls.n	800567a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005678:	e0ea      	b.n	8005850 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	2200      	movs	r2, #0
 800567e:	461c      	mov	r4, r3
 8005680:	4615      	mov	r5, r2
 8005682:	f04f 0200 	mov.w	r2, #0
 8005686:	f04f 0300 	mov.w	r3, #0
 800568a:	022b      	lsls	r3, r5, #8
 800568c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005690:	0222      	lsls	r2, r4, #8
 8005692:	68f9      	ldr	r1, [r7, #12]
 8005694:	6849      	ldr	r1, [r1, #4]
 8005696:	0849      	lsrs	r1, r1, #1
 8005698:	2000      	movs	r0, #0
 800569a:	4688      	mov	r8, r1
 800569c:	4681      	mov	r9, r0
 800569e:	eb12 0a08 	adds.w	sl, r2, r8
 80056a2:	eb43 0b09 	adc.w	fp, r3, r9
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	603b      	str	r3, [r7, #0]
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056b4:	4650      	mov	r0, sl
 80056b6:	4659      	mov	r1, fp
 80056b8:	f7fa fde2 	bl	8000280 <__aeabi_uldivmod>
 80056bc:	4602      	mov	r2, r0
 80056be:	460b      	mov	r3, r1
 80056c0:	4613      	mov	r3, r2
 80056c2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056ca:	d308      	bcc.n	80056de <UART_SetConfig+0x3de>
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056d2:	d204      	bcs.n	80056de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	60da      	str	r2, [r3, #12]
 80056dc:	e0b8      	b.n	8005850 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80056e4:	e0b4      	b.n	8005850 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ee:	d15f      	bne.n	80057b0 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 80056f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d828      	bhi.n	800574a <UART_SetConfig+0x44a>
 80056f8:	a201      	add	r2, pc, #4	; (adr r2, 8005700 <UART_SetConfig+0x400>)
 80056fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fe:	bf00      	nop
 8005700:	08005725 	.word	0x08005725
 8005704:	0800572d 	.word	0x0800572d
 8005708:	08005735 	.word	0x08005735
 800570c:	0800574b 	.word	0x0800574b
 8005710:	0800573b 	.word	0x0800573b
 8005714:	0800574b 	.word	0x0800574b
 8005718:	0800574b 	.word	0x0800574b
 800571c:	0800574b 	.word	0x0800574b
 8005720:	08005743 	.word	0x08005743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005724:	f7fe ff20 	bl	8004568 <HAL_RCC_GetPCLK1Freq>
 8005728:	61f8      	str	r0, [r7, #28]
        break;
 800572a:	e014      	b.n	8005756 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800572c:	f7fe ff32 	bl	8004594 <HAL_RCC_GetPCLK2Freq>
 8005730:	61f8      	str	r0, [r7, #28]
        break;
 8005732:	e010      	b.n	8005756 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005734:	4b4e      	ldr	r3, [pc, #312]	; (8005870 <UART_SetConfig+0x570>)
 8005736:	61fb      	str	r3, [r7, #28]
        break;
 8005738:	e00d      	b.n	8005756 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800573a:	f7fe fe7d 	bl	8004438 <HAL_RCC_GetSysClockFreq>
 800573e:	61f8      	str	r0, [r7, #28]
        break;
 8005740:	e009      	b.n	8005756 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005746:	61fb      	str	r3, [r7, #28]
        break;
 8005748:	e005      	b.n	8005756 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800574a:	2300      	movs	r3, #0
 800574c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005754:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d079      	beq.n	8005850 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	005a      	lsls	r2, r3, #1
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	085b      	lsrs	r3, r3, #1
 8005766:	441a      	add	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005770:	b29b      	uxth	r3, r3
 8005772:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	2b0f      	cmp	r3, #15
 8005778:	d916      	bls.n	80057a8 <UART_SetConfig+0x4a8>
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005780:	d212      	bcs.n	80057a8 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	b29b      	uxth	r3, r3
 8005786:	f023 030f 	bic.w	r3, r3, #15
 800578a:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	085b      	lsrs	r3, r3, #1
 8005790:	b29b      	uxth	r3, r3
 8005792:	f003 0307 	and.w	r3, r3, #7
 8005796:	b29a      	uxth	r2, r3
 8005798:	8afb      	ldrh	r3, [r7, #22]
 800579a:	4313      	orrs	r3, r2
 800579c:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	8afa      	ldrh	r2, [r7, #22]
 80057a4:	60da      	str	r2, [r3, #12]
 80057a6:	e053      	b.n	8005850 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80057ae:	e04f      	b.n	8005850 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057b4:	2b08      	cmp	r3, #8
 80057b6:	d828      	bhi.n	800580a <UART_SetConfig+0x50a>
 80057b8:	a201      	add	r2, pc, #4	; (adr r2, 80057c0 <UART_SetConfig+0x4c0>)
 80057ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057be:	bf00      	nop
 80057c0:	080057e5 	.word	0x080057e5
 80057c4:	080057ed 	.word	0x080057ed
 80057c8:	080057f5 	.word	0x080057f5
 80057cc:	0800580b 	.word	0x0800580b
 80057d0:	080057fb 	.word	0x080057fb
 80057d4:	0800580b 	.word	0x0800580b
 80057d8:	0800580b 	.word	0x0800580b
 80057dc:	0800580b 	.word	0x0800580b
 80057e0:	08005803 	.word	0x08005803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057e4:	f7fe fec0 	bl	8004568 <HAL_RCC_GetPCLK1Freq>
 80057e8:	61f8      	str	r0, [r7, #28]
        break;
 80057ea:	e014      	b.n	8005816 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057ec:	f7fe fed2 	bl	8004594 <HAL_RCC_GetPCLK2Freq>
 80057f0:	61f8      	str	r0, [r7, #28]
        break;
 80057f2:	e010      	b.n	8005816 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057f4:	4b1e      	ldr	r3, [pc, #120]	; (8005870 <UART_SetConfig+0x570>)
 80057f6:	61fb      	str	r3, [r7, #28]
        break;
 80057f8:	e00d      	b.n	8005816 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057fa:	f7fe fe1d 	bl	8004438 <HAL_RCC_GetSysClockFreq>
 80057fe:	61f8      	str	r0, [r7, #28]
        break;
 8005800:	e009      	b.n	8005816 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005806:	61fb      	str	r3, [r7, #28]
        break;
 8005808:	e005      	b.n	8005816 <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 800580a:	2300      	movs	r3, #0
 800580c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005814:	bf00      	nop
    }

    if (pclk != 0U)
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d019      	beq.n	8005850 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	085a      	lsrs	r2, r3, #1
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	441a      	add	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	fbb2 f3f3 	udiv	r3, r2, r3
 800582e:	b29b      	uxth	r3, r3
 8005830:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	2b0f      	cmp	r3, #15
 8005836:	d908      	bls.n	800584a <UART_SetConfig+0x54a>
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800583e:	d204      	bcs.n	800584a <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	60da      	str	r2, [r3, #12]
 8005848:	e002      	b.n	8005850 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800585c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005860:	4618      	mov	r0, r3
 8005862:	3728      	adds	r7, #40	; 0x28
 8005864:	46bd      	mov	sp, r7
 8005866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800586a:	bf00      	nop
 800586c:	40008000 	.word	0x40008000
 8005870:	00f42400 	.word	0x00f42400

08005874 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00a      	beq.n	800589e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	f003 0308 	and.w	r3, r3, #8
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	430a      	orrs	r2, r1
 8005902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	f003 0310 	and.w	r3, r3, #16
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00a      	beq.n	8005926 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	430a      	orrs	r2, r1
 8005924:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	f003 0320 	and.w	r3, r3, #32
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005950:	2b00      	cmp	r3, #0
 8005952:	d01a      	beq.n	800598a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005972:	d10a      	bne.n	800598a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	605a      	str	r2, [r3, #4]
  }
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af02      	add	r7, sp, #8
 80059be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80059c6:	f7fb feaf 	bl	8001728 <HAL_GetTick>
 80059ca:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0308 	and.w	r3, r3, #8
 80059d6:	2b08      	cmp	r3, #8
 80059d8:	d10e      	bne.n	80059f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f82a 	bl	8005a42 <UART_WaitOnFlagUntilTimeout>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e020      	b.n	8005a3a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0304 	and.w	r3, r3, #4
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	d10e      	bne.n	8005a24 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f814 	bl	8005a42 <UART_WaitOnFlagUntilTimeout>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e00a      	b.n	8005a3a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2220      	movs	r2, #32
 8005a28:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b084      	sub	sp, #16
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	60f8      	str	r0, [r7, #12]
 8005a4a:	60b9      	str	r1, [r7, #8]
 8005a4c:	603b      	str	r3, [r7, #0]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a52:	e05d      	b.n	8005b10 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a5a:	d059      	beq.n	8005b10 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a5c:	f7fb fe64 	bl	8001728 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d302      	bcc.n	8005a72 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d11b      	bne.n	8005aaa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a80:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0201 	bic.w	r2, r2, #1
 8005a90:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2220      	movs	r2, #32
 8005a96:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e042      	b.n	8005b30 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d02b      	beq.n	8005b10 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ac6:	d123      	bne.n	8005b10 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ad0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ae0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 0201 	bic.w	r2, r2, #1
 8005af0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2220      	movs	r2, #32
 8005af6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2220      	movs	r2, #32
 8005afc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2220      	movs	r2, #32
 8005b02:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e00f      	b.n	8005b30 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	69da      	ldr	r2, [r3, #28]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	bf0c      	ite	eq
 8005b20:	2301      	moveq	r3, #1
 8005b22:	2300      	movne	r3, #0
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	461a      	mov	r2, r3
 8005b28:	79fb      	ldrb	r3, [r7, #7]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d092      	beq.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005b3c:	4904      	ldr	r1, [pc, #16]	; (8005b50 <MX_FATFS_Init+0x18>)
 8005b3e:	4805      	ldr	r0, [pc, #20]	; (8005b54 <MX_FATFS_Init+0x1c>)
 8005b40:	f000 f8b0 	bl	8005ca4 <FATFS_LinkDriver>
 8005b44:	4603      	mov	r3, r0
 8005b46:	461a      	mov	r2, r3
 8005b48:	4b03      	ldr	r3, [pc, #12]	; (8005b58 <MX_FATFS_Init+0x20>)
 8005b4a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005b4c:	bf00      	nop
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	20000664 	.word	0x20000664
 8005b54:	20000018 	.word	0x20000018
 8005b58:	20000660 	.word	0x20000660

08005b5c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	4603      	mov	r3, r0
 8005b64:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8005b66:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <USER_initialize+0x24>)
 8005b68:	2201      	movs	r2, #1
 8005b6a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005b6c:	4b04      	ldr	r3, [pc, #16]	; (8005b80 <USER_initialize+0x24>)
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	20000015 	.word	0x20000015

08005b84 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8005b8e:	4b06      	ldr	r3, [pc, #24]	; (8005ba8 <USER_status+0x24>)
 8005b90:	2201      	movs	r2, #1
 8005b92:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005b94:	4b04      	ldr	r3, [pc, #16]	; (8005ba8 <USER_status+0x24>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	20000015 	.word	0x20000015

08005bac <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60b9      	str	r1, [r7, #8]
 8005bb4:	607a      	str	r2, [r7, #4]
 8005bb6:	603b      	str	r3, [r7, #0]
 8005bb8:	4603      	mov	r3, r0
 8005bba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8005bbc:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b085      	sub	sp, #20
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
 8005bd4:	603b      	str	r3, [r7, #0]
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8005bda:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	603a      	str	r2, [r7, #0]
 8005bf2:	71fb      	strb	r3, [r7, #7]
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	73fb      	strb	r3, [r7, #15]
    return res;
 8005bfc:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
	...

08005c0c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	4613      	mov	r3, r2
 8005c18:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005c22:	4b1f      	ldr	r3, [pc, #124]	; (8005ca0 <FATFS_LinkDriverEx+0x94>)
 8005c24:	7a5b      	ldrb	r3, [r3, #9]
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d131      	bne.n	8005c90 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005c2c:	4b1c      	ldr	r3, [pc, #112]	; (8005ca0 <FATFS_LinkDriverEx+0x94>)
 8005c2e:	7a5b      	ldrb	r3, [r3, #9]
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	461a      	mov	r2, r3
 8005c34:	4b1a      	ldr	r3, [pc, #104]	; (8005ca0 <FATFS_LinkDriverEx+0x94>)
 8005c36:	2100      	movs	r1, #0
 8005c38:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005c3a:	4b19      	ldr	r3, [pc, #100]	; (8005ca0 <FATFS_LinkDriverEx+0x94>)
 8005c3c:	7a5b      	ldrb	r3, [r3, #9]
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	4a17      	ldr	r2, [pc, #92]	; (8005ca0 <FATFS_LinkDriverEx+0x94>)
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005c4a:	4b15      	ldr	r3, [pc, #84]	; (8005ca0 <FATFS_LinkDriverEx+0x94>)
 8005c4c:	7a5b      	ldrb	r3, [r3, #9]
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	461a      	mov	r2, r3
 8005c52:	4b13      	ldr	r3, [pc, #76]	; (8005ca0 <FATFS_LinkDriverEx+0x94>)
 8005c54:	4413      	add	r3, r2
 8005c56:	79fa      	ldrb	r2, [r7, #7]
 8005c58:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005c5a:	4b11      	ldr	r3, [pc, #68]	; (8005ca0 <FATFS_LinkDriverEx+0x94>)
 8005c5c:	7a5b      	ldrb	r3, [r3, #9]
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	b2d1      	uxtb	r1, r2
 8005c64:	4a0e      	ldr	r2, [pc, #56]	; (8005ca0 <FATFS_LinkDriverEx+0x94>)
 8005c66:	7251      	strb	r1, [r2, #9]
 8005c68:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005c6a:	7dbb      	ldrb	r3, [r7, #22]
 8005c6c:	3330      	adds	r3, #48	; 0x30
 8005c6e:	b2da      	uxtb	r2, r3
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	3301      	adds	r3, #1
 8005c78:	223a      	movs	r2, #58	; 0x3a
 8005c7a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	3302      	adds	r3, #2
 8005c80:	222f      	movs	r2, #47	; 0x2f
 8005c82:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	3303      	adds	r3, #3
 8005c88:	2200      	movs	r2, #0
 8005c8a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	371c      	adds	r7, #28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	20000668 	.word	0x20000668

08005ca4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005cae:	2200      	movs	r2, #0
 8005cb0:	6839      	ldr	r1, [r7, #0]
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff ffaa 	bl	8005c0c <FATFS_LinkDriverEx>
 8005cb8:	4603      	mov	r3, r0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <__errno>:
 8005cc4:	4b01      	ldr	r3, [pc, #4]	; (8005ccc <__errno+0x8>)
 8005cc6:	6818      	ldr	r0, [r3, #0]
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	2000002c 	.word	0x2000002c

08005cd0 <__libc_init_array>:
 8005cd0:	b570      	push	{r4, r5, r6, lr}
 8005cd2:	4d0d      	ldr	r5, [pc, #52]	; (8005d08 <__libc_init_array+0x38>)
 8005cd4:	4c0d      	ldr	r4, [pc, #52]	; (8005d0c <__libc_init_array+0x3c>)
 8005cd6:	1b64      	subs	r4, r4, r5
 8005cd8:	10a4      	asrs	r4, r4, #2
 8005cda:	2600      	movs	r6, #0
 8005cdc:	42a6      	cmp	r6, r4
 8005cde:	d109      	bne.n	8005cf4 <__libc_init_array+0x24>
 8005ce0:	4d0b      	ldr	r5, [pc, #44]	; (8005d10 <__libc_init_array+0x40>)
 8005ce2:	4c0c      	ldr	r4, [pc, #48]	; (8005d14 <__libc_init_array+0x44>)
 8005ce4:	f000 fc8e 	bl	8006604 <_init>
 8005ce8:	1b64      	subs	r4, r4, r5
 8005cea:	10a4      	asrs	r4, r4, #2
 8005cec:	2600      	movs	r6, #0
 8005cee:	42a6      	cmp	r6, r4
 8005cf0:	d105      	bne.n	8005cfe <__libc_init_array+0x2e>
 8005cf2:	bd70      	pop	{r4, r5, r6, pc}
 8005cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cf8:	4798      	blx	r3
 8005cfa:	3601      	adds	r6, #1
 8005cfc:	e7ee      	b.n	8005cdc <__libc_init_array+0xc>
 8005cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d02:	4798      	blx	r3
 8005d04:	3601      	adds	r6, #1
 8005d06:	e7f2      	b.n	8005cee <__libc_init_array+0x1e>
 8005d08:	0800742c 	.word	0x0800742c
 8005d0c:	0800742c 	.word	0x0800742c
 8005d10:	0800742c 	.word	0x0800742c
 8005d14:	08007430 	.word	0x08007430

08005d18 <memset>:
 8005d18:	4402      	add	r2, r0
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d100      	bne.n	8005d22 <memset+0xa>
 8005d20:	4770      	bx	lr
 8005d22:	f803 1b01 	strb.w	r1, [r3], #1
 8005d26:	e7f9      	b.n	8005d1c <memset+0x4>

08005d28 <siprintf>:
 8005d28:	b40e      	push	{r1, r2, r3}
 8005d2a:	b500      	push	{lr}
 8005d2c:	b09c      	sub	sp, #112	; 0x70
 8005d2e:	ab1d      	add	r3, sp, #116	; 0x74
 8005d30:	9002      	str	r0, [sp, #8]
 8005d32:	9006      	str	r0, [sp, #24]
 8005d34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d38:	4809      	ldr	r0, [pc, #36]	; (8005d60 <siprintf+0x38>)
 8005d3a:	9107      	str	r1, [sp, #28]
 8005d3c:	9104      	str	r1, [sp, #16]
 8005d3e:	4909      	ldr	r1, [pc, #36]	; (8005d64 <siprintf+0x3c>)
 8005d40:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d44:	9105      	str	r1, [sp, #20]
 8005d46:	6800      	ldr	r0, [r0, #0]
 8005d48:	9301      	str	r3, [sp, #4]
 8005d4a:	a902      	add	r1, sp, #8
 8005d4c:	f000 f868 	bl	8005e20 <_svfiprintf_r>
 8005d50:	9b02      	ldr	r3, [sp, #8]
 8005d52:	2200      	movs	r2, #0
 8005d54:	701a      	strb	r2, [r3, #0]
 8005d56:	b01c      	add	sp, #112	; 0x70
 8005d58:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d5c:	b003      	add	sp, #12
 8005d5e:	4770      	bx	lr
 8005d60:	2000002c 	.word	0x2000002c
 8005d64:	ffff0208 	.word	0xffff0208

08005d68 <__ssputs_r>:
 8005d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d6c:	688e      	ldr	r6, [r1, #8]
 8005d6e:	429e      	cmp	r6, r3
 8005d70:	4682      	mov	sl, r0
 8005d72:	460c      	mov	r4, r1
 8005d74:	4690      	mov	r8, r2
 8005d76:	461f      	mov	r7, r3
 8005d78:	d838      	bhi.n	8005dec <__ssputs_r+0x84>
 8005d7a:	898a      	ldrh	r2, [r1, #12]
 8005d7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d80:	d032      	beq.n	8005de8 <__ssputs_r+0x80>
 8005d82:	6825      	ldr	r5, [r4, #0]
 8005d84:	6909      	ldr	r1, [r1, #16]
 8005d86:	eba5 0901 	sub.w	r9, r5, r1
 8005d8a:	6965      	ldr	r5, [r4, #20]
 8005d8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d94:	3301      	adds	r3, #1
 8005d96:	444b      	add	r3, r9
 8005d98:	106d      	asrs	r5, r5, #1
 8005d9a:	429d      	cmp	r5, r3
 8005d9c:	bf38      	it	cc
 8005d9e:	461d      	movcc	r5, r3
 8005da0:	0553      	lsls	r3, r2, #21
 8005da2:	d531      	bpl.n	8005e08 <__ssputs_r+0xa0>
 8005da4:	4629      	mov	r1, r5
 8005da6:	f000 fb63 	bl	8006470 <_malloc_r>
 8005daa:	4606      	mov	r6, r0
 8005dac:	b950      	cbnz	r0, 8005dc4 <__ssputs_r+0x5c>
 8005dae:	230c      	movs	r3, #12
 8005db0:	f8ca 3000 	str.w	r3, [sl]
 8005db4:	89a3      	ldrh	r3, [r4, #12]
 8005db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dba:	81a3      	strh	r3, [r4, #12]
 8005dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc4:	6921      	ldr	r1, [r4, #16]
 8005dc6:	464a      	mov	r2, r9
 8005dc8:	f000 fabe 	bl	8006348 <memcpy>
 8005dcc:	89a3      	ldrh	r3, [r4, #12]
 8005dce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd6:	81a3      	strh	r3, [r4, #12]
 8005dd8:	6126      	str	r6, [r4, #16]
 8005dda:	6165      	str	r5, [r4, #20]
 8005ddc:	444e      	add	r6, r9
 8005dde:	eba5 0509 	sub.w	r5, r5, r9
 8005de2:	6026      	str	r6, [r4, #0]
 8005de4:	60a5      	str	r5, [r4, #8]
 8005de6:	463e      	mov	r6, r7
 8005de8:	42be      	cmp	r6, r7
 8005dea:	d900      	bls.n	8005dee <__ssputs_r+0x86>
 8005dec:	463e      	mov	r6, r7
 8005dee:	6820      	ldr	r0, [r4, #0]
 8005df0:	4632      	mov	r2, r6
 8005df2:	4641      	mov	r1, r8
 8005df4:	f000 fab6 	bl	8006364 <memmove>
 8005df8:	68a3      	ldr	r3, [r4, #8]
 8005dfa:	1b9b      	subs	r3, r3, r6
 8005dfc:	60a3      	str	r3, [r4, #8]
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	4433      	add	r3, r6
 8005e02:	6023      	str	r3, [r4, #0]
 8005e04:	2000      	movs	r0, #0
 8005e06:	e7db      	b.n	8005dc0 <__ssputs_r+0x58>
 8005e08:	462a      	mov	r2, r5
 8005e0a:	f000 fba5 	bl	8006558 <_realloc_r>
 8005e0e:	4606      	mov	r6, r0
 8005e10:	2800      	cmp	r0, #0
 8005e12:	d1e1      	bne.n	8005dd8 <__ssputs_r+0x70>
 8005e14:	6921      	ldr	r1, [r4, #16]
 8005e16:	4650      	mov	r0, sl
 8005e18:	f000 fabe 	bl	8006398 <_free_r>
 8005e1c:	e7c7      	b.n	8005dae <__ssputs_r+0x46>
	...

08005e20 <_svfiprintf_r>:
 8005e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e24:	4698      	mov	r8, r3
 8005e26:	898b      	ldrh	r3, [r1, #12]
 8005e28:	061b      	lsls	r3, r3, #24
 8005e2a:	b09d      	sub	sp, #116	; 0x74
 8005e2c:	4607      	mov	r7, r0
 8005e2e:	460d      	mov	r5, r1
 8005e30:	4614      	mov	r4, r2
 8005e32:	d50e      	bpl.n	8005e52 <_svfiprintf_r+0x32>
 8005e34:	690b      	ldr	r3, [r1, #16]
 8005e36:	b963      	cbnz	r3, 8005e52 <_svfiprintf_r+0x32>
 8005e38:	2140      	movs	r1, #64	; 0x40
 8005e3a:	f000 fb19 	bl	8006470 <_malloc_r>
 8005e3e:	6028      	str	r0, [r5, #0]
 8005e40:	6128      	str	r0, [r5, #16]
 8005e42:	b920      	cbnz	r0, 8005e4e <_svfiprintf_r+0x2e>
 8005e44:	230c      	movs	r3, #12
 8005e46:	603b      	str	r3, [r7, #0]
 8005e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e4c:	e0d1      	b.n	8005ff2 <_svfiprintf_r+0x1d2>
 8005e4e:	2340      	movs	r3, #64	; 0x40
 8005e50:	616b      	str	r3, [r5, #20]
 8005e52:	2300      	movs	r3, #0
 8005e54:	9309      	str	r3, [sp, #36]	; 0x24
 8005e56:	2320      	movs	r3, #32
 8005e58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e60:	2330      	movs	r3, #48	; 0x30
 8005e62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800600c <_svfiprintf_r+0x1ec>
 8005e66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e6a:	f04f 0901 	mov.w	r9, #1
 8005e6e:	4623      	mov	r3, r4
 8005e70:	469a      	mov	sl, r3
 8005e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e76:	b10a      	cbz	r2, 8005e7c <_svfiprintf_r+0x5c>
 8005e78:	2a25      	cmp	r2, #37	; 0x25
 8005e7a:	d1f9      	bne.n	8005e70 <_svfiprintf_r+0x50>
 8005e7c:	ebba 0b04 	subs.w	fp, sl, r4
 8005e80:	d00b      	beq.n	8005e9a <_svfiprintf_r+0x7a>
 8005e82:	465b      	mov	r3, fp
 8005e84:	4622      	mov	r2, r4
 8005e86:	4629      	mov	r1, r5
 8005e88:	4638      	mov	r0, r7
 8005e8a:	f7ff ff6d 	bl	8005d68 <__ssputs_r>
 8005e8e:	3001      	adds	r0, #1
 8005e90:	f000 80aa 	beq.w	8005fe8 <_svfiprintf_r+0x1c8>
 8005e94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e96:	445a      	add	r2, fp
 8005e98:	9209      	str	r2, [sp, #36]	; 0x24
 8005e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f000 80a2 	beq.w	8005fe8 <_svfiprintf_r+0x1c8>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005eaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005eae:	f10a 0a01 	add.w	sl, sl, #1
 8005eb2:	9304      	str	r3, [sp, #16]
 8005eb4:	9307      	str	r3, [sp, #28]
 8005eb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005eba:	931a      	str	r3, [sp, #104]	; 0x68
 8005ebc:	4654      	mov	r4, sl
 8005ebe:	2205      	movs	r2, #5
 8005ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ec4:	4851      	ldr	r0, [pc, #324]	; (800600c <_svfiprintf_r+0x1ec>)
 8005ec6:	f7fa f98b 	bl	80001e0 <memchr>
 8005eca:	9a04      	ldr	r2, [sp, #16]
 8005ecc:	b9d8      	cbnz	r0, 8005f06 <_svfiprintf_r+0xe6>
 8005ece:	06d0      	lsls	r0, r2, #27
 8005ed0:	bf44      	itt	mi
 8005ed2:	2320      	movmi	r3, #32
 8005ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ed8:	0711      	lsls	r1, r2, #28
 8005eda:	bf44      	itt	mi
 8005edc:	232b      	movmi	r3, #43	; 0x2b
 8005ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ee8:	d015      	beq.n	8005f16 <_svfiprintf_r+0xf6>
 8005eea:	9a07      	ldr	r2, [sp, #28]
 8005eec:	4654      	mov	r4, sl
 8005eee:	2000      	movs	r0, #0
 8005ef0:	f04f 0c0a 	mov.w	ip, #10
 8005ef4:	4621      	mov	r1, r4
 8005ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005efa:	3b30      	subs	r3, #48	; 0x30
 8005efc:	2b09      	cmp	r3, #9
 8005efe:	d94e      	bls.n	8005f9e <_svfiprintf_r+0x17e>
 8005f00:	b1b0      	cbz	r0, 8005f30 <_svfiprintf_r+0x110>
 8005f02:	9207      	str	r2, [sp, #28]
 8005f04:	e014      	b.n	8005f30 <_svfiprintf_r+0x110>
 8005f06:	eba0 0308 	sub.w	r3, r0, r8
 8005f0a:	fa09 f303 	lsl.w	r3, r9, r3
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	9304      	str	r3, [sp, #16]
 8005f12:	46a2      	mov	sl, r4
 8005f14:	e7d2      	b.n	8005ebc <_svfiprintf_r+0x9c>
 8005f16:	9b03      	ldr	r3, [sp, #12]
 8005f18:	1d19      	adds	r1, r3, #4
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	9103      	str	r1, [sp, #12]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	bfbb      	ittet	lt
 8005f22:	425b      	neglt	r3, r3
 8005f24:	f042 0202 	orrlt.w	r2, r2, #2
 8005f28:	9307      	strge	r3, [sp, #28]
 8005f2a:	9307      	strlt	r3, [sp, #28]
 8005f2c:	bfb8      	it	lt
 8005f2e:	9204      	strlt	r2, [sp, #16]
 8005f30:	7823      	ldrb	r3, [r4, #0]
 8005f32:	2b2e      	cmp	r3, #46	; 0x2e
 8005f34:	d10c      	bne.n	8005f50 <_svfiprintf_r+0x130>
 8005f36:	7863      	ldrb	r3, [r4, #1]
 8005f38:	2b2a      	cmp	r3, #42	; 0x2a
 8005f3a:	d135      	bne.n	8005fa8 <_svfiprintf_r+0x188>
 8005f3c:	9b03      	ldr	r3, [sp, #12]
 8005f3e:	1d1a      	adds	r2, r3, #4
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	9203      	str	r2, [sp, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	bfb8      	it	lt
 8005f48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005f4c:	3402      	adds	r4, #2
 8005f4e:	9305      	str	r3, [sp, #20]
 8005f50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800601c <_svfiprintf_r+0x1fc>
 8005f54:	7821      	ldrb	r1, [r4, #0]
 8005f56:	2203      	movs	r2, #3
 8005f58:	4650      	mov	r0, sl
 8005f5a:	f7fa f941 	bl	80001e0 <memchr>
 8005f5e:	b140      	cbz	r0, 8005f72 <_svfiprintf_r+0x152>
 8005f60:	2340      	movs	r3, #64	; 0x40
 8005f62:	eba0 000a 	sub.w	r0, r0, sl
 8005f66:	fa03 f000 	lsl.w	r0, r3, r0
 8005f6a:	9b04      	ldr	r3, [sp, #16]
 8005f6c:	4303      	orrs	r3, r0
 8005f6e:	3401      	adds	r4, #1
 8005f70:	9304      	str	r3, [sp, #16]
 8005f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f76:	4826      	ldr	r0, [pc, #152]	; (8006010 <_svfiprintf_r+0x1f0>)
 8005f78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f7c:	2206      	movs	r2, #6
 8005f7e:	f7fa f92f 	bl	80001e0 <memchr>
 8005f82:	2800      	cmp	r0, #0
 8005f84:	d038      	beq.n	8005ff8 <_svfiprintf_r+0x1d8>
 8005f86:	4b23      	ldr	r3, [pc, #140]	; (8006014 <_svfiprintf_r+0x1f4>)
 8005f88:	bb1b      	cbnz	r3, 8005fd2 <_svfiprintf_r+0x1b2>
 8005f8a:	9b03      	ldr	r3, [sp, #12]
 8005f8c:	3307      	adds	r3, #7
 8005f8e:	f023 0307 	bic.w	r3, r3, #7
 8005f92:	3308      	adds	r3, #8
 8005f94:	9303      	str	r3, [sp, #12]
 8005f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f98:	4433      	add	r3, r6
 8005f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f9c:	e767      	b.n	8005e6e <_svfiprintf_r+0x4e>
 8005f9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fa2:	460c      	mov	r4, r1
 8005fa4:	2001      	movs	r0, #1
 8005fa6:	e7a5      	b.n	8005ef4 <_svfiprintf_r+0xd4>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	3401      	adds	r4, #1
 8005fac:	9305      	str	r3, [sp, #20]
 8005fae:	4619      	mov	r1, r3
 8005fb0:	f04f 0c0a 	mov.w	ip, #10
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fba:	3a30      	subs	r2, #48	; 0x30
 8005fbc:	2a09      	cmp	r2, #9
 8005fbe:	d903      	bls.n	8005fc8 <_svfiprintf_r+0x1a8>
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0c5      	beq.n	8005f50 <_svfiprintf_r+0x130>
 8005fc4:	9105      	str	r1, [sp, #20]
 8005fc6:	e7c3      	b.n	8005f50 <_svfiprintf_r+0x130>
 8005fc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fcc:	4604      	mov	r4, r0
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e7f0      	b.n	8005fb4 <_svfiprintf_r+0x194>
 8005fd2:	ab03      	add	r3, sp, #12
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	462a      	mov	r2, r5
 8005fd8:	4b0f      	ldr	r3, [pc, #60]	; (8006018 <_svfiprintf_r+0x1f8>)
 8005fda:	a904      	add	r1, sp, #16
 8005fdc:	4638      	mov	r0, r7
 8005fde:	f3af 8000 	nop.w
 8005fe2:	1c42      	adds	r2, r0, #1
 8005fe4:	4606      	mov	r6, r0
 8005fe6:	d1d6      	bne.n	8005f96 <_svfiprintf_r+0x176>
 8005fe8:	89ab      	ldrh	r3, [r5, #12]
 8005fea:	065b      	lsls	r3, r3, #25
 8005fec:	f53f af2c 	bmi.w	8005e48 <_svfiprintf_r+0x28>
 8005ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ff2:	b01d      	add	sp, #116	; 0x74
 8005ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff8:	ab03      	add	r3, sp, #12
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	462a      	mov	r2, r5
 8005ffe:	4b06      	ldr	r3, [pc, #24]	; (8006018 <_svfiprintf_r+0x1f8>)
 8006000:	a904      	add	r1, sp, #16
 8006002:	4638      	mov	r0, r7
 8006004:	f000 f87a 	bl	80060fc <_printf_i>
 8006008:	e7eb      	b.n	8005fe2 <_svfiprintf_r+0x1c2>
 800600a:	bf00      	nop
 800600c:	080073f0 	.word	0x080073f0
 8006010:	080073fa 	.word	0x080073fa
 8006014:	00000000 	.word	0x00000000
 8006018:	08005d69 	.word	0x08005d69
 800601c:	080073f6 	.word	0x080073f6

08006020 <_printf_common>:
 8006020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006024:	4616      	mov	r6, r2
 8006026:	4699      	mov	r9, r3
 8006028:	688a      	ldr	r2, [r1, #8]
 800602a:	690b      	ldr	r3, [r1, #16]
 800602c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006030:	4293      	cmp	r3, r2
 8006032:	bfb8      	it	lt
 8006034:	4613      	movlt	r3, r2
 8006036:	6033      	str	r3, [r6, #0]
 8006038:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800603c:	4607      	mov	r7, r0
 800603e:	460c      	mov	r4, r1
 8006040:	b10a      	cbz	r2, 8006046 <_printf_common+0x26>
 8006042:	3301      	adds	r3, #1
 8006044:	6033      	str	r3, [r6, #0]
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	0699      	lsls	r1, r3, #26
 800604a:	bf42      	ittt	mi
 800604c:	6833      	ldrmi	r3, [r6, #0]
 800604e:	3302      	addmi	r3, #2
 8006050:	6033      	strmi	r3, [r6, #0]
 8006052:	6825      	ldr	r5, [r4, #0]
 8006054:	f015 0506 	ands.w	r5, r5, #6
 8006058:	d106      	bne.n	8006068 <_printf_common+0x48>
 800605a:	f104 0a19 	add.w	sl, r4, #25
 800605e:	68e3      	ldr	r3, [r4, #12]
 8006060:	6832      	ldr	r2, [r6, #0]
 8006062:	1a9b      	subs	r3, r3, r2
 8006064:	42ab      	cmp	r3, r5
 8006066:	dc26      	bgt.n	80060b6 <_printf_common+0x96>
 8006068:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800606c:	1e13      	subs	r3, r2, #0
 800606e:	6822      	ldr	r2, [r4, #0]
 8006070:	bf18      	it	ne
 8006072:	2301      	movne	r3, #1
 8006074:	0692      	lsls	r2, r2, #26
 8006076:	d42b      	bmi.n	80060d0 <_printf_common+0xb0>
 8006078:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800607c:	4649      	mov	r1, r9
 800607e:	4638      	mov	r0, r7
 8006080:	47c0      	blx	r8
 8006082:	3001      	adds	r0, #1
 8006084:	d01e      	beq.n	80060c4 <_printf_common+0xa4>
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	68e5      	ldr	r5, [r4, #12]
 800608a:	6832      	ldr	r2, [r6, #0]
 800608c:	f003 0306 	and.w	r3, r3, #6
 8006090:	2b04      	cmp	r3, #4
 8006092:	bf08      	it	eq
 8006094:	1aad      	subeq	r5, r5, r2
 8006096:	68a3      	ldr	r3, [r4, #8]
 8006098:	6922      	ldr	r2, [r4, #16]
 800609a:	bf0c      	ite	eq
 800609c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060a0:	2500      	movne	r5, #0
 80060a2:	4293      	cmp	r3, r2
 80060a4:	bfc4      	itt	gt
 80060a6:	1a9b      	subgt	r3, r3, r2
 80060a8:	18ed      	addgt	r5, r5, r3
 80060aa:	2600      	movs	r6, #0
 80060ac:	341a      	adds	r4, #26
 80060ae:	42b5      	cmp	r5, r6
 80060b0:	d11a      	bne.n	80060e8 <_printf_common+0xc8>
 80060b2:	2000      	movs	r0, #0
 80060b4:	e008      	b.n	80060c8 <_printf_common+0xa8>
 80060b6:	2301      	movs	r3, #1
 80060b8:	4652      	mov	r2, sl
 80060ba:	4649      	mov	r1, r9
 80060bc:	4638      	mov	r0, r7
 80060be:	47c0      	blx	r8
 80060c0:	3001      	adds	r0, #1
 80060c2:	d103      	bne.n	80060cc <_printf_common+0xac>
 80060c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060cc:	3501      	adds	r5, #1
 80060ce:	e7c6      	b.n	800605e <_printf_common+0x3e>
 80060d0:	18e1      	adds	r1, r4, r3
 80060d2:	1c5a      	adds	r2, r3, #1
 80060d4:	2030      	movs	r0, #48	; 0x30
 80060d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060da:	4422      	add	r2, r4
 80060dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060e4:	3302      	adds	r3, #2
 80060e6:	e7c7      	b.n	8006078 <_printf_common+0x58>
 80060e8:	2301      	movs	r3, #1
 80060ea:	4622      	mov	r2, r4
 80060ec:	4649      	mov	r1, r9
 80060ee:	4638      	mov	r0, r7
 80060f0:	47c0      	blx	r8
 80060f2:	3001      	adds	r0, #1
 80060f4:	d0e6      	beq.n	80060c4 <_printf_common+0xa4>
 80060f6:	3601      	adds	r6, #1
 80060f8:	e7d9      	b.n	80060ae <_printf_common+0x8e>
	...

080060fc <_printf_i>:
 80060fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006100:	7e0f      	ldrb	r7, [r1, #24]
 8006102:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006104:	2f78      	cmp	r7, #120	; 0x78
 8006106:	4691      	mov	r9, r2
 8006108:	4680      	mov	r8, r0
 800610a:	460c      	mov	r4, r1
 800610c:	469a      	mov	sl, r3
 800610e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006112:	d807      	bhi.n	8006124 <_printf_i+0x28>
 8006114:	2f62      	cmp	r7, #98	; 0x62
 8006116:	d80a      	bhi.n	800612e <_printf_i+0x32>
 8006118:	2f00      	cmp	r7, #0
 800611a:	f000 80d8 	beq.w	80062ce <_printf_i+0x1d2>
 800611e:	2f58      	cmp	r7, #88	; 0x58
 8006120:	f000 80a3 	beq.w	800626a <_printf_i+0x16e>
 8006124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006128:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800612c:	e03a      	b.n	80061a4 <_printf_i+0xa8>
 800612e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006132:	2b15      	cmp	r3, #21
 8006134:	d8f6      	bhi.n	8006124 <_printf_i+0x28>
 8006136:	a101      	add	r1, pc, #4	; (adr r1, 800613c <_printf_i+0x40>)
 8006138:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800613c:	08006195 	.word	0x08006195
 8006140:	080061a9 	.word	0x080061a9
 8006144:	08006125 	.word	0x08006125
 8006148:	08006125 	.word	0x08006125
 800614c:	08006125 	.word	0x08006125
 8006150:	08006125 	.word	0x08006125
 8006154:	080061a9 	.word	0x080061a9
 8006158:	08006125 	.word	0x08006125
 800615c:	08006125 	.word	0x08006125
 8006160:	08006125 	.word	0x08006125
 8006164:	08006125 	.word	0x08006125
 8006168:	080062b5 	.word	0x080062b5
 800616c:	080061d9 	.word	0x080061d9
 8006170:	08006297 	.word	0x08006297
 8006174:	08006125 	.word	0x08006125
 8006178:	08006125 	.word	0x08006125
 800617c:	080062d7 	.word	0x080062d7
 8006180:	08006125 	.word	0x08006125
 8006184:	080061d9 	.word	0x080061d9
 8006188:	08006125 	.word	0x08006125
 800618c:	08006125 	.word	0x08006125
 8006190:	0800629f 	.word	0x0800629f
 8006194:	682b      	ldr	r3, [r5, #0]
 8006196:	1d1a      	adds	r2, r3, #4
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	602a      	str	r2, [r5, #0]
 800619c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061a4:	2301      	movs	r3, #1
 80061a6:	e0a3      	b.n	80062f0 <_printf_i+0x1f4>
 80061a8:	6820      	ldr	r0, [r4, #0]
 80061aa:	6829      	ldr	r1, [r5, #0]
 80061ac:	0606      	lsls	r6, r0, #24
 80061ae:	f101 0304 	add.w	r3, r1, #4
 80061b2:	d50a      	bpl.n	80061ca <_printf_i+0xce>
 80061b4:	680e      	ldr	r6, [r1, #0]
 80061b6:	602b      	str	r3, [r5, #0]
 80061b8:	2e00      	cmp	r6, #0
 80061ba:	da03      	bge.n	80061c4 <_printf_i+0xc8>
 80061bc:	232d      	movs	r3, #45	; 0x2d
 80061be:	4276      	negs	r6, r6
 80061c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061c4:	485e      	ldr	r0, [pc, #376]	; (8006340 <_printf_i+0x244>)
 80061c6:	230a      	movs	r3, #10
 80061c8:	e019      	b.n	80061fe <_printf_i+0x102>
 80061ca:	680e      	ldr	r6, [r1, #0]
 80061cc:	602b      	str	r3, [r5, #0]
 80061ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061d2:	bf18      	it	ne
 80061d4:	b236      	sxthne	r6, r6
 80061d6:	e7ef      	b.n	80061b8 <_printf_i+0xbc>
 80061d8:	682b      	ldr	r3, [r5, #0]
 80061da:	6820      	ldr	r0, [r4, #0]
 80061dc:	1d19      	adds	r1, r3, #4
 80061de:	6029      	str	r1, [r5, #0]
 80061e0:	0601      	lsls	r1, r0, #24
 80061e2:	d501      	bpl.n	80061e8 <_printf_i+0xec>
 80061e4:	681e      	ldr	r6, [r3, #0]
 80061e6:	e002      	b.n	80061ee <_printf_i+0xf2>
 80061e8:	0646      	lsls	r6, r0, #25
 80061ea:	d5fb      	bpl.n	80061e4 <_printf_i+0xe8>
 80061ec:	881e      	ldrh	r6, [r3, #0]
 80061ee:	4854      	ldr	r0, [pc, #336]	; (8006340 <_printf_i+0x244>)
 80061f0:	2f6f      	cmp	r7, #111	; 0x6f
 80061f2:	bf0c      	ite	eq
 80061f4:	2308      	moveq	r3, #8
 80061f6:	230a      	movne	r3, #10
 80061f8:	2100      	movs	r1, #0
 80061fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061fe:	6865      	ldr	r5, [r4, #4]
 8006200:	60a5      	str	r5, [r4, #8]
 8006202:	2d00      	cmp	r5, #0
 8006204:	bfa2      	ittt	ge
 8006206:	6821      	ldrge	r1, [r4, #0]
 8006208:	f021 0104 	bicge.w	r1, r1, #4
 800620c:	6021      	strge	r1, [r4, #0]
 800620e:	b90e      	cbnz	r6, 8006214 <_printf_i+0x118>
 8006210:	2d00      	cmp	r5, #0
 8006212:	d04d      	beq.n	80062b0 <_printf_i+0x1b4>
 8006214:	4615      	mov	r5, r2
 8006216:	fbb6 f1f3 	udiv	r1, r6, r3
 800621a:	fb03 6711 	mls	r7, r3, r1, r6
 800621e:	5dc7      	ldrb	r7, [r0, r7]
 8006220:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006224:	4637      	mov	r7, r6
 8006226:	42bb      	cmp	r3, r7
 8006228:	460e      	mov	r6, r1
 800622a:	d9f4      	bls.n	8006216 <_printf_i+0x11a>
 800622c:	2b08      	cmp	r3, #8
 800622e:	d10b      	bne.n	8006248 <_printf_i+0x14c>
 8006230:	6823      	ldr	r3, [r4, #0]
 8006232:	07de      	lsls	r6, r3, #31
 8006234:	d508      	bpl.n	8006248 <_printf_i+0x14c>
 8006236:	6923      	ldr	r3, [r4, #16]
 8006238:	6861      	ldr	r1, [r4, #4]
 800623a:	4299      	cmp	r1, r3
 800623c:	bfde      	ittt	le
 800623e:	2330      	movle	r3, #48	; 0x30
 8006240:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006244:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006248:	1b52      	subs	r2, r2, r5
 800624a:	6122      	str	r2, [r4, #16]
 800624c:	f8cd a000 	str.w	sl, [sp]
 8006250:	464b      	mov	r3, r9
 8006252:	aa03      	add	r2, sp, #12
 8006254:	4621      	mov	r1, r4
 8006256:	4640      	mov	r0, r8
 8006258:	f7ff fee2 	bl	8006020 <_printf_common>
 800625c:	3001      	adds	r0, #1
 800625e:	d14c      	bne.n	80062fa <_printf_i+0x1fe>
 8006260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006264:	b004      	add	sp, #16
 8006266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800626a:	4835      	ldr	r0, [pc, #212]	; (8006340 <_printf_i+0x244>)
 800626c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006270:	6829      	ldr	r1, [r5, #0]
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	f851 6b04 	ldr.w	r6, [r1], #4
 8006278:	6029      	str	r1, [r5, #0]
 800627a:	061d      	lsls	r5, r3, #24
 800627c:	d514      	bpl.n	80062a8 <_printf_i+0x1ac>
 800627e:	07df      	lsls	r7, r3, #31
 8006280:	bf44      	itt	mi
 8006282:	f043 0320 	orrmi.w	r3, r3, #32
 8006286:	6023      	strmi	r3, [r4, #0]
 8006288:	b91e      	cbnz	r6, 8006292 <_printf_i+0x196>
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	f023 0320 	bic.w	r3, r3, #32
 8006290:	6023      	str	r3, [r4, #0]
 8006292:	2310      	movs	r3, #16
 8006294:	e7b0      	b.n	80061f8 <_printf_i+0xfc>
 8006296:	6823      	ldr	r3, [r4, #0]
 8006298:	f043 0320 	orr.w	r3, r3, #32
 800629c:	6023      	str	r3, [r4, #0]
 800629e:	2378      	movs	r3, #120	; 0x78
 80062a0:	4828      	ldr	r0, [pc, #160]	; (8006344 <_printf_i+0x248>)
 80062a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062a6:	e7e3      	b.n	8006270 <_printf_i+0x174>
 80062a8:	0659      	lsls	r1, r3, #25
 80062aa:	bf48      	it	mi
 80062ac:	b2b6      	uxthmi	r6, r6
 80062ae:	e7e6      	b.n	800627e <_printf_i+0x182>
 80062b0:	4615      	mov	r5, r2
 80062b2:	e7bb      	b.n	800622c <_printf_i+0x130>
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	6826      	ldr	r6, [r4, #0]
 80062b8:	6961      	ldr	r1, [r4, #20]
 80062ba:	1d18      	adds	r0, r3, #4
 80062bc:	6028      	str	r0, [r5, #0]
 80062be:	0635      	lsls	r5, r6, #24
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	d501      	bpl.n	80062c8 <_printf_i+0x1cc>
 80062c4:	6019      	str	r1, [r3, #0]
 80062c6:	e002      	b.n	80062ce <_printf_i+0x1d2>
 80062c8:	0670      	lsls	r0, r6, #25
 80062ca:	d5fb      	bpl.n	80062c4 <_printf_i+0x1c8>
 80062cc:	8019      	strh	r1, [r3, #0]
 80062ce:	2300      	movs	r3, #0
 80062d0:	6123      	str	r3, [r4, #16]
 80062d2:	4615      	mov	r5, r2
 80062d4:	e7ba      	b.n	800624c <_printf_i+0x150>
 80062d6:	682b      	ldr	r3, [r5, #0]
 80062d8:	1d1a      	adds	r2, r3, #4
 80062da:	602a      	str	r2, [r5, #0]
 80062dc:	681d      	ldr	r5, [r3, #0]
 80062de:	6862      	ldr	r2, [r4, #4]
 80062e0:	2100      	movs	r1, #0
 80062e2:	4628      	mov	r0, r5
 80062e4:	f7f9 ff7c 	bl	80001e0 <memchr>
 80062e8:	b108      	cbz	r0, 80062ee <_printf_i+0x1f2>
 80062ea:	1b40      	subs	r0, r0, r5
 80062ec:	6060      	str	r0, [r4, #4]
 80062ee:	6863      	ldr	r3, [r4, #4]
 80062f0:	6123      	str	r3, [r4, #16]
 80062f2:	2300      	movs	r3, #0
 80062f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062f8:	e7a8      	b.n	800624c <_printf_i+0x150>
 80062fa:	6923      	ldr	r3, [r4, #16]
 80062fc:	462a      	mov	r2, r5
 80062fe:	4649      	mov	r1, r9
 8006300:	4640      	mov	r0, r8
 8006302:	47d0      	blx	sl
 8006304:	3001      	adds	r0, #1
 8006306:	d0ab      	beq.n	8006260 <_printf_i+0x164>
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	079b      	lsls	r3, r3, #30
 800630c:	d413      	bmi.n	8006336 <_printf_i+0x23a>
 800630e:	68e0      	ldr	r0, [r4, #12]
 8006310:	9b03      	ldr	r3, [sp, #12]
 8006312:	4298      	cmp	r0, r3
 8006314:	bfb8      	it	lt
 8006316:	4618      	movlt	r0, r3
 8006318:	e7a4      	b.n	8006264 <_printf_i+0x168>
 800631a:	2301      	movs	r3, #1
 800631c:	4632      	mov	r2, r6
 800631e:	4649      	mov	r1, r9
 8006320:	4640      	mov	r0, r8
 8006322:	47d0      	blx	sl
 8006324:	3001      	adds	r0, #1
 8006326:	d09b      	beq.n	8006260 <_printf_i+0x164>
 8006328:	3501      	adds	r5, #1
 800632a:	68e3      	ldr	r3, [r4, #12]
 800632c:	9903      	ldr	r1, [sp, #12]
 800632e:	1a5b      	subs	r3, r3, r1
 8006330:	42ab      	cmp	r3, r5
 8006332:	dcf2      	bgt.n	800631a <_printf_i+0x21e>
 8006334:	e7eb      	b.n	800630e <_printf_i+0x212>
 8006336:	2500      	movs	r5, #0
 8006338:	f104 0619 	add.w	r6, r4, #25
 800633c:	e7f5      	b.n	800632a <_printf_i+0x22e>
 800633e:	bf00      	nop
 8006340:	08007401 	.word	0x08007401
 8006344:	08007412 	.word	0x08007412

08006348 <memcpy>:
 8006348:	440a      	add	r2, r1
 800634a:	4291      	cmp	r1, r2
 800634c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006350:	d100      	bne.n	8006354 <memcpy+0xc>
 8006352:	4770      	bx	lr
 8006354:	b510      	push	{r4, lr}
 8006356:	f811 4b01 	ldrb.w	r4, [r1], #1
 800635a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800635e:	4291      	cmp	r1, r2
 8006360:	d1f9      	bne.n	8006356 <memcpy+0xe>
 8006362:	bd10      	pop	{r4, pc}

08006364 <memmove>:
 8006364:	4288      	cmp	r0, r1
 8006366:	b510      	push	{r4, lr}
 8006368:	eb01 0402 	add.w	r4, r1, r2
 800636c:	d902      	bls.n	8006374 <memmove+0x10>
 800636e:	4284      	cmp	r4, r0
 8006370:	4623      	mov	r3, r4
 8006372:	d807      	bhi.n	8006384 <memmove+0x20>
 8006374:	1e43      	subs	r3, r0, #1
 8006376:	42a1      	cmp	r1, r4
 8006378:	d008      	beq.n	800638c <memmove+0x28>
 800637a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800637e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006382:	e7f8      	b.n	8006376 <memmove+0x12>
 8006384:	4402      	add	r2, r0
 8006386:	4601      	mov	r1, r0
 8006388:	428a      	cmp	r2, r1
 800638a:	d100      	bne.n	800638e <memmove+0x2a>
 800638c:	bd10      	pop	{r4, pc}
 800638e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006392:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006396:	e7f7      	b.n	8006388 <memmove+0x24>

08006398 <_free_r>:
 8006398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800639a:	2900      	cmp	r1, #0
 800639c:	d044      	beq.n	8006428 <_free_r+0x90>
 800639e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063a2:	9001      	str	r0, [sp, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f1a1 0404 	sub.w	r4, r1, #4
 80063aa:	bfb8      	it	lt
 80063ac:	18e4      	addlt	r4, r4, r3
 80063ae:	f000 f913 	bl	80065d8 <__malloc_lock>
 80063b2:	4a1e      	ldr	r2, [pc, #120]	; (800642c <_free_r+0x94>)
 80063b4:	9801      	ldr	r0, [sp, #4]
 80063b6:	6813      	ldr	r3, [r2, #0]
 80063b8:	b933      	cbnz	r3, 80063c8 <_free_r+0x30>
 80063ba:	6063      	str	r3, [r4, #4]
 80063bc:	6014      	str	r4, [r2, #0]
 80063be:	b003      	add	sp, #12
 80063c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063c4:	f000 b90e 	b.w	80065e4 <__malloc_unlock>
 80063c8:	42a3      	cmp	r3, r4
 80063ca:	d908      	bls.n	80063de <_free_r+0x46>
 80063cc:	6825      	ldr	r5, [r4, #0]
 80063ce:	1961      	adds	r1, r4, r5
 80063d0:	428b      	cmp	r3, r1
 80063d2:	bf01      	itttt	eq
 80063d4:	6819      	ldreq	r1, [r3, #0]
 80063d6:	685b      	ldreq	r3, [r3, #4]
 80063d8:	1949      	addeq	r1, r1, r5
 80063da:	6021      	streq	r1, [r4, #0]
 80063dc:	e7ed      	b.n	80063ba <_free_r+0x22>
 80063de:	461a      	mov	r2, r3
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	b10b      	cbz	r3, 80063e8 <_free_r+0x50>
 80063e4:	42a3      	cmp	r3, r4
 80063e6:	d9fa      	bls.n	80063de <_free_r+0x46>
 80063e8:	6811      	ldr	r1, [r2, #0]
 80063ea:	1855      	adds	r5, r2, r1
 80063ec:	42a5      	cmp	r5, r4
 80063ee:	d10b      	bne.n	8006408 <_free_r+0x70>
 80063f0:	6824      	ldr	r4, [r4, #0]
 80063f2:	4421      	add	r1, r4
 80063f4:	1854      	adds	r4, r2, r1
 80063f6:	42a3      	cmp	r3, r4
 80063f8:	6011      	str	r1, [r2, #0]
 80063fa:	d1e0      	bne.n	80063be <_free_r+0x26>
 80063fc:	681c      	ldr	r4, [r3, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	6053      	str	r3, [r2, #4]
 8006402:	4421      	add	r1, r4
 8006404:	6011      	str	r1, [r2, #0]
 8006406:	e7da      	b.n	80063be <_free_r+0x26>
 8006408:	d902      	bls.n	8006410 <_free_r+0x78>
 800640a:	230c      	movs	r3, #12
 800640c:	6003      	str	r3, [r0, #0]
 800640e:	e7d6      	b.n	80063be <_free_r+0x26>
 8006410:	6825      	ldr	r5, [r4, #0]
 8006412:	1961      	adds	r1, r4, r5
 8006414:	428b      	cmp	r3, r1
 8006416:	bf04      	itt	eq
 8006418:	6819      	ldreq	r1, [r3, #0]
 800641a:	685b      	ldreq	r3, [r3, #4]
 800641c:	6063      	str	r3, [r4, #4]
 800641e:	bf04      	itt	eq
 8006420:	1949      	addeq	r1, r1, r5
 8006422:	6021      	streq	r1, [r4, #0]
 8006424:	6054      	str	r4, [r2, #4]
 8006426:	e7ca      	b.n	80063be <_free_r+0x26>
 8006428:	b003      	add	sp, #12
 800642a:	bd30      	pop	{r4, r5, pc}
 800642c:	20000674 	.word	0x20000674

08006430 <sbrk_aligned>:
 8006430:	b570      	push	{r4, r5, r6, lr}
 8006432:	4e0e      	ldr	r6, [pc, #56]	; (800646c <sbrk_aligned+0x3c>)
 8006434:	460c      	mov	r4, r1
 8006436:	6831      	ldr	r1, [r6, #0]
 8006438:	4605      	mov	r5, r0
 800643a:	b911      	cbnz	r1, 8006442 <sbrk_aligned+0x12>
 800643c:	f000 f8bc 	bl	80065b8 <_sbrk_r>
 8006440:	6030      	str	r0, [r6, #0]
 8006442:	4621      	mov	r1, r4
 8006444:	4628      	mov	r0, r5
 8006446:	f000 f8b7 	bl	80065b8 <_sbrk_r>
 800644a:	1c43      	adds	r3, r0, #1
 800644c:	d00a      	beq.n	8006464 <sbrk_aligned+0x34>
 800644e:	1cc4      	adds	r4, r0, #3
 8006450:	f024 0403 	bic.w	r4, r4, #3
 8006454:	42a0      	cmp	r0, r4
 8006456:	d007      	beq.n	8006468 <sbrk_aligned+0x38>
 8006458:	1a21      	subs	r1, r4, r0
 800645a:	4628      	mov	r0, r5
 800645c:	f000 f8ac 	bl	80065b8 <_sbrk_r>
 8006460:	3001      	adds	r0, #1
 8006462:	d101      	bne.n	8006468 <sbrk_aligned+0x38>
 8006464:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006468:	4620      	mov	r0, r4
 800646a:	bd70      	pop	{r4, r5, r6, pc}
 800646c:	20000678 	.word	0x20000678

08006470 <_malloc_r>:
 8006470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006474:	1ccd      	adds	r5, r1, #3
 8006476:	f025 0503 	bic.w	r5, r5, #3
 800647a:	3508      	adds	r5, #8
 800647c:	2d0c      	cmp	r5, #12
 800647e:	bf38      	it	cc
 8006480:	250c      	movcc	r5, #12
 8006482:	2d00      	cmp	r5, #0
 8006484:	4607      	mov	r7, r0
 8006486:	db01      	blt.n	800648c <_malloc_r+0x1c>
 8006488:	42a9      	cmp	r1, r5
 800648a:	d905      	bls.n	8006498 <_malloc_r+0x28>
 800648c:	230c      	movs	r3, #12
 800648e:	603b      	str	r3, [r7, #0]
 8006490:	2600      	movs	r6, #0
 8006492:	4630      	mov	r0, r6
 8006494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006498:	4e2e      	ldr	r6, [pc, #184]	; (8006554 <_malloc_r+0xe4>)
 800649a:	f000 f89d 	bl	80065d8 <__malloc_lock>
 800649e:	6833      	ldr	r3, [r6, #0]
 80064a0:	461c      	mov	r4, r3
 80064a2:	bb34      	cbnz	r4, 80064f2 <_malloc_r+0x82>
 80064a4:	4629      	mov	r1, r5
 80064a6:	4638      	mov	r0, r7
 80064a8:	f7ff ffc2 	bl	8006430 <sbrk_aligned>
 80064ac:	1c43      	adds	r3, r0, #1
 80064ae:	4604      	mov	r4, r0
 80064b0:	d14d      	bne.n	800654e <_malloc_r+0xde>
 80064b2:	6834      	ldr	r4, [r6, #0]
 80064b4:	4626      	mov	r6, r4
 80064b6:	2e00      	cmp	r6, #0
 80064b8:	d140      	bne.n	800653c <_malloc_r+0xcc>
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	4631      	mov	r1, r6
 80064be:	4638      	mov	r0, r7
 80064c0:	eb04 0803 	add.w	r8, r4, r3
 80064c4:	f000 f878 	bl	80065b8 <_sbrk_r>
 80064c8:	4580      	cmp	r8, r0
 80064ca:	d13a      	bne.n	8006542 <_malloc_r+0xd2>
 80064cc:	6821      	ldr	r1, [r4, #0]
 80064ce:	3503      	adds	r5, #3
 80064d0:	1a6d      	subs	r5, r5, r1
 80064d2:	f025 0503 	bic.w	r5, r5, #3
 80064d6:	3508      	adds	r5, #8
 80064d8:	2d0c      	cmp	r5, #12
 80064da:	bf38      	it	cc
 80064dc:	250c      	movcc	r5, #12
 80064de:	4629      	mov	r1, r5
 80064e0:	4638      	mov	r0, r7
 80064e2:	f7ff ffa5 	bl	8006430 <sbrk_aligned>
 80064e6:	3001      	adds	r0, #1
 80064e8:	d02b      	beq.n	8006542 <_malloc_r+0xd2>
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	442b      	add	r3, r5
 80064ee:	6023      	str	r3, [r4, #0]
 80064f0:	e00e      	b.n	8006510 <_malloc_r+0xa0>
 80064f2:	6822      	ldr	r2, [r4, #0]
 80064f4:	1b52      	subs	r2, r2, r5
 80064f6:	d41e      	bmi.n	8006536 <_malloc_r+0xc6>
 80064f8:	2a0b      	cmp	r2, #11
 80064fa:	d916      	bls.n	800652a <_malloc_r+0xba>
 80064fc:	1961      	adds	r1, r4, r5
 80064fe:	42a3      	cmp	r3, r4
 8006500:	6025      	str	r5, [r4, #0]
 8006502:	bf18      	it	ne
 8006504:	6059      	strne	r1, [r3, #4]
 8006506:	6863      	ldr	r3, [r4, #4]
 8006508:	bf08      	it	eq
 800650a:	6031      	streq	r1, [r6, #0]
 800650c:	5162      	str	r2, [r4, r5]
 800650e:	604b      	str	r3, [r1, #4]
 8006510:	4638      	mov	r0, r7
 8006512:	f104 060b 	add.w	r6, r4, #11
 8006516:	f000 f865 	bl	80065e4 <__malloc_unlock>
 800651a:	f026 0607 	bic.w	r6, r6, #7
 800651e:	1d23      	adds	r3, r4, #4
 8006520:	1af2      	subs	r2, r6, r3
 8006522:	d0b6      	beq.n	8006492 <_malloc_r+0x22>
 8006524:	1b9b      	subs	r3, r3, r6
 8006526:	50a3      	str	r3, [r4, r2]
 8006528:	e7b3      	b.n	8006492 <_malloc_r+0x22>
 800652a:	6862      	ldr	r2, [r4, #4]
 800652c:	42a3      	cmp	r3, r4
 800652e:	bf0c      	ite	eq
 8006530:	6032      	streq	r2, [r6, #0]
 8006532:	605a      	strne	r2, [r3, #4]
 8006534:	e7ec      	b.n	8006510 <_malloc_r+0xa0>
 8006536:	4623      	mov	r3, r4
 8006538:	6864      	ldr	r4, [r4, #4]
 800653a:	e7b2      	b.n	80064a2 <_malloc_r+0x32>
 800653c:	4634      	mov	r4, r6
 800653e:	6876      	ldr	r6, [r6, #4]
 8006540:	e7b9      	b.n	80064b6 <_malloc_r+0x46>
 8006542:	230c      	movs	r3, #12
 8006544:	603b      	str	r3, [r7, #0]
 8006546:	4638      	mov	r0, r7
 8006548:	f000 f84c 	bl	80065e4 <__malloc_unlock>
 800654c:	e7a1      	b.n	8006492 <_malloc_r+0x22>
 800654e:	6025      	str	r5, [r4, #0]
 8006550:	e7de      	b.n	8006510 <_malloc_r+0xa0>
 8006552:	bf00      	nop
 8006554:	20000674 	.word	0x20000674

08006558 <_realloc_r>:
 8006558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800655c:	4680      	mov	r8, r0
 800655e:	4614      	mov	r4, r2
 8006560:	460e      	mov	r6, r1
 8006562:	b921      	cbnz	r1, 800656e <_realloc_r+0x16>
 8006564:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006568:	4611      	mov	r1, r2
 800656a:	f7ff bf81 	b.w	8006470 <_malloc_r>
 800656e:	b92a      	cbnz	r2, 800657c <_realloc_r+0x24>
 8006570:	f7ff ff12 	bl	8006398 <_free_r>
 8006574:	4625      	mov	r5, r4
 8006576:	4628      	mov	r0, r5
 8006578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800657c:	f000 f838 	bl	80065f0 <_malloc_usable_size_r>
 8006580:	4284      	cmp	r4, r0
 8006582:	4607      	mov	r7, r0
 8006584:	d802      	bhi.n	800658c <_realloc_r+0x34>
 8006586:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800658a:	d812      	bhi.n	80065b2 <_realloc_r+0x5a>
 800658c:	4621      	mov	r1, r4
 800658e:	4640      	mov	r0, r8
 8006590:	f7ff ff6e 	bl	8006470 <_malloc_r>
 8006594:	4605      	mov	r5, r0
 8006596:	2800      	cmp	r0, #0
 8006598:	d0ed      	beq.n	8006576 <_realloc_r+0x1e>
 800659a:	42bc      	cmp	r4, r7
 800659c:	4622      	mov	r2, r4
 800659e:	4631      	mov	r1, r6
 80065a0:	bf28      	it	cs
 80065a2:	463a      	movcs	r2, r7
 80065a4:	f7ff fed0 	bl	8006348 <memcpy>
 80065a8:	4631      	mov	r1, r6
 80065aa:	4640      	mov	r0, r8
 80065ac:	f7ff fef4 	bl	8006398 <_free_r>
 80065b0:	e7e1      	b.n	8006576 <_realloc_r+0x1e>
 80065b2:	4635      	mov	r5, r6
 80065b4:	e7df      	b.n	8006576 <_realloc_r+0x1e>
	...

080065b8 <_sbrk_r>:
 80065b8:	b538      	push	{r3, r4, r5, lr}
 80065ba:	4d06      	ldr	r5, [pc, #24]	; (80065d4 <_sbrk_r+0x1c>)
 80065bc:	2300      	movs	r3, #0
 80065be:	4604      	mov	r4, r0
 80065c0:	4608      	mov	r0, r1
 80065c2:	602b      	str	r3, [r5, #0]
 80065c4:	f7fa ffaa 	bl	800151c <_sbrk>
 80065c8:	1c43      	adds	r3, r0, #1
 80065ca:	d102      	bne.n	80065d2 <_sbrk_r+0x1a>
 80065cc:	682b      	ldr	r3, [r5, #0]
 80065ce:	b103      	cbz	r3, 80065d2 <_sbrk_r+0x1a>
 80065d0:	6023      	str	r3, [r4, #0]
 80065d2:	bd38      	pop	{r3, r4, r5, pc}
 80065d4:	2000067c 	.word	0x2000067c

080065d8 <__malloc_lock>:
 80065d8:	4801      	ldr	r0, [pc, #4]	; (80065e0 <__malloc_lock+0x8>)
 80065da:	f000 b811 	b.w	8006600 <__retarget_lock_acquire_recursive>
 80065de:	bf00      	nop
 80065e0:	20000680 	.word	0x20000680

080065e4 <__malloc_unlock>:
 80065e4:	4801      	ldr	r0, [pc, #4]	; (80065ec <__malloc_unlock+0x8>)
 80065e6:	f000 b80c 	b.w	8006602 <__retarget_lock_release_recursive>
 80065ea:	bf00      	nop
 80065ec:	20000680 	.word	0x20000680

080065f0 <_malloc_usable_size_r>:
 80065f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065f4:	1f18      	subs	r0, r3, #4
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	bfbc      	itt	lt
 80065fa:	580b      	ldrlt	r3, [r1, r0]
 80065fc:	18c0      	addlt	r0, r0, r3
 80065fe:	4770      	bx	lr

08006600 <__retarget_lock_acquire_recursive>:
 8006600:	4770      	bx	lr

08006602 <__retarget_lock_release_recursive>:
 8006602:	4770      	bx	lr

08006604 <_init>:
 8006604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006606:	bf00      	nop
 8006608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800660a:	bc08      	pop	{r3}
 800660c:	469e      	mov	lr, r3
 800660e:	4770      	bx	lr

08006610 <_fini>:
 8006610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006612:	bf00      	nop
 8006614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006616:	bc08      	pop	{r3}
 8006618:	469e      	mov	lr, r3
 800661a:	4770      	bx	lr
