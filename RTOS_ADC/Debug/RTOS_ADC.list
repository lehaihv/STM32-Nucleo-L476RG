
RTOS_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08007970  08007970  00017970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a90  08007a90  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007a90  08007a90  00017a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a98  08007a98  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a98  08007a98  00017a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a9c  08007a9c  00017a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b30  20000074  08007b14  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ba4  08007b14  00021ba4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020203  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a1e  00000000  00000000  000402a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a28  00000000  00000000  00043cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018e0  00000000  00000000  000456f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000040da  00000000  00000000  00046fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ba6c  00000000  00000000  0004b0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110358  00000000  00000000  00066b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00176e6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007358  00000000  00000000  00176ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007958 	.word	0x08007958

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007958 	.word	0x08007958

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fb9c 	bl	8000c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f832 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f93a 	bl	8000758 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f908 	bl	80006f8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004e8:	f000 f87e 	bl	80005e8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  // Get ADC value
  HAL_ADC_Start(&hadc1);
 80004ec:	480e      	ldr	r0, [pc, #56]	; (8000528 <main+0x54>)
 80004ee:	f000 ff0b 	bl	8001308 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80004f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80004f6:	480c      	ldr	r0, [pc, #48]	; (8000528 <main+0x54>)
 80004f8:	f000 ffc0 	bl	800147c <HAL_ADC_PollForConversion>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004fc:	f004 fbb2 	bl	8004c64 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskADC_IN1 */
  TaskADC_IN1Handle = osThreadNew(StartTaskADC_IN1, NULL, &TaskADC_IN1_attributes);
 8000500:	4a0a      	ldr	r2, [pc, #40]	; (800052c <main+0x58>)
 8000502:	2100      	movs	r1, #0
 8000504:	480a      	ldr	r0, [pc, #40]	; (8000530 <main+0x5c>)
 8000506:	f004 fbf7 	bl	8004cf8 <osThreadNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a09      	ldr	r2, [pc, #36]	; (8000534 <main+0x60>)
 800050e:	6013      	str	r3, [r2, #0]

  /* creation of TaskADC_IN2 */
  TaskADC_IN2Handle = osThreadNew(StartTaskADC_IN2, NULL, &TaskADC_IN2_attributes);
 8000510:	4a09      	ldr	r2, [pc, #36]	; (8000538 <main+0x64>)
 8000512:	2100      	movs	r1, #0
 8000514:	4809      	ldr	r0, [pc, #36]	; (800053c <main+0x68>)
 8000516:	f004 fbef 	bl	8004cf8 <osThreadNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a08      	ldr	r2, [pc, #32]	; (8000540 <main+0x6c>)
 800051e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000520:	f004 fbc4 	bl	8004cac <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000524:	e7fe      	b.n	8000524 <main+0x50>
 8000526:	bf00      	nop
 8000528:	20000090 	.word	0x20000090
 800052c:	080079a0 	.word	0x080079a0
 8000530:	08000825 	.word	0x08000825
 8000534:	20000178 	.word	0x20000178
 8000538:	080079c4 	.word	0x080079c4
 800053c:	0800084d 	.word	0x0800084d
 8000540:	2000017c 	.word	0x2000017c

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b096      	sub	sp, #88	; 0x58
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	2244      	movs	r2, #68	; 0x44
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f007 f936 	bl	80077c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	463b      	mov	r3, r7
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000566:	f44f 7000 	mov.w	r0, #512	; 0x200
 800056a:	f002 f86b 	bl	8002644 <HAL_PWREx_ControlVoltageScaling>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000574:	f000 f990 	bl	8000898 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000578:	2302      	movs	r3, #2
 800057a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000580:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000582:	2310      	movs	r3, #16
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058a:	2302      	movs	r3, #2
 800058c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800058e:	2301      	movs	r3, #1
 8000590:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000592:	230a      	movs	r3, #10
 8000594:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000596:	2307      	movs	r3, #7
 8000598:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 f8a2 	bl	80026f0 <HAL_RCC_OscConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005b2:	f000 f971 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	230f      	movs	r3, #15
 80005b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ba:	2303      	movs	r3, #3
 80005bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ca:	463b      	mov	r3, r7
 80005cc:	2104      	movs	r1, #4
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fc6a 	bl	8002ea8 <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005da:	f000 f95d 	bl	8000898 <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3758      	adds	r7, #88	; 0x58
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08a      	sub	sp, #40	; 0x28
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
 8000608:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800060a:	4b37      	ldr	r3, [pc, #220]	; (80006e8 <MX_ADC1_Init+0x100>)
 800060c:	4a37      	ldr	r2, [pc, #220]	; (80006ec <MX_ADC1_Init+0x104>)
 800060e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000610:	4b35      	ldr	r3, [pc, #212]	; (80006e8 <MX_ADC1_Init+0x100>)
 8000612:	2200      	movs	r2, #0
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b34      	ldr	r3, [pc, #208]	; (80006e8 <MX_ADC1_Init+0x100>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800061c:	4b32      	ldr	r3, [pc, #200]	; (80006e8 <MX_ADC1_Init+0x100>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000622:	4b31      	ldr	r3, [pc, #196]	; (80006e8 <MX_ADC1_Init+0x100>)
 8000624:	2201      	movs	r2, #1
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000628:	4b2f      	ldr	r3, [pc, #188]	; (80006e8 <MX_ADC1_Init+0x100>)
 800062a:	2208      	movs	r2, #8
 800062c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800062e:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <MX_ADC1_Init+0x100>)
 8000630:	2200      	movs	r2, #0
 8000632:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000634:	4b2c      	ldr	r3, [pc, #176]	; (80006e8 <MX_ADC1_Init+0x100>)
 8000636:	2201      	movs	r2, #1
 8000638:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 800063a:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <MX_ADC1_Init+0x100>)
 800063c:	2202      	movs	r2, #2
 800063e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000640:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <MX_ADC1_Init+0x100>)
 8000642:	2200      	movs	r2, #0
 8000644:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000648:	4b27      	ldr	r3, [pc, #156]	; (80006e8 <MX_ADC1_Init+0x100>)
 800064a:	2200      	movs	r2, #0
 800064c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800064e:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <MX_ADC1_Init+0x100>)
 8000650:	2200      	movs	r2, #0
 8000652:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000654:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <MX_ADC1_Init+0x100>)
 8000656:	2200      	movs	r2, #0
 8000658:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800065c:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <MX_ADC1_Init+0x100>)
 800065e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000662:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000664:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <MX_ADC1_Init+0x100>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066c:	481e      	ldr	r0, [pc, #120]	; (80006e8 <MX_ADC1_Init+0x100>)
 800066e:	f000 fcf5 	bl	800105c <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000678:	f000 f90e 	bl	8000898 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	4619      	mov	r1, r3
 8000686:	4818      	ldr	r0, [pc, #96]	; (80006e8 <MX_ADC1_Init+0x100>)
 8000688:	f001 fc7a 	bl	8001f80 <HAL_ADCEx_MultiModeConfigChannel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000692:	f000 f901 	bl	8000898 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <MX_ADC1_Init+0x108>)
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800069a:	2306      	movs	r3, #6
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006a2:	237f      	movs	r3, #127	; 0x7f
 80006a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a6:	2304      	movs	r3, #4
 80006a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4619      	mov	r1, r3
 80006b2:	480d      	ldr	r0, [pc, #52]	; (80006e8 <MX_ADC1_Init+0x100>)
 80006b4:	f000 ffc8 	bl	8001648 <HAL_ADC_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80006be:	f000 f8eb 	bl	8000898 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_ADC1_Init+0x10c>)
 80006c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c6:	230c      	movs	r3, #12
 80006c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	4619      	mov	r1, r3
 80006ce:	4806      	ldr	r0, [pc, #24]	; (80006e8 <MX_ADC1_Init+0x100>)
 80006d0:	f000 ffba 	bl	8001648 <HAL_ADC_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80006da:	f000 f8dd 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	3728      	adds	r7, #40	; 0x28
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000090 	.word	0x20000090
 80006ec:	50040000 	.word	0x50040000
 80006f0:	04300002 	.word	0x04300002
 80006f4:	08600004 	.word	0x08600004

080006f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_USART2_UART_Init+0x58>)
 80006fe:	4a15      	ldr	r2, [pc, #84]	; (8000754 <MX_USART2_UART_Init+0x5c>)
 8000700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800073c:	f003 fd98 	bl	8004270 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000746:	f000 f8a7 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200000f4 	.word	0x200000f4
 8000754:	40004400 	.word	0x40004400

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	4b2b      	ldr	r3, [pc, #172]	; (800081c <MX_GPIO_Init+0xc4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a2a      	ldr	r2, [pc, #168]	; (800081c <MX_GPIO_Init+0xc4>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b28      	ldr	r3, [pc, #160]	; (800081c <MX_GPIO_Init+0xc4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	4b25      	ldr	r3, [pc, #148]	; (800081c <MX_GPIO_Init+0xc4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a24      	ldr	r2, [pc, #144]	; (800081c <MX_GPIO_Init+0xc4>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_GPIO_Init+0xc4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_GPIO_Init+0xc4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a1e      	ldr	r2, [pc, #120]	; (800081c <MX_GPIO_Init+0xc4>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <MX_GPIO_Init+0xc4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <MX_GPIO_Init+0xc4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a18      	ldr	r2, [pc, #96]	; (800081c <MX_GPIO_Init+0xc4>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <MX_GPIO_Init+0xc4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2120      	movs	r1, #32
 80007d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d6:	f001 ff0f 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	480b      	ldr	r0, [pc, #44]	; (8000820 <MX_GPIO_Init+0xc8>)
 80007f2:	f001 fd57 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007f6:	2320      	movs	r3, #32
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000810:	f001 fd48 	bl	80022a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000814:	bf00      	nop
 8000816:	3728      	adds	r7, #40	; 0x28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40021000 	.word	0x40021000
 8000820:	48000800 	.word	0x48000800

08000824 <StartTaskADC_IN1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskADC_IN1 */
void StartTaskADC_IN1(void *argument)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  //adc[2] = HAL_ADC_Start(&hadc1);
  /* Infinite loop */
  for(;;)
  {
	//HAL_ADC_PollForConversion(&hadc1, 10);
	adc[0] = HAL_ADC_GetValue(&hadc1);
 800082c:	4805      	ldr	r0, [pc, #20]	; (8000844 <StartTaskADC_IN1+0x20>)
 800082e:	f000 fefd 	bl	800162c <HAL_ADC_GetValue>
 8000832:	4603      	mov	r3, r0
 8000834:	b29a      	uxth	r2, r3
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <StartTaskADC_IN1+0x24>)
 8000838:	801a      	strh	r2, [r3, #0]
    osDelay(50);
 800083a:	2032      	movs	r0, #50	; 0x32
 800083c:	f004 faee 	bl	8004e1c <osDelay>
	adc[0] = HAL_ADC_GetValue(&hadc1);
 8000840:	e7f4      	b.n	800082c <StartTaskADC_IN1+0x8>
 8000842:	bf00      	nop
 8000844:	20000090 	.word	0x20000090
 8000848:	20000180 	.word	0x20000180

0800084c <StartTaskADC_IN2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskADC_IN2 */
void StartTaskADC_IN2(void *argument)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  //HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
  //adc[1] = HAL_ADC_GetValue(&hadc1);
  /* Infinite loop */
  for(;;)
  {
	adc[1] = HAL_ADC_GetValue(&hadc1);
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <StartTaskADC_IN2+0x20>)
 8000856:	f000 fee9 	bl	800162c <HAL_ADC_GetValue>
 800085a:	4603      	mov	r3, r0
 800085c:	b29a      	uxth	r2, r3
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <StartTaskADC_IN2+0x24>)
 8000860:	805a      	strh	r2, [r3, #2]
    osDelay(50);
 8000862:	2032      	movs	r0, #50	; 0x32
 8000864:	f004 fada 	bl	8004e1c <osDelay>
	adc[1] = HAL_ADC_GetValue(&hadc1);
 8000868:	e7f4      	b.n	8000854 <StartTaskADC_IN2+0x8>
 800086a:	bf00      	nop
 800086c:	20000090 	.word	0x20000090
 8000870:	20000180 	.word	0x20000180

08000874 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a04      	ldr	r2, [pc, #16]	; (8000894 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d101      	bne.n	800088a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000886:	f000 f9e5 	bl	8000c54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40012c00 	.word	0x40012c00

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <Error_Handler+0x8>
	...

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <HAL_MspInit+0x4c>)
 80008ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ae:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <HAL_MspInit+0x4c>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6613      	str	r3, [r2, #96]	; 0x60
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <HAL_MspInit+0x4c>)
 80008b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <HAL_MspInit+0x4c>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c6:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <HAL_MspInit+0x4c>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008cc:	6593      	str	r3, [r2, #88]	; 0x58
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <HAL_MspInit+0x4c>)
 80008d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	210f      	movs	r1, #15
 80008de:	f06f 0001 	mvn.w	r0, #1
 80008e2:	f001 fcb5 	bl	8002250 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b0ac      	sub	sp, #176	; 0xb0
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	2288      	movs	r2, #136	; 0x88
 8000912:	2100      	movs	r1, #0
 8000914:	4618      	mov	r0, r3
 8000916:	f006 ff55 	bl	80077c4 <memset>
  if(hadc->Instance==ADC1)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a27      	ldr	r2, [pc, #156]	; (80009bc <HAL_ADC_MspInit+0xc8>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d146      	bne.n	80009b2 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000924:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000928:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800092a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800092e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000932:	2302      	movs	r3, #2
 8000934:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000936:	2301      	movs	r3, #1
 8000938:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800093a:	2308      	movs	r3, #8
 800093c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800093e:	2307      	movs	r3, #7
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000942:	2302      	movs	r3, #2
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000946:	2302      	movs	r3, #2
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800094a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800094e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4618      	mov	r0, r3
 8000956:	f002 fcfd 	bl	8003354 <HAL_RCCEx_PeriphCLKConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000960:	f7ff ff9a 	bl	8000898 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <HAL_ADC_MspInit+0xcc>)
 8000966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000968:	4a15      	ldr	r2, [pc, #84]	; (80009c0 <HAL_ADC_MspInit+0xcc>)
 800096a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800096e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <HAL_ADC_MspInit+0xcc>)
 8000972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000974:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800097c:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <HAL_ADC_MspInit+0xcc>)
 800097e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000980:	4a0f      	ldr	r2, [pc, #60]	; (80009c0 <HAL_ADC_MspInit+0xcc>)
 8000982:	f043 0304 	orr.w	r3, r3, #4
 8000986:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000988:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <HAL_ADC_MspInit+0xcc>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098c:	f003 0304 	and.w	r3, r3, #4
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000994:	2303      	movs	r3, #3
 8000996:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800099a:	230b      	movs	r3, #11
 800099c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <HAL_ADC_MspInit+0xd0>)
 80009ae:	f001 fc79 	bl	80022a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009b2:	bf00      	nop
 80009b4:	37b0      	adds	r7, #176	; 0xb0
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	50040000 	.word	0x50040000
 80009c0:	40021000 	.word	0x40021000
 80009c4:	48000800 	.word	0x48000800

080009c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b0ac      	sub	sp, #176	; 0xb0
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2288      	movs	r2, #136	; 0x88
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f006 feeb 	bl	80077c4 <memset>
  if(huart->Instance==USART2)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a21      	ldr	r2, [pc, #132]	; (8000a78 <HAL_UART_MspInit+0xb0>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d13b      	bne.n	8000a70 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4618      	mov	r0, r3
 8000a06:	f002 fca5 	bl	8003354 <HAL_RCCEx_PeriphCLKConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a10:	f7ff ff42 	bl	8000898 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a14:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <HAL_UART_MspInit+0xb4>)
 8000a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a18:	4a18      	ldr	r2, [pc, #96]	; (8000a7c <HAL_UART_MspInit+0xb4>)
 8000a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a1e:	6593      	str	r3, [r2, #88]	; 0x58
 8000a20:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <HAL_UART_MspInit+0xb4>)
 8000a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <HAL_UART_MspInit+0xb4>)
 8000a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a30:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <HAL_UART_MspInit+0xb4>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a38:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <HAL_UART_MspInit+0xb4>)
 8000a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a44:	230c      	movs	r3, #12
 8000a46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a5c:	2307      	movs	r3, #7
 8000a5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a66:	4619      	mov	r1, r3
 8000a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6c:	f001 fc1a 	bl	80022a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a70:	bf00      	nop
 8000a72:	37b0      	adds	r7, #176	; 0xb0
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40004400 	.word	0x40004400
 8000a7c:	40021000 	.word	0x40021000

08000a80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08c      	sub	sp, #48	; 0x30
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a8e:	4b2e      	ldr	r3, [pc, #184]	; (8000b48 <HAL_InitTick+0xc8>)
 8000a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a92:	4a2d      	ldr	r2, [pc, #180]	; (8000b48 <HAL_InitTick+0xc8>)
 8000a94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a98:	6613      	str	r3, [r2, #96]	; 0x60
 8000a9a:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <HAL_InitTick+0xc8>)
 8000a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aa6:	f107 020c 	add.w	r2, r7, #12
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	4611      	mov	r1, r2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f002 fbbd 	bl	8003230 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ab6:	f002 fba5 	bl	8003204 <HAL_RCC_GetPCLK2Freq>
 8000aba:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000abe:	4a23      	ldr	r2, [pc, #140]	; (8000b4c <HAL_InitTick+0xcc>)
 8000ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac4:	0c9b      	lsrs	r3, r3, #18
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000aca:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <HAL_InitTick+0xd0>)
 8000acc:	4a21      	ldr	r2, [pc, #132]	; (8000b54 <HAL_InitTick+0xd4>)
 8000ace:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <HAL_InitTick+0xd0>)
 8000ad2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ad6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ad8:	4a1d      	ldr	r2, [pc, #116]	; (8000b50 <HAL_InitTick+0xd0>)
 8000ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000adc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <HAL_InitTick+0xd0>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <HAL_InitTick+0xd0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <HAL_InitTick+0xd0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000af0:	4817      	ldr	r0, [pc, #92]	; (8000b50 <HAL_InitTick+0xd0>)
 8000af2:	f003 f8eb 	bl	8003ccc <HAL_TIM_Base_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000afc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d11b      	bne.n	8000b3c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b04:	4812      	ldr	r0, [pc, #72]	; (8000b50 <HAL_InitTick+0xd0>)
 8000b06:	f003 f943 	bl	8003d90 <HAL_TIM_Base_Start_IT>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d111      	bne.n	8000b3c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b18:	2019      	movs	r0, #25
 8000b1a:	f001 fbb5 	bl	8002288 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b0f      	cmp	r3, #15
 8000b22:	d808      	bhi.n	8000b36 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000b24:	2200      	movs	r2, #0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	2019      	movs	r0, #25
 8000b2a:	f001 fb91 	bl	8002250 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <HAL_InitTick+0xd8>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	e002      	b.n	8000b3c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3730      	adds	r7, #48	; 0x30
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	431bde83 	.word	0x431bde83
 8000b50:	20000184 	.word	0x20000184
 8000b54:	40012c00 	.word	0x40012c00
 8000b58:	20000004 	.word	0x20000004

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <NMI_Handler+0x4>

08000b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <MemManage_Handler+0x4>

08000b6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b8e:	f003 f96f 	bl	8003e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000184 	.word	0x20000184

08000b9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <SystemInit+0x20>)
 8000ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <SystemInit+0x20>)
 8000ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc4:	f7ff ffea 	bl	8000b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc8:	480c      	ldr	r0, [pc, #48]	; (8000bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000bca:	490d      	ldr	r1, [pc, #52]	; (8000c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <LoopForever+0xe>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be0:	4c0a      	ldr	r4, [pc, #40]	; (8000c0c <LoopForever+0x16>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bee:	f006 fdb5 	bl	800775c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bf2:	f7ff fc6f 	bl	80004d4 <main>

08000bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf6:	e7fe      	b.n	8000bf6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c04:	08007aa0 	.word	0x08007aa0
  ldr r2, =_sbss
 8000c08:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c0c:	20001ba4 	.word	0x20001ba4

08000c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC1_2_IRQHandler>
	...

08000c14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <HAL_Init+0x3c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <HAL_Init+0x3c>)
 8000c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c28:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2a:	2003      	movs	r0, #3
 8000c2c:	f001 fb05 	bl	800223a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c30:	200f      	movs	r0, #15
 8000c32:	f7ff ff25 	bl	8000a80 <HAL_InitTick>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d002      	beq.n	8000c42 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	71fb      	strb	r3, [r7, #7]
 8000c40:	e001      	b.n	8000c46 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c42:	f7ff fe2f 	bl	80008a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c46:	79fb      	ldrb	r3, [r7, #7]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40022000 	.word	0x40022000

08000c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_IncTick+0x20>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_IncTick+0x24>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_IncTick+0x24>)
 8000c66:	6013      	str	r3, [r2, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000008 	.word	0x20000008
 8000c78:	200001d0 	.word	0x200001d0

08000c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <HAL_GetTick+0x14>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	200001d0 	.word	0x200001d0

08000c94 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	431a      	orrs	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	609a      	str	r2, [r3, #8]
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
 8000cc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b087      	sub	sp, #28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
 8000d08:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	3360      	adds	r3, #96	; 0x60
 8000d0e:	461a      	mov	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	4413      	add	r3, r2
 8000d16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <LL_ADC_SetOffset+0x44>)
 8000d1e:	4013      	ands	r3, r2
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000d26:	683a      	ldr	r2, [r7, #0]
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d34:	bf00      	nop
 8000d36:	371c      	adds	r7, #28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	03fff000 	.word	0x03fff000

08000d44 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3360      	adds	r3, #96	; 0x60
 8000d52:	461a      	mov	r2, r3
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b087      	sub	sp, #28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	3360      	adds	r3, #96	; 0x60
 8000d80:	461a      	mov	r2, r3
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	431a      	orrs	r2, r3
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000d9a:	bf00      	nop
 8000d9c:	371c      	adds	r7, #28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000da6:	b480      	push	{r7}
 8000da8:	b083      	sub	sp, #12
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d101      	bne.n	8000dbe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e000      	b.n	8000dc0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b087      	sub	sp, #28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	3330      	adds	r3, #48	; 0x30
 8000ddc:	461a      	mov	r2, r3
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	0a1b      	lsrs	r3, r3, #8
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	f003 030c 	and.w	r3, r3, #12
 8000de8:	4413      	add	r3, r2
 8000dea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	f003 031f 	and.w	r3, r3, #31
 8000df6:	211f      	movs	r1, #31
 8000df8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	401a      	ands	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	0e9b      	lsrs	r3, r3, #26
 8000e04:	f003 011f 	and.w	r1, r3, #31
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	f003 031f 	and.w	r3, r3, #31
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	431a      	orrs	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e18:	bf00      	nop
 8000e1a:	371c      	adds	r7, #28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b087      	sub	sp, #28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	3314      	adds	r3, #20
 8000e34:	461a      	mov	r2, r3
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	0e5b      	lsrs	r3, r3, #25
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	4413      	add	r3, r2
 8000e42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	0d1b      	lsrs	r3, r3, #20
 8000e4c:	f003 031f 	and.w	r3, r3, #31
 8000e50:	2107      	movs	r1, #7
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	401a      	ands	r2, r3
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	0d1b      	lsrs	r3, r3, #20
 8000e5e:	f003 031f 	and.w	r3, r3, #31
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e6e:	bf00      	nop
 8000e70:	371c      	adds	r7, #28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e94:	43db      	mvns	r3, r3
 8000e96:	401a      	ands	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f003 0318 	and.w	r3, r3, #24
 8000e9e:	4908      	ldr	r1, [pc, #32]	; (8000ec0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ea0:	40d9      	lsrs	r1, r3
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	400b      	ands	r3, r1
 8000ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000eb2:	bf00      	nop
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	0007ffff 	.word	0x0007ffff

08000ec4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	f003 031f 	and.w	r3, r3, #31
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	6093      	str	r3, [r2, #8]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f34:	d101      	bne.n	8000f3a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f36:	2301      	movs	r3, #1
 8000f38:	e000      	b.n	8000f3c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f84:	d101      	bne.n	8000f8a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f86:	2301      	movs	r3, #1
 8000f88:	e000      	b.n	8000f8c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fa8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fac:	f043 0201 	orr.w	r2, r3, #1
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d101      	bne.n	8000fd8 <LL_ADC_IsEnabled+0x18>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e000      	b.n	8000fda <LL_ADC_IsEnabled+0x1a>
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000ff6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ffa:	f043 0204 	orr.w	r2, r3, #4
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 0304 	and.w	r3, r3, #4
 800101e:	2b04      	cmp	r3, #4
 8001020:	d101      	bne.n	8001026 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001022:	2301      	movs	r3, #1
 8001024:	e000      	b.n	8001028 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f003 0308 	and.w	r3, r3, #8
 8001044:	2b08      	cmp	r3, #8
 8001046:	d101      	bne.n	800104c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001048:	2301      	movs	r3, #1
 800104a:	e000      	b.n	800104e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800105c:	b590      	push	{r4, r7, lr}
 800105e:	b089      	sub	sp, #36	; 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001064:	2300      	movs	r3, #0
 8001066:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e136      	b.n	80012e4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001080:	2b00      	cmp	r3, #0
 8001082:	d109      	bne.n	8001098 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff fc35 	bl	80008f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff3f 	bl	8000f20 <LL_ADC_IsDeepPowerDownEnabled>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d004      	beq.n	80010b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff25 	bl	8000efc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ff5a 	bl	8000f70 <LL_ADC_IsInternalRegulatorEnabled>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d115      	bne.n	80010ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ff3e 	bl	8000f48 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010cc:	4b87      	ldr	r3, [pc, #540]	; (80012ec <HAL_ADC_Init+0x290>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	099b      	lsrs	r3, r3, #6
 80010d2:	4a87      	ldr	r2, [pc, #540]	; (80012f0 <HAL_ADC_Init+0x294>)
 80010d4:	fba2 2303 	umull	r2, r3, r2, r3
 80010d8:	099b      	lsrs	r3, r3, #6
 80010da:	3301      	adds	r3, #1
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010e0:	e002      	b.n	80010e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f9      	bne.n	80010e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff3c 	bl	8000f70 <LL_ADC_IsInternalRegulatorEnabled>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10d      	bne.n	800111a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001102:	f043 0210 	orr.w	r2, r3, #16
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	f043 0201 	orr.w	r2, r3, #1
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff75 	bl	800100e <LL_ADC_REG_IsConversionOngoing>
 8001124:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	2b00      	cmp	r3, #0
 8001130:	f040 80cf 	bne.w	80012d2 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	2b00      	cmp	r3, #0
 8001138:	f040 80cb 	bne.w	80012d2 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001140:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001144:	f043 0202 	orr.w	r2, r3, #2
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff35 	bl	8000fc0 <LL_ADC_IsEnabled>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d115      	bne.n	8001188 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800115c:	4865      	ldr	r0, [pc, #404]	; (80012f4 <HAL_ADC_Init+0x298>)
 800115e:	f7ff ff2f 	bl	8000fc0 <LL_ADC_IsEnabled>
 8001162:	4604      	mov	r4, r0
 8001164:	4864      	ldr	r0, [pc, #400]	; (80012f8 <HAL_ADC_Init+0x29c>)
 8001166:	f7ff ff2b 	bl	8000fc0 <LL_ADC_IsEnabled>
 800116a:	4603      	mov	r3, r0
 800116c:	431c      	orrs	r4, r3
 800116e:	4863      	ldr	r0, [pc, #396]	; (80012fc <HAL_ADC_Init+0x2a0>)
 8001170:	f7ff ff26 	bl	8000fc0 <LL_ADC_IsEnabled>
 8001174:	4603      	mov	r3, r0
 8001176:	4323      	orrs	r3, r4
 8001178:	2b00      	cmp	r3, #0
 800117a:	d105      	bne.n	8001188 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	4619      	mov	r1, r3
 8001182:	485f      	ldr	r0, [pc, #380]	; (8001300 <HAL_ADC_Init+0x2a4>)
 8001184:	f7ff fd86 	bl	8000c94 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	7e5b      	ldrb	r3, [r3, #25]
 800118c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001192:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001198:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800119e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011a6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d106      	bne.n	80011c4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	3b01      	subs	r3, #1
 80011bc:	045b      	lsls	r3, r3, #17
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d009      	beq.n	80011e0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68da      	ldr	r2, [r3, #12]
 80011e6:	4b47      	ldr	r3, [pc, #284]	; (8001304 <HAL_ADC_Init+0x2a8>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	6812      	ldr	r2, [r2, #0]
 80011ee:	69b9      	ldr	r1, [r7, #24]
 80011f0:	430b      	orrs	r3, r1
 80011f2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff08 	bl	800100e <LL_ADC_REG_IsConversionOngoing>
 80011fe:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff15 	bl	8001034 <LL_ADC_INJ_IsConversionOngoing>
 800120a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d13d      	bne.n	800128e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d13a      	bne.n	800128e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800121c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001224:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001234:	f023 0302 	bic.w	r3, r3, #2
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	6812      	ldr	r2, [r2, #0]
 800123c:	69b9      	ldr	r1, [r7, #24]
 800123e:	430b      	orrs	r3, r1
 8001240:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001248:	2b01      	cmp	r3, #1
 800124a:	d118      	bne.n	800127e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001256:	f023 0304 	bic.w	r3, r3, #4
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001262:	4311      	orrs	r1, r2
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001268:	4311      	orrs	r1, r2
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800126e:	430a      	orrs	r2, r1
 8001270:	431a      	orrs	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f042 0201 	orr.w	r2, r2, #1
 800127a:	611a      	str	r2, [r3, #16]
 800127c:	e007      	b.n	800128e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	691a      	ldr	r2, [r3, #16]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0201 	bic.w	r2, r2, #1
 800128c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d10c      	bne.n	80012b0 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	f023 010f 	bic.w	r1, r3, #15
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	1e5a      	subs	r2, r3, #1
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	631a      	str	r2, [r3, #48]	; 0x30
 80012ae:	e007      	b.n	80012c0 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f022 020f 	bic.w	r2, r2, #15
 80012be:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c4:	f023 0303 	bic.w	r3, r3, #3
 80012c8:	f043 0201 	orr.w	r2, r3, #1
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	655a      	str	r2, [r3, #84]	; 0x54
 80012d0:	e007      	b.n	80012e2 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d6:	f043 0210 	orr.w	r2, r3, #16
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80012e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3724      	adds	r7, #36	; 0x24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	20000000 	.word	0x20000000
 80012f0:	053e2d63 	.word	0x053e2d63
 80012f4:	50040000 	.word	0x50040000
 80012f8:	50040100 	.word	0x50040100
 80012fc:	50040200 	.word	0x50040200
 8001300:	50040300 	.word	0x50040300
 8001304:	fff0c007 	.word	0xfff0c007

08001308 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001310:	4857      	ldr	r0, [pc, #348]	; (8001470 <HAL_ADC_Start+0x168>)
 8001312:	f7ff fdd7 	bl	8000ec4 <LL_ADC_GetMultimode>
 8001316:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fe76 	bl	800100e <LL_ADC_REG_IsConversionOngoing>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	f040 809c 	bne.w	8001462 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001330:	2b01      	cmp	r3, #1
 8001332:	d101      	bne.n	8001338 <HAL_ADC_Start+0x30>
 8001334:	2302      	movs	r3, #2
 8001336:	e097      	b.n	8001468 <HAL_ADC_Start+0x160>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2201      	movs	r2, #1
 800133c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 fd71 	bl	8001e28 <ADC_Enable>
 8001346:	4603      	mov	r3, r0
 8001348:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800134a:	7dfb      	ldrb	r3, [r7, #23]
 800134c:	2b00      	cmp	r3, #0
 800134e:	f040 8083 	bne.w	8001458 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001356:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800135a:	f023 0301 	bic.w	r3, r3, #1
 800135e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a42      	ldr	r2, [pc, #264]	; (8001474 <HAL_ADC_Start+0x16c>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d002      	beq.n	8001376 <HAL_ADC_Start+0x6e>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	e000      	b.n	8001378 <HAL_ADC_Start+0x70>
 8001376:	4b40      	ldr	r3, [pc, #256]	; (8001478 <HAL_ADC_Start+0x170>)
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	6812      	ldr	r2, [r2, #0]
 800137c:	4293      	cmp	r3, r2
 800137e:	d002      	beq.n	8001386 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d105      	bne.n	8001392 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800139a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800139e:	d106      	bne.n	80013ae <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a4:	f023 0206 	bic.w	r2, r3, #6
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	659a      	str	r2, [r3, #88]	; 0x58
 80013ac:	e002      	b.n	80013b4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	221c      	movs	r2, #28
 80013ba:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a2a      	ldr	r2, [pc, #168]	; (8001474 <HAL_ADC_Start+0x16c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d002      	beq.n	80013d4 <HAL_ADC_Start+0xcc>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	e000      	b.n	80013d6 <HAL_ADC_Start+0xce>
 80013d4:	4b28      	ldr	r3, [pc, #160]	; (8001478 <HAL_ADC_Start+0x170>)
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	6812      	ldr	r2, [r2, #0]
 80013da:	4293      	cmp	r3, r2
 80013dc:	d008      	beq.n	80013f0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	2b05      	cmp	r3, #5
 80013e8:	d002      	beq.n	80013f0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	2b09      	cmp	r3, #9
 80013ee:	d114      	bne.n	800141a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d007      	beq.n	800140e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001402:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001406:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fde7 	bl	8000fe6 <LL_ADC_REG_StartConversion>
 8001418:	e025      	b.n	8001466 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800141e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a12      	ldr	r2, [pc, #72]	; (8001474 <HAL_ADC_Start+0x16c>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d002      	beq.n	8001436 <HAL_ADC_Start+0x12e>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	e000      	b.n	8001438 <HAL_ADC_Start+0x130>
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <HAL_ADC_Start+0x170>)
 8001438:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d00f      	beq.n	8001466 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800144e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	655a      	str	r2, [r3, #84]	; 0x54
 8001456:	e006      	b.n	8001466 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001460:	e001      	b.n	8001466 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001462:	2302      	movs	r3, #2
 8001464:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001466:	7dfb      	ldrb	r3, [r7, #23]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	50040300 	.word	0x50040300
 8001474:	50040100 	.word	0x50040100
 8001478:	50040000 	.word	0x50040000

0800147c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001486:	4866      	ldr	r0, [pc, #408]	; (8001620 <HAL_ADC_PollForConversion+0x1a4>)
 8001488:	f7ff fd1c 	bl	8000ec4 <LL_ADC_GetMultimode>
 800148c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	2b08      	cmp	r3, #8
 8001494:	d102      	bne.n	800149c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001496:	2308      	movs	r3, #8
 8001498:	61fb      	str	r3, [r7, #28]
 800149a:	e02a      	b.n	80014f2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	2b05      	cmp	r3, #5
 80014a6:	d002      	beq.n	80014ae <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	2b09      	cmp	r3, #9
 80014ac:	d111      	bne.n	80014d2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d007      	beq.n	80014cc <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c0:	f043 0220 	orr.w	r2, r3, #32
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e0a4      	b.n	8001616 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80014cc:	2304      	movs	r3, #4
 80014ce:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80014d0:	e00f      	b.n	80014f2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80014d2:	4853      	ldr	r0, [pc, #332]	; (8001620 <HAL_ADC_PollForConversion+0x1a4>)
 80014d4:	f7ff fd04 	bl	8000ee0 <LL_ADC_GetMultiDMATransfer>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d007      	beq.n	80014ee <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e2:	f043 0220 	orr.w	r2, r3, #32
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e093      	b.n	8001616 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80014ee:	2304      	movs	r3, #4
 80014f0:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80014f2:	f7ff fbc3 	bl	8000c7c <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80014f8:	e021      	b.n	800153e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001500:	d01d      	beq.n	800153e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001502:	f7ff fbbb 	bl	8000c7c <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d302      	bcc.n	8001518 <HAL_ADC_PollForConversion+0x9c>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d112      	bne.n	800153e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	4013      	ands	r3, r2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10b      	bne.n	800153e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152a:	f043 0204 	orr.w	r2, r3, #4
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e06b      	b.n	8001616 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	4013      	ands	r3, r2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0d6      	beq.n	80014fa <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001550:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fc22 	bl	8000da6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d01c      	beq.n	80015a2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	7e5b      	ldrb	r3, [r3, #25]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d118      	bne.n	80015a2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	2b08      	cmp	r3, #8
 800157c:	d111      	bne.n	80015a2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001582:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d105      	bne.n	80015a2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159a:	f043 0201 	orr.w	r2, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a1f      	ldr	r2, [pc, #124]	; (8001624 <HAL_ADC_PollForConversion+0x1a8>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d002      	beq.n	80015b2 <HAL_ADC_PollForConversion+0x136>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	e000      	b.n	80015b4 <HAL_ADC_PollForConversion+0x138>
 80015b2:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <HAL_ADC_PollForConversion+0x1ac>)
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6812      	ldr	r2, [r2, #0]
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d008      	beq.n	80015ce <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d005      	beq.n	80015ce <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2b05      	cmp	r3, #5
 80015c6:	d002      	beq.n	80015ce <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	2b09      	cmp	r3, #9
 80015cc:	d104      	bne.n	80015d8 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	61bb      	str	r3, [r7, #24]
 80015d6:	e00c      	b.n	80015f2 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a11      	ldr	r2, [pc, #68]	; (8001624 <HAL_ADC_PollForConversion+0x1a8>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d002      	beq.n	80015e8 <HAL_ADC_PollForConversion+0x16c>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	e000      	b.n	80015ea <HAL_ADC_PollForConversion+0x16e>
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <HAL_ADC_PollForConversion+0x1ac>)
 80015ea:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d104      	bne.n	8001602 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2208      	movs	r2, #8
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	e008      	b.n	8001614 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d103      	bne.n	8001614 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	220c      	movs	r2, #12
 8001612:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3720      	adds	r7, #32
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	50040300 	.word	0x50040300
 8001624:	50040100 	.word	0x50040100
 8001628:	50040000 	.word	0x50040000

0800162c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b0b6      	sub	sp, #216	; 0xd8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001662:	2b01      	cmp	r3, #1
 8001664:	d101      	bne.n	800166a <HAL_ADC_ConfigChannel+0x22>
 8001666:	2302      	movs	r3, #2
 8001668:	e3c7      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x7b2>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fcc9 	bl	800100e <LL_ADC_REG_IsConversionOngoing>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	f040 83a8 	bne.w	8001dd4 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b05      	cmp	r3, #5
 800168a:	d824      	bhi.n	80016d6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	3b02      	subs	r3, #2
 8001692:	2b03      	cmp	r3, #3
 8001694:	d81b      	bhi.n	80016ce <HAL_ADC_ConfigChannel+0x86>
 8001696:	a201      	add	r2, pc, #4	; (adr r2, 800169c <HAL_ADC_ConfigChannel+0x54>)
 8001698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169c:	080016ad 	.word	0x080016ad
 80016a0:	080016b5 	.word	0x080016b5
 80016a4:	080016bd 	.word	0x080016bd
 80016a8:	080016c5 	.word	0x080016c5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	220c      	movs	r2, #12
 80016b0:	605a      	str	r2, [r3, #4]
          break;
 80016b2:	e011      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	2212      	movs	r2, #18
 80016b8:	605a      	str	r2, [r3, #4]
          break;
 80016ba:	e00d      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	2218      	movs	r2, #24
 80016c0:	605a      	str	r2, [r3, #4]
          break;
 80016c2:	e009      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ca:	605a      	str	r2, [r3, #4]
          break;
 80016cc:	e004      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	2206      	movs	r2, #6
 80016d2:	605a      	str	r2, [r3, #4]
          break;
 80016d4:	e000      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80016d6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6818      	ldr	r0, [r3, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	6859      	ldr	r1, [r3, #4]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	f7ff fb71 	bl	8000dcc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fc8d 	bl	800100e <LL_ADC_REG_IsConversionOngoing>
 80016f4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fc99 	bl	8001034 <LL_ADC_INJ_IsConversionOngoing>
 8001702:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001706:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800170a:	2b00      	cmp	r3, #0
 800170c:	f040 81a6 	bne.w	8001a5c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001710:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001714:	2b00      	cmp	r3, #0
 8001716:	f040 81a1 	bne.w	8001a5c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6818      	ldr	r0, [r3, #0]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	6819      	ldr	r1, [r3, #0]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	461a      	mov	r2, r3
 8001728:	f7ff fb7c 	bl	8000e24 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	695a      	ldr	r2, [r3, #20]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	08db      	lsrs	r3, r3, #3
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	2b04      	cmp	r3, #4
 800174c:	d00a      	beq.n	8001764 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6818      	ldr	r0, [r3, #0]
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	6919      	ldr	r1, [r3, #16]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800175e:	f7ff facd 	bl	8000cfc <LL_ADC_SetOffset>
 8001762:	e17b      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2100      	movs	r1, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff faea 	bl	8000d44 <LL_ADC_GetOffsetChannel>
 8001770:	4603      	mov	r3, r0
 8001772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10a      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x148>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fadf 	bl	8000d44 <LL_ADC_GetOffsetChannel>
 8001786:	4603      	mov	r3, r0
 8001788:	0e9b      	lsrs	r3, r3, #26
 800178a:	f003 021f 	and.w	r2, r3, #31
 800178e:	e01e      	b.n	80017ce <HAL_ADC_ConfigChannel+0x186>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fad4 	bl	8000d44 <LL_ADC_GetOffsetChannel>
 800179c:	4603      	mov	r3, r0
 800179e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80017a6:	fa93 f3a3 	rbit	r3, r3
 80017aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80017b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80017b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80017be:	2320      	movs	r3, #32
 80017c0:	e004      	b.n	80017cc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80017c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017c6:	fab3 f383 	clz	r3, r3
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d105      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x19e>
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	0e9b      	lsrs	r3, r3, #26
 80017e0:	f003 031f 	and.w	r3, r3, #31
 80017e4:	e018      	b.n	8001818 <HAL_ADC_ConfigChannel+0x1d0>
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80017f2:	fa93 f3a3 	rbit	r3, r3
 80017f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80017fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001802:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800180a:	2320      	movs	r3, #32
 800180c:	e004      	b.n	8001818 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800180e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001812:	fab3 f383 	clz	r3, r3
 8001816:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001818:	429a      	cmp	r2, r3
 800181a:	d106      	bne.n	800182a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2200      	movs	r2, #0
 8001822:	2100      	movs	r1, #0
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff faa3 	bl	8000d70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2101      	movs	r1, #1
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fa87 	bl	8000d44 <LL_ADC_GetOffsetChannel>
 8001836:	4603      	mov	r3, r0
 8001838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800183c:	2b00      	cmp	r3, #0
 800183e:	d10a      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x20e>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2101      	movs	r1, #1
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fa7c 	bl	8000d44 <LL_ADC_GetOffsetChannel>
 800184c:	4603      	mov	r3, r0
 800184e:	0e9b      	lsrs	r3, r3, #26
 8001850:	f003 021f 	and.w	r2, r3, #31
 8001854:	e01e      	b.n	8001894 <HAL_ADC_ConfigChannel+0x24c>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2101      	movs	r1, #1
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fa71 	bl	8000d44 <LL_ADC_GetOffsetChannel>
 8001862:	4603      	mov	r3, r0
 8001864:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001868:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800186c:	fa93 f3a3 	rbit	r3, r3
 8001870:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001874:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001878:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800187c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001884:	2320      	movs	r3, #32
 8001886:	e004      	b.n	8001892 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001888:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800188c:	fab3 f383 	clz	r3, r3
 8001890:	b2db      	uxtb	r3, r3
 8001892:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800189c:	2b00      	cmp	r3, #0
 800189e:	d105      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x264>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	0e9b      	lsrs	r3, r3, #26
 80018a6:	f003 031f 	and.w	r3, r3, #31
 80018aa:	e018      	b.n	80018de <HAL_ADC_ConfigChannel+0x296>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018b8:	fa93 f3a3 	rbit	r3, r3
 80018bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80018c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80018c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80018d0:	2320      	movs	r3, #32
 80018d2:	e004      	b.n	80018de <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80018d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018d8:	fab3 f383 	clz	r3, r3
 80018dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018de:	429a      	cmp	r2, r3
 80018e0:	d106      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2200      	movs	r2, #0
 80018e8:	2101      	movs	r1, #1
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fa40 	bl	8000d70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2102      	movs	r1, #2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fa24 	bl	8000d44 <LL_ADC_GetOffsetChannel>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10a      	bne.n	800191c <HAL_ADC_ConfigChannel+0x2d4>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2102      	movs	r1, #2
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fa19 	bl	8000d44 <LL_ADC_GetOffsetChannel>
 8001912:	4603      	mov	r3, r0
 8001914:	0e9b      	lsrs	r3, r3, #26
 8001916:	f003 021f 	and.w	r2, r3, #31
 800191a:	e01e      	b.n	800195a <HAL_ADC_ConfigChannel+0x312>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2102      	movs	r1, #2
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fa0e 	bl	8000d44 <LL_ADC_GetOffsetChannel>
 8001928:	4603      	mov	r3, r0
 800192a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001932:	fa93 f3a3 	rbit	r3, r3
 8001936:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800193a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800193e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001942:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800194a:	2320      	movs	r3, #32
 800194c:	e004      	b.n	8001958 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800194e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001952:	fab3 f383 	clz	r3, r3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001962:	2b00      	cmp	r3, #0
 8001964:	d105      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x32a>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	0e9b      	lsrs	r3, r3, #26
 800196c:	f003 031f 	and.w	r3, r3, #31
 8001970:	e016      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x358>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800197e:	fa93 f3a3 	rbit	r3, r3
 8001982:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001984:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001986:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800198a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001992:	2320      	movs	r3, #32
 8001994:	e004      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001996:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800199a:	fab3 f383 	clz	r3, r3
 800199e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d106      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2200      	movs	r2, #0
 80019aa:	2102      	movs	r1, #2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff f9df 	bl	8000d70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2103      	movs	r1, #3
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff f9c3 	bl	8000d44 <LL_ADC_GetOffsetChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10a      	bne.n	80019de <HAL_ADC_ConfigChannel+0x396>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2103      	movs	r1, #3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff f9b8 	bl	8000d44 <LL_ADC_GetOffsetChannel>
 80019d4:	4603      	mov	r3, r0
 80019d6:	0e9b      	lsrs	r3, r3, #26
 80019d8:	f003 021f 	and.w	r2, r3, #31
 80019dc:	e017      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x3c6>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2103      	movs	r1, #3
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff f9ad 	bl	8000d44 <LL_ADC_GetOffsetChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019f0:	fa93 f3a3 	rbit	r3, r3
 80019f4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80019f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019f8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80019fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001a00:	2320      	movs	r3, #32
 8001a02:	e003      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a06:	fab3 f383 	clz	r3, r3
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d105      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x3de>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	0e9b      	lsrs	r3, r3, #26
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	e011      	b.n	8001a4a <HAL_ADC_ConfigChannel+0x402>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a2e:	fa93 f3a3 	rbit	r3, r3
 8001a32:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001a34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a36:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001a3e:	2320      	movs	r3, #32
 8001a40:	e003      	b.n	8001a4a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a44:	fab3 f383 	clz	r3, r3
 8001a48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d106      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2200      	movs	r2, #0
 8001a54:	2103      	movs	r1, #3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff f98a 	bl	8000d70 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff faad 	bl	8000fc0 <LL_ADC_IsEnabled>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f040 813f 	bne.w	8001cec <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6818      	ldr	r0, [r3, #0]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	6819      	ldr	r1, [r3, #0]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f7ff f9fe 	bl	8000e7c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	4a8e      	ldr	r2, [pc, #568]	; (8001cc0 <HAL_ADC_ConfigChannel+0x678>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	f040 8130 	bne.w	8001cec <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10b      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x46c>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	0e9b      	lsrs	r3, r3, #26
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	f003 031f 	and.w	r3, r3, #31
 8001aa8:	2b09      	cmp	r3, #9
 8001aaa:	bf94      	ite	ls
 8001aac:	2301      	movls	r3, #1
 8001aae:	2300      	movhi	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	e019      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x4a0>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001abc:	fa93 f3a3 	rbit	r3, r3
 8001ac0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001ac2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ac4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001ac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001acc:	2320      	movs	r3, #32
 8001ace:	e003      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001ad0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ad2:	fab3 f383 	clz	r3, r3
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	3301      	adds	r3, #1
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	2b09      	cmp	r3, #9
 8001ae0:	bf94      	ite	ls
 8001ae2:	2301      	movls	r3, #1
 8001ae4:	2300      	movhi	r3, #0
 8001ae6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d079      	beq.n	8001be0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d107      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x4c0>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	0e9b      	lsrs	r3, r3, #26
 8001afe:	3301      	adds	r3, #1
 8001b00:	069b      	lsls	r3, r3, #26
 8001b02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b06:	e015      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x4ec>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b10:	fa93 f3a3 	rbit	r3, r3
 8001b14:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b18:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001b20:	2320      	movs	r3, #32
 8001b22:	e003      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b26:	fab3 f383 	clz	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	069b      	lsls	r3, r3, #26
 8001b30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d109      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x50c>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	0e9b      	lsrs	r3, r3, #26
 8001b46:	3301      	adds	r3, #1
 8001b48:	f003 031f 	and.w	r3, r3, #31
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b52:	e017      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x53c>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b5c:	fa93 f3a3 	rbit	r3, r3
 8001b60:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b64:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001b6c:	2320      	movs	r3, #32
 8001b6e:	e003      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b72:	fab3 f383 	clz	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	3301      	adds	r3, #1
 8001b7a:	f003 031f 	and.w	r3, r3, #31
 8001b7e:	2101      	movs	r1, #1
 8001b80:	fa01 f303 	lsl.w	r3, r1, r3
 8001b84:	ea42 0103 	orr.w	r1, r2, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10a      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x562>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	0e9b      	lsrs	r3, r3, #26
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	f003 021f 	and.w	r2, r3, #31
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	051b      	lsls	r3, r3, #20
 8001ba8:	e018      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x594>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	e003      	b.n	8001bce <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	f003 021f 	and.w	r2, r3, #31
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bdc:	430b      	orrs	r3, r1
 8001bde:	e080      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d107      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x5b4>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	0e9b      	lsrs	r3, r3, #26
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	069b      	lsls	r3, r3, #26
 8001bf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bfa:	e015      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x5e0>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c04:	fa93 f3a3 	rbit	r3, r3
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001c14:	2320      	movs	r3, #32
 8001c16:	e003      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c1a:	fab3 f383 	clz	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	3301      	adds	r3, #1
 8001c22:	069b      	lsls	r3, r3, #26
 8001c24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d109      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x600>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	0e9b      	lsrs	r3, r3, #26
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	2101      	movs	r1, #1
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	e017      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x630>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	6a3b      	ldr	r3, [r7, #32]
 8001c50:	fa93 f3a3 	rbit	r3, r3
 8001c54:	61fb      	str	r3, [r7, #28]
  return result;
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001c60:	2320      	movs	r3, #32
 8001c62:	e003      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	fab3 f383 	clz	r3, r3
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	2101      	movs	r1, #1
 8001c74:	fa01 f303 	lsl.w	r3, r1, r3
 8001c78:	ea42 0103 	orr.w	r1, r2, r3
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10d      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x65c>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	0e9b      	lsrs	r3, r3, #26
 8001c8e:	3301      	adds	r3, #1
 8001c90:	f003 021f 	and.w	r2, r3, #31
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	3b1e      	subs	r3, #30
 8001c9c:	051b      	lsls	r3, r3, #20
 8001c9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ca2:	e01d      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x698>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	fa93 f3a3 	rbit	r3, r3
 8001cb0:	613b      	str	r3, [r7, #16]
  return result;
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d103      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001cbc:	2320      	movs	r3, #32
 8001cbe:	e005      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x684>
 8001cc0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	3301      	adds	r3, #1
 8001cce:	f003 021f 	and.w	r2, r3, #31
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3b1e      	subs	r3, #30
 8001cda:	051b      	lsls	r3, r3, #20
 8001cdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ce0:	430b      	orrs	r3, r1
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	6892      	ldr	r2, [r2, #8]
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f7ff f89c 	bl	8000e24 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b44      	ldr	r3, [pc, #272]	; (8001e04 <HAL_ADC_ConfigChannel+0x7bc>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d07a      	beq.n	8001dee <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cf8:	4843      	ldr	r0, [pc, #268]	; (8001e08 <HAL_ADC_ConfigChannel+0x7c0>)
 8001cfa:	f7fe fff1 	bl	8000ce0 <LL_ADC_GetCommonPathInternalCh>
 8001cfe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a41      	ldr	r2, [pc, #260]	; (8001e0c <HAL_ADC_ConfigChannel+0x7c4>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d12c      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d126      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a3c      	ldr	r2, [pc, #240]	; (8001e10 <HAL_ADC_ConfigChannel+0x7c8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d004      	beq.n	8001d2c <HAL_ADC_ConfigChannel+0x6e4>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a3b      	ldr	r2, [pc, #236]	; (8001e14 <HAL_ADC_ConfigChannel+0x7cc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d15d      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d34:	4619      	mov	r1, r3
 8001d36:	4834      	ldr	r0, [pc, #208]	; (8001e08 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d38:	f7fe ffbf 	bl	8000cba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d3c:	4b36      	ldr	r3, [pc, #216]	; (8001e18 <HAL_ADC_ConfigChannel+0x7d0>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	099b      	lsrs	r3, r3, #6
 8001d42:	4a36      	ldr	r2, [pc, #216]	; (8001e1c <HAL_ADC_ConfigChannel+0x7d4>)
 8001d44:	fba2 2303 	umull	r2, r3, r2, r3
 8001d48:	099b      	lsrs	r3, r3, #6
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d56:	e002      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1f9      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d64:	e040      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a2d      	ldr	r2, [pc, #180]	; (8001e20 <HAL_ADC_ConfigChannel+0x7d8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d118      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x75a>
 8001d70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d112      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a23      	ldr	r2, [pc, #140]	; (8001e10 <HAL_ADC_ConfigChannel+0x7c8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d004      	beq.n	8001d90 <HAL_ADC_ConfigChannel+0x748>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a22      	ldr	r2, [pc, #136]	; (8001e14 <HAL_ADC_ConfigChannel+0x7cc>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d12d      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d98:	4619      	mov	r1, r3
 8001d9a:	481b      	ldr	r0, [pc, #108]	; (8001e08 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d9c:	f7fe ff8d 	bl	8000cba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001da0:	e024      	b.n	8001dec <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1f      	ldr	r2, [pc, #124]	; (8001e24 <HAL_ADC_ConfigChannel+0x7dc>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d120      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001dac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001db0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d11a      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a14      	ldr	r2, [pc, #80]	; (8001e10 <HAL_ADC_ConfigChannel+0x7c8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d115      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dca:	4619      	mov	r1, r3
 8001dcc:	480e      	ldr	r0, [pc, #56]	; (8001e08 <HAL_ADC_ConfigChannel+0x7c0>)
 8001dce:	f7fe ff74 	bl	8000cba <LL_ADC_SetCommonPathInternalCh>
 8001dd2:	e00c      	b.n	8001dee <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd8:	f043 0220 	orr.w	r2, r3, #32
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001de6:	e002      	b.n	8001dee <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001de8:	bf00      	nop
 8001dea:	e000      	b.n	8001dee <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001df6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	37d8      	adds	r7, #216	; 0xd8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	80080000 	.word	0x80080000
 8001e08:	50040300 	.word	0x50040300
 8001e0c:	c7520000 	.word	0xc7520000
 8001e10:	50040000 	.word	0x50040000
 8001e14:	50040200 	.word	0x50040200
 8001e18:	20000000 	.word	0x20000000
 8001e1c:	053e2d63 	.word	0x053e2d63
 8001e20:	cb840000 	.word	0xcb840000
 8001e24:	80000001 	.word	0x80000001

08001e28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff f8c1 	bl	8000fc0 <LL_ADC_IsEnabled>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d169      	bne.n	8001f18 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	4b36      	ldr	r3, [pc, #216]	; (8001f24 <ADC_Enable+0xfc>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00d      	beq.n	8001e6e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e56:	f043 0210 	orr.w	r2, r3, #16
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e62:	f043 0201 	orr.w	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e055      	b.n	8001f1a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff f890 	bl	8000f98 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001e78:	482b      	ldr	r0, [pc, #172]	; (8001f28 <ADC_Enable+0x100>)
 8001e7a:	f7fe ff31 	bl	8000ce0 <LL_ADC_GetCommonPathInternalCh>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d013      	beq.n	8001eb0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e88:	4b28      	ldr	r3, [pc, #160]	; (8001f2c <ADC_Enable+0x104>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	099b      	lsrs	r3, r3, #6
 8001e8e:	4a28      	ldr	r2, [pc, #160]	; (8001f30 <ADC_Enable+0x108>)
 8001e90:	fba2 2303 	umull	r2, r3, r2, r3
 8001e94:	099b      	lsrs	r3, r3, #6
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001ea2:	e002      	b.n	8001eaa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f9      	bne.n	8001ea4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001eb0:	f7fe fee4 	bl	8000c7c <HAL_GetTick>
 8001eb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001eb6:	e028      	b.n	8001f0a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff f87f 	bl	8000fc0 <LL_ADC_IsEnabled>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d104      	bne.n	8001ed2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff f863 	bl	8000f98 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ed2:	f7fe fed3 	bl	8000c7c <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d914      	bls.n	8001f0a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d00d      	beq.n	8001f0a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef2:	f043 0210 	orr.w	r2, r3, #16
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efe:	f043 0201 	orr.w	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e007      	b.n	8001f1a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d1cf      	bne.n	8001eb8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	8000003f 	.word	0x8000003f
 8001f28:	50040300 	.word	0x50040300
 8001f2c:	20000000 	.word	0x20000000
 8001f30:	053e2d63 	.word	0x053e2d63

08001f34 <LL_ADC_IsEnabled>:
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <LL_ADC_IsEnabled+0x18>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <LL_ADC_IsEnabled+0x1a>
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <LL_ADC_REG_IsConversionOngoing>:
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d101      	bne.n	8001f72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001f80:	b590      	push	{r4, r7, lr}
 8001f82:	b09f      	sub	sp, #124	; 0x7c
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d101      	bne.n	8001f9e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e093      	b.n	80020c6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001faa:	2300      	movs	r3, #0
 8001fac:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a47      	ldr	r2, [pc, #284]	; (80020d0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d102      	bne.n	8001fbe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001fb8:	4b46      	ldr	r3, [pc, #280]	; (80020d4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	e001      	b.n	8001fc2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10b      	bne.n	8001fe0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fcc:	f043 0220 	orr.w	r2, r3, #32
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e072      	b.n	80020c6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ffb9 	bl	8001f5a <LL_ADC_REG_IsConversionOngoing>
 8001fe8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ffb3 	bl	8001f5a <LL_ADC_REG_IsConversionOngoing>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d154      	bne.n	80020a4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001ffa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d151      	bne.n	80020a4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002000:	4b35      	ldr	r3, [pc, #212]	; (80020d8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002002:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d02c      	beq.n	8002066 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800200c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	6859      	ldr	r1, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800201e:	035b      	lsls	r3, r3, #13
 8002020:	430b      	orrs	r3, r1
 8002022:	431a      	orrs	r2, r3
 8002024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002026:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002028:	4829      	ldr	r0, [pc, #164]	; (80020d0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800202a:	f7ff ff83 	bl	8001f34 <LL_ADC_IsEnabled>
 800202e:	4604      	mov	r4, r0
 8002030:	4828      	ldr	r0, [pc, #160]	; (80020d4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002032:	f7ff ff7f 	bl	8001f34 <LL_ADC_IsEnabled>
 8002036:	4603      	mov	r3, r0
 8002038:	431c      	orrs	r4, r3
 800203a:	4828      	ldr	r0, [pc, #160]	; (80020dc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800203c:	f7ff ff7a 	bl	8001f34 <LL_ADC_IsEnabled>
 8002040:	4603      	mov	r3, r0
 8002042:	4323      	orrs	r3, r4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d137      	bne.n	80020b8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002050:	f023 030f 	bic.w	r3, r3, #15
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	6811      	ldr	r1, [r2, #0]
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	6892      	ldr	r2, [r2, #8]
 800205c:	430a      	orrs	r2, r1
 800205e:	431a      	orrs	r2, r3
 8002060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002062:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002064:	e028      	b.n	80020b8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800206e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002070:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002072:	4817      	ldr	r0, [pc, #92]	; (80020d0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002074:	f7ff ff5e 	bl	8001f34 <LL_ADC_IsEnabled>
 8002078:	4604      	mov	r4, r0
 800207a:	4816      	ldr	r0, [pc, #88]	; (80020d4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800207c:	f7ff ff5a 	bl	8001f34 <LL_ADC_IsEnabled>
 8002080:	4603      	mov	r3, r0
 8002082:	431c      	orrs	r4, r3
 8002084:	4815      	ldr	r0, [pc, #84]	; (80020dc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002086:	f7ff ff55 	bl	8001f34 <LL_ADC_IsEnabled>
 800208a:	4603      	mov	r3, r0
 800208c:	4323      	orrs	r3, r4
 800208e:	2b00      	cmp	r3, #0
 8002090:	d112      	bne.n	80020b8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800209a:	f023 030f 	bic.w	r3, r3, #15
 800209e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80020a0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80020a2:	e009      	b.n	80020b8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a8:	f043 0220 	orr.w	r2, r3, #32
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80020b6:	e000      	b.n	80020ba <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80020b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80020c2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	377c      	adds	r7, #124	; 0x7c
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd90      	pop	{r4, r7, pc}
 80020ce:	bf00      	nop
 80020d0:	50040000 	.word	0x50040000
 80020d4:	50040100 	.word	0x50040100
 80020d8:	50040300 	.word	0x50040300
 80020dc:	50040200 	.word	0x50040200

080020e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <__NVIC_SetPriorityGrouping+0x44>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020fc:	4013      	ands	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002108:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800210c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002112:	4a04      	ldr	r2, [pc, #16]	; (8002124 <__NVIC_SetPriorityGrouping+0x44>)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	60d3      	str	r3, [r2, #12]
}
 8002118:	bf00      	nop
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800212c:	4b04      	ldr	r3, [pc, #16]	; (8002140 <__NVIC_GetPriorityGrouping+0x18>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	0a1b      	lsrs	r3, r3, #8
 8002132:	f003 0307 	and.w	r3, r3, #7
}
 8002136:	4618      	mov	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	2b00      	cmp	r3, #0
 8002154:	db0b      	blt.n	800216e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	f003 021f 	and.w	r2, r3, #31
 800215c:	4907      	ldr	r1, [pc, #28]	; (800217c <__NVIC_EnableIRQ+0x38>)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	2001      	movs	r0, #1
 8002166:	fa00 f202 	lsl.w	r2, r0, r2
 800216a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000e100 	.word	0xe000e100

08002180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	6039      	str	r1, [r7, #0]
 800218a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002190:	2b00      	cmp	r3, #0
 8002192:	db0a      	blt.n	80021aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	b2da      	uxtb	r2, r3
 8002198:	490c      	ldr	r1, [pc, #48]	; (80021cc <__NVIC_SetPriority+0x4c>)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	0112      	lsls	r2, r2, #4
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	440b      	add	r3, r1
 80021a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a8:	e00a      	b.n	80021c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	4908      	ldr	r1, [pc, #32]	; (80021d0 <__NVIC_SetPriority+0x50>)
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	3b04      	subs	r3, #4
 80021b8:	0112      	lsls	r2, r2, #4
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	440b      	add	r3, r1
 80021be:	761a      	strb	r2, [r3, #24]
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000e100 	.word	0xe000e100
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	; 0x24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f1c3 0307 	rsb	r3, r3, #7
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	bf28      	it	cs
 80021f2:	2304      	movcs	r3, #4
 80021f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3304      	adds	r3, #4
 80021fa:	2b06      	cmp	r3, #6
 80021fc:	d902      	bls.n	8002204 <NVIC_EncodePriority+0x30>
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3b03      	subs	r3, #3
 8002202:	e000      	b.n	8002206 <NVIC_EncodePriority+0x32>
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43da      	mvns	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	401a      	ands	r2, r3
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800221c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	fa01 f303 	lsl.w	r3, r1, r3
 8002226:	43d9      	mvns	r1, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800222c:	4313      	orrs	r3, r2
         );
}
 800222e:	4618      	mov	r0, r3
 8002230:	3724      	adds	r7, #36	; 0x24
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff ff4c 	bl	80020e0 <__NVIC_SetPriorityGrouping>
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
 800225c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002262:	f7ff ff61 	bl	8002128 <__NVIC_GetPriorityGrouping>
 8002266:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	68b9      	ldr	r1, [r7, #8]
 800226c:	6978      	ldr	r0, [r7, #20]
 800226e:	f7ff ffb1 	bl	80021d4 <NVIC_EncodePriority>
 8002272:	4602      	mov	r2, r0
 8002274:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002278:	4611      	mov	r1, r2
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff ff80 	bl	8002180 <__NVIC_SetPriority>
}
 8002280:	bf00      	nop
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff ff54 	bl	8002144 <__NVIC_EnableIRQ>
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022b2:	e17f      	b.n	80025b4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	2101      	movs	r1, #1
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	fa01 f303 	lsl.w	r3, r1, r3
 80022c0:	4013      	ands	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8171 	beq.w	80025ae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d005      	beq.n	80022e4 <HAL_GPIO_Init+0x40>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d130      	bne.n	8002346 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800231a:	2201      	movs	r2, #1
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4013      	ands	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	091b      	lsrs	r3, r3, #4
 8002330:	f003 0201 	and.w	r2, r3, #1
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	2b03      	cmp	r3, #3
 8002350:	d118      	bne.n	8002384 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002358:	2201      	movs	r2, #1
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	08db      	lsrs	r3, r3, #3
 800236e:	f003 0201 	and.w	r2, r3, #1
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b03      	cmp	r3, #3
 800238e:	d017      	beq.n	80023c0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	2203      	movs	r2, #3
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d123      	bne.n	8002414 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	08da      	lsrs	r2, r3, #3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3208      	adds	r2, #8
 80023d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	220f      	movs	r2, #15
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	08da      	lsrs	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3208      	adds	r2, #8
 800240e:	6939      	ldr	r1, [r7, #16]
 8002410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	2203      	movs	r2, #3
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4013      	ands	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 0203 	and.w	r2, r3, #3
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4313      	orrs	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80ac 	beq.w	80025ae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002456:	4b5f      	ldr	r3, [pc, #380]	; (80025d4 <HAL_GPIO_Init+0x330>)
 8002458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800245a:	4a5e      	ldr	r2, [pc, #376]	; (80025d4 <HAL_GPIO_Init+0x330>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	6613      	str	r3, [r2, #96]	; 0x60
 8002462:	4b5c      	ldr	r3, [pc, #368]	; (80025d4 <HAL_GPIO_Init+0x330>)
 8002464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800246e:	4a5a      	ldr	r2, [pc, #360]	; (80025d8 <HAL_GPIO_Init+0x334>)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	089b      	lsrs	r3, r3, #2
 8002474:	3302      	adds	r3, #2
 8002476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	220f      	movs	r2, #15
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002498:	d025      	beq.n	80024e6 <HAL_GPIO_Init+0x242>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a4f      	ldr	r2, [pc, #316]	; (80025dc <HAL_GPIO_Init+0x338>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d01f      	beq.n	80024e2 <HAL_GPIO_Init+0x23e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a4e      	ldr	r2, [pc, #312]	; (80025e0 <HAL_GPIO_Init+0x33c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d019      	beq.n	80024de <HAL_GPIO_Init+0x23a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a4d      	ldr	r2, [pc, #308]	; (80025e4 <HAL_GPIO_Init+0x340>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d013      	beq.n	80024da <HAL_GPIO_Init+0x236>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a4c      	ldr	r2, [pc, #304]	; (80025e8 <HAL_GPIO_Init+0x344>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00d      	beq.n	80024d6 <HAL_GPIO_Init+0x232>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a4b      	ldr	r2, [pc, #300]	; (80025ec <HAL_GPIO_Init+0x348>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d007      	beq.n	80024d2 <HAL_GPIO_Init+0x22e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a4a      	ldr	r2, [pc, #296]	; (80025f0 <HAL_GPIO_Init+0x34c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d101      	bne.n	80024ce <HAL_GPIO_Init+0x22a>
 80024ca:	2306      	movs	r3, #6
 80024cc:	e00c      	b.n	80024e8 <HAL_GPIO_Init+0x244>
 80024ce:	2307      	movs	r3, #7
 80024d0:	e00a      	b.n	80024e8 <HAL_GPIO_Init+0x244>
 80024d2:	2305      	movs	r3, #5
 80024d4:	e008      	b.n	80024e8 <HAL_GPIO_Init+0x244>
 80024d6:	2304      	movs	r3, #4
 80024d8:	e006      	b.n	80024e8 <HAL_GPIO_Init+0x244>
 80024da:	2303      	movs	r3, #3
 80024dc:	e004      	b.n	80024e8 <HAL_GPIO_Init+0x244>
 80024de:	2302      	movs	r3, #2
 80024e0:	e002      	b.n	80024e8 <HAL_GPIO_Init+0x244>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <HAL_GPIO_Init+0x244>
 80024e6:	2300      	movs	r3, #0
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	f002 0203 	and.w	r2, r2, #3
 80024ee:	0092      	lsls	r2, r2, #2
 80024f0:	4093      	lsls	r3, r2
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024f8:	4937      	ldr	r1, [pc, #220]	; (80025d8 <HAL_GPIO_Init+0x334>)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	089b      	lsrs	r3, r3, #2
 80024fe:	3302      	adds	r3, #2
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002506:	4b3b      	ldr	r3, [pc, #236]	; (80025f4 <HAL_GPIO_Init+0x350>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	43db      	mvns	r3, r3
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4013      	ands	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4313      	orrs	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800252a:	4a32      	ldr	r2, [pc, #200]	; (80025f4 <HAL_GPIO_Init+0x350>)
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002530:	4b30      	ldr	r3, [pc, #192]	; (80025f4 <HAL_GPIO_Init+0x350>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	43db      	mvns	r3, r3
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002554:	4a27      	ldr	r2, [pc, #156]	; (80025f4 <HAL_GPIO_Init+0x350>)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800255a:	4b26      	ldr	r3, [pc, #152]	; (80025f4 <HAL_GPIO_Init+0x350>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	43db      	mvns	r3, r3
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4013      	ands	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800257e:	4a1d      	ldr	r2, [pc, #116]	; (80025f4 <HAL_GPIO_Init+0x350>)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_GPIO_Init+0x350>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	43db      	mvns	r3, r3
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025a8:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <HAL_GPIO_Init+0x350>)
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	3301      	adds	r3, #1
 80025b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	fa22 f303 	lsr.w	r3, r2, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f47f ae78 	bne.w	80022b4 <HAL_GPIO_Init+0x10>
  }
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop
 80025c8:	371c      	adds	r7, #28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40010000 	.word	0x40010000
 80025dc:	48000400 	.word	0x48000400
 80025e0:	48000800 	.word	0x48000800
 80025e4:	48000c00 	.word	0x48000c00
 80025e8:	48001000 	.word	0x48001000
 80025ec:	48001400 	.word	0x48001400
 80025f0:	48001800 	.word	0x48001800
 80025f4:	40010400 	.word	0x40010400

080025f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]
 8002604:	4613      	mov	r3, r2
 8002606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002608:	787b      	ldrb	r3, [r7, #1]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800260e:	887a      	ldrh	r2, [r7, #2]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002614:	e002      	b.n	800261c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002616:	887a      	ldrh	r2, [r7, #2]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <HAL_PWREx_GetVoltageRange+0x18>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40007000 	.word	0x40007000

08002644 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002652:	d130      	bne.n	80026b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002654:	4b23      	ldr	r3, [pc, #140]	; (80026e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800265c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002660:	d038      	beq.n	80026d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002662:	4b20      	ldr	r3, [pc, #128]	; (80026e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800266a:	4a1e      	ldr	r2, [pc, #120]	; (80026e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800266c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002670:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002672:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2232      	movs	r2, #50	; 0x32
 8002678:	fb02 f303 	mul.w	r3, r2, r3
 800267c:	4a1b      	ldr	r2, [pc, #108]	; (80026ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	0c9b      	lsrs	r3, r3, #18
 8002684:	3301      	adds	r3, #1
 8002686:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002688:	e002      	b.n	8002690 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	3b01      	subs	r3, #1
 800268e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002690:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800269c:	d102      	bne.n	80026a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f2      	bne.n	800268a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026a4:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b0:	d110      	bne.n	80026d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e00f      	b.n	80026d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c2:	d007      	beq.n	80026d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026c4:	4b07      	ldr	r3, [pc, #28]	; (80026e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026cc:	4a05      	ldr	r2, [pc, #20]	; (80026e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40007000 	.word	0x40007000
 80026e8:	20000000 	.word	0x20000000
 80026ec:	431bde83 	.word	0x431bde83

080026f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e3ca      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002702:	4b97      	ldr	r3, [pc, #604]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800270c:	4b94      	ldr	r3, [pc, #592]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 80e4 	beq.w	80028ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d007      	beq.n	800273a <HAL_RCC_OscConfig+0x4a>
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	2b0c      	cmp	r3, #12
 800272e:	f040 808b 	bne.w	8002848 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2b01      	cmp	r3, #1
 8002736:	f040 8087 	bne.w	8002848 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800273a:	4b89      	ldr	r3, [pc, #548]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d005      	beq.n	8002752 <HAL_RCC_OscConfig+0x62>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e3a2      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1a      	ldr	r2, [r3, #32]
 8002756:	4b82      	ldr	r3, [pc, #520]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d004      	beq.n	800276c <HAL_RCC_OscConfig+0x7c>
 8002762:	4b7f      	ldr	r3, [pc, #508]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800276a:	e005      	b.n	8002778 <HAL_RCC_OscConfig+0x88>
 800276c:	4b7c      	ldr	r3, [pc, #496]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 800276e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002772:	091b      	lsrs	r3, r3, #4
 8002774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002778:	4293      	cmp	r3, r2
 800277a:	d223      	bcs.n	80027c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	4618      	mov	r0, r3
 8002782:	f000 fd87 	bl	8003294 <RCC_SetFlashLatencyFromMSIRange>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e383      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002790:	4b73      	ldr	r3, [pc, #460]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a72      	ldr	r2, [pc, #456]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002796:	f043 0308 	orr.w	r3, r3, #8
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	4b70      	ldr	r3, [pc, #448]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	496d      	ldr	r1, [pc, #436]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027ae:	4b6c      	ldr	r3, [pc, #432]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	4968      	ldr	r1, [pc, #416]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	604b      	str	r3, [r1, #4]
 80027c2:	e025      	b.n	8002810 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027c4:	4b66      	ldr	r3, [pc, #408]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a65      	ldr	r2, [pc, #404]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80027ca:	f043 0308 	orr.w	r3, r3, #8
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	4b63      	ldr	r3, [pc, #396]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	4960      	ldr	r1, [pc, #384]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027e2:	4b5f      	ldr	r3, [pc, #380]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	495b      	ldr	r1, [pc, #364]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d109      	bne.n	8002810 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	4618      	mov	r0, r3
 8002802:	f000 fd47 	bl	8003294 <RCC_SetFlashLatencyFromMSIRange>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e343      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002810:	f000 fc4a 	bl	80030a8 <HAL_RCC_GetSysClockFreq>
 8002814:	4602      	mov	r2, r0
 8002816:	4b52      	ldr	r3, [pc, #328]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	f003 030f 	and.w	r3, r3, #15
 8002820:	4950      	ldr	r1, [pc, #320]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 8002822:	5ccb      	ldrb	r3, [r1, r3]
 8002824:	f003 031f 	and.w	r3, r3, #31
 8002828:	fa22 f303 	lsr.w	r3, r2, r3
 800282c:	4a4e      	ldr	r2, [pc, #312]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 800282e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002830:	4b4e      	ldr	r3, [pc, #312]	; (800296c <HAL_RCC_OscConfig+0x27c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7fe f923 	bl	8000a80 <HAL_InitTick>
 800283a:	4603      	mov	r3, r0
 800283c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d052      	beq.n	80028ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	e327      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d032      	beq.n	80028b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002850:	4b43      	ldr	r3, [pc, #268]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a42      	ldr	r2, [pc, #264]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800285c:	f7fe fa0e 	bl	8000c7c <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002864:	f7fe fa0a 	bl	8000c7c <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e310      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002876:	4b3a      	ldr	r3, [pc, #232]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002882:	4b37      	ldr	r3, [pc, #220]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a36      	ldr	r2, [pc, #216]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002888:	f043 0308 	orr.w	r3, r3, #8
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	4b34      	ldr	r3, [pc, #208]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	4931      	ldr	r1, [pc, #196]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 800289c:	4313      	orrs	r3, r2
 800289e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028a0:	4b2f      	ldr	r3, [pc, #188]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	021b      	lsls	r3, r3, #8
 80028ae:	492c      	ldr	r1, [pc, #176]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	604b      	str	r3, [r1, #4]
 80028b4:	e01a      	b.n	80028ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028b6:	4b2a      	ldr	r3, [pc, #168]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a29      	ldr	r2, [pc, #164]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80028bc:	f023 0301 	bic.w	r3, r3, #1
 80028c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028c2:	f7fe f9db 	bl	8000c7c <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028ca:	f7fe f9d7 	bl	8000c7c <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e2dd      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028dc:	4b20      	ldr	r3, [pc, #128]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f0      	bne.n	80028ca <HAL_RCC_OscConfig+0x1da>
 80028e8:	e000      	b.n	80028ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d074      	beq.n	80029e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d005      	beq.n	800290a <HAL_RCC_OscConfig+0x21a>
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	2b0c      	cmp	r3, #12
 8002902:	d10e      	bne.n	8002922 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	2b03      	cmp	r3, #3
 8002908:	d10b      	bne.n	8002922 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290a:	4b15      	ldr	r3, [pc, #84]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d064      	beq.n	80029e0 <HAL_RCC_OscConfig+0x2f0>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d160      	bne.n	80029e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e2ba      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800292a:	d106      	bne.n	800293a <HAL_RCC_OscConfig+0x24a>
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0b      	ldr	r2, [pc, #44]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	e026      	b.n	8002988 <HAL_RCC_OscConfig+0x298>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002942:	d115      	bne.n	8002970 <HAL_RCC_OscConfig+0x280>
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a05      	ldr	r2, [pc, #20]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 800294a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800294e:	6013      	str	r3, [r2, #0]
 8002950:	4b03      	ldr	r3, [pc, #12]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a02      	ldr	r2, [pc, #8]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	e014      	b.n	8002988 <HAL_RCC_OscConfig+0x298>
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000
 8002964:	080079e8 	.word	0x080079e8
 8002968:	20000000 	.word	0x20000000
 800296c:	20000004 	.word	0x20000004
 8002970:	4ba0      	ldr	r3, [pc, #640]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a9f      	ldr	r2, [pc, #636]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	4b9d      	ldr	r3, [pc, #628]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a9c      	ldr	r2, [pc, #624]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d013      	beq.n	80029b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7fe f974 	bl	8000c7c <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002998:	f7fe f970 	bl	8000c7c <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b64      	cmp	r3, #100	; 0x64
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e276      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029aa:	4b92      	ldr	r3, [pc, #584]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCC_OscConfig+0x2a8>
 80029b6:	e014      	b.n	80029e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7fe f960 	bl	8000c7c <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c0:	f7fe f95c 	bl	8000c7c <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b64      	cmp	r3, #100	; 0x64
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e262      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029d2:	4b88      	ldr	r3, [pc, #544]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x2d0>
 80029de:	e000      	b.n	80029e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d060      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_OscConfig+0x310>
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	2b0c      	cmp	r3, #12
 80029f8:	d119      	bne.n	8002a2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d116      	bne.n	8002a2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a00:	4b7c      	ldr	r3, [pc, #496]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_OscConfig+0x328>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e23f      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a18:	4b76      	ldr	r3, [pc, #472]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	061b      	lsls	r3, r3, #24
 8002a26:	4973      	ldr	r1, [pc, #460]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a2c:	e040      	b.n	8002ab0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d023      	beq.n	8002a7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a36:	4b6f      	ldr	r3, [pc, #444]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a6e      	ldr	r2, [pc, #440]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a42:	f7fe f91b 	bl	8000c7c <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a4a:	f7fe f917 	bl	8000c7c <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e21d      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a5c:	4b65      	ldr	r3, [pc, #404]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a68:	4b62      	ldr	r3, [pc, #392]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	061b      	lsls	r3, r3, #24
 8002a76:	495f      	ldr	r1, [pc, #380]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	604b      	str	r3, [r1, #4]
 8002a7c:	e018      	b.n	8002ab0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a7e:	4b5d      	ldr	r3, [pc, #372]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a5c      	ldr	r2, [pc, #368]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002a84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8a:	f7fe f8f7 	bl	8000c7c <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a92:	f7fe f8f3 	bl	8000c7c <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e1f9      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002aa4:	4b53      	ldr	r3, [pc, #332]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1f0      	bne.n	8002a92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d03c      	beq.n	8002b36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d01c      	beq.n	8002afe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ac4:	4b4b      	ldr	r3, [pc, #300]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aca:	4a4a      	ldr	r2, [pc, #296]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad4:	f7fe f8d2 	bl	8000c7c <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002adc:	f7fe f8ce 	bl	8000c7c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e1d4      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aee:	4b41      	ldr	r3, [pc, #260]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0ef      	beq.n	8002adc <HAL_RCC_OscConfig+0x3ec>
 8002afc:	e01b      	b.n	8002b36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002afe:	4b3d      	ldr	r3, [pc, #244]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b04:	4a3b      	ldr	r2, [pc, #236]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002b06:	f023 0301 	bic.w	r3, r3, #1
 8002b0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0e:	f7fe f8b5 	bl	8000c7c <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b16:	f7fe f8b1 	bl	8000c7c <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e1b7      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b28:	4b32      	ldr	r3, [pc, #200]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1ef      	bne.n	8002b16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 80a6 	beq.w	8002c90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b44:	2300      	movs	r3, #0
 8002b46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b48:	4b2a      	ldr	r3, [pc, #168]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10d      	bne.n	8002b70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b54:	4b27      	ldr	r3, [pc, #156]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b58:	4a26      	ldr	r2, [pc, #152]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b60:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b70:	4b21      	ldr	r3, [pc, #132]	; (8002bf8 <HAL_RCC_OscConfig+0x508>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d118      	bne.n	8002bae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b7c:	4b1e      	ldr	r3, [pc, #120]	; (8002bf8 <HAL_RCC_OscConfig+0x508>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a1d      	ldr	r2, [pc, #116]	; (8002bf8 <HAL_RCC_OscConfig+0x508>)
 8002b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b88:	f7fe f878 	bl	8000c7c <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b90:	f7fe f874 	bl	8000c7c <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e17a      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba2:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <HAL_RCC_OscConfig+0x508>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d108      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x4d8>
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbc:	4a0d      	ldr	r2, [pc, #52]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bc6:	e029      	b.n	8002c1c <HAL_RCC_OscConfig+0x52c>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b05      	cmp	r3, #5
 8002bce:	d115      	bne.n	8002bfc <HAL_RCC_OscConfig+0x50c>
 8002bd0:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd6:	4a07      	ldr	r2, [pc, #28]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002bd8:	f043 0304 	orr.w	r3, r3, #4
 8002bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002be0:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be6:	4a03      	ldr	r2, [pc, #12]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bf0:	e014      	b.n	8002c1c <HAL_RCC_OscConfig+0x52c>
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40007000 	.word	0x40007000
 8002bfc:	4b9c      	ldr	r3, [pc, #624]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c02:	4a9b      	ldr	r2, [pc, #620]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002c04:	f023 0301 	bic.w	r3, r3, #1
 8002c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c0c:	4b98      	ldr	r3, [pc, #608]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c12:	4a97      	ldr	r2, [pc, #604]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002c14:	f023 0304 	bic.w	r3, r3, #4
 8002c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d016      	beq.n	8002c52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c24:	f7fe f82a 	bl	8000c7c <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c2a:	e00a      	b.n	8002c42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2c:	f7fe f826 	bl	8000c7c <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e12a      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c42:	4b8b      	ldr	r3, [pc, #556]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0ed      	beq.n	8002c2c <HAL_RCC_OscConfig+0x53c>
 8002c50:	e015      	b.n	8002c7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c52:	f7fe f813 	bl	8000c7c <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c58:	e00a      	b.n	8002c70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f7fe f80f 	bl	8000c7c <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e113      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c70:	4b7f      	ldr	r3, [pc, #508]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1ed      	bne.n	8002c5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c7e:	7ffb      	ldrb	r3, [r7, #31]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d105      	bne.n	8002c90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c84:	4b7a      	ldr	r3, [pc, #488]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c88:	4a79      	ldr	r2, [pc, #484]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80fe 	beq.w	8002e96 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	f040 80d0 	bne.w	8002e44 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ca4:	4b72      	ldr	r3, [pc, #456]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f003 0203 	and.w	r2, r3, #3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d130      	bne.n	8002d1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d127      	bne.n	8002d1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d11f      	bne.n	8002d1a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ce4:	2a07      	cmp	r2, #7
 8002ce6:	bf14      	ite	ne
 8002ce8:	2201      	movne	r2, #1
 8002cea:	2200      	moveq	r2, #0
 8002cec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d113      	bne.n	8002d1a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d109      	bne.n	8002d1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	085b      	lsrs	r3, r3, #1
 8002d12:	3b01      	subs	r3, #1
 8002d14:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d06e      	beq.n	8002df8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	2b0c      	cmp	r3, #12
 8002d1e:	d069      	beq.n	8002df4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d20:	4b53      	ldr	r3, [pc, #332]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d105      	bne.n	8002d38 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d2c:	4b50      	ldr	r3, [pc, #320]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0ad      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d3c:	4b4c      	ldr	r3, [pc, #304]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a4b      	ldr	r2, [pc, #300]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d46:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d48:	f7fd ff98 	bl	8000c7c <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d50:	f7fd ff94 	bl	8000c7c <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e09a      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d62:	4b43      	ldr	r3, [pc, #268]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d6e:	4b40      	ldr	r3, [pc, #256]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	4b40      	ldr	r3, [pc, #256]	; (8002e74 <HAL_RCC_OscConfig+0x784>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d7e:	3a01      	subs	r2, #1
 8002d80:	0112      	lsls	r2, r2, #4
 8002d82:	4311      	orrs	r1, r2
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d88:	0212      	lsls	r2, r2, #8
 8002d8a:	4311      	orrs	r1, r2
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d90:	0852      	lsrs	r2, r2, #1
 8002d92:	3a01      	subs	r2, #1
 8002d94:	0552      	lsls	r2, r2, #21
 8002d96:	4311      	orrs	r1, r2
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d9c:	0852      	lsrs	r2, r2, #1
 8002d9e:	3a01      	subs	r2, #1
 8002da0:	0652      	lsls	r2, r2, #25
 8002da2:	4311      	orrs	r1, r2
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002da8:	0912      	lsrs	r2, r2, #4
 8002daa:	0452      	lsls	r2, r2, #17
 8002dac:	430a      	orrs	r2, r1
 8002dae:	4930      	ldr	r1, [pc, #192]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002db4:	4b2e      	ldr	r3, [pc, #184]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a2d      	ldr	r2, [pc, #180]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dbe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dc0:	4b2b      	ldr	r3, [pc, #172]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	4a2a      	ldr	r2, [pc, #168]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dcc:	f7fd ff56 	bl	8000c7c <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd4:	f7fd ff52 	bl	8000c7c <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e058      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de6:	4b22      	ldr	r3, [pc, #136]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002df2:	e050      	b.n	8002e96 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e04f      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df8:	4b1d      	ldr	r3, [pc, #116]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d148      	bne.n	8002e96 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e04:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a19      	ldr	r2, [pc, #100]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e10:	4b17      	ldr	r3, [pc, #92]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	4a16      	ldr	r2, [pc, #88]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002e16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e1c:	f7fd ff2e 	bl	8000c7c <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e24:	f7fd ff2a 	bl	8000c7c <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e030      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e36:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0x734>
 8002e42:	e028      	b.n	8002e96 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	2b0c      	cmp	r3, #12
 8002e48:	d023      	beq.n	8002e92 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4a:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a08      	ldr	r2, [pc, #32]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002e50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e56:	f7fd ff11 	bl	8000c7c <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e5c:	e00c      	b.n	8002e78 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e5e:	f7fd ff0d 	bl	8000c7c <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d905      	bls.n	8002e78 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e013      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
 8002e70:	40021000 	.word	0x40021000
 8002e74:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e78:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <HAL_RCC_OscConfig+0x7b0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1ec      	bne.n	8002e5e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_RCC_OscConfig+0x7b0>)
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	4905      	ldr	r1, [pc, #20]	; (8002ea0 <HAL_RCC_OscConfig+0x7b0>)
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <HAL_RCC_OscConfig+0x7b4>)
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	60cb      	str	r3, [r1, #12]
 8002e90:	e001      	b.n	8002e96 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3720      	adds	r7, #32
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	feeefffc 	.word	0xfeeefffc

08002ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0e7      	b.n	800308c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ebc:	4b75      	ldr	r3, [pc, #468]	; (8003094 <HAL_RCC_ClockConfig+0x1ec>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d910      	bls.n	8002eec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eca:	4b72      	ldr	r3, [pc, #456]	; (8003094 <HAL_RCC_ClockConfig+0x1ec>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 0207 	bic.w	r2, r3, #7
 8002ed2:	4970      	ldr	r1, [pc, #448]	; (8003094 <HAL_RCC_ClockConfig+0x1ec>)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eda:	4b6e      	ldr	r3, [pc, #440]	; (8003094 <HAL_RCC_ClockConfig+0x1ec>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0cf      	b.n	800308c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d010      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	4b66      	ldr	r3, [pc, #408]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d908      	bls.n	8002f1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f08:	4b63      	ldr	r3, [pc, #396]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	4960      	ldr	r1, [pc, #384]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d04c      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d107      	bne.n	8002f3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f2e:	4b5a      	ldr	r3, [pc, #360]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d121      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0a6      	b.n	800308c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d107      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f46:	4b54      	ldr	r3, [pc, #336]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d115      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e09a      	b.n	800308c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d107      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f5e:	4b4e      	ldr	r3, [pc, #312]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e08e      	b.n	800308c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f6e:	4b4a      	ldr	r3, [pc, #296]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e086      	b.n	800308c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f7e:	4b46      	ldr	r3, [pc, #280]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f023 0203 	bic.w	r2, r3, #3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4943      	ldr	r1, [pc, #268]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f90:	f7fd fe74 	bl	8000c7c <HAL_GetTick>
 8002f94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f96:	e00a      	b.n	8002fae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f98:	f7fd fe70 	bl	8000c7c <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e06e      	b.n	800308c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fae:	4b3a      	ldr	r3, [pc, #232]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 020c 	and.w	r2, r3, #12
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d1eb      	bne.n	8002f98 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d010      	beq.n	8002fee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	4b31      	ldr	r3, [pc, #196]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d208      	bcs.n	8002fee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fdc:	4b2e      	ldr	r3, [pc, #184]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	492b      	ldr	r1, [pc, #172]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fee:	4b29      	ldr	r3, [pc, #164]	; (8003094 <HAL_RCC_ClockConfig+0x1ec>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d210      	bcs.n	800301e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffc:	4b25      	ldr	r3, [pc, #148]	; (8003094 <HAL_RCC_ClockConfig+0x1ec>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f023 0207 	bic.w	r2, r3, #7
 8003004:	4923      	ldr	r1, [pc, #140]	; (8003094 <HAL_RCC_ClockConfig+0x1ec>)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	4313      	orrs	r3, r2
 800300a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800300c:	4b21      	ldr	r3, [pc, #132]	; (8003094 <HAL_RCC_ClockConfig+0x1ec>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d001      	beq.n	800301e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e036      	b.n	800308c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800302a:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	4918      	ldr	r1, [pc, #96]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8003038:	4313      	orrs	r3, r2
 800303a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b00      	cmp	r3, #0
 8003046:	d009      	beq.n	800305c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003048:	4b13      	ldr	r3, [pc, #76]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4910      	ldr	r1, [pc, #64]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8003058:	4313      	orrs	r3, r2
 800305a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800305c:	f000 f824 	bl	80030a8 <HAL_RCC_GetSysClockFreq>
 8003060:	4602      	mov	r2, r0
 8003062:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	091b      	lsrs	r3, r3, #4
 8003068:	f003 030f 	and.w	r3, r3, #15
 800306c:	490b      	ldr	r1, [pc, #44]	; (800309c <HAL_RCC_ClockConfig+0x1f4>)
 800306e:	5ccb      	ldrb	r3, [r1, r3]
 8003070:	f003 031f 	and.w	r3, r3, #31
 8003074:	fa22 f303 	lsr.w	r3, r2, r3
 8003078:	4a09      	ldr	r2, [pc, #36]	; (80030a0 <HAL_RCC_ClockConfig+0x1f8>)
 800307a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800307c:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <HAL_RCC_ClockConfig+0x1fc>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f7fd fcfd 	bl	8000a80 <HAL_InitTick>
 8003086:	4603      	mov	r3, r0
 8003088:	72fb      	strb	r3, [r7, #11]

  return status;
 800308a:	7afb      	ldrb	r3, [r7, #11]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40022000 	.word	0x40022000
 8003098:	40021000 	.word	0x40021000
 800309c:	080079e8 	.word	0x080079e8
 80030a0:	20000000 	.word	0x20000000
 80030a4:	20000004 	.word	0x20000004

080030a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b089      	sub	sp, #36	; 0x24
 80030ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
 80030b2:	2300      	movs	r3, #0
 80030b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030b6:	4b3e      	ldr	r3, [pc, #248]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030c0:	4b3b      	ldr	r3, [pc, #236]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0x34>
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	2b0c      	cmp	r3, #12
 80030d4:	d121      	bne.n	800311a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d11e      	bne.n	800311a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030dc:	4b34      	ldr	r3, [pc, #208]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d107      	bne.n	80030f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030e8:	4b31      	ldr	r3, [pc, #196]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ee:	0a1b      	lsrs	r3, r3, #8
 80030f0:	f003 030f 	and.w	r3, r3, #15
 80030f4:	61fb      	str	r3, [r7, #28]
 80030f6:	e005      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030f8:	4b2d      	ldr	r3, [pc, #180]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003104:	4a2b      	ldr	r2, [pc, #172]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800310c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10d      	bne.n	8003130 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003118:	e00a      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	2b04      	cmp	r3, #4
 800311e:	d102      	bne.n	8003126 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003120:	4b25      	ldr	r3, [pc, #148]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003122:	61bb      	str	r3, [r7, #24]
 8003124:	e004      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	2b08      	cmp	r3, #8
 800312a:	d101      	bne.n	8003130 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800312c:	4b23      	ldr	r3, [pc, #140]	; (80031bc <HAL_RCC_GetSysClockFreq+0x114>)
 800312e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	2b0c      	cmp	r3, #12
 8003134:	d134      	bne.n	80031a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003136:	4b1e      	ldr	r3, [pc, #120]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d003      	beq.n	800314e <HAL_RCC_GetSysClockFreq+0xa6>
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b03      	cmp	r3, #3
 800314a:	d003      	beq.n	8003154 <HAL_RCC_GetSysClockFreq+0xac>
 800314c:	e005      	b.n	800315a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800314e:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003150:	617b      	str	r3, [r7, #20]
      break;
 8003152:	e005      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003154:	4b19      	ldr	r3, [pc, #100]	; (80031bc <HAL_RCC_GetSysClockFreq+0x114>)
 8003156:	617b      	str	r3, [r7, #20]
      break;
 8003158:	e002      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	617b      	str	r3, [r7, #20]
      break;
 800315e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003160:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	091b      	lsrs	r3, r3, #4
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	3301      	adds	r3, #1
 800316c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800316e:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	0a1b      	lsrs	r3, r3, #8
 8003174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	fb03 f202 	mul.w	r2, r3, r2
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	fbb2 f3f3 	udiv	r3, r2, r3
 8003184:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003186:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	0e5b      	lsrs	r3, r3, #25
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	3301      	adds	r3, #1
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	fbb2 f3f3 	udiv	r3, r2, r3
 800319e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031a0:	69bb      	ldr	r3, [r7, #24]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3724      	adds	r7, #36	; 0x24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000
 80031b4:	08007a00 	.word	0x08007a00
 80031b8:	00f42400 	.word	0x00f42400
 80031bc:	007a1200 	.word	0x007a1200

080031c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031c4:	4b03      	ldr	r3, [pc, #12]	; (80031d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031c6:	681b      	ldr	r3, [r3, #0]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	20000000 	.word	0x20000000

080031d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031dc:	f7ff fff0 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 80031e0:	4602      	mov	r2, r0
 80031e2:	4b06      	ldr	r3, [pc, #24]	; (80031fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	0a1b      	lsrs	r3, r3, #8
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	4904      	ldr	r1, [pc, #16]	; (8003200 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031ee:	5ccb      	ldrb	r3, [r1, r3]
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40021000 	.word	0x40021000
 8003200:	080079f8 	.word	0x080079f8

08003204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003208:	f7ff ffda 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 800320c:	4602      	mov	r2, r0
 800320e:	4b06      	ldr	r3, [pc, #24]	; (8003228 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	0adb      	lsrs	r3, r3, #11
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	4904      	ldr	r1, [pc, #16]	; (800322c <HAL_RCC_GetPCLK2Freq+0x28>)
 800321a:	5ccb      	ldrb	r3, [r1, r3]
 800321c:	f003 031f 	and.w	r3, r3, #31
 8003220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003224:	4618      	mov	r0, r3
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40021000 	.word	0x40021000
 800322c:	080079f8 	.word	0x080079f8

08003230 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	220f      	movs	r2, #15
 800323e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003240:	4b12      	ldr	r3, [pc, #72]	; (800328c <HAL_RCC_GetClockConfig+0x5c>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 0203 	and.w	r2, r3, #3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800324c:	4b0f      	ldr	r3, [pc, #60]	; (800328c <HAL_RCC_GetClockConfig+0x5c>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003258:	4b0c      	ldr	r3, [pc, #48]	; (800328c <HAL_RCC_GetClockConfig+0x5c>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003264:	4b09      	ldr	r3, [pc, #36]	; (800328c <HAL_RCC_GetClockConfig+0x5c>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	08db      	lsrs	r3, r3, #3
 800326a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003272:	4b07      	ldr	r3, [pc, #28]	; (8003290 <HAL_RCC_GetClockConfig+0x60>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0207 	and.w	r2, r3, #7
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	601a      	str	r2, [r3, #0]
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40021000 	.word	0x40021000
 8003290:	40022000 	.word	0x40022000

08003294 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800329c:	2300      	movs	r3, #0
 800329e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032a0:	4b2a      	ldr	r3, [pc, #168]	; (800334c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032ac:	f7ff f9bc 	bl	8002628 <HAL_PWREx_GetVoltageRange>
 80032b0:	6178      	str	r0, [r7, #20]
 80032b2:	e014      	b.n	80032de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032b4:	4b25      	ldr	r3, [pc, #148]	; (800334c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b8:	4a24      	ldr	r2, [pc, #144]	; (800334c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032be:	6593      	str	r3, [r2, #88]	; 0x58
 80032c0:	4b22      	ldr	r3, [pc, #136]	; (800334c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032cc:	f7ff f9ac 	bl	8002628 <HAL_PWREx_GetVoltageRange>
 80032d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032d2:	4b1e      	ldr	r3, [pc, #120]	; (800334c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d6:	4a1d      	ldr	r2, [pc, #116]	; (800334c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e4:	d10b      	bne.n	80032fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b80      	cmp	r3, #128	; 0x80
 80032ea:	d919      	bls.n	8003320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2ba0      	cmp	r3, #160	; 0xa0
 80032f0:	d902      	bls.n	80032f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032f2:	2302      	movs	r3, #2
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	e013      	b.n	8003320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032f8:	2301      	movs	r3, #1
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	e010      	b.n	8003320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b80      	cmp	r3, #128	; 0x80
 8003302:	d902      	bls.n	800330a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003304:	2303      	movs	r3, #3
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	e00a      	b.n	8003320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b80      	cmp	r3, #128	; 0x80
 800330e:	d102      	bne.n	8003316 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003310:	2302      	movs	r3, #2
 8003312:	613b      	str	r3, [r7, #16]
 8003314:	e004      	b.n	8003320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b70      	cmp	r3, #112	; 0x70
 800331a:	d101      	bne.n	8003320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800331c:	2301      	movs	r3, #1
 800331e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f023 0207 	bic.w	r2, r3, #7
 8003328:	4909      	ldr	r1, [pc, #36]	; (8003350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003330:	4b07      	ldr	r3, [pc, #28]	; (8003350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	429a      	cmp	r2, r3
 800333c:	d001      	beq.n	8003342 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40021000 	.word	0x40021000
 8003350:	40022000 	.word	0x40022000

08003354 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800335c:	2300      	movs	r3, #0
 800335e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003360:	2300      	movs	r3, #0
 8003362:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800336c:	2b00      	cmp	r3, #0
 800336e:	d041      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003374:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003378:	d02a      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800337a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800337e:	d824      	bhi.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003380:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003384:	d008      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003386:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800338a:	d81e      	bhi.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00a      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003390:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003394:	d010      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003396:	e018      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003398:	4b86      	ldr	r3, [pc, #536]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	4a85      	ldr	r2, [pc, #532]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033a4:	e015      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3304      	adds	r3, #4
 80033aa:	2100      	movs	r1, #0
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 fabb 	bl	8003928 <RCCEx_PLLSAI1_Config>
 80033b2:	4603      	mov	r3, r0
 80033b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033b6:	e00c      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3320      	adds	r3, #32
 80033bc:	2100      	movs	r1, #0
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fba6 	bl	8003b10 <RCCEx_PLLSAI2_Config>
 80033c4:	4603      	mov	r3, r0
 80033c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033c8:	e003      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	74fb      	strb	r3, [r7, #19]
      break;
 80033ce:	e000      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80033d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033d2:	7cfb      	ldrb	r3, [r7, #19]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10b      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033d8:	4b76      	ldr	r3, [pc, #472]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033e6:	4973      	ldr	r1, [pc, #460]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033ee:	e001      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f0:	7cfb      	ldrb	r3, [r7, #19]
 80033f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d041      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003404:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003408:	d02a      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800340a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800340e:	d824      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003410:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003414:	d008      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003416:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800341a:	d81e      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003424:	d010      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003426:	e018      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003428:	4b62      	ldr	r3, [pc, #392]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	4a61      	ldr	r2, [pc, #388]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003432:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003434:	e015      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3304      	adds	r3, #4
 800343a:	2100      	movs	r1, #0
 800343c:	4618      	mov	r0, r3
 800343e:	f000 fa73 	bl	8003928 <RCCEx_PLLSAI1_Config>
 8003442:	4603      	mov	r3, r0
 8003444:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003446:	e00c      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3320      	adds	r3, #32
 800344c:	2100      	movs	r1, #0
 800344e:	4618      	mov	r0, r3
 8003450:	f000 fb5e 	bl	8003b10 <RCCEx_PLLSAI2_Config>
 8003454:	4603      	mov	r3, r0
 8003456:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003458:	e003      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	74fb      	strb	r3, [r7, #19]
      break;
 800345e:	e000      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003460:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003462:	7cfb      	ldrb	r3, [r7, #19]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10b      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003468:	4b52      	ldr	r3, [pc, #328]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800346a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003476:	494f      	ldr	r1, [pc, #316]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800347e:	e001      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003480:	7cfb      	ldrb	r3, [r7, #19]
 8003482:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 80a0 	beq.w	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003492:	2300      	movs	r3, #0
 8003494:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003496:	4b47      	ldr	r3, [pc, #284]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80034a6:	2300      	movs	r3, #0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00d      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ac:	4b41      	ldr	r3, [pc, #260]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b0:	4a40      	ldr	r2, [pc, #256]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b6:	6593      	str	r3, [r2, #88]	; 0x58
 80034b8:	4b3e      	ldr	r3, [pc, #248]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c0:	60bb      	str	r3, [r7, #8]
 80034c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c4:	2301      	movs	r3, #1
 80034c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034c8:	4b3b      	ldr	r3, [pc, #236]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a3a      	ldr	r2, [pc, #232]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034d4:	f7fd fbd2 	bl	8000c7c <HAL_GetTick>
 80034d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034da:	e009      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034dc:	f7fd fbce 	bl	8000c7c <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d902      	bls.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	74fb      	strb	r3, [r7, #19]
        break;
 80034ee:	e005      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034f0:	4b31      	ldr	r3, [pc, #196]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0ef      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80034fc:	7cfb      	ldrb	r3, [r7, #19]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d15c      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003502:	4b2c      	ldr	r3, [pc, #176]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d01f      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	429a      	cmp	r2, r3
 800351e:	d019      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003520:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800352a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800352c:	4b21      	ldr	r3, [pc, #132]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800352e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003532:	4a20      	ldr	r2, [pc, #128]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800353c:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003542:	4a1c      	ldr	r2, [pc, #112]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800354c:	4a19      	ldr	r2, [pc, #100]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d016      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355e:	f7fd fb8d 	bl	8000c7c <HAL_GetTick>
 8003562:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003564:	e00b      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003566:	f7fd fb89 	bl	8000c7c <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	f241 3288 	movw	r2, #5000	; 0x1388
 8003574:	4293      	cmp	r3, r2
 8003576:	d902      	bls.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	74fb      	strb	r3, [r7, #19]
            break;
 800357c:	e006      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800357e:	4b0d      	ldr	r3, [pc, #52]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0ec      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800358c:	7cfb      	ldrb	r3, [r7, #19]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10c      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003592:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003598:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035a2:	4904      	ldr	r1, [pc, #16]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80035aa:	e009      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035ac:	7cfb      	ldrb	r3, [r7, #19]
 80035ae:	74bb      	strb	r3, [r7, #18]
 80035b0:	e006      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80035b2:	bf00      	nop
 80035b4:	40021000 	.word	0x40021000
 80035b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035bc:	7cfb      	ldrb	r3, [r7, #19]
 80035be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035c0:	7c7b      	ldrb	r3, [r7, #17]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d105      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c6:	4b9e      	ldr	r3, [pc, #632]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ca:	4a9d      	ldr	r2, [pc, #628]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035de:	4b98      	ldr	r3, [pc, #608]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e4:	f023 0203 	bic.w	r2, r3, #3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ec:	4994      	ldr	r1, [pc, #592]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003600:	4b8f      	ldr	r3, [pc, #572]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003606:	f023 020c 	bic.w	r2, r3, #12
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360e:	498c      	ldr	r1, [pc, #560]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003622:	4b87      	ldr	r3, [pc, #540]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003628:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	4983      	ldr	r1, [pc, #524]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003644:	4b7e      	ldr	r3, [pc, #504]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003652:	497b      	ldr	r1, [pc, #492]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0310 	and.w	r3, r3, #16
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003666:	4b76      	ldr	r3, [pc, #472]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003674:	4972      	ldr	r1, [pc, #456]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0320 	and.w	r3, r3, #32
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003688:	4b6d      	ldr	r3, [pc, #436]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003696:	496a      	ldr	r1, [pc, #424]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036aa:	4b65      	ldr	r3, [pc, #404]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b8:	4961      	ldr	r1, [pc, #388]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036cc:	4b5c      	ldr	r3, [pc, #368]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036da:	4959      	ldr	r1, [pc, #356]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036ee:	4b54      	ldr	r3, [pc, #336]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036fc:	4950      	ldr	r1, [pc, #320]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00a      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003710:	4b4b      	ldr	r3, [pc, #300]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003716:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371e:	4948      	ldr	r1, [pc, #288]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003732:	4b43      	ldr	r3, [pc, #268]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003738:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003740:	493f      	ldr	r1, [pc, #252]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d028      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003754:	4b3a      	ldr	r3, [pc, #232]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003762:	4937      	ldr	r1, [pc, #220]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800376e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003772:	d106      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003774:	4b32      	ldr	r3, [pc, #200]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	4a31      	ldr	r2, [pc, #196]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800377e:	60d3      	str	r3, [r2, #12]
 8003780:	e011      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003786:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800378a:	d10c      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3304      	adds	r3, #4
 8003790:	2101      	movs	r1, #1
 8003792:	4618      	mov	r0, r3
 8003794:	f000 f8c8 	bl	8003928 <RCCEx_PLLSAI1_Config>
 8003798:	4603      	mov	r3, r0
 800379a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800379c:	7cfb      	ldrb	r3, [r7, #19]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80037a2:	7cfb      	ldrb	r3, [r7, #19]
 80037a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d028      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037b2:	4b23      	ldr	r3, [pc, #140]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c0:	491f      	ldr	r1, [pc, #124]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037d0:	d106      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037d2:	4b1b      	ldr	r3, [pc, #108]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	4a1a      	ldr	r2, [pc, #104]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037dc:	60d3      	str	r3, [r2, #12]
 80037de:	e011      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037e8:	d10c      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3304      	adds	r3, #4
 80037ee:	2101      	movs	r1, #1
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 f899 	bl	8003928 <RCCEx_PLLSAI1_Config>
 80037f6:	4603      	mov	r3, r0
 80037f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037fa:	7cfb      	ldrb	r3, [r7, #19]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003800:	7cfb      	ldrb	r3, [r7, #19]
 8003802:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d02b      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003816:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800381e:	4908      	ldr	r1, [pc, #32]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800382a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800382e:	d109      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003830:	4b03      	ldr	r3, [pc, #12]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	4a02      	ldr	r2, [pc, #8]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800383a:	60d3      	str	r3, [r2, #12]
 800383c:	e014      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800383e:	bf00      	nop
 8003840:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003848:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800384c:	d10c      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3304      	adds	r3, #4
 8003852:	2101      	movs	r1, #1
 8003854:	4618      	mov	r0, r3
 8003856:	f000 f867 	bl	8003928 <RCCEx_PLLSAI1_Config>
 800385a:	4603      	mov	r3, r0
 800385c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800385e:	7cfb      	ldrb	r3, [r7, #19]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003864:	7cfb      	ldrb	r3, [r7, #19]
 8003866:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d02f      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003874:	4b2b      	ldr	r3, [pc, #172]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003882:	4928      	ldr	r1, [pc, #160]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800388e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003892:	d10d      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3304      	adds	r3, #4
 8003898:	2102      	movs	r1, #2
 800389a:	4618      	mov	r0, r3
 800389c:	f000 f844 	bl	8003928 <RCCEx_PLLSAI1_Config>
 80038a0:	4603      	mov	r3, r0
 80038a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038a4:	7cfb      	ldrb	r3, [r7, #19]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d014      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038aa:	7cfb      	ldrb	r3, [r7, #19]
 80038ac:	74bb      	strb	r3, [r7, #18]
 80038ae:	e011      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038b8:	d10c      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3320      	adds	r3, #32
 80038be:	2102      	movs	r1, #2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 f925 	bl	8003b10 <RCCEx_PLLSAI2_Config>
 80038c6:	4603      	mov	r3, r0
 80038c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038ca:	7cfb      	ldrb	r3, [r7, #19]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038d0:	7cfb      	ldrb	r3, [r7, #19]
 80038d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00a      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038e0:	4b10      	ldr	r3, [pc, #64]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ee:	490d      	ldr	r1, [pc, #52]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00b      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003902:	4b08      	ldr	r3, [pc, #32]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003908:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003912:	4904      	ldr	r1, [pc, #16]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003914:	4313      	orrs	r3, r2
 8003916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800391a:	7cbb      	ldrb	r3, [r7, #18]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40021000 	.word	0x40021000

08003928 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003936:	4b75      	ldr	r3, [pc, #468]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d018      	beq.n	8003974 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003942:	4b72      	ldr	r3, [pc, #456]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f003 0203 	and.w	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d10d      	bne.n	800396e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
       ||
 8003956:	2b00      	cmp	r3, #0
 8003958:	d009      	beq.n	800396e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800395a:	4b6c      	ldr	r3, [pc, #432]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	091b      	lsrs	r3, r3, #4
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
       ||
 800396a:	429a      	cmp	r2, r3
 800396c:	d047      	beq.n	80039fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	73fb      	strb	r3, [r7, #15]
 8003972:	e044      	b.n	80039fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b03      	cmp	r3, #3
 800397a:	d018      	beq.n	80039ae <RCCEx_PLLSAI1_Config+0x86>
 800397c:	2b03      	cmp	r3, #3
 800397e:	d825      	bhi.n	80039cc <RCCEx_PLLSAI1_Config+0xa4>
 8003980:	2b01      	cmp	r3, #1
 8003982:	d002      	beq.n	800398a <RCCEx_PLLSAI1_Config+0x62>
 8003984:	2b02      	cmp	r3, #2
 8003986:	d009      	beq.n	800399c <RCCEx_PLLSAI1_Config+0x74>
 8003988:	e020      	b.n	80039cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800398a:	4b60      	ldr	r3, [pc, #384]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d11d      	bne.n	80039d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800399a:	e01a      	b.n	80039d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800399c:	4b5b      	ldr	r3, [pc, #364]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d116      	bne.n	80039d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ac:	e013      	b.n	80039d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039ae:	4b57      	ldr	r3, [pc, #348]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10f      	bne.n	80039da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039ba:	4b54      	ldr	r3, [pc, #336]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d109      	bne.n	80039da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039ca:	e006      	b.n	80039da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	73fb      	strb	r3, [r7, #15]
      break;
 80039d0:	e004      	b.n	80039dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039d2:	bf00      	nop
 80039d4:	e002      	b.n	80039dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039d6:	bf00      	nop
 80039d8:	e000      	b.n	80039dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039da:	bf00      	nop
    }

    if(status == HAL_OK)
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10d      	bne.n	80039fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039e2:	4b4a      	ldr	r3, [pc, #296]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6819      	ldr	r1, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	430b      	orrs	r3, r1
 80039f8:	4944      	ldr	r1, [pc, #272]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d17d      	bne.n	8003b00 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a04:	4b41      	ldr	r3, [pc, #260]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a40      	ldr	r2, [pc, #256]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a10:	f7fd f934 	bl	8000c7c <HAL_GetTick>
 8003a14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a16:	e009      	b.n	8003a2c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a18:	f7fd f930 	bl	8000c7c <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d902      	bls.n	8003a2c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	73fb      	strb	r3, [r7, #15]
        break;
 8003a2a:	e005      	b.n	8003a38 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a2c:	4b37      	ldr	r3, [pc, #220]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1ef      	bne.n	8003a18 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d160      	bne.n	8003b00 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d111      	bne.n	8003a68 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a44:	4b31      	ldr	r3, [pc, #196]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6892      	ldr	r2, [r2, #8]
 8003a54:	0211      	lsls	r1, r2, #8
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	68d2      	ldr	r2, [r2, #12]
 8003a5a:	0912      	lsrs	r2, r2, #4
 8003a5c:	0452      	lsls	r2, r2, #17
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	492a      	ldr	r1, [pc, #168]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	610b      	str	r3, [r1, #16]
 8003a66:	e027      	b.n	8003ab8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d112      	bne.n	8003a94 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a6e:	4b27      	ldr	r3, [pc, #156]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a76:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6892      	ldr	r2, [r2, #8]
 8003a7e:	0211      	lsls	r1, r2, #8
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6912      	ldr	r2, [r2, #16]
 8003a84:	0852      	lsrs	r2, r2, #1
 8003a86:	3a01      	subs	r2, #1
 8003a88:	0552      	lsls	r2, r2, #21
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	491f      	ldr	r1, [pc, #124]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	610b      	str	r3, [r1, #16]
 8003a92:	e011      	b.n	8003ab8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a94:	4b1d      	ldr	r3, [pc, #116]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6892      	ldr	r2, [r2, #8]
 8003aa4:	0211      	lsls	r1, r2, #8
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6952      	ldr	r2, [r2, #20]
 8003aaa:	0852      	lsrs	r2, r2, #1
 8003aac:	3a01      	subs	r2, #1
 8003aae:	0652      	lsls	r2, r2, #25
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	4916      	ldr	r1, [pc, #88]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ab8:	4b14      	ldr	r3, [pc, #80]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a13      	ldr	r2, [pc, #76]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003abe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ac2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac4:	f7fd f8da 	bl	8000c7c <HAL_GetTick>
 8003ac8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003aca:	e009      	b.n	8003ae0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003acc:	f7fd f8d6 	bl	8000c7c <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d902      	bls.n	8003ae0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	73fb      	strb	r3, [r7, #15]
          break;
 8003ade:	e005      	b.n	8003aec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ae0:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0ef      	beq.n	8003acc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003af2:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af4:	691a      	ldr	r2, [r3, #16]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	4904      	ldr	r1, [pc, #16]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40021000 	.word	0x40021000

08003b10 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b1e:	4b6a      	ldr	r3, [pc, #424]	; (8003cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d018      	beq.n	8003b5c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b2a:	4b67      	ldr	r3, [pc, #412]	; (8003cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f003 0203 	and.w	r2, r3, #3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d10d      	bne.n	8003b56 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
       ||
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d009      	beq.n	8003b56 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b42:	4b61      	ldr	r3, [pc, #388]	; (8003cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	091b      	lsrs	r3, r3, #4
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
       ||
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d047      	beq.n	8003be6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	73fb      	strb	r3, [r7, #15]
 8003b5a:	e044      	b.n	8003be6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d018      	beq.n	8003b96 <RCCEx_PLLSAI2_Config+0x86>
 8003b64:	2b03      	cmp	r3, #3
 8003b66:	d825      	bhi.n	8003bb4 <RCCEx_PLLSAI2_Config+0xa4>
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d002      	beq.n	8003b72 <RCCEx_PLLSAI2_Config+0x62>
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d009      	beq.n	8003b84 <RCCEx_PLLSAI2_Config+0x74>
 8003b70:	e020      	b.n	8003bb4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b72:	4b55      	ldr	r3, [pc, #340]	; (8003cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d11d      	bne.n	8003bba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b82:	e01a      	b.n	8003bba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b84:	4b50      	ldr	r3, [pc, #320]	; (8003cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d116      	bne.n	8003bbe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b94:	e013      	b.n	8003bbe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b96:	4b4c      	ldr	r3, [pc, #304]	; (8003cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10f      	bne.n	8003bc2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ba2:	4b49      	ldr	r3, [pc, #292]	; (8003cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d109      	bne.n	8003bc2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bb2:	e006      	b.n	8003bc2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb8:	e004      	b.n	8003bc4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bba:	bf00      	nop
 8003bbc:	e002      	b.n	8003bc4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bbe:	bf00      	nop
 8003bc0:	e000      	b.n	8003bc4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bc2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10d      	bne.n	8003be6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bca:	4b3f      	ldr	r3, [pc, #252]	; (8003cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6819      	ldr	r1, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	430b      	orrs	r3, r1
 8003be0:	4939      	ldr	r1, [pc, #228]	; (8003cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d167      	bne.n	8003cbc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003bec:	4b36      	ldr	r3, [pc, #216]	; (8003cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a35      	ldr	r2, [pc, #212]	; (8003cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf8:	f7fd f840 	bl	8000c7c <HAL_GetTick>
 8003bfc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bfe:	e009      	b.n	8003c14 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c00:	f7fd f83c 	bl	8000c7c <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d902      	bls.n	8003c14 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	73fb      	strb	r3, [r7, #15]
        break;
 8003c12:	e005      	b.n	8003c20 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c14:	4b2c      	ldr	r3, [pc, #176]	; (8003cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1ef      	bne.n	8003c00 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d14a      	bne.n	8003cbc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d111      	bne.n	8003c50 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c2c:	4b26      	ldr	r3, [pc, #152]	; (8003cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6892      	ldr	r2, [r2, #8]
 8003c3c:	0211      	lsls	r1, r2, #8
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	68d2      	ldr	r2, [r2, #12]
 8003c42:	0912      	lsrs	r2, r2, #4
 8003c44:	0452      	lsls	r2, r2, #17
 8003c46:	430a      	orrs	r2, r1
 8003c48:	491f      	ldr	r1, [pc, #124]	; (8003cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	614b      	str	r3, [r1, #20]
 8003c4e:	e011      	b.n	8003c74 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c50:	4b1d      	ldr	r3, [pc, #116]	; (8003cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6892      	ldr	r2, [r2, #8]
 8003c60:	0211      	lsls	r1, r2, #8
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6912      	ldr	r2, [r2, #16]
 8003c66:	0852      	lsrs	r2, r2, #1
 8003c68:	3a01      	subs	r2, #1
 8003c6a:	0652      	lsls	r2, r2, #25
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	4916      	ldr	r1, [pc, #88]	; (8003cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c74:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a13      	ldr	r2, [pc, #76]	; (8003cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c80:	f7fc fffc 	bl	8000c7c <HAL_GetTick>
 8003c84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c86:	e009      	b.n	8003c9c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c88:	f7fc fff8 	bl	8000c7c <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d902      	bls.n	8003c9c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	73fb      	strb	r3, [r7, #15]
          break;
 8003c9a:	e005      	b.n	8003ca8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c9c:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0ef      	beq.n	8003c88 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d106      	bne.n	8003cbc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003cae:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb0:	695a      	ldr	r2, [r3, #20]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	4904      	ldr	r1, [pc, #16]	; (8003cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40021000 	.word	0x40021000

08003ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e049      	b.n	8003d72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d106      	bne.n	8003cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f841 	bl	8003d7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3304      	adds	r3, #4
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	f000 f9f8 	bl	8004100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
	...

08003d90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d001      	beq.n	8003da8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e04f      	b.n	8003e48 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0201 	orr.w	r2, r2, #1
 8003dbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a23      	ldr	r2, [pc, #140]	; (8003e54 <HAL_TIM_Base_Start_IT+0xc4>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d01d      	beq.n	8003e06 <HAL_TIM_Base_Start_IT+0x76>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd2:	d018      	beq.n	8003e06 <HAL_TIM_Base_Start_IT+0x76>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a1f      	ldr	r2, [pc, #124]	; (8003e58 <HAL_TIM_Base_Start_IT+0xc8>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d013      	beq.n	8003e06 <HAL_TIM_Base_Start_IT+0x76>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a1e      	ldr	r2, [pc, #120]	; (8003e5c <HAL_TIM_Base_Start_IT+0xcc>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d00e      	beq.n	8003e06 <HAL_TIM_Base_Start_IT+0x76>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a1c      	ldr	r2, [pc, #112]	; (8003e60 <HAL_TIM_Base_Start_IT+0xd0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d009      	beq.n	8003e06 <HAL_TIM_Base_Start_IT+0x76>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a1b      	ldr	r2, [pc, #108]	; (8003e64 <HAL_TIM_Base_Start_IT+0xd4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d004      	beq.n	8003e06 <HAL_TIM_Base_Start_IT+0x76>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a19      	ldr	r2, [pc, #100]	; (8003e68 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d115      	bne.n	8003e32 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	4b17      	ldr	r3, [pc, #92]	; (8003e6c <HAL_TIM_Base_Start_IT+0xdc>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2b06      	cmp	r3, #6
 8003e16:	d015      	beq.n	8003e44 <HAL_TIM_Base_Start_IT+0xb4>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1e:	d011      	beq.n	8003e44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e30:	e008      	b.n	8003e44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f042 0201 	orr.w	r2, r2, #1
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	e000      	b.n	8003e46 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	40012c00 	.word	0x40012c00
 8003e58:	40000400 	.word	0x40000400
 8003e5c:	40000800 	.word	0x40000800
 8003e60:	40000c00 	.word	0x40000c00
 8003e64:	40013400 	.word	0x40013400
 8003e68:	40014000 	.word	0x40014000
 8003e6c:	00010007 	.word	0x00010007

08003e70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d122      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d11b      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f06f 0202 	mvn.w	r2, #2
 8003e9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f905 	bl	80040c2 <HAL_TIM_IC_CaptureCallback>
 8003eb8:	e005      	b.n	8003ec6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f8f7 	bl	80040ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f908 	bl	80040d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d122      	bne.n	8003f20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d11b      	bne.n	8003f20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0204 	mvn.w	r2, #4
 8003ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f8db 	bl	80040c2 <HAL_TIM_IC_CaptureCallback>
 8003f0c:	e005      	b.n	8003f1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f8cd 	bl	80040ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f8de 	bl	80040d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d122      	bne.n	8003f74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d11b      	bne.n	8003f74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0208 	mvn.w	r2, #8
 8003f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2204      	movs	r2, #4
 8003f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f8b1 	bl	80040c2 <HAL_TIM_IC_CaptureCallback>
 8003f60:	e005      	b.n	8003f6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f8a3 	bl	80040ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f8b4 	bl	80040d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f003 0310 	and.w	r3, r3, #16
 8003f7e:	2b10      	cmp	r3, #16
 8003f80:	d122      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	2b10      	cmp	r3, #16
 8003f8e:	d11b      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f06f 0210 	mvn.w	r2, #16
 8003f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2208      	movs	r2, #8
 8003f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f887 	bl	80040c2 <HAL_TIM_IC_CaptureCallback>
 8003fb4:	e005      	b.n	8003fc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f879 	bl	80040ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f88a 	bl	80040d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d10e      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d107      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f06f 0201 	mvn.w	r2, #1
 8003fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fc fc40 	bl	8000874 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffe:	2b80      	cmp	r3, #128	; 0x80
 8004000:	d10e      	bne.n	8004020 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400c:	2b80      	cmp	r3, #128	; 0x80
 800400e:	d107      	bne.n	8004020 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f914 	bl	8004248 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800402e:	d10e      	bne.n	800404e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403a:	2b80      	cmp	r3, #128	; 0x80
 800403c:	d107      	bne.n	800404e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f907 	bl	800425c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004058:	2b40      	cmp	r3, #64	; 0x40
 800405a:	d10e      	bne.n	800407a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004066:	2b40      	cmp	r3, #64	; 0x40
 8004068:	d107      	bne.n	800407a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f838 	bl	80040ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	f003 0320 	and.w	r3, r3, #32
 8004084:	2b20      	cmp	r3, #32
 8004086:	d10e      	bne.n	80040a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f003 0320 	and.w	r3, r3, #32
 8004092:	2b20      	cmp	r3, #32
 8004094:	d107      	bne.n	80040a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f06f 0220 	mvn.w	r2, #32
 800409e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f8c7 	bl	8004234 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
	...

08004100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a40      	ldr	r2, [pc, #256]	; (8004214 <TIM_Base_SetConfig+0x114>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d013      	beq.n	8004140 <TIM_Base_SetConfig+0x40>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411e:	d00f      	beq.n	8004140 <TIM_Base_SetConfig+0x40>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a3d      	ldr	r2, [pc, #244]	; (8004218 <TIM_Base_SetConfig+0x118>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00b      	beq.n	8004140 <TIM_Base_SetConfig+0x40>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a3c      	ldr	r2, [pc, #240]	; (800421c <TIM_Base_SetConfig+0x11c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d007      	beq.n	8004140 <TIM_Base_SetConfig+0x40>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a3b      	ldr	r2, [pc, #236]	; (8004220 <TIM_Base_SetConfig+0x120>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d003      	beq.n	8004140 <TIM_Base_SetConfig+0x40>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a3a      	ldr	r2, [pc, #232]	; (8004224 <TIM_Base_SetConfig+0x124>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d108      	bne.n	8004152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a2f      	ldr	r2, [pc, #188]	; (8004214 <TIM_Base_SetConfig+0x114>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d01f      	beq.n	800419a <TIM_Base_SetConfig+0x9a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004160:	d01b      	beq.n	800419a <TIM_Base_SetConfig+0x9a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a2c      	ldr	r2, [pc, #176]	; (8004218 <TIM_Base_SetConfig+0x118>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d017      	beq.n	800419a <TIM_Base_SetConfig+0x9a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a2b      	ldr	r2, [pc, #172]	; (800421c <TIM_Base_SetConfig+0x11c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d013      	beq.n	800419a <TIM_Base_SetConfig+0x9a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a2a      	ldr	r2, [pc, #168]	; (8004220 <TIM_Base_SetConfig+0x120>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00f      	beq.n	800419a <TIM_Base_SetConfig+0x9a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a29      	ldr	r2, [pc, #164]	; (8004224 <TIM_Base_SetConfig+0x124>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d00b      	beq.n	800419a <TIM_Base_SetConfig+0x9a>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a28      	ldr	r2, [pc, #160]	; (8004228 <TIM_Base_SetConfig+0x128>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d007      	beq.n	800419a <TIM_Base_SetConfig+0x9a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a27      	ldr	r2, [pc, #156]	; (800422c <TIM_Base_SetConfig+0x12c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d003      	beq.n	800419a <TIM_Base_SetConfig+0x9a>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a26      	ldr	r2, [pc, #152]	; (8004230 <TIM_Base_SetConfig+0x130>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d108      	bne.n	80041ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a10      	ldr	r2, [pc, #64]	; (8004214 <TIM_Base_SetConfig+0x114>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d00f      	beq.n	80041f8 <TIM_Base_SetConfig+0xf8>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a12      	ldr	r2, [pc, #72]	; (8004224 <TIM_Base_SetConfig+0x124>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00b      	beq.n	80041f8 <TIM_Base_SetConfig+0xf8>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a11      	ldr	r2, [pc, #68]	; (8004228 <TIM_Base_SetConfig+0x128>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d007      	beq.n	80041f8 <TIM_Base_SetConfig+0xf8>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a10      	ldr	r2, [pc, #64]	; (800422c <TIM_Base_SetConfig+0x12c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d003      	beq.n	80041f8 <TIM_Base_SetConfig+0xf8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a0f      	ldr	r2, [pc, #60]	; (8004230 <TIM_Base_SetConfig+0x130>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d103      	bne.n	8004200 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	615a      	str	r2, [r3, #20]
}
 8004206:	bf00      	nop
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	40012c00 	.word	0x40012c00
 8004218:	40000400 	.word	0x40000400
 800421c:	40000800 	.word	0x40000800
 8004220:	40000c00 	.word	0x40000c00
 8004224:	40013400 	.word	0x40013400
 8004228:	40014000 	.word	0x40014000
 800422c:	40014400 	.word	0x40014400
 8004230:	40014800 	.word	0x40014800

08004234 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e040      	b.n	8004304 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7fc fb98 	bl	80009c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2224      	movs	r2, #36	; 0x24
 800429c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0201 	bic.w	r2, r2, #1
 80042ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f82c 	bl	800430c <UART_SetConfig>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d101      	bne.n	80042be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e022      	b.n	8004304 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fad8 	bl	800487c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0201 	orr.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 fb5f 	bl	80049c0 <UART_CheckIdleState>
 8004302:	4603      	mov	r3, r0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800430c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004310:	b08a      	sub	sp, #40	; 0x28
 8004312:	af00      	add	r7, sp, #0
 8004314:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	431a      	orrs	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	431a      	orrs	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	4313      	orrs	r3, r2
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4ba4      	ldr	r3, [pc, #656]	; (80045cc <UART_SetConfig+0x2c0>)
 800433c:	4013      	ands	r3, r2
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	6812      	ldr	r2, [r2, #0]
 8004342:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004344:	430b      	orrs	r3, r1
 8004346:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a99      	ldr	r2, [pc, #612]	; (80045d0 <UART_SetConfig+0x2c4>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d004      	beq.n	8004378 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004374:	4313      	orrs	r3, r2
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004388:	430a      	orrs	r2, r1
 800438a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a90      	ldr	r2, [pc, #576]	; (80045d4 <UART_SetConfig+0x2c8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d126      	bne.n	80043e4 <UART_SetConfig+0xd8>
 8004396:	4b90      	ldr	r3, [pc, #576]	; (80045d8 <UART_SetConfig+0x2cc>)
 8004398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439c:	f003 0303 	and.w	r3, r3, #3
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d81b      	bhi.n	80043dc <UART_SetConfig+0xd0>
 80043a4:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <UART_SetConfig+0xa0>)
 80043a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043aa:	bf00      	nop
 80043ac:	080043bd 	.word	0x080043bd
 80043b0:	080043cd 	.word	0x080043cd
 80043b4:	080043c5 	.word	0x080043c5
 80043b8:	080043d5 	.word	0x080043d5
 80043bc:	2301      	movs	r3, #1
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c2:	e116      	b.n	80045f2 <UART_SetConfig+0x2e6>
 80043c4:	2302      	movs	r3, #2
 80043c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ca:	e112      	b.n	80045f2 <UART_SetConfig+0x2e6>
 80043cc:	2304      	movs	r3, #4
 80043ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043d2:	e10e      	b.n	80045f2 <UART_SetConfig+0x2e6>
 80043d4:	2308      	movs	r3, #8
 80043d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043da:	e10a      	b.n	80045f2 <UART_SetConfig+0x2e6>
 80043dc:	2310      	movs	r3, #16
 80043de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e2:	e106      	b.n	80045f2 <UART_SetConfig+0x2e6>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a7c      	ldr	r2, [pc, #496]	; (80045dc <UART_SetConfig+0x2d0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d138      	bne.n	8004460 <UART_SetConfig+0x154>
 80043ee:	4b7a      	ldr	r3, [pc, #488]	; (80045d8 <UART_SetConfig+0x2cc>)
 80043f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f4:	f003 030c 	and.w	r3, r3, #12
 80043f8:	2b0c      	cmp	r3, #12
 80043fa:	d82d      	bhi.n	8004458 <UART_SetConfig+0x14c>
 80043fc:	a201      	add	r2, pc, #4	; (adr r2, 8004404 <UART_SetConfig+0xf8>)
 80043fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004402:	bf00      	nop
 8004404:	08004439 	.word	0x08004439
 8004408:	08004459 	.word	0x08004459
 800440c:	08004459 	.word	0x08004459
 8004410:	08004459 	.word	0x08004459
 8004414:	08004449 	.word	0x08004449
 8004418:	08004459 	.word	0x08004459
 800441c:	08004459 	.word	0x08004459
 8004420:	08004459 	.word	0x08004459
 8004424:	08004441 	.word	0x08004441
 8004428:	08004459 	.word	0x08004459
 800442c:	08004459 	.word	0x08004459
 8004430:	08004459 	.word	0x08004459
 8004434:	08004451 	.word	0x08004451
 8004438:	2300      	movs	r3, #0
 800443a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800443e:	e0d8      	b.n	80045f2 <UART_SetConfig+0x2e6>
 8004440:	2302      	movs	r3, #2
 8004442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004446:	e0d4      	b.n	80045f2 <UART_SetConfig+0x2e6>
 8004448:	2304      	movs	r3, #4
 800444a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800444e:	e0d0      	b.n	80045f2 <UART_SetConfig+0x2e6>
 8004450:	2308      	movs	r3, #8
 8004452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004456:	e0cc      	b.n	80045f2 <UART_SetConfig+0x2e6>
 8004458:	2310      	movs	r3, #16
 800445a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800445e:	e0c8      	b.n	80045f2 <UART_SetConfig+0x2e6>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a5e      	ldr	r2, [pc, #376]	; (80045e0 <UART_SetConfig+0x2d4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d125      	bne.n	80044b6 <UART_SetConfig+0x1aa>
 800446a:	4b5b      	ldr	r3, [pc, #364]	; (80045d8 <UART_SetConfig+0x2cc>)
 800446c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004470:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004474:	2b30      	cmp	r3, #48	; 0x30
 8004476:	d016      	beq.n	80044a6 <UART_SetConfig+0x19a>
 8004478:	2b30      	cmp	r3, #48	; 0x30
 800447a:	d818      	bhi.n	80044ae <UART_SetConfig+0x1a2>
 800447c:	2b20      	cmp	r3, #32
 800447e:	d00a      	beq.n	8004496 <UART_SetConfig+0x18a>
 8004480:	2b20      	cmp	r3, #32
 8004482:	d814      	bhi.n	80044ae <UART_SetConfig+0x1a2>
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <UART_SetConfig+0x182>
 8004488:	2b10      	cmp	r3, #16
 800448a:	d008      	beq.n	800449e <UART_SetConfig+0x192>
 800448c:	e00f      	b.n	80044ae <UART_SetConfig+0x1a2>
 800448e:	2300      	movs	r3, #0
 8004490:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004494:	e0ad      	b.n	80045f2 <UART_SetConfig+0x2e6>
 8004496:	2302      	movs	r3, #2
 8004498:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800449c:	e0a9      	b.n	80045f2 <UART_SetConfig+0x2e6>
 800449e:	2304      	movs	r3, #4
 80044a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044a4:	e0a5      	b.n	80045f2 <UART_SetConfig+0x2e6>
 80044a6:	2308      	movs	r3, #8
 80044a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ac:	e0a1      	b.n	80045f2 <UART_SetConfig+0x2e6>
 80044ae:	2310      	movs	r3, #16
 80044b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044b4:	e09d      	b.n	80045f2 <UART_SetConfig+0x2e6>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a4a      	ldr	r2, [pc, #296]	; (80045e4 <UART_SetConfig+0x2d8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d125      	bne.n	800450c <UART_SetConfig+0x200>
 80044c0:	4b45      	ldr	r3, [pc, #276]	; (80045d8 <UART_SetConfig+0x2cc>)
 80044c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044ca:	2bc0      	cmp	r3, #192	; 0xc0
 80044cc:	d016      	beq.n	80044fc <UART_SetConfig+0x1f0>
 80044ce:	2bc0      	cmp	r3, #192	; 0xc0
 80044d0:	d818      	bhi.n	8004504 <UART_SetConfig+0x1f8>
 80044d2:	2b80      	cmp	r3, #128	; 0x80
 80044d4:	d00a      	beq.n	80044ec <UART_SetConfig+0x1e0>
 80044d6:	2b80      	cmp	r3, #128	; 0x80
 80044d8:	d814      	bhi.n	8004504 <UART_SetConfig+0x1f8>
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <UART_SetConfig+0x1d8>
 80044de:	2b40      	cmp	r3, #64	; 0x40
 80044e0:	d008      	beq.n	80044f4 <UART_SetConfig+0x1e8>
 80044e2:	e00f      	b.n	8004504 <UART_SetConfig+0x1f8>
 80044e4:	2300      	movs	r3, #0
 80044e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ea:	e082      	b.n	80045f2 <UART_SetConfig+0x2e6>
 80044ec:	2302      	movs	r3, #2
 80044ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f2:	e07e      	b.n	80045f2 <UART_SetConfig+0x2e6>
 80044f4:	2304      	movs	r3, #4
 80044f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044fa:	e07a      	b.n	80045f2 <UART_SetConfig+0x2e6>
 80044fc:	2308      	movs	r3, #8
 80044fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004502:	e076      	b.n	80045f2 <UART_SetConfig+0x2e6>
 8004504:	2310      	movs	r3, #16
 8004506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800450a:	e072      	b.n	80045f2 <UART_SetConfig+0x2e6>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a35      	ldr	r2, [pc, #212]	; (80045e8 <UART_SetConfig+0x2dc>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d12a      	bne.n	800456c <UART_SetConfig+0x260>
 8004516:	4b30      	ldr	r3, [pc, #192]	; (80045d8 <UART_SetConfig+0x2cc>)
 8004518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004520:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004524:	d01a      	beq.n	800455c <UART_SetConfig+0x250>
 8004526:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800452a:	d81b      	bhi.n	8004564 <UART_SetConfig+0x258>
 800452c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004530:	d00c      	beq.n	800454c <UART_SetConfig+0x240>
 8004532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004536:	d815      	bhi.n	8004564 <UART_SetConfig+0x258>
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <UART_SetConfig+0x238>
 800453c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004540:	d008      	beq.n	8004554 <UART_SetConfig+0x248>
 8004542:	e00f      	b.n	8004564 <UART_SetConfig+0x258>
 8004544:	2300      	movs	r3, #0
 8004546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800454a:	e052      	b.n	80045f2 <UART_SetConfig+0x2e6>
 800454c:	2302      	movs	r3, #2
 800454e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004552:	e04e      	b.n	80045f2 <UART_SetConfig+0x2e6>
 8004554:	2304      	movs	r3, #4
 8004556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800455a:	e04a      	b.n	80045f2 <UART_SetConfig+0x2e6>
 800455c:	2308      	movs	r3, #8
 800455e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004562:	e046      	b.n	80045f2 <UART_SetConfig+0x2e6>
 8004564:	2310      	movs	r3, #16
 8004566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800456a:	e042      	b.n	80045f2 <UART_SetConfig+0x2e6>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a17      	ldr	r2, [pc, #92]	; (80045d0 <UART_SetConfig+0x2c4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d13a      	bne.n	80045ec <UART_SetConfig+0x2e0>
 8004576:	4b18      	ldr	r3, [pc, #96]	; (80045d8 <UART_SetConfig+0x2cc>)
 8004578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004580:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004584:	d01a      	beq.n	80045bc <UART_SetConfig+0x2b0>
 8004586:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800458a:	d81b      	bhi.n	80045c4 <UART_SetConfig+0x2b8>
 800458c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004590:	d00c      	beq.n	80045ac <UART_SetConfig+0x2a0>
 8004592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004596:	d815      	bhi.n	80045c4 <UART_SetConfig+0x2b8>
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <UART_SetConfig+0x298>
 800459c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a0:	d008      	beq.n	80045b4 <UART_SetConfig+0x2a8>
 80045a2:	e00f      	b.n	80045c4 <UART_SetConfig+0x2b8>
 80045a4:	2300      	movs	r3, #0
 80045a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045aa:	e022      	b.n	80045f2 <UART_SetConfig+0x2e6>
 80045ac:	2302      	movs	r3, #2
 80045ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045b2:	e01e      	b.n	80045f2 <UART_SetConfig+0x2e6>
 80045b4:	2304      	movs	r3, #4
 80045b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ba:	e01a      	b.n	80045f2 <UART_SetConfig+0x2e6>
 80045bc:	2308      	movs	r3, #8
 80045be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045c2:	e016      	b.n	80045f2 <UART_SetConfig+0x2e6>
 80045c4:	2310      	movs	r3, #16
 80045c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ca:	e012      	b.n	80045f2 <UART_SetConfig+0x2e6>
 80045cc:	efff69f3 	.word	0xefff69f3
 80045d0:	40008000 	.word	0x40008000
 80045d4:	40013800 	.word	0x40013800
 80045d8:	40021000 	.word	0x40021000
 80045dc:	40004400 	.word	0x40004400
 80045e0:	40004800 	.word	0x40004800
 80045e4:	40004c00 	.word	0x40004c00
 80045e8:	40005000 	.word	0x40005000
 80045ec:	2310      	movs	r3, #16
 80045ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a9f      	ldr	r2, [pc, #636]	; (8004874 <UART_SetConfig+0x568>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d17a      	bne.n	80046f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004600:	2b08      	cmp	r3, #8
 8004602:	d824      	bhi.n	800464e <UART_SetConfig+0x342>
 8004604:	a201      	add	r2, pc, #4	; (adr r2, 800460c <UART_SetConfig+0x300>)
 8004606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460a:	bf00      	nop
 800460c:	08004631 	.word	0x08004631
 8004610:	0800464f 	.word	0x0800464f
 8004614:	08004639 	.word	0x08004639
 8004618:	0800464f 	.word	0x0800464f
 800461c:	0800463f 	.word	0x0800463f
 8004620:	0800464f 	.word	0x0800464f
 8004624:	0800464f 	.word	0x0800464f
 8004628:	0800464f 	.word	0x0800464f
 800462c:	08004647 	.word	0x08004647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004630:	f7fe fdd2 	bl	80031d8 <HAL_RCC_GetPCLK1Freq>
 8004634:	61f8      	str	r0, [r7, #28]
        break;
 8004636:	e010      	b.n	800465a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004638:	4b8f      	ldr	r3, [pc, #572]	; (8004878 <UART_SetConfig+0x56c>)
 800463a:	61fb      	str	r3, [r7, #28]
        break;
 800463c:	e00d      	b.n	800465a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800463e:	f7fe fd33 	bl	80030a8 <HAL_RCC_GetSysClockFreq>
 8004642:	61f8      	str	r0, [r7, #28]
        break;
 8004644:	e009      	b.n	800465a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800464a:	61fb      	str	r3, [r7, #28]
        break;
 800464c:	e005      	b.n	800465a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004658:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 80fb 	beq.w	8004858 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	4413      	add	r3, r2
 800466c:	69fa      	ldr	r2, [r7, #28]
 800466e:	429a      	cmp	r2, r3
 8004670:	d305      	bcc.n	800467e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004678:	69fa      	ldr	r2, [r7, #28]
 800467a:	429a      	cmp	r2, r3
 800467c:	d903      	bls.n	8004686 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004684:	e0e8      	b.n	8004858 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	2200      	movs	r2, #0
 800468a:	461c      	mov	r4, r3
 800468c:	4615      	mov	r5, r2
 800468e:	f04f 0200 	mov.w	r2, #0
 8004692:	f04f 0300 	mov.w	r3, #0
 8004696:	022b      	lsls	r3, r5, #8
 8004698:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800469c:	0222      	lsls	r2, r4, #8
 800469e:	68f9      	ldr	r1, [r7, #12]
 80046a0:	6849      	ldr	r1, [r1, #4]
 80046a2:	0849      	lsrs	r1, r1, #1
 80046a4:	2000      	movs	r0, #0
 80046a6:	4688      	mov	r8, r1
 80046a8:	4681      	mov	r9, r0
 80046aa:	eb12 0a08 	adds.w	sl, r2, r8
 80046ae:	eb43 0b09 	adc.w	fp, r3, r9
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	603b      	str	r3, [r7, #0]
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046c0:	4650      	mov	r0, sl
 80046c2:	4659      	mov	r1, fp
 80046c4:	f7fb fd84 	bl	80001d0 <__aeabi_uldivmod>
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	4613      	mov	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046d6:	d308      	bcc.n	80046ea <UART_SetConfig+0x3de>
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046de:	d204      	bcs.n	80046ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	60da      	str	r2, [r3, #12]
 80046e8:	e0b6      	b.n	8004858 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046f0:	e0b2      	b.n	8004858 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046fa:	d15e      	bne.n	80047ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80046fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004700:	2b08      	cmp	r3, #8
 8004702:	d828      	bhi.n	8004756 <UART_SetConfig+0x44a>
 8004704:	a201      	add	r2, pc, #4	; (adr r2, 800470c <UART_SetConfig+0x400>)
 8004706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470a:	bf00      	nop
 800470c:	08004731 	.word	0x08004731
 8004710:	08004739 	.word	0x08004739
 8004714:	08004741 	.word	0x08004741
 8004718:	08004757 	.word	0x08004757
 800471c:	08004747 	.word	0x08004747
 8004720:	08004757 	.word	0x08004757
 8004724:	08004757 	.word	0x08004757
 8004728:	08004757 	.word	0x08004757
 800472c:	0800474f 	.word	0x0800474f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004730:	f7fe fd52 	bl	80031d8 <HAL_RCC_GetPCLK1Freq>
 8004734:	61f8      	str	r0, [r7, #28]
        break;
 8004736:	e014      	b.n	8004762 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004738:	f7fe fd64 	bl	8003204 <HAL_RCC_GetPCLK2Freq>
 800473c:	61f8      	str	r0, [r7, #28]
        break;
 800473e:	e010      	b.n	8004762 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004740:	4b4d      	ldr	r3, [pc, #308]	; (8004878 <UART_SetConfig+0x56c>)
 8004742:	61fb      	str	r3, [r7, #28]
        break;
 8004744:	e00d      	b.n	8004762 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004746:	f7fe fcaf 	bl	80030a8 <HAL_RCC_GetSysClockFreq>
 800474a:	61f8      	str	r0, [r7, #28]
        break;
 800474c:	e009      	b.n	8004762 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800474e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004752:	61fb      	str	r3, [r7, #28]
        break;
 8004754:	e005      	b.n	8004762 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004760:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d077      	beq.n	8004858 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	005a      	lsls	r2, r3, #1
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	085b      	lsrs	r3, r3, #1
 8004772:	441a      	add	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	fbb2 f3f3 	udiv	r3, r2, r3
 800477c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	2b0f      	cmp	r3, #15
 8004782:	d916      	bls.n	80047b2 <UART_SetConfig+0x4a6>
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800478a:	d212      	bcs.n	80047b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	b29b      	uxth	r3, r3
 8004790:	f023 030f 	bic.w	r3, r3, #15
 8004794:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	085b      	lsrs	r3, r3, #1
 800479a:	b29b      	uxth	r3, r3
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	8afb      	ldrh	r3, [r7, #22]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	8afa      	ldrh	r2, [r7, #22]
 80047ae:	60da      	str	r2, [r3, #12]
 80047b0:	e052      	b.n	8004858 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047b8:	e04e      	b.n	8004858 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d827      	bhi.n	8004812 <UART_SetConfig+0x506>
 80047c2:	a201      	add	r2, pc, #4	; (adr r2, 80047c8 <UART_SetConfig+0x4bc>)
 80047c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c8:	080047ed 	.word	0x080047ed
 80047cc:	080047f5 	.word	0x080047f5
 80047d0:	080047fd 	.word	0x080047fd
 80047d4:	08004813 	.word	0x08004813
 80047d8:	08004803 	.word	0x08004803
 80047dc:	08004813 	.word	0x08004813
 80047e0:	08004813 	.word	0x08004813
 80047e4:	08004813 	.word	0x08004813
 80047e8:	0800480b 	.word	0x0800480b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047ec:	f7fe fcf4 	bl	80031d8 <HAL_RCC_GetPCLK1Freq>
 80047f0:	61f8      	str	r0, [r7, #28]
        break;
 80047f2:	e014      	b.n	800481e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047f4:	f7fe fd06 	bl	8003204 <HAL_RCC_GetPCLK2Freq>
 80047f8:	61f8      	str	r0, [r7, #28]
        break;
 80047fa:	e010      	b.n	800481e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047fc:	4b1e      	ldr	r3, [pc, #120]	; (8004878 <UART_SetConfig+0x56c>)
 80047fe:	61fb      	str	r3, [r7, #28]
        break;
 8004800:	e00d      	b.n	800481e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004802:	f7fe fc51 	bl	80030a8 <HAL_RCC_GetSysClockFreq>
 8004806:	61f8      	str	r0, [r7, #28]
        break;
 8004808:	e009      	b.n	800481e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800480a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800480e:	61fb      	str	r3, [r7, #28]
        break;
 8004810:	e005      	b.n	800481e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800481c:	bf00      	nop
    }

    if (pclk != 0U)
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d019      	beq.n	8004858 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	085a      	lsrs	r2, r3, #1
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	441a      	add	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	fbb2 f3f3 	udiv	r3, r2, r3
 8004836:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	2b0f      	cmp	r3, #15
 800483c:	d909      	bls.n	8004852 <UART_SetConfig+0x546>
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004844:	d205      	bcs.n	8004852 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	b29a      	uxth	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	60da      	str	r2, [r3, #12]
 8004850:	e002      	b.n	8004858 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004864:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004868:	4618      	mov	r0, r3
 800486a:	3728      	adds	r7, #40	; 0x28
 800486c:	46bd      	mov	sp, r7
 800486e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004872:	bf00      	nop
 8004874:	40008000 	.word	0x40008000
 8004878:	00f42400 	.word	0x00f42400

0800487c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	f003 0310 	and.w	r3, r3, #16
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	f003 0320 	and.w	r3, r3, #32
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	430a      	orrs	r2, r1
 800494e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004958:	2b00      	cmp	r3, #0
 800495a:	d01a      	beq.n	8004992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800497a:	d10a      	bne.n	8004992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00a      	beq.n	80049b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	605a      	str	r2, [r3, #4]
  }
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af02      	add	r7, sp, #8
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049d0:	f7fc f954 	bl	8000c7c <HAL_GetTick>
 80049d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0308 	and.w	r3, r3, #8
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d10e      	bne.n	8004a02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f82d 	bl	8004a52 <UART_WaitOnFlagUntilTimeout>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e023      	b.n	8004a4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d10e      	bne.n	8004a2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f817 	bl	8004a52 <UART_WaitOnFlagUntilTimeout>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e00d      	b.n	8004a4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2220      	movs	r2, #32
 8004a32:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2220      	movs	r2, #32
 8004a38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b09c      	sub	sp, #112	; 0x70
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	603b      	str	r3, [r7, #0]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a62:	e0a5      	b.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a6a:	f000 80a1 	beq.w	8004bb0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a6e:	f7fc f905 	bl	8000c7c <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d302      	bcc.n	8004a84 <UART_WaitOnFlagUntilTimeout+0x32>
 8004a7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d13e      	bne.n	8004b02 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a8c:	e853 3f00 	ldrex	r3, [r3]
 8004a90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a98:	667b      	str	r3, [r7, #100]	; 0x64
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aa4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004aa8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004aaa:	e841 2300 	strex	r3, r2, [r1]
 8004aae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1e6      	bne.n	8004a84 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	3308      	adds	r3, #8
 8004abc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac0:	e853 3f00 	ldrex	r3, [r3]
 8004ac4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac8:	f023 0301 	bic.w	r3, r3, #1
 8004acc:	663b      	str	r3, [r7, #96]	; 0x60
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3308      	adds	r3, #8
 8004ad4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ad6:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ad8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ada:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004adc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ade:	e841 2300 	strex	r3, r2, [r1]
 8004ae2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1e5      	bne.n	8004ab6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2220      	movs	r2, #32
 8004aee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2220      	movs	r2, #32
 8004af4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e067      	b.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d04f      	beq.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b1e:	d147      	bne.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b28:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	e853 3f00 	ldrex	r3, [r3]
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	461a      	mov	r2, r3
 8004b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b48:	637b      	str	r3, [r7, #52]	; 0x34
 8004b4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b50:	e841 2300 	strex	r3, r2, [r1]
 8004b54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1e6      	bne.n	8004b2a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3308      	adds	r3, #8
 8004b62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	e853 3f00 	ldrex	r3, [r3]
 8004b6a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f023 0301 	bic.w	r3, r3, #1
 8004b72:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3308      	adds	r3, #8
 8004b7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b7c:	623a      	str	r2, [r7, #32]
 8004b7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b80:	69f9      	ldr	r1, [r7, #28]
 8004b82:	6a3a      	ldr	r2, [r7, #32]
 8004b84:	e841 2300 	strex	r3, r2, [r1]
 8004b88:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1e5      	bne.n	8004b5c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2220      	movs	r2, #32
 8004b94:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e010      	b.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	69da      	ldr	r2, [r3, #28]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	bf0c      	ite	eq
 8004bc0:	2301      	moveq	r3, #1
 8004bc2:	2300      	movne	r3, #0
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	79fb      	ldrb	r3, [r7, #7]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	f43f af4a 	beq.w	8004a64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3770      	adds	r7, #112	; 0x70
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <__NVIC_SetPriority>:
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	4603      	mov	r3, r0
 8004be4:	6039      	str	r1, [r7, #0]
 8004be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	db0a      	blt.n	8004c06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	490c      	ldr	r1, [pc, #48]	; (8004c28 <__NVIC_SetPriority+0x4c>)
 8004bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfa:	0112      	lsls	r2, r2, #4
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	440b      	add	r3, r1
 8004c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004c04:	e00a      	b.n	8004c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	4908      	ldr	r1, [pc, #32]	; (8004c2c <__NVIC_SetPriority+0x50>)
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	3b04      	subs	r3, #4
 8004c14:	0112      	lsls	r2, r2, #4
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	440b      	add	r3, r1
 8004c1a:	761a      	strb	r2, [r3, #24]
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	e000e100 	.word	0xe000e100
 8004c2c:	e000ed00 	.word	0xe000ed00

08004c30 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004c34:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <SysTick_Handler+0x1c>)
 8004c36:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004c38:	f001 fd28 	bl	800668c <xTaskGetSchedulerState>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d001      	beq.n	8004c46 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004c42:	f002 fb11 	bl	8007268 <xPortSysTickHandler>
  }
}
 8004c46:	bf00      	nop
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	e000e010 	.word	0xe000e010

08004c50 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004c54:	2100      	movs	r1, #0
 8004c56:	f06f 0004 	mvn.w	r0, #4
 8004c5a:	f7ff ffbf 	bl	8004bdc <__NVIC_SetPriority>
#endif
}
 8004c5e:	bf00      	nop
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c6a:	f3ef 8305 	mrs	r3, IPSR
 8004c6e:	603b      	str	r3, [r7, #0]
  return(result);
 8004c70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004c76:	f06f 0305 	mvn.w	r3, #5
 8004c7a:	607b      	str	r3, [r7, #4]
 8004c7c:	e00c      	b.n	8004c98 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c7e:	4b0a      	ldr	r3, [pc, #40]	; (8004ca8 <osKernelInitialize+0x44>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d105      	bne.n	8004c92 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004c86:	4b08      	ldr	r3, [pc, #32]	; (8004ca8 <osKernelInitialize+0x44>)
 8004c88:	2201      	movs	r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	607b      	str	r3, [r7, #4]
 8004c90:	e002      	b.n	8004c98 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c98:	687b      	ldr	r3, [r7, #4]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	200001d4 	.word	0x200001d4

08004cac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cb2:	f3ef 8305 	mrs	r3, IPSR
 8004cb6:	603b      	str	r3, [r7, #0]
  return(result);
 8004cb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004cbe:	f06f 0305 	mvn.w	r3, #5
 8004cc2:	607b      	str	r3, [r7, #4]
 8004cc4:	e010      	b.n	8004ce8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004cc6:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <osKernelStart+0x48>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d109      	bne.n	8004ce2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004cce:	f7ff ffbf 	bl	8004c50 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004cd2:	4b08      	ldr	r3, [pc, #32]	; (8004cf4 <osKernelStart+0x48>)
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004cd8:	f001 f87c 	bl	8005dd4 <vTaskStartScheduler>
      stat = osOK;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	607b      	str	r3, [r7, #4]
 8004ce0:	e002      	b.n	8004ce8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ce6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ce8:	687b      	ldr	r3, [r7, #4]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	200001d4 	.word	0x200001d4

08004cf8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08e      	sub	sp, #56	; 0x38
 8004cfc:	af04      	add	r7, sp, #16
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d04:	2300      	movs	r3, #0
 8004d06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d08:	f3ef 8305 	mrs	r3, IPSR
 8004d0c:	617b      	str	r3, [r7, #20]
  return(result);
 8004d0e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d17e      	bne.n	8004e12 <osThreadNew+0x11a>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d07b      	beq.n	8004e12 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004d1a:	2380      	movs	r3, #128	; 0x80
 8004d1c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004d1e:	2318      	movs	r3, #24
 8004d20:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004d22:	2300      	movs	r3, #0
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d2a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d045      	beq.n	8004dbe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <osThreadNew+0x48>
        name = attr->name;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d008      	beq.n	8004d66 <osThreadNew+0x6e>
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	2b38      	cmp	r3, #56	; 0x38
 8004d58:	d805      	bhi.n	8004d66 <osThreadNew+0x6e>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <osThreadNew+0x72>
        return (NULL);
 8004d66:	2300      	movs	r3, #0
 8004d68:	e054      	b.n	8004e14 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	089b      	lsrs	r3, r3, #2
 8004d78:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00e      	beq.n	8004da0 <osThreadNew+0xa8>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	2bbb      	cmp	r3, #187	; 0xbb
 8004d88:	d90a      	bls.n	8004da0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d006      	beq.n	8004da0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d002      	beq.n	8004da0 <osThreadNew+0xa8>
        mem = 1;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	61bb      	str	r3, [r7, #24]
 8004d9e:	e010      	b.n	8004dc2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10c      	bne.n	8004dc2 <osThreadNew+0xca>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d108      	bne.n	8004dc2 <osThreadNew+0xca>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d104      	bne.n	8004dc2 <osThreadNew+0xca>
          mem = 0;
 8004db8:	2300      	movs	r3, #0
 8004dba:	61bb      	str	r3, [r7, #24]
 8004dbc:	e001      	b.n	8004dc2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d110      	bne.n	8004dea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004dd0:	9202      	str	r2, [sp, #8]
 8004dd2:	9301      	str	r3, [sp, #4]
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	6a3a      	ldr	r2, [r7, #32]
 8004ddc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 fe0c 	bl	80059fc <xTaskCreateStatic>
 8004de4:	4603      	mov	r3, r0
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	e013      	b.n	8004e12 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d110      	bne.n	8004e12 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	f107 0310 	add.w	r3, r7, #16
 8004df8:	9301      	str	r3, [sp, #4]
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 fe57 	bl	8005ab6 <xTaskCreate>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d001      	beq.n	8004e12 <osThreadNew+0x11a>
            hTask = NULL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e12:	693b      	ldr	r3, [r7, #16]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3728      	adds	r7, #40	; 0x28
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e24:	f3ef 8305 	mrs	r3, IPSR
 8004e28:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e2a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <osDelay+0x1c>
    stat = osErrorISR;
 8004e30:	f06f 0305 	mvn.w	r3, #5
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	e007      	b.n	8004e48 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 ff92 	bl	8005d6c <vTaskDelay>
    }
  }

  return (stat);
 8004e48:	68fb      	ldr	r3, [r7, #12]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
	...

08004e54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4a07      	ldr	r2, [pc, #28]	; (8004e80 <vApplicationGetIdleTaskMemory+0x2c>)
 8004e64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	4a06      	ldr	r2, [pc, #24]	; (8004e84 <vApplicationGetIdleTaskMemory+0x30>)
 8004e6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2280      	movs	r2, #128	; 0x80
 8004e70:	601a      	str	r2, [r3, #0]
}
 8004e72:	bf00      	nop
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	200001d8 	.word	0x200001d8
 8004e84:	20000294 	.word	0x20000294

08004e88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4a07      	ldr	r2, [pc, #28]	; (8004eb4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004e98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	4a06      	ldr	r2, [pc, #24]	; (8004eb8 <vApplicationGetTimerTaskMemory+0x30>)
 8004e9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ea6:	601a      	str	r2, [r3, #0]
}
 8004ea8:	bf00      	nop
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	20000494 	.word	0x20000494
 8004eb8:	20000550 	.word	0x20000550

08004ebc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f103 0208 	add.w	r2, r3, #8
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ed4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f103 0208 	add.w	r2, r3, #8
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f103 0208 	add.w	r2, r3, #8
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f16:	b480      	push	{r7}
 8004f18:	b085      	sub	sp, #20
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
 8004f1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	601a      	str	r2, [r3, #0]
}
 8004f52:	bf00      	nop
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b085      	sub	sp, #20
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f74:	d103      	bne.n	8004f7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	e00c      	b.n	8004f98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3308      	adds	r3, #8
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	e002      	b.n	8004f8c <vListInsert+0x2e>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d2f6      	bcs.n	8004f86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	601a      	str	r2, [r3, #0]
}
 8004fc4:	bf00      	nop
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	6892      	ldr	r2, [r2, #8]
 8004fe6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6852      	ldr	r2, [r2, #4]
 8004ff0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d103      	bne.n	8005004 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	1e5a      	subs	r2, r3, #1
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10a      	bne.n	800504e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800504a:	bf00      	nop
 800504c:	e7fe      	b.n	800504c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800504e:	f002 f879 	bl	8007144 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505a:	68f9      	ldr	r1, [r7, #12]
 800505c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800505e:	fb01 f303 	mul.w	r3, r1, r3
 8005062:	441a      	add	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507e:	3b01      	subs	r3, #1
 8005080:	68f9      	ldr	r1, [r7, #12]
 8005082:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005084:	fb01 f303 	mul.w	r3, r1, r3
 8005088:	441a      	add	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	22ff      	movs	r2, #255	; 0xff
 8005092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	22ff      	movs	r2, #255	; 0xff
 800509a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d114      	bne.n	80050ce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d01a      	beq.n	80050e2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	3310      	adds	r3, #16
 80050b0:	4618      	mov	r0, r3
 80050b2:	f001 f929 	bl	8006308 <xTaskRemoveFromEventList>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d012      	beq.n	80050e2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80050bc:	4b0c      	ldr	r3, [pc, #48]	; (80050f0 <xQueueGenericReset+0xcc>)
 80050be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	e009      	b.n	80050e2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3310      	adds	r3, #16
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff fef2 	bl	8004ebc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	3324      	adds	r3, #36	; 0x24
 80050dc:	4618      	mov	r0, r3
 80050de:	f7ff feed 	bl	8004ebc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80050e2:	f002 f85f 	bl	80071a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80050e6:	2301      	movs	r3, #1
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	e000ed04 	.word	0xe000ed04

080050f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08e      	sub	sp, #56	; 0x38
 80050f8:	af02      	add	r7, sp, #8
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10a      	bne.n	800511e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800511a:	bf00      	nop
 800511c:	e7fe      	b.n	800511c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10a      	bne.n	800513a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005136:	bf00      	nop
 8005138:	e7fe      	b.n	8005138 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d002      	beq.n	8005146 <xQueueGenericCreateStatic+0x52>
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <xQueueGenericCreateStatic+0x56>
 8005146:	2301      	movs	r3, #1
 8005148:	e000      	b.n	800514c <xQueueGenericCreateStatic+0x58>
 800514a:	2300      	movs	r3, #0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10a      	bne.n	8005166 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	623b      	str	r3, [r7, #32]
}
 8005162:	bf00      	nop
 8005164:	e7fe      	b.n	8005164 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d102      	bne.n	8005172 <xQueueGenericCreateStatic+0x7e>
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <xQueueGenericCreateStatic+0x82>
 8005172:	2301      	movs	r3, #1
 8005174:	e000      	b.n	8005178 <xQueueGenericCreateStatic+0x84>
 8005176:	2300      	movs	r3, #0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10a      	bne.n	8005192 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800517c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005180:	f383 8811 	msr	BASEPRI, r3
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	61fb      	str	r3, [r7, #28]
}
 800518e:	bf00      	nop
 8005190:	e7fe      	b.n	8005190 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005192:	2350      	movs	r3, #80	; 0x50
 8005194:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2b50      	cmp	r3, #80	; 0x50
 800519a:	d00a      	beq.n	80051b2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800519c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a0:	f383 8811 	msr	BASEPRI, r3
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	61bb      	str	r3, [r7, #24]
}
 80051ae:	bf00      	nop
 80051b0:	e7fe      	b.n	80051b0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80051b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80051b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00d      	beq.n	80051da <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80051be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80051ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	4613      	mov	r3, r2
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	68b9      	ldr	r1, [r7, #8]
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 f805 	bl	80051e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80051da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80051dc:	4618      	mov	r0, r3
 80051de:	3730      	adds	r7, #48	; 0x30
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d103      	bne.n	8005200 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	e002      	b.n	8005206 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005212:	2101      	movs	r1, #1
 8005214:	69b8      	ldr	r0, [r7, #24]
 8005216:	f7ff ff05 	bl	8005024 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	78fa      	ldrb	r2, [r7, #3]
 800521e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005222:	bf00      	nop
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b08e      	sub	sp, #56	; 0x38
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800523a:	2300      	movs	r3, #0
 800523c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10a      	bne.n	800525e <xQueueGenericSend+0x32>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800525a:	bf00      	nop
 800525c:	e7fe      	b.n	800525c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d103      	bne.n	800526c <xQueueGenericSend+0x40>
 8005264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <xQueueGenericSend+0x44>
 800526c:	2301      	movs	r3, #1
 800526e:	e000      	b.n	8005272 <xQueueGenericSend+0x46>
 8005270:	2300      	movs	r3, #0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10a      	bne.n	800528c <xQueueGenericSend+0x60>
	__asm volatile
 8005276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005288:	bf00      	nop
 800528a:	e7fe      	b.n	800528a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2b02      	cmp	r3, #2
 8005290:	d103      	bne.n	800529a <xQueueGenericSend+0x6e>
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005296:	2b01      	cmp	r3, #1
 8005298:	d101      	bne.n	800529e <xQueueGenericSend+0x72>
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <xQueueGenericSend+0x74>
 800529e:	2300      	movs	r3, #0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10a      	bne.n	80052ba <xQueueGenericSend+0x8e>
	__asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	623b      	str	r3, [r7, #32]
}
 80052b6:	bf00      	nop
 80052b8:	e7fe      	b.n	80052b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052ba:	f001 f9e7 	bl	800668c <xTaskGetSchedulerState>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d102      	bne.n	80052ca <xQueueGenericSend+0x9e>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <xQueueGenericSend+0xa2>
 80052ca:	2301      	movs	r3, #1
 80052cc:	e000      	b.n	80052d0 <xQueueGenericSend+0xa4>
 80052ce:	2300      	movs	r3, #0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10a      	bne.n	80052ea <xQueueGenericSend+0xbe>
	__asm volatile
 80052d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d8:	f383 8811 	msr	BASEPRI, r3
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	61fb      	str	r3, [r7, #28]
}
 80052e6:	bf00      	nop
 80052e8:	e7fe      	b.n	80052e8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052ea:	f001 ff2b 	bl	8007144 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d302      	bcc.n	8005300 <xQueueGenericSend+0xd4>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d129      	bne.n	8005354 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005306:	f000 fa0b 	bl	8005720 <prvCopyDataToQueue>
 800530a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800530c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	2b00      	cmp	r3, #0
 8005312:	d010      	beq.n	8005336 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	3324      	adds	r3, #36	; 0x24
 8005318:	4618      	mov	r0, r3
 800531a:	f000 fff5 	bl	8006308 <xTaskRemoveFromEventList>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d013      	beq.n	800534c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005324:	4b3f      	ldr	r3, [pc, #252]	; (8005424 <xQueueGenericSend+0x1f8>)
 8005326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	e00a      	b.n	800534c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d007      	beq.n	800534c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800533c:	4b39      	ldr	r3, [pc, #228]	; (8005424 <xQueueGenericSend+0x1f8>)
 800533e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800534c:	f001 ff2a 	bl	80071a4 <vPortExitCritical>
				return pdPASS;
 8005350:	2301      	movs	r3, #1
 8005352:	e063      	b.n	800541c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d103      	bne.n	8005362 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800535a:	f001 ff23 	bl	80071a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800535e:	2300      	movs	r3, #0
 8005360:	e05c      	b.n	800541c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005364:	2b00      	cmp	r3, #0
 8005366:	d106      	bne.n	8005376 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005368:	f107 0314 	add.w	r3, r7, #20
 800536c:	4618      	mov	r0, r3
 800536e:	f001 f82f 	bl	80063d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005372:	2301      	movs	r3, #1
 8005374:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005376:	f001 ff15 	bl	80071a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800537a:	f000 fd9b 	bl	8005eb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800537e:	f001 fee1 	bl	8007144 <vPortEnterCritical>
 8005382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005384:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005388:	b25b      	sxtb	r3, r3
 800538a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800538e:	d103      	bne.n	8005398 <xQueueGenericSend+0x16c>
 8005390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800539e:	b25b      	sxtb	r3, r3
 80053a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053a4:	d103      	bne.n	80053ae <xQueueGenericSend+0x182>
 80053a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053ae:	f001 fef9 	bl	80071a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053b2:	1d3a      	adds	r2, r7, #4
 80053b4:	f107 0314 	add.w	r3, r7, #20
 80053b8:	4611      	mov	r1, r2
 80053ba:	4618      	mov	r0, r3
 80053bc:	f001 f81e 	bl	80063fc <xTaskCheckForTimeOut>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d124      	bne.n	8005410 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80053c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053c8:	f000 faa2 	bl	8005910 <prvIsQueueFull>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d018      	beq.n	8005404 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d4:	3310      	adds	r3, #16
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	4611      	mov	r1, r2
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 ff44 	bl	8006268 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80053e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053e2:	f000 fa2d 	bl	8005840 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80053e6:	f000 fd73 	bl	8005ed0 <xTaskResumeAll>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f47f af7c 	bne.w	80052ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80053f2:	4b0c      	ldr	r3, [pc, #48]	; (8005424 <xQueueGenericSend+0x1f8>)
 80053f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	e772      	b.n	80052ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005406:	f000 fa1b 	bl	8005840 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800540a:	f000 fd61 	bl	8005ed0 <xTaskResumeAll>
 800540e:	e76c      	b.n	80052ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005412:	f000 fa15 	bl	8005840 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005416:	f000 fd5b 	bl	8005ed0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800541a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800541c:	4618      	mov	r0, r3
 800541e:	3738      	adds	r7, #56	; 0x38
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	e000ed04 	.word	0xe000ed04

08005428 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b090      	sub	sp, #64	; 0x40
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
 8005434:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800543a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d103      	bne.n	8005464 <xQueueGenericSendFromISR+0x3c>
 800545c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <xQueueGenericSendFromISR+0x40>
 8005464:	2301      	movs	r3, #1
 8005466:	e000      	b.n	800546a <xQueueGenericSendFromISR+0x42>
 8005468:	2300      	movs	r3, #0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10a      	bne.n	8005484 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005480:	bf00      	nop
 8005482:	e7fe      	b.n	8005482 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	2b02      	cmp	r3, #2
 8005488:	d103      	bne.n	8005492 <xQueueGenericSendFromISR+0x6a>
 800548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548e:	2b01      	cmp	r3, #1
 8005490:	d101      	bne.n	8005496 <xQueueGenericSendFromISR+0x6e>
 8005492:	2301      	movs	r3, #1
 8005494:	e000      	b.n	8005498 <xQueueGenericSendFromISR+0x70>
 8005496:	2300      	movs	r3, #0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10a      	bne.n	80054b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800549c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	623b      	str	r3, [r7, #32]
}
 80054ae:	bf00      	nop
 80054b0:	e7fe      	b.n	80054b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054b2:	f001 ff29 	bl	8007308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80054b6:	f3ef 8211 	mrs	r2, BASEPRI
 80054ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054be:	f383 8811 	msr	BASEPRI, r3
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	61fa      	str	r2, [r7, #28]
 80054cc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80054ce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80054d0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054da:	429a      	cmp	r2, r3
 80054dc:	d302      	bcc.n	80054e4 <xQueueGenericSendFromISR+0xbc>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d12f      	bne.n	8005544 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80054e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	68b9      	ldr	r1, [r7, #8]
 80054f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054fa:	f000 f911 	bl	8005720 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80054fe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005502:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005506:	d112      	bne.n	800552e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	2b00      	cmp	r3, #0
 800550e:	d016      	beq.n	800553e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005512:	3324      	adds	r3, #36	; 0x24
 8005514:	4618      	mov	r0, r3
 8005516:	f000 fef7 	bl	8006308 <xTaskRemoveFromEventList>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00e      	beq.n	800553e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00b      	beq.n	800553e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	e007      	b.n	800553e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800552e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005532:	3301      	adds	r3, #1
 8005534:	b2db      	uxtb	r3, r3
 8005536:	b25a      	sxtb	r2, r3
 8005538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800553e:	2301      	movs	r3, #1
 8005540:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005542:	e001      	b.n	8005548 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005544:	2300      	movs	r3, #0
 8005546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005552:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005556:	4618      	mov	r0, r3
 8005558:	3740      	adds	r7, #64	; 0x40
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
	...

08005560 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08c      	sub	sp, #48	; 0x30
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800556c:	2300      	movs	r3, #0
 800556e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10a      	bne.n	8005590 <xQueueReceive+0x30>
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	623b      	str	r3, [r7, #32]
}
 800558c:	bf00      	nop
 800558e:	e7fe      	b.n	800558e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d103      	bne.n	800559e <xQueueReceive+0x3e>
 8005596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <xQueueReceive+0x42>
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <xQueueReceive+0x44>
 80055a2:	2300      	movs	r3, #0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10a      	bne.n	80055be <xQueueReceive+0x5e>
	__asm volatile
 80055a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ac:	f383 8811 	msr	BASEPRI, r3
 80055b0:	f3bf 8f6f 	isb	sy
 80055b4:	f3bf 8f4f 	dsb	sy
 80055b8:	61fb      	str	r3, [r7, #28]
}
 80055ba:	bf00      	nop
 80055bc:	e7fe      	b.n	80055bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055be:	f001 f865 	bl	800668c <xTaskGetSchedulerState>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d102      	bne.n	80055ce <xQueueReceive+0x6e>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <xQueueReceive+0x72>
 80055ce:	2301      	movs	r3, #1
 80055d0:	e000      	b.n	80055d4 <xQueueReceive+0x74>
 80055d2:	2300      	movs	r3, #0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10a      	bne.n	80055ee <xQueueReceive+0x8e>
	__asm volatile
 80055d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055dc:	f383 8811 	msr	BASEPRI, r3
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	61bb      	str	r3, [r7, #24]
}
 80055ea:	bf00      	nop
 80055ec:	e7fe      	b.n	80055ec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055ee:	f001 fda9 	bl	8007144 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d01f      	beq.n	800563e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80055fe:	68b9      	ldr	r1, [r7, #8]
 8005600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005602:	f000 f8f7 	bl	80057f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	1e5a      	subs	r2, r3, #1
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800560e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00f      	beq.n	8005636 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005618:	3310      	adds	r3, #16
 800561a:	4618      	mov	r0, r3
 800561c:	f000 fe74 	bl	8006308 <xTaskRemoveFromEventList>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d007      	beq.n	8005636 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005626:	4b3d      	ldr	r3, [pc, #244]	; (800571c <xQueueReceive+0x1bc>)
 8005628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005636:	f001 fdb5 	bl	80071a4 <vPortExitCritical>
				return pdPASS;
 800563a:	2301      	movs	r3, #1
 800563c:	e069      	b.n	8005712 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d103      	bne.n	800564c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005644:	f001 fdae 	bl	80071a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005648:	2300      	movs	r3, #0
 800564a:	e062      	b.n	8005712 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800564c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564e:	2b00      	cmp	r3, #0
 8005650:	d106      	bne.n	8005660 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005652:	f107 0310 	add.w	r3, r7, #16
 8005656:	4618      	mov	r0, r3
 8005658:	f000 feba 	bl	80063d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800565c:	2301      	movs	r3, #1
 800565e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005660:	f001 fda0 	bl	80071a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005664:	f000 fc26 	bl	8005eb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005668:	f001 fd6c 	bl	8007144 <vPortEnterCritical>
 800566c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005672:	b25b      	sxtb	r3, r3
 8005674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005678:	d103      	bne.n	8005682 <xQueueReceive+0x122>
 800567a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005684:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005688:	b25b      	sxtb	r3, r3
 800568a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800568e:	d103      	bne.n	8005698 <xQueueReceive+0x138>
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005698:	f001 fd84 	bl	80071a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800569c:	1d3a      	adds	r2, r7, #4
 800569e:	f107 0310 	add.w	r3, r7, #16
 80056a2:	4611      	mov	r1, r2
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 fea9 	bl	80063fc <xTaskCheckForTimeOut>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d123      	bne.n	80056f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056b2:	f000 f917 	bl	80058e4 <prvIsQueueEmpty>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d017      	beq.n	80056ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056be:	3324      	adds	r3, #36	; 0x24
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	4611      	mov	r1, r2
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 fdcf 	bl	8006268 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80056ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056cc:	f000 f8b8 	bl	8005840 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80056d0:	f000 fbfe 	bl	8005ed0 <xTaskResumeAll>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d189      	bne.n	80055ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80056da:	4b10      	ldr	r3, [pc, #64]	; (800571c <xQueueReceive+0x1bc>)
 80056dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	e780      	b.n	80055ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80056ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056ee:	f000 f8a7 	bl	8005840 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056f2:	f000 fbed 	bl	8005ed0 <xTaskResumeAll>
 80056f6:	e77a      	b.n	80055ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80056f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056fa:	f000 f8a1 	bl	8005840 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056fe:	f000 fbe7 	bl	8005ed0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005704:	f000 f8ee 	bl	80058e4 <prvIsQueueEmpty>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	f43f af6f 	beq.w	80055ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005710:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005712:	4618      	mov	r0, r3
 8005714:	3730      	adds	r7, #48	; 0x30
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	e000ed04 	.word	0xe000ed04

08005720 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800572c:	2300      	movs	r3, #0
 800572e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005734:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10d      	bne.n	800575a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d14d      	bne.n	80057e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	4618      	mov	r0, r3
 800574c:	f000 ffbc 	bl	80066c8 <xTaskPriorityDisinherit>
 8005750:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	609a      	str	r2, [r3, #8]
 8005758:	e043      	b.n	80057e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d119      	bne.n	8005794 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6858      	ldr	r0, [r3, #4]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005768:	461a      	mov	r2, r3
 800576a:	68b9      	ldr	r1, [r7, #8]
 800576c:	f002 f81c 	bl	80077a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005778:	441a      	add	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	429a      	cmp	r2, r3
 8005788:	d32b      	bcc.n	80057e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	605a      	str	r2, [r3, #4]
 8005792:	e026      	b.n	80057e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	68d8      	ldr	r0, [r3, #12]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579c:	461a      	mov	r2, r3
 800579e:	68b9      	ldr	r1, [r7, #8]
 80057a0:	f002 f802 	bl	80077a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	68da      	ldr	r2, [r3, #12]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	425b      	negs	r3, r3
 80057ae:	441a      	add	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	68da      	ldr	r2, [r3, #12]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d207      	bcs.n	80057d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c8:	425b      	negs	r3, r3
 80057ca:	441a      	add	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d105      	bne.n	80057e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	3b01      	subs	r3, #1
 80057e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80057ea:	697b      	ldr	r3, [r7, #20]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3718      	adds	r7, #24
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005802:	2b00      	cmp	r3, #0
 8005804:	d018      	beq.n	8005838 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580e:	441a      	add	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68da      	ldr	r2, [r3, #12]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	429a      	cmp	r2, r3
 800581e:	d303      	bcc.n	8005828 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68d9      	ldr	r1, [r3, #12]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005830:	461a      	mov	r2, r3
 8005832:	6838      	ldr	r0, [r7, #0]
 8005834:	f001 ffb8 	bl	80077a8 <memcpy>
	}
}
 8005838:	bf00      	nop
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005848:	f001 fc7c 	bl	8007144 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005852:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005854:	e011      	b.n	800587a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	2b00      	cmp	r3, #0
 800585c:	d012      	beq.n	8005884 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	3324      	adds	r3, #36	; 0x24
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fd50 	bl	8006308 <xTaskRemoveFromEventList>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800586e:	f000 fe27 	bl	80064c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005872:	7bfb      	ldrb	r3, [r7, #15]
 8005874:	3b01      	subs	r3, #1
 8005876:	b2db      	uxtb	r3, r3
 8005878:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800587a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800587e:	2b00      	cmp	r3, #0
 8005880:	dce9      	bgt.n	8005856 <prvUnlockQueue+0x16>
 8005882:	e000      	b.n	8005886 <prvUnlockQueue+0x46>
					break;
 8005884:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	22ff      	movs	r2, #255	; 0xff
 800588a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800588e:	f001 fc89 	bl	80071a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005892:	f001 fc57 	bl	8007144 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800589c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800589e:	e011      	b.n	80058c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d012      	beq.n	80058ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3310      	adds	r3, #16
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 fd2b 	bl	8006308 <xTaskRemoveFromEventList>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80058b8:	f000 fe02 	bl	80064c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80058bc:	7bbb      	ldrb	r3, [r7, #14]
 80058be:	3b01      	subs	r3, #1
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	dce9      	bgt.n	80058a0 <prvUnlockQueue+0x60>
 80058cc:	e000      	b.n	80058d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80058ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	22ff      	movs	r2, #255	; 0xff
 80058d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80058d8:	f001 fc64 	bl	80071a4 <vPortExitCritical>
}
 80058dc:	bf00      	nop
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058ec:	f001 fc2a 	bl	8007144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d102      	bne.n	80058fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80058f8:	2301      	movs	r3, #1
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	e001      	b.n	8005902 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80058fe:	2300      	movs	r3, #0
 8005900:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005902:	f001 fc4f 	bl	80071a4 <vPortExitCritical>

	return xReturn;
 8005906:	68fb      	ldr	r3, [r7, #12]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005918:	f001 fc14 	bl	8007144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005924:	429a      	cmp	r2, r3
 8005926:	d102      	bne.n	800592e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005928:	2301      	movs	r3, #1
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	e001      	b.n	8005932 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800592e:	2300      	movs	r3, #0
 8005930:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005932:	f001 fc37 	bl	80071a4 <vPortExitCritical>

	return xReturn;
 8005936:	68fb      	ldr	r3, [r7, #12]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800594a:	2300      	movs	r3, #0
 800594c:	60fb      	str	r3, [r7, #12]
 800594e:	e014      	b.n	800597a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005950:	4a0f      	ldr	r2, [pc, #60]	; (8005990 <vQueueAddToRegistry+0x50>)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10b      	bne.n	8005974 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800595c:	490c      	ldr	r1, [pc, #48]	; (8005990 <vQueueAddToRegistry+0x50>)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005966:	4a0a      	ldr	r2, [pc, #40]	; (8005990 <vQueueAddToRegistry+0x50>)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	4413      	add	r3, r2
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005972:	e006      	b.n	8005982 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	3301      	adds	r3, #1
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2b07      	cmp	r3, #7
 800597e:	d9e7      	bls.n	8005950 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005980:	bf00      	nop
 8005982:	bf00      	nop
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	20000950 	.word	0x20000950

08005994 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80059a4:	f001 fbce 	bl	8007144 <vPortEnterCritical>
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059ae:	b25b      	sxtb	r3, r3
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059b4:	d103      	bne.n	80059be <vQueueWaitForMessageRestricted+0x2a>
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059c4:	b25b      	sxtb	r3, r3
 80059c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059ca:	d103      	bne.n	80059d4 <vQueueWaitForMessageRestricted+0x40>
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059d4:	f001 fbe6 	bl	80071a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d106      	bne.n	80059ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	3324      	adds	r3, #36	; 0x24
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 fc61 	bl	80062b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80059ee:	6978      	ldr	r0, [r7, #20]
 80059f0:	f7ff ff26 	bl	8005840 <prvUnlockQueue>
	}
 80059f4:	bf00      	nop
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08e      	sub	sp, #56	; 0x38
 8005a00:	af04      	add	r7, sp, #16
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10a      	bne.n	8005a26 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a14:	f383 8811 	msr	BASEPRI, r3
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	623b      	str	r3, [r7, #32]
}
 8005a22:	bf00      	nop
 8005a24:	e7fe      	b.n	8005a24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10a      	bne.n	8005a42 <xTaskCreateStatic+0x46>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	61fb      	str	r3, [r7, #28]
}
 8005a3e:	bf00      	nop
 8005a40:	e7fe      	b.n	8005a40 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a42:	23bc      	movs	r3, #188	; 0xbc
 8005a44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	2bbc      	cmp	r3, #188	; 0xbc
 8005a4a:	d00a      	beq.n	8005a62 <xTaskCreateStatic+0x66>
	__asm volatile
 8005a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	61bb      	str	r3, [r7, #24]
}
 8005a5e:	bf00      	nop
 8005a60:	e7fe      	b.n	8005a60 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005a62:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d01e      	beq.n	8005aa8 <xTaskCreateStatic+0xac>
 8005a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01b      	beq.n	8005aa8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a82:	2300      	movs	r3, #0
 8005a84:	9303      	str	r3, [sp, #12]
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	9302      	str	r3, [sp, #8]
 8005a8a:	f107 0314 	add.w	r3, r7, #20
 8005a8e:	9301      	str	r3, [sp, #4]
 8005a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	68b9      	ldr	r1, [r7, #8]
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 f850 	bl	8005b40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005aa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005aa2:	f000 f8f3 	bl	8005c8c <prvAddNewTaskToReadyList>
 8005aa6:	e001      	b.n	8005aac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005aac:	697b      	ldr	r3, [r7, #20]
	}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3728      	adds	r7, #40	; 0x28
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b08c      	sub	sp, #48	; 0x30
 8005aba:	af04      	add	r7, sp, #16
 8005abc:	60f8      	str	r0, [r7, #12]
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	603b      	str	r3, [r7, #0]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ac6:	88fb      	ldrh	r3, [r7, #6]
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4618      	mov	r0, r3
 8005acc:	f001 fc5c 	bl	8007388 <pvPortMalloc>
 8005ad0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00e      	beq.n	8005af6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ad8:	20bc      	movs	r0, #188	; 0xbc
 8005ada:	f001 fc55 	bl	8007388 <pvPortMalloc>
 8005ade:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	631a      	str	r2, [r3, #48]	; 0x30
 8005aec:	e005      	b.n	8005afa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005aee:	6978      	ldr	r0, [r7, #20]
 8005af0:	f001 fd16 	bl	8007520 <vPortFree>
 8005af4:	e001      	b.n	8005afa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005af6:	2300      	movs	r3, #0
 8005af8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d017      	beq.n	8005b30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b08:	88fa      	ldrh	r2, [r7, #6]
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	9303      	str	r3, [sp, #12]
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	9302      	str	r3, [sp, #8]
 8005b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b14:	9301      	str	r3, [sp, #4]
 8005b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	68b9      	ldr	r1, [r7, #8]
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 f80e 	bl	8005b40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b24:	69f8      	ldr	r0, [r7, #28]
 8005b26:	f000 f8b1 	bl	8005c8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	e002      	b.n	8005b36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b36:	69bb      	ldr	r3, [r7, #24]
	}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3720      	adds	r7, #32
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b088      	sub	sp, #32
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
 8005b4c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	461a      	mov	r2, r3
 8005b58:	21a5      	movs	r1, #165	; 0xa5
 8005b5a:	f001 fe33 	bl	80077c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	f023 0307 	bic.w	r3, r3, #7
 8005b76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	f003 0307 	and.w	r3, r3, #7
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b86:	f383 8811 	msr	BASEPRI, r3
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	617b      	str	r3, [r7, #20]
}
 8005b94:	bf00      	nop
 8005b96:	e7fe      	b.n	8005b96 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d01f      	beq.n	8005bde <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	61fb      	str	r3, [r7, #28]
 8005ba2:	e012      	b.n	8005bca <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	4413      	add	r3, r2
 8005baa:	7819      	ldrb	r1, [r3, #0]
 8005bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	3334      	adds	r3, #52	; 0x34
 8005bb4:	460a      	mov	r2, r1
 8005bb6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d006      	beq.n	8005bd2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	61fb      	str	r3, [r7, #28]
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	2b0f      	cmp	r3, #15
 8005bce:	d9e9      	bls.n	8005ba4 <prvInitialiseNewTask+0x64>
 8005bd0:	e000      	b.n	8005bd4 <prvInitialiseNewTask+0x94>
			{
				break;
 8005bd2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bdc:	e003      	b.n	8005be6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be8:	2b37      	cmp	r3, #55	; 0x37
 8005bea:	d901      	bls.n	8005bf0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005bec:	2337      	movs	r3, #55	; 0x37
 8005bee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bf4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bfa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfe:	2200      	movs	r2, #0
 8005c00:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c04:	3304      	adds	r3, #4
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff f978 	bl	8004efc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0e:	3318      	adds	r3, #24
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7ff f973 	bl	8004efc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3e:	3354      	adds	r3, #84	; 0x54
 8005c40:	2260      	movs	r2, #96	; 0x60
 8005c42:	2100      	movs	r1, #0
 8005c44:	4618      	mov	r0, r3
 8005c46:	f001 fdbd 	bl	80077c4 <memset>
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4c:	4a0c      	ldr	r2, [pc, #48]	; (8005c80 <prvInitialiseNewTask+0x140>)
 8005c4e:	659a      	str	r2, [r3, #88]	; 0x58
 8005c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c52:	4a0c      	ldr	r2, [pc, #48]	; (8005c84 <prvInitialiseNewTask+0x144>)
 8005c54:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c58:	4a0b      	ldr	r2, [pc, #44]	; (8005c88 <prvInitialiseNewTask+0x148>)
 8005c5a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	68f9      	ldr	r1, [r7, #12]
 8005c60:	69b8      	ldr	r0, [r7, #24]
 8005c62:	f001 f941 	bl	8006ee8 <pxPortInitialiseStack>
 8005c66:	4602      	mov	r2, r0
 8005c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c76:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c78:	bf00      	nop
 8005c7a:	3720      	adds	r7, #32
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	08007a50 	.word	0x08007a50
 8005c84:	08007a70 	.word	0x08007a70
 8005c88:	08007a30 	.word	0x08007a30

08005c8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c94:	f001 fa56 	bl	8007144 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c98:	4b2d      	ldr	r3, [pc, #180]	; (8005d50 <prvAddNewTaskToReadyList+0xc4>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	4a2c      	ldr	r2, [pc, #176]	; (8005d50 <prvAddNewTaskToReadyList+0xc4>)
 8005ca0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ca2:	4b2c      	ldr	r3, [pc, #176]	; (8005d54 <prvAddNewTaskToReadyList+0xc8>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d109      	bne.n	8005cbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005caa:	4a2a      	ldr	r2, [pc, #168]	; (8005d54 <prvAddNewTaskToReadyList+0xc8>)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005cb0:	4b27      	ldr	r3, [pc, #156]	; (8005d50 <prvAddNewTaskToReadyList+0xc4>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d110      	bne.n	8005cda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005cb8:	f000 fc26 	bl	8006508 <prvInitialiseTaskLists>
 8005cbc:	e00d      	b.n	8005cda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005cbe:	4b26      	ldr	r3, [pc, #152]	; (8005d58 <prvAddNewTaskToReadyList+0xcc>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d109      	bne.n	8005cda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005cc6:	4b23      	ldr	r3, [pc, #140]	; (8005d54 <prvAddNewTaskToReadyList+0xc8>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d802      	bhi.n	8005cda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005cd4:	4a1f      	ldr	r2, [pc, #124]	; (8005d54 <prvAddNewTaskToReadyList+0xc8>)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005cda:	4b20      	ldr	r3, [pc, #128]	; (8005d5c <prvAddNewTaskToReadyList+0xd0>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	4a1e      	ldr	r2, [pc, #120]	; (8005d5c <prvAddNewTaskToReadyList+0xd0>)
 8005ce2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ce4:	4b1d      	ldr	r3, [pc, #116]	; (8005d5c <prvAddNewTaskToReadyList+0xd0>)
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf0:	4b1b      	ldr	r3, [pc, #108]	; (8005d60 <prvAddNewTaskToReadyList+0xd4>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d903      	bls.n	8005d00 <prvAddNewTaskToReadyList+0x74>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	4a18      	ldr	r2, [pc, #96]	; (8005d60 <prvAddNewTaskToReadyList+0xd4>)
 8005cfe:	6013      	str	r3, [r2, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d04:	4613      	mov	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4a15      	ldr	r2, [pc, #84]	; (8005d64 <prvAddNewTaskToReadyList+0xd8>)
 8005d0e:	441a      	add	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3304      	adds	r3, #4
 8005d14:	4619      	mov	r1, r3
 8005d16:	4610      	mov	r0, r2
 8005d18:	f7ff f8fd 	bl	8004f16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d1c:	f001 fa42 	bl	80071a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d20:	4b0d      	ldr	r3, [pc, #52]	; (8005d58 <prvAddNewTaskToReadyList+0xcc>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00e      	beq.n	8005d46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d28:	4b0a      	ldr	r3, [pc, #40]	; (8005d54 <prvAddNewTaskToReadyList+0xc8>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d207      	bcs.n	8005d46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d36:	4b0c      	ldr	r3, [pc, #48]	; (8005d68 <prvAddNewTaskToReadyList+0xdc>)
 8005d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d46:	bf00      	nop
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	20000e64 	.word	0x20000e64
 8005d54:	20000990 	.word	0x20000990
 8005d58:	20000e70 	.word	0x20000e70
 8005d5c:	20000e80 	.word	0x20000e80
 8005d60:	20000e6c 	.word	0x20000e6c
 8005d64:	20000994 	.word	0x20000994
 8005d68:	e000ed04 	.word	0xe000ed04

08005d6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d74:	2300      	movs	r3, #0
 8005d76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d017      	beq.n	8005dae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d7e:	4b13      	ldr	r3, [pc, #76]	; (8005dcc <vTaskDelay+0x60>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00a      	beq.n	8005d9c <vTaskDelay+0x30>
	__asm volatile
 8005d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8a:	f383 8811 	msr	BASEPRI, r3
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	60bb      	str	r3, [r7, #8]
}
 8005d98:	bf00      	nop
 8005d9a:	e7fe      	b.n	8005d9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d9c:	f000 f88a 	bl	8005eb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005da0:	2100      	movs	r1, #0
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fcfe 	bl	80067a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005da8:	f000 f892 	bl	8005ed0 <xTaskResumeAll>
 8005dac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d107      	bne.n	8005dc4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005db4:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <vTaskDelay+0x64>)
 8005db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005dc4:	bf00      	nop
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	20000e8c 	.word	0x20000e8c
 8005dd0:	e000ed04 	.word	0xe000ed04

08005dd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08a      	sub	sp, #40	; 0x28
 8005dd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005dde:	2300      	movs	r3, #0
 8005de0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005de2:	463a      	mov	r2, r7
 8005de4:	1d39      	adds	r1, r7, #4
 8005de6:	f107 0308 	add.w	r3, r7, #8
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7ff f832 	bl	8004e54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005df0:	6839      	ldr	r1, [r7, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	9202      	str	r2, [sp, #8]
 8005df8:	9301      	str	r3, [sp, #4]
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	2300      	movs	r3, #0
 8005e00:	460a      	mov	r2, r1
 8005e02:	4924      	ldr	r1, [pc, #144]	; (8005e94 <vTaskStartScheduler+0xc0>)
 8005e04:	4824      	ldr	r0, [pc, #144]	; (8005e98 <vTaskStartScheduler+0xc4>)
 8005e06:	f7ff fdf9 	bl	80059fc <xTaskCreateStatic>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	4a23      	ldr	r2, [pc, #140]	; (8005e9c <vTaskStartScheduler+0xc8>)
 8005e0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e10:	4b22      	ldr	r3, [pc, #136]	; (8005e9c <vTaskStartScheduler+0xc8>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	e001      	b.n	8005e22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d102      	bne.n	8005e2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005e28:	f000 fd10 	bl	800684c <xTimerCreateTimerTask>
 8005e2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d11b      	bne.n	8005e6c <vTaskStartScheduler+0x98>
	__asm volatile
 8005e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e38:	f383 8811 	msr	BASEPRI, r3
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	613b      	str	r3, [r7, #16]
}
 8005e46:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e48:	4b15      	ldr	r3, [pc, #84]	; (8005ea0 <vTaskStartScheduler+0xcc>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3354      	adds	r3, #84	; 0x54
 8005e4e:	4a15      	ldr	r2, [pc, #84]	; (8005ea4 <vTaskStartScheduler+0xd0>)
 8005e50:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e52:	4b15      	ldr	r3, [pc, #84]	; (8005ea8 <vTaskStartScheduler+0xd4>)
 8005e54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e5a:	4b14      	ldr	r3, [pc, #80]	; (8005eac <vTaskStartScheduler+0xd8>)
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005e60:	4b13      	ldr	r3, [pc, #76]	; (8005eb0 <vTaskStartScheduler+0xdc>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e66:	f001 f8cb 	bl	8007000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e6a:	e00e      	b.n	8005e8a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e72:	d10a      	bne.n	8005e8a <vTaskStartScheduler+0xb6>
	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	60fb      	str	r3, [r7, #12]
}
 8005e86:	bf00      	nop
 8005e88:	e7fe      	b.n	8005e88 <vTaskStartScheduler+0xb4>
}
 8005e8a:	bf00      	nop
 8005e8c:	3718      	adds	r7, #24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	08007988 	.word	0x08007988
 8005e98:	080064d9 	.word	0x080064d9
 8005e9c:	20000e88 	.word	0x20000e88
 8005ea0:	20000990 	.word	0x20000990
 8005ea4:	20000010 	.word	0x20000010
 8005ea8:	20000e84 	.word	0x20000e84
 8005eac:	20000e70 	.word	0x20000e70
 8005eb0:	20000e68 	.word	0x20000e68

08005eb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005eb8:	4b04      	ldr	r3, [pc, #16]	; (8005ecc <vTaskSuspendAll+0x18>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	4a03      	ldr	r2, [pc, #12]	; (8005ecc <vTaskSuspendAll+0x18>)
 8005ec0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005ec2:	bf00      	nop
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	20000e8c 	.word	0x20000e8c

08005ed0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005eda:	2300      	movs	r3, #0
 8005edc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ede:	4b42      	ldr	r3, [pc, #264]	; (8005fe8 <xTaskResumeAll+0x118>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10a      	bne.n	8005efc <xTaskResumeAll+0x2c>
	__asm volatile
 8005ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	603b      	str	r3, [r7, #0]
}
 8005ef8:	bf00      	nop
 8005efa:	e7fe      	b.n	8005efa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005efc:	f001 f922 	bl	8007144 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f00:	4b39      	ldr	r3, [pc, #228]	; (8005fe8 <xTaskResumeAll+0x118>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3b01      	subs	r3, #1
 8005f06:	4a38      	ldr	r2, [pc, #224]	; (8005fe8 <xTaskResumeAll+0x118>)
 8005f08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f0a:	4b37      	ldr	r3, [pc, #220]	; (8005fe8 <xTaskResumeAll+0x118>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d162      	bne.n	8005fd8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f12:	4b36      	ldr	r3, [pc, #216]	; (8005fec <xTaskResumeAll+0x11c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d05e      	beq.n	8005fd8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f1a:	e02f      	b.n	8005f7c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f1c:	4b34      	ldr	r3, [pc, #208]	; (8005ff0 <xTaskResumeAll+0x120>)
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	3318      	adds	r3, #24
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7ff f851 	bl	8004fd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3304      	adds	r3, #4
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff f84c 	bl	8004fd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f3c:	4b2d      	ldr	r3, [pc, #180]	; (8005ff4 <xTaskResumeAll+0x124>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d903      	bls.n	8005f4c <xTaskResumeAll+0x7c>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f48:	4a2a      	ldr	r2, [pc, #168]	; (8005ff4 <xTaskResumeAll+0x124>)
 8005f4a:	6013      	str	r3, [r2, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f50:	4613      	mov	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4a27      	ldr	r2, [pc, #156]	; (8005ff8 <xTaskResumeAll+0x128>)
 8005f5a:	441a      	add	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4619      	mov	r1, r3
 8005f62:	4610      	mov	r0, r2
 8005f64:	f7fe ffd7 	bl	8004f16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6c:	4b23      	ldr	r3, [pc, #140]	; (8005ffc <xTaskResumeAll+0x12c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d302      	bcc.n	8005f7c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005f76:	4b22      	ldr	r3, [pc, #136]	; (8006000 <xTaskResumeAll+0x130>)
 8005f78:	2201      	movs	r2, #1
 8005f7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f7c:	4b1c      	ldr	r3, [pc, #112]	; (8005ff0 <xTaskResumeAll+0x120>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1cb      	bne.n	8005f1c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f8a:	f000 fb5f 	bl	800664c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f8e:	4b1d      	ldr	r3, [pc, #116]	; (8006004 <xTaskResumeAll+0x134>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d010      	beq.n	8005fbc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f9a:	f000 f847 	bl	800602c <xTaskIncrementTick>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d002      	beq.n	8005faa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005fa4:	4b16      	ldr	r3, [pc, #88]	; (8006000 <xTaskResumeAll+0x130>)
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1f1      	bne.n	8005f9a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005fb6:	4b13      	ldr	r3, [pc, #76]	; (8006004 <xTaskResumeAll+0x134>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005fbc:	4b10      	ldr	r3, [pc, #64]	; (8006000 <xTaskResumeAll+0x130>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d009      	beq.n	8005fd8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005fc8:	4b0f      	ldr	r3, [pc, #60]	; (8006008 <xTaskResumeAll+0x138>)
 8005fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005fd8:	f001 f8e4 	bl	80071a4 <vPortExitCritical>

	return xAlreadyYielded;
 8005fdc:	68bb      	ldr	r3, [r7, #8]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000e8c 	.word	0x20000e8c
 8005fec:	20000e64 	.word	0x20000e64
 8005ff0:	20000e24 	.word	0x20000e24
 8005ff4:	20000e6c 	.word	0x20000e6c
 8005ff8:	20000994 	.word	0x20000994
 8005ffc:	20000990 	.word	0x20000990
 8006000:	20000e78 	.word	0x20000e78
 8006004:	20000e74 	.word	0x20000e74
 8006008:	e000ed04 	.word	0xe000ed04

0800600c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006012:	4b05      	ldr	r3, [pc, #20]	; (8006028 <xTaskGetTickCount+0x1c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006018:	687b      	ldr	r3, [r7, #4]
}
 800601a:	4618      	mov	r0, r3
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	20000e68 	.word	0x20000e68

0800602c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006032:	2300      	movs	r3, #0
 8006034:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006036:	4b4f      	ldr	r3, [pc, #316]	; (8006174 <xTaskIncrementTick+0x148>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	f040 808f 	bne.w	800615e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006040:	4b4d      	ldr	r3, [pc, #308]	; (8006178 <xTaskIncrementTick+0x14c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3301      	adds	r3, #1
 8006046:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006048:	4a4b      	ldr	r2, [pc, #300]	; (8006178 <xTaskIncrementTick+0x14c>)
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d120      	bne.n	8006096 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006054:	4b49      	ldr	r3, [pc, #292]	; (800617c <xTaskIncrementTick+0x150>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00a      	beq.n	8006074 <xTaskIncrementTick+0x48>
	__asm volatile
 800605e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	603b      	str	r3, [r7, #0]
}
 8006070:	bf00      	nop
 8006072:	e7fe      	b.n	8006072 <xTaskIncrementTick+0x46>
 8006074:	4b41      	ldr	r3, [pc, #260]	; (800617c <xTaskIncrementTick+0x150>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	60fb      	str	r3, [r7, #12]
 800607a:	4b41      	ldr	r3, [pc, #260]	; (8006180 <xTaskIncrementTick+0x154>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a3f      	ldr	r2, [pc, #252]	; (800617c <xTaskIncrementTick+0x150>)
 8006080:	6013      	str	r3, [r2, #0]
 8006082:	4a3f      	ldr	r2, [pc, #252]	; (8006180 <xTaskIncrementTick+0x154>)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6013      	str	r3, [r2, #0]
 8006088:	4b3e      	ldr	r3, [pc, #248]	; (8006184 <xTaskIncrementTick+0x158>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3301      	adds	r3, #1
 800608e:	4a3d      	ldr	r2, [pc, #244]	; (8006184 <xTaskIncrementTick+0x158>)
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	f000 fadb 	bl	800664c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006096:	4b3c      	ldr	r3, [pc, #240]	; (8006188 <xTaskIncrementTick+0x15c>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	429a      	cmp	r2, r3
 800609e:	d349      	bcc.n	8006134 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060a0:	4b36      	ldr	r3, [pc, #216]	; (800617c <xTaskIncrementTick+0x150>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d104      	bne.n	80060b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060aa:	4b37      	ldr	r3, [pc, #220]	; (8006188 <xTaskIncrementTick+0x15c>)
 80060ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060b0:	601a      	str	r2, [r3, #0]
					break;
 80060b2:	e03f      	b.n	8006134 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060b4:	4b31      	ldr	r3, [pc, #196]	; (800617c <xTaskIncrementTick+0x150>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d203      	bcs.n	80060d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80060cc:	4a2e      	ldr	r2, [pc, #184]	; (8006188 <xTaskIncrementTick+0x15c>)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80060d2:	e02f      	b.n	8006134 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	3304      	adds	r3, #4
 80060d8:	4618      	mov	r0, r3
 80060da:	f7fe ff79 	bl	8004fd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d004      	beq.n	80060f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	3318      	adds	r3, #24
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fe ff70 	bl	8004fd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f4:	4b25      	ldr	r3, [pc, #148]	; (800618c <xTaskIncrementTick+0x160>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d903      	bls.n	8006104 <xTaskIncrementTick+0xd8>
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	4a22      	ldr	r2, [pc, #136]	; (800618c <xTaskIncrementTick+0x160>)
 8006102:	6013      	str	r3, [r2, #0]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006108:	4613      	mov	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4a1f      	ldr	r2, [pc, #124]	; (8006190 <xTaskIncrementTick+0x164>)
 8006112:	441a      	add	r2, r3
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	3304      	adds	r3, #4
 8006118:	4619      	mov	r1, r3
 800611a:	4610      	mov	r0, r2
 800611c:	f7fe fefb 	bl	8004f16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006124:	4b1b      	ldr	r3, [pc, #108]	; (8006194 <xTaskIncrementTick+0x168>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612a:	429a      	cmp	r2, r3
 800612c:	d3b8      	bcc.n	80060a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800612e:	2301      	movs	r3, #1
 8006130:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006132:	e7b5      	b.n	80060a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006134:	4b17      	ldr	r3, [pc, #92]	; (8006194 <xTaskIncrementTick+0x168>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800613a:	4915      	ldr	r1, [pc, #84]	; (8006190 <xTaskIncrementTick+0x164>)
 800613c:	4613      	mov	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	440b      	add	r3, r1
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d901      	bls.n	8006150 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800614c:	2301      	movs	r3, #1
 800614e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006150:	4b11      	ldr	r3, [pc, #68]	; (8006198 <xTaskIncrementTick+0x16c>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d007      	beq.n	8006168 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006158:	2301      	movs	r3, #1
 800615a:	617b      	str	r3, [r7, #20]
 800615c:	e004      	b.n	8006168 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800615e:	4b0f      	ldr	r3, [pc, #60]	; (800619c <xTaskIncrementTick+0x170>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3301      	adds	r3, #1
 8006164:	4a0d      	ldr	r2, [pc, #52]	; (800619c <xTaskIncrementTick+0x170>)
 8006166:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006168:	697b      	ldr	r3, [r7, #20]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	20000e8c 	.word	0x20000e8c
 8006178:	20000e68 	.word	0x20000e68
 800617c:	20000e1c 	.word	0x20000e1c
 8006180:	20000e20 	.word	0x20000e20
 8006184:	20000e7c 	.word	0x20000e7c
 8006188:	20000e84 	.word	0x20000e84
 800618c:	20000e6c 	.word	0x20000e6c
 8006190:	20000994 	.word	0x20000994
 8006194:	20000990 	.word	0x20000990
 8006198:	20000e78 	.word	0x20000e78
 800619c:	20000e74 	.word	0x20000e74

080061a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061a6:	4b2a      	ldr	r3, [pc, #168]	; (8006250 <vTaskSwitchContext+0xb0>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061ae:	4b29      	ldr	r3, [pc, #164]	; (8006254 <vTaskSwitchContext+0xb4>)
 80061b0:	2201      	movs	r2, #1
 80061b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061b4:	e046      	b.n	8006244 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80061b6:	4b27      	ldr	r3, [pc, #156]	; (8006254 <vTaskSwitchContext+0xb4>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061bc:	4b26      	ldr	r3, [pc, #152]	; (8006258 <vTaskSwitchContext+0xb8>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	e010      	b.n	80061e6 <vTaskSwitchContext+0x46>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10a      	bne.n	80061e0 <vTaskSwitchContext+0x40>
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	607b      	str	r3, [r7, #4]
}
 80061dc:	bf00      	nop
 80061de:	e7fe      	b.n	80061de <vTaskSwitchContext+0x3e>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	3b01      	subs	r3, #1
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	491d      	ldr	r1, [pc, #116]	; (800625c <vTaskSwitchContext+0xbc>)
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	4613      	mov	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	440b      	add	r3, r1
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d0e4      	beq.n	80061c4 <vTaskSwitchContext+0x24>
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	4613      	mov	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4a15      	ldr	r2, [pc, #84]	; (800625c <vTaskSwitchContext+0xbc>)
 8006206:	4413      	add	r3, r2
 8006208:	60bb      	str	r3, [r7, #8]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	605a      	str	r2, [r3, #4]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	3308      	adds	r3, #8
 800621c:	429a      	cmp	r2, r3
 800621e:	d104      	bne.n	800622a <vTaskSwitchContext+0x8a>
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	605a      	str	r2, [r3, #4]
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	4a0b      	ldr	r2, [pc, #44]	; (8006260 <vTaskSwitchContext+0xc0>)
 8006232:	6013      	str	r3, [r2, #0]
 8006234:	4a08      	ldr	r2, [pc, #32]	; (8006258 <vTaskSwitchContext+0xb8>)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800623a:	4b09      	ldr	r3, [pc, #36]	; (8006260 <vTaskSwitchContext+0xc0>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3354      	adds	r3, #84	; 0x54
 8006240:	4a08      	ldr	r2, [pc, #32]	; (8006264 <vTaskSwitchContext+0xc4>)
 8006242:	6013      	str	r3, [r2, #0]
}
 8006244:	bf00      	nop
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	20000e8c 	.word	0x20000e8c
 8006254:	20000e78 	.word	0x20000e78
 8006258:	20000e6c 	.word	0x20000e6c
 800625c:	20000994 	.word	0x20000994
 8006260:	20000990 	.word	0x20000990
 8006264:	20000010 	.word	0x20000010

08006268 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10a      	bne.n	800628e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	60fb      	str	r3, [r7, #12]
}
 800628a:	bf00      	nop
 800628c:	e7fe      	b.n	800628c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800628e:	4b07      	ldr	r3, [pc, #28]	; (80062ac <vTaskPlaceOnEventList+0x44>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	3318      	adds	r3, #24
 8006294:	4619      	mov	r1, r3
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7fe fe61 	bl	8004f5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800629c:	2101      	movs	r1, #1
 800629e:	6838      	ldr	r0, [r7, #0]
 80062a0:	f000 fa80 	bl	80067a4 <prvAddCurrentTaskToDelayedList>
}
 80062a4:	bf00      	nop
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	20000990 	.word	0x20000990

080062b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10a      	bne.n	80062d8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80062c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c6:	f383 8811 	msr	BASEPRI, r3
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	617b      	str	r3, [r7, #20]
}
 80062d4:	bf00      	nop
 80062d6:	e7fe      	b.n	80062d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062d8:	4b0a      	ldr	r3, [pc, #40]	; (8006304 <vTaskPlaceOnEventListRestricted+0x54>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	3318      	adds	r3, #24
 80062de:	4619      	mov	r1, r3
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f7fe fe18 	bl	8004f16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80062ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80062f2:	6879      	ldr	r1, [r7, #4]
 80062f4:	68b8      	ldr	r0, [r7, #8]
 80062f6:	f000 fa55 	bl	80067a4 <prvAddCurrentTaskToDelayedList>
	}
 80062fa:	bf00      	nop
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	20000990 	.word	0x20000990

08006308 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10a      	bne.n	8006334 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	60fb      	str	r3, [r7, #12]
}
 8006330:	bf00      	nop
 8006332:	e7fe      	b.n	8006332 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	3318      	adds	r3, #24
 8006338:	4618      	mov	r0, r3
 800633a:	f7fe fe49 	bl	8004fd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800633e:	4b1e      	ldr	r3, [pc, #120]	; (80063b8 <xTaskRemoveFromEventList+0xb0>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d11d      	bne.n	8006382 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	3304      	adds	r3, #4
 800634a:	4618      	mov	r0, r3
 800634c:	f7fe fe40 	bl	8004fd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006354:	4b19      	ldr	r3, [pc, #100]	; (80063bc <xTaskRemoveFromEventList+0xb4>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	429a      	cmp	r2, r3
 800635a:	d903      	bls.n	8006364 <xTaskRemoveFromEventList+0x5c>
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006360:	4a16      	ldr	r2, [pc, #88]	; (80063bc <xTaskRemoveFromEventList+0xb4>)
 8006362:	6013      	str	r3, [r2, #0]
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006368:	4613      	mov	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4413      	add	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4a13      	ldr	r2, [pc, #76]	; (80063c0 <xTaskRemoveFromEventList+0xb8>)
 8006372:	441a      	add	r2, r3
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	3304      	adds	r3, #4
 8006378:	4619      	mov	r1, r3
 800637a:	4610      	mov	r0, r2
 800637c:	f7fe fdcb 	bl	8004f16 <vListInsertEnd>
 8006380:	e005      	b.n	800638e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	3318      	adds	r3, #24
 8006386:	4619      	mov	r1, r3
 8006388:	480e      	ldr	r0, [pc, #56]	; (80063c4 <xTaskRemoveFromEventList+0xbc>)
 800638a:	f7fe fdc4 	bl	8004f16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006392:	4b0d      	ldr	r3, [pc, #52]	; (80063c8 <xTaskRemoveFromEventList+0xc0>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006398:	429a      	cmp	r2, r3
 800639a:	d905      	bls.n	80063a8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800639c:	2301      	movs	r3, #1
 800639e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063a0:	4b0a      	ldr	r3, [pc, #40]	; (80063cc <xTaskRemoveFromEventList+0xc4>)
 80063a2:	2201      	movs	r2, #1
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	e001      	b.n	80063ac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80063a8:	2300      	movs	r3, #0
 80063aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80063ac:	697b      	ldr	r3, [r7, #20]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3718      	adds	r7, #24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	20000e8c 	.word	0x20000e8c
 80063bc:	20000e6c 	.word	0x20000e6c
 80063c0:	20000994 	.word	0x20000994
 80063c4:	20000e24 	.word	0x20000e24
 80063c8:	20000990 	.word	0x20000990
 80063cc:	20000e78 	.word	0x20000e78

080063d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80063d8:	4b06      	ldr	r3, [pc, #24]	; (80063f4 <vTaskInternalSetTimeOutState+0x24>)
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80063e0:	4b05      	ldr	r3, [pc, #20]	; (80063f8 <vTaskInternalSetTimeOutState+0x28>)
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	605a      	str	r2, [r3, #4]
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr
 80063f4:	20000e7c 	.word	0x20000e7c
 80063f8:	20000e68 	.word	0x20000e68

080063fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b088      	sub	sp, #32
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	613b      	str	r3, [r7, #16]
}
 800641e:	bf00      	nop
 8006420:	e7fe      	b.n	8006420 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10a      	bne.n	800643e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	60fb      	str	r3, [r7, #12]
}
 800643a:	bf00      	nop
 800643c:	e7fe      	b.n	800643c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800643e:	f000 fe81 	bl	8007144 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006442:	4b1d      	ldr	r3, [pc, #116]	; (80064b8 <xTaskCheckForTimeOut+0xbc>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800645a:	d102      	bne.n	8006462 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800645c:	2300      	movs	r3, #0
 800645e:	61fb      	str	r3, [r7, #28]
 8006460:	e023      	b.n	80064aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	4b15      	ldr	r3, [pc, #84]	; (80064bc <xTaskCheckForTimeOut+0xc0>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	429a      	cmp	r2, r3
 800646c:	d007      	beq.n	800647e <xTaskCheckForTimeOut+0x82>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	429a      	cmp	r2, r3
 8006476:	d302      	bcc.n	800647e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006478:	2301      	movs	r3, #1
 800647a:	61fb      	str	r3, [r7, #28]
 800647c:	e015      	b.n	80064aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	429a      	cmp	r2, r3
 8006486:	d20b      	bcs.n	80064a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	1ad2      	subs	r2, r2, r3
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7ff ff9b 	bl	80063d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800649a:	2300      	movs	r3, #0
 800649c:	61fb      	str	r3, [r7, #28]
 800649e:	e004      	b.n	80064aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	2200      	movs	r2, #0
 80064a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80064a6:	2301      	movs	r3, #1
 80064a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80064aa:	f000 fe7b 	bl	80071a4 <vPortExitCritical>

	return xReturn;
 80064ae:	69fb      	ldr	r3, [r7, #28]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3720      	adds	r7, #32
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	20000e68 	.word	0x20000e68
 80064bc:	20000e7c 	.word	0x20000e7c

080064c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80064c0:	b480      	push	{r7}
 80064c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80064c4:	4b03      	ldr	r3, [pc, #12]	; (80064d4 <vTaskMissedYield+0x14>)
 80064c6:	2201      	movs	r2, #1
 80064c8:	601a      	str	r2, [r3, #0]
}
 80064ca:	bf00      	nop
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr
 80064d4:	20000e78 	.word	0x20000e78

080064d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80064e0:	f000 f852 	bl	8006588 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80064e4:	4b06      	ldr	r3, [pc, #24]	; (8006500 <prvIdleTask+0x28>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d9f9      	bls.n	80064e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80064ec:	4b05      	ldr	r3, [pc, #20]	; (8006504 <prvIdleTask+0x2c>)
 80064ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80064fc:	e7f0      	b.n	80064e0 <prvIdleTask+0x8>
 80064fe:	bf00      	nop
 8006500:	20000994 	.word	0x20000994
 8006504:	e000ed04 	.word	0xe000ed04

08006508 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800650e:	2300      	movs	r3, #0
 8006510:	607b      	str	r3, [r7, #4]
 8006512:	e00c      	b.n	800652e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	4613      	mov	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4a12      	ldr	r2, [pc, #72]	; (8006568 <prvInitialiseTaskLists+0x60>)
 8006520:	4413      	add	r3, r2
 8006522:	4618      	mov	r0, r3
 8006524:	f7fe fcca 	bl	8004ebc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	3301      	adds	r3, #1
 800652c:	607b      	str	r3, [r7, #4]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b37      	cmp	r3, #55	; 0x37
 8006532:	d9ef      	bls.n	8006514 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006534:	480d      	ldr	r0, [pc, #52]	; (800656c <prvInitialiseTaskLists+0x64>)
 8006536:	f7fe fcc1 	bl	8004ebc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800653a:	480d      	ldr	r0, [pc, #52]	; (8006570 <prvInitialiseTaskLists+0x68>)
 800653c:	f7fe fcbe 	bl	8004ebc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006540:	480c      	ldr	r0, [pc, #48]	; (8006574 <prvInitialiseTaskLists+0x6c>)
 8006542:	f7fe fcbb 	bl	8004ebc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006546:	480c      	ldr	r0, [pc, #48]	; (8006578 <prvInitialiseTaskLists+0x70>)
 8006548:	f7fe fcb8 	bl	8004ebc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800654c:	480b      	ldr	r0, [pc, #44]	; (800657c <prvInitialiseTaskLists+0x74>)
 800654e:	f7fe fcb5 	bl	8004ebc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006552:	4b0b      	ldr	r3, [pc, #44]	; (8006580 <prvInitialiseTaskLists+0x78>)
 8006554:	4a05      	ldr	r2, [pc, #20]	; (800656c <prvInitialiseTaskLists+0x64>)
 8006556:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006558:	4b0a      	ldr	r3, [pc, #40]	; (8006584 <prvInitialiseTaskLists+0x7c>)
 800655a:	4a05      	ldr	r2, [pc, #20]	; (8006570 <prvInitialiseTaskLists+0x68>)
 800655c:	601a      	str	r2, [r3, #0]
}
 800655e:	bf00      	nop
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	20000994 	.word	0x20000994
 800656c:	20000df4 	.word	0x20000df4
 8006570:	20000e08 	.word	0x20000e08
 8006574:	20000e24 	.word	0x20000e24
 8006578:	20000e38 	.word	0x20000e38
 800657c:	20000e50 	.word	0x20000e50
 8006580:	20000e1c 	.word	0x20000e1c
 8006584:	20000e20 	.word	0x20000e20

08006588 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800658e:	e019      	b.n	80065c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006590:	f000 fdd8 	bl	8007144 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006594:	4b10      	ldr	r3, [pc, #64]	; (80065d8 <prvCheckTasksWaitingTermination+0x50>)
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	3304      	adds	r3, #4
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7fe fd15 	bl	8004fd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065a6:	4b0d      	ldr	r3, [pc, #52]	; (80065dc <prvCheckTasksWaitingTermination+0x54>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	4a0b      	ldr	r2, [pc, #44]	; (80065dc <prvCheckTasksWaitingTermination+0x54>)
 80065ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065b0:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <prvCheckTasksWaitingTermination+0x58>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3b01      	subs	r3, #1
 80065b6:	4a0a      	ldr	r2, [pc, #40]	; (80065e0 <prvCheckTasksWaitingTermination+0x58>)
 80065b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80065ba:	f000 fdf3 	bl	80071a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f810 	bl	80065e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065c4:	4b06      	ldr	r3, [pc, #24]	; (80065e0 <prvCheckTasksWaitingTermination+0x58>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1e1      	bne.n	8006590 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80065cc:	bf00      	nop
 80065ce:	bf00      	nop
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20000e38 	.word	0x20000e38
 80065dc:	20000e64 	.word	0x20000e64
 80065e0:	20000e4c 	.word	0x20000e4c

080065e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3354      	adds	r3, #84	; 0x54
 80065f0:	4618      	mov	r0, r3
 80065f2:	f001 f8fd 	bl	80077f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d108      	bne.n	8006612 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006604:	4618      	mov	r0, r3
 8006606:	f000 ff8b 	bl	8007520 <vPortFree>
				vPortFree( pxTCB );
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 ff88 	bl	8007520 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006610:	e018      	b.n	8006644 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006618:	2b01      	cmp	r3, #1
 800661a:	d103      	bne.n	8006624 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 ff7f 	bl	8007520 <vPortFree>
	}
 8006622:	e00f      	b.n	8006644 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800662a:	2b02      	cmp	r3, #2
 800662c:	d00a      	beq.n	8006644 <prvDeleteTCB+0x60>
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	60fb      	str	r3, [r7, #12]
}
 8006640:	bf00      	nop
 8006642:	e7fe      	b.n	8006642 <prvDeleteTCB+0x5e>
	}
 8006644:	bf00      	nop
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006652:	4b0c      	ldr	r3, [pc, #48]	; (8006684 <prvResetNextTaskUnblockTime+0x38>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d104      	bne.n	8006666 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800665c:	4b0a      	ldr	r3, [pc, #40]	; (8006688 <prvResetNextTaskUnblockTime+0x3c>)
 800665e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006662:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006664:	e008      	b.n	8006678 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006666:	4b07      	ldr	r3, [pc, #28]	; (8006684 <prvResetNextTaskUnblockTime+0x38>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	4a04      	ldr	r2, [pc, #16]	; (8006688 <prvResetNextTaskUnblockTime+0x3c>)
 8006676:	6013      	str	r3, [r2, #0]
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr
 8006684:	20000e1c 	.word	0x20000e1c
 8006688:	20000e84 	.word	0x20000e84

0800668c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006692:	4b0b      	ldr	r3, [pc, #44]	; (80066c0 <xTaskGetSchedulerState+0x34>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d102      	bne.n	80066a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800669a:	2301      	movs	r3, #1
 800669c:	607b      	str	r3, [r7, #4]
 800669e:	e008      	b.n	80066b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066a0:	4b08      	ldr	r3, [pc, #32]	; (80066c4 <xTaskGetSchedulerState+0x38>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d102      	bne.n	80066ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80066a8:	2302      	movs	r3, #2
 80066aa:	607b      	str	r3, [r7, #4]
 80066ac:	e001      	b.n	80066b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80066ae:	2300      	movs	r3, #0
 80066b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80066b2:	687b      	ldr	r3, [r7, #4]
	}
 80066b4:	4618      	mov	r0, r3
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	20000e70 	.word	0x20000e70
 80066c4:	20000e8c 	.word	0x20000e8c

080066c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80066d4:	2300      	movs	r3, #0
 80066d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d056      	beq.n	800678c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80066de:	4b2e      	ldr	r3, [pc, #184]	; (8006798 <xTaskPriorityDisinherit+0xd0>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d00a      	beq.n	80066fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80066e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ec:	f383 8811 	msr	BASEPRI, r3
 80066f0:	f3bf 8f6f 	isb	sy
 80066f4:	f3bf 8f4f 	dsb	sy
 80066f8:	60fb      	str	r3, [r7, #12]
}
 80066fa:	bf00      	nop
 80066fc:	e7fe      	b.n	80066fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10a      	bne.n	800671c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	60bb      	str	r3, [r7, #8]
}
 8006718:	bf00      	nop
 800671a:	e7fe      	b.n	800671a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006720:	1e5a      	subs	r2, r3, #1
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800672e:	429a      	cmp	r2, r3
 8006730:	d02c      	beq.n	800678c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006736:	2b00      	cmp	r3, #0
 8006738:	d128      	bne.n	800678c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	3304      	adds	r3, #4
 800673e:	4618      	mov	r0, r3
 8006740:	f7fe fc46 	bl	8004fd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006750:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675c:	4b0f      	ldr	r3, [pc, #60]	; (800679c <xTaskPriorityDisinherit+0xd4>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	429a      	cmp	r2, r3
 8006762:	d903      	bls.n	800676c <xTaskPriorityDisinherit+0xa4>
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006768:	4a0c      	ldr	r2, [pc, #48]	; (800679c <xTaskPriorityDisinherit+0xd4>)
 800676a:	6013      	str	r3, [r2, #0]
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4a09      	ldr	r2, [pc, #36]	; (80067a0 <xTaskPriorityDisinherit+0xd8>)
 800677a:	441a      	add	r2, r3
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	3304      	adds	r3, #4
 8006780:	4619      	mov	r1, r3
 8006782:	4610      	mov	r0, r2
 8006784:	f7fe fbc7 	bl	8004f16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006788:	2301      	movs	r3, #1
 800678a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800678c:	697b      	ldr	r3, [r7, #20]
	}
 800678e:	4618      	mov	r0, r3
 8006790:	3718      	adds	r7, #24
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	20000990 	.word	0x20000990
 800679c:	20000e6c 	.word	0x20000e6c
 80067a0:	20000994 	.word	0x20000994

080067a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067ae:	4b21      	ldr	r3, [pc, #132]	; (8006834 <prvAddCurrentTaskToDelayedList+0x90>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067b4:	4b20      	ldr	r3, [pc, #128]	; (8006838 <prvAddCurrentTaskToDelayedList+0x94>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	3304      	adds	r3, #4
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fe fc08 	bl	8004fd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067c6:	d10a      	bne.n	80067de <prvAddCurrentTaskToDelayedList+0x3a>
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d007      	beq.n	80067de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067ce:	4b1a      	ldr	r3, [pc, #104]	; (8006838 <prvAddCurrentTaskToDelayedList+0x94>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3304      	adds	r3, #4
 80067d4:	4619      	mov	r1, r3
 80067d6:	4819      	ldr	r0, [pc, #100]	; (800683c <prvAddCurrentTaskToDelayedList+0x98>)
 80067d8:	f7fe fb9d 	bl	8004f16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80067dc:	e026      	b.n	800682c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4413      	add	r3, r2
 80067e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067e6:	4b14      	ldr	r3, [pc, #80]	; (8006838 <prvAddCurrentTaskToDelayedList+0x94>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d209      	bcs.n	800680a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067f6:	4b12      	ldr	r3, [pc, #72]	; (8006840 <prvAddCurrentTaskToDelayedList+0x9c>)
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	4b0f      	ldr	r3, [pc, #60]	; (8006838 <prvAddCurrentTaskToDelayedList+0x94>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3304      	adds	r3, #4
 8006800:	4619      	mov	r1, r3
 8006802:	4610      	mov	r0, r2
 8006804:	f7fe fbab 	bl	8004f5e <vListInsert>
}
 8006808:	e010      	b.n	800682c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800680a:	4b0e      	ldr	r3, [pc, #56]	; (8006844 <prvAddCurrentTaskToDelayedList+0xa0>)
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	4b0a      	ldr	r3, [pc, #40]	; (8006838 <prvAddCurrentTaskToDelayedList+0x94>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3304      	adds	r3, #4
 8006814:	4619      	mov	r1, r3
 8006816:	4610      	mov	r0, r2
 8006818:	f7fe fba1 	bl	8004f5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800681c:	4b0a      	ldr	r3, [pc, #40]	; (8006848 <prvAddCurrentTaskToDelayedList+0xa4>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	429a      	cmp	r2, r3
 8006824:	d202      	bcs.n	800682c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006826:	4a08      	ldr	r2, [pc, #32]	; (8006848 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	6013      	str	r3, [r2, #0]
}
 800682c:	bf00      	nop
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	20000e68 	.word	0x20000e68
 8006838:	20000990 	.word	0x20000990
 800683c:	20000e50 	.word	0x20000e50
 8006840:	20000e20 	.word	0x20000e20
 8006844:	20000e1c 	.word	0x20000e1c
 8006848:	20000e84 	.word	0x20000e84

0800684c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b08a      	sub	sp, #40	; 0x28
 8006850:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006852:	2300      	movs	r3, #0
 8006854:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006856:	f000 fb07 	bl	8006e68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800685a:	4b1c      	ldr	r3, [pc, #112]	; (80068cc <xTimerCreateTimerTask+0x80>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d021      	beq.n	80068a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006862:	2300      	movs	r3, #0
 8006864:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006866:	2300      	movs	r3, #0
 8006868:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800686a:	1d3a      	adds	r2, r7, #4
 800686c:	f107 0108 	add.w	r1, r7, #8
 8006870:	f107 030c 	add.w	r3, r7, #12
 8006874:	4618      	mov	r0, r3
 8006876:	f7fe fb07 	bl	8004e88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	9202      	str	r2, [sp, #8]
 8006882:	9301      	str	r3, [sp, #4]
 8006884:	2302      	movs	r3, #2
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	2300      	movs	r3, #0
 800688a:	460a      	mov	r2, r1
 800688c:	4910      	ldr	r1, [pc, #64]	; (80068d0 <xTimerCreateTimerTask+0x84>)
 800688e:	4811      	ldr	r0, [pc, #68]	; (80068d4 <xTimerCreateTimerTask+0x88>)
 8006890:	f7ff f8b4 	bl	80059fc <xTaskCreateStatic>
 8006894:	4603      	mov	r3, r0
 8006896:	4a10      	ldr	r2, [pc, #64]	; (80068d8 <xTimerCreateTimerTask+0x8c>)
 8006898:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800689a:	4b0f      	ldr	r3, [pc, #60]	; (80068d8 <xTimerCreateTimerTask+0x8c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80068a2:	2301      	movs	r3, #1
 80068a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10a      	bne.n	80068c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80068ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	613b      	str	r3, [r7, #16]
}
 80068be:	bf00      	nop
 80068c0:	e7fe      	b.n	80068c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80068c2:	697b      	ldr	r3, [r7, #20]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3718      	adds	r7, #24
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	20000ec0 	.word	0x20000ec0
 80068d0:	08007990 	.word	0x08007990
 80068d4:	08006a11 	.word	0x08006a11
 80068d8:	20000ec4 	.word	0x20000ec4

080068dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b08a      	sub	sp, #40	; 0x28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
 80068e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80068ea:	2300      	movs	r3, #0
 80068ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10a      	bne.n	800690a <xTimerGenericCommand+0x2e>
	__asm volatile
 80068f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	623b      	str	r3, [r7, #32]
}
 8006906:	bf00      	nop
 8006908:	e7fe      	b.n	8006908 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800690a:	4b1a      	ldr	r3, [pc, #104]	; (8006974 <xTimerGenericCommand+0x98>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d02a      	beq.n	8006968 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	2b05      	cmp	r3, #5
 8006922:	dc18      	bgt.n	8006956 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006924:	f7ff feb2 	bl	800668c <xTaskGetSchedulerState>
 8006928:	4603      	mov	r3, r0
 800692a:	2b02      	cmp	r3, #2
 800692c:	d109      	bne.n	8006942 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800692e:	4b11      	ldr	r3, [pc, #68]	; (8006974 <xTimerGenericCommand+0x98>)
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	f107 0110 	add.w	r1, r7, #16
 8006936:	2300      	movs	r3, #0
 8006938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800693a:	f7fe fc77 	bl	800522c <xQueueGenericSend>
 800693e:	6278      	str	r0, [r7, #36]	; 0x24
 8006940:	e012      	b.n	8006968 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006942:	4b0c      	ldr	r3, [pc, #48]	; (8006974 <xTimerGenericCommand+0x98>)
 8006944:	6818      	ldr	r0, [r3, #0]
 8006946:	f107 0110 	add.w	r1, r7, #16
 800694a:	2300      	movs	r3, #0
 800694c:	2200      	movs	r2, #0
 800694e:	f7fe fc6d 	bl	800522c <xQueueGenericSend>
 8006952:	6278      	str	r0, [r7, #36]	; 0x24
 8006954:	e008      	b.n	8006968 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006956:	4b07      	ldr	r3, [pc, #28]	; (8006974 <xTimerGenericCommand+0x98>)
 8006958:	6818      	ldr	r0, [r3, #0]
 800695a:	f107 0110 	add.w	r1, r7, #16
 800695e:	2300      	movs	r3, #0
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	f7fe fd61 	bl	8005428 <xQueueGenericSendFromISR>
 8006966:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800696a:	4618      	mov	r0, r3
 800696c:	3728      	adds	r7, #40	; 0x28
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20000ec0 	.word	0x20000ec0

08006978 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b088      	sub	sp, #32
 800697c:	af02      	add	r7, sp, #8
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006982:	4b22      	ldr	r3, [pc, #136]	; (8006a0c <prvProcessExpiredTimer+0x94>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	3304      	adds	r3, #4
 8006990:	4618      	mov	r0, r3
 8006992:	f7fe fb1d 	bl	8004fd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800699c:	f003 0304 	and.w	r3, r3, #4
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d022      	beq.n	80069ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	699a      	ldr	r2, [r3, #24]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	18d1      	adds	r1, r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	6978      	ldr	r0, [r7, #20]
 80069b2:	f000 f8d1 	bl	8006b58 <prvInsertTimerInActiveList>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d01f      	beq.n	80069fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069bc:	2300      	movs	r3, #0
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	2300      	movs	r3, #0
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	2100      	movs	r1, #0
 80069c6:	6978      	ldr	r0, [r7, #20]
 80069c8:	f7ff ff88 	bl	80068dc <xTimerGenericCommand>
 80069cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d113      	bne.n	80069fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	60fb      	str	r3, [r7, #12]
}
 80069e6:	bf00      	nop
 80069e8:	e7fe      	b.n	80069e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069f0:	f023 0301 	bic.w	r3, r3, #1
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	6a1b      	ldr	r3, [r3, #32]
 8006a00:	6978      	ldr	r0, [r7, #20]
 8006a02:	4798      	blx	r3
}
 8006a04:	bf00      	nop
 8006a06:	3718      	adds	r7, #24
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	20000eb8 	.word	0x20000eb8

08006a10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a18:	f107 0308 	add.w	r3, r7, #8
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 f857 	bl	8006ad0 <prvGetNextExpireTime>
 8006a22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	4619      	mov	r1, r3
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f000 f803 	bl	8006a34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a2e:	f000 f8d5 	bl	8006bdc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a32:	e7f1      	b.n	8006a18 <prvTimerTask+0x8>

08006a34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a3e:	f7ff fa39 	bl	8005eb4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a42:	f107 0308 	add.w	r3, r7, #8
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 f866 	bl	8006b18 <prvSampleTimeNow>
 8006a4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d130      	bne.n	8006ab6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10a      	bne.n	8006a70 <prvProcessTimerOrBlockTask+0x3c>
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d806      	bhi.n	8006a70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a62:	f7ff fa35 	bl	8005ed0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a66:	68f9      	ldr	r1, [r7, #12]
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7ff ff85 	bl	8006978 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a6e:	e024      	b.n	8006aba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d008      	beq.n	8006a88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a76:	4b13      	ldr	r3, [pc, #76]	; (8006ac4 <prvProcessTimerOrBlockTask+0x90>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <prvProcessTimerOrBlockTask+0x50>
 8006a80:	2301      	movs	r3, #1
 8006a82:	e000      	b.n	8006a86 <prvProcessTimerOrBlockTask+0x52>
 8006a84:	2300      	movs	r3, #0
 8006a86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a88:	4b0f      	ldr	r3, [pc, #60]	; (8006ac8 <prvProcessTimerOrBlockTask+0x94>)
 8006a8a:	6818      	ldr	r0, [r3, #0]
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	4619      	mov	r1, r3
 8006a96:	f7fe ff7d 	bl	8005994 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a9a:	f7ff fa19 	bl	8005ed0 <xTaskResumeAll>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10a      	bne.n	8006aba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006aa4:	4b09      	ldr	r3, [pc, #36]	; (8006acc <prvProcessTimerOrBlockTask+0x98>)
 8006aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	f3bf 8f6f 	isb	sy
}
 8006ab4:	e001      	b.n	8006aba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006ab6:	f7ff fa0b 	bl	8005ed0 <xTaskResumeAll>
}
 8006aba:	bf00      	nop
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	20000ebc 	.word	0x20000ebc
 8006ac8:	20000ec0 	.word	0x20000ec0
 8006acc:	e000ed04 	.word	0xe000ed04

08006ad0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ad8:	4b0e      	ldr	r3, [pc, #56]	; (8006b14 <prvGetNextExpireTime+0x44>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <prvGetNextExpireTime+0x16>
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	e000      	b.n	8006ae8 <prvGetNextExpireTime+0x18>
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d105      	bne.n	8006b00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006af4:	4b07      	ldr	r3, [pc, #28]	; (8006b14 <prvGetNextExpireTime+0x44>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	60fb      	str	r3, [r7, #12]
 8006afe:	e001      	b.n	8006b04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b00:	2300      	movs	r3, #0
 8006b02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b04:	68fb      	ldr	r3, [r7, #12]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	20000eb8 	.word	0x20000eb8

08006b18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b20:	f7ff fa74 	bl	800600c <xTaskGetTickCount>
 8006b24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b26:	4b0b      	ldr	r3, [pc, #44]	; (8006b54 <prvSampleTimeNow+0x3c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d205      	bcs.n	8006b3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b30:	f000 f936 	bl	8006da0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	e002      	b.n	8006b42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b42:	4a04      	ldr	r2, [pc, #16]	; (8006b54 <prvSampleTimeNow+0x3c>)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b48:	68fb      	ldr	r3, [r7, #12]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	20000ec8 	.word	0x20000ec8

08006b58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
 8006b64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b66:	2300      	movs	r3, #0
 8006b68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d812      	bhi.n	8006ba4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	1ad2      	subs	r2, r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d302      	bcc.n	8006b92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	e01b      	b.n	8006bca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b92:	4b10      	ldr	r3, [pc, #64]	; (8006bd4 <prvInsertTimerInActiveList+0x7c>)
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	3304      	adds	r3, #4
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	4610      	mov	r0, r2
 8006b9e:	f7fe f9de 	bl	8004f5e <vListInsert>
 8006ba2:	e012      	b.n	8006bca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d206      	bcs.n	8006bba <prvInsertTimerInActiveList+0x62>
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d302      	bcc.n	8006bba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	e007      	b.n	8006bca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bba:	4b07      	ldr	r3, [pc, #28]	; (8006bd8 <prvInsertTimerInActiveList+0x80>)
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	f7fe f9ca 	bl	8004f5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006bca:	697b      	ldr	r3, [r7, #20]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	20000ebc 	.word	0x20000ebc
 8006bd8:	20000eb8 	.word	0x20000eb8

08006bdc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b08e      	sub	sp, #56	; 0x38
 8006be0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006be2:	e0ca      	b.n	8006d7a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	da18      	bge.n	8006c1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006bea:	1d3b      	adds	r3, r7, #4
 8006bec:	3304      	adds	r3, #4
 8006bee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10a      	bne.n	8006c0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	61fb      	str	r3, [r7, #28]
}
 8006c08:	bf00      	nop
 8006c0a:	e7fe      	b.n	8006c0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c12:	6850      	ldr	r0, [r2, #4]
 8006c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c16:	6892      	ldr	r2, [r2, #8]
 8006c18:	4611      	mov	r1, r2
 8006c1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f2c0 80aa 	blt.w	8006d78 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d004      	beq.n	8006c3a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c32:	3304      	adds	r3, #4
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7fe f9cb 	bl	8004fd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c3a:	463b      	mov	r3, r7
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7ff ff6b 	bl	8006b18 <prvSampleTimeNow>
 8006c42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b09      	cmp	r3, #9
 8006c48:	f200 8097 	bhi.w	8006d7a <prvProcessReceivedCommands+0x19e>
 8006c4c:	a201      	add	r2, pc, #4	; (adr r2, 8006c54 <prvProcessReceivedCommands+0x78>)
 8006c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c52:	bf00      	nop
 8006c54:	08006c7d 	.word	0x08006c7d
 8006c58:	08006c7d 	.word	0x08006c7d
 8006c5c:	08006c7d 	.word	0x08006c7d
 8006c60:	08006cf1 	.word	0x08006cf1
 8006c64:	08006d05 	.word	0x08006d05
 8006c68:	08006d4f 	.word	0x08006d4f
 8006c6c:	08006c7d 	.word	0x08006c7d
 8006c70:	08006c7d 	.word	0x08006c7d
 8006c74:	08006cf1 	.word	0x08006cf1
 8006c78:	08006d05 	.word	0x08006d05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c82:	f043 0301 	orr.w	r3, r3, #1
 8006c86:	b2da      	uxtb	r2, r3
 8006c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	18d1      	adds	r1, r2, r3
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c9c:	f7ff ff5c 	bl	8006b58 <prvInsertTimerInActiveList>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d069      	beq.n	8006d7a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d05e      	beq.n	8006d7a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	441a      	add	r2, r3
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	2300      	movs	r3, #0
 8006cca:	2100      	movs	r1, #0
 8006ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cce:	f7ff fe05 	bl	80068dc <xTimerGenericCommand>
 8006cd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d14f      	bne.n	8006d7a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cde:	f383 8811 	msr	BASEPRI, r3
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	61bb      	str	r3, [r7, #24]
}
 8006cec:	bf00      	nop
 8006cee:	e7fe      	b.n	8006cee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cf6:	f023 0301 	bic.w	r3, r3, #1
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006d02:	e03a      	b.n	8006d7a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d0a:	f043 0301 	orr.w	r3, r3, #1
 8006d0e:	b2da      	uxtb	r2, r3
 8006d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d10a      	bne.n	8006d3a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d28:	f383 8811 	msr	BASEPRI, r3
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	617b      	str	r3, [r7, #20]
}
 8006d36:	bf00      	nop
 8006d38:	e7fe      	b.n	8006d38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3c:	699a      	ldr	r2, [r3, #24]
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	18d1      	adds	r1, r2, r3
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d48:	f7ff ff06 	bl	8006b58 <prvInsertTimerInActiveList>
					break;
 8006d4c:	e015      	b.n	8006d7a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d103      	bne.n	8006d64 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d5e:	f000 fbdf 	bl	8007520 <vPortFree>
 8006d62:	e00a      	b.n	8006d7a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d6a:	f023 0301 	bic.w	r3, r3, #1
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d76:	e000      	b.n	8006d7a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006d78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d7a:	4b08      	ldr	r3, [pc, #32]	; (8006d9c <prvProcessReceivedCommands+0x1c0>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	1d39      	adds	r1, r7, #4
 8006d80:	2200      	movs	r2, #0
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7fe fbec 	bl	8005560 <xQueueReceive>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f47f af2a 	bne.w	8006be4 <prvProcessReceivedCommands+0x8>
	}
}
 8006d90:	bf00      	nop
 8006d92:	bf00      	nop
 8006d94:	3730      	adds	r7, #48	; 0x30
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	20000ec0 	.word	0x20000ec0

08006da0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006da6:	e048      	b.n	8006e3a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006da8:	4b2d      	ldr	r3, [pc, #180]	; (8006e60 <prvSwitchTimerLists+0xc0>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006db2:	4b2b      	ldr	r3, [pc, #172]	; (8006e60 <prvSwitchTimerLists+0xc0>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7fe f905 	bl	8004fd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dd4:	f003 0304 	and.w	r3, r3, #4
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d02e      	beq.n	8006e3a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	4413      	add	r3, r2
 8006de4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d90e      	bls.n	8006e0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dfa:	4b19      	ldr	r3, [pc, #100]	; (8006e60 <prvSwitchTimerLists+0xc0>)
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	3304      	adds	r3, #4
 8006e02:	4619      	mov	r1, r3
 8006e04:	4610      	mov	r0, r2
 8006e06:	f7fe f8aa 	bl	8004f5e <vListInsert>
 8006e0a:	e016      	b.n	8006e3a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	2300      	movs	r3, #0
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	2100      	movs	r1, #0
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f7ff fd60 	bl	80068dc <xTimerGenericCommand>
 8006e1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10a      	bne.n	8006e3a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	603b      	str	r3, [r7, #0]
}
 8006e36:	bf00      	nop
 8006e38:	e7fe      	b.n	8006e38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e3a:	4b09      	ldr	r3, [pc, #36]	; (8006e60 <prvSwitchTimerLists+0xc0>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1b1      	bne.n	8006da8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e44:	4b06      	ldr	r3, [pc, #24]	; (8006e60 <prvSwitchTimerLists+0xc0>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e4a:	4b06      	ldr	r3, [pc, #24]	; (8006e64 <prvSwitchTimerLists+0xc4>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a04      	ldr	r2, [pc, #16]	; (8006e60 <prvSwitchTimerLists+0xc0>)
 8006e50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e52:	4a04      	ldr	r2, [pc, #16]	; (8006e64 <prvSwitchTimerLists+0xc4>)
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	6013      	str	r3, [r2, #0]
}
 8006e58:	bf00      	nop
 8006e5a:	3718      	adds	r7, #24
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	20000eb8 	.word	0x20000eb8
 8006e64:	20000ebc 	.word	0x20000ebc

08006e68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e6e:	f000 f969 	bl	8007144 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e72:	4b15      	ldr	r3, [pc, #84]	; (8006ec8 <prvCheckForValidListAndQueue+0x60>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d120      	bne.n	8006ebc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e7a:	4814      	ldr	r0, [pc, #80]	; (8006ecc <prvCheckForValidListAndQueue+0x64>)
 8006e7c:	f7fe f81e 	bl	8004ebc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e80:	4813      	ldr	r0, [pc, #76]	; (8006ed0 <prvCheckForValidListAndQueue+0x68>)
 8006e82:	f7fe f81b 	bl	8004ebc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e86:	4b13      	ldr	r3, [pc, #76]	; (8006ed4 <prvCheckForValidListAndQueue+0x6c>)
 8006e88:	4a10      	ldr	r2, [pc, #64]	; (8006ecc <prvCheckForValidListAndQueue+0x64>)
 8006e8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e8c:	4b12      	ldr	r3, [pc, #72]	; (8006ed8 <prvCheckForValidListAndQueue+0x70>)
 8006e8e:	4a10      	ldr	r2, [pc, #64]	; (8006ed0 <prvCheckForValidListAndQueue+0x68>)
 8006e90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e92:	2300      	movs	r3, #0
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	4b11      	ldr	r3, [pc, #68]	; (8006edc <prvCheckForValidListAndQueue+0x74>)
 8006e98:	4a11      	ldr	r2, [pc, #68]	; (8006ee0 <prvCheckForValidListAndQueue+0x78>)
 8006e9a:	2110      	movs	r1, #16
 8006e9c:	200a      	movs	r0, #10
 8006e9e:	f7fe f929 	bl	80050f4 <xQueueGenericCreateStatic>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	4a08      	ldr	r2, [pc, #32]	; (8006ec8 <prvCheckForValidListAndQueue+0x60>)
 8006ea6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ea8:	4b07      	ldr	r3, [pc, #28]	; (8006ec8 <prvCheckForValidListAndQueue+0x60>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d005      	beq.n	8006ebc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006eb0:	4b05      	ldr	r3, [pc, #20]	; (8006ec8 <prvCheckForValidListAndQueue+0x60>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	490b      	ldr	r1, [pc, #44]	; (8006ee4 <prvCheckForValidListAndQueue+0x7c>)
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fe fd42 	bl	8005940 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ebc:	f000 f972 	bl	80071a4 <vPortExitCritical>
}
 8006ec0:	bf00      	nop
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20000ec0 	.word	0x20000ec0
 8006ecc:	20000e90 	.word	0x20000e90
 8006ed0:	20000ea4 	.word	0x20000ea4
 8006ed4:	20000eb8 	.word	0x20000eb8
 8006ed8:	20000ebc 	.word	0x20000ebc
 8006edc:	20000f6c 	.word	0x20000f6c
 8006ee0:	20000ecc 	.word	0x20000ecc
 8006ee4:	08007998 	.word	0x08007998

08006ee8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	3b04      	subs	r3, #4
 8006ef8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3b04      	subs	r3, #4
 8006f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	f023 0201 	bic.w	r2, r3, #1
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3b04      	subs	r3, #4
 8006f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f18:	4a0c      	ldr	r2, [pc, #48]	; (8006f4c <pxPortInitialiseStack+0x64>)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	3b14      	subs	r3, #20
 8006f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	3b04      	subs	r3, #4
 8006f2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f06f 0202 	mvn.w	r2, #2
 8006f36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3b20      	subs	r3, #32
 8006f3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	08006f51 	.word	0x08006f51

08006f50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f56:	2300      	movs	r3, #0
 8006f58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f5a:	4b12      	ldr	r3, [pc, #72]	; (8006fa4 <prvTaskExitError+0x54>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f62:	d00a      	beq.n	8006f7a <prvTaskExitError+0x2a>
	__asm volatile
 8006f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	60fb      	str	r3, [r7, #12]
}
 8006f76:	bf00      	nop
 8006f78:	e7fe      	b.n	8006f78 <prvTaskExitError+0x28>
	__asm volatile
 8006f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	60bb      	str	r3, [r7, #8]
}
 8006f8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f8e:	bf00      	nop
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d0fc      	beq.n	8006f90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f96:	bf00      	nop
 8006f98:	bf00      	nop
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	2000000c 	.word	0x2000000c
	...

08006fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006fb0:	4b07      	ldr	r3, [pc, #28]	; (8006fd0 <pxCurrentTCBConst2>)
 8006fb2:	6819      	ldr	r1, [r3, #0]
 8006fb4:	6808      	ldr	r0, [r1, #0]
 8006fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fba:	f380 8809 	msr	PSP, r0
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f04f 0000 	mov.w	r0, #0
 8006fc6:	f380 8811 	msr	BASEPRI, r0
 8006fca:	4770      	bx	lr
 8006fcc:	f3af 8000 	nop.w

08006fd0 <pxCurrentTCBConst2>:
 8006fd0:	20000990 	.word	0x20000990
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fd4:	bf00      	nop
 8006fd6:	bf00      	nop

08006fd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006fd8:	4808      	ldr	r0, [pc, #32]	; (8006ffc <prvPortStartFirstTask+0x24>)
 8006fda:	6800      	ldr	r0, [r0, #0]
 8006fdc:	6800      	ldr	r0, [r0, #0]
 8006fde:	f380 8808 	msr	MSP, r0
 8006fe2:	f04f 0000 	mov.w	r0, #0
 8006fe6:	f380 8814 	msr	CONTROL, r0
 8006fea:	b662      	cpsie	i
 8006fec:	b661      	cpsie	f
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	df00      	svc	0
 8006ff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006ffa:	bf00      	nop
 8006ffc:	e000ed08 	.word	0xe000ed08

08007000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007006:	4b46      	ldr	r3, [pc, #280]	; (8007120 <xPortStartScheduler+0x120>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a46      	ldr	r2, [pc, #280]	; (8007124 <xPortStartScheduler+0x124>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d10a      	bne.n	8007026 <xPortStartScheduler+0x26>
	__asm volatile
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	613b      	str	r3, [r7, #16]
}
 8007022:	bf00      	nop
 8007024:	e7fe      	b.n	8007024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007026:	4b3e      	ldr	r3, [pc, #248]	; (8007120 <xPortStartScheduler+0x120>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a3f      	ldr	r2, [pc, #252]	; (8007128 <xPortStartScheduler+0x128>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d10a      	bne.n	8007046 <xPortStartScheduler+0x46>
	__asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	60fb      	str	r3, [r7, #12]
}
 8007042:	bf00      	nop
 8007044:	e7fe      	b.n	8007044 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007046:	4b39      	ldr	r3, [pc, #228]	; (800712c <xPortStartScheduler+0x12c>)
 8007048:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	b2db      	uxtb	r3, r3
 8007050:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	22ff      	movs	r2, #255	; 0xff
 8007056:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	b2db      	uxtb	r3, r3
 800705e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007060:	78fb      	ldrb	r3, [r7, #3]
 8007062:	b2db      	uxtb	r3, r3
 8007064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007068:	b2da      	uxtb	r2, r3
 800706a:	4b31      	ldr	r3, [pc, #196]	; (8007130 <xPortStartScheduler+0x130>)
 800706c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800706e:	4b31      	ldr	r3, [pc, #196]	; (8007134 <xPortStartScheduler+0x134>)
 8007070:	2207      	movs	r2, #7
 8007072:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007074:	e009      	b.n	800708a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007076:	4b2f      	ldr	r3, [pc, #188]	; (8007134 <xPortStartScheduler+0x134>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3b01      	subs	r3, #1
 800707c:	4a2d      	ldr	r2, [pc, #180]	; (8007134 <xPortStartScheduler+0x134>)
 800707e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	b2db      	uxtb	r3, r3
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	b2db      	uxtb	r3, r3
 8007088:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800708a:	78fb      	ldrb	r3, [r7, #3]
 800708c:	b2db      	uxtb	r3, r3
 800708e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007092:	2b80      	cmp	r3, #128	; 0x80
 8007094:	d0ef      	beq.n	8007076 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007096:	4b27      	ldr	r3, [pc, #156]	; (8007134 <xPortStartScheduler+0x134>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f1c3 0307 	rsb	r3, r3, #7
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d00a      	beq.n	80070b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	60bb      	str	r3, [r7, #8]
}
 80070b4:	bf00      	nop
 80070b6:	e7fe      	b.n	80070b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80070b8:	4b1e      	ldr	r3, [pc, #120]	; (8007134 <xPortStartScheduler+0x134>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	021b      	lsls	r3, r3, #8
 80070be:	4a1d      	ldr	r2, [pc, #116]	; (8007134 <xPortStartScheduler+0x134>)
 80070c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80070c2:	4b1c      	ldr	r3, [pc, #112]	; (8007134 <xPortStartScheduler+0x134>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070ca:	4a1a      	ldr	r2, [pc, #104]	; (8007134 <xPortStartScheduler+0x134>)
 80070cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070d6:	4b18      	ldr	r3, [pc, #96]	; (8007138 <xPortStartScheduler+0x138>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a17      	ldr	r2, [pc, #92]	; (8007138 <xPortStartScheduler+0x138>)
 80070dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070e2:	4b15      	ldr	r3, [pc, #84]	; (8007138 <xPortStartScheduler+0x138>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a14      	ldr	r2, [pc, #80]	; (8007138 <xPortStartScheduler+0x138>)
 80070e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80070ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070ee:	f000 f8dd 	bl	80072ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070f2:	4b12      	ldr	r3, [pc, #72]	; (800713c <xPortStartScheduler+0x13c>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070f8:	f000 f8fc 	bl	80072f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070fc:	4b10      	ldr	r3, [pc, #64]	; (8007140 <xPortStartScheduler+0x140>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a0f      	ldr	r2, [pc, #60]	; (8007140 <xPortStartScheduler+0x140>)
 8007102:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007106:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007108:	f7ff ff66 	bl	8006fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800710c:	f7ff f848 	bl	80061a0 <vTaskSwitchContext>
	prvTaskExitError();
 8007110:	f7ff ff1e 	bl	8006f50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3718      	adds	r7, #24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	e000ed00 	.word	0xe000ed00
 8007124:	410fc271 	.word	0x410fc271
 8007128:	410fc270 	.word	0x410fc270
 800712c:	e000e400 	.word	0xe000e400
 8007130:	20000fbc 	.word	0x20000fbc
 8007134:	20000fc0 	.word	0x20000fc0
 8007138:	e000ed20 	.word	0xe000ed20
 800713c:	2000000c 	.word	0x2000000c
 8007140:	e000ef34 	.word	0xe000ef34

08007144 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
	__asm volatile
 800714a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	607b      	str	r3, [r7, #4]
}
 800715c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800715e:	4b0f      	ldr	r3, [pc, #60]	; (800719c <vPortEnterCritical+0x58>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3301      	adds	r3, #1
 8007164:	4a0d      	ldr	r2, [pc, #52]	; (800719c <vPortEnterCritical+0x58>)
 8007166:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007168:	4b0c      	ldr	r3, [pc, #48]	; (800719c <vPortEnterCritical+0x58>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d10f      	bne.n	8007190 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007170:	4b0b      	ldr	r3, [pc, #44]	; (80071a0 <vPortEnterCritical+0x5c>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00a      	beq.n	8007190 <vPortEnterCritical+0x4c>
	__asm volatile
 800717a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717e:	f383 8811 	msr	BASEPRI, r3
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	603b      	str	r3, [r7, #0]
}
 800718c:	bf00      	nop
 800718e:	e7fe      	b.n	800718e <vPortEnterCritical+0x4a>
	}
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	2000000c 	.word	0x2000000c
 80071a0:	e000ed04 	.word	0xe000ed04

080071a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80071aa:	4b12      	ldr	r3, [pc, #72]	; (80071f4 <vPortExitCritical+0x50>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10a      	bne.n	80071c8 <vPortExitCritical+0x24>
	__asm volatile
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	607b      	str	r3, [r7, #4]
}
 80071c4:	bf00      	nop
 80071c6:	e7fe      	b.n	80071c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80071c8:	4b0a      	ldr	r3, [pc, #40]	; (80071f4 <vPortExitCritical+0x50>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	3b01      	subs	r3, #1
 80071ce:	4a09      	ldr	r2, [pc, #36]	; (80071f4 <vPortExitCritical+0x50>)
 80071d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071d2:	4b08      	ldr	r3, [pc, #32]	; (80071f4 <vPortExitCritical+0x50>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d105      	bne.n	80071e6 <vPortExitCritical+0x42>
 80071da:	2300      	movs	r3, #0
 80071dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	f383 8811 	msr	BASEPRI, r3
}
 80071e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071e6:	bf00      	nop
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	2000000c 	.word	0x2000000c
	...

08007200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007200:	f3ef 8009 	mrs	r0, PSP
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	4b15      	ldr	r3, [pc, #84]	; (8007260 <pxCurrentTCBConst>)
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	f01e 0f10 	tst.w	lr, #16
 8007210:	bf08      	it	eq
 8007212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721a:	6010      	str	r0, [r2, #0]
 800721c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007220:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007224:	f380 8811 	msr	BASEPRI, r0
 8007228:	f3bf 8f4f 	dsb	sy
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f7fe ffb6 	bl	80061a0 <vTaskSwitchContext>
 8007234:	f04f 0000 	mov.w	r0, #0
 8007238:	f380 8811 	msr	BASEPRI, r0
 800723c:	bc09      	pop	{r0, r3}
 800723e:	6819      	ldr	r1, [r3, #0]
 8007240:	6808      	ldr	r0, [r1, #0]
 8007242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007246:	f01e 0f10 	tst.w	lr, #16
 800724a:	bf08      	it	eq
 800724c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007250:	f380 8809 	msr	PSP, r0
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	f3af 8000 	nop.w

08007260 <pxCurrentTCBConst>:
 8007260:	20000990 	.word	0x20000990
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007264:	bf00      	nop
 8007266:	bf00      	nop

08007268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	607b      	str	r3, [r7, #4]
}
 8007280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007282:	f7fe fed3 	bl	800602c <xTaskIncrementTick>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d003      	beq.n	8007294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800728c:	4b06      	ldr	r3, [pc, #24]	; (80072a8 <xPortSysTickHandler+0x40>)
 800728e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	2300      	movs	r3, #0
 8007296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	f383 8811 	msr	BASEPRI, r3
}
 800729e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80072a0:	bf00      	nop
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	e000ed04 	.word	0xe000ed04

080072ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80072ac:	b480      	push	{r7}
 80072ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072b0:	4b0b      	ldr	r3, [pc, #44]	; (80072e0 <vPortSetupTimerInterrupt+0x34>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072b6:	4b0b      	ldr	r3, [pc, #44]	; (80072e4 <vPortSetupTimerInterrupt+0x38>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072bc:	4b0a      	ldr	r3, [pc, #40]	; (80072e8 <vPortSetupTimerInterrupt+0x3c>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a0a      	ldr	r2, [pc, #40]	; (80072ec <vPortSetupTimerInterrupt+0x40>)
 80072c2:	fba2 2303 	umull	r2, r3, r2, r3
 80072c6:	099b      	lsrs	r3, r3, #6
 80072c8:	4a09      	ldr	r2, [pc, #36]	; (80072f0 <vPortSetupTimerInterrupt+0x44>)
 80072ca:	3b01      	subs	r3, #1
 80072cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072ce:	4b04      	ldr	r3, [pc, #16]	; (80072e0 <vPortSetupTimerInterrupt+0x34>)
 80072d0:	2207      	movs	r2, #7
 80072d2:	601a      	str	r2, [r3, #0]
}
 80072d4:	bf00      	nop
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	e000e010 	.word	0xe000e010
 80072e4:	e000e018 	.word	0xe000e018
 80072e8:	20000000 	.word	0x20000000
 80072ec:	10624dd3 	.word	0x10624dd3
 80072f0:	e000e014 	.word	0xe000e014

080072f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007304 <vPortEnableVFP+0x10>
 80072f8:	6801      	ldr	r1, [r0, #0]
 80072fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80072fe:	6001      	str	r1, [r0, #0]
 8007300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007302:	bf00      	nop
 8007304:	e000ed88 	.word	0xe000ed88

08007308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800730e:	f3ef 8305 	mrs	r3, IPSR
 8007312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2b0f      	cmp	r3, #15
 8007318:	d914      	bls.n	8007344 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800731a:	4a17      	ldr	r2, [pc, #92]	; (8007378 <vPortValidateInterruptPriority+0x70>)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4413      	add	r3, r2
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007324:	4b15      	ldr	r3, [pc, #84]	; (800737c <vPortValidateInterruptPriority+0x74>)
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	7afa      	ldrb	r2, [r7, #11]
 800732a:	429a      	cmp	r2, r3
 800732c:	d20a      	bcs.n	8007344 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	607b      	str	r3, [r7, #4]
}
 8007340:	bf00      	nop
 8007342:	e7fe      	b.n	8007342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007344:	4b0e      	ldr	r3, [pc, #56]	; (8007380 <vPortValidateInterruptPriority+0x78>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800734c:	4b0d      	ldr	r3, [pc, #52]	; (8007384 <vPortValidateInterruptPriority+0x7c>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	429a      	cmp	r2, r3
 8007352:	d90a      	bls.n	800736a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007358:	f383 8811 	msr	BASEPRI, r3
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	603b      	str	r3, [r7, #0]
}
 8007366:	bf00      	nop
 8007368:	e7fe      	b.n	8007368 <vPortValidateInterruptPriority+0x60>
	}
 800736a:	bf00      	nop
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	e000e3f0 	.word	0xe000e3f0
 800737c:	20000fbc 	.word	0x20000fbc
 8007380:	e000ed0c 	.word	0xe000ed0c
 8007384:	20000fc0 	.word	0x20000fc0

08007388 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b08a      	sub	sp, #40	; 0x28
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007390:	2300      	movs	r3, #0
 8007392:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007394:	f7fe fd8e 	bl	8005eb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007398:	4b5b      	ldr	r3, [pc, #364]	; (8007508 <pvPortMalloc+0x180>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80073a0:	f000 f920 	bl	80075e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073a4:	4b59      	ldr	r3, [pc, #356]	; (800750c <pvPortMalloc+0x184>)
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4013      	ands	r3, r2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f040 8093 	bne.w	80074d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d01d      	beq.n	80073f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80073b8:	2208      	movs	r2, #8
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4413      	add	r3, r2
 80073be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f003 0307 	and.w	r3, r3, #7
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d014      	beq.n	80073f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f023 0307 	bic.w	r3, r3, #7
 80073d0:	3308      	adds	r3, #8
 80073d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f003 0307 	and.w	r3, r3, #7
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <pvPortMalloc+0x6c>
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	617b      	str	r3, [r7, #20]
}
 80073f0:	bf00      	nop
 80073f2:	e7fe      	b.n	80073f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d06e      	beq.n	80074d8 <pvPortMalloc+0x150>
 80073fa:	4b45      	ldr	r3, [pc, #276]	; (8007510 <pvPortMalloc+0x188>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	429a      	cmp	r2, r3
 8007402:	d869      	bhi.n	80074d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007404:	4b43      	ldr	r3, [pc, #268]	; (8007514 <pvPortMalloc+0x18c>)
 8007406:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007408:	4b42      	ldr	r3, [pc, #264]	; (8007514 <pvPortMalloc+0x18c>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800740e:	e004      	b.n	800741a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	429a      	cmp	r2, r3
 8007422:	d903      	bls.n	800742c <pvPortMalloc+0xa4>
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1f1      	bne.n	8007410 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800742c:	4b36      	ldr	r3, [pc, #216]	; (8007508 <pvPortMalloc+0x180>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007432:	429a      	cmp	r2, r3
 8007434:	d050      	beq.n	80074d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2208      	movs	r2, #8
 800743c:	4413      	add	r3, r2
 800743e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	6a3b      	ldr	r3, [r7, #32]
 8007446:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	1ad2      	subs	r2, r2, r3
 8007450:	2308      	movs	r3, #8
 8007452:	005b      	lsls	r3, r3, #1
 8007454:	429a      	cmp	r2, r3
 8007456:	d91f      	bls.n	8007498 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4413      	add	r3, r2
 800745e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	f003 0307 	and.w	r3, r3, #7
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00a      	beq.n	8007480 <pvPortMalloc+0xf8>
	__asm volatile
 800746a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746e:	f383 8811 	msr	BASEPRI, r3
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	f3bf 8f4f 	dsb	sy
 800747a:	613b      	str	r3, [r7, #16]
}
 800747c:	bf00      	nop
 800747e:	e7fe      	b.n	800747e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	685a      	ldr	r2, [r3, #4]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	1ad2      	subs	r2, r2, r3
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007492:	69b8      	ldr	r0, [r7, #24]
 8007494:	f000 f908 	bl	80076a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007498:	4b1d      	ldr	r3, [pc, #116]	; (8007510 <pvPortMalloc+0x188>)
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	4a1b      	ldr	r2, [pc, #108]	; (8007510 <pvPortMalloc+0x188>)
 80074a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074a6:	4b1a      	ldr	r3, [pc, #104]	; (8007510 <pvPortMalloc+0x188>)
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	4b1b      	ldr	r3, [pc, #108]	; (8007518 <pvPortMalloc+0x190>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d203      	bcs.n	80074ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074b2:	4b17      	ldr	r3, [pc, #92]	; (8007510 <pvPortMalloc+0x188>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a18      	ldr	r2, [pc, #96]	; (8007518 <pvPortMalloc+0x190>)
 80074b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	4b13      	ldr	r3, [pc, #76]	; (800750c <pvPortMalloc+0x184>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	431a      	orrs	r2, r3
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	2200      	movs	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80074ce:	4b13      	ldr	r3, [pc, #76]	; (800751c <pvPortMalloc+0x194>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	3301      	adds	r3, #1
 80074d4:	4a11      	ldr	r2, [pc, #68]	; (800751c <pvPortMalloc+0x194>)
 80074d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074d8:	f7fe fcfa 	bl	8005ed0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	f003 0307 	and.w	r3, r3, #7
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00a      	beq.n	80074fc <pvPortMalloc+0x174>
	__asm volatile
 80074e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	60fb      	str	r3, [r7, #12]
}
 80074f8:	bf00      	nop
 80074fa:	e7fe      	b.n	80074fa <pvPortMalloc+0x172>
	return pvReturn;
 80074fc:	69fb      	ldr	r3, [r7, #28]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3728      	adds	r7, #40	; 0x28
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	20001b84 	.word	0x20001b84
 800750c:	20001b98 	.word	0x20001b98
 8007510:	20001b88 	.word	0x20001b88
 8007514:	20001b7c 	.word	0x20001b7c
 8007518:	20001b8c 	.word	0x20001b8c
 800751c:	20001b90 	.word	0x20001b90

08007520 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d04d      	beq.n	80075ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007532:	2308      	movs	r3, #8
 8007534:	425b      	negs	r3, r3
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	4413      	add	r3, r2
 800753a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	685a      	ldr	r2, [r3, #4]
 8007544:	4b24      	ldr	r3, [pc, #144]	; (80075d8 <vPortFree+0xb8>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4013      	ands	r3, r2
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10a      	bne.n	8007564 <vPortFree+0x44>
	__asm volatile
 800754e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	60fb      	str	r3, [r7, #12]
}
 8007560:	bf00      	nop
 8007562:	e7fe      	b.n	8007562 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00a      	beq.n	8007582 <vPortFree+0x62>
	__asm volatile
 800756c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	60bb      	str	r3, [r7, #8]
}
 800757e:	bf00      	nop
 8007580:	e7fe      	b.n	8007580 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	685a      	ldr	r2, [r3, #4]
 8007586:	4b14      	ldr	r3, [pc, #80]	; (80075d8 <vPortFree+0xb8>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4013      	ands	r3, r2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d01e      	beq.n	80075ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d11a      	bne.n	80075ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	4b0e      	ldr	r3, [pc, #56]	; (80075d8 <vPortFree+0xb8>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	43db      	mvns	r3, r3
 80075a2:	401a      	ands	r2, r3
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80075a8:	f7fe fc84 	bl	8005eb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	4b0a      	ldr	r3, [pc, #40]	; (80075dc <vPortFree+0xbc>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4413      	add	r3, r2
 80075b6:	4a09      	ldr	r2, [pc, #36]	; (80075dc <vPortFree+0xbc>)
 80075b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80075ba:	6938      	ldr	r0, [r7, #16]
 80075bc:	f000 f874 	bl	80076a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80075c0:	4b07      	ldr	r3, [pc, #28]	; (80075e0 <vPortFree+0xc0>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	3301      	adds	r3, #1
 80075c6:	4a06      	ldr	r2, [pc, #24]	; (80075e0 <vPortFree+0xc0>)
 80075c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80075ca:	f7fe fc81 	bl	8005ed0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075ce:	bf00      	nop
 80075d0:	3718      	adds	r7, #24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	20001b98 	.word	0x20001b98
 80075dc:	20001b88 	.word	0x20001b88
 80075e0:	20001b94 	.word	0x20001b94

080075e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80075ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075f0:	4b27      	ldr	r3, [pc, #156]	; (8007690 <prvHeapInit+0xac>)
 80075f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f003 0307 	and.w	r3, r3, #7
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00c      	beq.n	8007618 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	3307      	adds	r3, #7
 8007602:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f023 0307 	bic.w	r3, r3, #7
 800760a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	4a1f      	ldr	r2, [pc, #124]	; (8007690 <prvHeapInit+0xac>)
 8007614:	4413      	add	r3, r2
 8007616:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800761c:	4a1d      	ldr	r2, [pc, #116]	; (8007694 <prvHeapInit+0xb0>)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007622:	4b1c      	ldr	r3, [pc, #112]	; (8007694 <prvHeapInit+0xb0>)
 8007624:	2200      	movs	r2, #0
 8007626:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	4413      	add	r3, r2
 800762e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007630:	2208      	movs	r2, #8
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	1a9b      	subs	r3, r3, r2
 8007636:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f023 0307 	bic.w	r3, r3, #7
 800763e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4a15      	ldr	r2, [pc, #84]	; (8007698 <prvHeapInit+0xb4>)
 8007644:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007646:	4b14      	ldr	r3, [pc, #80]	; (8007698 <prvHeapInit+0xb4>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2200      	movs	r2, #0
 800764c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800764e:	4b12      	ldr	r3, [pc, #72]	; (8007698 <prvHeapInit+0xb4>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2200      	movs	r2, #0
 8007654:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	1ad2      	subs	r2, r2, r3
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007664:	4b0c      	ldr	r3, [pc, #48]	; (8007698 <prvHeapInit+0xb4>)
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	4a0a      	ldr	r2, [pc, #40]	; (800769c <prvHeapInit+0xb8>)
 8007672:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	4a09      	ldr	r2, [pc, #36]	; (80076a0 <prvHeapInit+0xbc>)
 800767a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800767c:	4b09      	ldr	r3, [pc, #36]	; (80076a4 <prvHeapInit+0xc0>)
 800767e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007682:	601a      	str	r2, [r3, #0]
}
 8007684:	bf00      	nop
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr
 8007690:	20000fc4 	.word	0x20000fc4
 8007694:	20001b7c 	.word	0x20001b7c
 8007698:	20001b84 	.word	0x20001b84
 800769c:	20001b8c 	.word	0x20001b8c
 80076a0:	20001b88 	.word	0x20001b88
 80076a4:	20001b98 	.word	0x20001b98

080076a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80076b0:	4b28      	ldr	r3, [pc, #160]	; (8007754 <prvInsertBlockIntoFreeList+0xac>)
 80076b2:	60fb      	str	r3, [r7, #12]
 80076b4:	e002      	b.n	80076bc <prvInsertBlockIntoFreeList+0x14>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	60fb      	str	r3, [r7, #12]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d8f7      	bhi.n	80076b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	4413      	add	r3, r2
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d108      	bne.n	80076ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	441a      	add	r2, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	441a      	add	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d118      	bne.n	8007730 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	4b15      	ldr	r3, [pc, #84]	; (8007758 <prvInsertBlockIntoFreeList+0xb0>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	429a      	cmp	r2, r3
 8007708:	d00d      	beq.n	8007726 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	441a      	add	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	e008      	b.n	8007738 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007726:	4b0c      	ldr	r3, [pc, #48]	; (8007758 <prvInsertBlockIntoFreeList+0xb0>)
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	601a      	str	r2, [r3, #0]
 800772e:	e003      	b.n	8007738 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	429a      	cmp	r2, r3
 800773e:	d002      	beq.n	8007746 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007746:	bf00      	nop
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	20001b7c 	.word	0x20001b7c
 8007758:	20001b84 	.word	0x20001b84

0800775c <__libc_init_array>:
 800775c:	b570      	push	{r4, r5, r6, lr}
 800775e:	4d0d      	ldr	r5, [pc, #52]	; (8007794 <__libc_init_array+0x38>)
 8007760:	4c0d      	ldr	r4, [pc, #52]	; (8007798 <__libc_init_array+0x3c>)
 8007762:	1b64      	subs	r4, r4, r5
 8007764:	10a4      	asrs	r4, r4, #2
 8007766:	2600      	movs	r6, #0
 8007768:	42a6      	cmp	r6, r4
 800776a:	d109      	bne.n	8007780 <__libc_init_array+0x24>
 800776c:	4d0b      	ldr	r5, [pc, #44]	; (800779c <__libc_init_array+0x40>)
 800776e:	4c0c      	ldr	r4, [pc, #48]	; (80077a0 <__libc_init_array+0x44>)
 8007770:	f000 f8f2 	bl	8007958 <_init>
 8007774:	1b64      	subs	r4, r4, r5
 8007776:	10a4      	asrs	r4, r4, #2
 8007778:	2600      	movs	r6, #0
 800777a:	42a6      	cmp	r6, r4
 800777c:	d105      	bne.n	800778a <__libc_init_array+0x2e>
 800777e:	bd70      	pop	{r4, r5, r6, pc}
 8007780:	f855 3b04 	ldr.w	r3, [r5], #4
 8007784:	4798      	blx	r3
 8007786:	3601      	adds	r6, #1
 8007788:	e7ee      	b.n	8007768 <__libc_init_array+0xc>
 800778a:	f855 3b04 	ldr.w	r3, [r5], #4
 800778e:	4798      	blx	r3
 8007790:	3601      	adds	r6, #1
 8007792:	e7f2      	b.n	800777a <__libc_init_array+0x1e>
 8007794:	08007a98 	.word	0x08007a98
 8007798:	08007a98 	.word	0x08007a98
 800779c:	08007a98 	.word	0x08007a98
 80077a0:	08007a9c 	.word	0x08007a9c

080077a4 <__retarget_lock_acquire_recursive>:
 80077a4:	4770      	bx	lr

080077a6 <__retarget_lock_release_recursive>:
 80077a6:	4770      	bx	lr

080077a8 <memcpy>:
 80077a8:	440a      	add	r2, r1
 80077aa:	4291      	cmp	r1, r2
 80077ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80077b0:	d100      	bne.n	80077b4 <memcpy+0xc>
 80077b2:	4770      	bx	lr
 80077b4:	b510      	push	{r4, lr}
 80077b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077be:	4291      	cmp	r1, r2
 80077c0:	d1f9      	bne.n	80077b6 <memcpy+0xe>
 80077c2:	bd10      	pop	{r4, pc}

080077c4 <memset>:
 80077c4:	4402      	add	r2, r0
 80077c6:	4603      	mov	r3, r0
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d100      	bne.n	80077ce <memset+0xa>
 80077cc:	4770      	bx	lr
 80077ce:	f803 1b01 	strb.w	r1, [r3], #1
 80077d2:	e7f9      	b.n	80077c8 <memset+0x4>

080077d4 <cleanup_glue>:
 80077d4:	b538      	push	{r3, r4, r5, lr}
 80077d6:	460c      	mov	r4, r1
 80077d8:	6809      	ldr	r1, [r1, #0]
 80077da:	4605      	mov	r5, r0
 80077dc:	b109      	cbz	r1, 80077e2 <cleanup_glue+0xe>
 80077de:	f7ff fff9 	bl	80077d4 <cleanup_glue>
 80077e2:	4621      	mov	r1, r4
 80077e4:	4628      	mov	r0, r5
 80077e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077ea:	f000 b869 	b.w	80078c0 <_free_r>
	...

080077f0 <_reclaim_reent>:
 80077f0:	4b2c      	ldr	r3, [pc, #176]	; (80078a4 <_reclaim_reent+0xb4>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4283      	cmp	r3, r0
 80077f6:	b570      	push	{r4, r5, r6, lr}
 80077f8:	4604      	mov	r4, r0
 80077fa:	d051      	beq.n	80078a0 <_reclaim_reent+0xb0>
 80077fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80077fe:	b143      	cbz	r3, 8007812 <_reclaim_reent+0x22>
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d14a      	bne.n	800789c <_reclaim_reent+0xac>
 8007806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007808:	6819      	ldr	r1, [r3, #0]
 800780a:	b111      	cbz	r1, 8007812 <_reclaim_reent+0x22>
 800780c:	4620      	mov	r0, r4
 800780e:	f000 f857 	bl	80078c0 <_free_r>
 8007812:	6961      	ldr	r1, [r4, #20]
 8007814:	b111      	cbz	r1, 800781c <_reclaim_reent+0x2c>
 8007816:	4620      	mov	r0, r4
 8007818:	f000 f852 	bl	80078c0 <_free_r>
 800781c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800781e:	b111      	cbz	r1, 8007826 <_reclaim_reent+0x36>
 8007820:	4620      	mov	r0, r4
 8007822:	f000 f84d 	bl	80078c0 <_free_r>
 8007826:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007828:	b111      	cbz	r1, 8007830 <_reclaim_reent+0x40>
 800782a:	4620      	mov	r0, r4
 800782c:	f000 f848 	bl	80078c0 <_free_r>
 8007830:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007832:	b111      	cbz	r1, 800783a <_reclaim_reent+0x4a>
 8007834:	4620      	mov	r0, r4
 8007836:	f000 f843 	bl	80078c0 <_free_r>
 800783a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800783c:	b111      	cbz	r1, 8007844 <_reclaim_reent+0x54>
 800783e:	4620      	mov	r0, r4
 8007840:	f000 f83e 	bl	80078c0 <_free_r>
 8007844:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007846:	b111      	cbz	r1, 800784e <_reclaim_reent+0x5e>
 8007848:	4620      	mov	r0, r4
 800784a:	f000 f839 	bl	80078c0 <_free_r>
 800784e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007850:	b111      	cbz	r1, 8007858 <_reclaim_reent+0x68>
 8007852:	4620      	mov	r0, r4
 8007854:	f000 f834 	bl	80078c0 <_free_r>
 8007858:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800785a:	b111      	cbz	r1, 8007862 <_reclaim_reent+0x72>
 800785c:	4620      	mov	r0, r4
 800785e:	f000 f82f 	bl	80078c0 <_free_r>
 8007862:	69a3      	ldr	r3, [r4, #24]
 8007864:	b1e3      	cbz	r3, 80078a0 <_reclaim_reent+0xb0>
 8007866:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007868:	4620      	mov	r0, r4
 800786a:	4798      	blx	r3
 800786c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800786e:	b1b9      	cbz	r1, 80078a0 <_reclaim_reent+0xb0>
 8007870:	4620      	mov	r0, r4
 8007872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007876:	f7ff bfad 	b.w	80077d4 <cleanup_glue>
 800787a:	5949      	ldr	r1, [r1, r5]
 800787c:	b941      	cbnz	r1, 8007890 <_reclaim_reent+0xa0>
 800787e:	3504      	adds	r5, #4
 8007880:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007882:	2d80      	cmp	r5, #128	; 0x80
 8007884:	68d9      	ldr	r1, [r3, #12]
 8007886:	d1f8      	bne.n	800787a <_reclaim_reent+0x8a>
 8007888:	4620      	mov	r0, r4
 800788a:	f000 f819 	bl	80078c0 <_free_r>
 800788e:	e7ba      	b.n	8007806 <_reclaim_reent+0x16>
 8007890:	680e      	ldr	r6, [r1, #0]
 8007892:	4620      	mov	r0, r4
 8007894:	f000 f814 	bl	80078c0 <_free_r>
 8007898:	4631      	mov	r1, r6
 800789a:	e7ef      	b.n	800787c <_reclaim_reent+0x8c>
 800789c:	2500      	movs	r5, #0
 800789e:	e7ef      	b.n	8007880 <_reclaim_reent+0x90>
 80078a0:	bd70      	pop	{r4, r5, r6, pc}
 80078a2:	bf00      	nop
 80078a4:	20000010 	.word	0x20000010

080078a8 <__malloc_lock>:
 80078a8:	4801      	ldr	r0, [pc, #4]	; (80078b0 <__malloc_lock+0x8>)
 80078aa:	f7ff bf7b 	b.w	80077a4 <__retarget_lock_acquire_recursive>
 80078ae:	bf00      	nop
 80078b0:	20001b9c 	.word	0x20001b9c

080078b4 <__malloc_unlock>:
 80078b4:	4801      	ldr	r0, [pc, #4]	; (80078bc <__malloc_unlock+0x8>)
 80078b6:	f7ff bf76 	b.w	80077a6 <__retarget_lock_release_recursive>
 80078ba:	bf00      	nop
 80078bc:	20001b9c 	.word	0x20001b9c

080078c0 <_free_r>:
 80078c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078c2:	2900      	cmp	r1, #0
 80078c4:	d044      	beq.n	8007950 <_free_r+0x90>
 80078c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078ca:	9001      	str	r0, [sp, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f1a1 0404 	sub.w	r4, r1, #4
 80078d2:	bfb8      	it	lt
 80078d4:	18e4      	addlt	r4, r4, r3
 80078d6:	f7ff ffe7 	bl	80078a8 <__malloc_lock>
 80078da:	4a1e      	ldr	r2, [pc, #120]	; (8007954 <_free_r+0x94>)
 80078dc:	9801      	ldr	r0, [sp, #4]
 80078de:	6813      	ldr	r3, [r2, #0]
 80078e0:	b933      	cbnz	r3, 80078f0 <_free_r+0x30>
 80078e2:	6063      	str	r3, [r4, #4]
 80078e4:	6014      	str	r4, [r2, #0]
 80078e6:	b003      	add	sp, #12
 80078e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078ec:	f7ff bfe2 	b.w	80078b4 <__malloc_unlock>
 80078f0:	42a3      	cmp	r3, r4
 80078f2:	d908      	bls.n	8007906 <_free_r+0x46>
 80078f4:	6825      	ldr	r5, [r4, #0]
 80078f6:	1961      	adds	r1, r4, r5
 80078f8:	428b      	cmp	r3, r1
 80078fa:	bf01      	itttt	eq
 80078fc:	6819      	ldreq	r1, [r3, #0]
 80078fe:	685b      	ldreq	r3, [r3, #4]
 8007900:	1949      	addeq	r1, r1, r5
 8007902:	6021      	streq	r1, [r4, #0]
 8007904:	e7ed      	b.n	80078e2 <_free_r+0x22>
 8007906:	461a      	mov	r2, r3
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	b10b      	cbz	r3, 8007910 <_free_r+0x50>
 800790c:	42a3      	cmp	r3, r4
 800790e:	d9fa      	bls.n	8007906 <_free_r+0x46>
 8007910:	6811      	ldr	r1, [r2, #0]
 8007912:	1855      	adds	r5, r2, r1
 8007914:	42a5      	cmp	r5, r4
 8007916:	d10b      	bne.n	8007930 <_free_r+0x70>
 8007918:	6824      	ldr	r4, [r4, #0]
 800791a:	4421      	add	r1, r4
 800791c:	1854      	adds	r4, r2, r1
 800791e:	42a3      	cmp	r3, r4
 8007920:	6011      	str	r1, [r2, #0]
 8007922:	d1e0      	bne.n	80078e6 <_free_r+0x26>
 8007924:	681c      	ldr	r4, [r3, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	6053      	str	r3, [r2, #4]
 800792a:	4421      	add	r1, r4
 800792c:	6011      	str	r1, [r2, #0]
 800792e:	e7da      	b.n	80078e6 <_free_r+0x26>
 8007930:	d902      	bls.n	8007938 <_free_r+0x78>
 8007932:	230c      	movs	r3, #12
 8007934:	6003      	str	r3, [r0, #0]
 8007936:	e7d6      	b.n	80078e6 <_free_r+0x26>
 8007938:	6825      	ldr	r5, [r4, #0]
 800793a:	1961      	adds	r1, r4, r5
 800793c:	428b      	cmp	r3, r1
 800793e:	bf04      	itt	eq
 8007940:	6819      	ldreq	r1, [r3, #0]
 8007942:	685b      	ldreq	r3, [r3, #4]
 8007944:	6063      	str	r3, [r4, #4]
 8007946:	bf04      	itt	eq
 8007948:	1949      	addeq	r1, r1, r5
 800794a:	6021      	streq	r1, [r4, #0]
 800794c:	6054      	str	r4, [r2, #4]
 800794e:	e7ca      	b.n	80078e6 <_free_r+0x26>
 8007950:	b003      	add	sp, #12
 8007952:	bd30      	pop	{r4, r5, pc}
 8007954:	20001ba0 	.word	0x20001ba0

08007958 <_init>:
 8007958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795a:	bf00      	nop
 800795c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800795e:	bc08      	pop	{r3}
 8007960:	469e      	mov	lr, r3
 8007962:	4770      	bx	lr

08007964 <_fini>:
 8007964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007966:	bf00      	nop
 8007968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800796a:	bc08      	pop	{r3}
 800796c:	469e      	mov	lr, r3
 800796e:	4770      	bx	lr
