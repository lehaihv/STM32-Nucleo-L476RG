
RTOS_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08007d10  08007d10  00017d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e30  08007e30  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007e30  08007e30  00017e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e38  08007e38  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e38  08007e38  00017e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e3c  08007e3c  00017e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b30  20000074  08007eb4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ba4  08007eb4  00021ba4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002027d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a1e  00000000  00000000  00040321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a38  00000000  00000000  00043d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018f0  00000000  00000000  00045778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000040da  00000000  00000000  00047068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bad3  00000000  00000000  0004b142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110376  00000000  00000000  00066c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00176f8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073a0  00000000  00000000  00176fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007cf8 	.word	0x08007cf8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007cf8 	.word	0x08007cf8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fbcc 	bl	8000c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f828 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f8fe 	bl	80006e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f8cc 	bl	8000680 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004e8:	f000 f874 	bl	80005d4 <MX_ADC1_Init>
  //HAL_ADC_Start(&hadc1);
  //HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004ec:	f004 fd88 	bl	8005000 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskADC_IN1 */
  TaskADC_IN1Handle = osThreadNew(StartTaskADC_IN1, NULL, &TaskADC_IN1_attributes);
 80004f0:	4a09      	ldr	r2, [pc, #36]	; (8000518 <main+0x44>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	4809      	ldr	r0, [pc, #36]	; (800051c <main+0x48>)
 80004f6:	f004 fdcd 	bl	8005094 <osThreadNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a08      	ldr	r2, [pc, #32]	; (8000520 <main+0x4c>)
 80004fe:	6013      	str	r3, [r2, #0]

  /* creation of TaskADC_IN2 */
  TaskADC_IN2Handle = osThreadNew(StartTaskADC_IN2, NULL, &TaskADC_IN2_attributes);
 8000500:	4a08      	ldr	r2, [pc, #32]	; (8000524 <main+0x50>)
 8000502:	2100      	movs	r1, #0
 8000504:	4808      	ldr	r0, [pc, #32]	; (8000528 <main+0x54>)
 8000506:	f004 fdc5 	bl	8005094 <osThreadNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <main+0x58>)
 800050e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000510:	f004 fd9a 	bl	8005048 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000514:	e7fe      	b.n	8000514 <main+0x40>
 8000516:	bf00      	nop
 8000518:	08007d40 	.word	0x08007d40
 800051c:	08000855 	.word	0x08000855
 8000520:	20000178 	.word	0x20000178
 8000524:	08007d64 	.word	0x08007d64
 8000528:	08000895 	.word	0x08000895
 800052c:	2000017c 	.word	0x2000017c

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b096      	sub	sp, #88	; 0x58
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	2244      	movs	r2, #68	; 0x44
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f007 fb10 	bl	8007b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	463b      	mov	r3, r7
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000552:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000556:	f002 fa43 	bl	80029e0 <HAL_PWREx_ControlVoltageScaling>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000560:	f000 f9ca 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000564:	2302      	movs	r3, #2
 8000566:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000568:	f44f 7380 	mov.w	r3, #256	; 0x100
 800056c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056e:	2310      	movs	r3, #16
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000576:	2302      	movs	r3, #2
 8000578:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800057a:	2301      	movs	r3, #1
 800057c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800057e:	230a      	movs	r3, #10
 8000580:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000582:	2307      	movs	r3, #7
 8000584:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800058a:	2302      	movs	r3, #2
 800058c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	4618      	mov	r0, r3
 8000594:	f002 fa7a 	bl	8002a8c <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800059e:	f000 f9ab 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a6:	2303      	movs	r3, #3
 80005a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b6:	463b      	mov	r3, r7
 80005b8:	2104      	movs	r1, #4
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 fe42 	bl	8003244 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005c6:	f000 f997 	bl	80008f8 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3758      	adds	r7, #88	; 0x58
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005e4:	4b24      	ldr	r3, [pc, #144]	; (8000678 <MX_ADC1_Init+0xa4>)
 80005e6:	4a25      	ldr	r2, [pc, #148]	; (800067c <MX_ADC1_Init+0xa8>)
 80005e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005ea:	4b23      	ldr	r3, [pc, #140]	; (8000678 <MX_ADC1_Init+0xa4>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005f0:	4b21      	ldr	r3, [pc, #132]	; (8000678 <MX_ADC1_Init+0xa4>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f6:	4b20      	ldr	r3, [pc, #128]	; (8000678 <MX_ADC1_Init+0xa4>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005fc:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <MX_ADC1_Init+0xa4>)
 80005fe:	2201      	movs	r2, #1
 8000600:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000602:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <MX_ADC1_Init+0xa4>)
 8000604:	2208      	movs	r2, #8
 8000606:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <MX_ADC1_Init+0xa4>)
 800060a:	2200      	movs	r2, #0
 800060c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <MX_ADC1_Init+0xa4>)
 8000610:	2201      	movs	r2, #1
 8000612:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <MX_ADC1_Init+0xa4>)
 8000616:	2202      	movs	r2, #2
 8000618:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <MX_ADC1_Init+0xa4>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_ADC1_Init+0xa4>)
 8000624:	2200      	movs	r2, #0
 8000626:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_ADC1_Init+0xa4>)
 800062a:	2200      	movs	r2, #0
 800062c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_ADC1_Init+0xa4>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <MX_ADC1_Init+0xa4>)
 8000638:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800063c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_ADC1_Init+0xa4>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000646:	480c      	ldr	r0, [pc, #48]	; (8000678 <MX_ADC1_Init+0xa4>)
 8000648:	f000 fd86 	bl	8001158 <HAL_ADC_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 8000652:	f000 f951 	bl	80008f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	4619      	mov	r1, r3
 800065e:	4806      	ldr	r0, [pc, #24]	; (8000678 <MX_ADC1_Init+0xa4>)
 8000660:	f001 fe5c 	bl	800231c <HAL_ADCEx_MultiModeConfigChannel>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800066a:	f000 f945 	bl	80008f8 <Error_Handler>
  }*/
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000090 	.word	0x20000090
 800067c:	50040000 	.word	0x50040000

08000680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 8000686:	4a15      	ldr	r2, [pc, #84]	; (80006dc <MX_USART2_UART_Init+0x5c>)
 8000688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006be:	2200      	movs	r2, #0
 80006c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006c4:	f003 ffa2 	bl	800460c <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ce:	f000 f913 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200000f4 	.word	0x200000f4
 80006dc:	40004400 	.word	0x40004400

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <MX_GPIO_Init+0xc4>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a2a      	ldr	r2, [pc, #168]	; (80007a4 <MX_GPIO_Init+0xc4>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070e:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a24      	ldr	r2, [pc, #144]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <MX_GPIO_Init+0xc4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <MX_GPIO_Init+0xc4>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_GPIO_Init+0xc4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2120      	movs	r1, #32
 800075a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075e:	f002 f919 	bl	8002994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000762:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000768:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800076c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	480b      	ldr	r0, [pc, #44]	; (80007a8 <MX_GPIO_Init+0xc8>)
 800077a:	f001 ff61 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800077e:	2320      	movs	r3, #32
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	4619      	mov	r1, r3
 8000794:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000798:	f001 ff52 	bl	8002640 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	; 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40021000 	.word	0x40021000
 80007a8:	48000800 	.word	0x48000800

080007ac <ADC_Select_CH1>:

/* USER CODE BEGIN 4 */
void ADC_Select_CH1(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
 80007c0:	615a      	str	r2, [r3, #20]
  sConfig.Channel = ADC_CHANNEL_1;
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <ADC_Select_CH1+0x4c>)
 80007c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007c6:	2306      	movs	r3, #6
 80007c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80007ca:	2303      	movs	r3, #3
 80007cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007ce:	237f      	movs	r3, #127	; 0x7f
 80007d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007d2:	2304      	movs	r3, #4
 80007d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007da:	463b      	mov	r3, r7
 80007dc:	4619      	mov	r1, r3
 80007de:	4807      	ldr	r0, [pc, #28]	; (80007fc <ADC_Select_CH1+0x50>)
 80007e0:	f000 ffe4 	bl	80017ac <HAL_ADC_ConfigChannel>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <ADC_Select_CH1+0x42>
  {
    Error_Handler();
 80007ea:	f000 f885 	bl	80008f8 <Error_Handler>
  }
}
 80007ee:	bf00      	nop
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	04300002 	.word	0x04300002
 80007fc:	20000090 	.word	0x20000090

08000800 <ADC_Select_CH2>:

void ADC_Select_CH2(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000806:	463b      	mov	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
 8000814:	615a      	str	r2, [r3, #20]
  sConfig.Channel = ADC_CHANNEL_2;
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <ADC_Select_CH2+0x4c>)
 8000818:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800081a:	2306      	movs	r3, #6
 800081c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 800081e:	2303      	movs	r3, #3
 8000820:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000822:	237f      	movs	r3, #127	; 0x7f
 8000824:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000826:	2304      	movs	r3, #4
 8000828:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082e:	463b      	mov	r3, r7
 8000830:	4619      	mov	r1, r3
 8000832:	4807      	ldr	r0, [pc, #28]	; (8000850 <ADC_Select_CH2+0x50>)
 8000834:	f000 ffba 	bl	80017ac <HAL_ADC_ConfigChannel>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <ADC_Select_CH2+0x42>
  {
    Error_Handler();
 800083e:	f000 f85b 	bl	80008f8 <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	08600004 	.word	0x08600004
 8000850:	20000090 	.word	0x20000090

08000854 <StartTaskADC_IN1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskADC_IN1 */
void StartTaskADC_IN1(void *argument)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	//HAL_ADC_PollForConversion(&hadc1, 10);
	//printf("%s \n", "ADC Input 1");
	//msg[] = "Hai";
	ADC_Select_CH1();
 800085c:	f7ff ffa6 	bl	80007ac <ADC_Select_CH1>
	HAL_ADC_Start(&hadc1);
 8000860:	480a      	ldr	r0, [pc, #40]	; (800088c <StartTaskADC_IN1+0x38>)
 8000862:	f000 fdcf 	bl	8001404 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000866:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800086a:	4808      	ldr	r0, [pc, #32]	; (800088c <StartTaskADC_IN1+0x38>)
 800086c:	f000 feb8 	bl	80015e0 <HAL_ADC_PollForConversion>
	adc[0] = HAL_ADC_GetValue(&hadc1);
 8000870:	4806      	ldr	r0, [pc, #24]	; (800088c <StartTaskADC_IN1+0x38>)
 8000872:	f000 ff8d 	bl	8001790 <HAL_ADC_GetValue>
 8000876:	4603      	mov	r3, r0
 8000878:	b29a      	uxth	r2, r3
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <StartTaskADC_IN1+0x3c>)
 800087c:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 800087e:	4803      	ldr	r0, [pc, #12]	; (800088c <StartTaskADC_IN1+0x38>)
 8000880:	f000 fe7a 	bl	8001578 <HAL_ADC_Stop>
    osDelay(50);
 8000884:	2032      	movs	r0, #50	; 0x32
 8000886:	f004 fc97 	bl	80051b8 <osDelay>
	ADC_Select_CH1();
 800088a:	e7e7      	b.n	800085c <StartTaskADC_IN1+0x8>
 800088c:	20000090 	.word	0x20000090
 8000890:	20000180 	.word	0x20000180

08000894 <StartTaskADC_IN2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskADC_IN2 */
void StartTaskADC_IN2(void *argument)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  //HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
  //adc[1] = HAL_ADC_GetValue(&hadc1);
  /* Infinite loop */
  for(;;)
  {
	ADC_Select_CH2();
 800089c:	f7ff ffb0 	bl	8000800 <ADC_Select_CH2>
	HAL_ADC_Start(&hadc1);
 80008a0:	480a      	ldr	r0, [pc, #40]	; (80008cc <StartTaskADC_IN2+0x38>)
 80008a2:	f000 fdaf 	bl	8001404 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80008a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008aa:	4808      	ldr	r0, [pc, #32]	; (80008cc <StartTaskADC_IN2+0x38>)
 80008ac:	f000 fe98 	bl	80015e0 <HAL_ADC_PollForConversion>
	adc[1] = HAL_ADC_GetValue(&hadc1);
 80008b0:	4806      	ldr	r0, [pc, #24]	; (80008cc <StartTaskADC_IN2+0x38>)
 80008b2:	f000 ff6d 	bl	8001790 <HAL_ADC_GetValue>
 80008b6:	4603      	mov	r3, r0
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <StartTaskADC_IN2+0x3c>)
 80008bc:	805a      	strh	r2, [r3, #2]
    HAL_ADC_Stop(&hadc1);
 80008be:	4803      	ldr	r0, [pc, #12]	; (80008cc <StartTaskADC_IN2+0x38>)
 80008c0:	f000 fe5a 	bl	8001578 <HAL_ADC_Stop>
    osDelay(50);
 80008c4:	2032      	movs	r0, #50	; 0x32
 80008c6:	f004 fc77 	bl	80051b8 <osDelay>
	ADC_Select_CH2();
 80008ca:	e7e7      	b.n	800089c <StartTaskADC_IN2+0x8>
 80008cc:	20000090 	.word	0x20000090
 80008d0:	20000180 	.word	0x20000180

080008d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d101      	bne.n	80008ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008e6:	f000 f9e5 	bl	8000cb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40012c00 	.word	0x40012c00

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	e7fe      	b.n	8000900 <Error_Handler+0x8>
	...

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <HAL_MspInit+0x4c>)
 800090c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800090e:	4a10      	ldr	r2, [pc, #64]	; (8000950 <HAL_MspInit+0x4c>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6613      	str	r3, [r2, #96]	; 0x60
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <HAL_MspInit+0x4c>)
 8000918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <HAL_MspInit+0x4c>)
 8000924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000926:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	6593      	str	r3, [r2, #88]	; 0x58
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <HAL_MspInit+0x4c>)
 8000930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	210f      	movs	r1, #15
 800093e:	f06f 0001 	mvn.w	r0, #1
 8000942:	f001 fe53 	bl	80025ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000

08000954 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b0ac      	sub	sp, #176	; 0xb0
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	2288      	movs	r2, #136	; 0x88
 8000972:	2100      	movs	r1, #0
 8000974:	4618      	mov	r0, r3
 8000976:	f007 f8f5 	bl	8007b64 <memset>
  if(hadc->Instance==ADC1)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a27      	ldr	r2, [pc, #156]	; (8000a1c <HAL_ADC_MspInit+0xc8>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d146      	bne.n	8000a12 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000984:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000988:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800098a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800098e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000992:	2302      	movs	r3, #2
 8000994:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000996:	2301      	movs	r3, #1
 8000998:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800099a:	2308      	movs	r3, #8
 800099c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800099e:	2307      	movs	r3, #7
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80009a2:	2302      	movs	r3, #2
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80009a6:	2302      	movs	r3, #2
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80009aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4618      	mov	r0, r3
 80009b6:	f002 fe9b 	bl	80036f0 <HAL_RCCEx_PeriphCLKConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80009c0:	f7ff ff9a 	bl	80008f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <HAL_ADC_MspInit+0xcc>)
 80009c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c8:	4a15      	ldr	r2, [pc, #84]	; (8000a20 <HAL_ADC_MspInit+0xcc>)
 80009ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <HAL_ADC_MspInit+0xcc>)
 80009d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009dc:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <HAL_ADC_MspInit+0xcc>)
 80009de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e0:	4a0f      	ldr	r2, [pc, #60]	; (8000a20 <HAL_ADC_MspInit+0xcc>)
 80009e2:	f043 0304 	orr.w	r3, r3, #4
 80009e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e8:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <HAL_ADC_MspInit+0xcc>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ec:	f003 0304 	and.w	r3, r3, #4
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009f4:	2303      	movs	r3, #3
 80009f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009fa:	230b      	movs	r3, #11
 80009fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <HAL_ADC_MspInit+0xd0>)
 8000a0e:	f001 fe17 	bl	8002640 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a12:	bf00      	nop
 8000a14:	37b0      	adds	r7, #176	; 0xb0
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	50040000 	.word	0x50040000
 8000a20:	40021000 	.word	0x40021000
 8000a24:	48000800 	.word	0x48000800

08000a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b0ac      	sub	sp, #176	; 0xb0
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2288      	movs	r2, #136	; 0x88
 8000a46:	2100      	movs	r1, #0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f007 f88b 	bl	8007b64 <memset>
  if(huart->Instance==USART2)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a21      	ldr	r2, [pc, #132]	; (8000ad8 <HAL_UART_MspInit+0xb0>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d13b      	bne.n	8000ad0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4618      	mov	r0, r3
 8000a66:	f002 fe43 	bl	80036f0 <HAL_RCCEx_PeriphCLKConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a70:	f7ff ff42 	bl	80008f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a74:	4b19      	ldr	r3, [pc, #100]	; (8000adc <HAL_UART_MspInit+0xb4>)
 8000a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a78:	4a18      	ldr	r2, [pc, #96]	; (8000adc <HAL_UART_MspInit+0xb4>)
 8000a7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7e:	6593      	str	r3, [r2, #88]	; 0x58
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <HAL_UART_MspInit+0xb4>)
 8000a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <HAL_UART_MspInit+0xb4>)
 8000a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a90:	4a12      	ldr	r2, [pc, #72]	; (8000adc <HAL_UART_MspInit+0xb4>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a98:	4b10      	ldr	r3, [pc, #64]	; (8000adc <HAL_UART_MspInit+0xb4>)
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aa4:	230c      	movs	r3, #12
 8000aa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000abc:	2307      	movs	r3, #7
 8000abe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000acc:	f001 fdb8 	bl	8002640 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ad0:	bf00      	nop
 8000ad2:	37b0      	adds	r7, #176	; 0xb0
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40004400 	.word	0x40004400
 8000adc:	40021000 	.word	0x40021000

08000ae0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08c      	sub	sp, #48	; 0x30
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000aee:	4b2e      	ldr	r3, [pc, #184]	; (8000ba8 <HAL_InitTick+0xc8>)
 8000af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af2:	4a2d      	ldr	r2, [pc, #180]	; (8000ba8 <HAL_InitTick+0xc8>)
 8000af4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000af8:	6613      	str	r3, [r2, #96]	; 0x60
 8000afa:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <HAL_InitTick+0xc8>)
 8000afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b06:	f107 020c 	add.w	r2, r7, #12
 8000b0a:	f107 0310 	add.w	r3, r7, #16
 8000b0e:	4611      	mov	r1, r2
 8000b10:	4618      	mov	r0, r3
 8000b12:	f002 fd5b 	bl	80035cc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b16:	f002 fd43 	bl	80035a0 <HAL_RCC_GetPCLK2Freq>
 8000b1a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b1e:	4a23      	ldr	r2, [pc, #140]	; (8000bac <HAL_InitTick+0xcc>)
 8000b20:	fba2 2303 	umull	r2, r3, r2, r3
 8000b24:	0c9b      	lsrs	r3, r3, #18
 8000b26:	3b01      	subs	r3, #1
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b2a:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <HAL_InitTick+0xd0>)
 8000b2c:	4a21      	ldr	r2, [pc, #132]	; (8000bb4 <HAL_InitTick+0xd4>)
 8000b2e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b30:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <HAL_InitTick+0xd0>)
 8000b32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b36:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b38:	4a1d      	ldr	r2, [pc, #116]	; (8000bb0 <HAL_InitTick+0xd0>)
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <HAL_InitTick+0xd0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b44:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <HAL_InitTick+0xd0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <HAL_InitTick+0xd0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b50:	4817      	ldr	r0, [pc, #92]	; (8000bb0 <HAL_InitTick+0xd0>)
 8000b52:	f003 fa89 	bl	8004068 <HAL_TIM_Base_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000b5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d11b      	bne.n	8000b9c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b64:	4812      	ldr	r0, [pc, #72]	; (8000bb0 <HAL_InitTick+0xd0>)
 8000b66:	f003 fae1 	bl	800412c <HAL_TIM_Base_Start_IT>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d111      	bne.n	8000b9c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b78:	2019      	movs	r0, #25
 8000b7a:	f001 fd53 	bl	8002624 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b0f      	cmp	r3, #15
 8000b82:	d808      	bhi.n	8000b96 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000b84:	2200      	movs	r2, #0
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	2019      	movs	r0, #25
 8000b8a:	f001 fd2f 	bl	80025ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <HAL_InitTick+0xd8>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6013      	str	r3, [r2, #0]
 8000b94:	e002      	b.n	8000b9c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3730      	adds	r7, #48	; 0x30
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	431bde83 	.word	0x431bde83
 8000bb0:	20000184 	.word	0x20000184
 8000bb4:	40012c00 	.word	0x40012c00
 8000bb8:	20000004 	.word	0x20000004

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <MemManage_Handler+0x4>

08000bce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000bee:	f003 fb0d 	bl	800420c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000184 	.word	0x20000184

08000bfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c24:	f7ff ffea 	bl	8000bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c2a:	490d      	ldr	r1, [pc, #52]	; (8000c60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <LoopForever+0xe>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c40:	4c0a      	ldr	r4, [pc, #40]	; (8000c6c <LoopForever+0x16>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f006 ff55 	bl	8007afc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c52:	f7ff fc3f 	bl	80004d4 <main>

08000c56 <LoopForever>:

LoopForever:
    b LoopForever
 8000c56:	e7fe      	b.n	8000c56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c64:	08007e40 	.word	0x08007e40
  ldr r2, =_sbss
 8000c68:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c6c:	20001ba4 	.word	0x20001ba4

08000c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC1_2_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_Init+0x3c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <HAL_Init+0x3c>)
 8000c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c88:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8a:	2003      	movs	r0, #3
 8000c8c:	f001 fca3 	bl	80025d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c90:	200f      	movs	r0, #15
 8000c92:	f7ff ff25 	bl	8000ae0 <HAL_InitTick>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d002      	beq.n	8000ca2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	71fb      	strb	r3, [r7, #7]
 8000ca0:	e001      	b.n	8000ca6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ca2:	f7ff fe2f 	bl	8000904 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40022000 	.word	0x40022000

08000cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	200001d0 	.word	0x200001d0

08000cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <HAL_GetTick+0x14>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	200001d0 	.word	0x200001d0

08000cf4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	609a      	str	r2, [r3, #8]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b087      	sub	sp, #28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	3360      	adds	r3, #96	; 0x60
 8000d6e:	461a      	mov	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4413      	add	r3, r2
 8000d76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <LL_ADC_SetOffset+0x44>)
 8000d7e:	4013      	ands	r3, r2
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d94:	bf00      	nop
 8000d96:	371c      	adds	r7, #28
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	03fff000 	.word	0x03fff000

08000da4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3360      	adds	r3, #96	; 0x60
 8000db2:	461a      	mov	r2, r3
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4413      	add	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b087      	sub	sp, #28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	3360      	adds	r3, #96	; 0x60
 8000de0:	461a      	mov	r2, r3
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	4413      	add	r3, r2
 8000de8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	431a      	orrs	r2, r3
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000dfa:	bf00      	nop
 8000dfc:	371c      	adds	r7, #28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e000      	b.n	8000e20 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b087      	sub	sp, #28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3330      	adds	r3, #48	; 0x30
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	f003 030c 	and.w	r3, r3, #12
 8000e48:	4413      	add	r3, r2
 8000e4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	f003 031f 	and.w	r3, r3, #31
 8000e56:	211f      	movs	r1, #31
 8000e58:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	401a      	ands	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	0e9b      	lsrs	r3, r3, #26
 8000e64:	f003 011f 	and.w	r1, r3, #31
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	f003 031f 	and.w	r3, r3, #31
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	431a      	orrs	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e78:	bf00      	nop
 8000e7a:	371c      	adds	r7, #28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	3314      	adds	r3, #20
 8000e94:	461a      	mov	r2, r3
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	0e5b      	lsrs	r3, r3, #25
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	f003 0304 	and.w	r3, r3, #4
 8000ea0:	4413      	add	r3, r2
 8000ea2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	0d1b      	lsrs	r3, r3, #20
 8000eac:	f003 031f 	and.w	r3, r3, #31
 8000eb0:	2107      	movs	r1, #7
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	401a      	ands	r2, r3
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	0d1b      	lsrs	r3, r3, #20
 8000ebe:	f003 031f 	and.w	r3, r3, #31
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ece:	bf00      	nop
 8000ed0:	371c      	adds	r7, #28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
	...

08000edc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f003 0318 	and.w	r3, r3, #24
 8000efe:	4908      	ldr	r1, [pc, #32]	; (8000f20 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f00:	40d9      	lsrs	r1, r3
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	400b      	ands	r3, r1
 8000f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f12:	bf00      	nop
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	0007ffff 	.word	0x0007ffff

08000f24 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f003 031f 	and.w	r3, r3, #31
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	6093      	str	r3, [r2, #8]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f94:	d101      	bne.n	8000f9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000fb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fbc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000fe4:	d101      	bne.n	8000fea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e000      	b.n	8000fec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001008:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800100c:	f043 0201 	orr.w	r2, r3, #1
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001030:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001034:	f043 0202 	orr.w	r2, r3, #2
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b01      	cmp	r3, #1
 800105a:	d101      	bne.n	8001060 <LL_ADC_IsEnabled+0x18>
 800105c:	2301      	movs	r3, #1
 800105e:	e000      	b.n	8001062 <LL_ADC_IsEnabled+0x1a>
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b02      	cmp	r3, #2
 8001080:	d101      	bne.n	8001086 <LL_ADC_IsDisableOngoing+0x18>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <LL_ADC_IsDisableOngoing+0x1a>
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010a8:	f043 0204 	orr.w	r2, r3, #4
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010d0:	f043 0210 	orr.w	r2, r3, #16
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	d101      	bne.n	80010fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80010f8:	2301      	movs	r3, #1
 80010fa:	e000      	b.n	80010fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800111a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800111e:	f043 0220 	orr.w	r2, r3, #32
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f003 0308 	and.w	r3, r3, #8
 8001142:	2b08      	cmp	r3, #8
 8001144:	d101      	bne.n	800114a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e136      	b.n	80013e0 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800117c:	2b00      	cmp	r3, #0
 800117e:	d109      	bne.n	8001194 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff fbe7 	bl	8000954 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fef1 	bl	8000f80 <LL_ADC_IsDeepPowerDownEnabled>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d004      	beq.n	80011ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fed7 	bl	8000f5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff0c 	bl	8000fd0 <LL_ADC_IsInternalRegulatorEnabled>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d115      	bne.n	80011ea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fef0 	bl	8000fa8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011c8:	4b87      	ldr	r3, [pc, #540]	; (80013e8 <HAL_ADC_Init+0x290>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	099b      	lsrs	r3, r3, #6
 80011ce:	4a87      	ldr	r2, [pc, #540]	; (80013ec <HAL_ADC_Init+0x294>)
 80011d0:	fba2 2303 	umull	r2, r3, r2, r3
 80011d4:	099b      	lsrs	r3, r3, #6
 80011d6:	3301      	adds	r3, #1
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011dc:	e002      	b.n	80011e4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d1f9      	bne.n	80011de <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff feee 	bl	8000fd0 <LL_ADC_IsInternalRegulatorEnabled>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10d      	bne.n	8001216 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011fe:	f043 0210 	orr.w	r2, r3, #16
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120a:	f043 0201 	orr.w	r2, r3, #1
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ff62 	bl	80010e4 <LL_ADC_REG_IsConversionOngoing>
 8001220:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001226:	f003 0310 	and.w	r3, r3, #16
 800122a:	2b00      	cmp	r3, #0
 800122c:	f040 80cf 	bne.w	80013ce <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	2b00      	cmp	r3, #0
 8001234:	f040 80cb 	bne.w	80013ce <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800123c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001240:	f043 0202 	orr.w	r2, r3, #2
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fefb 	bl	8001048 <LL_ADC_IsEnabled>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d115      	bne.n	8001284 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001258:	4865      	ldr	r0, [pc, #404]	; (80013f0 <HAL_ADC_Init+0x298>)
 800125a:	f7ff fef5 	bl	8001048 <LL_ADC_IsEnabled>
 800125e:	4604      	mov	r4, r0
 8001260:	4864      	ldr	r0, [pc, #400]	; (80013f4 <HAL_ADC_Init+0x29c>)
 8001262:	f7ff fef1 	bl	8001048 <LL_ADC_IsEnabled>
 8001266:	4603      	mov	r3, r0
 8001268:	431c      	orrs	r4, r3
 800126a:	4863      	ldr	r0, [pc, #396]	; (80013f8 <HAL_ADC_Init+0x2a0>)
 800126c:	f7ff feec 	bl	8001048 <LL_ADC_IsEnabled>
 8001270:	4603      	mov	r3, r0
 8001272:	4323      	orrs	r3, r4
 8001274:	2b00      	cmp	r3, #0
 8001276:	d105      	bne.n	8001284 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	4619      	mov	r1, r3
 800127e:	485f      	ldr	r0, [pc, #380]	; (80013fc <HAL_ADC_Init+0x2a4>)
 8001280:	f7ff fd38 	bl	8000cf4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	7e5b      	ldrb	r3, [r3, #25]
 8001288:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800128e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001294:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800129a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012a2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d106      	bne.n	80012c0 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b6:	3b01      	subs	r3, #1
 80012b8:	045b      	lsls	r3, r3, #17
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d009      	beq.n	80012dc <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012cc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68da      	ldr	r2, [r3, #12]
 80012e2:	4b47      	ldr	r3, [pc, #284]	; (8001400 <HAL_ADC_Init+0x2a8>)
 80012e4:	4013      	ands	r3, r2
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	69b9      	ldr	r1, [r7, #24]
 80012ec:	430b      	orrs	r3, r1
 80012ee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fef5 	bl	80010e4 <LL_ADC_REG_IsConversionOngoing>
 80012fa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff16 	bl	8001132 <LL_ADC_INJ_IsConversionOngoing>
 8001306:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d13d      	bne.n	800138a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d13a      	bne.n	800138a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001318:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001320:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001330:	f023 0302 	bic.w	r3, r3, #2
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6812      	ldr	r2, [r2, #0]
 8001338:	69b9      	ldr	r1, [r7, #24]
 800133a:	430b      	orrs	r3, r1
 800133c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001344:	2b01      	cmp	r3, #1
 8001346:	d118      	bne.n	800137a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001352:	f023 0304 	bic.w	r3, r3, #4
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800135e:	4311      	orrs	r1, r2
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001364:	4311      	orrs	r1, r2
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800136a:	430a      	orrs	r2, r1
 800136c:	431a      	orrs	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f042 0201 	orr.w	r2, r2, #1
 8001376:	611a      	str	r2, [r3, #16]
 8001378:	e007      	b.n	800138a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	691a      	ldr	r2, [r3, #16]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0201 	bic.w	r2, r2, #1
 8001388:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d10c      	bne.n	80013ac <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001398:	f023 010f 	bic.w	r1, r3, #15
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	1e5a      	subs	r2, r3, #1
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	631a      	str	r2, [r3, #48]	; 0x30
 80013aa:	e007      	b.n	80013bc <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 020f 	bic.w	r2, r2, #15
 80013ba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c0:	f023 0303 	bic.w	r3, r3, #3
 80013c4:	f043 0201 	orr.w	r2, r3, #1
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	655a      	str	r2, [r3, #84]	; 0x54
 80013cc:	e007      	b.n	80013de <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d2:	f043 0210 	orr.w	r2, r3, #16
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013de:	7ffb      	ldrb	r3, [r7, #31]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3724      	adds	r7, #36	; 0x24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd90      	pop	{r4, r7, pc}
 80013e8:	20000000 	.word	0x20000000
 80013ec:	053e2d63 	.word	0x053e2d63
 80013f0:	50040000 	.word	0x50040000
 80013f4:	50040100 	.word	0x50040100
 80013f8:	50040200 	.word	0x50040200
 80013fc:	50040300 	.word	0x50040300
 8001400:	fff0c007 	.word	0xfff0c007

08001404 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800140c:	4857      	ldr	r0, [pc, #348]	; (800156c <HAL_ADC_Start+0x168>)
 800140e:	f7ff fd89 	bl	8000f24 <LL_ADC_GetMultimode>
 8001412:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fe63 	bl	80010e4 <LL_ADC_REG_IsConversionOngoing>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	f040 809c 	bne.w	800155e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800142c:	2b01      	cmp	r3, #1
 800142e:	d101      	bne.n	8001434 <HAL_ADC_Start+0x30>
 8001430:	2302      	movs	r3, #2
 8001432:	e097      	b.n	8001564 <HAL_ADC_Start+0x160>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 fe61 	bl	8002104 <ADC_Enable>
 8001442:	4603      	mov	r3, r0
 8001444:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001446:	7dfb      	ldrb	r3, [r7, #23]
 8001448:	2b00      	cmp	r3, #0
 800144a:	f040 8083 	bne.w	8001554 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001452:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001456:	f023 0301 	bic.w	r3, r3, #1
 800145a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a42      	ldr	r2, [pc, #264]	; (8001570 <HAL_ADC_Start+0x16c>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d002      	beq.n	8001472 <HAL_ADC_Start+0x6e>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	e000      	b.n	8001474 <HAL_ADC_Start+0x70>
 8001472:	4b40      	ldr	r3, [pc, #256]	; (8001574 <HAL_ADC_Start+0x170>)
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6812      	ldr	r2, [r2, #0]
 8001478:	4293      	cmp	r3, r2
 800147a:	d002      	beq.n	8001482 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d105      	bne.n	800148e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001486:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001492:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800149a:	d106      	bne.n	80014aa <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a0:	f023 0206 	bic.w	r2, r3, #6
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	659a      	str	r2, [r3, #88]	; 0x58
 80014a8:	e002      	b.n	80014b0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	221c      	movs	r2, #28
 80014b6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a2a      	ldr	r2, [pc, #168]	; (8001570 <HAL_ADC_Start+0x16c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d002      	beq.n	80014d0 <HAL_ADC_Start+0xcc>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	e000      	b.n	80014d2 <HAL_ADC_Start+0xce>
 80014d0:	4b28      	ldr	r3, [pc, #160]	; (8001574 <HAL_ADC_Start+0x170>)
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d008      	beq.n	80014ec <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d005      	beq.n	80014ec <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	2b05      	cmp	r3, #5
 80014e4:	d002      	beq.n	80014ec <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	2b09      	cmp	r3, #9
 80014ea:	d114      	bne.n	8001516 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d007      	beq.n	800150a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001502:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fdc0 	bl	8001094 <LL_ADC_REG_StartConversion>
 8001514:	e025      	b.n	8001562 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800151a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a12      	ldr	r2, [pc, #72]	; (8001570 <HAL_ADC_Start+0x16c>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d002      	beq.n	8001532 <HAL_ADC_Start+0x12e>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	e000      	b.n	8001534 <HAL_ADC_Start+0x130>
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <HAL_ADC_Start+0x170>)
 8001534:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00f      	beq.n	8001562 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001546:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800154a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	655a      	str	r2, [r3, #84]	; 0x54
 8001552:	e006      	b.n	8001562 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800155c:	e001      	b.n	8001562 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800155e:	2302      	movs	r3, #2
 8001560:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001562:	7dfb      	ldrb	r3, [r7, #23]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	50040300 	.word	0x50040300
 8001570:	50040100 	.word	0x50040100
 8001574:	50040000 	.word	0x50040000

08001578 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001586:	2b01      	cmp	r3, #1
 8001588:	d101      	bne.n	800158e <HAL_ADC_Stop+0x16>
 800158a:	2302      	movs	r3, #2
 800158c:	e023      	b.n	80015d6 <HAL_ADC_Stop+0x5e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001596:	2103      	movs	r1, #3
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 fcf7 	bl	8001f8c <ADC_ConversionStop>
 800159e:	4603      	mov	r3, r0
 80015a0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d111      	bne.n	80015cc <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 fe31 	bl	8002210 <ADC_Disable>
 80015ae:	4603      	mov	r3, r0
 80015b0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d109      	bne.n	80015cc <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015c0:	f023 0301 	bic.w	r3, r3, #1
 80015c4:	f043 0201 	orr.w	r2, r3, #1
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015ea:	4866      	ldr	r0, [pc, #408]	; (8001784 <HAL_ADC_PollForConversion+0x1a4>)
 80015ec:	f7ff fc9a 	bl	8000f24 <LL_ADC_GetMultimode>
 80015f0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d102      	bne.n	8001600 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80015fa:	2308      	movs	r3, #8
 80015fc:	61fb      	str	r3, [r7, #28]
 80015fe:	e02a      	b.n	8001656 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d005      	beq.n	8001612 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	2b05      	cmp	r3, #5
 800160a:	d002      	beq.n	8001612 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2b09      	cmp	r3, #9
 8001610:	d111      	bne.n	8001636 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d007      	beq.n	8001630 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001624:	f043 0220 	orr.w	r2, r3, #32
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e0a4      	b.n	800177a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001630:	2304      	movs	r3, #4
 8001632:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001634:	e00f      	b.n	8001656 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001636:	4853      	ldr	r0, [pc, #332]	; (8001784 <HAL_ADC_PollForConversion+0x1a4>)
 8001638:	f7ff fc82 	bl	8000f40 <LL_ADC_GetMultiDMATransfer>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d007      	beq.n	8001652 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001646:	f043 0220 	orr.w	r2, r3, #32
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e093      	b.n	800177a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001652:	2304      	movs	r3, #4
 8001654:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001656:	f7ff fb41 	bl	8000cdc <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800165c:	e021      	b.n	80016a2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001664:	d01d      	beq.n	80016a2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001666:	f7ff fb39 	bl	8000cdc <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d302      	bcc.n	800167c <HAL_ADC_PollForConversion+0x9c>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d112      	bne.n	80016a2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	4013      	ands	r3, r2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10b      	bne.n	80016a2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168e:	f043 0204 	orr.w	r2, r3, #4
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e06b      	b.n	800177a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0d6      	beq.n	800165e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fba0 	bl	8000e06 <LL_ADC_REG_IsTriggerSourceSWStart>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d01c      	beq.n	8001706 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	7e5b      	ldrb	r3, [r3, #25]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d118      	bne.n	8001706 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d111      	bne.n	8001706 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d105      	bne.n	8001706 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fe:	f043 0201 	orr.w	r2, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a1f      	ldr	r2, [pc, #124]	; (8001788 <HAL_ADC_PollForConversion+0x1a8>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d002      	beq.n	8001716 <HAL_ADC_PollForConversion+0x136>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	e000      	b.n	8001718 <HAL_ADC_PollForConversion+0x138>
 8001716:	4b1d      	ldr	r3, [pc, #116]	; (800178c <HAL_ADC_PollForConversion+0x1ac>)
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	6812      	ldr	r2, [r2, #0]
 800171c:	4293      	cmp	r3, r2
 800171e:	d008      	beq.n	8001732 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d005      	beq.n	8001732 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	2b05      	cmp	r3, #5
 800172a:	d002      	beq.n	8001732 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	2b09      	cmp	r3, #9
 8001730:	d104      	bne.n	800173c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	61bb      	str	r3, [r7, #24]
 800173a:	e00c      	b.n	8001756 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a11      	ldr	r2, [pc, #68]	; (8001788 <HAL_ADC_PollForConversion+0x1a8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d002      	beq.n	800174c <HAL_ADC_PollForConversion+0x16c>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	e000      	b.n	800174e <HAL_ADC_PollForConversion+0x16e>
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <HAL_ADC_PollForConversion+0x1ac>)
 800174e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	2b08      	cmp	r3, #8
 800175a:	d104      	bne.n	8001766 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2208      	movs	r2, #8
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	e008      	b.n	8001778 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d103      	bne.n	8001778 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	220c      	movs	r2, #12
 8001776:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3720      	adds	r7, #32
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	50040300 	.word	0x50040300
 8001788:	50040100 	.word	0x50040100
 800178c:	50040000 	.word	0x50040000

08001790 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b0b6      	sub	sp, #216	; 0xd8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d101      	bne.n	80017ce <HAL_ADC_ConfigChannel+0x22>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e3c7      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x7b2>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fc82 	bl	80010e4 <LL_ADC_REG_IsConversionOngoing>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f040 83a8 	bne.w	8001f38 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b05      	cmp	r3, #5
 80017ee:	d824      	bhi.n	800183a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	3b02      	subs	r3, #2
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d81b      	bhi.n	8001832 <HAL_ADC_ConfigChannel+0x86>
 80017fa:	a201      	add	r2, pc, #4	; (adr r2, 8001800 <HAL_ADC_ConfigChannel+0x54>)
 80017fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001800:	08001811 	.word	0x08001811
 8001804:	08001819 	.word	0x08001819
 8001808:	08001821 	.word	0x08001821
 800180c:	08001829 	.word	0x08001829
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	220c      	movs	r2, #12
 8001814:	605a      	str	r2, [r3, #4]
          break;
 8001816:	e011      	b.n	800183c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2212      	movs	r2, #18
 800181c:	605a      	str	r2, [r3, #4]
          break;
 800181e:	e00d      	b.n	800183c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	2218      	movs	r2, #24
 8001824:	605a      	str	r2, [r3, #4]
          break;
 8001826:	e009      	b.n	800183c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800182e:	605a      	str	r2, [r3, #4]
          break;
 8001830:	e004      	b.n	800183c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	2206      	movs	r2, #6
 8001836:	605a      	str	r2, [r3, #4]
          break;
 8001838:	e000      	b.n	800183c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800183a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6818      	ldr	r0, [r3, #0]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	6859      	ldr	r1, [r3, #4]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	f7ff faef 	bl	8000e2c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fc46 	bl	80010e4 <LL_ADC_REG_IsConversionOngoing>
 8001858:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fc66 	bl	8001132 <LL_ADC_INJ_IsConversionOngoing>
 8001866:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800186a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800186e:	2b00      	cmp	r3, #0
 8001870:	f040 81a6 	bne.w	8001bc0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001874:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001878:	2b00      	cmp	r3, #0
 800187a:	f040 81a1 	bne.w	8001bc0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	6819      	ldr	r1, [r3, #0]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	461a      	mov	r2, r3
 800188c:	f7ff fafa 	bl	8000e84 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	08db      	lsrs	r3, r3, #3
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d00a      	beq.n	80018c8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	6919      	ldr	r1, [r3, #16]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018c2:	f7ff fa4b 	bl	8000d5c <LL_ADC_SetOffset>
 80018c6:	e17b      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2100      	movs	r1, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fa68 	bl	8000da4 <LL_ADC_GetOffsetChannel>
 80018d4:	4603      	mov	r3, r0
 80018d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10a      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x148>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fa5d 	bl	8000da4 <LL_ADC_GetOffsetChannel>
 80018ea:	4603      	mov	r3, r0
 80018ec:	0e9b      	lsrs	r3, r3, #26
 80018ee:	f003 021f 	and.w	r2, r3, #31
 80018f2:	e01e      	b.n	8001932 <HAL_ADC_ConfigChannel+0x186>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fa52 	bl	8000da4 <LL_ADC_GetOffsetChannel>
 8001900:	4603      	mov	r3, r0
 8001902:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800190a:	fa93 f3a3 	rbit	r3, r3
 800190e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001912:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001916:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800191a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001922:	2320      	movs	r3, #32
 8001924:	e004      	b.n	8001930 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001926:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800192a:	fab3 f383 	clz	r3, r3
 800192e:	b2db      	uxtb	r3, r3
 8001930:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800193a:	2b00      	cmp	r3, #0
 800193c:	d105      	bne.n	800194a <HAL_ADC_ConfigChannel+0x19e>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	0e9b      	lsrs	r3, r3, #26
 8001944:	f003 031f 	and.w	r3, r3, #31
 8001948:	e018      	b.n	800197c <HAL_ADC_ConfigChannel+0x1d0>
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001956:	fa93 f3a3 	rbit	r3, r3
 800195a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800195e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001962:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001966:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800196e:	2320      	movs	r3, #32
 8001970:	e004      	b.n	800197c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001972:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001976:	fab3 f383 	clz	r3, r3
 800197a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800197c:	429a      	cmp	r2, r3
 800197e:	d106      	bne.n	800198e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2200      	movs	r2, #0
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fa21 	bl	8000dd0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2101      	movs	r1, #1
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fa05 	bl	8000da4 <LL_ADC_GetOffsetChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10a      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x20e>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2101      	movs	r1, #1
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff f9fa 	bl	8000da4 <LL_ADC_GetOffsetChannel>
 80019b0:	4603      	mov	r3, r0
 80019b2:	0e9b      	lsrs	r3, r3, #26
 80019b4:	f003 021f 	and.w	r2, r3, #31
 80019b8:	e01e      	b.n	80019f8 <HAL_ADC_ConfigChannel+0x24c>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2101      	movs	r1, #1
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff f9ef 	bl	8000da4 <LL_ADC_GetOffsetChannel>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019d0:	fa93 f3a3 	rbit	r3, r3
 80019d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80019d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80019e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80019e8:	2320      	movs	r3, #32
 80019ea:	e004      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80019ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019f0:	fab3 f383 	clz	r3, r3
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d105      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x264>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	0e9b      	lsrs	r3, r3, #26
 8001a0a:	f003 031f 	and.w	r3, r3, #31
 8001a0e:	e018      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x296>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a1c:	fa93 f3a3 	rbit	r3, r3
 8001a20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001a2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001a34:	2320      	movs	r3, #32
 8001a36:	e004      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001a38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a3c:	fab3 f383 	clz	r3, r3
 8001a40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d106      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff f9be 	bl	8000dd0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2102      	movs	r1, #2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff f9a2 	bl	8000da4 <LL_ADC_GetOffsetChannel>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10a      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x2d4>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2102      	movs	r1, #2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff f997 	bl	8000da4 <LL_ADC_GetOffsetChannel>
 8001a76:	4603      	mov	r3, r0
 8001a78:	0e9b      	lsrs	r3, r3, #26
 8001a7a:	f003 021f 	and.w	r2, r3, #31
 8001a7e:	e01e      	b.n	8001abe <HAL_ADC_ConfigChannel+0x312>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2102      	movs	r1, #2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff f98c 	bl	8000da4 <LL_ADC_GetOffsetChannel>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a96:	fa93 f3a3 	rbit	r3, r3
 8001a9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001a9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001aa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001aa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001aae:	2320      	movs	r3, #32
 8001ab0:	e004      	b.n	8001abc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001ab2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ab6:	fab3 f383 	clz	r3, r3
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d105      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x32a>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	0e9b      	lsrs	r3, r3, #26
 8001ad0:	f003 031f 	and.w	r3, r3, #31
 8001ad4:	e016      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x358>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ade:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ae2:	fa93 f3a3 	rbit	r3, r3
 8001ae6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001ae8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001aea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001aee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001af6:	2320      	movs	r3, #32
 8001af8:	e004      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001afa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001afe:	fab3 f383 	clz	r3, r3
 8001b02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d106      	bne.n	8001b16 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2102      	movs	r1, #2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff f95d 	bl	8000dd0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2103      	movs	r1, #3
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff f941 	bl	8000da4 <LL_ADC_GetOffsetChannel>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10a      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x396>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2103      	movs	r1, #3
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff f936 	bl	8000da4 <LL_ADC_GetOffsetChannel>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	0e9b      	lsrs	r3, r3, #26
 8001b3c:	f003 021f 	and.w	r2, r3, #31
 8001b40:	e017      	b.n	8001b72 <HAL_ADC_ConfigChannel+0x3c6>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2103      	movs	r1, #3
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff f92b 	bl	8000da4 <LL_ADC_GetOffsetChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b54:	fa93 f3a3 	rbit	r3, r3
 8001b58:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b5c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001b5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001b64:	2320      	movs	r3, #32
 8001b66:	e003      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001b68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d105      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x3de>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	0e9b      	lsrs	r3, r3, #26
 8001b84:	f003 031f 	and.w	r3, r3, #31
 8001b88:	e011      	b.n	8001bae <HAL_ADC_ConfigChannel+0x402>
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b92:	fa93 f3a3 	rbit	r3, r3
 8001b96:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001b98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b9a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001ba2:	2320      	movs	r3, #32
 8001ba4:	e003      	b.n	8001bae <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ba8:	fab3 f383 	clz	r3, r3
 8001bac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d106      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2103      	movs	r1, #3
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff f908 	bl	8000dd0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fa3f 	bl	8001048 <LL_ADC_IsEnabled>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f040 813f 	bne.w	8001e50 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6818      	ldr	r0, [r3, #0]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	6819      	ldr	r1, [r3, #0]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	461a      	mov	r2, r3
 8001be0:	f7ff f97c 	bl	8000edc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	4a8e      	ldr	r2, [pc, #568]	; (8001e24 <HAL_ADC_ConfigChannel+0x678>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	f040 8130 	bne.w	8001e50 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10b      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x46c>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	0e9b      	lsrs	r3, r3, #26
 8001c06:	3301      	adds	r3, #1
 8001c08:	f003 031f 	and.w	r3, r3, #31
 8001c0c:	2b09      	cmp	r3, #9
 8001c0e:	bf94      	ite	ls
 8001c10:	2301      	movls	r3, #1
 8001c12:	2300      	movhi	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	e019      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x4a0>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c20:	fa93 f3a3 	rbit	r3, r3
 8001c24:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c28:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001c30:	2320      	movs	r3, #32
 8001c32:	e003      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001c34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c36:	fab3 f383 	clz	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	f003 031f 	and.w	r3, r3, #31
 8001c42:	2b09      	cmp	r3, #9
 8001c44:	bf94      	ite	ls
 8001c46:	2301      	movls	r3, #1
 8001c48:	2300      	movhi	r3, #0
 8001c4a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d079      	beq.n	8001d44 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d107      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x4c0>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	0e9b      	lsrs	r3, r3, #26
 8001c62:	3301      	adds	r3, #1
 8001c64:	069b      	lsls	r3, r3, #26
 8001c66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c6a:	e015      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x4ec>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c74:	fa93 f3a3 	rbit	r3, r3
 8001c78:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c7c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001c84:	2320      	movs	r3, #32
 8001c86:	e003      	b.n	8001c90 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c8a:	fab3 f383 	clz	r3, r3
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	3301      	adds	r3, #1
 8001c92:	069b      	lsls	r3, r3, #26
 8001c94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d109      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x50c>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	0e9b      	lsrs	r3, r3, #26
 8001caa:	3301      	adds	r3, #1
 8001cac:	f003 031f 	and.w	r3, r3, #31
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	e017      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x53c>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cc0:	fa93 f3a3 	rbit	r3, r3
 8001cc4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cc8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001cd0:	2320      	movs	r3, #32
 8001cd2:	e003      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cd6:	fab3 f383 	clz	r3, r3
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	3301      	adds	r3, #1
 8001cde:	f003 031f 	and.w	r3, r3, #31
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce8:	ea42 0103 	orr.w	r1, r2, r3
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10a      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x562>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	0e9b      	lsrs	r3, r3, #26
 8001cfe:	3301      	adds	r3, #1
 8001d00:	f003 021f 	and.w	r2, r3, #31
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	051b      	lsls	r3, r3, #20
 8001d0c:	e018      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x594>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d16:	fa93 f3a3 	rbit	r3, r3
 8001d1a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001d26:	2320      	movs	r3, #32
 8001d28:	e003      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d2c:	fab3 f383 	clz	r3, r3
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	3301      	adds	r3, #1
 8001d34:	f003 021f 	and.w	r2, r3, #31
 8001d38:	4613      	mov	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4413      	add	r3, r2
 8001d3e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d40:	430b      	orrs	r3, r1
 8001d42:	e080      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d107      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x5b4>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	0e9b      	lsrs	r3, r3, #26
 8001d56:	3301      	adds	r3, #1
 8001d58:	069b      	lsls	r3, r3, #26
 8001d5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d5e:	e015      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x5e0>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d68:	fa93 f3a3 	rbit	r3, r3
 8001d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d70:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001d78:	2320      	movs	r3, #32
 8001d7a:	e003      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7e:	fab3 f383 	clz	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	3301      	adds	r3, #1
 8001d86:	069b      	lsls	r3, r3, #26
 8001d88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d109      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x600>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	0e9b      	lsrs	r3, r3, #26
 8001d9e:	3301      	adds	r3, #1
 8001da0:	f003 031f 	and.w	r3, r3, #31
 8001da4:	2101      	movs	r1, #1
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	e017      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x630>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	61fb      	str	r3, [r7, #28]
  return result;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001dc4:	2320      	movs	r3, #32
 8001dc6:	e003      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	f003 031f 	and.w	r3, r3, #31
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	ea42 0103 	orr.w	r1, r2, r3
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10d      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x65c>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	0e9b      	lsrs	r3, r3, #26
 8001df2:	3301      	adds	r3, #1
 8001df4:	f003 021f 	and.w	r2, r3, #31
 8001df8:	4613      	mov	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3b1e      	subs	r3, #30
 8001e00:	051b      	lsls	r3, r3, #20
 8001e02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e06:	e01d      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x698>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	fa93 f3a3 	rbit	r3, r3
 8001e14:	613b      	str	r3, [r7, #16]
  return result;
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d103      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001e20:	2320      	movs	r3, #32
 8001e22:	e005      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x684>
 8001e24:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	fab3 f383 	clz	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	3301      	adds	r3, #1
 8001e32:	f003 021f 	and.w	r2, r3, #31
 8001e36:	4613      	mov	r3, r2
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3b1e      	subs	r3, #30
 8001e3e:	051b      	lsls	r3, r3, #20
 8001e40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e44:	430b      	orrs	r3, r1
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	6892      	ldr	r2, [r2, #8]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f7ff f81a 	bl	8000e84 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b44      	ldr	r3, [pc, #272]	; (8001f68 <HAL_ADC_ConfigChannel+0x7bc>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d07a      	beq.n	8001f52 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e5c:	4843      	ldr	r0, [pc, #268]	; (8001f6c <HAL_ADC_ConfigChannel+0x7c0>)
 8001e5e:	f7fe ff6f 	bl	8000d40 <LL_ADC_GetCommonPathInternalCh>
 8001e62:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a41      	ldr	r2, [pc, #260]	; (8001f70 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d12c      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d126      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a3c      	ldr	r2, [pc, #240]	; (8001f74 <HAL_ADC_ConfigChannel+0x7c8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d004      	beq.n	8001e90 <HAL_ADC_ConfigChannel+0x6e4>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a3b      	ldr	r2, [pc, #236]	; (8001f78 <HAL_ADC_ConfigChannel+0x7cc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d15d      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4834      	ldr	r0, [pc, #208]	; (8001f6c <HAL_ADC_ConfigChannel+0x7c0>)
 8001e9c:	f7fe ff3d 	bl	8000d1a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ea0:	4b36      	ldr	r3, [pc, #216]	; (8001f7c <HAL_ADC_ConfigChannel+0x7d0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	099b      	lsrs	r3, r3, #6
 8001ea6:	4a36      	ldr	r2, [pc, #216]	; (8001f80 <HAL_ADC_ConfigChannel+0x7d4>)
 8001ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eac:	099b      	lsrs	r3, r3, #6
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	4413      	add	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001eba:	e002      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1f9      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ec8:	e040      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a2d      	ldr	r2, [pc, #180]	; (8001f84 <HAL_ADC_ConfigChannel+0x7d8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d118      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x75a>
 8001ed4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d112      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a23      	ldr	r2, [pc, #140]	; (8001f74 <HAL_ADC_ConfigChannel+0x7c8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d004      	beq.n	8001ef4 <HAL_ADC_ConfigChannel+0x748>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a22      	ldr	r2, [pc, #136]	; (8001f78 <HAL_ADC_ConfigChannel+0x7cc>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d12d      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ef4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ef8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001efc:	4619      	mov	r1, r3
 8001efe:	481b      	ldr	r0, [pc, #108]	; (8001f6c <HAL_ADC_ConfigChannel+0x7c0>)
 8001f00:	f7fe ff0b 	bl	8000d1a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f04:	e024      	b.n	8001f50 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a1f      	ldr	r2, [pc, #124]	; (8001f88 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d120      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d11a      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a14      	ldr	r2, [pc, #80]	; (8001f74 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d115      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f2e:	4619      	mov	r1, r3
 8001f30:	480e      	ldr	r0, [pc, #56]	; (8001f6c <HAL_ADC_ConfigChannel+0x7c0>)
 8001f32:	f7fe fef2 	bl	8000d1a <LL_ADC_SetCommonPathInternalCh>
 8001f36:	e00c      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3c:	f043 0220 	orr.w	r2, r3, #32
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001f4a:	e002      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f4c:	bf00      	nop
 8001f4e:	e000      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f50:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f5a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	37d8      	adds	r7, #216	; 0xd8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	80080000 	.word	0x80080000
 8001f6c:	50040300 	.word	0x50040300
 8001f70:	c7520000 	.word	0xc7520000
 8001f74:	50040000 	.word	0x50040000
 8001f78:	50040200 	.word	0x50040200
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	053e2d63 	.word	0x053e2d63
 8001f84:	cb840000 	.word	0xcb840000
 8001f88:	80000001 	.word	0x80000001

08001f8c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff f89e 	bl	80010e4 <LL_ADC_REG_IsConversionOngoing>
 8001fa8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff f8bf 	bl	8001132 <LL_ADC_INJ_IsConversionOngoing>
 8001fb4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d103      	bne.n	8001fc4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 8098 	beq.w	80020f4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d02a      	beq.n	8002028 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7e5b      	ldrb	r3, [r3, #25]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d126      	bne.n	8002028 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7e1b      	ldrb	r3, [r3, #24]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d122      	bne.n	8002028 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001fe6:	e014      	b.n	8002012 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	4a45      	ldr	r2, [pc, #276]	; (8002100 <ADC_ConversionStop+0x174>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d90d      	bls.n	800200c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff4:	f043 0210 	orr.w	r2, r3, #16
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002000:	f043 0201 	orr.w	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e074      	b.n	80020f6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	3301      	adds	r3, #1
 8002010:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201c:	2b40      	cmp	r3, #64	; 0x40
 800201e:	d1e3      	bne.n	8001fe8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2240      	movs	r2, #64	; 0x40
 8002026:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d014      	beq.n	8002058 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff f856 	bl	80010e4 <LL_ADC_REG_IsConversionOngoing>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00c      	beq.n	8002058 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff f813 	bl	800106e <LL_ADC_IsDisableOngoing>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d104      	bne.n	8002058 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff f832 	bl	80010bc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d014      	beq.n	8002088 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff f865 	bl	8001132 <LL_ADC_INJ_IsConversionOngoing>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00c      	beq.n	8002088 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe fffb 	bl	800106e <LL_ADC_IsDisableOngoing>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d104      	bne.n	8002088 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff f841 	bl	800110a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	2b02      	cmp	r3, #2
 800208c:	d005      	beq.n	800209a <ADC_ConversionStop+0x10e>
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	2b03      	cmp	r3, #3
 8002092:	d105      	bne.n	80020a0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002094:	230c      	movs	r3, #12
 8002096:	617b      	str	r3, [r7, #20]
        break;
 8002098:	e005      	b.n	80020a6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800209a:	2308      	movs	r3, #8
 800209c:	617b      	str	r3, [r7, #20]
        break;
 800209e:	e002      	b.n	80020a6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80020a0:	2304      	movs	r3, #4
 80020a2:	617b      	str	r3, [r7, #20]
        break;
 80020a4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80020a6:	f7fe fe19 	bl	8000cdc <HAL_GetTick>
 80020aa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80020ac:	e01b      	b.n	80020e6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80020ae:	f7fe fe15 	bl	8000cdc <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b05      	cmp	r3, #5
 80020ba:	d914      	bls.n	80020e6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00d      	beq.n	80020e6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ce:	f043 0210 	orr.w	r2, r3, #16
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020da:	f043 0201 	orr.w	r2, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e007      	b.n	80020f6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1dc      	bne.n	80020ae <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3720      	adds	r7, #32
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	a33fffff 	.word	0xa33fffff

08002104 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800210c:	2300      	movs	r3, #0
 800210e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe ff97 	bl	8001048 <LL_ADC_IsEnabled>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d169      	bne.n	80021f4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	4b36      	ldr	r3, [pc, #216]	; (8002200 <ADC_Enable+0xfc>)
 8002128:	4013      	ands	r3, r2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00d      	beq.n	800214a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002132:	f043 0210 	orr.w	r2, r3, #16
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213e:	f043 0201 	orr.w	r2, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e055      	b.n	80021f6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe ff52 	bl	8000ff8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002154:	482b      	ldr	r0, [pc, #172]	; (8002204 <ADC_Enable+0x100>)
 8002156:	f7fe fdf3 	bl	8000d40 <LL_ADC_GetCommonPathInternalCh>
 800215a:	4603      	mov	r3, r0
 800215c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d013      	beq.n	800218c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002164:	4b28      	ldr	r3, [pc, #160]	; (8002208 <ADC_Enable+0x104>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	099b      	lsrs	r3, r3, #6
 800216a:	4a28      	ldr	r2, [pc, #160]	; (800220c <ADC_Enable+0x108>)
 800216c:	fba2 2303 	umull	r2, r3, r2, r3
 8002170:	099b      	lsrs	r3, r3, #6
 8002172:	1c5a      	adds	r2, r3, #1
 8002174:	4613      	mov	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800217e:	e002      	b.n	8002186 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	3b01      	subs	r3, #1
 8002184:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1f9      	bne.n	8002180 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800218c:	f7fe fda6 	bl	8000cdc <HAL_GetTick>
 8002190:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002192:	e028      	b.n	80021e6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe ff55 	bl	8001048 <LL_ADC_IsEnabled>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d104      	bne.n	80021ae <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe ff25 	bl	8000ff8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021ae:	f7fe fd95 	bl	8000cdc <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d914      	bls.n	80021e6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d00d      	beq.n	80021e6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ce:	f043 0210 	orr.w	r2, r3, #16
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021da:	f043 0201 	orr.w	r2, r3, #1
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e007      	b.n	80021f6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d1cf      	bne.n	8002194 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	8000003f 	.word	0x8000003f
 8002204:	50040300 	.word	0x50040300
 8002208:	20000000 	.word	0x20000000
 800220c:	053e2d63 	.word	0x053e2d63

08002210 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe ff26 	bl	800106e <LL_ADC_IsDisableOngoing>
 8002222:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe ff0d 	bl	8001048 <LL_ADC_IsEnabled>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d047      	beq.n	80022c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d144      	bne.n	80022c4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 030d 	and.w	r3, r3, #13
 8002244:	2b01      	cmp	r3, #1
 8002246:	d10c      	bne.n	8002262 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe fee7 	bl	8001020 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2203      	movs	r2, #3
 8002258:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800225a:	f7fe fd3f 	bl	8000cdc <HAL_GetTick>
 800225e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002260:	e029      	b.n	80022b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002266:	f043 0210 	orr.w	r2, r3, #16
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002272:	f043 0201 	orr.w	r2, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e023      	b.n	80022c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800227e:	f7fe fd2d 	bl	8000cdc <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d914      	bls.n	80022b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00d      	beq.n	80022b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229e:	f043 0210 	orr.w	r2, r3, #16
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022aa:	f043 0201 	orr.w	r2, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e007      	b.n	80022c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1dc      	bne.n	800227e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <LL_ADC_IsEnabled>:
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <LL_ADC_IsEnabled+0x18>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <LL_ADC_IsEnabled+0x1a>
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_REG_IsConversionOngoing>:
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b04      	cmp	r3, #4
 8002306:	d101      	bne.n	800230c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b09f      	sub	sp, #124	; 0x7c
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002336:	2302      	movs	r3, #2
 8002338:	e093      	b.n	8002462 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002342:	2300      	movs	r3, #0
 8002344:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002346:	2300      	movs	r3, #0
 8002348:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a47      	ldr	r2, [pc, #284]	; (800246c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d102      	bne.n	800235a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002354:	4b46      	ldr	r3, [pc, #280]	; (8002470 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	e001      	b.n	800235e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800235a:	2300      	movs	r3, #0
 800235c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10b      	bne.n	800237c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002368:	f043 0220 	orr.w	r2, r3, #32
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e072      	b.n	8002462 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff ffb8 	bl	80022f4 <LL_ADC_REG_IsConversionOngoing>
 8002384:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff ffb2 	bl	80022f4 <LL_ADC_REG_IsConversionOngoing>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d154      	bne.n	8002440 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002398:	2b00      	cmp	r3, #0
 800239a:	d151      	bne.n	8002440 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800239c:	4b35      	ldr	r3, [pc, #212]	; (8002474 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800239e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d02c      	beq.n	8002402 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80023a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	6859      	ldr	r1, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023ba:	035b      	lsls	r3, r3, #13
 80023bc:	430b      	orrs	r3, r1
 80023be:	431a      	orrs	r2, r3
 80023c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023c2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023c4:	4829      	ldr	r0, [pc, #164]	; (800246c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80023c6:	f7ff ff82 	bl	80022ce <LL_ADC_IsEnabled>
 80023ca:	4604      	mov	r4, r0
 80023cc:	4828      	ldr	r0, [pc, #160]	; (8002470 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80023ce:	f7ff ff7e 	bl	80022ce <LL_ADC_IsEnabled>
 80023d2:	4603      	mov	r3, r0
 80023d4:	431c      	orrs	r4, r3
 80023d6:	4828      	ldr	r0, [pc, #160]	; (8002478 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80023d8:	f7ff ff79 	bl	80022ce <LL_ADC_IsEnabled>
 80023dc:	4603      	mov	r3, r0
 80023de:	4323      	orrs	r3, r4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d137      	bne.n	8002454 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80023e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023ec:	f023 030f 	bic.w	r3, r3, #15
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	6811      	ldr	r1, [r2, #0]
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	6892      	ldr	r2, [r2, #8]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	431a      	orrs	r2, r3
 80023fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023fe:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002400:	e028      	b.n	8002454 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800240a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800240c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800240e:	4817      	ldr	r0, [pc, #92]	; (800246c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002410:	f7ff ff5d 	bl	80022ce <LL_ADC_IsEnabled>
 8002414:	4604      	mov	r4, r0
 8002416:	4816      	ldr	r0, [pc, #88]	; (8002470 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002418:	f7ff ff59 	bl	80022ce <LL_ADC_IsEnabled>
 800241c:	4603      	mov	r3, r0
 800241e:	431c      	orrs	r4, r3
 8002420:	4815      	ldr	r0, [pc, #84]	; (8002478 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002422:	f7ff ff54 	bl	80022ce <LL_ADC_IsEnabled>
 8002426:	4603      	mov	r3, r0
 8002428:	4323      	orrs	r3, r4
 800242a:	2b00      	cmp	r3, #0
 800242c:	d112      	bne.n	8002454 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800242e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002436:	f023 030f 	bic.w	r3, r3, #15
 800243a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800243c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800243e:	e009      	b.n	8002454 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002444:	f043 0220 	orr.w	r2, r3, #32
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002452:	e000      	b.n	8002456 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002454:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800245e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002462:	4618      	mov	r0, r3
 8002464:	377c      	adds	r7, #124	; 0x7c
 8002466:	46bd      	mov	sp, r7
 8002468:	bd90      	pop	{r4, r7, pc}
 800246a:	bf00      	nop
 800246c:	50040000 	.word	0x50040000
 8002470:	50040100 	.word	0x50040100
 8002474:	50040300 	.word	0x50040300
 8002478:	50040200 	.word	0x50040200

0800247c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <__NVIC_SetPriorityGrouping+0x44>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002498:	4013      	ands	r3, r2
 800249a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ae:	4a04      	ldr	r2, [pc, #16]	; (80024c0 <__NVIC_SetPriorityGrouping+0x44>)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	60d3      	str	r3, [r2, #12]
}
 80024b4:	bf00      	nop
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c8:	4b04      	ldr	r3, [pc, #16]	; (80024dc <__NVIC_GetPriorityGrouping+0x18>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	0a1b      	lsrs	r3, r3, #8
 80024ce:	f003 0307 	and.w	r3, r3, #7
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	db0b      	blt.n	800250a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	f003 021f 	and.w	r2, r3, #31
 80024f8:	4907      	ldr	r1, [pc, #28]	; (8002518 <__NVIC_EnableIRQ+0x38>)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	095b      	lsrs	r3, r3, #5
 8002500:	2001      	movs	r0, #1
 8002502:	fa00 f202 	lsl.w	r2, r0, r2
 8002506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	e000e100 	.word	0xe000e100

0800251c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	6039      	str	r1, [r7, #0]
 8002526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252c:	2b00      	cmp	r3, #0
 800252e:	db0a      	blt.n	8002546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	b2da      	uxtb	r2, r3
 8002534:	490c      	ldr	r1, [pc, #48]	; (8002568 <__NVIC_SetPriority+0x4c>)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	0112      	lsls	r2, r2, #4
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	440b      	add	r3, r1
 8002540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002544:	e00a      	b.n	800255c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	b2da      	uxtb	r2, r3
 800254a:	4908      	ldr	r1, [pc, #32]	; (800256c <__NVIC_SetPriority+0x50>)
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	3b04      	subs	r3, #4
 8002554:	0112      	lsls	r2, r2, #4
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	440b      	add	r3, r1
 800255a:	761a      	strb	r2, [r3, #24]
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000e100 	.word	0xe000e100
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002570:	b480      	push	{r7}
 8002572:	b089      	sub	sp, #36	; 0x24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f1c3 0307 	rsb	r3, r3, #7
 800258a:	2b04      	cmp	r3, #4
 800258c:	bf28      	it	cs
 800258e:	2304      	movcs	r3, #4
 8002590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3304      	adds	r3, #4
 8002596:	2b06      	cmp	r3, #6
 8002598:	d902      	bls.n	80025a0 <NVIC_EncodePriority+0x30>
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3b03      	subs	r3, #3
 800259e:	e000      	b.n	80025a2 <NVIC_EncodePriority+0x32>
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43da      	mvns	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	401a      	ands	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	fa01 f303 	lsl.w	r3, r1, r3
 80025c2:	43d9      	mvns	r1, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c8:	4313      	orrs	r3, r2
         );
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3724      	adds	r7, #36	; 0x24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7ff ff4c 	bl	800247c <__NVIC_SetPriorityGrouping>
}
 80025e4:	bf00      	nop
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025fe:	f7ff ff61 	bl	80024c4 <__NVIC_GetPriorityGrouping>
 8002602:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	68b9      	ldr	r1, [r7, #8]
 8002608:	6978      	ldr	r0, [r7, #20]
 800260a:	f7ff ffb1 	bl	8002570 <NVIC_EncodePriority>
 800260e:	4602      	mov	r2, r0
 8002610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002614:	4611      	mov	r1, r2
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff ff80 	bl	800251c <__NVIC_SetPriority>
}
 800261c:	bf00      	nop
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff ff54 	bl	80024e0 <__NVIC_EnableIRQ>
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002640:	b480      	push	{r7}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800264e:	e17f      	b.n	8002950 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	2101      	movs	r1, #1
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	4013      	ands	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 8171 	beq.w	800294a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	2b01      	cmp	r3, #1
 8002672:	d005      	beq.n	8002680 <HAL_GPIO_Init+0x40>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d130      	bne.n	80026e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	2203      	movs	r2, #3
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026b6:	2201      	movs	r2, #1
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4013      	ands	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	091b      	lsrs	r3, r3, #4
 80026cc:	f003 0201 	and.w	r2, r3, #1
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d118      	bne.n	8002720 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80026f4:	2201      	movs	r2, #1
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	08db      	lsrs	r3, r3, #3
 800270a:	f003 0201 	and.w	r2, r3, #1
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	2b03      	cmp	r3, #3
 800272a:	d017      	beq.n	800275c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	2203      	movs	r2, #3
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4013      	ands	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d123      	bne.n	80027b0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	08da      	lsrs	r2, r3, #3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3208      	adds	r2, #8
 8002770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002774:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	220f      	movs	r2, #15
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4013      	ands	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	08da      	lsrs	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3208      	adds	r2, #8
 80027aa:	6939      	ldr	r1, [r7, #16]
 80027ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	2203      	movs	r2, #3
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 0203 	and.w	r2, r3, #3
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80ac 	beq.w	800294a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f2:	4b5f      	ldr	r3, [pc, #380]	; (8002970 <HAL_GPIO_Init+0x330>)
 80027f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f6:	4a5e      	ldr	r2, [pc, #376]	; (8002970 <HAL_GPIO_Init+0x330>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6613      	str	r3, [r2, #96]	; 0x60
 80027fe:	4b5c      	ldr	r3, [pc, #368]	; (8002970 <HAL_GPIO_Init+0x330>)
 8002800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800280a:	4a5a      	ldr	r2, [pc, #360]	; (8002974 <HAL_GPIO_Init+0x334>)
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	089b      	lsrs	r3, r3, #2
 8002810:	3302      	adds	r3, #2
 8002812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002816:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	220f      	movs	r2, #15
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43db      	mvns	r3, r3
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4013      	ands	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002834:	d025      	beq.n	8002882 <HAL_GPIO_Init+0x242>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a4f      	ldr	r2, [pc, #316]	; (8002978 <HAL_GPIO_Init+0x338>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d01f      	beq.n	800287e <HAL_GPIO_Init+0x23e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a4e      	ldr	r2, [pc, #312]	; (800297c <HAL_GPIO_Init+0x33c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d019      	beq.n	800287a <HAL_GPIO_Init+0x23a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a4d      	ldr	r2, [pc, #308]	; (8002980 <HAL_GPIO_Init+0x340>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d013      	beq.n	8002876 <HAL_GPIO_Init+0x236>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a4c      	ldr	r2, [pc, #304]	; (8002984 <HAL_GPIO_Init+0x344>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00d      	beq.n	8002872 <HAL_GPIO_Init+0x232>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a4b      	ldr	r2, [pc, #300]	; (8002988 <HAL_GPIO_Init+0x348>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d007      	beq.n	800286e <HAL_GPIO_Init+0x22e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a4a      	ldr	r2, [pc, #296]	; (800298c <HAL_GPIO_Init+0x34c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d101      	bne.n	800286a <HAL_GPIO_Init+0x22a>
 8002866:	2306      	movs	r3, #6
 8002868:	e00c      	b.n	8002884 <HAL_GPIO_Init+0x244>
 800286a:	2307      	movs	r3, #7
 800286c:	e00a      	b.n	8002884 <HAL_GPIO_Init+0x244>
 800286e:	2305      	movs	r3, #5
 8002870:	e008      	b.n	8002884 <HAL_GPIO_Init+0x244>
 8002872:	2304      	movs	r3, #4
 8002874:	e006      	b.n	8002884 <HAL_GPIO_Init+0x244>
 8002876:	2303      	movs	r3, #3
 8002878:	e004      	b.n	8002884 <HAL_GPIO_Init+0x244>
 800287a:	2302      	movs	r3, #2
 800287c:	e002      	b.n	8002884 <HAL_GPIO_Init+0x244>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <HAL_GPIO_Init+0x244>
 8002882:	2300      	movs	r3, #0
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	f002 0203 	and.w	r2, r2, #3
 800288a:	0092      	lsls	r2, r2, #2
 800288c:	4093      	lsls	r3, r2
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002894:	4937      	ldr	r1, [pc, #220]	; (8002974 <HAL_GPIO_Init+0x334>)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	089b      	lsrs	r3, r3, #2
 800289a:	3302      	adds	r3, #2
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028a2:	4b3b      	ldr	r3, [pc, #236]	; (8002990 <HAL_GPIO_Init+0x350>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4013      	ands	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028c6:	4a32      	ldr	r2, [pc, #200]	; (8002990 <HAL_GPIO_Init+0x350>)
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028cc:	4b30      	ldr	r3, [pc, #192]	; (8002990 <HAL_GPIO_Init+0x350>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4013      	ands	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028f0:	4a27      	ldr	r2, [pc, #156]	; (8002990 <HAL_GPIO_Init+0x350>)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028f6:	4b26      	ldr	r3, [pc, #152]	; (8002990 <HAL_GPIO_Init+0x350>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	43db      	mvns	r3, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800291a:	4a1d      	ldr	r2, [pc, #116]	; (8002990 <HAL_GPIO_Init+0x350>)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002920:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <HAL_GPIO_Init+0x350>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	43db      	mvns	r3, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002944:	4a12      	ldr	r2, [pc, #72]	; (8002990 <HAL_GPIO_Init+0x350>)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	3301      	adds	r3, #1
 800294e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	fa22 f303 	lsr.w	r3, r2, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	f47f ae78 	bne.w	8002650 <HAL_GPIO_Init+0x10>
  }
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000
 8002974:	40010000 	.word	0x40010000
 8002978:	48000400 	.word	0x48000400
 800297c:	48000800 	.word	0x48000800
 8002980:	48000c00 	.word	0x48000c00
 8002984:	48001000 	.word	0x48001000
 8002988:	48001400 	.word	0x48001400
 800298c:	48001800 	.word	0x48001800
 8002990:	40010400 	.word	0x40010400

08002994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	807b      	strh	r3, [r7, #2]
 80029a0:	4613      	mov	r3, r2
 80029a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029a4:	787b      	ldrb	r3, [r7, #1]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029aa:	887a      	ldrh	r2, [r7, #2]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029b0:	e002      	b.n	80029b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029b2:	887a      	ldrh	r2, [r7, #2]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80029c8:	4b04      	ldr	r3, [pc, #16]	; (80029dc <HAL_PWREx_GetVoltageRange+0x18>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40007000 	.word	0x40007000

080029e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029ee:	d130      	bne.n	8002a52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029f0:	4b23      	ldr	r3, [pc, #140]	; (8002a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029fc:	d038      	beq.n	8002a70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029fe:	4b20      	ldr	r3, [pc, #128]	; (8002a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a06:	4a1e      	ldr	r2, [pc, #120]	; (8002a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a0e:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2232      	movs	r2, #50	; 0x32
 8002a14:	fb02 f303 	mul.w	r3, r2, r3
 8002a18:	4a1b      	ldr	r2, [pc, #108]	; (8002a88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	0c9b      	lsrs	r3, r3, #18
 8002a20:	3301      	adds	r3, #1
 8002a22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a24:	e002      	b.n	8002a2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a2c:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a38:	d102      	bne.n	8002a40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f2      	bne.n	8002a26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a40:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a4c:	d110      	bne.n	8002a70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e00f      	b.n	8002a72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a52:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a5e:	d007      	beq.n	8002a70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a60:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a68:	4a05      	ldr	r2, [pc, #20]	; (8002a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40007000 	.word	0x40007000
 8002a84:	20000000 	.word	0x20000000
 8002a88:	431bde83 	.word	0x431bde83

08002a8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e3ca      	b.n	8003234 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a9e:	4b97      	ldr	r3, [pc, #604]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aa8:	4b94      	ldr	r3, [pc, #592]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 80e4 	beq.w	8002c88 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d007      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x4a>
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	2b0c      	cmp	r3, #12
 8002aca:	f040 808b 	bne.w	8002be4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	f040 8087 	bne.w	8002be4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ad6:	4b89      	ldr	r3, [pc, #548]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d005      	beq.n	8002aee <HAL_RCC_OscConfig+0x62>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e3a2      	b.n	8003234 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1a      	ldr	r2, [r3, #32]
 8002af2:	4b82      	ldr	r3, [pc, #520]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d004      	beq.n	8002b08 <HAL_RCC_OscConfig+0x7c>
 8002afe:	4b7f      	ldr	r3, [pc, #508]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b06:	e005      	b.n	8002b14 <HAL_RCC_OscConfig+0x88>
 8002b08:	4b7c      	ldr	r3, [pc, #496]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b0e:	091b      	lsrs	r3, r3, #4
 8002b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d223      	bcs.n	8002b60 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 fd87 	bl	8003630 <RCC_SetFlashLatencyFromMSIRange>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e383      	b.n	8003234 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b2c:	4b73      	ldr	r3, [pc, #460]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a72      	ldr	r2, [pc, #456]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002b32:	f043 0308 	orr.w	r3, r3, #8
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	4b70      	ldr	r3, [pc, #448]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	496d      	ldr	r1, [pc, #436]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b4a:	4b6c      	ldr	r3, [pc, #432]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	021b      	lsls	r3, r3, #8
 8002b58:	4968      	ldr	r1, [pc, #416]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	604b      	str	r3, [r1, #4]
 8002b5e:	e025      	b.n	8002bac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b60:	4b66      	ldr	r3, [pc, #408]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a65      	ldr	r2, [pc, #404]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002b66:	f043 0308 	orr.w	r3, r3, #8
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	4b63      	ldr	r3, [pc, #396]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	4960      	ldr	r1, [pc, #384]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b7e:	4b5f      	ldr	r3, [pc, #380]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	021b      	lsls	r3, r3, #8
 8002b8c:	495b      	ldr	r1, [pc, #364]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d109      	bne.n	8002bac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 fd47 	bl	8003630 <RCC_SetFlashLatencyFromMSIRange>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e343      	b.n	8003234 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bac:	f000 fc4a 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	4b52      	ldr	r3, [pc, #328]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	091b      	lsrs	r3, r3, #4
 8002bb8:	f003 030f 	and.w	r3, r3, #15
 8002bbc:	4950      	ldr	r1, [pc, #320]	; (8002d00 <HAL_RCC_OscConfig+0x274>)
 8002bbe:	5ccb      	ldrb	r3, [r1, r3]
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc8:	4a4e      	ldr	r2, [pc, #312]	; (8002d04 <HAL_RCC_OscConfig+0x278>)
 8002bca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002bcc:	4b4e      	ldr	r3, [pc, #312]	; (8002d08 <HAL_RCC_OscConfig+0x27c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fd ff85 	bl	8000ae0 <HAL_InitTick>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d052      	beq.n	8002c86 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
 8002be2:	e327      	b.n	8003234 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d032      	beq.n	8002c52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bec:	4b43      	ldr	r3, [pc, #268]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a42      	ldr	r2, [pc, #264]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bf8:	f7fe f870 	bl	8000cdc <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c00:	f7fe f86c 	bl	8000cdc <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e310      	b.n	8003234 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c12:	4b3a      	ldr	r3, [pc, #232]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c1e:	4b37      	ldr	r3, [pc, #220]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a36      	ldr	r2, [pc, #216]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002c24:	f043 0308 	orr.w	r3, r3, #8
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	4b34      	ldr	r3, [pc, #208]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	4931      	ldr	r1, [pc, #196]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c3c:	4b2f      	ldr	r3, [pc, #188]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	021b      	lsls	r3, r3, #8
 8002c4a:	492c      	ldr	r1, [pc, #176]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	604b      	str	r3, [r1, #4]
 8002c50:	e01a      	b.n	8002c88 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c52:	4b2a      	ldr	r3, [pc, #168]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a29      	ldr	r2, [pc, #164]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002c58:	f023 0301 	bic.w	r3, r3, #1
 8002c5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c5e:	f7fe f83d 	bl	8000cdc <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c66:	f7fe f839 	bl	8000cdc <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e2dd      	b.n	8003234 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c78:	4b20      	ldr	r3, [pc, #128]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1f0      	bne.n	8002c66 <HAL_RCC_OscConfig+0x1da>
 8002c84:	e000      	b.n	8002c88 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d074      	beq.n	8002d7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d005      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x21a>
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	2b0c      	cmp	r3, #12
 8002c9e:	d10e      	bne.n	8002cbe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d10b      	bne.n	8002cbe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca6:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d064      	beq.n	8002d7c <HAL_RCC_OscConfig+0x2f0>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d160      	bne.n	8002d7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e2ba      	b.n	8003234 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc6:	d106      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x24a>
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a0b      	ldr	r2, [pc, #44]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd2:	6013      	str	r3, [r2, #0]
 8002cd4:	e026      	b.n	8002d24 <HAL_RCC_OscConfig+0x298>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cde:	d115      	bne.n	8002d0c <HAL_RCC_OscConfig+0x280>
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a05      	ldr	r2, [pc, #20]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002ce6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	4b03      	ldr	r3, [pc, #12]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a02      	ldr	r2, [pc, #8]	; (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	e014      	b.n	8002d24 <HAL_RCC_OscConfig+0x298>
 8002cfa:	bf00      	nop
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	08007d88 	.word	0x08007d88
 8002d04:	20000000 	.word	0x20000000
 8002d08:	20000004 	.word	0x20000004
 8002d0c:	4ba0      	ldr	r3, [pc, #640]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a9f      	ldr	r2, [pc, #636]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	4b9d      	ldr	r3, [pc, #628]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a9c      	ldr	r2, [pc, #624]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d013      	beq.n	8002d54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2c:	f7fd ffd6 	bl	8000cdc <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d34:	f7fd ffd2 	bl	8000cdc <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b64      	cmp	r3, #100	; 0x64
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e276      	b.n	8003234 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d46:	4b92      	ldr	r3, [pc, #584]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0x2a8>
 8002d52:	e014      	b.n	8002d7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d54:	f7fd ffc2 	bl	8000cdc <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d5c:	f7fd ffbe 	bl	8000cdc <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b64      	cmp	r3, #100	; 0x64
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e262      	b.n	8003234 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d6e:	4b88      	ldr	r3, [pc, #544]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0x2d0>
 8002d7a:	e000      	b.n	8002d7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d060      	beq.n	8002e4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d005      	beq.n	8002d9c <HAL_RCC_OscConfig+0x310>
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	2b0c      	cmp	r3, #12
 8002d94:	d119      	bne.n	8002dca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d116      	bne.n	8002dca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d9c:	4b7c      	ldr	r3, [pc, #496]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <HAL_RCC_OscConfig+0x328>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e23f      	b.n	8003234 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db4:	4b76      	ldr	r3, [pc, #472]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	061b      	lsls	r3, r3, #24
 8002dc2:	4973      	ldr	r1, [pc, #460]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dc8:	e040      	b.n	8002e4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d023      	beq.n	8002e1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dd2:	4b6f      	ldr	r3, [pc, #444]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a6e      	ldr	r2, [pc, #440]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dde:	f7fd ff7d 	bl	8000cdc <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de6:	f7fd ff79 	bl	8000cdc <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e21d      	b.n	8003234 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002df8:	4b65      	ldr	r3, [pc, #404]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0f0      	beq.n	8002de6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e04:	4b62      	ldr	r3, [pc, #392]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	061b      	lsls	r3, r3, #24
 8002e12:	495f      	ldr	r1, [pc, #380]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	604b      	str	r3, [r1, #4]
 8002e18:	e018      	b.n	8002e4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e1a:	4b5d      	ldr	r3, [pc, #372]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a5c      	ldr	r2, [pc, #368]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e26:	f7fd ff59 	bl	8000cdc <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e2e:	f7fd ff55 	bl	8000cdc <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e1f9      	b.n	8003234 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e40:	4b53      	ldr	r3, [pc, #332]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1f0      	bne.n	8002e2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0308 	and.w	r3, r3, #8
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d03c      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01c      	beq.n	8002e9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e60:	4b4b      	ldr	r3, [pc, #300]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e66:	4a4a      	ldr	r2, [pc, #296]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e70:	f7fd ff34 	bl	8000cdc <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e78:	f7fd ff30 	bl	8000cdc <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e1d4      	b.n	8003234 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e8a:	4b41      	ldr	r3, [pc, #260]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0ef      	beq.n	8002e78 <HAL_RCC_OscConfig+0x3ec>
 8002e98:	e01b      	b.n	8002ed2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e9a:	4b3d      	ldr	r3, [pc, #244]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ea0:	4a3b      	ldr	r2, [pc, #236]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002ea2:	f023 0301 	bic.w	r3, r3, #1
 8002ea6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eaa:	f7fd ff17 	bl	8000cdc <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb2:	f7fd ff13 	bl	8000cdc <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e1b7      	b.n	8003234 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ec4:	4b32      	ldr	r3, [pc, #200]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1ef      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 80a6 	beq.w	800302c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ee4:	4b2a      	ldr	r3, [pc, #168]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10d      	bne.n	8002f0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef0:	4b27      	ldr	r3, [pc, #156]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef4:	4a26      	ldr	r2, [pc, #152]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efa:	6593      	str	r3, [r2, #88]	; 0x58
 8002efc:	4b24      	ldr	r3, [pc, #144]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f0c:	4b21      	ldr	r3, [pc, #132]	; (8002f94 <HAL_RCC_OscConfig+0x508>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d118      	bne.n	8002f4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f18:	4b1e      	ldr	r3, [pc, #120]	; (8002f94 <HAL_RCC_OscConfig+0x508>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a1d      	ldr	r2, [pc, #116]	; (8002f94 <HAL_RCC_OscConfig+0x508>)
 8002f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f24:	f7fd feda 	bl	8000cdc <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2c:	f7fd fed6 	bl	8000cdc <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e17a      	b.n	8003234 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f3e:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <HAL_RCC_OscConfig+0x508>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d108      	bne.n	8002f64 <HAL_RCC_OscConfig+0x4d8>
 8002f52:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f58:	4a0d      	ldr	r2, [pc, #52]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f62:	e029      	b.n	8002fb8 <HAL_RCC_OscConfig+0x52c>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	2b05      	cmp	r3, #5
 8002f6a:	d115      	bne.n	8002f98 <HAL_RCC_OscConfig+0x50c>
 8002f6c:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f72:	4a07      	ldr	r2, [pc, #28]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002f74:	f043 0304 	orr.w	r3, r3, #4
 8002f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f7c:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f82:	4a03      	ldr	r2, [pc, #12]	; (8002f90 <HAL_RCC_OscConfig+0x504>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f8c:	e014      	b.n	8002fb8 <HAL_RCC_OscConfig+0x52c>
 8002f8e:	bf00      	nop
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40007000 	.word	0x40007000
 8002f98:	4b9c      	ldr	r3, [pc, #624]	; (800320c <HAL_RCC_OscConfig+0x780>)
 8002f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9e:	4a9b      	ldr	r2, [pc, #620]	; (800320c <HAL_RCC_OscConfig+0x780>)
 8002fa0:	f023 0301 	bic.w	r3, r3, #1
 8002fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fa8:	4b98      	ldr	r3, [pc, #608]	; (800320c <HAL_RCC_OscConfig+0x780>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fae:	4a97      	ldr	r2, [pc, #604]	; (800320c <HAL_RCC_OscConfig+0x780>)
 8002fb0:	f023 0304 	bic.w	r3, r3, #4
 8002fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d016      	beq.n	8002fee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc0:	f7fd fe8c 	bl	8000cdc <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fc6:	e00a      	b.n	8002fde <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc8:	f7fd fe88 	bl	8000cdc <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e12a      	b.n	8003234 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fde:	4b8b      	ldr	r3, [pc, #556]	; (800320c <HAL_RCC_OscConfig+0x780>)
 8002fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0ed      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x53c>
 8002fec:	e015      	b.n	800301a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fee:	f7fd fe75 	bl	8000cdc <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ff4:	e00a      	b.n	800300c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff6:	f7fd fe71 	bl	8000cdc <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	f241 3288 	movw	r2, #5000	; 0x1388
 8003004:	4293      	cmp	r3, r2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e113      	b.n	8003234 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800300c:	4b7f      	ldr	r3, [pc, #508]	; (800320c <HAL_RCC_OscConfig+0x780>)
 800300e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1ed      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800301a:	7ffb      	ldrb	r3, [r7, #31]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d105      	bne.n	800302c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003020:	4b7a      	ldr	r3, [pc, #488]	; (800320c <HAL_RCC_OscConfig+0x780>)
 8003022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003024:	4a79      	ldr	r2, [pc, #484]	; (800320c <HAL_RCC_OscConfig+0x780>)
 8003026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800302a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 80fe 	beq.w	8003232 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	2b02      	cmp	r3, #2
 800303c:	f040 80d0 	bne.w	80031e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003040:	4b72      	ldr	r3, [pc, #456]	; (800320c <HAL_RCC_OscConfig+0x780>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f003 0203 	and.w	r2, r3, #3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	429a      	cmp	r2, r3
 8003052:	d130      	bne.n	80030b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	3b01      	subs	r3, #1
 8003060:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003062:	429a      	cmp	r2, r3
 8003064:	d127      	bne.n	80030b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003070:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003072:	429a      	cmp	r2, r3
 8003074:	d11f      	bne.n	80030b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003080:	2a07      	cmp	r2, #7
 8003082:	bf14      	ite	ne
 8003084:	2201      	movne	r2, #1
 8003086:	2200      	moveq	r2, #0
 8003088:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800308a:	4293      	cmp	r3, r2
 800308c:	d113      	bne.n	80030b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003098:	085b      	lsrs	r3, r3, #1
 800309a:	3b01      	subs	r3, #1
 800309c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800309e:	429a      	cmp	r2, r3
 80030a0:	d109      	bne.n	80030b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	085b      	lsrs	r3, r3, #1
 80030ae:	3b01      	subs	r3, #1
 80030b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d06e      	beq.n	8003194 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	2b0c      	cmp	r3, #12
 80030ba:	d069      	beq.n	8003190 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030bc:	4b53      	ldr	r3, [pc, #332]	; (800320c <HAL_RCC_OscConfig+0x780>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d105      	bne.n	80030d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030c8:	4b50      	ldr	r3, [pc, #320]	; (800320c <HAL_RCC_OscConfig+0x780>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0ad      	b.n	8003234 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030d8:	4b4c      	ldr	r3, [pc, #304]	; (800320c <HAL_RCC_OscConfig+0x780>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a4b      	ldr	r2, [pc, #300]	; (800320c <HAL_RCC_OscConfig+0x780>)
 80030de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030e4:	f7fd fdfa 	bl	8000cdc <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ec:	f7fd fdf6 	bl	8000cdc <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e09a      	b.n	8003234 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030fe:	4b43      	ldr	r3, [pc, #268]	; (800320c <HAL_RCC_OscConfig+0x780>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800310a:	4b40      	ldr	r3, [pc, #256]	; (800320c <HAL_RCC_OscConfig+0x780>)
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	4b40      	ldr	r3, [pc, #256]	; (8003210 <HAL_RCC_OscConfig+0x784>)
 8003110:	4013      	ands	r3, r2
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800311a:	3a01      	subs	r2, #1
 800311c:	0112      	lsls	r2, r2, #4
 800311e:	4311      	orrs	r1, r2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003124:	0212      	lsls	r2, r2, #8
 8003126:	4311      	orrs	r1, r2
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800312c:	0852      	lsrs	r2, r2, #1
 800312e:	3a01      	subs	r2, #1
 8003130:	0552      	lsls	r2, r2, #21
 8003132:	4311      	orrs	r1, r2
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003138:	0852      	lsrs	r2, r2, #1
 800313a:	3a01      	subs	r2, #1
 800313c:	0652      	lsls	r2, r2, #25
 800313e:	4311      	orrs	r1, r2
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003144:	0912      	lsrs	r2, r2, #4
 8003146:	0452      	lsls	r2, r2, #17
 8003148:	430a      	orrs	r2, r1
 800314a:	4930      	ldr	r1, [pc, #192]	; (800320c <HAL_RCC_OscConfig+0x780>)
 800314c:	4313      	orrs	r3, r2
 800314e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003150:	4b2e      	ldr	r3, [pc, #184]	; (800320c <HAL_RCC_OscConfig+0x780>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a2d      	ldr	r2, [pc, #180]	; (800320c <HAL_RCC_OscConfig+0x780>)
 8003156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800315a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800315c:	4b2b      	ldr	r3, [pc, #172]	; (800320c <HAL_RCC_OscConfig+0x780>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4a2a      	ldr	r2, [pc, #168]	; (800320c <HAL_RCC_OscConfig+0x780>)
 8003162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003166:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003168:	f7fd fdb8 	bl	8000cdc <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003170:	f7fd fdb4 	bl	8000cdc <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e058      	b.n	8003234 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003182:	4b22      	ldr	r3, [pc, #136]	; (800320c <HAL_RCC_OscConfig+0x780>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800318e:	e050      	b.n	8003232 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e04f      	b.n	8003234 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003194:	4b1d      	ldr	r3, [pc, #116]	; (800320c <HAL_RCC_OscConfig+0x780>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d148      	bne.n	8003232 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031a0:	4b1a      	ldr	r3, [pc, #104]	; (800320c <HAL_RCC_OscConfig+0x780>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a19      	ldr	r2, [pc, #100]	; (800320c <HAL_RCC_OscConfig+0x780>)
 80031a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031ac:	4b17      	ldr	r3, [pc, #92]	; (800320c <HAL_RCC_OscConfig+0x780>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	4a16      	ldr	r2, [pc, #88]	; (800320c <HAL_RCC_OscConfig+0x780>)
 80031b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031b8:	f7fd fd90 	bl	8000cdc <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c0:	f7fd fd8c 	bl	8000cdc <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e030      	b.n	8003234 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031d2:	4b0e      	ldr	r3, [pc, #56]	; (800320c <HAL_RCC_OscConfig+0x780>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0x734>
 80031de:	e028      	b.n	8003232 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	2b0c      	cmp	r3, #12
 80031e4:	d023      	beq.n	800322e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <HAL_RCC_OscConfig+0x780>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a08      	ldr	r2, [pc, #32]	; (800320c <HAL_RCC_OscConfig+0x780>)
 80031ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f2:	f7fd fd73 	bl	8000cdc <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031f8:	e00c      	b.n	8003214 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031fa:	f7fd fd6f 	bl	8000cdc <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d905      	bls.n	8003214 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e013      	b.n	8003234 <HAL_RCC_OscConfig+0x7a8>
 800320c:	40021000 	.word	0x40021000
 8003210:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003214:	4b09      	ldr	r3, [pc, #36]	; (800323c <HAL_RCC_OscConfig+0x7b0>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1ec      	bne.n	80031fa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003220:	4b06      	ldr	r3, [pc, #24]	; (800323c <HAL_RCC_OscConfig+0x7b0>)
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	4905      	ldr	r1, [pc, #20]	; (800323c <HAL_RCC_OscConfig+0x7b0>)
 8003226:	4b06      	ldr	r3, [pc, #24]	; (8003240 <HAL_RCC_OscConfig+0x7b4>)
 8003228:	4013      	ands	r3, r2
 800322a:	60cb      	str	r3, [r1, #12]
 800322c:	e001      	b.n	8003232 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3720      	adds	r7, #32
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40021000 	.word	0x40021000
 8003240:	feeefffc 	.word	0xfeeefffc

08003244 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0e7      	b.n	8003428 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003258:	4b75      	ldr	r3, [pc, #468]	; (8003430 <HAL_RCC_ClockConfig+0x1ec>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d910      	bls.n	8003288 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003266:	4b72      	ldr	r3, [pc, #456]	; (8003430 <HAL_RCC_ClockConfig+0x1ec>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 0207 	bic.w	r2, r3, #7
 800326e:	4970      	ldr	r1, [pc, #448]	; (8003430 <HAL_RCC_ClockConfig+0x1ec>)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	4313      	orrs	r3, r2
 8003274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003276:	4b6e      	ldr	r3, [pc, #440]	; (8003430 <HAL_RCC_ClockConfig+0x1ec>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d001      	beq.n	8003288 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0cf      	b.n	8003428 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d010      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	4b66      	ldr	r3, [pc, #408]	; (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d908      	bls.n	80032b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a4:	4b63      	ldr	r3, [pc, #396]	; (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	4960      	ldr	r1, [pc, #384]	; (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d04c      	beq.n	800335c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d107      	bne.n	80032da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ca:	4b5a      	ldr	r3, [pc, #360]	; (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d121      	bne.n	800331a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e0a6      	b.n	8003428 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d107      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032e2:	4b54      	ldr	r3, [pc, #336]	; (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d115      	bne.n	800331a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e09a      	b.n	8003428 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d107      	bne.n	800330a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032fa:	4b4e      	ldr	r3, [pc, #312]	; (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d109      	bne.n	800331a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e08e      	b.n	8003428 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800330a:	4b4a      	ldr	r3, [pc, #296]	; (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e086      	b.n	8003428 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800331a:	4b46      	ldr	r3, [pc, #280]	; (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f023 0203 	bic.w	r2, r3, #3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	4943      	ldr	r1, [pc, #268]	; (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 8003328:	4313      	orrs	r3, r2
 800332a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800332c:	f7fd fcd6 	bl	8000cdc <HAL_GetTick>
 8003330:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003332:	e00a      	b.n	800334a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003334:	f7fd fcd2 	bl	8000cdc <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003342:	4293      	cmp	r3, r2
 8003344:	d901      	bls.n	800334a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e06e      	b.n	8003428 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334a:	4b3a      	ldr	r3, [pc, #232]	; (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 020c 	and.w	r2, r3, #12
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	429a      	cmp	r2, r3
 800335a:	d1eb      	bne.n	8003334 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d010      	beq.n	800338a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	4b31      	ldr	r3, [pc, #196]	; (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003374:	429a      	cmp	r2, r3
 8003376:	d208      	bcs.n	800338a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003378:	4b2e      	ldr	r3, [pc, #184]	; (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	492b      	ldr	r1, [pc, #172]	; (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 8003386:	4313      	orrs	r3, r2
 8003388:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800338a:	4b29      	ldr	r3, [pc, #164]	; (8003430 <HAL_RCC_ClockConfig+0x1ec>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d210      	bcs.n	80033ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003398:	4b25      	ldr	r3, [pc, #148]	; (8003430 <HAL_RCC_ClockConfig+0x1ec>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f023 0207 	bic.w	r2, r3, #7
 80033a0:	4923      	ldr	r1, [pc, #140]	; (8003430 <HAL_RCC_ClockConfig+0x1ec>)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a8:	4b21      	ldr	r3, [pc, #132]	; (8003430 <HAL_RCC_ClockConfig+0x1ec>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d001      	beq.n	80033ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e036      	b.n	8003428 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d008      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033c6:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	4918      	ldr	r1, [pc, #96]	; (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d009      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033e4:	4b13      	ldr	r3, [pc, #76]	; (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4910      	ldr	r1, [pc, #64]	; (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033f8:	f000 f824 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 80033fc:	4602      	mov	r2, r0
 80033fe:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	091b      	lsrs	r3, r3, #4
 8003404:	f003 030f 	and.w	r3, r3, #15
 8003408:	490b      	ldr	r1, [pc, #44]	; (8003438 <HAL_RCC_ClockConfig+0x1f4>)
 800340a:	5ccb      	ldrb	r3, [r1, r3]
 800340c:	f003 031f 	and.w	r3, r3, #31
 8003410:	fa22 f303 	lsr.w	r3, r2, r3
 8003414:	4a09      	ldr	r2, [pc, #36]	; (800343c <HAL_RCC_ClockConfig+0x1f8>)
 8003416:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003418:	4b09      	ldr	r3, [pc, #36]	; (8003440 <HAL_RCC_ClockConfig+0x1fc>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7fd fb5f 	bl	8000ae0 <HAL_InitTick>
 8003422:	4603      	mov	r3, r0
 8003424:	72fb      	strb	r3, [r7, #11]

  return status;
 8003426:	7afb      	ldrb	r3, [r7, #11]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40022000 	.word	0x40022000
 8003434:	40021000 	.word	0x40021000
 8003438:	08007d88 	.word	0x08007d88
 800343c:	20000000 	.word	0x20000000
 8003440:	20000004 	.word	0x20000004

08003444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003444:	b480      	push	{r7}
 8003446:	b089      	sub	sp, #36	; 0x24
 8003448:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	2300      	movs	r3, #0
 8003450:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003452:	4b3e      	ldr	r3, [pc, #248]	; (800354c <HAL_RCC_GetSysClockFreq+0x108>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800345c:	4b3b      	ldr	r3, [pc, #236]	; (800354c <HAL_RCC_GetSysClockFreq+0x108>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <HAL_RCC_GetSysClockFreq+0x34>
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	2b0c      	cmp	r3, #12
 8003470:	d121      	bne.n	80034b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d11e      	bne.n	80034b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003478:	4b34      	ldr	r3, [pc, #208]	; (800354c <HAL_RCC_GetSysClockFreq+0x108>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0308 	and.w	r3, r3, #8
 8003480:	2b00      	cmp	r3, #0
 8003482:	d107      	bne.n	8003494 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003484:	4b31      	ldr	r3, [pc, #196]	; (800354c <HAL_RCC_GetSysClockFreq+0x108>)
 8003486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800348a:	0a1b      	lsrs	r3, r3, #8
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	61fb      	str	r3, [r7, #28]
 8003492:	e005      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003494:	4b2d      	ldr	r3, [pc, #180]	; (800354c <HAL_RCC_GetSysClockFreq+0x108>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	091b      	lsrs	r3, r3, #4
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034a0:	4a2b      	ldr	r2, [pc, #172]	; (8003550 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10d      	bne.n	80034cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034b4:	e00a      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d102      	bne.n	80034c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034bc:	4b25      	ldr	r3, [pc, #148]	; (8003554 <HAL_RCC_GetSysClockFreq+0x110>)
 80034be:	61bb      	str	r3, [r7, #24]
 80034c0:	e004      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d101      	bne.n	80034cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034c8:	4b23      	ldr	r3, [pc, #140]	; (8003558 <HAL_RCC_GetSysClockFreq+0x114>)
 80034ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	2b0c      	cmp	r3, #12
 80034d0:	d134      	bne.n	800353c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034d2:	4b1e      	ldr	r3, [pc, #120]	; (800354c <HAL_RCC_GetSysClockFreq+0x108>)
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d003      	beq.n	80034ea <HAL_RCC_GetSysClockFreq+0xa6>
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d003      	beq.n	80034f0 <HAL_RCC_GetSysClockFreq+0xac>
 80034e8:	e005      	b.n	80034f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034ea:	4b1a      	ldr	r3, [pc, #104]	; (8003554 <HAL_RCC_GetSysClockFreq+0x110>)
 80034ec:	617b      	str	r3, [r7, #20]
      break;
 80034ee:	e005      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034f0:	4b19      	ldr	r3, [pc, #100]	; (8003558 <HAL_RCC_GetSysClockFreq+0x114>)
 80034f2:	617b      	str	r3, [r7, #20]
      break;
 80034f4:	e002      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	617b      	str	r3, [r7, #20]
      break;
 80034fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034fc:	4b13      	ldr	r3, [pc, #76]	; (800354c <HAL_RCC_GetSysClockFreq+0x108>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	091b      	lsrs	r3, r3, #4
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	3301      	adds	r3, #1
 8003508:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800350a:	4b10      	ldr	r3, [pc, #64]	; (800354c <HAL_RCC_GetSysClockFreq+0x108>)
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	0a1b      	lsrs	r3, r3, #8
 8003510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	fb03 f202 	mul.w	r2, r3, r2
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003520:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003522:	4b0a      	ldr	r3, [pc, #40]	; (800354c <HAL_RCC_GetSysClockFreq+0x108>)
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	0e5b      	lsrs	r3, r3, #25
 8003528:	f003 0303 	and.w	r3, r3, #3
 800352c:	3301      	adds	r3, #1
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	fbb2 f3f3 	udiv	r3, r2, r3
 800353a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800353c:	69bb      	ldr	r3, [r7, #24]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3724      	adds	r7, #36	; 0x24
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40021000 	.word	0x40021000
 8003550:	08007da0 	.word	0x08007da0
 8003554:	00f42400 	.word	0x00f42400
 8003558:	007a1200 	.word	0x007a1200

0800355c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003560:	4b03      	ldr	r3, [pc, #12]	; (8003570 <HAL_RCC_GetHCLKFreq+0x14>)
 8003562:	681b      	ldr	r3, [r3, #0]
}
 8003564:	4618      	mov	r0, r3
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	20000000 	.word	0x20000000

08003574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003578:	f7ff fff0 	bl	800355c <HAL_RCC_GetHCLKFreq>
 800357c:	4602      	mov	r2, r0
 800357e:	4b06      	ldr	r3, [pc, #24]	; (8003598 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	0a1b      	lsrs	r3, r3, #8
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	4904      	ldr	r1, [pc, #16]	; (800359c <HAL_RCC_GetPCLK1Freq+0x28>)
 800358a:	5ccb      	ldrb	r3, [r1, r3]
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003594:	4618      	mov	r0, r3
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40021000 	.word	0x40021000
 800359c:	08007d98 	.word	0x08007d98

080035a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035a4:	f7ff ffda 	bl	800355c <HAL_RCC_GetHCLKFreq>
 80035a8:	4602      	mov	r2, r0
 80035aa:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	0adb      	lsrs	r3, r3, #11
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	4904      	ldr	r1, [pc, #16]	; (80035c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035b6:	5ccb      	ldrb	r3, [r1, r3]
 80035b8:	f003 031f 	and.w	r3, r3, #31
 80035bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40021000 	.word	0x40021000
 80035c8:	08007d98 	.word	0x08007d98

080035cc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	220f      	movs	r2, #15
 80035da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80035dc:	4b12      	ldr	r3, [pc, #72]	; (8003628 <HAL_RCC_GetClockConfig+0x5c>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 0203 	and.w	r2, r3, #3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80035e8:	4b0f      	ldr	r3, [pc, #60]	; (8003628 <HAL_RCC_GetClockConfig+0x5c>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80035f4:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <HAL_RCC_GetClockConfig+0x5c>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003600:	4b09      	ldr	r3, [pc, #36]	; (8003628 <HAL_RCC_GetClockConfig+0x5c>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	08db      	lsrs	r3, r3, #3
 8003606:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800360e:	4b07      	ldr	r3, [pc, #28]	; (800362c <HAL_RCC_GetClockConfig+0x60>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0207 	and.w	r2, r3, #7
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	601a      	str	r2, [r3, #0]
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40021000 	.word	0x40021000
 800362c:	40022000 	.word	0x40022000

08003630 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003638:	2300      	movs	r3, #0
 800363a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800363c:	4b2a      	ldr	r3, [pc, #168]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800363e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003648:	f7ff f9bc 	bl	80029c4 <HAL_PWREx_GetVoltageRange>
 800364c:	6178      	str	r0, [r7, #20]
 800364e:	e014      	b.n	800367a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003650:	4b25      	ldr	r3, [pc, #148]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003654:	4a24      	ldr	r2, [pc, #144]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800365a:	6593      	str	r3, [r2, #88]	; 0x58
 800365c:	4b22      	ldr	r3, [pc, #136]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800365e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003668:	f7ff f9ac 	bl	80029c4 <HAL_PWREx_GetVoltageRange>
 800366c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800366e:	4b1e      	ldr	r3, [pc, #120]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003672:	4a1d      	ldr	r2, [pc, #116]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003678:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003680:	d10b      	bne.n	800369a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b80      	cmp	r3, #128	; 0x80
 8003686:	d919      	bls.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2ba0      	cmp	r3, #160	; 0xa0
 800368c:	d902      	bls.n	8003694 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800368e:	2302      	movs	r3, #2
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	e013      	b.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003694:	2301      	movs	r3, #1
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	e010      	b.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b80      	cmp	r3, #128	; 0x80
 800369e:	d902      	bls.n	80036a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80036a0:	2303      	movs	r3, #3
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	e00a      	b.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b80      	cmp	r3, #128	; 0x80
 80036aa:	d102      	bne.n	80036b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036ac:	2302      	movs	r3, #2
 80036ae:	613b      	str	r3, [r7, #16]
 80036b0:	e004      	b.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b70      	cmp	r3, #112	; 0x70
 80036b6:	d101      	bne.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036b8:	2301      	movs	r3, #1
 80036ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036bc:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f023 0207 	bic.w	r2, r3, #7
 80036c4:	4909      	ldr	r1, [pc, #36]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036cc:	4b07      	ldr	r3, [pc, #28]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d001      	beq.n	80036de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40022000 	.word	0x40022000

080036f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036f8:	2300      	movs	r3, #0
 80036fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036fc:	2300      	movs	r3, #0
 80036fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003708:	2b00      	cmp	r3, #0
 800370a:	d041      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003710:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003714:	d02a      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003716:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800371a:	d824      	bhi.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800371c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003720:	d008      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003722:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003726:	d81e      	bhi.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00a      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800372c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003730:	d010      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003732:	e018      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003734:	4b86      	ldr	r3, [pc, #536]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4a85      	ldr	r2, [pc, #532]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800373a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003740:	e015      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3304      	adds	r3, #4
 8003746:	2100      	movs	r1, #0
 8003748:	4618      	mov	r0, r3
 800374a:	f000 fabb 	bl	8003cc4 <RCCEx_PLLSAI1_Config>
 800374e:	4603      	mov	r3, r0
 8003750:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003752:	e00c      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	3320      	adds	r3, #32
 8003758:	2100      	movs	r1, #0
 800375a:	4618      	mov	r0, r3
 800375c:	f000 fba6 	bl	8003eac <RCCEx_PLLSAI2_Config>
 8003760:	4603      	mov	r3, r0
 8003762:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003764:	e003      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	74fb      	strb	r3, [r7, #19]
      break;
 800376a:	e000      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800376c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800376e:	7cfb      	ldrb	r3, [r7, #19]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10b      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003774:	4b76      	ldr	r3, [pc, #472]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003782:	4973      	ldr	r1, [pc, #460]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800378a:	e001      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800378c:	7cfb      	ldrb	r3, [r7, #19]
 800378e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d041      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037a4:	d02a      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80037a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037aa:	d824      	bhi.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80037ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037b0:	d008      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037b6:	d81e      	bhi.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80037bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037c0:	d010      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037c2:	e018      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037c4:	4b62      	ldr	r3, [pc, #392]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	4a61      	ldr	r2, [pc, #388]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037d0:	e015      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3304      	adds	r3, #4
 80037d6:	2100      	movs	r1, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fa73 	bl	8003cc4 <RCCEx_PLLSAI1_Config>
 80037de:	4603      	mov	r3, r0
 80037e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037e2:	e00c      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3320      	adds	r3, #32
 80037e8:	2100      	movs	r1, #0
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fb5e 	bl	8003eac <RCCEx_PLLSAI2_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037f4:	e003      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	74fb      	strb	r3, [r7, #19]
      break;
 80037fa:	e000      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80037fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037fe:	7cfb      	ldrb	r3, [r7, #19]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10b      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003804:	4b52      	ldr	r3, [pc, #328]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003812:	494f      	ldr	r1, [pc, #316]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800381a:	e001      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381c:	7cfb      	ldrb	r3, [r7, #19]
 800381e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 80a0 	beq.w	800396e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800382e:	2300      	movs	r3, #0
 8003830:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003832:	4b47      	ldr	r3, [pc, #284]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800383e:	2301      	movs	r3, #1
 8003840:	e000      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003842:	2300      	movs	r3, #0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00d      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003848:	4b41      	ldr	r3, [pc, #260]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800384a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384c:	4a40      	ldr	r2, [pc, #256]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800384e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003852:	6593      	str	r3, [r2, #88]	; 0x58
 8003854:	4b3e      	ldr	r3, [pc, #248]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003860:	2301      	movs	r3, #1
 8003862:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003864:	4b3b      	ldr	r3, [pc, #236]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a3a      	ldr	r2, [pc, #232]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800386a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800386e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003870:	f7fd fa34 	bl	8000cdc <HAL_GetTick>
 8003874:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003876:	e009      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003878:	f7fd fa30 	bl	8000cdc <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d902      	bls.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	74fb      	strb	r3, [r7, #19]
        break;
 800388a:	e005      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800388c:	4b31      	ldr	r3, [pc, #196]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0ef      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003898:	7cfb      	ldrb	r3, [r7, #19]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d15c      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800389e:	4b2c      	ldr	r3, [pc, #176]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d01f      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d019      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038bc:	4b24      	ldr	r3, [pc, #144]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038c8:	4b21      	ldr	r3, [pc, #132]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ce:	4a20      	ldr	r2, [pc, #128]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038d8:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038de:	4a1c      	ldr	r2, [pc, #112]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038e8:	4a19      	ldr	r2, [pc, #100]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d016      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fa:	f7fd f9ef 	bl	8000cdc <HAL_GetTick>
 80038fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003900:	e00b      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003902:	f7fd f9eb 	bl	8000cdc <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003910:	4293      	cmp	r3, r2
 8003912:	d902      	bls.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	74fb      	strb	r3, [r7, #19]
            break;
 8003918:	e006      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800391a:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0ec      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003928:	7cfb      	ldrb	r3, [r7, #19]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10c      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800392e:	4b08      	ldr	r3, [pc, #32]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003934:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800393e:	4904      	ldr	r1, [pc, #16]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003946:	e009      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003948:	7cfb      	ldrb	r3, [r7, #19]
 800394a:	74bb      	strb	r3, [r7, #18]
 800394c:	e006      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800394e:	bf00      	nop
 8003950:	40021000 	.word	0x40021000
 8003954:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003958:	7cfb      	ldrb	r3, [r7, #19]
 800395a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800395c:	7c7b      	ldrb	r3, [r7, #17]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d105      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003962:	4b9e      	ldr	r3, [pc, #632]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003966:	4a9d      	ldr	r2, [pc, #628]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800396c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800397a:	4b98      	ldr	r3, [pc, #608]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003980:	f023 0203 	bic.w	r2, r3, #3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003988:	4994      	ldr	r1, [pc, #592]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800399c:	4b8f      	ldr	r3, [pc, #572]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a2:	f023 020c 	bic.w	r2, r3, #12
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039aa:	498c      	ldr	r1, [pc, #560]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039be:	4b87      	ldr	r3, [pc, #540]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	4983      	ldr	r1, [pc, #524]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039e0:	4b7e      	ldr	r3, [pc, #504]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ee:	497b      	ldr	r1, [pc, #492]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0310 	and.w	r3, r3, #16
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a02:	4b76      	ldr	r3, [pc, #472]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a10:	4972      	ldr	r1, [pc, #456]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00a      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a24:	4b6d      	ldr	r3, [pc, #436]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a32:	496a      	ldr	r1, [pc, #424]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a46:	4b65      	ldr	r3, [pc, #404]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a54:	4961      	ldr	r1, [pc, #388]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00a      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a68:	4b5c      	ldr	r3, [pc, #368]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a76:	4959      	ldr	r1, [pc, #356]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00a      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a8a:	4b54      	ldr	r3, [pc, #336]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a90:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a98:	4950      	ldr	r1, [pc, #320]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00a      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aac:	4b4b      	ldr	r3, [pc, #300]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aba:	4948      	ldr	r1, [pc, #288]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ace:	4b43      	ldr	r3, [pc, #268]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003adc:	493f      	ldr	r1, [pc, #252]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d028      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003af0:	4b3a      	ldr	r3, [pc, #232]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003afe:	4937      	ldr	r1, [pc, #220]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b0e:	d106      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b10:	4b32      	ldr	r3, [pc, #200]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4a31      	ldr	r2, [pc, #196]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b1a:	60d3      	str	r3, [r2, #12]
 8003b1c:	e011      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b26:	d10c      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 f8c8 	bl	8003cc4 <RCCEx_PLLSAI1_Config>
 8003b34:	4603      	mov	r3, r0
 8003b36:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b38:	7cfb      	ldrb	r3, [r7, #19]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003b3e:	7cfb      	ldrb	r3, [r7, #19]
 8003b40:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d028      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b4e:	4b23      	ldr	r3, [pc, #140]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5c:	491f      	ldr	r1, [pc, #124]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b6c:	d106      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b6e:	4b1b      	ldr	r3, [pc, #108]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	4a1a      	ldr	r2, [pc, #104]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b78:	60d3      	str	r3, [r2, #12]
 8003b7a:	e011      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b84:	d10c      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3304      	adds	r3, #4
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 f899 	bl	8003cc4 <RCCEx_PLLSAI1_Config>
 8003b92:	4603      	mov	r3, r0
 8003b94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b96:	7cfb      	ldrb	r3, [r7, #19]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003b9c:	7cfb      	ldrb	r3, [r7, #19]
 8003b9e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d02b      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bba:	4908      	ldr	r1, [pc, #32]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bca:	d109      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bcc:	4b03      	ldr	r3, [pc, #12]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	4a02      	ldr	r2, [pc, #8]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bd6:	60d3      	str	r3, [r2, #12]
 8003bd8:	e014      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003bda:	bf00      	nop
 8003bdc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003be8:	d10c      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3304      	adds	r3, #4
 8003bee:	2101      	movs	r1, #1
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 f867 	bl	8003cc4 <RCCEx_PLLSAI1_Config>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bfa:	7cfb      	ldrb	r3, [r7, #19]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003c00:	7cfb      	ldrb	r3, [r7, #19]
 8003c02:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d02f      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c10:	4b2b      	ldr	r3, [pc, #172]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c1e:	4928      	ldr	r1, [pc, #160]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c2e:	d10d      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3304      	adds	r3, #4
 8003c34:	2102      	movs	r1, #2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 f844 	bl	8003cc4 <RCCEx_PLLSAI1_Config>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c40:	7cfb      	ldrb	r3, [r7, #19]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d014      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c46:	7cfb      	ldrb	r3, [r7, #19]
 8003c48:	74bb      	strb	r3, [r7, #18]
 8003c4a:	e011      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c54:	d10c      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3320      	adds	r3, #32
 8003c5a:	2102      	movs	r1, #2
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 f925 	bl	8003eac <RCCEx_PLLSAI2_Config>
 8003c62:	4603      	mov	r3, r0
 8003c64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c66:	7cfb      	ldrb	r3, [r7, #19]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c6c:	7cfb      	ldrb	r3, [r7, #19]
 8003c6e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00a      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c7c:	4b10      	ldr	r3, [pc, #64]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c82:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c8a:	490d      	ldr	r1, [pc, #52]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00b      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c9e:	4b08      	ldr	r3, [pc, #32]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cae:	4904      	ldr	r1, [pc, #16]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003cb6:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40021000 	.word	0x40021000

08003cc4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cd2:	4b75      	ldr	r3, [pc, #468]	; (8003ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d018      	beq.n	8003d10 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003cde:	4b72      	ldr	r3, [pc, #456]	; (8003ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f003 0203 	and.w	r2, r3, #3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d10d      	bne.n	8003d0a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
       ||
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d009      	beq.n	8003d0a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cf6:	4b6c      	ldr	r3, [pc, #432]	; (8003ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	091b      	lsrs	r3, r3, #4
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
       ||
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d047      	beq.n	8003d9a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	73fb      	strb	r3, [r7, #15]
 8003d0e:	e044      	b.n	8003d9a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d018      	beq.n	8003d4a <RCCEx_PLLSAI1_Config+0x86>
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d825      	bhi.n	8003d68 <RCCEx_PLLSAI1_Config+0xa4>
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d002      	beq.n	8003d26 <RCCEx_PLLSAI1_Config+0x62>
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d009      	beq.n	8003d38 <RCCEx_PLLSAI1_Config+0x74>
 8003d24:	e020      	b.n	8003d68 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d26:	4b60      	ldr	r3, [pc, #384]	; (8003ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d11d      	bne.n	8003d6e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d36:	e01a      	b.n	8003d6e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d38:	4b5b      	ldr	r3, [pc, #364]	; (8003ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d116      	bne.n	8003d72 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d48:	e013      	b.n	8003d72 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d4a:	4b57      	ldr	r3, [pc, #348]	; (8003ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10f      	bne.n	8003d76 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d56:	4b54      	ldr	r3, [pc, #336]	; (8003ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d66:	e006      	b.n	8003d76 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d6c:	e004      	b.n	8003d78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d6e:	bf00      	nop
 8003d70:	e002      	b.n	8003d78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d72:	bf00      	nop
 8003d74:	e000      	b.n	8003d78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d76:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10d      	bne.n	8003d9a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d7e:	4b4a      	ldr	r3, [pc, #296]	; (8003ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6819      	ldr	r1, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	430b      	orrs	r3, r1
 8003d94:	4944      	ldr	r1, [pc, #272]	; (8003ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d17d      	bne.n	8003e9c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003da0:	4b41      	ldr	r3, [pc, #260]	; (8003ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a40      	ldr	r2, [pc, #256]	; (8003ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003daa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dac:	f7fc ff96 	bl	8000cdc <HAL_GetTick>
 8003db0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003db2:	e009      	b.n	8003dc8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003db4:	f7fc ff92 	bl	8000cdc <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d902      	bls.n	8003dc8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	73fb      	strb	r3, [r7, #15]
        break;
 8003dc6:	e005      	b.n	8003dd4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003dc8:	4b37      	ldr	r3, [pc, #220]	; (8003ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1ef      	bne.n	8003db4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d160      	bne.n	8003e9c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d111      	bne.n	8003e04 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003de0:	4b31      	ldr	r3, [pc, #196]	; (8003ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6892      	ldr	r2, [r2, #8]
 8003df0:	0211      	lsls	r1, r2, #8
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	68d2      	ldr	r2, [r2, #12]
 8003df6:	0912      	lsrs	r2, r2, #4
 8003df8:	0452      	lsls	r2, r2, #17
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	492a      	ldr	r1, [pc, #168]	; (8003ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	610b      	str	r3, [r1, #16]
 8003e02:	e027      	b.n	8003e54 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d112      	bne.n	8003e30 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e0a:	4b27      	ldr	r3, [pc, #156]	; (8003ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6892      	ldr	r2, [r2, #8]
 8003e1a:	0211      	lsls	r1, r2, #8
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6912      	ldr	r2, [r2, #16]
 8003e20:	0852      	lsrs	r2, r2, #1
 8003e22:	3a01      	subs	r2, #1
 8003e24:	0552      	lsls	r2, r2, #21
 8003e26:	430a      	orrs	r2, r1
 8003e28:	491f      	ldr	r1, [pc, #124]	; (8003ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	610b      	str	r3, [r1, #16]
 8003e2e:	e011      	b.n	8003e54 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e30:	4b1d      	ldr	r3, [pc, #116]	; (8003ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6892      	ldr	r2, [r2, #8]
 8003e40:	0211      	lsls	r1, r2, #8
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6952      	ldr	r2, [r2, #20]
 8003e46:	0852      	lsrs	r2, r2, #1
 8003e48:	3a01      	subs	r2, #1
 8003e4a:	0652      	lsls	r2, r2, #25
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	4916      	ldr	r1, [pc, #88]	; (8003ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e54:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a13      	ldr	r2, [pc, #76]	; (8003ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e60:	f7fc ff3c 	bl	8000cdc <HAL_GetTick>
 8003e64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e66:	e009      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e68:	f7fc ff38 	bl	8000cdc <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d902      	bls.n	8003e7c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	73fb      	strb	r3, [r7, #15]
          break;
 8003e7a:	e005      	b.n	8003e88 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0ef      	beq.n	8003e68 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e8e:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e90:	691a      	ldr	r2, [r3, #16]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	4904      	ldr	r1, [pc, #16]	; (8003ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000

08003eac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003eba:	4b6a      	ldr	r3, [pc, #424]	; (8004064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d018      	beq.n	8003ef8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ec6:	4b67      	ldr	r3, [pc, #412]	; (8004064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f003 0203 	and.w	r2, r3, #3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d10d      	bne.n	8003ef2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
       ||
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d009      	beq.n	8003ef2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ede:	4b61      	ldr	r3, [pc, #388]	; (8004064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	091b      	lsrs	r3, r3, #4
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
       ||
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d047      	beq.n	8003f82 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	73fb      	strb	r3, [r7, #15]
 8003ef6:	e044      	b.n	8003f82 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b03      	cmp	r3, #3
 8003efe:	d018      	beq.n	8003f32 <RCCEx_PLLSAI2_Config+0x86>
 8003f00:	2b03      	cmp	r3, #3
 8003f02:	d825      	bhi.n	8003f50 <RCCEx_PLLSAI2_Config+0xa4>
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d002      	beq.n	8003f0e <RCCEx_PLLSAI2_Config+0x62>
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d009      	beq.n	8003f20 <RCCEx_PLLSAI2_Config+0x74>
 8003f0c:	e020      	b.n	8003f50 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f0e:	4b55      	ldr	r3, [pc, #340]	; (8004064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d11d      	bne.n	8003f56 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f1e:	e01a      	b.n	8003f56 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f20:	4b50      	ldr	r3, [pc, #320]	; (8004064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d116      	bne.n	8003f5a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f30:	e013      	b.n	8003f5a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f32:	4b4c      	ldr	r3, [pc, #304]	; (8004064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10f      	bne.n	8003f5e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f3e:	4b49      	ldr	r3, [pc, #292]	; (8004064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d109      	bne.n	8003f5e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f4e:	e006      	b.n	8003f5e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
      break;
 8003f54:	e004      	b.n	8003f60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f56:	bf00      	nop
 8003f58:	e002      	b.n	8003f60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f5a:	bf00      	nop
 8003f5c:	e000      	b.n	8003f60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10d      	bne.n	8003f82 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f66:	4b3f      	ldr	r3, [pc, #252]	; (8004064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6819      	ldr	r1, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	430b      	orrs	r3, r1
 8003f7c:	4939      	ldr	r1, [pc, #228]	; (8004064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f82:	7bfb      	ldrb	r3, [r7, #15]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d167      	bne.n	8004058 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f88:	4b36      	ldr	r3, [pc, #216]	; (8004064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a35      	ldr	r2, [pc, #212]	; (8004064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f94:	f7fc fea2 	bl	8000cdc <HAL_GetTick>
 8003f98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f9a:	e009      	b.n	8003fb0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f9c:	f7fc fe9e 	bl	8000cdc <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d902      	bls.n	8003fb0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	73fb      	strb	r3, [r7, #15]
        break;
 8003fae:	e005      	b.n	8003fbc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003fb0:	4b2c      	ldr	r3, [pc, #176]	; (8004064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1ef      	bne.n	8003f9c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d14a      	bne.n	8004058 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d111      	bne.n	8003fec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fc8:	4b26      	ldr	r3, [pc, #152]	; (8004064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6892      	ldr	r2, [r2, #8]
 8003fd8:	0211      	lsls	r1, r2, #8
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	68d2      	ldr	r2, [r2, #12]
 8003fde:	0912      	lsrs	r2, r2, #4
 8003fe0:	0452      	lsls	r2, r2, #17
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	491f      	ldr	r1, [pc, #124]	; (8004064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	614b      	str	r3, [r1, #20]
 8003fea:	e011      	b.n	8004010 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fec:	4b1d      	ldr	r3, [pc, #116]	; (8004064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ff4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6892      	ldr	r2, [r2, #8]
 8003ffc:	0211      	lsls	r1, r2, #8
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6912      	ldr	r2, [r2, #16]
 8004002:	0852      	lsrs	r2, r2, #1
 8004004:	3a01      	subs	r2, #1
 8004006:	0652      	lsls	r2, r2, #25
 8004008:	430a      	orrs	r2, r1
 800400a:	4916      	ldr	r1, [pc, #88]	; (8004064 <RCCEx_PLLSAI2_Config+0x1b8>)
 800400c:	4313      	orrs	r3, r2
 800400e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004010:	4b14      	ldr	r3, [pc, #80]	; (8004064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a13      	ldr	r2, [pc, #76]	; (8004064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800401c:	f7fc fe5e 	bl	8000cdc <HAL_GetTick>
 8004020:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004022:	e009      	b.n	8004038 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004024:	f7fc fe5a 	bl	8000cdc <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d902      	bls.n	8004038 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	73fb      	strb	r3, [r7, #15]
          break;
 8004036:	e005      	b.n	8004044 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004038:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <RCCEx_PLLSAI2_Config+0x1b8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0ef      	beq.n	8004024 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d106      	bne.n	8004058 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800404a:	4b06      	ldr	r3, [pc, #24]	; (8004064 <RCCEx_PLLSAI2_Config+0x1b8>)
 800404c:	695a      	ldr	r2, [r3, #20]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	4904      	ldr	r1, [pc, #16]	; (8004064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004054:	4313      	orrs	r3, r2
 8004056:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004058:	7bfb      	ldrb	r3, [r7, #15]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40021000 	.word	0x40021000

08004068 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e049      	b.n	800410e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d106      	bne.n	8004094 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f841 	bl	8004116 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3304      	adds	r3, #4
 80040a4:	4619      	mov	r1, r3
 80040a6:	4610      	mov	r0, r2
 80040a8:	f000 f9f8 	bl	800449c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
	...

0800412c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b01      	cmp	r3, #1
 800413e:	d001      	beq.n	8004144 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e04f      	b.n	80041e4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0201 	orr.w	r2, r2, #1
 800415a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a23      	ldr	r2, [pc, #140]	; (80041f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d01d      	beq.n	80041a2 <HAL_TIM_Base_Start_IT+0x76>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800416e:	d018      	beq.n	80041a2 <HAL_TIM_Base_Start_IT+0x76>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a1f      	ldr	r2, [pc, #124]	; (80041f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d013      	beq.n	80041a2 <HAL_TIM_Base_Start_IT+0x76>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a1e      	ldr	r2, [pc, #120]	; (80041f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00e      	beq.n	80041a2 <HAL_TIM_Base_Start_IT+0x76>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a1c      	ldr	r2, [pc, #112]	; (80041fc <HAL_TIM_Base_Start_IT+0xd0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d009      	beq.n	80041a2 <HAL_TIM_Base_Start_IT+0x76>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a1b      	ldr	r2, [pc, #108]	; (8004200 <HAL_TIM_Base_Start_IT+0xd4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d004      	beq.n	80041a2 <HAL_TIM_Base_Start_IT+0x76>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a19      	ldr	r2, [pc, #100]	; (8004204 <HAL_TIM_Base_Start_IT+0xd8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d115      	bne.n	80041ce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	4b17      	ldr	r3, [pc, #92]	; (8004208 <HAL_TIM_Base_Start_IT+0xdc>)
 80041aa:	4013      	ands	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b06      	cmp	r3, #6
 80041b2:	d015      	beq.n	80041e0 <HAL_TIM_Base_Start_IT+0xb4>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ba:	d011      	beq.n	80041e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041cc:	e008      	b.n	80041e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f042 0201 	orr.w	r2, r2, #1
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	e000      	b.n	80041e2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	40012c00 	.word	0x40012c00
 80041f4:	40000400 	.word	0x40000400
 80041f8:	40000800 	.word	0x40000800
 80041fc:	40000c00 	.word	0x40000c00
 8004200:	40013400 	.word	0x40013400
 8004204:	40014000 	.word	0x40014000
 8004208:	00010007 	.word	0x00010007

0800420c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b02      	cmp	r3, #2
 8004220:	d122      	bne.n	8004268 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b02      	cmp	r3, #2
 800422e:	d11b      	bne.n	8004268 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f06f 0202 	mvn.w	r2, #2
 8004238:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f905 	bl	800445e <HAL_TIM_IC_CaptureCallback>
 8004254:	e005      	b.n	8004262 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f8f7 	bl	800444a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f908 	bl	8004472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b04      	cmp	r3, #4
 8004274:	d122      	bne.n	80042bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b04      	cmp	r3, #4
 8004282:	d11b      	bne.n	80042bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f06f 0204 	mvn.w	r2, #4
 800428c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2202      	movs	r2, #2
 8004292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f8db 	bl	800445e <HAL_TIM_IC_CaptureCallback>
 80042a8:	e005      	b.n	80042b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f8cd 	bl	800444a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f8de 	bl	8004472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d122      	bne.n	8004310 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d11b      	bne.n	8004310 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0208 	mvn.w	r2, #8
 80042e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2204      	movs	r2, #4
 80042e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f8b1 	bl	800445e <HAL_TIM_IC_CaptureCallback>
 80042fc:	e005      	b.n	800430a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f8a3 	bl	800444a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f8b4 	bl	8004472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f003 0310 	and.w	r3, r3, #16
 800431a:	2b10      	cmp	r3, #16
 800431c:	d122      	bne.n	8004364 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f003 0310 	and.w	r3, r3, #16
 8004328:	2b10      	cmp	r3, #16
 800432a:	d11b      	bne.n	8004364 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f06f 0210 	mvn.w	r2, #16
 8004334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2208      	movs	r2, #8
 800433a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f887 	bl	800445e <HAL_TIM_IC_CaptureCallback>
 8004350:	e005      	b.n	800435e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f879 	bl	800444a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f88a 	bl	8004472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b01      	cmp	r3, #1
 8004370:	d10e      	bne.n	8004390 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b01      	cmp	r3, #1
 800437e:	d107      	bne.n	8004390 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f06f 0201 	mvn.w	r2, #1
 8004388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7fc faa2 	bl	80008d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439a:	2b80      	cmp	r3, #128	; 0x80
 800439c:	d10e      	bne.n	80043bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a8:	2b80      	cmp	r3, #128	; 0x80
 80043aa:	d107      	bne.n	80043bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f914 	bl	80045e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ca:	d10e      	bne.n	80043ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d6:	2b80      	cmp	r3, #128	; 0x80
 80043d8:	d107      	bne.n	80043ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f907 	bl	80045f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f4:	2b40      	cmp	r3, #64	; 0x40
 80043f6:	d10e      	bne.n	8004416 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004402:	2b40      	cmp	r3, #64	; 0x40
 8004404:	d107      	bne.n	8004416 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800440e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f838 	bl	8004486 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	f003 0320 	and.w	r3, r3, #32
 8004420:	2b20      	cmp	r3, #32
 8004422:	d10e      	bne.n	8004442 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f003 0320 	and.w	r3, r3, #32
 800442e:	2b20      	cmp	r3, #32
 8004430:	d107      	bne.n	8004442 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f06f 0220 	mvn.w	r2, #32
 800443a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f8c7 	bl	80045d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004442:	bf00      	nop
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
	...

0800449c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a40      	ldr	r2, [pc, #256]	; (80045b0 <TIM_Base_SetConfig+0x114>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d013      	beq.n	80044dc <TIM_Base_SetConfig+0x40>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ba:	d00f      	beq.n	80044dc <TIM_Base_SetConfig+0x40>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a3d      	ldr	r2, [pc, #244]	; (80045b4 <TIM_Base_SetConfig+0x118>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d00b      	beq.n	80044dc <TIM_Base_SetConfig+0x40>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a3c      	ldr	r2, [pc, #240]	; (80045b8 <TIM_Base_SetConfig+0x11c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d007      	beq.n	80044dc <TIM_Base_SetConfig+0x40>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a3b      	ldr	r2, [pc, #236]	; (80045bc <TIM_Base_SetConfig+0x120>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d003      	beq.n	80044dc <TIM_Base_SetConfig+0x40>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a3a      	ldr	r2, [pc, #232]	; (80045c0 <TIM_Base_SetConfig+0x124>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d108      	bne.n	80044ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a2f      	ldr	r2, [pc, #188]	; (80045b0 <TIM_Base_SetConfig+0x114>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d01f      	beq.n	8004536 <TIM_Base_SetConfig+0x9a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fc:	d01b      	beq.n	8004536 <TIM_Base_SetConfig+0x9a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a2c      	ldr	r2, [pc, #176]	; (80045b4 <TIM_Base_SetConfig+0x118>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d017      	beq.n	8004536 <TIM_Base_SetConfig+0x9a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a2b      	ldr	r2, [pc, #172]	; (80045b8 <TIM_Base_SetConfig+0x11c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d013      	beq.n	8004536 <TIM_Base_SetConfig+0x9a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a2a      	ldr	r2, [pc, #168]	; (80045bc <TIM_Base_SetConfig+0x120>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00f      	beq.n	8004536 <TIM_Base_SetConfig+0x9a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a29      	ldr	r2, [pc, #164]	; (80045c0 <TIM_Base_SetConfig+0x124>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d00b      	beq.n	8004536 <TIM_Base_SetConfig+0x9a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a28      	ldr	r2, [pc, #160]	; (80045c4 <TIM_Base_SetConfig+0x128>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d007      	beq.n	8004536 <TIM_Base_SetConfig+0x9a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a27      	ldr	r2, [pc, #156]	; (80045c8 <TIM_Base_SetConfig+0x12c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d003      	beq.n	8004536 <TIM_Base_SetConfig+0x9a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a26      	ldr	r2, [pc, #152]	; (80045cc <TIM_Base_SetConfig+0x130>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d108      	bne.n	8004548 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800453c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4313      	orrs	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a10      	ldr	r2, [pc, #64]	; (80045b0 <TIM_Base_SetConfig+0x114>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d00f      	beq.n	8004594 <TIM_Base_SetConfig+0xf8>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a12      	ldr	r2, [pc, #72]	; (80045c0 <TIM_Base_SetConfig+0x124>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d00b      	beq.n	8004594 <TIM_Base_SetConfig+0xf8>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a11      	ldr	r2, [pc, #68]	; (80045c4 <TIM_Base_SetConfig+0x128>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d007      	beq.n	8004594 <TIM_Base_SetConfig+0xf8>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a10      	ldr	r2, [pc, #64]	; (80045c8 <TIM_Base_SetConfig+0x12c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d003      	beq.n	8004594 <TIM_Base_SetConfig+0xf8>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a0f      	ldr	r2, [pc, #60]	; (80045cc <TIM_Base_SetConfig+0x130>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d103      	bne.n	800459c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	615a      	str	r2, [r3, #20]
}
 80045a2:	bf00      	nop
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	40012c00 	.word	0x40012c00
 80045b4:	40000400 	.word	0x40000400
 80045b8:	40000800 	.word	0x40000800
 80045bc:	40000c00 	.word	0x40000c00
 80045c0:	40013400 	.word	0x40013400
 80045c4:	40014000 	.word	0x40014000
 80045c8:	40014400 	.word	0x40014400
 80045cc:	40014800 	.word	0x40014800

080045d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e040      	b.n	80046a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fc f9fa 	bl	8000a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2224      	movs	r2, #36	; 0x24
 8004638:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0201 	bic.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f82c 	bl	80046a8 <UART_SetConfig>
 8004650:	4603      	mov	r3, r0
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e022      	b.n	80046a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fad8 	bl	8004c18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004676:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004686:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 fb5f 	bl	8004d5c <UART_CheckIdleState>
 800469e:	4603      	mov	r3, r0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046ac:	b08a      	sub	sp, #40	; 0x28
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	431a      	orrs	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	431a      	orrs	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	4ba4      	ldr	r3, [pc, #656]	; (8004968 <UART_SetConfig+0x2c0>)
 80046d8:	4013      	ands	r3, r2
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	6812      	ldr	r2, [r2, #0]
 80046de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046e0:	430b      	orrs	r3, r1
 80046e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a99      	ldr	r2, [pc, #612]	; (800496c <UART_SetConfig+0x2c4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d004      	beq.n	8004714 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004710:	4313      	orrs	r3, r2
 8004712:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004724:	430a      	orrs	r2, r1
 8004726:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a90      	ldr	r2, [pc, #576]	; (8004970 <UART_SetConfig+0x2c8>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d126      	bne.n	8004780 <UART_SetConfig+0xd8>
 8004732:	4b90      	ldr	r3, [pc, #576]	; (8004974 <UART_SetConfig+0x2cc>)
 8004734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004738:	f003 0303 	and.w	r3, r3, #3
 800473c:	2b03      	cmp	r3, #3
 800473e:	d81b      	bhi.n	8004778 <UART_SetConfig+0xd0>
 8004740:	a201      	add	r2, pc, #4	; (adr r2, 8004748 <UART_SetConfig+0xa0>)
 8004742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004746:	bf00      	nop
 8004748:	08004759 	.word	0x08004759
 800474c:	08004769 	.word	0x08004769
 8004750:	08004761 	.word	0x08004761
 8004754:	08004771 	.word	0x08004771
 8004758:	2301      	movs	r3, #1
 800475a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800475e:	e116      	b.n	800498e <UART_SetConfig+0x2e6>
 8004760:	2302      	movs	r3, #2
 8004762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004766:	e112      	b.n	800498e <UART_SetConfig+0x2e6>
 8004768:	2304      	movs	r3, #4
 800476a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800476e:	e10e      	b.n	800498e <UART_SetConfig+0x2e6>
 8004770:	2308      	movs	r3, #8
 8004772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004776:	e10a      	b.n	800498e <UART_SetConfig+0x2e6>
 8004778:	2310      	movs	r3, #16
 800477a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800477e:	e106      	b.n	800498e <UART_SetConfig+0x2e6>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a7c      	ldr	r2, [pc, #496]	; (8004978 <UART_SetConfig+0x2d0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d138      	bne.n	80047fc <UART_SetConfig+0x154>
 800478a:	4b7a      	ldr	r3, [pc, #488]	; (8004974 <UART_SetConfig+0x2cc>)
 800478c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004790:	f003 030c 	and.w	r3, r3, #12
 8004794:	2b0c      	cmp	r3, #12
 8004796:	d82d      	bhi.n	80047f4 <UART_SetConfig+0x14c>
 8004798:	a201      	add	r2, pc, #4	; (adr r2, 80047a0 <UART_SetConfig+0xf8>)
 800479a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479e:	bf00      	nop
 80047a0:	080047d5 	.word	0x080047d5
 80047a4:	080047f5 	.word	0x080047f5
 80047a8:	080047f5 	.word	0x080047f5
 80047ac:	080047f5 	.word	0x080047f5
 80047b0:	080047e5 	.word	0x080047e5
 80047b4:	080047f5 	.word	0x080047f5
 80047b8:	080047f5 	.word	0x080047f5
 80047bc:	080047f5 	.word	0x080047f5
 80047c0:	080047dd 	.word	0x080047dd
 80047c4:	080047f5 	.word	0x080047f5
 80047c8:	080047f5 	.word	0x080047f5
 80047cc:	080047f5 	.word	0x080047f5
 80047d0:	080047ed 	.word	0x080047ed
 80047d4:	2300      	movs	r3, #0
 80047d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047da:	e0d8      	b.n	800498e <UART_SetConfig+0x2e6>
 80047dc:	2302      	movs	r3, #2
 80047de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e2:	e0d4      	b.n	800498e <UART_SetConfig+0x2e6>
 80047e4:	2304      	movs	r3, #4
 80047e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ea:	e0d0      	b.n	800498e <UART_SetConfig+0x2e6>
 80047ec:	2308      	movs	r3, #8
 80047ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f2:	e0cc      	b.n	800498e <UART_SetConfig+0x2e6>
 80047f4:	2310      	movs	r3, #16
 80047f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fa:	e0c8      	b.n	800498e <UART_SetConfig+0x2e6>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a5e      	ldr	r2, [pc, #376]	; (800497c <UART_SetConfig+0x2d4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d125      	bne.n	8004852 <UART_SetConfig+0x1aa>
 8004806:	4b5b      	ldr	r3, [pc, #364]	; (8004974 <UART_SetConfig+0x2cc>)
 8004808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004810:	2b30      	cmp	r3, #48	; 0x30
 8004812:	d016      	beq.n	8004842 <UART_SetConfig+0x19a>
 8004814:	2b30      	cmp	r3, #48	; 0x30
 8004816:	d818      	bhi.n	800484a <UART_SetConfig+0x1a2>
 8004818:	2b20      	cmp	r3, #32
 800481a:	d00a      	beq.n	8004832 <UART_SetConfig+0x18a>
 800481c:	2b20      	cmp	r3, #32
 800481e:	d814      	bhi.n	800484a <UART_SetConfig+0x1a2>
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <UART_SetConfig+0x182>
 8004824:	2b10      	cmp	r3, #16
 8004826:	d008      	beq.n	800483a <UART_SetConfig+0x192>
 8004828:	e00f      	b.n	800484a <UART_SetConfig+0x1a2>
 800482a:	2300      	movs	r3, #0
 800482c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004830:	e0ad      	b.n	800498e <UART_SetConfig+0x2e6>
 8004832:	2302      	movs	r3, #2
 8004834:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004838:	e0a9      	b.n	800498e <UART_SetConfig+0x2e6>
 800483a:	2304      	movs	r3, #4
 800483c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004840:	e0a5      	b.n	800498e <UART_SetConfig+0x2e6>
 8004842:	2308      	movs	r3, #8
 8004844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004848:	e0a1      	b.n	800498e <UART_SetConfig+0x2e6>
 800484a:	2310      	movs	r3, #16
 800484c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004850:	e09d      	b.n	800498e <UART_SetConfig+0x2e6>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a4a      	ldr	r2, [pc, #296]	; (8004980 <UART_SetConfig+0x2d8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d125      	bne.n	80048a8 <UART_SetConfig+0x200>
 800485c:	4b45      	ldr	r3, [pc, #276]	; (8004974 <UART_SetConfig+0x2cc>)
 800485e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004862:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004866:	2bc0      	cmp	r3, #192	; 0xc0
 8004868:	d016      	beq.n	8004898 <UART_SetConfig+0x1f0>
 800486a:	2bc0      	cmp	r3, #192	; 0xc0
 800486c:	d818      	bhi.n	80048a0 <UART_SetConfig+0x1f8>
 800486e:	2b80      	cmp	r3, #128	; 0x80
 8004870:	d00a      	beq.n	8004888 <UART_SetConfig+0x1e0>
 8004872:	2b80      	cmp	r3, #128	; 0x80
 8004874:	d814      	bhi.n	80048a0 <UART_SetConfig+0x1f8>
 8004876:	2b00      	cmp	r3, #0
 8004878:	d002      	beq.n	8004880 <UART_SetConfig+0x1d8>
 800487a:	2b40      	cmp	r3, #64	; 0x40
 800487c:	d008      	beq.n	8004890 <UART_SetConfig+0x1e8>
 800487e:	e00f      	b.n	80048a0 <UART_SetConfig+0x1f8>
 8004880:	2300      	movs	r3, #0
 8004882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004886:	e082      	b.n	800498e <UART_SetConfig+0x2e6>
 8004888:	2302      	movs	r3, #2
 800488a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800488e:	e07e      	b.n	800498e <UART_SetConfig+0x2e6>
 8004890:	2304      	movs	r3, #4
 8004892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004896:	e07a      	b.n	800498e <UART_SetConfig+0x2e6>
 8004898:	2308      	movs	r3, #8
 800489a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800489e:	e076      	b.n	800498e <UART_SetConfig+0x2e6>
 80048a0:	2310      	movs	r3, #16
 80048a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048a6:	e072      	b.n	800498e <UART_SetConfig+0x2e6>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a35      	ldr	r2, [pc, #212]	; (8004984 <UART_SetConfig+0x2dc>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d12a      	bne.n	8004908 <UART_SetConfig+0x260>
 80048b2:	4b30      	ldr	r3, [pc, #192]	; (8004974 <UART_SetConfig+0x2cc>)
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048c0:	d01a      	beq.n	80048f8 <UART_SetConfig+0x250>
 80048c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048c6:	d81b      	bhi.n	8004900 <UART_SetConfig+0x258>
 80048c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048cc:	d00c      	beq.n	80048e8 <UART_SetConfig+0x240>
 80048ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048d2:	d815      	bhi.n	8004900 <UART_SetConfig+0x258>
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <UART_SetConfig+0x238>
 80048d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048dc:	d008      	beq.n	80048f0 <UART_SetConfig+0x248>
 80048de:	e00f      	b.n	8004900 <UART_SetConfig+0x258>
 80048e0:	2300      	movs	r3, #0
 80048e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048e6:	e052      	b.n	800498e <UART_SetConfig+0x2e6>
 80048e8:	2302      	movs	r3, #2
 80048ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ee:	e04e      	b.n	800498e <UART_SetConfig+0x2e6>
 80048f0:	2304      	movs	r3, #4
 80048f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048f6:	e04a      	b.n	800498e <UART_SetConfig+0x2e6>
 80048f8:	2308      	movs	r3, #8
 80048fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048fe:	e046      	b.n	800498e <UART_SetConfig+0x2e6>
 8004900:	2310      	movs	r3, #16
 8004902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004906:	e042      	b.n	800498e <UART_SetConfig+0x2e6>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a17      	ldr	r2, [pc, #92]	; (800496c <UART_SetConfig+0x2c4>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d13a      	bne.n	8004988 <UART_SetConfig+0x2e0>
 8004912:	4b18      	ldr	r3, [pc, #96]	; (8004974 <UART_SetConfig+0x2cc>)
 8004914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004918:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800491c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004920:	d01a      	beq.n	8004958 <UART_SetConfig+0x2b0>
 8004922:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004926:	d81b      	bhi.n	8004960 <UART_SetConfig+0x2b8>
 8004928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800492c:	d00c      	beq.n	8004948 <UART_SetConfig+0x2a0>
 800492e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004932:	d815      	bhi.n	8004960 <UART_SetConfig+0x2b8>
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <UART_SetConfig+0x298>
 8004938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800493c:	d008      	beq.n	8004950 <UART_SetConfig+0x2a8>
 800493e:	e00f      	b.n	8004960 <UART_SetConfig+0x2b8>
 8004940:	2300      	movs	r3, #0
 8004942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004946:	e022      	b.n	800498e <UART_SetConfig+0x2e6>
 8004948:	2302      	movs	r3, #2
 800494a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800494e:	e01e      	b.n	800498e <UART_SetConfig+0x2e6>
 8004950:	2304      	movs	r3, #4
 8004952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004956:	e01a      	b.n	800498e <UART_SetConfig+0x2e6>
 8004958:	2308      	movs	r3, #8
 800495a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800495e:	e016      	b.n	800498e <UART_SetConfig+0x2e6>
 8004960:	2310      	movs	r3, #16
 8004962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004966:	e012      	b.n	800498e <UART_SetConfig+0x2e6>
 8004968:	efff69f3 	.word	0xefff69f3
 800496c:	40008000 	.word	0x40008000
 8004970:	40013800 	.word	0x40013800
 8004974:	40021000 	.word	0x40021000
 8004978:	40004400 	.word	0x40004400
 800497c:	40004800 	.word	0x40004800
 8004980:	40004c00 	.word	0x40004c00
 8004984:	40005000 	.word	0x40005000
 8004988:	2310      	movs	r3, #16
 800498a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a9f      	ldr	r2, [pc, #636]	; (8004c10 <UART_SetConfig+0x568>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d17a      	bne.n	8004a8e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004998:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800499c:	2b08      	cmp	r3, #8
 800499e:	d824      	bhi.n	80049ea <UART_SetConfig+0x342>
 80049a0:	a201      	add	r2, pc, #4	; (adr r2, 80049a8 <UART_SetConfig+0x300>)
 80049a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a6:	bf00      	nop
 80049a8:	080049cd 	.word	0x080049cd
 80049ac:	080049eb 	.word	0x080049eb
 80049b0:	080049d5 	.word	0x080049d5
 80049b4:	080049eb 	.word	0x080049eb
 80049b8:	080049db 	.word	0x080049db
 80049bc:	080049eb 	.word	0x080049eb
 80049c0:	080049eb 	.word	0x080049eb
 80049c4:	080049eb 	.word	0x080049eb
 80049c8:	080049e3 	.word	0x080049e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049cc:	f7fe fdd2 	bl	8003574 <HAL_RCC_GetPCLK1Freq>
 80049d0:	61f8      	str	r0, [r7, #28]
        break;
 80049d2:	e010      	b.n	80049f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049d4:	4b8f      	ldr	r3, [pc, #572]	; (8004c14 <UART_SetConfig+0x56c>)
 80049d6:	61fb      	str	r3, [r7, #28]
        break;
 80049d8:	e00d      	b.n	80049f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049da:	f7fe fd33 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 80049de:	61f8      	str	r0, [r7, #28]
        break;
 80049e0:	e009      	b.n	80049f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049e6:	61fb      	str	r3, [r7, #28]
        break;
 80049e8:	e005      	b.n	80049f6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 80fb 	beq.w	8004bf4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	4413      	add	r3, r2
 8004a08:	69fa      	ldr	r2, [r7, #28]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d305      	bcc.n	8004a1a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a14:	69fa      	ldr	r2, [r7, #28]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d903      	bls.n	8004a22 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a20:	e0e8      	b.n	8004bf4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	2200      	movs	r2, #0
 8004a26:	461c      	mov	r4, r3
 8004a28:	4615      	mov	r5, r2
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	022b      	lsls	r3, r5, #8
 8004a34:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004a38:	0222      	lsls	r2, r4, #8
 8004a3a:	68f9      	ldr	r1, [r7, #12]
 8004a3c:	6849      	ldr	r1, [r1, #4]
 8004a3e:	0849      	lsrs	r1, r1, #1
 8004a40:	2000      	movs	r0, #0
 8004a42:	4688      	mov	r8, r1
 8004a44:	4681      	mov	r9, r0
 8004a46:	eb12 0a08 	adds.w	sl, r2, r8
 8004a4a:	eb43 0b09 	adc.w	fp, r3, r9
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	603b      	str	r3, [r7, #0]
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a5c:	4650      	mov	r0, sl
 8004a5e:	4659      	mov	r1, fp
 8004a60:	f7fb fbb6 	bl	80001d0 <__aeabi_uldivmod>
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	4613      	mov	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a72:	d308      	bcc.n	8004a86 <UART_SetConfig+0x3de>
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a7a:	d204      	bcs.n	8004a86 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	60da      	str	r2, [r3, #12]
 8004a84:	e0b6      	b.n	8004bf4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a8c:	e0b2      	b.n	8004bf4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a96:	d15e      	bne.n	8004b56 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004a98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d828      	bhi.n	8004af2 <UART_SetConfig+0x44a>
 8004aa0:	a201      	add	r2, pc, #4	; (adr r2, 8004aa8 <UART_SetConfig+0x400>)
 8004aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa6:	bf00      	nop
 8004aa8:	08004acd 	.word	0x08004acd
 8004aac:	08004ad5 	.word	0x08004ad5
 8004ab0:	08004add 	.word	0x08004add
 8004ab4:	08004af3 	.word	0x08004af3
 8004ab8:	08004ae3 	.word	0x08004ae3
 8004abc:	08004af3 	.word	0x08004af3
 8004ac0:	08004af3 	.word	0x08004af3
 8004ac4:	08004af3 	.word	0x08004af3
 8004ac8:	08004aeb 	.word	0x08004aeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004acc:	f7fe fd52 	bl	8003574 <HAL_RCC_GetPCLK1Freq>
 8004ad0:	61f8      	str	r0, [r7, #28]
        break;
 8004ad2:	e014      	b.n	8004afe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ad4:	f7fe fd64 	bl	80035a0 <HAL_RCC_GetPCLK2Freq>
 8004ad8:	61f8      	str	r0, [r7, #28]
        break;
 8004ada:	e010      	b.n	8004afe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004adc:	4b4d      	ldr	r3, [pc, #308]	; (8004c14 <UART_SetConfig+0x56c>)
 8004ade:	61fb      	str	r3, [r7, #28]
        break;
 8004ae0:	e00d      	b.n	8004afe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ae2:	f7fe fcaf 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 8004ae6:	61f8      	str	r0, [r7, #28]
        break;
 8004ae8:	e009      	b.n	8004afe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aee:	61fb      	str	r3, [r7, #28]
        break;
 8004af0:	e005      	b.n	8004afe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004afc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d077      	beq.n	8004bf4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	005a      	lsls	r2, r3, #1
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	085b      	lsrs	r3, r3, #1
 8004b0e:	441a      	add	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b18:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	2b0f      	cmp	r3, #15
 8004b1e:	d916      	bls.n	8004b4e <UART_SetConfig+0x4a6>
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b26:	d212      	bcs.n	8004b4e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	f023 030f 	bic.w	r3, r3, #15
 8004b30:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	085b      	lsrs	r3, r3, #1
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	8afb      	ldrh	r3, [r7, #22]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	8afa      	ldrh	r2, [r7, #22]
 8004b4a:	60da      	str	r2, [r3, #12]
 8004b4c:	e052      	b.n	8004bf4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b54:	e04e      	b.n	8004bf4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d827      	bhi.n	8004bae <UART_SetConfig+0x506>
 8004b5e:	a201      	add	r2, pc, #4	; (adr r2, 8004b64 <UART_SetConfig+0x4bc>)
 8004b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b64:	08004b89 	.word	0x08004b89
 8004b68:	08004b91 	.word	0x08004b91
 8004b6c:	08004b99 	.word	0x08004b99
 8004b70:	08004baf 	.word	0x08004baf
 8004b74:	08004b9f 	.word	0x08004b9f
 8004b78:	08004baf 	.word	0x08004baf
 8004b7c:	08004baf 	.word	0x08004baf
 8004b80:	08004baf 	.word	0x08004baf
 8004b84:	08004ba7 	.word	0x08004ba7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b88:	f7fe fcf4 	bl	8003574 <HAL_RCC_GetPCLK1Freq>
 8004b8c:	61f8      	str	r0, [r7, #28]
        break;
 8004b8e:	e014      	b.n	8004bba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b90:	f7fe fd06 	bl	80035a0 <HAL_RCC_GetPCLK2Freq>
 8004b94:	61f8      	str	r0, [r7, #28]
        break;
 8004b96:	e010      	b.n	8004bba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b98:	4b1e      	ldr	r3, [pc, #120]	; (8004c14 <UART_SetConfig+0x56c>)
 8004b9a:	61fb      	str	r3, [r7, #28]
        break;
 8004b9c:	e00d      	b.n	8004bba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b9e:	f7fe fc51 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 8004ba2:	61f8      	str	r0, [r7, #28]
        break;
 8004ba4:	e009      	b.n	8004bba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004baa:	61fb      	str	r3, [r7, #28]
        break;
 8004bac:	e005      	b.n	8004bba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004bb8:	bf00      	nop
    }

    if (pclk != 0U)
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d019      	beq.n	8004bf4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	085a      	lsrs	r2, r3, #1
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	441a      	add	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	2b0f      	cmp	r3, #15
 8004bd8:	d909      	bls.n	8004bee <UART_SetConfig+0x546>
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be0:	d205      	bcs.n	8004bee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60da      	str	r2, [r3, #12]
 8004bec:	e002      	b.n	8004bf4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3728      	adds	r7, #40	; 0x28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c0e:	bf00      	nop
 8004c10:	40008000 	.word	0x40008000
 8004c14:	00f42400 	.word	0x00f42400

08004c18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00a      	beq.n	8004c42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00a      	beq.n	8004c64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00a      	beq.n	8004c86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	f003 0308 	and.w	r3, r3, #8
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	f003 0310 	and.w	r3, r3, #16
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01a      	beq.n	8004d2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d16:	d10a      	bne.n	8004d2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	605a      	str	r2, [r3, #4]
  }
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af02      	add	r7, sp, #8
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d6c:	f7fb ffb6 	bl	8000cdc <HAL_GetTick>
 8004d70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d10e      	bne.n	8004d9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f82d 	bl	8004dee <UART_WaitOnFlagUntilTimeout>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e023      	b.n	8004de6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d10e      	bne.n	8004dca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f817 	bl	8004dee <UART_WaitOnFlagUntilTimeout>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e00d      	b.n	8004de6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b09c      	sub	sp, #112	; 0x70
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	60f8      	str	r0, [r7, #12]
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	603b      	str	r3, [r7, #0]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dfe:	e0a5      	b.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e06:	f000 80a1 	beq.w	8004f4c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0a:	f7fb ff67 	bl	8000cdc <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d302      	bcc.n	8004e20 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d13e      	bne.n	8004e9e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e28:	e853 3f00 	ldrex	r3, [r3]
 8004e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e34:	667b      	str	r3, [r7, #100]	; 0x64
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e40:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e6      	bne.n	8004e20 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3308      	adds	r3, #8
 8004e58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e5c:	e853 3f00 	ldrex	r3, [r3]
 8004e60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e64:	f023 0301 	bic.w	r3, r3, #1
 8004e68:	663b      	str	r3, [r7, #96]	; 0x60
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3308      	adds	r3, #8
 8004e70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e72:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e7a:	e841 2300 	strex	r3, r2, [r1]
 8004e7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1e5      	bne.n	8004e52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e067      	b.n	8004f6e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d04f      	beq.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eba:	d147      	bne.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ec4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ece:	e853 3f00 	ldrex	r3, [r3]
 8004ed2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004eda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ee6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eec:	e841 2300 	strex	r3, r2, [r1]
 8004ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1e6      	bne.n	8004ec6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3308      	adds	r3, #8
 8004efe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	e853 3f00 	ldrex	r3, [r3]
 8004f06:	613b      	str	r3, [r7, #16]
   return(result);
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f023 0301 	bic.w	r3, r3, #1
 8004f0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3308      	adds	r3, #8
 8004f16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f18:	623a      	str	r2, [r7, #32]
 8004f1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1c:	69f9      	ldr	r1, [r7, #28]
 8004f1e:	6a3a      	ldr	r2, [r7, #32]
 8004f20:	e841 2300 	strex	r3, r2, [r1]
 8004f24:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1e5      	bne.n	8004ef8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2220      	movs	r2, #32
 8004f36:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e010      	b.n	8004f6e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	69da      	ldr	r2, [r3, #28]
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	4013      	ands	r3, r2
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	bf0c      	ite	eq
 8004f5c:	2301      	moveq	r3, #1
 8004f5e:	2300      	movne	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	461a      	mov	r2, r3
 8004f64:	79fb      	ldrb	r3, [r7, #7]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	f43f af4a 	beq.w	8004e00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3770      	adds	r7, #112	; 0x70
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
	...

08004f78 <__NVIC_SetPriority>:
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	6039      	str	r1, [r7, #0]
 8004f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	db0a      	blt.n	8004fa2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	490c      	ldr	r1, [pc, #48]	; (8004fc4 <__NVIC_SetPriority+0x4c>)
 8004f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f96:	0112      	lsls	r2, r2, #4
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004fa0:	e00a      	b.n	8004fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	4908      	ldr	r1, [pc, #32]	; (8004fc8 <__NVIC_SetPriority+0x50>)
 8004fa8:	79fb      	ldrb	r3, [r7, #7]
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	3b04      	subs	r3, #4
 8004fb0:	0112      	lsls	r2, r2, #4
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	761a      	strb	r2, [r3, #24]
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	e000e100 	.word	0xe000e100
 8004fc8:	e000ed00 	.word	0xe000ed00

08004fcc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004fd0:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <SysTick_Handler+0x1c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004fd4:	f001 fd28 	bl	8006a28 <xTaskGetSchedulerState>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d001      	beq.n	8004fe2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004fde:	f002 fb13 	bl	8007608 <xPortSysTickHandler>
  }
}
 8004fe2:	bf00      	nop
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	e000e010 	.word	0xe000e010

08004fec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	f06f 0004 	mvn.w	r0, #4
 8004ff6:	f7ff ffbf 	bl	8004f78 <__NVIC_SetPriority>
#endif
}
 8004ffa:	bf00      	nop
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005006:	f3ef 8305 	mrs	r3, IPSR
 800500a:	603b      	str	r3, [r7, #0]
  return(result);
 800500c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005012:	f06f 0305 	mvn.w	r3, #5
 8005016:	607b      	str	r3, [r7, #4]
 8005018:	e00c      	b.n	8005034 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800501a:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <osKernelInitialize+0x44>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d105      	bne.n	800502e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005022:	4b08      	ldr	r3, [pc, #32]	; (8005044 <osKernelInitialize+0x44>)
 8005024:	2201      	movs	r2, #1
 8005026:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005028:	2300      	movs	r3, #0
 800502a:	607b      	str	r3, [r7, #4]
 800502c:	e002      	b.n	8005034 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800502e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005032:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005034:	687b      	ldr	r3, [r7, #4]
}
 8005036:	4618      	mov	r0, r3
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	200001d4 	.word	0x200001d4

08005048 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800504e:	f3ef 8305 	mrs	r3, IPSR
 8005052:	603b      	str	r3, [r7, #0]
  return(result);
 8005054:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <osKernelStart+0x1a>
    stat = osErrorISR;
 800505a:	f06f 0305 	mvn.w	r3, #5
 800505e:	607b      	str	r3, [r7, #4]
 8005060:	e010      	b.n	8005084 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005062:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <osKernelStart+0x48>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d109      	bne.n	800507e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800506a:	f7ff ffbf 	bl	8004fec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800506e:	4b08      	ldr	r3, [pc, #32]	; (8005090 <osKernelStart+0x48>)
 8005070:	2202      	movs	r2, #2
 8005072:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005074:	f001 f87c 	bl	8006170 <vTaskStartScheduler>
      stat = osOK;
 8005078:	2300      	movs	r3, #0
 800507a:	607b      	str	r3, [r7, #4]
 800507c:	e002      	b.n	8005084 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800507e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005082:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005084:	687b      	ldr	r3, [r7, #4]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	200001d4 	.word	0x200001d4

08005094 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005094:	b580      	push	{r7, lr}
 8005096:	b08e      	sub	sp, #56	; 0x38
 8005098:	af04      	add	r7, sp, #16
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80050a0:	2300      	movs	r3, #0
 80050a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050a4:	f3ef 8305 	mrs	r3, IPSR
 80050a8:	617b      	str	r3, [r7, #20]
  return(result);
 80050aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d17e      	bne.n	80051ae <osThreadNew+0x11a>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d07b      	beq.n	80051ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80050b6:	2380      	movs	r3, #128	; 0x80
 80050b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80050ba:	2318      	movs	r3, #24
 80050bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80050be:	2300      	movs	r3, #0
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80050c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d045      	beq.n	800515a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <osThreadNew+0x48>
        name = attr->name;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d008      	beq.n	8005102 <osThreadNew+0x6e>
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	2b38      	cmp	r3, #56	; 0x38
 80050f4:	d805      	bhi.n	8005102 <osThreadNew+0x6e>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <osThreadNew+0x72>
        return (NULL);
 8005102:	2300      	movs	r3, #0
 8005104:	e054      	b.n	80051b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	089b      	lsrs	r3, r3, #2
 8005114:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00e      	beq.n	800513c <osThreadNew+0xa8>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	2bbb      	cmp	r3, #187	; 0xbb
 8005124:	d90a      	bls.n	800513c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800512a:	2b00      	cmp	r3, #0
 800512c:	d006      	beq.n	800513c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d002      	beq.n	800513c <osThreadNew+0xa8>
        mem = 1;
 8005136:	2301      	movs	r3, #1
 8005138:	61bb      	str	r3, [r7, #24]
 800513a:	e010      	b.n	800515e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10c      	bne.n	800515e <osThreadNew+0xca>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d108      	bne.n	800515e <osThreadNew+0xca>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d104      	bne.n	800515e <osThreadNew+0xca>
          mem = 0;
 8005154:	2300      	movs	r3, #0
 8005156:	61bb      	str	r3, [r7, #24]
 8005158:	e001      	b.n	800515e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800515a:	2300      	movs	r3, #0
 800515c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d110      	bne.n	8005186 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800516c:	9202      	str	r2, [sp, #8]
 800516e:	9301      	str	r3, [sp, #4]
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	6a3a      	ldr	r2, [r7, #32]
 8005178:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f000 fe0c 	bl	8005d98 <xTaskCreateStatic>
 8005180:	4603      	mov	r3, r0
 8005182:	613b      	str	r3, [r7, #16]
 8005184:	e013      	b.n	80051ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d110      	bne.n	80051ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	b29a      	uxth	r2, r3
 8005190:	f107 0310 	add.w	r3, r7, #16
 8005194:	9301      	str	r3, [sp, #4]
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 fe57 	bl	8005e52 <xTaskCreate>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d001      	beq.n	80051ae <osThreadNew+0x11a>
            hTask = NULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80051ae:	693b      	ldr	r3, [r7, #16]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3728      	adds	r7, #40	; 0x28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051c0:	f3ef 8305 	mrs	r3, IPSR
 80051c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80051c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <osDelay+0x1c>
    stat = osErrorISR;
 80051cc:	f06f 0305 	mvn.w	r3, #5
 80051d0:	60fb      	str	r3, [r7, #12]
 80051d2:	e007      	b.n	80051e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80051d4:	2300      	movs	r3, #0
 80051d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d002      	beq.n	80051e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 ff92 	bl	8006108 <vTaskDelay>
    }
  }

  return (stat);
 80051e4:	68fb      	ldr	r3, [r7, #12]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
	...

080051f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4a07      	ldr	r2, [pc, #28]	; (800521c <vApplicationGetIdleTaskMemory+0x2c>)
 8005200:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	4a06      	ldr	r2, [pc, #24]	; (8005220 <vApplicationGetIdleTaskMemory+0x30>)
 8005206:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2280      	movs	r2, #128	; 0x80
 800520c:	601a      	str	r2, [r3, #0]
}
 800520e:	bf00      	nop
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	200001d8 	.word	0x200001d8
 8005220:	20000294 	.word	0x20000294

08005224 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4a07      	ldr	r2, [pc, #28]	; (8005250 <vApplicationGetTimerTaskMemory+0x2c>)
 8005234:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	4a06      	ldr	r2, [pc, #24]	; (8005254 <vApplicationGetTimerTaskMemory+0x30>)
 800523a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005242:	601a      	str	r2, [r3, #0]
}
 8005244:	bf00      	nop
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	20000494 	.word	0x20000494
 8005254:	20000550 	.word	0x20000550

08005258 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f103 0208 	add.w	r2, r3, #8
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005270:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f103 0208 	add.w	r2, r3, #8
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f103 0208 	add.w	r2, r3, #8
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052b2:	b480      	push	{r7}
 80052b4:	b085      	sub	sp, #20
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	1c5a      	adds	r2, r3, #1
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	601a      	str	r2, [r3, #0]
}
 80052ee:	bf00      	nop
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052fa:	b480      	push	{r7}
 80052fc:	b085      	sub	sp, #20
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
 8005302:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005310:	d103      	bne.n	800531a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	e00c      	b.n	8005334 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3308      	adds	r3, #8
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	e002      	b.n	8005328 <vListInsert+0x2e>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	429a      	cmp	r2, r3
 8005332:	d2f6      	bcs.n	8005322 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	601a      	str	r2, [r3, #0]
}
 8005360:	bf00      	nop
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6892      	ldr	r2, [r2, #8]
 8005382:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6852      	ldr	r2, [r2, #4]
 800538c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	429a      	cmp	r2, r3
 8005396:	d103      	bne.n	80053a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	1e5a      	subs	r2, r3, #1
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10a      	bne.n	80053ea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80053e6:	bf00      	nop
 80053e8:	e7fe      	b.n	80053e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80053ea:	f002 f87b 	bl	80074e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f6:	68f9      	ldr	r1, [r7, #12]
 80053f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053fa:	fb01 f303 	mul.w	r3, r1, r3
 80053fe:	441a      	add	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541a:	3b01      	subs	r3, #1
 800541c:	68f9      	ldr	r1, [r7, #12]
 800541e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005420:	fb01 f303 	mul.w	r3, r1, r3
 8005424:	441a      	add	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	22ff      	movs	r2, #255	; 0xff
 800542e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	22ff      	movs	r2, #255	; 0xff
 8005436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d114      	bne.n	800546a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d01a      	beq.n	800547e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	3310      	adds	r3, #16
 800544c:	4618      	mov	r0, r3
 800544e:	f001 f929 	bl	80066a4 <xTaskRemoveFromEventList>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d012      	beq.n	800547e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005458:	4b0c      	ldr	r3, [pc, #48]	; (800548c <xQueueGenericReset+0xcc>)
 800545a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	e009      	b.n	800547e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3310      	adds	r3, #16
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff fef2 	bl	8005258 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3324      	adds	r3, #36	; 0x24
 8005478:	4618      	mov	r0, r3
 800547a:	f7ff feed 	bl	8005258 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800547e:	f002 f861 	bl	8007544 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005482:	2301      	movs	r3, #1
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	e000ed04 	.word	0xe000ed04

08005490 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08e      	sub	sp, #56	; 0x38
 8005494:	af02      	add	r7, sp, #8
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10a      	bne.n	80054ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054b6:	bf00      	nop
 80054b8:	e7fe      	b.n	80054b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10a      	bne.n	80054d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054d2:	bf00      	nop
 80054d4:	e7fe      	b.n	80054d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d002      	beq.n	80054e2 <xQueueGenericCreateStatic+0x52>
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <xQueueGenericCreateStatic+0x56>
 80054e2:	2301      	movs	r3, #1
 80054e4:	e000      	b.n	80054e8 <xQueueGenericCreateStatic+0x58>
 80054e6:	2300      	movs	r3, #0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10a      	bne.n	8005502 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	623b      	str	r3, [r7, #32]
}
 80054fe:	bf00      	nop
 8005500:	e7fe      	b.n	8005500 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d102      	bne.n	800550e <xQueueGenericCreateStatic+0x7e>
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <xQueueGenericCreateStatic+0x82>
 800550e:	2301      	movs	r3, #1
 8005510:	e000      	b.n	8005514 <xQueueGenericCreateStatic+0x84>
 8005512:	2300      	movs	r3, #0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10a      	bne.n	800552e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551c:	f383 8811 	msr	BASEPRI, r3
 8005520:	f3bf 8f6f 	isb	sy
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	61fb      	str	r3, [r7, #28]
}
 800552a:	bf00      	nop
 800552c:	e7fe      	b.n	800552c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800552e:	2350      	movs	r3, #80	; 0x50
 8005530:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2b50      	cmp	r3, #80	; 0x50
 8005536:	d00a      	beq.n	800554e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553c:	f383 8811 	msr	BASEPRI, r3
 8005540:	f3bf 8f6f 	isb	sy
 8005544:	f3bf 8f4f 	dsb	sy
 8005548:	61bb      	str	r3, [r7, #24]
}
 800554a:	bf00      	nop
 800554c:	e7fe      	b.n	800554c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800554e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00d      	beq.n	8005576 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800555a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005562:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	4613      	mov	r3, r2
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	68b9      	ldr	r1, [r7, #8]
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 f805 	bl	8005580 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005578:	4618      	mov	r0, r3
 800557a:	3730      	adds	r7, #48	; 0x30
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
 800558c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d103      	bne.n	800559c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	e002      	b.n	80055a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055ae:	2101      	movs	r1, #1
 80055b0:	69b8      	ldr	r0, [r7, #24]
 80055b2:	f7ff ff05 	bl	80053c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	78fa      	ldrb	r2, [r7, #3]
 80055ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80055be:	bf00      	nop
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
	...

080055c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08e      	sub	sp, #56	; 0x38
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80055d6:	2300      	movs	r3, #0
 80055d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10a      	bne.n	80055fa <xQueueGenericSend+0x32>
	__asm volatile
 80055e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e8:	f383 8811 	msr	BASEPRI, r3
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055f6:	bf00      	nop
 80055f8:	e7fe      	b.n	80055f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d103      	bne.n	8005608 <xQueueGenericSend+0x40>
 8005600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <xQueueGenericSend+0x44>
 8005608:	2301      	movs	r3, #1
 800560a:	e000      	b.n	800560e <xQueueGenericSend+0x46>
 800560c:	2300      	movs	r3, #0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10a      	bne.n	8005628 <xQueueGenericSend+0x60>
	__asm volatile
 8005612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005624:	bf00      	nop
 8005626:	e7fe      	b.n	8005626 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b02      	cmp	r3, #2
 800562c:	d103      	bne.n	8005636 <xQueueGenericSend+0x6e>
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005632:	2b01      	cmp	r3, #1
 8005634:	d101      	bne.n	800563a <xQueueGenericSend+0x72>
 8005636:	2301      	movs	r3, #1
 8005638:	e000      	b.n	800563c <xQueueGenericSend+0x74>
 800563a:	2300      	movs	r3, #0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10a      	bne.n	8005656 <xQueueGenericSend+0x8e>
	__asm volatile
 8005640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	623b      	str	r3, [r7, #32]
}
 8005652:	bf00      	nop
 8005654:	e7fe      	b.n	8005654 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005656:	f001 f9e7 	bl	8006a28 <xTaskGetSchedulerState>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d102      	bne.n	8005666 <xQueueGenericSend+0x9e>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <xQueueGenericSend+0xa2>
 8005666:	2301      	movs	r3, #1
 8005668:	e000      	b.n	800566c <xQueueGenericSend+0xa4>
 800566a:	2300      	movs	r3, #0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10a      	bne.n	8005686 <xQueueGenericSend+0xbe>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	61fb      	str	r3, [r7, #28]
}
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005686:	f001 ff2d 	bl	80074e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800568a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005692:	429a      	cmp	r2, r3
 8005694:	d302      	bcc.n	800569c <xQueueGenericSend+0xd4>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d129      	bne.n	80056f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	68b9      	ldr	r1, [r7, #8]
 80056a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056a2:	f000 fa0b 	bl	8005abc <prvCopyDataToQueue>
 80056a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d010      	beq.n	80056d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b2:	3324      	adds	r3, #36	; 0x24
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 fff5 	bl	80066a4 <xTaskRemoveFromEventList>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d013      	beq.n	80056e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80056c0:	4b3f      	ldr	r3, [pc, #252]	; (80057c0 <xQueueGenericSend+0x1f8>)
 80056c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	e00a      	b.n	80056e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80056d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d007      	beq.n	80056e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80056d8:	4b39      	ldr	r3, [pc, #228]	; (80057c0 <xQueueGenericSend+0x1f8>)
 80056da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80056e8:	f001 ff2c 	bl	8007544 <vPortExitCritical>
				return pdPASS;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e063      	b.n	80057b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d103      	bne.n	80056fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056f6:	f001 ff25 	bl	8007544 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80056fa:	2300      	movs	r3, #0
 80056fc:	e05c      	b.n	80057b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005700:	2b00      	cmp	r3, #0
 8005702:	d106      	bne.n	8005712 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005704:	f107 0314 	add.w	r3, r7, #20
 8005708:	4618      	mov	r0, r3
 800570a:	f001 f82f 	bl	800676c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800570e:	2301      	movs	r3, #1
 8005710:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005712:	f001 ff17 	bl	8007544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005716:	f000 fd9b 	bl	8006250 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800571a:	f001 fee3 	bl	80074e4 <vPortEnterCritical>
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005724:	b25b      	sxtb	r3, r3
 8005726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800572a:	d103      	bne.n	8005734 <xQueueGenericSend+0x16c>
 800572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800573a:	b25b      	sxtb	r3, r3
 800573c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005740:	d103      	bne.n	800574a <xQueueGenericSend+0x182>
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800574a:	f001 fefb 	bl	8007544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800574e:	1d3a      	adds	r2, r7, #4
 8005750:	f107 0314 	add.w	r3, r7, #20
 8005754:	4611      	mov	r1, r2
 8005756:	4618      	mov	r0, r3
 8005758:	f001 f81e 	bl	8006798 <xTaskCheckForTimeOut>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d124      	bne.n	80057ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005762:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005764:	f000 faa2 	bl	8005cac <prvIsQueueFull>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d018      	beq.n	80057a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800576e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005770:	3310      	adds	r3, #16
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	4611      	mov	r1, r2
 8005776:	4618      	mov	r0, r3
 8005778:	f000 ff44 	bl	8006604 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800577c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800577e:	f000 fa2d 	bl	8005bdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005782:	f000 fd73 	bl	800626c <xTaskResumeAll>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	f47f af7c 	bne.w	8005686 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800578e:	4b0c      	ldr	r3, [pc, #48]	; (80057c0 <xQueueGenericSend+0x1f8>)
 8005790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	e772      	b.n	8005686 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057a2:	f000 fa1b 	bl	8005bdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057a6:	f000 fd61 	bl	800626c <xTaskResumeAll>
 80057aa:	e76c      	b.n	8005686 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80057ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057ae:	f000 fa15 	bl	8005bdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057b2:	f000 fd5b 	bl	800626c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80057b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3738      	adds	r7, #56	; 0x38
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	e000ed04 	.word	0xe000ed04

080057c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b090      	sub	sp, #64	; 0x40
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80057d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10a      	bne.n	80057f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80057dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80057ee:	bf00      	nop
 80057f0:	e7fe      	b.n	80057f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d103      	bne.n	8005800 <xQueueGenericSendFromISR+0x3c>
 80057f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <xQueueGenericSendFromISR+0x40>
 8005800:	2301      	movs	r3, #1
 8005802:	e000      	b.n	8005806 <xQueueGenericSendFromISR+0x42>
 8005804:	2300      	movs	r3, #0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10a      	bne.n	8005820 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800581c:	bf00      	nop
 800581e:	e7fe      	b.n	800581e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2b02      	cmp	r3, #2
 8005824:	d103      	bne.n	800582e <xQueueGenericSendFromISR+0x6a>
 8005826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582a:	2b01      	cmp	r3, #1
 800582c:	d101      	bne.n	8005832 <xQueueGenericSendFromISR+0x6e>
 800582e:	2301      	movs	r3, #1
 8005830:	e000      	b.n	8005834 <xQueueGenericSendFromISR+0x70>
 8005832:	2300      	movs	r3, #0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10a      	bne.n	800584e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	623b      	str	r3, [r7, #32]
}
 800584a:	bf00      	nop
 800584c:	e7fe      	b.n	800584c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800584e:	f001 ff2b 	bl	80076a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005852:	f3ef 8211 	mrs	r2, BASEPRI
 8005856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	61fa      	str	r2, [r7, #28]
 8005868:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800586a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800586c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800586e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005876:	429a      	cmp	r2, r3
 8005878:	d302      	bcc.n	8005880 <xQueueGenericSendFromISR+0xbc>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b02      	cmp	r3, #2
 800587e:	d12f      	bne.n	80058e0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005882:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800588a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	68b9      	ldr	r1, [r7, #8]
 8005894:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005896:	f000 f911 	bl	8005abc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800589a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800589e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058a2:	d112      	bne.n	80058ca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d016      	beq.n	80058da <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ae:	3324      	adds	r3, #36	; 0x24
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 fef7 	bl	80066a4 <xTaskRemoveFromEventList>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00e      	beq.n	80058da <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00b      	beq.n	80058da <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	e007      	b.n	80058da <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80058ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80058ce:	3301      	adds	r3, #1
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	b25a      	sxtb	r2, r3
 80058d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80058da:	2301      	movs	r3, #1
 80058dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80058de:	e001      	b.n	80058e4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80058e0:	2300      	movs	r3, #0
 80058e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80058ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3740      	adds	r7, #64	; 0x40
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b08c      	sub	sp, #48	; 0x30
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005908:	2300      	movs	r3, #0
 800590a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10a      	bne.n	800592c <xQueueReceive+0x30>
	__asm volatile
 8005916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	623b      	str	r3, [r7, #32]
}
 8005928:	bf00      	nop
 800592a:	e7fe      	b.n	800592a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d103      	bne.n	800593a <xQueueReceive+0x3e>
 8005932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <xQueueReceive+0x42>
 800593a:	2301      	movs	r3, #1
 800593c:	e000      	b.n	8005940 <xQueueReceive+0x44>
 800593e:	2300      	movs	r3, #0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10a      	bne.n	800595a <xQueueReceive+0x5e>
	__asm volatile
 8005944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	61fb      	str	r3, [r7, #28]
}
 8005956:	bf00      	nop
 8005958:	e7fe      	b.n	8005958 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800595a:	f001 f865 	bl	8006a28 <xTaskGetSchedulerState>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d102      	bne.n	800596a <xQueueReceive+0x6e>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <xQueueReceive+0x72>
 800596a:	2301      	movs	r3, #1
 800596c:	e000      	b.n	8005970 <xQueueReceive+0x74>
 800596e:	2300      	movs	r3, #0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10a      	bne.n	800598a <xQueueReceive+0x8e>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	61bb      	str	r3, [r7, #24]
}
 8005986:	bf00      	nop
 8005988:	e7fe      	b.n	8005988 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800598a:	f001 fdab 	bl	80074e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800598e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005992:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	2b00      	cmp	r3, #0
 8005998:	d01f      	beq.n	80059da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800599a:	68b9      	ldr	r1, [r7, #8]
 800599c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800599e:	f000 f8f7 	bl	8005b90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	1e5a      	subs	r2, r3, #1
 80059a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00f      	beq.n	80059d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b4:	3310      	adds	r3, #16
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 fe74 	bl	80066a4 <xTaskRemoveFromEventList>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d007      	beq.n	80059d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059c2:	4b3d      	ldr	r3, [pc, #244]	; (8005ab8 <xQueueReceive+0x1bc>)
 80059c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059d2:	f001 fdb7 	bl	8007544 <vPortExitCritical>
				return pdPASS;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e069      	b.n	8005aae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d103      	bne.n	80059e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059e0:	f001 fdb0 	bl	8007544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80059e4:	2300      	movs	r3, #0
 80059e6:	e062      	b.n	8005aae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d106      	bne.n	80059fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059ee:	f107 0310 	add.w	r3, r7, #16
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 feba 	bl	800676c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059f8:	2301      	movs	r3, #1
 80059fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059fc:	f001 fda2 	bl	8007544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a00:	f000 fc26 	bl	8006250 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a04:	f001 fd6e 	bl	80074e4 <vPortEnterCritical>
 8005a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a0e:	b25b      	sxtb	r3, r3
 8005a10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a14:	d103      	bne.n	8005a1e <xQueueReceive+0x122>
 8005a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a24:	b25b      	sxtb	r3, r3
 8005a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a2a:	d103      	bne.n	8005a34 <xQueueReceive+0x138>
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a34:	f001 fd86 	bl	8007544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a38:	1d3a      	adds	r2, r7, #4
 8005a3a:	f107 0310 	add.w	r3, r7, #16
 8005a3e:	4611      	mov	r1, r2
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 fea9 	bl	8006798 <xTaskCheckForTimeOut>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d123      	bne.n	8005a94 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a4e:	f000 f917 	bl	8005c80 <prvIsQueueEmpty>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d017      	beq.n	8005a88 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	3324      	adds	r3, #36	; 0x24
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	4611      	mov	r1, r2
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 fdcf 	bl	8006604 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a68:	f000 f8b8 	bl	8005bdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a6c:	f000 fbfe 	bl	800626c <xTaskResumeAll>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d189      	bne.n	800598a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005a76:	4b10      	ldr	r3, [pc, #64]	; (8005ab8 <xQueueReceive+0x1bc>)
 8005a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	e780      	b.n	800598a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a8a:	f000 f8a7 	bl	8005bdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a8e:	f000 fbed 	bl	800626c <xTaskResumeAll>
 8005a92:	e77a      	b.n	800598a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a96:	f000 f8a1 	bl	8005bdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a9a:	f000 fbe7 	bl	800626c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aa0:	f000 f8ee 	bl	8005c80 <prvIsQueueEmpty>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f43f af6f 	beq.w	800598a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005aac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3730      	adds	r7, #48	; 0x30
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10d      	bne.n	8005af6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d14d      	bne.n	8005b7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 ffbc 	bl	8006a64 <xTaskPriorityDisinherit>
 8005aec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	609a      	str	r2, [r3, #8]
 8005af4:	e043      	b.n	8005b7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d119      	bne.n	8005b30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6858      	ldr	r0, [r3, #4]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b04:	461a      	mov	r2, r3
 8005b06:	68b9      	ldr	r1, [r7, #8]
 8005b08:	f002 f81e 	bl	8007b48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b14:	441a      	add	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d32b      	bcc.n	8005b7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	605a      	str	r2, [r3, #4]
 8005b2e:	e026      	b.n	8005b7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	68d8      	ldr	r0, [r3, #12]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b38:	461a      	mov	r2, r3
 8005b3a:	68b9      	ldr	r1, [r7, #8]
 8005b3c:	f002 f804 	bl	8007b48 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	68da      	ldr	r2, [r3, #12]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b48:	425b      	negs	r3, r3
 8005b4a:	441a      	add	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d207      	bcs.n	8005b6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b64:	425b      	negs	r3, r3
 8005b66:	441a      	add	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d105      	bne.n	8005b7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d002      	beq.n	8005b7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005b86:	697b      	ldr	r3, [r7, #20]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3718      	adds	r7, #24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d018      	beq.n	8005bd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	441a      	add	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68da      	ldr	r2, [r3, #12]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d303      	bcc.n	8005bc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68d9      	ldr	r1, [r3, #12]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bcc:	461a      	mov	r2, r3
 8005bce:	6838      	ldr	r0, [r7, #0]
 8005bd0:	f001 ffba 	bl	8007b48 <memcpy>
	}
}
 8005bd4:	bf00      	nop
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005be4:	f001 fc7e 	bl	80074e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005bf0:	e011      	b.n	8005c16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d012      	beq.n	8005c20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	3324      	adds	r3, #36	; 0x24
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 fd50 	bl	80066a4 <xTaskRemoveFromEventList>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c0a:	f000 fe27 	bl	800685c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c0e:	7bfb      	ldrb	r3, [r7, #15]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	dce9      	bgt.n	8005bf2 <prvUnlockQueue+0x16>
 8005c1e:	e000      	b.n	8005c22 <prvUnlockQueue+0x46>
					break;
 8005c20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	22ff      	movs	r2, #255	; 0xff
 8005c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005c2a:	f001 fc8b 	bl	8007544 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c2e:	f001 fc59 	bl	80074e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c3a:	e011      	b.n	8005c60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d012      	beq.n	8005c6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	3310      	adds	r3, #16
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fd2b 	bl	80066a4 <xTaskRemoveFromEventList>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005c54:	f000 fe02 	bl	800685c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c58:	7bbb      	ldrb	r3, [r7, #14]
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	dce9      	bgt.n	8005c3c <prvUnlockQueue+0x60>
 8005c68:	e000      	b.n	8005c6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	22ff      	movs	r2, #255	; 0xff
 8005c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005c74:	f001 fc66 	bl	8007544 <vPortExitCritical>
}
 8005c78:	bf00      	nop
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c88:	f001 fc2c 	bl	80074e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d102      	bne.n	8005c9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c94:	2301      	movs	r3, #1
 8005c96:	60fb      	str	r3, [r7, #12]
 8005c98:	e001      	b.n	8005c9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c9e:	f001 fc51 	bl	8007544 <vPortExitCritical>

	return xReturn;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cb4:	f001 fc16 	bl	80074e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d102      	bne.n	8005cca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	e001      	b.n	8005cce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cce:	f001 fc39 	bl	8007544 <vPortExitCritical>

	return xReturn;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	e014      	b.n	8005d16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005cec:	4a0f      	ldr	r2, [pc, #60]	; (8005d2c <vQueueAddToRegistry+0x50>)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10b      	bne.n	8005d10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005cf8:	490c      	ldr	r1, [pc, #48]	; (8005d2c <vQueueAddToRegistry+0x50>)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d02:	4a0a      	ldr	r2, [pc, #40]	; (8005d2c <vQueueAddToRegistry+0x50>)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	4413      	add	r3, r2
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d0e:	e006      	b.n	8005d1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	3301      	adds	r3, #1
 8005d14:	60fb      	str	r3, [r7, #12]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b07      	cmp	r3, #7
 8005d1a:	d9e7      	bls.n	8005cec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d1c:	bf00      	nop
 8005d1e:	bf00      	nop
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	20000950 	.word	0x20000950

08005d30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d40:	f001 fbd0 	bl	80074e4 <vPortEnterCritical>
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d4a:	b25b      	sxtb	r3, r3
 8005d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d50:	d103      	bne.n	8005d5a <vQueueWaitForMessageRestricted+0x2a>
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d60:	b25b      	sxtb	r3, r3
 8005d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d66:	d103      	bne.n	8005d70 <vQueueWaitForMessageRestricted+0x40>
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d70:	f001 fbe8 	bl	8007544 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d106      	bne.n	8005d8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	3324      	adds	r3, #36	; 0x24
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	68b9      	ldr	r1, [r7, #8]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 fc61 	bl	800664c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d8a:	6978      	ldr	r0, [r7, #20]
 8005d8c:	f7ff ff26 	bl	8005bdc <prvUnlockQueue>
	}
 8005d90:	bf00      	nop
 8005d92:	3718      	adds	r7, #24
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b08e      	sub	sp, #56	; 0x38
 8005d9c:	af04      	add	r7, sp, #16
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
 8005da4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	623b      	str	r3, [r7, #32]
}
 8005dbe:	bf00      	nop
 8005dc0:	e7fe      	b.n	8005dc0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10a      	bne.n	8005dde <xTaskCreateStatic+0x46>
	__asm volatile
 8005dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dcc:	f383 8811 	msr	BASEPRI, r3
 8005dd0:	f3bf 8f6f 	isb	sy
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	61fb      	str	r3, [r7, #28]
}
 8005dda:	bf00      	nop
 8005ddc:	e7fe      	b.n	8005ddc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005dde:	23bc      	movs	r3, #188	; 0xbc
 8005de0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	2bbc      	cmp	r3, #188	; 0xbc
 8005de6:	d00a      	beq.n	8005dfe <xTaskCreateStatic+0x66>
	__asm volatile
 8005de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	61bb      	str	r3, [r7, #24]
}
 8005dfa:	bf00      	nop
 8005dfc:	e7fe      	b.n	8005dfc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005dfe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d01e      	beq.n	8005e44 <xTaskCreateStatic+0xac>
 8005e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d01b      	beq.n	8005e44 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e18:	2202      	movs	r2, #2
 8005e1a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e1e:	2300      	movs	r3, #0
 8005e20:	9303      	str	r3, [sp, #12]
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	9302      	str	r3, [sp, #8]
 8005e26:	f107 0314 	add.w	r3, r7, #20
 8005e2a:	9301      	str	r3, [sp, #4]
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	68b9      	ldr	r1, [r7, #8]
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 f850 	bl	8005edc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e3e:	f000 f8f3 	bl	8006028 <prvAddNewTaskToReadyList>
 8005e42:	e001      	b.n	8005e48 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005e44:	2300      	movs	r3, #0
 8005e46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e48:	697b      	ldr	r3, [r7, #20]
	}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3728      	adds	r7, #40	; 0x28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b08c      	sub	sp, #48	; 0x30
 8005e56:	af04      	add	r7, sp, #16
 8005e58:	60f8      	str	r0, [r7, #12]
 8005e5a:	60b9      	str	r1, [r7, #8]
 8005e5c:	603b      	str	r3, [r7, #0]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e62:	88fb      	ldrh	r3, [r7, #6]
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4618      	mov	r0, r3
 8005e68:	f001 fc5e 	bl	8007728 <pvPortMalloc>
 8005e6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00e      	beq.n	8005e92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e74:	20bc      	movs	r0, #188	; 0xbc
 8005e76:	f001 fc57 	bl	8007728 <pvPortMalloc>
 8005e7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	631a      	str	r2, [r3, #48]	; 0x30
 8005e88:	e005      	b.n	8005e96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e8a:	6978      	ldr	r0, [r7, #20]
 8005e8c:	f001 fd18 	bl	80078c0 <vPortFree>
 8005e90:	e001      	b.n	8005e96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e92:	2300      	movs	r3, #0
 8005e94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d017      	beq.n	8005ecc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ea4:	88fa      	ldrh	r2, [r7, #6]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	9303      	str	r3, [sp, #12]
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	9302      	str	r3, [sp, #8]
 8005eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb0:	9301      	str	r3, [sp, #4]
 8005eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	68b9      	ldr	r1, [r7, #8]
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 f80e 	bl	8005edc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ec0:	69f8      	ldr	r0, [r7, #28]
 8005ec2:	f000 f8b1 	bl	8006028 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	61bb      	str	r3, [r7, #24]
 8005eca:	e002      	b.n	8005ed2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ed0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ed2:	69bb      	ldr	r3, [r7, #24]
	}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3720      	adds	r7, #32
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	21a5      	movs	r1, #165	; 0xa5
 8005ef6:	f001 fe35 	bl	8007b64 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f04:	3b01      	subs	r3, #1
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	f023 0307 	bic.w	r3, r3, #7
 8005f12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	f003 0307 	and.w	r3, r3, #7
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00a      	beq.n	8005f34 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f22:	f383 8811 	msr	BASEPRI, r3
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	617b      	str	r3, [r7, #20]
}
 8005f30:	bf00      	nop
 8005f32:	e7fe      	b.n	8005f32 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d01f      	beq.n	8005f7a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	61fb      	str	r3, [r7, #28]
 8005f3e:	e012      	b.n	8005f66 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	4413      	add	r3, r2
 8005f46:	7819      	ldrb	r1, [r3, #0]
 8005f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	3334      	adds	r3, #52	; 0x34
 8005f50:	460a      	mov	r2, r1
 8005f52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	4413      	add	r3, r2
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d006      	beq.n	8005f6e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	3301      	adds	r3, #1
 8005f64:	61fb      	str	r3, [r7, #28]
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	2b0f      	cmp	r3, #15
 8005f6a:	d9e9      	bls.n	8005f40 <prvInitialiseNewTask+0x64>
 8005f6c:	e000      	b.n	8005f70 <prvInitialiseNewTask+0x94>
			{
				break;
 8005f6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f78:	e003      	b.n	8005f82 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f84:	2b37      	cmp	r3, #55	; 0x37
 8005f86:	d901      	bls.n	8005f8c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f88:	2337      	movs	r3, #55	; 0x37
 8005f8a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f90:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f96:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7ff f978 	bl	8005298 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005faa:	3318      	adds	r3, #24
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7ff f973 	bl	8005298 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fb6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fc6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fda:	3354      	adds	r3, #84	; 0x54
 8005fdc:	2260      	movs	r2, #96	; 0x60
 8005fde:	2100      	movs	r1, #0
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f001 fdbf 	bl	8007b64 <memset>
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	4a0c      	ldr	r2, [pc, #48]	; (800601c <prvInitialiseNewTask+0x140>)
 8005fea:	659a      	str	r2, [r3, #88]	; 0x58
 8005fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fee:	4a0c      	ldr	r2, [pc, #48]	; (8006020 <prvInitialiseNewTask+0x144>)
 8005ff0:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff4:	4a0b      	ldr	r2, [pc, #44]	; (8006024 <prvInitialiseNewTask+0x148>)
 8005ff6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	68f9      	ldr	r1, [r7, #12]
 8005ffc:	69b8      	ldr	r0, [r7, #24]
 8005ffe:	f001 f941 	bl	8007284 <pxPortInitialiseStack>
 8006002:	4602      	mov	r2, r0
 8006004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006006:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600a:	2b00      	cmp	r3, #0
 800600c:	d002      	beq.n	8006014 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800600e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006012:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006014:	bf00      	nop
 8006016:	3720      	adds	r7, #32
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	08007df0 	.word	0x08007df0
 8006020:	08007e10 	.word	0x08007e10
 8006024:	08007dd0 	.word	0x08007dd0

08006028 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006030:	f001 fa58 	bl	80074e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006034:	4b2d      	ldr	r3, [pc, #180]	; (80060ec <prvAddNewTaskToReadyList+0xc4>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3301      	adds	r3, #1
 800603a:	4a2c      	ldr	r2, [pc, #176]	; (80060ec <prvAddNewTaskToReadyList+0xc4>)
 800603c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800603e:	4b2c      	ldr	r3, [pc, #176]	; (80060f0 <prvAddNewTaskToReadyList+0xc8>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d109      	bne.n	800605a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006046:	4a2a      	ldr	r2, [pc, #168]	; (80060f0 <prvAddNewTaskToReadyList+0xc8>)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800604c:	4b27      	ldr	r3, [pc, #156]	; (80060ec <prvAddNewTaskToReadyList+0xc4>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d110      	bne.n	8006076 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006054:	f000 fc26 	bl	80068a4 <prvInitialiseTaskLists>
 8006058:	e00d      	b.n	8006076 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800605a:	4b26      	ldr	r3, [pc, #152]	; (80060f4 <prvAddNewTaskToReadyList+0xcc>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d109      	bne.n	8006076 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006062:	4b23      	ldr	r3, [pc, #140]	; (80060f0 <prvAddNewTaskToReadyList+0xc8>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606c:	429a      	cmp	r2, r3
 800606e:	d802      	bhi.n	8006076 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006070:	4a1f      	ldr	r2, [pc, #124]	; (80060f0 <prvAddNewTaskToReadyList+0xc8>)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006076:	4b20      	ldr	r3, [pc, #128]	; (80060f8 <prvAddNewTaskToReadyList+0xd0>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3301      	adds	r3, #1
 800607c:	4a1e      	ldr	r2, [pc, #120]	; (80060f8 <prvAddNewTaskToReadyList+0xd0>)
 800607e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006080:	4b1d      	ldr	r3, [pc, #116]	; (80060f8 <prvAddNewTaskToReadyList+0xd0>)
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608c:	4b1b      	ldr	r3, [pc, #108]	; (80060fc <prvAddNewTaskToReadyList+0xd4>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	429a      	cmp	r2, r3
 8006092:	d903      	bls.n	800609c <prvAddNewTaskToReadyList+0x74>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	4a18      	ldr	r2, [pc, #96]	; (80060fc <prvAddNewTaskToReadyList+0xd4>)
 800609a:	6013      	str	r3, [r2, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a0:	4613      	mov	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4a15      	ldr	r2, [pc, #84]	; (8006100 <prvAddNewTaskToReadyList+0xd8>)
 80060aa:	441a      	add	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	3304      	adds	r3, #4
 80060b0:	4619      	mov	r1, r3
 80060b2:	4610      	mov	r0, r2
 80060b4:	f7ff f8fd 	bl	80052b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060b8:	f001 fa44 	bl	8007544 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060bc:	4b0d      	ldr	r3, [pc, #52]	; (80060f4 <prvAddNewTaskToReadyList+0xcc>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00e      	beq.n	80060e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060c4:	4b0a      	ldr	r3, [pc, #40]	; (80060f0 <prvAddNewTaskToReadyList+0xc8>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d207      	bcs.n	80060e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060d2:	4b0c      	ldr	r3, [pc, #48]	; (8006104 <prvAddNewTaskToReadyList+0xdc>)
 80060d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060e2:	bf00      	nop
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000e64 	.word	0x20000e64
 80060f0:	20000990 	.word	0x20000990
 80060f4:	20000e70 	.word	0x20000e70
 80060f8:	20000e80 	.word	0x20000e80
 80060fc:	20000e6c 	.word	0x20000e6c
 8006100:	20000994 	.word	0x20000994
 8006104:	e000ed04 	.word	0xe000ed04

08006108 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006110:	2300      	movs	r3, #0
 8006112:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d017      	beq.n	800614a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800611a:	4b13      	ldr	r3, [pc, #76]	; (8006168 <vTaskDelay+0x60>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00a      	beq.n	8006138 <vTaskDelay+0x30>
	__asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	60bb      	str	r3, [r7, #8]
}
 8006134:	bf00      	nop
 8006136:	e7fe      	b.n	8006136 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006138:	f000 f88a 	bl	8006250 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800613c:	2100      	movs	r1, #0
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fcfe 	bl	8006b40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006144:	f000 f892 	bl	800626c <xTaskResumeAll>
 8006148:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d107      	bne.n	8006160 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006150:	4b06      	ldr	r3, [pc, #24]	; (800616c <vTaskDelay+0x64>)
 8006152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006160:	bf00      	nop
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	20000e8c 	.word	0x20000e8c
 800616c:	e000ed04 	.word	0xe000ed04

08006170 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08a      	sub	sp, #40	; 0x28
 8006174:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006176:	2300      	movs	r3, #0
 8006178:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800617a:	2300      	movs	r3, #0
 800617c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800617e:	463a      	mov	r2, r7
 8006180:	1d39      	adds	r1, r7, #4
 8006182:	f107 0308 	add.w	r3, r7, #8
 8006186:	4618      	mov	r0, r3
 8006188:	f7ff f832 	bl	80051f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800618c:	6839      	ldr	r1, [r7, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	9202      	str	r2, [sp, #8]
 8006194:	9301      	str	r3, [sp, #4]
 8006196:	2300      	movs	r3, #0
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	2300      	movs	r3, #0
 800619c:	460a      	mov	r2, r1
 800619e:	4924      	ldr	r1, [pc, #144]	; (8006230 <vTaskStartScheduler+0xc0>)
 80061a0:	4824      	ldr	r0, [pc, #144]	; (8006234 <vTaskStartScheduler+0xc4>)
 80061a2:	f7ff fdf9 	bl	8005d98 <xTaskCreateStatic>
 80061a6:	4603      	mov	r3, r0
 80061a8:	4a23      	ldr	r2, [pc, #140]	; (8006238 <vTaskStartScheduler+0xc8>)
 80061aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80061ac:	4b22      	ldr	r3, [pc, #136]	; (8006238 <vTaskStartScheduler+0xc8>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061b4:	2301      	movs	r3, #1
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	e001      	b.n	80061be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061ba:	2300      	movs	r3, #0
 80061bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d102      	bne.n	80061ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80061c4:	f000 fd10 	bl	8006be8 <xTimerCreateTimerTask>
 80061c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d11b      	bne.n	8006208 <vTaskStartScheduler+0x98>
	__asm volatile
 80061d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	613b      	str	r3, [r7, #16]
}
 80061e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061e4:	4b15      	ldr	r3, [pc, #84]	; (800623c <vTaskStartScheduler+0xcc>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3354      	adds	r3, #84	; 0x54
 80061ea:	4a15      	ldr	r2, [pc, #84]	; (8006240 <vTaskStartScheduler+0xd0>)
 80061ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061ee:	4b15      	ldr	r3, [pc, #84]	; (8006244 <vTaskStartScheduler+0xd4>)
 80061f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061f6:	4b14      	ldr	r3, [pc, #80]	; (8006248 <vTaskStartScheduler+0xd8>)
 80061f8:	2201      	movs	r2, #1
 80061fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80061fc:	4b13      	ldr	r3, [pc, #76]	; (800624c <vTaskStartScheduler+0xdc>)
 80061fe:	2200      	movs	r2, #0
 8006200:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006202:	f001 f8cd 	bl	80073a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006206:	e00e      	b.n	8006226 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800620e:	d10a      	bne.n	8006226 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	60fb      	str	r3, [r7, #12]
}
 8006222:	bf00      	nop
 8006224:	e7fe      	b.n	8006224 <vTaskStartScheduler+0xb4>
}
 8006226:	bf00      	nop
 8006228:	3718      	adds	r7, #24
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	08007d28 	.word	0x08007d28
 8006234:	08006875 	.word	0x08006875
 8006238:	20000e88 	.word	0x20000e88
 800623c:	20000990 	.word	0x20000990
 8006240:	20000010 	.word	0x20000010
 8006244:	20000e84 	.word	0x20000e84
 8006248:	20000e70 	.word	0x20000e70
 800624c:	20000e68 	.word	0x20000e68

08006250 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006250:	b480      	push	{r7}
 8006252:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006254:	4b04      	ldr	r3, [pc, #16]	; (8006268 <vTaskSuspendAll+0x18>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	3301      	adds	r3, #1
 800625a:	4a03      	ldr	r2, [pc, #12]	; (8006268 <vTaskSuspendAll+0x18>)
 800625c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800625e:	bf00      	nop
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	20000e8c 	.word	0x20000e8c

0800626c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006272:	2300      	movs	r3, #0
 8006274:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006276:	2300      	movs	r3, #0
 8006278:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800627a:	4b42      	ldr	r3, [pc, #264]	; (8006384 <xTaskResumeAll+0x118>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10a      	bne.n	8006298 <xTaskResumeAll+0x2c>
	__asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	603b      	str	r3, [r7, #0]
}
 8006294:	bf00      	nop
 8006296:	e7fe      	b.n	8006296 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006298:	f001 f924 	bl	80074e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800629c:	4b39      	ldr	r3, [pc, #228]	; (8006384 <xTaskResumeAll+0x118>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3b01      	subs	r3, #1
 80062a2:	4a38      	ldr	r2, [pc, #224]	; (8006384 <xTaskResumeAll+0x118>)
 80062a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062a6:	4b37      	ldr	r3, [pc, #220]	; (8006384 <xTaskResumeAll+0x118>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d162      	bne.n	8006374 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062ae:	4b36      	ldr	r3, [pc, #216]	; (8006388 <xTaskResumeAll+0x11c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d05e      	beq.n	8006374 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062b6:	e02f      	b.n	8006318 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062b8:	4b34      	ldr	r3, [pc, #208]	; (800638c <xTaskResumeAll+0x120>)
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	3318      	adds	r3, #24
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7ff f851 	bl	800536c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	3304      	adds	r3, #4
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff f84c 	bl	800536c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d8:	4b2d      	ldr	r3, [pc, #180]	; (8006390 <xTaskResumeAll+0x124>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d903      	bls.n	80062e8 <xTaskResumeAll+0x7c>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	4a2a      	ldr	r2, [pc, #168]	; (8006390 <xTaskResumeAll+0x124>)
 80062e6:	6013      	str	r3, [r2, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ec:	4613      	mov	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4a27      	ldr	r2, [pc, #156]	; (8006394 <xTaskResumeAll+0x128>)
 80062f6:	441a      	add	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	3304      	adds	r3, #4
 80062fc:	4619      	mov	r1, r3
 80062fe:	4610      	mov	r0, r2
 8006300:	f7fe ffd7 	bl	80052b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006308:	4b23      	ldr	r3, [pc, #140]	; (8006398 <xTaskResumeAll+0x12c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630e:	429a      	cmp	r2, r3
 8006310:	d302      	bcc.n	8006318 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006312:	4b22      	ldr	r3, [pc, #136]	; (800639c <xTaskResumeAll+0x130>)
 8006314:	2201      	movs	r2, #1
 8006316:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006318:	4b1c      	ldr	r3, [pc, #112]	; (800638c <xTaskResumeAll+0x120>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1cb      	bne.n	80062b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006326:	f000 fb5f 	bl	80069e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800632a:	4b1d      	ldr	r3, [pc, #116]	; (80063a0 <xTaskResumeAll+0x134>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d010      	beq.n	8006358 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006336:	f000 f847 	bl	80063c8 <xTaskIncrementTick>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006340:	4b16      	ldr	r3, [pc, #88]	; (800639c <xTaskResumeAll+0x130>)
 8006342:	2201      	movs	r2, #1
 8006344:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	3b01      	subs	r3, #1
 800634a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1f1      	bne.n	8006336 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006352:	4b13      	ldr	r3, [pc, #76]	; (80063a0 <xTaskResumeAll+0x134>)
 8006354:	2200      	movs	r2, #0
 8006356:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006358:	4b10      	ldr	r3, [pc, #64]	; (800639c <xTaskResumeAll+0x130>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d009      	beq.n	8006374 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006360:	2301      	movs	r3, #1
 8006362:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006364:	4b0f      	ldr	r3, [pc, #60]	; (80063a4 <xTaskResumeAll+0x138>)
 8006366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006374:	f001 f8e6 	bl	8007544 <vPortExitCritical>

	return xAlreadyYielded;
 8006378:	68bb      	ldr	r3, [r7, #8]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20000e8c 	.word	0x20000e8c
 8006388:	20000e64 	.word	0x20000e64
 800638c:	20000e24 	.word	0x20000e24
 8006390:	20000e6c 	.word	0x20000e6c
 8006394:	20000994 	.word	0x20000994
 8006398:	20000990 	.word	0x20000990
 800639c:	20000e78 	.word	0x20000e78
 80063a0:	20000e74 	.word	0x20000e74
 80063a4:	e000ed04 	.word	0xe000ed04

080063a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80063ae:	4b05      	ldr	r3, [pc, #20]	; (80063c4 <xTaskGetTickCount+0x1c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80063b4:	687b      	ldr	r3, [r7, #4]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	20000e68 	.word	0x20000e68

080063c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063ce:	2300      	movs	r3, #0
 80063d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063d2:	4b4f      	ldr	r3, [pc, #316]	; (8006510 <xTaskIncrementTick+0x148>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f040 808f 	bne.w	80064fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80063dc:	4b4d      	ldr	r3, [pc, #308]	; (8006514 <xTaskIncrementTick+0x14c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3301      	adds	r3, #1
 80063e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063e4:	4a4b      	ldr	r2, [pc, #300]	; (8006514 <xTaskIncrementTick+0x14c>)
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d120      	bne.n	8006432 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80063f0:	4b49      	ldr	r3, [pc, #292]	; (8006518 <xTaskIncrementTick+0x150>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00a      	beq.n	8006410 <xTaskIncrementTick+0x48>
	__asm volatile
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	603b      	str	r3, [r7, #0]
}
 800640c:	bf00      	nop
 800640e:	e7fe      	b.n	800640e <xTaskIncrementTick+0x46>
 8006410:	4b41      	ldr	r3, [pc, #260]	; (8006518 <xTaskIncrementTick+0x150>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	60fb      	str	r3, [r7, #12]
 8006416:	4b41      	ldr	r3, [pc, #260]	; (800651c <xTaskIncrementTick+0x154>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a3f      	ldr	r2, [pc, #252]	; (8006518 <xTaskIncrementTick+0x150>)
 800641c:	6013      	str	r3, [r2, #0]
 800641e:	4a3f      	ldr	r2, [pc, #252]	; (800651c <xTaskIncrementTick+0x154>)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6013      	str	r3, [r2, #0]
 8006424:	4b3e      	ldr	r3, [pc, #248]	; (8006520 <xTaskIncrementTick+0x158>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3301      	adds	r3, #1
 800642a:	4a3d      	ldr	r2, [pc, #244]	; (8006520 <xTaskIncrementTick+0x158>)
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	f000 fadb 	bl	80069e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006432:	4b3c      	ldr	r3, [pc, #240]	; (8006524 <xTaskIncrementTick+0x15c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	429a      	cmp	r2, r3
 800643a:	d349      	bcc.n	80064d0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800643c:	4b36      	ldr	r3, [pc, #216]	; (8006518 <xTaskIncrementTick+0x150>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d104      	bne.n	8006450 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006446:	4b37      	ldr	r3, [pc, #220]	; (8006524 <xTaskIncrementTick+0x15c>)
 8006448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800644c:	601a      	str	r2, [r3, #0]
					break;
 800644e:	e03f      	b.n	80064d0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006450:	4b31      	ldr	r3, [pc, #196]	; (8006518 <xTaskIncrementTick+0x150>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	429a      	cmp	r2, r3
 8006466:	d203      	bcs.n	8006470 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006468:	4a2e      	ldr	r2, [pc, #184]	; (8006524 <xTaskIncrementTick+0x15c>)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800646e:	e02f      	b.n	80064d0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	3304      	adds	r3, #4
 8006474:	4618      	mov	r0, r3
 8006476:	f7fe ff79 	bl	800536c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647e:	2b00      	cmp	r3, #0
 8006480:	d004      	beq.n	800648c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	3318      	adds	r3, #24
 8006486:	4618      	mov	r0, r3
 8006488:	f7fe ff70 	bl	800536c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006490:	4b25      	ldr	r3, [pc, #148]	; (8006528 <xTaskIncrementTick+0x160>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	429a      	cmp	r2, r3
 8006496:	d903      	bls.n	80064a0 <xTaskIncrementTick+0xd8>
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649c:	4a22      	ldr	r2, [pc, #136]	; (8006528 <xTaskIncrementTick+0x160>)
 800649e:	6013      	str	r3, [r2, #0]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a4:	4613      	mov	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4a1f      	ldr	r2, [pc, #124]	; (800652c <xTaskIncrementTick+0x164>)
 80064ae:	441a      	add	r2, r3
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	3304      	adds	r3, #4
 80064b4:	4619      	mov	r1, r3
 80064b6:	4610      	mov	r0, r2
 80064b8:	f7fe fefb 	bl	80052b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c0:	4b1b      	ldr	r3, [pc, #108]	; (8006530 <xTaskIncrementTick+0x168>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d3b8      	bcc.n	800643c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80064ca:	2301      	movs	r3, #1
 80064cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064ce:	e7b5      	b.n	800643c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064d0:	4b17      	ldr	r3, [pc, #92]	; (8006530 <xTaskIncrementTick+0x168>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d6:	4915      	ldr	r1, [pc, #84]	; (800652c <xTaskIncrementTick+0x164>)
 80064d8:	4613      	mov	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	440b      	add	r3, r1
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d901      	bls.n	80064ec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80064e8:	2301      	movs	r3, #1
 80064ea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80064ec:	4b11      	ldr	r3, [pc, #68]	; (8006534 <xTaskIncrementTick+0x16c>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d007      	beq.n	8006504 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80064f4:	2301      	movs	r3, #1
 80064f6:	617b      	str	r3, [r7, #20]
 80064f8:	e004      	b.n	8006504 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80064fa:	4b0f      	ldr	r3, [pc, #60]	; (8006538 <xTaskIncrementTick+0x170>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3301      	adds	r3, #1
 8006500:	4a0d      	ldr	r2, [pc, #52]	; (8006538 <xTaskIncrementTick+0x170>)
 8006502:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006504:	697b      	ldr	r3, [r7, #20]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3718      	adds	r7, #24
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	20000e8c 	.word	0x20000e8c
 8006514:	20000e68 	.word	0x20000e68
 8006518:	20000e1c 	.word	0x20000e1c
 800651c:	20000e20 	.word	0x20000e20
 8006520:	20000e7c 	.word	0x20000e7c
 8006524:	20000e84 	.word	0x20000e84
 8006528:	20000e6c 	.word	0x20000e6c
 800652c:	20000994 	.word	0x20000994
 8006530:	20000990 	.word	0x20000990
 8006534:	20000e78 	.word	0x20000e78
 8006538:	20000e74 	.word	0x20000e74

0800653c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006542:	4b2a      	ldr	r3, [pc, #168]	; (80065ec <vTaskSwitchContext+0xb0>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800654a:	4b29      	ldr	r3, [pc, #164]	; (80065f0 <vTaskSwitchContext+0xb4>)
 800654c:	2201      	movs	r2, #1
 800654e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006550:	e046      	b.n	80065e0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006552:	4b27      	ldr	r3, [pc, #156]	; (80065f0 <vTaskSwitchContext+0xb4>)
 8006554:	2200      	movs	r2, #0
 8006556:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006558:	4b26      	ldr	r3, [pc, #152]	; (80065f4 <vTaskSwitchContext+0xb8>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	60fb      	str	r3, [r7, #12]
 800655e:	e010      	b.n	8006582 <vTaskSwitchContext+0x46>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10a      	bne.n	800657c <vTaskSwitchContext+0x40>
	__asm volatile
 8006566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	607b      	str	r3, [r7, #4]
}
 8006578:	bf00      	nop
 800657a:	e7fe      	b.n	800657a <vTaskSwitchContext+0x3e>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	3b01      	subs	r3, #1
 8006580:	60fb      	str	r3, [r7, #12]
 8006582:	491d      	ldr	r1, [pc, #116]	; (80065f8 <vTaskSwitchContext+0xbc>)
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4613      	mov	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	440b      	add	r3, r1
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d0e4      	beq.n	8006560 <vTaskSwitchContext+0x24>
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4613      	mov	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4a15      	ldr	r2, [pc, #84]	; (80065f8 <vTaskSwitchContext+0xbc>)
 80065a2:	4413      	add	r3, r2
 80065a4:	60bb      	str	r3, [r7, #8]
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	605a      	str	r2, [r3, #4]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	3308      	adds	r3, #8
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d104      	bne.n	80065c6 <vTaskSwitchContext+0x8a>
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	605a      	str	r2, [r3, #4]
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	4a0b      	ldr	r2, [pc, #44]	; (80065fc <vTaskSwitchContext+0xc0>)
 80065ce:	6013      	str	r3, [r2, #0]
 80065d0:	4a08      	ldr	r2, [pc, #32]	; (80065f4 <vTaskSwitchContext+0xb8>)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065d6:	4b09      	ldr	r3, [pc, #36]	; (80065fc <vTaskSwitchContext+0xc0>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3354      	adds	r3, #84	; 0x54
 80065dc:	4a08      	ldr	r2, [pc, #32]	; (8006600 <vTaskSwitchContext+0xc4>)
 80065de:	6013      	str	r3, [r2, #0]
}
 80065e0:	bf00      	nop
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	20000e8c 	.word	0x20000e8c
 80065f0:	20000e78 	.word	0x20000e78
 80065f4:	20000e6c 	.word	0x20000e6c
 80065f8:	20000994 	.word	0x20000994
 80065fc:	20000990 	.word	0x20000990
 8006600:	20000010 	.word	0x20000010

08006604 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10a      	bne.n	800662a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006618:	f383 8811 	msr	BASEPRI, r3
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	60fb      	str	r3, [r7, #12]
}
 8006626:	bf00      	nop
 8006628:	e7fe      	b.n	8006628 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800662a:	4b07      	ldr	r3, [pc, #28]	; (8006648 <vTaskPlaceOnEventList+0x44>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3318      	adds	r3, #24
 8006630:	4619      	mov	r1, r3
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7fe fe61 	bl	80052fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006638:	2101      	movs	r1, #1
 800663a:	6838      	ldr	r0, [r7, #0]
 800663c:	f000 fa80 	bl	8006b40 <prvAddCurrentTaskToDelayedList>
}
 8006640:	bf00      	nop
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	20000990 	.word	0x20000990

0800664c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10a      	bne.n	8006674 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	617b      	str	r3, [r7, #20]
}
 8006670:	bf00      	nop
 8006672:	e7fe      	b.n	8006672 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006674:	4b0a      	ldr	r3, [pc, #40]	; (80066a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3318      	adds	r3, #24
 800667a:	4619      	mov	r1, r3
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f7fe fe18 	bl	80052b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800668c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800668e:	6879      	ldr	r1, [r7, #4]
 8006690:	68b8      	ldr	r0, [r7, #8]
 8006692:	f000 fa55 	bl	8006b40 <prvAddCurrentTaskToDelayedList>
	}
 8006696:	bf00      	nop
 8006698:	3718      	adds	r7, #24
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	20000990 	.word	0x20000990

080066a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10a      	bne.n	80066d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80066ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066be:	f383 8811 	msr	BASEPRI, r3
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	60fb      	str	r3, [r7, #12]
}
 80066cc:	bf00      	nop
 80066ce:	e7fe      	b.n	80066ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	3318      	adds	r3, #24
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7fe fe49 	bl	800536c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066da:	4b1e      	ldr	r3, [pc, #120]	; (8006754 <xTaskRemoveFromEventList+0xb0>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d11d      	bne.n	800671e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	3304      	adds	r3, #4
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fe fe40 	bl	800536c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f0:	4b19      	ldr	r3, [pc, #100]	; (8006758 <xTaskRemoveFromEventList+0xb4>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d903      	bls.n	8006700 <xTaskRemoveFromEventList+0x5c>
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fc:	4a16      	ldr	r2, [pc, #88]	; (8006758 <xTaskRemoveFromEventList+0xb4>)
 80066fe:	6013      	str	r3, [r2, #0]
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006704:	4613      	mov	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4a13      	ldr	r2, [pc, #76]	; (800675c <xTaskRemoveFromEventList+0xb8>)
 800670e:	441a      	add	r2, r3
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	3304      	adds	r3, #4
 8006714:	4619      	mov	r1, r3
 8006716:	4610      	mov	r0, r2
 8006718:	f7fe fdcb 	bl	80052b2 <vListInsertEnd>
 800671c:	e005      	b.n	800672a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	3318      	adds	r3, #24
 8006722:	4619      	mov	r1, r3
 8006724:	480e      	ldr	r0, [pc, #56]	; (8006760 <xTaskRemoveFromEventList+0xbc>)
 8006726:	f7fe fdc4 	bl	80052b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800672e:	4b0d      	ldr	r3, [pc, #52]	; (8006764 <xTaskRemoveFromEventList+0xc0>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	429a      	cmp	r2, r3
 8006736:	d905      	bls.n	8006744 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006738:	2301      	movs	r3, #1
 800673a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800673c:	4b0a      	ldr	r3, [pc, #40]	; (8006768 <xTaskRemoveFromEventList+0xc4>)
 800673e:	2201      	movs	r2, #1
 8006740:	601a      	str	r2, [r3, #0]
 8006742:	e001      	b.n	8006748 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006744:	2300      	movs	r3, #0
 8006746:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006748:	697b      	ldr	r3, [r7, #20]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	20000e8c 	.word	0x20000e8c
 8006758:	20000e6c 	.word	0x20000e6c
 800675c:	20000994 	.word	0x20000994
 8006760:	20000e24 	.word	0x20000e24
 8006764:	20000990 	.word	0x20000990
 8006768:	20000e78 	.word	0x20000e78

0800676c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006774:	4b06      	ldr	r3, [pc, #24]	; (8006790 <vTaskInternalSetTimeOutState+0x24>)
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800677c:	4b05      	ldr	r3, [pc, #20]	; (8006794 <vTaskInternalSetTimeOutState+0x28>)
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	605a      	str	r2, [r3, #4]
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	20000e7c 	.word	0x20000e7c
 8006794:	20000e68 	.word	0x20000e68

08006798 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b088      	sub	sp, #32
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10a      	bne.n	80067be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80067a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	613b      	str	r3, [r7, #16]
}
 80067ba:	bf00      	nop
 80067bc:	e7fe      	b.n	80067bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10a      	bne.n	80067da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	60fb      	str	r3, [r7, #12]
}
 80067d6:	bf00      	nop
 80067d8:	e7fe      	b.n	80067d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80067da:	f000 fe83 	bl	80074e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80067de:	4b1d      	ldr	r3, [pc, #116]	; (8006854 <xTaskCheckForTimeOut+0xbc>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	69ba      	ldr	r2, [r7, #24]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067f6:	d102      	bne.n	80067fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80067f8:	2300      	movs	r3, #0
 80067fa:	61fb      	str	r3, [r7, #28]
 80067fc:	e023      	b.n	8006846 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	4b15      	ldr	r3, [pc, #84]	; (8006858 <xTaskCheckForTimeOut+0xc0>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	429a      	cmp	r2, r3
 8006808:	d007      	beq.n	800681a <xTaskCheckForTimeOut+0x82>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	69ba      	ldr	r2, [r7, #24]
 8006810:	429a      	cmp	r2, r3
 8006812:	d302      	bcc.n	800681a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006814:	2301      	movs	r3, #1
 8006816:	61fb      	str	r3, [r7, #28]
 8006818:	e015      	b.n	8006846 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	429a      	cmp	r2, r3
 8006822:	d20b      	bcs.n	800683c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	1ad2      	subs	r2, r2, r3
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7ff ff9b 	bl	800676c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006836:	2300      	movs	r3, #0
 8006838:	61fb      	str	r3, [r7, #28]
 800683a:	e004      	b.n	8006846 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	2200      	movs	r2, #0
 8006840:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006842:	2301      	movs	r3, #1
 8006844:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006846:	f000 fe7d 	bl	8007544 <vPortExitCritical>

	return xReturn;
 800684a:	69fb      	ldr	r3, [r7, #28]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3720      	adds	r7, #32
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	20000e68 	.word	0x20000e68
 8006858:	20000e7c 	.word	0x20000e7c

0800685c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800685c:	b480      	push	{r7}
 800685e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006860:	4b03      	ldr	r3, [pc, #12]	; (8006870 <vTaskMissedYield+0x14>)
 8006862:	2201      	movs	r2, #1
 8006864:	601a      	str	r2, [r3, #0]
}
 8006866:	bf00      	nop
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	20000e78 	.word	0x20000e78

08006874 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800687c:	f000 f852 	bl	8006924 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006880:	4b06      	ldr	r3, [pc, #24]	; (800689c <prvIdleTask+0x28>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d9f9      	bls.n	800687c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006888:	4b05      	ldr	r3, [pc, #20]	; (80068a0 <prvIdleTask+0x2c>)
 800688a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006898:	e7f0      	b.n	800687c <prvIdleTask+0x8>
 800689a:	bf00      	nop
 800689c:	20000994 	.word	0x20000994
 80068a0:	e000ed04 	.word	0xe000ed04

080068a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068aa:	2300      	movs	r3, #0
 80068ac:	607b      	str	r3, [r7, #4]
 80068ae:	e00c      	b.n	80068ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	4613      	mov	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	4413      	add	r3, r2
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	4a12      	ldr	r2, [pc, #72]	; (8006904 <prvInitialiseTaskLists+0x60>)
 80068bc:	4413      	add	r3, r2
 80068be:	4618      	mov	r0, r3
 80068c0:	f7fe fcca 	bl	8005258 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	3301      	adds	r3, #1
 80068c8:	607b      	str	r3, [r7, #4]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b37      	cmp	r3, #55	; 0x37
 80068ce:	d9ef      	bls.n	80068b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80068d0:	480d      	ldr	r0, [pc, #52]	; (8006908 <prvInitialiseTaskLists+0x64>)
 80068d2:	f7fe fcc1 	bl	8005258 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068d6:	480d      	ldr	r0, [pc, #52]	; (800690c <prvInitialiseTaskLists+0x68>)
 80068d8:	f7fe fcbe 	bl	8005258 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068dc:	480c      	ldr	r0, [pc, #48]	; (8006910 <prvInitialiseTaskLists+0x6c>)
 80068de:	f7fe fcbb 	bl	8005258 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068e2:	480c      	ldr	r0, [pc, #48]	; (8006914 <prvInitialiseTaskLists+0x70>)
 80068e4:	f7fe fcb8 	bl	8005258 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068e8:	480b      	ldr	r0, [pc, #44]	; (8006918 <prvInitialiseTaskLists+0x74>)
 80068ea:	f7fe fcb5 	bl	8005258 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068ee:	4b0b      	ldr	r3, [pc, #44]	; (800691c <prvInitialiseTaskLists+0x78>)
 80068f0:	4a05      	ldr	r2, [pc, #20]	; (8006908 <prvInitialiseTaskLists+0x64>)
 80068f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068f4:	4b0a      	ldr	r3, [pc, #40]	; (8006920 <prvInitialiseTaskLists+0x7c>)
 80068f6:	4a05      	ldr	r2, [pc, #20]	; (800690c <prvInitialiseTaskLists+0x68>)
 80068f8:	601a      	str	r2, [r3, #0]
}
 80068fa:	bf00      	nop
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	20000994 	.word	0x20000994
 8006908:	20000df4 	.word	0x20000df4
 800690c:	20000e08 	.word	0x20000e08
 8006910:	20000e24 	.word	0x20000e24
 8006914:	20000e38 	.word	0x20000e38
 8006918:	20000e50 	.word	0x20000e50
 800691c:	20000e1c 	.word	0x20000e1c
 8006920:	20000e20 	.word	0x20000e20

08006924 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800692a:	e019      	b.n	8006960 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800692c:	f000 fdda 	bl	80074e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006930:	4b10      	ldr	r3, [pc, #64]	; (8006974 <prvCheckTasksWaitingTermination+0x50>)
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	3304      	adds	r3, #4
 800693c:	4618      	mov	r0, r3
 800693e:	f7fe fd15 	bl	800536c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006942:	4b0d      	ldr	r3, [pc, #52]	; (8006978 <prvCheckTasksWaitingTermination+0x54>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	3b01      	subs	r3, #1
 8006948:	4a0b      	ldr	r2, [pc, #44]	; (8006978 <prvCheckTasksWaitingTermination+0x54>)
 800694a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800694c:	4b0b      	ldr	r3, [pc, #44]	; (800697c <prvCheckTasksWaitingTermination+0x58>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	3b01      	subs	r3, #1
 8006952:	4a0a      	ldr	r2, [pc, #40]	; (800697c <prvCheckTasksWaitingTermination+0x58>)
 8006954:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006956:	f000 fdf5 	bl	8007544 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f810 	bl	8006980 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006960:	4b06      	ldr	r3, [pc, #24]	; (800697c <prvCheckTasksWaitingTermination+0x58>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1e1      	bne.n	800692c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006968:	bf00      	nop
 800696a:	bf00      	nop
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20000e38 	.word	0x20000e38
 8006978:	20000e64 	.word	0x20000e64
 800697c:	20000e4c 	.word	0x20000e4c

08006980 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	3354      	adds	r3, #84	; 0x54
 800698c:	4618      	mov	r0, r3
 800698e:	f001 f8ff 	bl	8007b90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006998:	2b00      	cmp	r3, #0
 800699a:	d108      	bne.n	80069ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 ff8d 	bl	80078c0 <vPortFree>
				vPortFree( pxTCB );
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 ff8a 	bl	80078c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80069ac:	e018      	b.n	80069e0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d103      	bne.n	80069c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 ff81 	bl	80078c0 <vPortFree>
	}
 80069be:	e00f      	b.n	80069e0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d00a      	beq.n	80069e0 <prvDeleteTCB+0x60>
	__asm volatile
 80069ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	60fb      	str	r3, [r7, #12]
}
 80069dc:	bf00      	nop
 80069de:	e7fe      	b.n	80069de <prvDeleteTCB+0x5e>
	}
 80069e0:	bf00      	nop
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069ee:	4b0c      	ldr	r3, [pc, #48]	; (8006a20 <prvResetNextTaskUnblockTime+0x38>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d104      	bne.n	8006a02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069f8:	4b0a      	ldr	r3, [pc, #40]	; (8006a24 <prvResetNextTaskUnblockTime+0x3c>)
 80069fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a00:	e008      	b.n	8006a14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a02:	4b07      	ldr	r3, [pc, #28]	; (8006a20 <prvResetNextTaskUnblockTime+0x38>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	4a04      	ldr	r2, [pc, #16]	; (8006a24 <prvResetNextTaskUnblockTime+0x3c>)
 8006a12:	6013      	str	r3, [r2, #0]
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	20000e1c 	.word	0x20000e1c
 8006a24:	20000e84 	.word	0x20000e84

08006a28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a2e:	4b0b      	ldr	r3, [pc, #44]	; (8006a5c <xTaskGetSchedulerState+0x34>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d102      	bne.n	8006a3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a36:	2301      	movs	r3, #1
 8006a38:	607b      	str	r3, [r7, #4]
 8006a3a:	e008      	b.n	8006a4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a3c:	4b08      	ldr	r3, [pc, #32]	; (8006a60 <xTaskGetSchedulerState+0x38>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d102      	bne.n	8006a4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a44:	2302      	movs	r3, #2
 8006a46:	607b      	str	r3, [r7, #4]
 8006a48:	e001      	b.n	8006a4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a4e:	687b      	ldr	r3, [r7, #4]
	}
 8006a50:	4618      	mov	r0, r3
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr
 8006a5c:	20000e70 	.word	0x20000e70
 8006a60:	20000e8c 	.word	0x20000e8c

08006a64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a70:	2300      	movs	r3, #0
 8006a72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d056      	beq.n	8006b28 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a7a:	4b2e      	ldr	r3, [pc, #184]	; (8006b34 <xTaskPriorityDisinherit+0xd0>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d00a      	beq.n	8006a9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	60fb      	str	r3, [r7, #12]
}
 8006a96:	bf00      	nop
 8006a98:	e7fe      	b.n	8006a98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10a      	bne.n	8006ab8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	60bb      	str	r3, [r7, #8]
}
 8006ab4:	bf00      	nop
 8006ab6:	e7fe      	b.n	8006ab6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006abc:	1e5a      	subs	r2, r3, #1
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d02c      	beq.n	8006b28 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d128      	bne.n	8006b28 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	3304      	adds	r3, #4
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7fe fc46 	bl	800536c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af8:	4b0f      	ldr	r3, [pc, #60]	; (8006b38 <xTaskPriorityDisinherit+0xd4>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d903      	bls.n	8006b08 <xTaskPriorityDisinherit+0xa4>
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b04:	4a0c      	ldr	r2, [pc, #48]	; (8006b38 <xTaskPriorityDisinherit+0xd4>)
 8006b06:	6013      	str	r3, [r2, #0]
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4a09      	ldr	r2, [pc, #36]	; (8006b3c <xTaskPriorityDisinherit+0xd8>)
 8006b16:	441a      	add	r2, r3
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	4610      	mov	r0, r2
 8006b20:	f7fe fbc7 	bl	80052b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b24:	2301      	movs	r3, #1
 8006b26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b28:	697b      	ldr	r3, [r7, #20]
	}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3718      	adds	r7, #24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	20000990 	.word	0x20000990
 8006b38:	20000e6c 	.word	0x20000e6c
 8006b3c:	20000994 	.word	0x20000994

08006b40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b4a:	4b21      	ldr	r3, [pc, #132]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0x90>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b50:	4b20      	ldr	r3, [pc, #128]	; (8006bd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3304      	adds	r3, #4
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7fe fc08 	bl	800536c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b62:	d10a      	bne.n	8006b7a <prvAddCurrentTaskToDelayedList+0x3a>
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d007      	beq.n	8006b7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b6a:	4b1a      	ldr	r3, [pc, #104]	; (8006bd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3304      	adds	r3, #4
 8006b70:	4619      	mov	r1, r3
 8006b72:	4819      	ldr	r0, [pc, #100]	; (8006bd8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006b74:	f7fe fb9d 	bl	80052b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b78:	e026      	b.n	8006bc8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4413      	add	r3, r2
 8006b80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b82:	4b14      	ldr	r3, [pc, #80]	; (8006bd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d209      	bcs.n	8006ba6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b92:	4b12      	ldr	r3, [pc, #72]	; (8006bdc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	4b0f      	ldr	r3, [pc, #60]	; (8006bd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4610      	mov	r0, r2
 8006ba0:	f7fe fbab 	bl	80052fa <vListInsert>
}
 8006ba4:	e010      	b.n	8006bc8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ba6:	4b0e      	ldr	r3, [pc, #56]	; (8006be0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	4b0a      	ldr	r3, [pc, #40]	; (8006bd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	3304      	adds	r3, #4
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	4610      	mov	r0, r2
 8006bb4:	f7fe fba1 	bl	80052fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006bb8:	4b0a      	ldr	r3, [pc, #40]	; (8006be4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d202      	bcs.n	8006bc8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006bc2:	4a08      	ldr	r2, [pc, #32]	; (8006be4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	6013      	str	r3, [r2, #0]
}
 8006bc8:	bf00      	nop
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	20000e68 	.word	0x20000e68
 8006bd4:	20000990 	.word	0x20000990
 8006bd8:	20000e50 	.word	0x20000e50
 8006bdc:	20000e20 	.word	0x20000e20
 8006be0:	20000e1c 	.word	0x20000e1c
 8006be4:	20000e84 	.word	0x20000e84

08006be8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08a      	sub	sp, #40	; 0x28
 8006bec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006bf2:	f000 fb07 	bl	8007204 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006bf6:	4b1c      	ldr	r3, [pc, #112]	; (8006c68 <xTimerCreateTimerTask+0x80>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d021      	beq.n	8006c42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c02:	2300      	movs	r3, #0
 8006c04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c06:	1d3a      	adds	r2, r7, #4
 8006c08:	f107 0108 	add.w	r1, r7, #8
 8006c0c:	f107 030c 	add.w	r3, r7, #12
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7fe fb07 	bl	8005224 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c16:	6879      	ldr	r1, [r7, #4]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	9202      	str	r2, [sp, #8]
 8006c1e:	9301      	str	r3, [sp, #4]
 8006c20:	2302      	movs	r3, #2
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	2300      	movs	r3, #0
 8006c26:	460a      	mov	r2, r1
 8006c28:	4910      	ldr	r1, [pc, #64]	; (8006c6c <xTimerCreateTimerTask+0x84>)
 8006c2a:	4811      	ldr	r0, [pc, #68]	; (8006c70 <xTimerCreateTimerTask+0x88>)
 8006c2c:	f7ff f8b4 	bl	8005d98 <xTaskCreateStatic>
 8006c30:	4603      	mov	r3, r0
 8006c32:	4a10      	ldr	r2, [pc, #64]	; (8006c74 <xTimerCreateTimerTask+0x8c>)
 8006c34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006c36:	4b0f      	ldr	r3, [pc, #60]	; (8006c74 <xTimerCreateTimerTask+0x8c>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10a      	bne.n	8006c5e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4c:	f383 8811 	msr	BASEPRI, r3
 8006c50:	f3bf 8f6f 	isb	sy
 8006c54:	f3bf 8f4f 	dsb	sy
 8006c58:	613b      	str	r3, [r7, #16]
}
 8006c5a:	bf00      	nop
 8006c5c:	e7fe      	b.n	8006c5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006c5e:	697b      	ldr	r3, [r7, #20]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3718      	adds	r7, #24
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	20000ec0 	.word	0x20000ec0
 8006c6c:	08007d30 	.word	0x08007d30
 8006c70:	08006dad 	.word	0x08006dad
 8006c74:	20000ec4 	.word	0x20000ec4

08006c78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b08a      	sub	sp, #40	; 0x28
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
 8006c84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006c86:	2300      	movs	r3, #0
 8006c88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10a      	bne.n	8006ca6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	623b      	str	r3, [r7, #32]
}
 8006ca2:	bf00      	nop
 8006ca4:	e7fe      	b.n	8006ca4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006ca6:	4b1a      	ldr	r3, [pc, #104]	; (8006d10 <xTimerGenericCommand+0x98>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d02a      	beq.n	8006d04 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	2b05      	cmp	r3, #5
 8006cbe:	dc18      	bgt.n	8006cf2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006cc0:	f7ff feb2 	bl	8006a28 <xTaskGetSchedulerState>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d109      	bne.n	8006cde <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006cca:	4b11      	ldr	r3, [pc, #68]	; (8006d10 <xTimerGenericCommand+0x98>)
 8006ccc:	6818      	ldr	r0, [r3, #0]
 8006cce:	f107 0110 	add.w	r1, r7, #16
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cd6:	f7fe fc77 	bl	80055c8 <xQueueGenericSend>
 8006cda:	6278      	str	r0, [r7, #36]	; 0x24
 8006cdc:	e012      	b.n	8006d04 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006cde:	4b0c      	ldr	r3, [pc, #48]	; (8006d10 <xTimerGenericCommand+0x98>)
 8006ce0:	6818      	ldr	r0, [r3, #0]
 8006ce2:	f107 0110 	add.w	r1, r7, #16
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f7fe fc6d 	bl	80055c8 <xQueueGenericSend>
 8006cee:	6278      	str	r0, [r7, #36]	; 0x24
 8006cf0:	e008      	b.n	8006d04 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006cf2:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <xTimerGenericCommand+0x98>)
 8006cf4:	6818      	ldr	r0, [r3, #0]
 8006cf6:	f107 0110 	add.w	r1, r7, #16
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	683a      	ldr	r2, [r7, #0]
 8006cfe:	f7fe fd61 	bl	80057c4 <xQueueGenericSendFromISR>
 8006d02:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3728      	adds	r7, #40	; 0x28
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	20000ec0 	.word	0x20000ec0

08006d14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b088      	sub	sp, #32
 8006d18:	af02      	add	r7, sp, #8
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d1e:	4b22      	ldr	r3, [pc, #136]	; (8006da8 <prvProcessExpiredTimer+0x94>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fe fb1d 	bl	800536c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d38:	f003 0304 	and.w	r3, r3, #4
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d022      	beq.n	8006d86 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	699a      	ldr	r2, [r3, #24]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	18d1      	adds	r1, r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	683a      	ldr	r2, [r7, #0]
 8006d4c:	6978      	ldr	r0, [r7, #20]
 8006d4e:	f000 f8d1 	bl	8006ef4 <prvInsertTimerInActiveList>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d01f      	beq.n	8006d98 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d58:	2300      	movs	r3, #0
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	2100      	movs	r1, #0
 8006d62:	6978      	ldr	r0, [r7, #20]
 8006d64:	f7ff ff88 	bl	8006c78 <xTimerGenericCommand>
 8006d68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d113      	bne.n	8006d98 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	60fb      	str	r3, [r7, #12]
}
 8006d82:	bf00      	nop
 8006d84:	e7fe      	b.n	8006d84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d8c:	f023 0301 	bic.w	r3, r3, #1
 8006d90:	b2da      	uxtb	r2, r3
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	6978      	ldr	r0, [r7, #20]
 8006d9e:	4798      	blx	r3
}
 8006da0:	bf00      	nop
 8006da2:	3718      	adds	r7, #24
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	20000eb8 	.word	0x20000eb8

08006dac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006db4:	f107 0308 	add.w	r3, r7, #8
 8006db8:	4618      	mov	r0, r3
 8006dba:	f000 f857 	bl	8006e6c <prvGetNextExpireTime>
 8006dbe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f000 f803 	bl	8006dd0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006dca:	f000 f8d5 	bl	8006f78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006dce:	e7f1      	b.n	8006db4 <prvTimerTask+0x8>

08006dd0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006dda:	f7ff fa39 	bl	8006250 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006dde:	f107 0308 	add.w	r3, r7, #8
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 f866 	bl	8006eb4 <prvSampleTimeNow>
 8006de8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d130      	bne.n	8006e52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10a      	bne.n	8006e0c <prvProcessTimerOrBlockTask+0x3c>
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d806      	bhi.n	8006e0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006dfe:	f7ff fa35 	bl	800626c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e02:	68f9      	ldr	r1, [r7, #12]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7ff ff85 	bl	8006d14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e0a:	e024      	b.n	8006e56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d008      	beq.n	8006e24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e12:	4b13      	ldr	r3, [pc, #76]	; (8006e60 <prvProcessTimerOrBlockTask+0x90>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <prvProcessTimerOrBlockTask+0x50>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e000      	b.n	8006e22 <prvProcessTimerOrBlockTask+0x52>
 8006e20:	2300      	movs	r3, #0
 8006e22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e24:	4b0f      	ldr	r3, [pc, #60]	; (8006e64 <prvProcessTimerOrBlockTask+0x94>)
 8006e26:	6818      	ldr	r0, [r3, #0]
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	4619      	mov	r1, r3
 8006e32:	f7fe ff7d 	bl	8005d30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006e36:	f7ff fa19 	bl	800626c <xTaskResumeAll>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d10a      	bne.n	8006e56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006e40:	4b09      	ldr	r3, [pc, #36]	; (8006e68 <prvProcessTimerOrBlockTask+0x98>)
 8006e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e46:	601a      	str	r2, [r3, #0]
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	f3bf 8f6f 	isb	sy
}
 8006e50:	e001      	b.n	8006e56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006e52:	f7ff fa0b 	bl	800626c <xTaskResumeAll>
}
 8006e56:	bf00      	nop
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	20000ebc 	.word	0x20000ebc
 8006e64:	20000ec0 	.word	0x20000ec0
 8006e68:	e000ed04 	.word	0xe000ed04

08006e6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e74:	4b0e      	ldr	r3, [pc, #56]	; (8006eb0 <prvGetNextExpireTime+0x44>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <prvGetNextExpireTime+0x16>
 8006e7e:	2201      	movs	r2, #1
 8006e80:	e000      	b.n	8006e84 <prvGetNextExpireTime+0x18>
 8006e82:	2200      	movs	r2, #0
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d105      	bne.n	8006e9c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e90:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <prvGetNextExpireTime+0x44>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	60fb      	str	r3, [r7, #12]
 8006e9a:	e001      	b.n	8006ea0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3714      	adds	r7, #20
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	20000eb8 	.word	0x20000eb8

08006eb4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ebc:	f7ff fa74 	bl	80063a8 <xTaskGetTickCount>
 8006ec0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006ec2:	4b0b      	ldr	r3, [pc, #44]	; (8006ef0 <prvSampleTimeNow+0x3c>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d205      	bcs.n	8006ed8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ecc:	f000 f936 	bl	800713c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	601a      	str	r2, [r3, #0]
 8006ed6:	e002      	b.n	8006ede <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006ede:	4a04      	ldr	r2, [pc, #16]	; (8006ef0 <prvSampleTimeNow+0x3c>)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	20000ec8 	.word	0x20000ec8

08006ef4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
 8006f00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f02:	2300      	movs	r3, #0
 8006f04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d812      	bhi.n	8006f40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	1ad2      	subs	r2, r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d302      	bcc.n	8006f2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	617b      	str	r3, [r7, #20]
 8006f2c:	e01b      	b.n	8006f66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f2e:	4b10      	ldr	r3, [pc, #64]	; (8006f70 <prvInsertTimerInActiveList+0x7c>)
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	3304      	adds	r3, #4
 8006f36:	4619      	mov	r1, r3
 8006f38:	4610      	mov	r0, r2
 8006f3a:	f7fe f9de 	bl	80052fa <vListInsert>
 8006f3e:	e012      	b.n	8006f66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d206      	bcs.n	8006f56 <prvInsertTimerInActiveList+0x62>
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d302      	bcc.n	8006f56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006f50:	2301      	movs	r3, #1
 8006f52:	617b      	str	r3, [r7, #20]
 8006f54:	e007      	b.n	8006f66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f56:	4b07      	ldr	r3, [pc, #28]	; (8006f74 <prvInsertTimerInActiveList+0x80>)
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	4619      	mov	r1, r3
 8006f60:	4610      	mov	r0, r2
 8006f62:	f7fe f9ca 	bl	80052fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006f66:	697b      	ldr	r3, [r7, #20]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3718      	adds	r7, #24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	20000ebc 	.word	0x20000ebc
 8006f74:	20000eb8 	.word	0x20000eb8

08006f78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b08e      	sub	sp, #56	; 0x38
 8006f7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f7e:	e0ca      	b.n	8007116 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	da18      	bge.n	8006fb8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006f86:	1d3b      	adds	r3, r7, #4
 8006f88:	3304      	adds	r3, #4
 8006f8a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10a      	bne.n	8006fa8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	61fb      	str	r3, [r7, #28]
}
 8006fa4:	bf00      	nop
 8006fa6:	e7fe      	b.n	8006fa6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fae:	6850      	ldr	r0, [r2, #4]
 8006fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fb2:	6892      	ldr	r2, [r2, #8]
 8006fb4:	4611      	mov	r1, r2
 8006fb6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f2c0 80aa 	blt.w	8007114 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d004      	beq.n	8006fd6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fce:	3304      	adds	r3, #4
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7fe f9cb 	bl	800536c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006fd6:	463b      	mov	r3, r7
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7ff ff6b 	bl	8006eb4 <prvSampleTimeNow>
 8006fde:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b09      	cmp	r3, #9
 8006fe4:	f200 8097 	bhi.w	8007116 <prvProcessReceivedCommands+0x19e>
 8006fe8:	a201      	add	r2, pc, #4	; (adr r2, 8006ff0 <prvProcessReceivedCommands+0x78>)
 8006fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fee:	bf00      	nop
 8006ff0:	08007019 	.word	0x08007019
 8006ff4:	08007019 	.word	0x08007019
 8006ff8:	08007019 	.word	0x08007019
 8006ffc:	0800708d 	.word	0x0800708d
 8007000:	080070a1 	.word	0x080070a1
 8007004:	080070eb 	.word	0x080070eb
 8007008:	08007019 	.word	0x08007019
 800700c:	08007019 	.word	0x08007019
 8007010:	0800708d 	.word	0x0800708d
 8007014:	080070a1 	.word	0x080070a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800701e:	f043 0301 	orr.w	r3, r3, #1
 8007022:	b2da      	uxtb	r2, r3
 8007024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007026:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	18d1      	adds	r1, r2, r3
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007038:	f7ff ff5c 	bl	8006ef4 <prvInsertTimerInActiveList>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d069      	beq.n	8007116 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007048:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800704a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007050:	f003 0304 	and.w	r3, r3, #4
 8007054:	2b00      	cmp	r3, #0
 8007056:	d05e      	beq.n	8007116 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	441a      	add	r2, r3
 8007060:	2300      	movs	r3, #0
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	2300      	movs	r3, #0
 8007066:	2100      	movs	r1, #0
 8007068:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800706a:	f7ff fe05 	bl	8006c78 <xTimerGenericCommand>
 800706e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d14f      	bne.n	8007116 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	61bb      	str	r3, [r7, #24]
}
 8007088:	bf00      	nop
 800708a:	e7fe      	b.n	800708a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007092:	f023 0301 	bic.w	r3, r3, #1
 8007096:	b2da      	uxtb	r2, r3
 8007098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800709e:	e03a      	b.n	8007116 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070a6:	f043 0301 	orr.w	r3, r3, #1
 80070aa:	b2da      	uxtb	r2, r3
 80070ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80070b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10a      	bne.n	80070d6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80070c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	617b      	str	r3, [r7, #20]
}
 80070d2:	bf00      	nop
 80070d4:	e7fe      	b.n	80070d4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80070d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d8:	699a      	ldr	r2, [r3, #24]
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	18d1      	adds	r1, r2, r3
 80070de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070e4:	f7ff ff06 	bl	8006ef4 <prvInsertTimerInActiveList>
					break;
 80070e8:	e015      	b.n	8007116 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80070ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070f0:	f003 0302 	and.w	r3, r3, #2
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d103      	bne.n	8007100 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80070f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070fa:	f000 fbe1 	bl	80078c0 <vPortFree>
 80070fe:	e00a      	b.n	8007116 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007106:	f023 0301 	bic.w	r3, r3, #1
 800710a:	b2da      	uxtb	r2, r3
 800710c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007112:	e000      	b.n	8007116 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007114:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007116:	4b08      	ldr	r3, [pc, #32]	; (8007138 <prvProcessReceivedCommands+0x1c0>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	1d39      	adds	r1, r7, #4
 800711c:	2200      	movs	r2, #0
 800711e:	4618      	mov	r0, r3
 8007120:	f7fe fbec 	bl	80058fc <xQueueReceive>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	f47f af2a 	bne.w	8006f80 <prvProcessReceivedCommands+0x8>
	}
}
 800712c:	bf00      	nop
 800712e:	bf00      	nop
 8007130:	3730      	adds	r7, #48	; 0x30
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	20000ec0 	.word	0x20000ec0

0800713c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b088      	sub	sp, #32
 8007140:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007142:	e048      	b.n	80071d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007144:	4b2d      	ldr	r3, [pc, #180]	; (80071fc <prvSwitchTimerLists+0xc0>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800714e:	4b2b      	ldr	r3, [pc, #172]	; (80071fc <prvSwitchTimerLists+0xc0>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	3304      	adds	r3, #4
 800715c:	4618      	mov	r0, r3
 800715e:	f7fe f905 	bl	800536c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007170:	f003 0304 	and.w	r3, r3, #4
 8007174:	2b00      	cmp	r3, #0
 8007176:	d02e      	beq.n	80071d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	693a      	ldr	r2, [r7, #16]
 800717e:	4413      	add	r3, r2
 8007180:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	429a      	cmp	r2, r3
 8007188:	d90e      	bls.n	80071a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007196:	4b19      	ldr	r3, [pc, #100]	; (80071fc <prvSwitchTimerLists+0xc0>)
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	3304      	adds	r3, #4
 800719e:	4619      	mov	r1, r3
 80071a0:	4610      	mov	r0, r2
 80071a2:	f7fe f8aa 	bl	80052fa <vListInsert>
 80071a6:	e016      	b.n	80071d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071a8:	2300      	movs	r3, #0
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	2300      	movs	r3, #0
 80071ae:	693a      	ldr	r2, [r7, #16]
 80071b0:	2100      	movs	r1, #0
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f7ff fd60 	bl	8006c78 <xTimerGenericCommand>
 80071b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d10a      	bne.n	80071d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80071c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	603b      	str	r3, [r7, #0]
}
 80071d2:	bf00      	nop
 80071d4:	e7fe      	b.n	80071d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071d6:	4b09      	ldr	r3, [pc, #36]	; (80071fc <prvSwitchTimerLists+0xc0>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1b1      	bne.n	8007144 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80071e0:	4b06      	ldr	r3, [pc, #24]	; (80071fc <prvSwitchTimerLists+0xc0>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80071e6:	4b06      	ldr	r3, [pc, #24]	; (8007200 <prvSwitchTimerLists+0xc4>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a04      	ldr	r2, [pc, #16]	; (80071fc <prvSwitchTimerLists+0xc0>)
 80071ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80071ee:	4a04      	ldr	r2, [pc, #16]	; (8007200 <prvSwitchTimerLists+0xc4>)
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	6013      	str	r3, [r2, #0]
}
 80071f4:	bf00      	nop
 80071f6:	3718      	adds	r7, #24
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	20000eb8 	.word	0x20000eb8
 8007200:	20000ebc 	.word	0x20000ebc

08007204 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800720a:	f000 f96b 	bl	80074e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800720e:	4b15      	ldr	r3, [pc, #84]	; (8007264 <prvCheckForValidListAndQueue+0x60>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d120      	bne.n	8007258 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007216:	4814      	ldr	r0, [pc, #80]	; (8007268 <prvCheckForValidListAndQueue+0x64>)
 8007218:	f7fe f81e 	bl	8005258 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800721c:	4813      	ldr	r0, [pc, #76]	; (800726c <prvCheckForValidListAndQueue+0x68>)
 800721e:	f7fe f81b 	bl	8005258 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007222:	4b13      	ldr	r3, [pc, #76]	; (8007270 <prvCheckForValidListAndQueue+0x6c>)
 8007224:	4a10      	ldr	r2, [pc, #64]	; (8007268 <prvCheckForValidListAndQueue+0x64>)
 8007226:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007228:	4b12      	ldr	r3, [pc, #72]	; (8007274 <prvCheckForValidListAndQueue+0x70>)
 800722a:	4a10      	ldr	r2, [pc, #64]	; (800726c <prvCheckForValidListAndQueue+0x68>)
 800722c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800722e:	2300      	movs	r3, #0
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	4b11      	ldr	r3, [pc, #68]	; (8007278 <prvCheckForValidListAndQueue+0x74>)
 8007234:	4a11      	ldr	r2, [pc, #68]	; (800727c <prvCheckForValidListAndQueue+0x78>)
 8007236:	2110      	movs	r1, #16
 8007238:	200a      	movs	r0, #10
 800723a:	f7fe f929 	bl	8005490 <xQueueGenericCreateStatic>
 800723e:	4603      	mov	r3, r0
 8007240:	4a08      	ldr	r2, [pc, #32]	; (8007264 <prvCheckForValidListAndQueue+0x60>)
 8007242:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007244:	4b07      	ldr	r3, [pc, #28]	; (8007264 <prvCheckForValidListAndQueue+0x60>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d005      	beq.n	8007258 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800724c:	4b05      	ldr	r3, [pc, #20]	; (8007264 <prvCheckForValidListAndQueue+0x60>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	490b      	ldr	r1, [pc, #44]	; (8007280 <prvCheckForValidListAndQueue+0x7c>)
 8007252:	4618      	mov	r0, r3
 8007254:	f7fe fd42 	bl	8005cdc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007258:	f000 f974 	bl	8007544 <vPortExitCritical>
}
 800725c:	bf00      	nop
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	20000ec0 	.word	0x20000ec0
 8007268:	20000e90 	.word	0x20000e90
 800726c:	20000ea4 	.word	0x20000ea4
 8007270:	20000eb8 	.word	0x20000eb8
 8007274:	20000ebc 	.word	0x20000ebc
 8007278:	20000f6c 	.word	0x20000f6c
 800727c:	20000ecc 	.word	0x20000ecc
 8007280:	08007d38 	.word	0x08007d38

08007284 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	3b04      	subs	r3, #4
 8007294:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800729c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	3b04      	subs	r3, #4
 80072a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	f023 0201 	bic.w	r2, r3, #1
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3b04      	subs	r3, #4
 80072b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072b4:	4a0c      	ldr	r2, [pc, #48]	; (80072e8 <pxPortInitialiseStack+0x64>)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3b14      	subs	r3, #20
 80072be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	3b04      	subs	r3, #4
 80072ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f06f 0202 	mvn.w	r2, #2
 80072d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	3b20      	subs	r3, #32
 80072d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80072da:	68fb      	ldr	r3, [r7, #12]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	080072ed 	.word	0x080072ed

080072ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80072ec:	b480      	push	{r7}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80072f2:	2300      	movs	r3, #0
 80072f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80072f6:	4b12      	ldr	r3, [pc, #72]	; (8007340 <prvTaskExitError+0x54>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072fe:	d00a      	beq.n	8007316 <prvTaskExitError+0x2a>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	60fb      	str	r3, [r7, #12]
}
 8007312:	bf00      	nop
 8007314:	e7fe      	b.n	8007314 <prvTaskExitError+0x28>
	__asm volatile
 8007316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731a:	f383 8811 	msr	BASEPRI, r3
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	60bb      	str	r3, [r7, #8]
}
 8007328:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800732a:	bf00      	nop
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d0fc      	beq.n	800732c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007332:	bf00      	nop
 8007334:	bf00      	nop
 8007336:	3714      	adds	r7, #20
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr
 8007340:	2000000c 	.word	0x2000000c
	...

08007350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007350:	4b07      	ldr	r3, [pc, #28]	; (8007370 <pxCurrentTCBConst2>)
 8007352:	6819      	ldr	r1, [r3, #0]
 8007354:	6808      	ldr	r0, [r1, #0]
 8007356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800735a:	f380 8809 	msr	PSP, r0
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f04f 0000 	mov.w	r0, #0
 8007366:	f380 8811 	msr	BASEPRI, r0
 800736a:	4770      	bx	lr
 800736c:	f3af 8000 	nop.w

08007370 <pxCurrentTCBConst2>:
 8007370:	20000990 	.word	0x20000990
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007374:	bf00      	nop
 8007376:	bf00      	nop

08007378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007378:	4808      	ldr	r0, [pc, #32]	; (800739c <prvPortStartFirstTask+0x24>)
 800737a:	6800      	ldr	r0, [r0, #0]
 800737c:	6800      	ldr	r0, [r0, #0]
 800737e:	f380 8808 	msr	MSP, r0
 8007382:	f04f 0000 	mov.w	r0, #0
 8007386:	f380 8814 	msr	CONTROL, r0
 800738a:	b662      	cpsie	i
 800738c:	b661      	cpsie	f
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	df00      	svc	0
 8007398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800739a:	bf00      	nop
 800739c:	e000ed08 	.word	0xe000ed08

080073a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80073a6:	4b46      	ldr	r3, [pc, #280]	; (80074c0 <xPortStartScheduler+0x120>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a46      	ldr	r2, [pc, #280]	; (80074c4 <xPortStartScheduler+0x124>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d10a      	bne.n	80073c6 <xPortStartScheduler+0x26>
	__asm volatile
 80073b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	613b      	str	r3, [r7, #16]
}
 80073c2:	bf00      	nop
 80073c4:	e7fe      	b.n	80073c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80073c6:	4b3e      	ldr	r3, [pc, #248]	; (80074c0 <xPortStartScheduler+0x120>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a3f      	ldr	r2, [pc, #252]	; (80074c8 <xPortStartScheduler+0x128>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d10a      	bne.n	80073e6 <xPortStartScheduler+0x46>
	__asm volatile
 80073d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	60fb      	str	r3, [r7, #12]
}
 80073e2:	bf00      	nop
 80073e4:	e7fe      	b.n	80073e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073e6:	4b39      	ldr	r3, [pc, #228]	; (80074cc <xPortStartScheduler+0x12c>)
 80073e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	22ff      	movs	r2, #255	; 0xff
 80073f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007400:	78fb      	ldrb	r3, [r7, #3]
 8007402:	b2db      	uxtb	r3, r3
 8007404:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007408:	b2da      	uxtb	r2, r3
 800740a:	4b31      	ldr	r3, [pc, #196]	; (80074d0 <xPortStartScheduler+0x130>)
 800740c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800740e:	4b31      	ldr	r3, [pc, #196]	; (80074d4 <xPortStartScheduler+0x134>)
 8007410:	2207      	movs	r2, #7
 8007412:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007414:	e009      	b.n	800742a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007416:	4b2f      	ldr	r3, [pc, #188]	; (80074d4 <xPortStartScheduler+0x134>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3b01      	subs	r3, #1
 800741c:	4a2d      	ldr	r2, [pc, #180]	; (80074d4 <xPortStartScheduler+0x134>)
 800741e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007420:	78fb      	ldrb	r3, [r7, #3]
 8007422:	b2db      	uxtb	r3, r3
 8007424:	005b      	lsls	r3, r3, #1
 8007426:	b2db      	uxtb	r3, r3
 8007428:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800742a:	78fb      	ldrb	r3, [r7, #3]
 800742c:	b2db      	uxtb	r3, r3
 800742e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007432:	2b80      	cmp	r3, #128	; 0x80
 8007434:	d0ef      	beq.n	8007416 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007436:	4b27      	ldr	r3, [pc, #156]	; (80074d4 <xPortStartScheduler+0x134>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f1c3 0307 	rsb	r3, r3, #7
 800743e:	2b04      	cmp	r3, #4
 8007440:	d00a      	beq.n	8007458 <xPortStartScheduler+0xb8>
	__asm volatile
 8007442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007446:	f383 8811 	msr	BASEPRI, r3
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	60bb      	str	r3, [r7, #8]
}
 8007454:	bf00      	nop
 8007456:	e7fe      	b.n	8007456 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007458:	4b1e      	ldr	r3, [pc, #120]	; (80074d4 <xPortStartScheduler+0x134>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	021b      	lsls	r3, r3, #8
 800745e:	4a1d      	ldr	r2, [pc, #116]	; (80074d4 <xPortStartScheduler+0x134>)
 8007460:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007462:	4b1c      	ldr	r3, [pc, #112]	; (80074d4 <xPortStartScheduler+0x134>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800746a:	4a1a      	ldr	r2, [pc, #104]	; (80074d4 <xPortStartScheduler+0x134>)
 800746c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	b2da      	uxtb	r2, r3
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007476:	4b18      	ldr	r3, [pc, #96]	; (80074d8 <xPortStartScheduler+0x138>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a17      	ldr	r2, [pc, #92]	; (80074d8 <xPortStartScheduler+0x138>)
 800747c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007480:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007482:	4b15      	ldr	r3, [pc, #84]	; (80074d8 <xPortStartScheduler+0x138>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a14      	ldr	r2, [pc, #80]	; (80074d8 <xPortStartScheduler+0x138>)
 8007488:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800748c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800748e:	f000 f8dd 	bl	800764c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007492:	4b12      	ldr	r3, [pc, #72]	; (80074dc <xPortStartScheduler+0x13c>)
 8007494:	2200      	movs	r2, #0
 8007496:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007498:	f000 f8fc 	bl	8007694 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800749c:	4b10      	ldr	r3, [pc, #64]	; (80074e0 <xPortStartScheduler+0x140>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a0f      	ldr	r2, [pc, #60]	; (80074e0 <xPortStartScheduler+0x140>)
 80074a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80074a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80074a8:	f7ff ff66 	bl	8007378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80074ac:	f7ff f846 	bl	800653c <vTaskSwitchContext>
	prvTaskExitError();
 80074b0:	f7ff ff1c 	bl	80072ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3718      	adds	r7, #24
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	e000ed00 	.word	0xe000ed00
 80074c4:	410fc271 	.word	0x410fc271
 80074c8:	410fc270 	.word	0x410fc270
 80074cc:	e000e400 	.word	0xe000e400
 80074d0:	20000fbc 	.word	0x20000fbc
 80074d4:	20000fc0 	.word	0x20000fc0
 80074d8:	e000ed20 	.word	0xe000ed20
 80074dc:	2000000c 	.word	0x2000000c
 80074e0:	e000ef34 	.word	0xe000ef34

080074e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
	__asm volatile
 80074ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ee:	f383 8811 	msr	BASEPRI, r3
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	f3bf 8f4f 	dsb	sy
 80074fa:	607b      	str	r3, [r7, #4]
}
 80074fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80074fe:	4b0f      	ldr	r3, [pc, #60]	; (800753c <vPortEnterCritical+0x58>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	3301      	adds	r3, #1
 8007504:	4a0d      	ldr	r2, [pc, #52]	; (800753c <vPortEnterCritical+0x58>)
 8007506:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007508:	4b0c      	ldr	r3, [pc, #48]	; (800753c <vPortEnterCritical+0x58>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d10f      	bne.n	8007530 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007510:	4b0b      	ldr	r3, [pc, #44]	; (8007540 <vPortEnterCritical+0x5c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00a      	beq.n	8007530 <vPortEnterCritical+0x4c>
	__asm volatile
 800751a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	603b      	str	r3, [r7, #0]
}
 800752c:	bf00      	nop
 800752e:	e7fe      	b.n	800752e <vPortEnterCritical+0x4a>
	}
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	2000000c 	.word	0x2000000c
 8007540:	e000ed04 	.word	0xe000ed04

08007544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800754a:	4b12      	ldr	r3, [pc, #72]	; (8007594 <vPortExitCritical+0x50>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10a      	bne.n	8007568 <vPortExitCritical+0x24>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	607b      	str	r3, [r7, #4]
}
 8007564:	bf00      	nop
 8007566:	e7fe      	b.n	8007566 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007568:	4b0a      	ldr	r3, [pc, #40]	; (8007594 <vPortExitCritical+0x50>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	3b01      	subs	r3, #1
 800756e:	4a09      	ldr	r2, [pc, #36]	; (8007594 <vPortExitCritical+0x50>)
 8007570:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007572:	4b08      	ldr	r3, [pc, #32]	; (8007594 <vPortExitCritical+0x50>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d105      	bne.n	8007586 <vPortExitCritical+0x42>
 800757a:	2300      	movs	r3, #0
 800757c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	f383 8811 	msr	BASEPRI, r3
}
 8007584:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007586:	bf00      	nop
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	2000000c 	.word	0x2000000c
	...

080075a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80075a0:	f3ef 8009 	mrs	r0, PSP
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	4b15      	ldr	r3, [pc, #84]	; (8007600 <pxCurrentTCBConst>)
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	f01e 0f10 	tst.w	lr, #16
 80075b0:	bf08      	it	eq
 80075b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80075b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ba:	6010      	str	r0, [r2, #0]
 80075bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80075c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80075c4:	f380 8811 	msr	BASEPRI, r0
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f7fe ffb4 	bl	800653c <vTaskSwitchContext>
 80075d4:	f04f 0000 	mov.w	r0, #0
 80075d8:	f380 8811 	msr	BASEPRI, r0
 80075dc:	bc09      	pop	{r0, r3}
 80075de:	6819      	ldr	r1, [r3, #0]
 80075e0:	6808      	ldr	r0, [r1, #0]
 80075e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e6:	f01e 0f10 	tst.w	lr, #16
 80075ea:	bf08      	it	eq
 80075ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80075f0:	f380 8809 	msr	PSP, r0
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	f3af 8000 	nop.w

08007600 <pxCurrentTCBConst>:
 8007600:	20000990 	.word	0x20000990
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007604:	bf00      	nop
 8007606:	bf00      	nop

08007608 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	607b      	str	r3, [r7, #4]
}
 8007620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007622:	f7fe fed1 	bl	80063c8 <xTaskIncrementTick>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d003      	beq.n	8007634 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800762c:	4b06      	ldr	r3, [pc, #24]	; (8007648 <xPortSysTickHandler+0x40>)
 800762e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	2300      	movs	r3, #0
 8007636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	f383 8811 	msr	BASEPRI, r3
}
 800763e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007640:	bf00      	nop
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	e000ed04 	.word	0xe000ed04

0800764c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800764c:	b480      	push	{r7}
 800764e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007650:	4b0b      	ldr	r3, [pc, #44]	; (8007680 <vPortSetupTimerInterrupt+0x34>)
 8007652:	2200      	movs	r2, #0
 8007654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007656:	4b0b      	ldr	r3, [pc, #44]	; (8007684 <vPortSetupTimerInterrupt+0x38>)
 8007658:	2200      	movs	r2, #0
 800765a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800765c:	4b0a      	ldr	r3, [pc, #40]	; (8007688 <vPortSetupTimerInterrupt+0x3c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a0a      	ldr	r2, [pc, #40]	; (800768c <vPortSetupTimerInterrupt+0x40>)
 8007662:	fba2 2303 	umull	r2, r3, r2, r3
 8007666:	099b      	lsrs	r3, r3, #6
 8007668:	4a09      	ldr	r2, [pc, #36]	; (8007690 <vPortSetupTimerInterrupt+0x44>)
 800766a:	3b01      	subs	r3, #1
 800766c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800766e:	4b04      	ldr	r3, [pc, #16]	; (8007680 <vPortSetupTimerInterrupt+0x34>)
 8007670:	2207      	movs	r2, #7
 8007672:	601a      	str	r2, [r3, #0]
}
 8007674:	bf00      	nop
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	e000e010 	.word	0xe000e010
 8007684:	e000e018 	.word	0xe000e018
 8007688:	20000000 	.word	0x20000000
 800768c:	10624dd3 	.word	0x10624dd3
 8007690:	e000e014 	.word	0xe000e014

08007694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007694:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80076a4 <vPortEnableVFP+0x10>
 8007698:	6801      	ldr	r1, [r0, #0]
 800769a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800769e:	6001      	str	r1, [r0, #0]
 80076a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80076a2:	bf00      	nop
 80076a4:	e000ed88 	.word	0xe000ed88

080076a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80076ae:	f3ef 8305 	mrs	r3, IPSR
 80076b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2b0f      	cmp	r3, #15
 80076b8:	d914      	bls.n	80076e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80076ba:	4a17      	ldr	r2, [pc, #92]	; (8007718 <vPortValidateInterruptPriority+0x70>)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	4413      	add	r3, r2
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80076c4:	4b15      	ldr	r3, [pc, #84]	; (800771c <vPortValidateInterruptPriority+0x74>)
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	7afa      	ldrb	r2, [r7, #11]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d20a      	bcs.n	80076e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80076ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	607b      	str	r3, [r7, #4]
}
 80076e0:	bf00      	nop
 80076e2:	e7fe      	b.n	80076e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076e4:	4b0e      	ldr	r3, [pc, #56]	; (8007720 <vPortValidateInterruptPriority+0x78>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80076ec:	4b0d      	ldr	r3, [pc, #52]	; (8007724 <vPortValidateInterruptPriority+0x7c>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d90a      	bls.n	800770a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80076f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f8:	f383 8811 	msr	BASEPRI, r3
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f3bf 8f4f 	dsb	sy
 8007704:	603b      	str	r3, [r7, #0]
}
 8007706:	bf00      	nop
 8007708:	e7fe      	b.n	8007708 <vPortValidateInterruptPriority+0x60>
	}
 800770a:	bf00      	nop
 800770c:	3714      	adds	r7, #20
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	e000e3f0 	.word	0xe000e3f0
 800771c:	20000fbc 	.word	0x20000fbc
 8007720:	e000ed0c 	.word	0xe000ed0c
 8007724:	20000fc0 	.word	0x20000fc0

08007728 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b08a      	sub	sp, #40	; 0x28
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007730:	2300      	movs	r3, #0
 8007732:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007734:	f7fe fd8c 	bl	8006250 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007738:	4b5b      	ldr	r3, [pc, #364]	; (80078a8 <pvPortMalloc+0x180>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007740:	f000 f920 	bl	8007984 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007744:	4b59      	ldr	r3, [pc, #356]	; (80078ac <pvPortMalloc+0x184>)
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4013      	ands	r3, r2
 800774c:	2b00      	cmp	r3, #0
 800774e:	f040 8093 	bne.w	8007878 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d01d      	beq.n	8007794 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007758:	2208      	movs	r2, #8
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4413      	add	r3, r2
 800775e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f003 0307 	and.w	r3, r3, #7
 8007766:	2b00      	cmp	r3, #0
 8007768:	d014      	beq.n	8007794 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f023 0307 	bic.w	r3, r3, #7
 8007770:	3308      	adds	r3, #8
 8007772:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f003 0307 	and.w	r3, r3, #7
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00a      	beq.n	8007794 <pvPortMalloc+0x6c>
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	617b      	str	r3, [r7, #20]
}
 8007790:	bf00      	nop
 8007792:	e7fe      	b.n	8007792 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d06e      	beq.n	8007878 <pvPortMalloc+0x150>
 800779a:	4b45      	ldr	r3, [pc, #276]	; (80078b0 <pvPortMalloc+0x188>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d869      	bhi.n	8007878 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80077a4:	4b43      	ldr	r3, [pc, #268]	; (80078b4 <pvPortMalloc+0x18c>)
 80077a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80077a8:	4b42      	ldr	r3, [pc, #264]	; (80078b4 <pvPortMalloc+0x18c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077ae:	e004      	b.n	80077ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d903      	bls.n	80077cc <pvPortMalloc+0xa4>
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1f1      	bne.n	80077b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80077cc:	4b36      	ldr	r3, [pc, #216]	; (80078a8 <pvPortMalloc+0x180>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d050      	beq.n	8007878 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077d6:	6a3b      	ldr	r3, [r7, #32]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2208      	movs	r2, #8
 80077dc:	4413      	add	r3, r2
 80077de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	685a      	ldr	r2, [r3, #4]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	1ad2      	subs	r2, r2, r3
 80077f0:	2308      	movs	r3, #8
 80077f2:	005b      	lsls	r3, r3, #1
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d91f      	bls.n	8007838 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80077f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4413      	add	r3, r2
 80077fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	f003 0307 	and.w	r3, r3, #7
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00a      	beq.n	8007820 <pvPortMalloc+0xf8>
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	613b      	str	r3, [r7, #16]
}
 800781c:	bf00      	nop
 800781e:	e7fe      	b.n	800781e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	685a      	ldr	r2, [r3, #4]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	1ad2      	subs	r2, r2, r3
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007832:	69b8      	ldr	r0, [r7, #24]
 8007834:	f000 f908 	bl	8007a48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007838:	4b1d      	ldr	r3, [pc, #116]	; (80078b0 <pvPortMalloc+0x188>)
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	4a1b      	ldr	r2, [pc, #108]	; (80078b0 <pvPortMalloc+0x188>)
 8007844:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007846:	4b1a      	ldr	r3, [pc, #104]	; (80078b0 <pvPortMalloc+0x188>)
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	4b1b      	ldr	r3, [pc, #108]	; (80078b8 <pvPortMalloc+0x190>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	429a      	cmp	r2, r3
 8007850:	d203      	bcs.n	800785a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007852:	4b17      	ldr	r3, [pc, #92]	; (80078b0 <pvPortMalloc+0x188>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a18      	ldr	r2, [pc, #96]	; (80078b8 <pvPortMalloc+0x190>)
 8007858:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	685a      	ldr	r2, [r3, #4]
 800785e:	4b13      	ldr	r3, [pc, #76]	; (80078ac <pvPortMalloc+0x184>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	431a      	orrs	r2, r3
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	2200      	movs	r2, #0
 800786c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800786e:	4b13      	ldr	r3, [pc, #76]	; (80078bc <pvPortMalloc+0x194>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3301      	adds	r3, #1
 8007874:	4a11      	ldr	r2, [pc, #68]	; (80078bc <pvPortMalloc+0x194>)
 8007876:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007878:	f7fe fcf8 	bl	800626c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	f003 0307 	and.w	r3, r3, #7
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00a      	beq.n	800789c <pvPortMalloc+0x174>
	__asm volatile
 8007886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	60fb      	str	r3, [r7, #12]
}
 8007898:	bf00      	nop
 800789a:	e7fe      	b.n	800789a <pvPortMalloc+0x172>
	return pvReturn;
 800789c:	69fb      	ldr	r3, [r7, #28]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3728      	adds	r7, #40	; 0x28
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	20001b84 	.word	0x20001b84
 80078ac:	20001b98 	.word	0x20001b98
 80078b0:	20001b88 	.word	0x20001b88
 80078b4:	20001b7c 	.word	0x20001b7c
 80078b8:	20001b8c 	.word	0x20001b8c
 80078bc:	20001b90 	.word	0x20001b90

080078c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d04d      	beq.n	800796e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80078d2:	2308      	movs	r3, #8
 80078d4:	425b      	negs	r3, r3
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	4413      	add	r3, r2
 80078da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	685a      	ldr	r2, [r3, #4]
 80078e4:	4b24      	ldr	r3, [pc, #144]	; (8007978 <vPortFree+0xb8>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4013      	ands	r3, r2
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10a      	bne.n	8007904 <vPortFree+0x44>
	__asm volatile
 80078ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	60fb      	str	r3, [r7, #12]
}
 8007900:	bf00      	nop
 8007902:	e7fe      	b.n	8007902 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00a      	beq.n	8007922 <vPortFree+0x62>
	__asm volatile
 800790c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007910:	f383 8811 	msr	BASEPRI, r3
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	60bb      	str	r3, [r7, #8]
}
 800791e:	bf00      	nop
 8007920:	e7fe      	b.n	8007920 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	685a      	ldr	r2, [r3, #4]
 8007926:	4b14      	ldr	r3, [pc, #80]	; (8007978 <vPortFree+0xb8>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4013      	ands	r3, r2
 800792c:	2b00      	cmp	r3, #0
 800792e:	d01e      	beq.n	800796e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d11a      	bne.n	800796e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	4b0e      	ldr	r3, [pc, #56]	; (8007978 <vPortFree+0xb8>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	43db      	mvns	r3, r3
 8007942:	401a      	ands	r2, r3
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007948:	f7fe fc82 	bl	8006250 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	4b0a      	ldr	r3, [pc, #40]	; (800797c <vPortFree+0xbc>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4413      	add	r3, r2
 8007956:	4a09      	ldr	r2, [pc, #36]	; (800797c <vPortFree+0xbc>)
 8007958:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800795a:	6938      	ldr	r0, [r7, #16]
 800795c:	f000 f874 	bl	8007a48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007960:	4b07      	ldr	r3, [pc, #28]	; (8007980 <vPortFree+0xc0>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	3301      	adds	r3, #1
 8007966:	4a06      	ldr	r2, [pc, #24]	; (8007980 <vPortFree+0xc0>)
 8007968:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800796a:	f7fe fc7f 	bl	800626c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800796e:	bf00      	nop
 8007970:	3718      	adds	r7, #24
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	20001b98 	.word	0x20001b98
 800797c:	20001b88 	.word	0x20001b88
 8007980:	20001b94 	.word	0x20001b94

08007984 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800798a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800798e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007990:	4b27      	ldr	r3, [pc, #156]	; (8007a30 <prvHeapInit+0xac>)
 8007992:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f003 0307 	and.w	r3, r3, #7
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00c      	beq.n	80079b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	3307      	adds	r3, #7
 80079a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f023 0307 	bic.w	r3, r3, #7
 80079aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	4a1f      	ldr	r2, [pc, #124]	; (8007a30 <prvHeapInit+0xac>)
 80079b4:	4413      	add	r3, r2
 80079b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079bc:	4a1d      	ldr	r2, [pc, #116]	; (8007a34 <prvHeapInit+0xb0>)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80079c2:	4b1c      	ldr	r3, [pc, #112]	; (8007a34 <prvHeapInit+0xb0>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	4413      	add	r3, r2
 80079ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80079d0:	2208      	movs	r2, #8
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	1a9b      	subs	r3, r3, r2
 80079d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f023 0307 	bic.w	r3, r3, #7
 80079de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	4a15      	ldr	r2, [pc, #84]	; (8007a38 <prvHeapInit+0xb4>)
 80079e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80079e6:	4b14      	ldr	r3, [pc, #80]	; (8007a38 <prvHeapInit+0xb4>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2200      	movs	r2, #0
 80079ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079ee:	4b12      	ldr	r3, [pc, #72]	; (8007a38 <prvHeapInit+0xb4>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2200      	movs	r2, #0
 80079f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	1ad2      	subs	r2, r2, r3
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a04:	4b0c      	ldr	r3, [pc, #48]	; (8007a38 <prvHeapInit+0xb4>)
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	4a0a      	ldr	r2, [pc, #40]	; (8007a3c <prvHeapInit+0xb8>)
 8007a12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	4a09      	ldr	r2, [pc, #36]	; (8007a40 <prvHeapInit+0xbc>)
 8007a1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a1c:	4b09      	ldr	r3, [pc, #36]	; (8007a44 <prvHeapInit+0xc0>)
 8007a1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a22:	601a      	str	r2, [r3, #0]
}
 8007a24:	bf00      	nop
 8007a26:	3714      	adds	r7, #20
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	20000fc4 	.word	0x20000fc4
 8007a34:	20001b7c 	.word	0x20001b7c
 8007a38:	20001b84 	.word	0x20001b84
 8007a3c:	20001b8c 	.word	0x20001b8c
 8007a40:	20001b88 	.word	0x20001b88
 8007a44:	20001b98 	.word	0x20001b98

08007a48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a50:	4b28      	ldr	r3, [pc, #160]	; (8007af4 <prvInsertBlockIntoFreeList+0xac>)
 8007a52:	60fb      	str	r3, [r7, #12]
 8007a54:	e002      	b.n	8007a5c <prvInsertBlockIntoFreeList+0x14>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	60fb      	str	r3, [r7, #12]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d8f7      	bhi.n	8007a56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	4413      	add	r3, r2
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d108      	bne.n	8007a8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	441a      	add	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	441a      	add	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d118      	bne.n	8007ad0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	4b15      	ldr	r3, [pc, #84]	; (8007af8 <prvInsertBlockIntoFreeList+0xb0>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d00d      	beq.n	8007ac6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	441a      	add	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	601a      	str	r2, [r3, #0]
 8007ac4:	e008      	b.n	8007ad8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ac6:	4b0c      	ldr	r3, [pc, #48]	; (8007af8 <prvInsertBlockIntoFreeList+0xb0>)
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	e003      	b.n	8007ad8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d002      	beq.n	8007ae6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ae6:	bf00      	nop
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	20001b7c 	.word	0x20001b7c
 8007af8:	20001b84 	.word	0x20001b84

08007afc <__libc_init_array>:
 8007afc:	b570      	push	{r4, r5, r6, lr}
 8007afe:	4d0d      	ldr	r5, [pc, #52]	; (8007b34 <__libc_init_array+0x38>)
 8007b00:	4c0d      	ldr	r4, [pc, #52]	; (8007b38 <__libc_init_array+0x3c>)
 8007b02:	1b64      	subs	r4, r4, r5
 8007b04:	10a4      	asrs	r4, r4, #2
 8007b06:	2600      	movs	r6, #0
 8007b08:	42a6      	cmp	r6, r4
 8007b0a:	d109      	bne.n	8007b20 <__libc_init_array+0x24>
 8007b0c:	4d0b      	ldr	r5, [pc, #44]	; (8007b3c <__libc_init_array+0x40>)
 8007b0e:	4c0c      	ldr	r4, [pc, #48]	; (8007b40 <__libc_init_array+0x44>)
 8007b10:	f000 f8f2 	bl	8007cf8 <_init>
 8007b14:	1b64      	subs	r4, r4, r5
 8007b16:	10a4      	asrs	r4, r4, #2
 8007b18:	2600      	movs	r6, #0
 8007b1a:	42a6      	cmp	r6, r4
 8007b1c:	d105      	bne.n	8007b2a <__libc_init_array+0x2e>
 8007b1e:	bd70      	pop	{r4, r5, r6, pc}
 8007b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b24:	4798      	blx	r3
 8007b26:	3601      	adds	r6, #1
 8007b28:	e7ee      	b.n	8007b08 <__libc_init_array+0xc>
 8007b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b2e:	4798      	blx	r3
 8007b30:	3601      	adds	r6, #1
 8007b32:	e7f2      	b.n	8007b1a <__libc_init_array+0x1e>
 8007b34:	08007e38 	.word	0x08007e38
 8007b38:	08007e38 	.word	0x08007e38
 8007b3c:	08007e38 	.word	0x08007e38
 8007b40:	08007e3c 	.word	0x08007e3c

08007b44 <__retarget_lock_acquire_recursive>:
 8007b44:	4770      	bx	lr

08007b46 <__retarget_lock_release_recursive>:
 8007b46:	4770      	bx	lr

08007b48 <memcpy>:
 8007b48:	440a      	add	r2, r1
 8007b4a:	4291      	cmp	r1, r2
 8007b4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007b50:	d100      	bne.n	8007b54 <memcpy+0xc>
 8007b52:	4770      	bx	lr
 8007b54:	b510      	push	{r4, lr}
 8007b56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b5e:	4291      	cmp	r1, r2
 8007b60:	d1f9      	bne.n	8007b56 <memcpy+0xe>
 8007b62:	bd10      	pop	{r4, pc}

08007b64 <memset>:
 8007b64:	4402      	add	r2, r0
 8007b66:	4603      	mov	r3, r0
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d100      	bne.n	8007b6e <memset+0xa>
 8007b6c:	4770      	bx	lr
 8007b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b72:	e7f9      	b.n	8007b68 <memset+0x4>

08007b74 <cleanup_glue>:
 8007b74:	b538      	push	{r3, r4, r5, lr}
 8007b76:	460c      	mov	r4, r1
 8007b78:	6809      	ldr	r1, [r1, #0]
 8007b7a:	4605      	mov	r5, r0
 8007b7c:	b109      	cbz	r1, 8007b82 <cleanup_glue+0xe>
 8007b7e:	f7ff fff9 	bl	8007b74 <cleanup_glue>
 8007b82:	4621      	mov	r1, r4
 8007b84:	4628      	mov	r0, r5
 8007b86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b8a:	f000 b869 	b.w	8007c60 <_free_r>
	...

08007b90 <_reclaim_reent>:
 8007b90:	4b2c      	ldr	r3, [pc, #176]	; (8007c44 <_reclaim_reent+0xb4>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4283      	cmp	r3, r0
 8007b96:	b570      	push	{r4, r5, r6, lr}
 8007b98:	4604      	mov	r4, r0
 8007b9a:	d051      	beq.n	8007c40 <_reclaim_reent+0xb0>
 8007b9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007b9e:	b143      	cbz	r3, 8007bb2 <_reclaim_reent+0x22>
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d14a      	bne.n	8007c3c <_reclaim_reent+0xac>
 8007ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ba8:	6819      	ldr	r1, [r3, #0]
 8007baa:	b111      	cbz	r1, 8007bb2 <_reclaim_reent+0x22>
 8007bac:	4620      	mov	r0, r4
 8007bae:	f000 f857 	bl	8007c60 <_free_r>
 8007bb2:	6961      	ldr	r1, [r4, #20]
 8007bb4:	b111      	cbz	r1, 8007bbc <_reclaim_reent+0x2c>
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	f000 f852 	bl	8007c60 <_free_r>
 8007bbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007bbe:	b111      	cbz	r1, 8007bc6 <_reclaim_reent+0x36>
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f000 f84d 	bl	8007c60 <_free_r>
 8007bc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007bc8:	b111      	cbz	r1, 8007bd0 <_reclaim_reent+0x40>
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f000 f848 	bl	8007c60 <_free_r>
 8007bd0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007bd2:	b111      	cbz	r1, 8007bda <_reclaim_reent+0x4a>
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	f000 f843 	bl	8007c60 <_free_r>
 8007bda:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007bdc:	b111      	cbz	r1, 8007be4 <_reclaim_reent+0x54>
 8007bde:	4620      	mov	r0, r4
 8007be0:	f000 f83e 	bl	8007c60 <_free_r>
 8007be4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007be6:	b111      	cbz	r1, 8007bee <_reclaim_reent+0x5e>
 8007be8:	4620      	mov	r0, r4
 8007bea:	f000 f839 	bl	8007c60 <_free_r>
 8007bee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007bf0:	b111      	cbz	r1, 8007bf8 <_reclaim_reent+0x68>
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	f000 f834 	bl	8007c60 <_free_r>
 8007bf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bfa:	b111      	cbz	r1, 8007c02 <_reclaim_reent+0x72>
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	f000 f82f 	bl	8007c60 <_free_r>
 8007c02:	69a3      	ldr	r3, [r4, #24]
 8007c04:	b1e3      	cbz	r3, 8007c40 <_reclaim_reent+0xb0>
 8007c06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007c08:	4620      	mov	r0, r4
 8007c0a:	4798      	blx	r3
 8007c0c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007c0e:	b1b9      	cbz	r1, 8007c40 <_reclaim_reent+0xb0>
 8007c10:	4620      	mov	r0, r4
 8007c12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c16:	f7ff bfad 	b.w	8007b74 <cleanup_glue>
 8007c1a:	5949      	ldr	r1, [r1, r5]
 8007c1c:	b941      	cbnz	r1, 8007c30 <_reclaim_reent+0xa0>
 8007c1e:	3504      	adds	r5, #4
 8007c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c22:	2d80      	cmp	r5, #128	; 0x80
 8007c24:	68d9      	ldr	r1, [r3, #12]
 8007c26:	d1f8      	bne.n	8007c1a <_reclaim_reent+0x8a>
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f000 f819 	bl	8007c60 <_free_r>
 8007c2e:	e7ba      	b.n	8007ba6 <_reclaim_reent+0x16>
 8007c30:	680e      	ldr	r6, [r1, #0]
 8007c32:	4620      	mov	r0, r4
 8007c34:	f000 f814 	bl	8007c60 <_free_r>
 8007c38:	4631      	mov	r1, r6
 8007c3a:	e7ef      	b.n	8007c1c <_reclaim_reent+0x8c>
 8007c3c:	2500      	movs	r5, #0
 8007c3e:	e7ef      	b.n	8007c20 <_reclaim_reent+0x90>
 8007c40:	bd70      	pop	{r4, r5, r6, pc}
 8007c42:	bf00      	nop
 8007c44:	20000010 	.word	0x20000010

08007c48 <__malloc_lock>:
 8007c48:	4801      	ldr	r0, [pc, #4]	; (8007c50 <__malloc_lock+0x8>)
 8007c4a:	f7ff bf7b 	b.w	8007b44 <__retarget_lock_acquire_recursive>
 8007c4e:	bf00      	nop
 8007c50:	20001b9c 	.word	0x20001b9c

08007c54 <__malloc_unlock>:
 8007c54:	4801      	ldr	r0, [pc, #4]	; (8007c5c <__malloc_unlock+0x8>)
 8007c56:	f7ff bf76 	b.w	8007b46 <__retarget_lock_release_recursive>
 8007c5a:	bf00      	nop
 8007c5c:	20001b9c 	.word	0x20001b9c

08007c60 <_free_r>:
 8007c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c62:	2900      	cmp	r1, #0
 8007c64:	d044      	beq.n	8007cf0 <_free_r+0x90>
 8007c66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c6a:	9001      	str	r0, [sp, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f1a1 0404 	sub.w	r4, r1, #4
 8007c72:	bfb8      	it	lt
 8007c74:	18e4      	addlt	r4, r4, r3
 8007c76:	f7ff ffe7 	bl	8007c48 <__malloc_lock>
 8007c7a:	4a1e      	ldr	r2, [pc, #120]	; (8007cf4 <_free_r+0x94>)
 8007c7c:	9801      	ldr	r0, [sp, #4]
 8007c7e:	6813      	ldr	r3, [r2, #0]
 8007c80:	b933      	cbnz	r3, 8007c90 <_free_r+0x30>
 8007c82:	6063      	str	r3, [r4, #4]
 8007c84:	6014      	str	r4, [r2, #0]
 8007c86:	b003      	add	sp, #12
 8007c88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c8c:	f7ff bfe2 	b.w	8007c54 <__malloc_unlock>
 8007c90:	42a3      	cmp	r3, r4
 8007c92:	d908      	bls.n	8007ca6 <_free_r+0x46>
 8007c94:	6825      	ldr	r5, [r4, #0]
 8007c96:	1961      	adds	r1, r4, r5
 8007c98:	428b      	cmp	r3, r1
 8007c9a:	bf01      	itttt	eq
 8007c9c:	6819      	ldreq	r1, [r3, #0]
 8007c9e:	685b      	ldreq	r3, [r3, #4]
 8007ca0:	1949      	addeq	r1, r1, r5
 8007ca2:	6021      	streq	r1, [r4, #0]
 8007ca4:	e7ed      	b.n	8007c82 <_free_r+0x22>
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	b10b      	cbz	r3, 8007cb0 <_free_r+0x50>
 8007cac:	42a3      	cmp	r3, r4
 8007cae:	d9fa      	bls.n	8007ca6 <_free_r+0x46>
 8007cb0:	6811      	ldr	r1, [r2, #0]
 8007cb2:	1855      	adds	r5, r2, r1
 8007cb4:	42a5      	cmp	r5, r4
 8007cb6:	d10b      	bne.n	8007cd0 <_free_r+0x70>
 8007cb8:	6824      	ldr	r4, [r4, #0]
 8007cba:	4421      	add	r1, r4
 8007cbc:	1854      	adds	r4, r2, r1
 8007cbe:	42a3      	cmp	r3, r4
 8007cc0:	6011      	str	r1, [r2, #0]
 8007cc2:	d1e0      	bne.n	8007c86 <_free_r+0x26>
 8007cc4:	681c      	ldr	r4, [r3, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	6053      	str	r3, [r2, #4]
 8007cca:	4421      	add	r1, r4
 8007ccc:	6011      	str	r1, [r2, #0]
 8007cce:	e7da      	b.n	8007c86 <_free_r+0x26>
 8007cd0:	d902      	bls.n	8007cd8 <_free_r+0x78>
 8007cd2:	230c      	movs	r3, #12
 8007cd4:	6003      	str	r3, [r0, #0]
 8007cd6:	e7d6      	b.n	8007c86 <_free_r+0x26>
 8007cd8:	6825      	ldr	r5, [r4, #0]
 8007cda:	1961      	adds	r1, r4, r5
 8007cdc:	428b      	cmp	r3, r1
 8007cde:	bf04      	itt	eq
 8007ce0:	6819      	ldreq	r1, [r3, #0]
 8007ce2:	685b      	ldreq	r3, [r3, #4]
 8007ce4:	6063      	str	r3, [r4, #4]
 8007ce6:	bf04      	itt	eq
 8007ce8:	1949      	addeq	r1, r1, r5
 8007cea:	6021      	streq	r1, [r4, #0]
 8007cec:	6054      	str	r4, [r2, #4]
 8007cee:	e7ca      	b.n	8007c86 <_free_r+0x26>
 8007cf0:	b003      	add	sp, #12
 8007cf2:	bd30      	pop	{r4, r5, pc}
 8007cf4:	20001ba0 	.word	0x20001ba0

08007cf8 <_init>:
 8007cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfa:	bf00      	nop
 8007cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cfe:	bc08      	pop	{r3}
 8007d00:	469e      	mov	lr, r3
 8007d02:	4770      	bx	lr

08007d04 <_fini>:
 8007d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d06:	bf00      	nop
 8007d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d0a:	bc08      	pop	{r3}
 8007d0c:	469e      	mov	lr, r3
 8007d0e:	4770      	bx	lr
