
RTOS_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  0800b018  0800b018  0001b018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b44c  0800b44c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b44c  0800b44c  0001b44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b454  0800b454  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b454  0800b454  0001b454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b458  0800b458  0001b458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800b45c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c54  200001d8  0800b634  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e2c  0800b634  00021e2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f537  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dda  00000000  00000000  0003f782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001af0  00000000  00000000  00043560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014e1  00000000  00000000  00045050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004e38  00000000  00000000  00046531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dbd2  00000000  00000000  0004b369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00111c26  00000000  00000000  00068f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008308  00000000  00000000  0017ab64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00182e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800affc 	.word	0x0800affc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800affc 	.word	0x0800affc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea8:	f000 fc66 	bl	8001778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eac:	f000 f834 	bl	8000f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb0:	f000 f90a 	bl	80010c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eb4:	f000 f8d8 	bl	8001068 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000eb8:	f000 f880 	bl	8000fbc <MX_ADC1_Init>
  //HAL_ADC_Start(&hadc1);
  //HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ebc:	f004 fe22 	bl	8005b04 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskADC_IN1 */
  *channel = 0;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <main+0x5c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
  TaskADC_IN1Handle = osThreadNew(StartTaskADC_IN1, (void*) channel, &TaskADC_IN1_attributes);
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <main+0x5c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <main+0x60>)
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480d      	ldr	r0, [pc, #52]	; (8000f08 <main+0x64>)
 8000ed2:	f004 fe61 	bl	8005b98 <osThreadNew>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <main+0x68>)
 8000eda:	6013      	str	r3, [r2, #0]

  /* creation of TaskADC_IN2 */
  *channel = 1;
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <main+0x5c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]
  TaskADC_IN2Handle = osThreadNew(StartTaskADC_IN1, (void*) channel, &TaskADC_IN2_attributes);
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <main+0x5c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a09      	ldr	r2, [pc, #36]	; (8000f10 <main+0x6c>)
 8000eea:	4619      	mov	r1, r3
 8000eec:	4806      	ldr	r0, [pc, #24]	; (8000f08 <main+0x64>)
 8000eee:	f004 fe53 	bl	8005b98 <osThreadNew>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <main+0x70>)
 8000ef6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ef8:	f004 fe28 	bl	8005b4c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <main+0x58>
 8000efe:	bf00      	nop
 8000f00:	200002e8 	.word	0x200002e8
 8000f04:	0800b048 	.word	0x0800b048
 8000f08:	08001201 	.word	0x08001201
 8000f0c:	200002dc 	.word	0x200002dc
 8000f10:	0800b06c 	.word	0x0800b06c
 8000f14:	200002e0 	.word	0x200002e0

08000f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b096      	sub	sp, #88	; 0x58
 8000f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	2244      	movs	r2, #68	; 0x44
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f008 f8c1 	bl	80090ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f3a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f3e:	f002 fad1 	bl	80034e4 <HAL_PWREx_ControlVoltageScaling>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f48:	f000 f992 	bl	8001270 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f54:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f56:	2310      	movs	r3, #16
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f62:	2301      	movs	r3, #1
 8000f64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f66:	230a      	movs	r3, #10
 8000f68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f72:	2302      	movs	r3, #2
 8000f74:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f002 fb08 	bl	8003590 <HAL_RCC_OscConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000f86:	f000 f973 	bl	8001270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8a:	230f      	movs	r3, #15
 8000f8c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	2104      	movs	r1, #4
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f002 fed0 	bl	8003d48 <HAL_RCC_ClockConfig>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fae:	f000 f95f 	bl	8001270 <Error_Handler>
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	3758      	adds	r7, #88	; 0x58
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fcc:	4b24      	ldr	r3, [pc, #144]	; (8001060 <MX_ADC1_Init+0xa4>)
 8000fce:	4a25      	ldr	r2, [pc, #148]	; (8001064 <MX_ADC1_Init+0xa8>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8000fd2:	4b23      	ldr	r3, [pc, #140]	; (8001060 <MX_ADC1_Init+0xa4>)
 8000fd4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000fd8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fda:	4b21      	ldr	r3, [pc, #132]	; (8001060 <MX_ADC1_Init+0xa4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <MX_ADC1_Init+0xa4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <MX_ADC1_Init+0xa4>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000fec:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <MX_ADC1_Init+0xa4>)
 8000fee:	2208      	movs	r2, #8
 8000ff0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ff2:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <MX_ADC1_Init+0xa4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ff8:	4b19      	ldr	r3, [pc, #100]	; (8001060 <MX_ADC1_Init+0xa4>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <MX_ADC1_Init+0xa4>)
 8001000:	2202      	movs	r2, #2
 8001002:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001004:	4b16      	ldr	r3, [pc, #88]	; (8001060 <MX_ADC1_Init+0xa4>)
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <MX_ADC1_Init+0xa4>)
 800100e:	2200      	movs	r2, #0
 8001010:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <MX_ADC1_Init+0xa4>)
 8001014:	2200      	movs	r2, #0
 8001016:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_ADC1_Init+0xa4>)
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <MX_ADC1_Init+0xa4>)
 8001022:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001026:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001028:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <MX_ADC1_Init+0xa4>)
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001030:	480b      	ldr	r0, [pc, #44]	; (8001060 <MX_ADC1_Init+0xa4>)
 8001032:	f000 fe13 	bl	8001c5c <HAL_ADC_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_ADC1_Init+0x84>
  {
    Error_Handler();
 800103c:	f000 f918 	bl	8001270 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001040:	2300      	movs	r3, #0
 8001042:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	4619      	mov	r1, r3
 8001048:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_ADC1_Init+0xa4>)
 800104a:	f001 fee9 	bl	8002e20 <HAL_ADCEx_MultiModeConfigChannel>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001054:	f000 f90c 	bl	8001270 <Error_Handler>
  }*/
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200001f4 	.word	0x200001f4
 8001064:	50040000 	.word	0x50040000

08001068 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_USART2_UART_Init+0x58>)
 800106e:	4a15      	ldr	r2, [pc, #84]	; (80010c4 <MX_USART2_UART_Init+0x5c>)
 8001070:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <MX_USART2_UART_Init+0x58>)
 8001074:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001078:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_USART2_UART_Init+0x58>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_USART2_UART_Init+0x58>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_USART2_UART_Init+0x58>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_USART2_UART_Init+0x58>)
 800108e:	220c      	movs	r2, #12
 8001090:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <MX_USART2_UART_Init+0x58>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_USART2_UART_Init+0x58>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <MX_USART2_UART_Init+0x58>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_USART2_UART_Init+0x58>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <MX_USART2_UART_Init+0x58>)
 80010ac:	f004 f830 	bl	8005110 <HAL_UART_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010b6:	f000 f8db 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000258 	.word	0x20000258
 80010c4:	40004400 	.word	0x40004400

080010c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010de:	4b2b      	ldr	r3, [pc, #172]	; (800118c <MX_GPIO_Init+0xc4>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	4a2a      	ldr	r2, [pc, #168]	; (800118c <MX_GPIO_Init+0xc4>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ea:	4b28      	ldr	r3, [pc, #160]	; (800118c <MX_GPIO_Init+0xc4>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010f6:	4b25      	ldr	r3, [pc, #148]	; (800118c <MX_GPIO_Init+0xc4>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	4a24      	ldr	r2, [pc, #144]	; (800118c <MX_GPIO_Init+0xc4>)
 80010fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001102:	4b22      	ldr	r3, [pc, #136]	; (800118c <MX_GPIO_Init+0xc4>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	4b1f      	ldr	r3, [pc, #124]	; (800118c <MX_GPIO_Init+0xc4>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	4a1e      	ldr	r2, [pc, #120]	; (800118c <MX_GPIO_Init+0xc4>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111a:	4b1c      	ldr	r3, [pc, #112]	; (800118c <MX_GPIO_Init+0xc4>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <MX_GPIO_Init+0xc4>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	4a18      	ldr	r2, [pc, #96]	; (800118c <MX_GPIO_Init+0xc4>)
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001132:	4b16      	ldr	r3, [pc, #88]	; (800118c <MX_GPIO_Init+0xc4>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	2120      	movs	r1, #32
 8001142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001146:	f002 f9a7 	bl	8003498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800114a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800114e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001150:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	480b      	ldr	r0, [pc, #44]	; (8001190 <MX_GPIO_Init+0xc8>)
 8001162:	f001 ffef 	bl	8003144 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001166:	2320      	movs	r3, #32
 8001168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001180:	f001 ffe0 	bl	8003144 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001184:	bf00      	nop
 8001186:	3728      	adds	r7, #40	; 0x28
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40021000 	.word	0x40021000
 8001190:	48000800 	.word	0x48000800

08001194 <ADC_Select_CH>:
    Error_Handler();
  }
}*/

void ADC_Select_CH(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800119a:	463b      	mov	r3, r7
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
 80011a8:	615a      	str	r2, [r3, #20]
  if (*channel == 0)
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <ADC_Select_CH+0x5c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <ADC_Select_CH+0x26>
  {
	sConfig.Channel = ADC_CHANNEL_1;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <ADC_Select_CH+0x60>)
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	e001      	b.n	80011be <ADC_Select_CH+0x2a>
  }
  else
  {
	sConfig.Channel = ADC_CHANNEL_2;
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <ADC_Select_CH+0x64>)
 80011bc:	603b      	str	r3, [r7, #0]
  }
  //{sConfig.Channel = ADC_CHANNEL_1 : sConfig.Channel = ADC_CHANNEL_2;


  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011be:	2306      	movs	r3, #6
 80011c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80011c2:	2301      	movs	r3, #1
 80011c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011c6:	237f      	movs	r3, #127	; 0x7f
 80011c8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011ca:	2304      	movs	r3, #4
 80011cc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d2:	463b      	mov	r3, r7
 80011d4:	4619      	mov	r1, r3
 80011d6:	4809      	ldr	r0, [pc, #36]	; (80011fc <ADC_Select_CH+0x68>)
 80011d8:	f001 f86a 	bl	80022b0 <HAL_ADC_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <ADC_Select_CH+0x52>
  {
    Error_Handler();
 80011e2:	f000 f845 	bl	8001270 <Error_Handler>
  }
}
 80011e6:	bf00      	nop
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200002e8 	.word	0x200002e8
 80011f4:	04300002 	.word	0x04300002
 80011f8:	08600004 	.word	0x08600004
 80011fc:	200001f4 	.word	0x200001f4

08001200 <StartTaskADC_IN1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskADC_IN1 */
void StartTaskADC_IN1(void *argument)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	//HAL_ADC_PollForConversion(&hadc1, 10);
	//printf("%s \n", "ADC Input 1");
	//msg[] = "Hai";
	ADC_Select_CH();
 8001208:	f7ff ffc4 	bl	8001194 <ADC_Select_CH>
	HAL_ADC_Start(&hadc1);
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <StartTaskADC_IN1+0x40>)
 800120e:	f000 fe7b 	bl	8001f08 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001212:	f04f 31ff 	mov.w	r1, #4294967295
 8001216:	480a      	ldr	r0, [pc, #40]	; (8001240 <StartTaskADC_IN1+0x40>)
 8001218:	f000 ff64 	bl	80020e4 <HAL_ADC_PollForConversion>
	adc[*channel] = HAL_ADC_GetValue(&hadc1);
 800121c:	4808      	ldr	r0, [pc, #32]	; (8001240 <StartTaskADC_IN1+0x40>)
 800121e:	f001 f839 	bl	8002294 <HAL_ADC_GetValue>
 8001222:	4602      	mov	r2, r0
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <StartTaskADC_IN1+0x44>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	b291      	uxth	r1, r2
 800122c:	4a06      	ldr	r2, [pc, #24]	; (8001248 <StartTaskADC_IN1+0x48>)
 800122e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	HAL_ADC_Stop(&hadc1);
 8001232:	4803      	ldr	r0, [pc, #12]	; (8001240 <StartTaskADC_IN1+0x40>)
 8001234:	f000 ff22 	bl	800207c <HAL_ADC_Stop>
    osDelay(50);
 8001238:	2032      	movs	r0, #50	; 0x32
 800123a:	f004 fd3f 	bl	8005cbc <osDelay>
	ADC_Select_CH();
 800123e:	e7e3      	b.n	8001208 <StartTaskADC_IN1+0x8>
 8001240:	200001f4 	.word	0x200001f4
 8001244:	200002e8 	.word	0x200002e8
 8001248:	200002e4 	.word	0x200002e4

0800124c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a04      	ldr	r2, [pc, #16]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d101      	bne.n	8001262 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800125e:	f000 faab 	bl	80017b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40012c00 	.word	0x40012c00

08001270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001274:	b672      	cpsid	i
}
 8001276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001278:	e7fe      	b.n	8001278 <Error_Handler+0x8>
	...

0800127c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <HAL_MspInit+0x4c>)
 8001284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001286:	4a10      	ldr	r2, [pc, #64]	; (80012c8 <HAL_MspInit+0x4c>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6613      	str	r3, [r2, #96]	; 0x60
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <HAL_MspInit+0x4c>)
 8001290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_MspInit+0x4c>)
 800129c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129e:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <HAL_MspInit+0x4c>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a4:	6593      	str	r3, [r2, #88]	; 0x58
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <HAL_MspInit+0x4c>)
 80012a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	210f      	movs	r1, #15
 80012b6:	f06f 0001 	mvn.w	r0, #1
 80012ba:	f001 ff19 	bl	80030f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000

080012cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b0ac      	sub	sp, #176	; 0xb0
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	2288      	movs	r2, #136	; 0x88
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f007 fede 	bl	80090ae <memset>
  if(hadc->Instance==ADC1)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a27      	ldr	r2, [pc, #156]	; (8001394 <HAL_ADC_MspInit+0xc8>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d146      	bne.n	800138a <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001300:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001302:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001306:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800130a:	2302      	movs	r3, #2
 800130c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800130e:	2301      	movs	r3, #1
 8001310:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001312:	2308      	movs	r3, #8
 8001314:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001316:	2307      	movs	r3, #7
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800131a:	2302      	movs	r3, #2
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800131e:	2302      	movs	r3, #2
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001322:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001326:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4618      	mov	r0, r3
 800132e:	f002 ff61 	bl	80041f4 <HAL_RCCEx_PeriphCLKConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001338:	f7ff ff9a 	bl	8001270 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800133c:	4b16      	ldr	r3, [pc, #88]	; (8001398 <HAL_ADC_MspInit+0xcc>)
 800133e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001340:	4a15      	ldr	r2, [pc, #84]	; (8001398 <HAL_ADC_MspInit+0xcc>)
 8001342:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001346:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <HAL_ADC_MspInit+0xcc>)
 800134a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001354:	4b10      	ldr	r3, [pc, #64]	; (8001398 <HAL_ADC_MspInit+0xcc>)
 8001356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001358:	4a0f      	ldr	r2, [pc, #60]	; (8001398 <HAL_ADC_MspInit+0xcc>)
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001360:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <HAL_ADC_MspInit+0xcc>)
 8001362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800136c:	2303      	movs	r3, #3
 800136e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001372:	230b      	movs	r3, #11
 8001374:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <HAL_ADC_MspInit+0xd0>)
 8001386:	f001 fedd 	bl	8003144 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800138a:	bf00      	nop
 800138c:	37b0      	adds	r7, #176	; 0xb0
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	50040000 	.word	0x50040000
 8001398:	40021000 	.word	0x40021000
 800139c:	48000800 	.word	0x48000800

080013a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b0ac      	sub	sp, #176	; 0xb0
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2288      	movs	r2, #136	; 0x88
 80013be:	2100      	movs	r1, #0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f007 fe74 	bl	80090ae <memset>
  if(huart->Instance==USART2)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a21      	ldr	r2, [pc, #132]	; (8001450 <HAL_UART_MspInit+0xb0>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d13b      	bne.n	8001448 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4618      	mov	r0, r3
 80013de:	f002 ff09 	bl	80041f4 <HAL_RCCEx_PeriphCLKConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013e8:	f7ff ff42 	bl	8001270 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ec:	4b19      	ldr	r3, [pc, #100]	; (8001454 <HAL_UART_MspInit+0xb4>)
 80013ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f0:	4a18      	ldr	r2, [pc, #96]	; (8001454 <HAL_UART_MspInit+0xb4>)
 80013f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f6:	6593      	str	r3, [r2, #88]	; 0x58
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <HAL_UART_MspInit+0xb4>)
 80013fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <HAL_UART_MspInit+0xb4>)
 8001406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001408:	4a12      	ldr	r2, [pc, #72]	; (8001454 <HAL_UART_MspInit+0xb4>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001410:	4b10      	ldr	r3, [pc, #64]	; (8001454 <HAL_UART_MspInit+0xb4>)
 8001412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800141c:	230c      	movs	r3, #12
 800141e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001434:	2307      	movs	r3, #7
 8001436:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800143e:	4619      	mov	r1, r3
 8001440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001444:	f001 fe7e 	bl	8003144 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001448:	bf00      	nop
 800144a:	37b0      	adds	r7, #176	; 0xb0
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40004400 	.word	0x40004400
 8001454:	40021000 	.word	0x40021000

08001458 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08c      	sub	sp, #48	; 0x30
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001460:	2300      	movs	r3, #0
 8001462:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001466:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <HAL_InitTick+0xc8>)
 8001468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800146a:	4a2d      	ldr	r2, [pc, #180]	; (8001520 <HAL_InitTick+0xc8>)
 800146c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001470:	6613      	str	r3, [r2, #96]	; 0x60
 8001472:	4b2b      	ldr	r3, [pc, #172]	; (8001520 <HAL_InitTick+0xc8>)
 8001474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800147e:	f107 020c 	add.w	r2, r7, #12
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f002 fe21 	bl	80040d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800148e:	f002 fe09 	bl	80040a4 <HAL_RCC_GetPCLK2Freq>
 8001492:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001496:	4a23      	ldr	r2, [pc, #140]	; (8001524 <HAL_InitTick+0xcc>)
 8001498:	fba2 2303 	umull	r2, r3, r2, r3
 800149c:	0c9b      	lsrs	r3, r3, #18
 800149e:	3b01      	subs	r3, #1
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014a2:	4b21      	ldr	r3, [pc, #132]	; (8001528 <HAL_InitTick+0xd0>)
 80014a4:	4a21      	ldr	r2, [pc, #132]	; (800152c <HAL_InitTick+0xd4>)
 80014a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014a8:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <HAL_InitTick+0xd0>)
 80014aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014ae:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014b0:	4a1d      	ldr	r2, [pc, #116]	; (8001528 <HAL_InitTick+0xd0>)
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014b6:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <HAL_InitTick+0xd0>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014bc:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <HAL_InitTick+0xd0>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_InitTick+0xd0>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80014c8:	4817      	ldr	r0, [pc, #92]	; (8001528 <HAL_InitTick+0xd0>)
 80014ca:	f003 fb4f 	bl	8004b6c <HAL_TIM_Base_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80014d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d11b      	bne.n	8001514 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80014dc:	4812      	ldr	r0, [pc, #72]	; (8001528 <HAL_InitTick+0xd0>)
 80014de:	f003 fba7 	bl	8004c30 <HAL_TIM_Base_Start_IT>
 80014e2:	4603      	mov	r3, r0
 80014e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80014e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d111      	bne.n	8001514 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80014f0:	2019      	movs	r0, #25
 80014f2:	f001 fe19 	bl	8003128 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b0f      	cmp	r3, #15
 80014fa:	d808      	bhi.n	800150e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80014fc:	2200      	movs	r2, #0
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	2019      	movs	r0, #25
 8001502:	f001 fdf5 	bl	80030f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <HAL_InitTick+0xd8>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	e002      	b.n	8001514 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001514:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001518:	4618      	mov	r0, r3
 800151a:	3730      	adds	r7, #48	; 0x30
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000
 8001524:	431bde83 	.word	0x431bde83
 8001528:	200002ec 	.word	0x200002ec
 800152c:	40012c00 	.word	0x40012c00
 8001530:	20000004 	.word	0x20000004

08001534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <NMI_Handler+0x4>

0800153a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <HardFault_Handler+0x4>

08001540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <MemManage_Handler+0x4>

08001546 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154a:	e7fe      	b.n	800154a <BusFault_Handler+0x4>

0800154c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <UsageFault_Handler+0x4>

08001552 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001566:	f003 fbd3 	bl	8004d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200002ec 	.word	0x200002ec

08001574 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return 1;
 8001578:	2301      	movs	r3, #1
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <_kill>:

int _kill(int pid, int sig)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800158e:	f007 fe37 	bl	8009200 <__errno>
 8001592:	4603      	mov	r3, r0
 8001594:	2216      	movs	r2, #22
 8001596:	601a      	str	r2, [r3, #0]
  return -1;
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_exit>:

void _exit (int status)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ffe7 	bl	8001584 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015b6:	e7fe      	b.n	80015b6 <_exit+0x12>

080015b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	e00a      	b.n	80015e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015ca:	f3af 8000 	nop.w
 80015ce:	4601      	mov	r1, r0
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	60ba      	str	r2, [r7, #8]
 80015d6:	b2ca      	uxtb	r2, r1
 80015d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	3301      	adds	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbf0      	blt.n	80015ca <_read+0x12>
  }

  return len;
 80015e8:	687b      	ldr	r3, [r7, #4]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b086      	sub	sp, #24
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	e009      	b.n	8001618 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	60ba      	str	r2, [r7, #8]
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	3301      	adds	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	429a      	cmp	r2, r3
 800161e:	dbf1      	blt.n	8001604 <_write+0x12>
  }
  return len;
 8001620:	687b      	ldr	r3, [r7, #4]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <_close>:

int _close(int file)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001652:	605a      	str	r2, [r3, #4]
  return 0;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <_isatty>:

int _isatty(int file)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800166a:	2301      	movs	r3, #1
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800169c:	4a14      	ldr	r2, [pc, #80]	; (80016f0 <_sbrk+0x5c>)
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <_sbrk+0x60>)
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016a8:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <_sbrk+0x64>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d102      	bne.n	80016b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <_sbrk+0x64>)
 80016b2:	4a12      	ldr	r2, [pc, #72]	; (80016fc <_sbrk+0x68>)
 80016b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d207      	bcs.n	80016d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c4:	f007 fd9c 	bl	8009200 <__errno>
 80016c8:	4603      	mov	r3, r0
 80016ca:	220c      	movs	r2, #12
 80016cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	e009      	b.n	80016e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d4:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <_sbrk+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <_sbrk+0x64>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <_sbrk+0x64>)
 80016e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016e6:	68fb      	ldr	r3, [r7, #12]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20018000 	.word	0x20018000
 80016f4:	00000400 	.word	0x00000400
 80016f8:	20000338 	.word	0x20000338
 80016fc:	20001e30 	.word	0x20001e30

08001700 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <SystemInit+0x20>)
 8001706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800170a:	4a05      	ldr	r2, [pc, #20]	; (8001720 <SystemInit+0x20>)
 800170c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001710:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800175c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001728:	f7ff ffea 	bl	8001700 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800172c:	480c      	ldr	r0, [pc, #48]	; (8001760 <LoopForever+0x6>)
  ldr r1, =_edata
 800172e:	490d      	ldr	r1, [pc, #52]	; (8001764 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001730:	4a0d      	ldr	r2, [pc, #52]	; (8001768 <LoopForever+0xe>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001734:	e002      	b.n	800173c <LoopCopyDataInit>

08001736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173a:	3304      	adds	r3, #4

0800173c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800173c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001740:	d3f9      	bcc.n	8001736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001742:	4a0a      	ldr	r2, [pc, #40]	; (800176c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001744:	4c0a      	ldr	r4, [pc, #40]	; (8001770 <LoopForever+0x16>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001748:	e001      	b.n	800174e <LoopFillZerobss>

0800174a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800174c:	3204      	adds	r2, #4

0800174e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001750:	d3fb      	bcc.n	800174a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001752:	f007 fd5b 	bl	800920c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001756:	f7ff fba5 	bl	8000ea4 <main>

0800175a <LoopForever>:

LoopForever:
    b LoopForever
 800175a:	e7fe      	b.n	800175a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800175c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001764:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001768:	0800b45c 	.word	0x0800b45c
  ldr r2, =_sbss
 800176c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001770:	20001e2c 	.word	0x20001e2c

08001774 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001774:	e7fe      	b.n	8001774 <ADC1_2_IRQHandler>
	...

08001778 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <HAL_Init+0x3c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a0b      	ldr	r2, [pc, #44]	; (80017b4 <HAL_Init+0x3c>)
 8001788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800178e:	2003      	movs	r0, #3
 8001790:	f001 fca3 	bl	80030da <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001794:	200f      	movs	r0, #15
 8001796:	f7ff fe5f 	bl	8001458 <HAL_InitTick>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d002      	beq.n	80017a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	71fb      	strb	r3, [r7, #7]
 80017a4:	e001      	b.n	80017aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017a6:	f7ff fd69 	bl	800127c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017aa:	79fb      	ldrb	r3, [r7, #7]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40022000 	.word	0x40022000

080017b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_IncTick+0x20>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_IncTick+0x24>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	4a04      	ldr	r2, [pc, #16]	; (80017dc <HAL_IncTick+0x24>)
 80017ca:	6013      	str	r3, [r2, #0]
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	20000008 	.word	0x20000008
 80017dc:	2000033c 	.word	0x2000033c

080017e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return uwTick;
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <HAL_GetTick+0x14>)
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	2000033c 	.word	0x2000033c

080017f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	609a      	str	r2, [r3, #8]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	609a      	str	r2, [r3, #8]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001860:	b480      	push	{r7}
 8001862:	b087      	sub	sp, #28
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
 800186c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3360      	adds	r3, #96	; 0x60
 8001872:	461a      	mov	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <LL_ADC_SetOffset+0x44>)
 8001882:	4013      	ands	r3, r2
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	4313      	orrs	r3, r2
 8001890:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001898:	bf00      	nop
 800189a:	371c      	adds	r7, #28
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	03fff000 	.word	0x03fff000

080018a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3360      	adds	r3, #96	; 0x60
 80018b6:	461a      	mov	r2, r3
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b087      	sub	sp, #28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3360      	adds	r3, #96	; 0x60
 80018e4:	461a      	mov	r2, r3
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	431a      	orrs	r2, r3
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018fe:	bf00      	nop
 8001900:	371c      	adds	r7, #28
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001930:	b480      	push	{r7}
 8001932:	b087      	sub	sp, #28
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	3330      	adds	r3, #48	; 0x30
 8001940:	461a      	mov	r2, r3
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	f003 030c 	and.w	r3, r3, #12
 800194c:	4413      	add	r3, r2
 800194e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	f003 031f 	and.w	r3, r3, #31
 800195a:	211f      	movs	r1, #31
 800195c:	fa01 f303 	lsl.w	r3, r1, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	401a      	ands	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	0e9b      	lsrs	r3, r3, #26
 8001968:	f003 011f 	and.w	r1, r3, #31
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f003 031f 	and.w	r3, r3, #31
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	431a      	orrs	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800197c:	bf00      	nop
 800197e:	371c      	adds	r7, #28
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	3314      	adds	r3, #20
 8001998:	461a      	mov	r2, r3
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	0e5b      	lsrs	r3, r3, #25
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	4413      	add	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	0d1b      	lsrs	r3, r3, #20
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	2107      	movs	r1, #7
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	401a      	ands	r2, r3
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	0d1b      	lsrs	r3, r3, #20
 80019c2:	f003 031f 	and.w	r3, r3, #31
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	fa01 f303 	lsl.w	r3, r1, r3
 80019cc:	431a      	orrs	r2, r3
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019d2:	bf00      	nop
 80019d4:	371c      	adds	r7, #28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f8:	43db      	mvns	r3, r3
 80019fa:	401a      	ands	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f003 0318 	and.w	r3, r3, #24
 8001a02:	4908      	ldr	r1, [pc, #32]	; (8001a24 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a04:	40d9      	lsrs	r1, r3
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	400b      	ands	r3, r1
 8001a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a16:	bf00      	nop
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	0007ffff 	.word	0x0007ffff

08001a28 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 031f 	and.w	r3, r3, #31
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6093      	str	r3, [r2, #8]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a98:	d101      	bne.n	8001a9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001abc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ac0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ae8:	d101      	bne.n	8001aee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b10:	f043 0201 	orr.w	r2, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b38:	f043 0202 	orr.w	r2, r3, #2
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <LL_ADC_IsEnabled+0x18>
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <LL_ADC_IsEnabled+0x1a>
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d101      	bne.n	8001b8a <LL_ADC_IsDisableOngoing+0x18>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <LL_ADC_IsDisableOngoing+0x1a>
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ba8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bac:	f043 0204 	orr.w	r2, r3, #4
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bd4:	f043 0210 	orr.w	r2, r3, #16
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d101      	bne.n	8001c00 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e000      	b.n	8001c02 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c22:	f043 0220 	orr.w	r2, r3, #32
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d101      	bne.n	8001c4e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c5c:	b590      	push	{r4, r7, lr}
 8001c5e:	b089      	sub	sp, #36	; 0x24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e136      	b.n	8001ee4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d109      	bne.n	8001c98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff fb21 	bl	80012cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fef1 	bl	8001a84 <LL_ADC_IsDeepPowerDownEnabled>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d004      	beq.n	8001cb2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fed7 	bl	8001a60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff ff0c 	bl	8001ad4 <LL_ADC_IsInternalRegulatorEnabled>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d115      	bne.n	8001cee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fef0 	bl	8001aac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ccc:	4b87      	ldr	r3, [pc, #540]	; (8001eec <HAL_ADC_Init+0x290>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	099b      	lsrs	r3, r3, #6
 8001cd2:	4a87      	ldr	r2, [pc, #540]	; (8001ef0 <HAL_ADC_Init+0x294>)
 8001cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd8:	099b      	lsrs	r3, r3, #6
 8001cda:	3301      	adds	r3, #1
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ce0:	e002      	b.n	8001ce8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f9      	bne.n	8001ce2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff feee 	bl	8001ad4 <LL_ADC_IsInternalRegulatorEnabled>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10d      	bne.n	8001d1a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d02:	f043 0210 	orr.w	r2, r3, #16
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0e:	f043 0201 	orr.w	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ff62 	bl	8001be8 <LL_ADC_REG_IsConversionOngoing>
 8001d24:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2a:	f003 0310 	and.w	r3, r3, #16
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f040 80cf 	bne.w	8001ed2 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f040 80cb 	bne.w	8001ed2 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d40:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d44:	f043 0202 	orr.w	r2, r3, #2
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fefb 	bl	8001b4c <LL_ADC_IsEnabled>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d115      	bne.n	8001d88 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d5c:	4865      	ldr	r0, [pc, #404]	; (8001ef4 <HAL_ADC_Init+0x298>)
 8001d5e:	f7ff fef5 	bl	8001b4c <LL_ADC_IsEnabled>
 8001d62:	4604      	mov	r4, r0
 8001d64:	4864      	ldr	r0, [pc, #400]	; (8001ef8 <HAL_ADC_Init+0x29c>)
 8001d66:	f7ff fef1 	bl	8001b4c <LL_ADC_IsEnabled>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	431c      	orrs	r4, r3
 8001d6e:	4863      	ldr	r0, [pc, #396]	; (8001efc <HAL_ADC_Init+0x2a0>)
 8001d70:	f7ff feec 	bl	8001b4c <LL_ADC_IsEnabled>
 8001d74:	4603      	mov	r3, r0
 8001d76:	4323      	orrs	r3, r4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d105      	bne.n	8001d88 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4619      	mov	r1, r3
 8001d82:	485f      	ldr	r0, [pc, #380]	; (8001f00 <HAL_ADC_Init+0x2a4>)
 8001d84:	f7ff fd38 	bl	80017f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	7e5b      	ldrb	r3, [r3, #25]
 8001d8c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d92:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001d98:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001d9e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d106      	bne.n	8001dc4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	045b      	lsls	r3, r3, #17
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d009      	beq.n	8001de0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	4b47      	ldr	r3, [pc, #284]	; (8001f04 <HAL_ADC_Init+0x2a8>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	69b9      	ldr	r1, [r7, #24]
 8001df0:	430b      	orrs	r3, r1
 8001df2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fef5 	bl	8001be8 <LL_ADC_REG_IsConversionOngoing>
 8001dfe:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff16 	bl	8001c36 <LL_ADC_INJ_IsConversionOngoing>
 8001e0a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d13d      	bne.n	8001e8e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d13a      	bne.n	8001e8e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e1c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e24:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e34:	f023 0302 	bic.w	r3, r3, #2
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	69b9      	ldr	r1, [r7, #24]
 8001e3e:	430b      	orrs	r3, r1
 8001e40:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d118      	bne.n	8001e7e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e56:	f023 0304 	bic.w	r3, r3, #4
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e62:	4311      	orrs	r1, r2
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e68:	4311      	orrs	r1, r2
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0201 	orr.w	r2, r2, #1
 8001e7a:	611a      	str	r2, [r3, #16]
 8001e7c:	e007      	b.n	8001e8e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	691a      	ldr	r2, [r3, #16]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0201 	bic.w	r2, r2, #1
 8001e8c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d10c      	bne.n	8001eb0 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	f023 010f 	bic.w	r1, r3, #15
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	1e5a      	subs	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	631a      	str	r2, [r3, #48]	; 0x30
 8001eae:	e007      	b.n	8001ec0 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 020f 	bic.w	r2, r2, #15
 8001ebe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec4:	f023 0303 	bic.w	r3, r3, #3
 8001ec8:	f043 0201 	orr.w	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	655a      	str	r2, [r3, #84]	; 0x54
 8001ed0:	e007      	b.n	8001ee2 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed6:	f043 0210 	orr.w	r2, r3, #16
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ee2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3724      	adds	r7, #36	; 0x24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd90      	pop	{r4, r7, pc}
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	053e2d63 	.word	0x053e2d63
 8001ef4:	50040000 	.word	0x50040000
 8001ef8:	50040100 	.word	0x50040100
 8001efc:	50040200 	.word	0x50040200
 8001f00:	50040300 	.word	0x50040300
 8001f04:	fff0c007 	.word	0xfff0c007

08001f08 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f10:	4857      	ldr	r0, [pc, #348]	; (8002070 <HAL_ADC_Start+0x168>)
 8001f12:	f7ff fd89 	bl	8001a28 <LL_ADC_GetMultimode>
 8001f16:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fe63 	bl	8001be8 <LL_ADC_REG_IsConversionOngoing>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f040 809c 	bne.w	8002062 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_ADC_Start+0x30>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e097      	b.n	8002068 <HAL_ADC_Start+0x160>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 fe61 	bl	8002c08 <ADC_Enable>
 8001f46:	4603      	mov	r3, r0
 8001f48:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f4a:	7dfb      	ldrb	r3, [r7, #23]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f040 8083 	bne.w	8002058 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f56:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f5a:	f023 0301 	bic.w	r3, r3, #1
 8001f5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a42      	ldr	r2, [pc, #264]	; (8002074 <HAL_ADC_Start+0x16c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d002      	beq.n	8001f76 <HAL_ADC_Start+0x6e>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	e000      	b.n	8001f78 <HAL_ADC_Start+0x70>
 8001f76:	4b40      	ldr	r3, [pc, #256]	; (8002078 <HAL_ADC_Start+0x170>)
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d002      	beq.n	8001f86 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d105      	bne.n	8001f92 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f9e:	d106      	bne.n	8001fae <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa4:	f023 0206 	bic.w	r2, r3, #6
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	659a      	str	r2, [r3, #88]	; 0x58
 8001fac:	e002      	b.n	8001fb4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	221c      	movs	r2, #28
 8001fba:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a2a      	ldr	r2, [pc, #168]	; (8002074 <HAL_ADC_Start+0x16c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d002      	beq.n	8001fd4 <HAL_ADC_Start+0xcc>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	e000      	b.n	8001fd6 <HAL_ADC_Start+0xce>
 8001fd4:	4b28      	ldr	r3, [pc, #160]	; (8002078 <HAL_ADC_Start+0x170>)
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6812      	ldr	r2, [r2, #0]
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d008      	beq.n	8001ff0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	2b05      	cmp	r3, #5
 8001fe8:	d002      	beq.n	8001ff0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	2b09      	cmp	r3, #9
 8001fee:	d114      	bne.n	800201a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d007      	beq.n	800200e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002002:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002006:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fdc0 	bl	8001b98 <LL_ADC_REG_StartConversion>
 8002018:	e025      	b.n	8002066 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a12      	ldr	r2, [pc, #72]	; (8002074 <HAL_ADC_Start+0x16c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d002      	beq.n	8002036 <HAL_ADC_Start+0x12e>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	e000      	b.n	8002038 <HAL_ADC_Start+0x130>
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <HAL_ADC_Start+0x170>)
 8002038:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00f      	beq.n	8002066 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800204e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	655a      	str	r2, [r3, #84]	; 0x54
 8002056:	e006      	b.n	8002066 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002060:	e001      	b.n	8002066 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002062:	2302      	movs	r3, #2
 8002064:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002066:	7dfb      	ldrb	r3, [r7, #23]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	50040300 	.word	0x50040300
 8002074:	50040100 	.word	0x50040100
 8002078:	50040000 	.word	0x50040000

0800207c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_ADC_Stop+0x16>
 800208e:	2302      	movs	r3, #2
 8002090:	e023      	b.n	80020da <HAL_ADC_Stop+0x5e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800209a:	2103      	movs	r1, #3
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 fcf7 	bl	8002a90 <ADC_ConversionStop>
 80020a2:	4603      	mov	r3, r0
 80020a4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d111      	bne.n	80020d0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 fe31 	bl	8002d14 <ADC_Disable>
 80020b2:	4603      	mov	r3, r0
 80020b4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d109      	bne.n	80020d0 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020c4:	f023 0301 	bic.w	r3, r3, #1
 80020c8:	f043 0201 	orr.w	r2, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020ee:	4866      	ldr	r0, [pc, #408]	; (8002288 <HAL_ADC_PollForConversion+0x1a4>)
 80020f0:	f7ff fc9a 	bl	8001a28 <LL_ADC_GetMultimode>
 80020f4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d102      	bne.n	8002104 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80020fe:	2308      	movs	r3, #8
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	e02a      	b.n	800215a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2b05      	cmp	r3, #5
 800210e:	d002      	beq.n	8002116 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2b09      	cmp	r3, #9
 8002114:	d111      	bne.n	800213a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	d007      	beq.n	8002134 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002128:	f043 0220 	orr.w	r2, r3, #32
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e0a4      	b.n	800227e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002134:	2304      	movs	r3, #4
 8002136:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002138:	e00f      	b.n	800215a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800213a:	4853      	ldr	r0, [pc, #332]	; (8002288 <HAL_ADC_PollForConversion+0x1a4>)
 800213c:	f7ff fc82 	bl	8001a44 <LL_ADC_GetMultiDMATransfer>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d007      	beq.n	8002156 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214a:	f043 0220 	orr.w	r2, r3, #32
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e093      	b.n	800227e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002156:	2304      	movs	r3, #4
 8002158:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800215a:	f7ff fb41 	bl	80017e0 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002160:	e021      	b.n	80021a6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002168:	d01d      	beq.n	80021a6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800216a:	f7ff fb39 	bl	80017e0 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d302      	bcc.n	8002180 <HAL_ADC_PollForConversion+0x9c>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d112      	bne.n	80021a6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	4013      	ands	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10b      	bne.n	80021a6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002192:	f043 0204 	orr.w	r2, r3, #4
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e06b      	b.n	800227e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0d6      	beq.n	8002162 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fba0 	bl	800190a <LL_ADC_REG_IsTriggerSourceSWStart>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d01c      	beq.n	800220a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	7e5b      	ldrb	r3, [r3, #25]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d118      	bne.n	800220a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d111      	bne.n	800220a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d105      	bne.n	800220a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002202:	f043 0201 	orr.w	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a1f      	ldr	r2, [pc, #124]	; (800228c <HAL_ADC_PollForConversion+0x1a8>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d002      	beq.n	800221a <HAL_ADC_PollForConversion+0x136>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	e000      	b.n	800221c <HAL_ADC_PollForConversion+0x138>
 800221a:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <HAL_ADC_PollForConversion+0x1ac>)
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	4293      	cmp	r3, r2
 8002222:	d008      	beq.n	8002236 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d005      	beq.n	8002236 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2b05      	cmp	r3, #5
 800222e:	d002      	beq.n	8002236 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	2b09      	cmp	r3, #9
 8002234:	d104      	bne.n	8002240 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	61bb      	str	r3, [r7, #24]
 800223e:	e00c      	b.n	800225a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a11      	ldr	r2, [pc, #68]	; (800228c <HAL_ADC_PollForConversion+0x1a8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d002      	beq.n	8002250 <HAL_ADC_PollForConversion+0x16c>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	e000      	b.n	8002252 <HAL_ADC_PollForConversion+0x16e>
 8002250:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <HAL_ADC_PollForConversion+0x1ac>)
 8002252:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	2b08      	cmp	r3, #8
 800225e:	d104      	bne.n	800226a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2208      	movs	r2, #8
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	e008      	b.n	800227c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d103      	bne.n	800227c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	220c      	movs	r2, #12
 800227a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3720      	adds	r7, #32
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	50040300 	.word	0x50040300
 800228c:	50040100 	.word	0x50040100
 8002290:	50040000 	.word	0x50040000

08002294 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
	...

080022b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b0b6      	sub	sp, #216	; 0xd8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d101      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x22>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e3c7      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x7b2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fc82 	bl	8001be8 <LL_ADC_REG_IsConversionOngoing>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f040 83a8 	bne.w	8002a3c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b05      	cmp	r3, #5
 80022f2:	d824      	bhi.n	800233e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	3b02      	subs	r3, #2
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d81b      	bhi.n	8002336 <HAL_ADC_ConfigChannel+0x86>
 80022fe:	a201      	add	r2, pc, #4	; (adr r2, 8002304 <HAL_ADC_ConfigChannel+0x54>)
 8002300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002304:	08002315 	.word	0x08002315
 8002308:	0800231d 	.word	0x0800231d
 800230c:	08002325 	.word	0x08002325
 8002310:	0800232d 	.word	0x0800232d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	220c      	movs	r2, #12
 8002318:	605a      	str	r2, [r3, #4]
          break;
 800231a:	e010      	b.n	800233e <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	2212      	movs	r2, #18
 8002320:	605a      	str	r2, [r3, #4]
          break;
 8002322:	e00c      	b.n	800233e <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	2218      	movs	r2, #24
 8002328:	605a      	str	r2, [r3, #4]
          break;
 800232a:	e008      	b.n	800233e <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002332:	605a      	str	r2, [r3, #4]
          break;
 8002334:	e003      	b.n	800233e <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2206      	movs	r2, #6
 800233a:	605a      	str	r2, [r3, #4]
          break;
 800233c:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	6859      	ldr	r1, [r3, #4]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	f7ff faf0 	bl	8001930 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fc47 	bl	8001be8 <LL_ADC_REG_IsConversionOngoing>
 800235a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fc67 	bl	8001c36 <LL_ADC_INJ_IsConversionOngoing>
 8002368:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800236c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002370:	2b00      	cmp	r3, #0
 8002372:	f040 81a6 	bne.w	80026c2 <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002376:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800237a:	2b00      	cmp	r3, #0
 800237c:	f040 81a1 	bne.w	80026c2 <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6819      	ldr	r1, [r3, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	461a      	mov	r2, r3
 800238e:	f7ff fafb 	bl	8001988 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	695a      	ldr	r2, [r3, #20]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	08db      	lsrs	r3, r3, #3
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d00a      	beq.n	80023ca <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6818      	ldr	r0, [r3, #0]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	6919      	ldr	r1, [r3, #16]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80023c4:	f7ff fa4c 	bl	8001860 <LL_ADC_SetOffset>
 80023c8:	e17b      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fa69 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10a      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x146>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fa5e 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 80023ec:	4603      	mov	r3, r0
 80023ee:	0e9b      	lsrs	r3, r3, #26
 80023f0:	f003 021f 	and.w	r2, r3, #31
 80023f4:	e01e      	b.n	8002434 <HAL_ADC_ConfigChannel+0x184>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2100      	movs	r1, #0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fa53 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002402:	4603      	mov	r3, r0
 8002404:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800240c:	fa93 f3a3 	rbit	r3, r3
 8002410:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002414:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002418:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800241c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 8002424:	2320      	movs	r3, #32
 8002426:	e004      	b.n	8002432 <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 8002428:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800242c:	fab3 f383 	clz	r3, r3
 8002430:	b2db      	uxtb	r3, r3
 8002432:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243c:	2b00      	cmp	r3, #0
 800243e:	d105      	bne.n	800244c <HAL_ADC_ConfigChannel+0x19c>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	0e9b      	lsrs	r3, r3, #26
 8002446:	f003 031f 	and.w	r3, r3, #31
 800244a:	e018      	b.n	800247e <HAL_ADC_ConfigChannel+0x1ce>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002454:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002458:	fa93 f3a3 	rbit	r3, r3
 800245c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002460:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002468:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 8002470:	2320      	movs	r3, #32
 8002472:	e004      	b.n	800247e <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 8002474:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002478:	fab3 f383 	clz	r3, r3
 800247c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800247e:	429a      	cmp	r2, r3
 8002480:	d106      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2200      	movs	r2, #0
 8002488:	2100      	movs	r1, #0
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fa22 	bl	80018d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2101      	movs	r1, #1
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fa06 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 800249c:	4603      	mov	r3, r0
 800249e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10a      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x20c>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2101      	movs	r1, #1
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff f9fb 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 80024b2:	4603      	mov	r3, r0
 80024b4:	0e9b      	lsrs	r3, r3, #26
 80024b6:	f003 021f 	and.w	r2, r3, #31
 80024ba:	e01e      	b.n	80024fa <HAL_ADC_ConfigChannel+0x24a>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2101      	movs	r1, #1
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff f9f0 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024d2:	fa93 f3a3 	rbit	r3, r3
 80024d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80024da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80024e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 80024ea:	2320      	movs	r3, #32
 80024ec:	e004      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 80024ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024f2:	fab3 f383 	clz	r3, r3
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002502:	2b00      	cmp	r3, #0
 8002504:	d105      	bne.n	8002512 <HAL_ADC_ConfigChannel+0x262>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	0e9b      	lsrs	r3, r3, #26
 800250c:	f003 031f 	and.w	r3, r3, #31
 8002510:	e018      	b.n	8002544 <HAL_ADC_ConfigChannel+0x294>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800251e:	fa93 f3a3 	rbit	r3, r3
 8002522:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002526:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800252a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800252e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 8002536:	2320      	movs	r3, #32
 8002538:	e004      	b.n	8002544 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 800253a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002544:	429a      	cmp	r2, r3
 8002546:	d106      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2200      	movs	r2, #0
 800254e:	2101      	movs	r1, #1
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff f9bf 	bl	80018d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2102      	movs	r1, #2
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff f9a3 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002562:	4603      	mov	r3, r0
 8002564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10a      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x2d2>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2102      	movs	r1, #2
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff f998 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002578:	4603      	mov	r3, r0
 800257a:	0e9b      	lsrs	r3, r3, #26
 800257c:	f003 021f 	and.w	r2, r3, #31
 8002580:	e01e      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x310>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2102      	movs	r1, #2
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff f98d 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 800258e:	4603      	mov	r3, r0
 8002590:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002598:	fa93 f3a3 	rbit	r3, r3
 800259c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80025a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80025a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 80025b0:	2320      	movs	r3, #32
 80025b2:	e004      	b.n	80025be <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80025b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025b8:	fab3 f383 	clz	r3, r3
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d105      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x328>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	0e9b      	lsrs	r3, r3, #26
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	e016      	b.n	8002606 <HAL_ADC_ConfigChannel+0x356>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80025ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80025f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 80025f8:	2320      	movs	r3, #32
 80025fa:	e004      	b.n	8002606 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 80025fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002600:	fab3 f383 	clz	r3, r3
 8002604:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002606:	429a      	cmp	r2, r3
 8002608:	d106      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2200      	movs	r2, #0
 8002610:	2102      	movs	r1, #2
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff f95e 	bl	80018d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2103      	movs	r1, #3
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff f942 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002624:	4603      	mov	r3, r0
 8002626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10a      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x394>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2103      	movs	r1, #3
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff f937 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 800263a:	4603      	mov	r3, r0
 800263c:	0e9b      	lsrs	r3, r3, #26
 800263e:	f003 021f 	and.w	r2, r3, #31
 8002642:	e017      	b.n	8002674 <HAL_ADC_ConfigChannel+0x3c4>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2103      	movs	r1, #3
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff f92c 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002650:	4603      	mov	r3, r0
 8002652:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800265c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800265e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8002666:	2320      	movs	r3, #32
 8002668:	e003      	b.n	8002672 <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 800266a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800266c:	fab3 f383 	clz	r3, r3
 8002670:	b2db      	uxtb	r3, r3
 8002672:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267c:	2b00      	cmp	r3, #0
 800267e:	d105      	bne.n	800268c <HAL_ADC_ConfigChannel+0x3dc>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0e9b      	lsrs	r3, r3, #26
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	e011      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x400>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002694:	fa93 f3a3 	rbit	r3, r3
 8002698:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800269a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800269c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800269e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 80026a4:	2320      	movs	r3, #32
 80026a6:	e003      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 80026a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026aa:	fab3 f383 	clz	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d106      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2200      	movs	r2, #0
 80026ba:	2103      	movs	r1, #3
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff f909 	bl	80018d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fa40 	bl	8001b4c <LL_ADC_IsEnabled>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f040 8140 	bne.w	8002954 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	6819      	ldr	r1, [r3, #0]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	461a      	mov	r2, r3
 80026e2:	f7ff f97d 	bl	80019e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	4a8f      	ldr	r2, [pc, #572]	; (8002928 <HAL_ADC_ConfigChannel+0x678>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	f040 8131 	bne.w	8002954 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10b      	bne.n	800271a <HAL_ADC_ConfigChannel+0x46a>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	0e9b      	lsrs	r3, r3, #26
 8002708:	3301      	adds	r3, #1
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	2b09      	cmp	r3, #9
 8002710:	bf94      	ite	ls
 8002712:	2301      	movls	r3, #1
 8002714:	2300      	movhi	r3, #0
 8002716:	b2db      	uxtb	r3, r3
 8002718:	e019      	b.n	800274e <HAL_ADC_ConfigChannel+0x49e>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002728:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800272a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800272c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 8002732:	2320      	movs	r3, #32
 8002734:	e003      	b.n	800273e <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8002736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002738:	fab3 f383 	clz	r3, r3
 800273c:	b2db      	uxtb	r3, r3
 800273e:	3301      	adds	r3, #1
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	2b09      	cmp	r3, #9
 8002746:	bf94      	ite	ls
 8002748:	2301      	movls	r3, #1
 800274a:	2300      	movhi	r3, #0
 800274c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800274e:	2b00      	cmp	r3, #0
 8002750:	d079      	beq.n	8002846 <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800275a:	2b00      	cmp	r3, #0
 800275c:	d107      	bne.n	800276e <HAL_ADC_ConfigChannel+0x4be>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	0e9b      	lsrs	r3, r3, #26
 8002764:	3301      	adds	r3, #1
 8002766:	069b      	lsls	r3, r3, #26
 8002768:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800276c:	e015      	b.n	800279a <HAL_ADC_ConfigChannel+0x4ea>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002776:	fa93 f3a3 	rbit	r3, r3
 800277a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800277c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800277e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8002786:	2320      	movs	r3, #32
 8002788:	e003      	b.n	8002792 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 800278a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800278c:	fab3 f383 	clz	r3, r3
 8002790:	b2db      	uxtb	r3, r3
 8002792:	3301      	adds	r3, #1
 8002794:	069b      	lsls	r3, r3, #26
 8002796:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x50a>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	0e9b      	lsrs	r3, r3, #26
 80027ac:	3301      	adds	r3, #1
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	2101      	movs	r1, #1
 80027b4:	fa01 f303 	lsl.w	r3, r1, r3
 80027b8:	e017      	b.n	80027ea <HAL_ADC_ConfigChannel+0x53a>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027c2:	fa93 f3a3 	rbit	r3, r3
 80027c6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80027c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80027cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 80027d2:	2320      	movs	r3, #32
 80027d4:	e003      	b.n	80027de <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 80027d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027d8:	fab3 f383 	clz	r3, r3
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	3301      	adds	r3, #1
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	2101      	movs	r1, #1
 80027e6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ea:	ea42 0103 	orr.w	r1, r2, r3
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10a      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x560>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	0e9b      	lsrs	r3, r3, #26
 8002800:	3301      	adds	r3, #1
 8002802:	f003 021f 	and.w	r2, r3, #31
 8002806:	4613      	mov	r3, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4413      	add	r3, r2
 800280c:	051b      	lsls	r3, r3, #20
 800280e:	e018      	b.n	8002842 <HAL_ADC_ConfigChannel+0x592>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002818:	fa93 f3a3 	rbit	r3, r3
 800281c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800281e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002820:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002828:	2320      	movs	r3, #32
 800282a:	e003      	b.n	8002834 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 800282c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800282e:	fab3 f383 	clz	r3, r3
 8002832:	b2db      	uxtb	r3, r3
 8002834:	3301      	adds	r3, #1
 8002836:	f003 021f 	and.w	r2, r3, #31
 800283a:	4613      	mov	r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	4413      	add	r3, r2
 8002840:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002842:	430b      	orrs	r3, r1
 8002844:	e081      	b.n	800294a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284e:	2b00      	cmp	r3, #0
 8002850:	d107      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x5b2>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	0e9b      	lsrs	r3, r3, #26
 8002858:	3301      	adds	r3, #1
 800285a:	069b      	lsls	r3, r3, #26
 800285c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002860:	e015      	b.n	800288e <HAL_ADC_ConfigChannel+0x5de>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002872:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 800287a:	2320      	movs	r3, #32
 800287c:	e003      	b.n	8002886 <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 800287e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002880:	fab3 f383 	clz	r3, r3
 8002884:	b2db      	uxtb	r3, r3
 8002886:	3301      	adds	r3, #1
 8002888:	069b      	lsls	r3, r3, #26
 800288a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002896:	2b00      	cmp	r3, #0
 8002898:	d109      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x5fe>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	0e9b      	lsrs	r3, r3, #26
 80028a0:	3301      	adds	r3, #1
 80028a2:	f003 031f 	and.w	r3, r3, #31
 80028a6:	2101      	movs	r1, #1
 80028a8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ac:	e017      	b.n	80028de <HAL_ADC_ConfigChannel+0x62e>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	61fb      	str	r3, [r7, #28]
  return result;
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 80028c6:	2320      	movs	r3, #32
 80028c8:	e003      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	fab3 f383 	clz	r3, r3
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	3301      	adds	r3, #1
 80028d4:	f003 031f 	and.w	r3, r3, #31
 80028d8:	2101      	movs	r1, #1
 80028da:	fa01 f303 	lsl.w	r3, r1, r3
 80028de:	ea42 0103 	orr.w	r1, r2, r3
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10d      	bne.n	800290a <HAL_ADC_ConfigChannel+0x65a>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	0e9b      	lsrs	r3, r3, #26
 80028f4:	3301      	adds	r3, #1
 80028f6:	f003 021f 	and.w	r2, r3, #31
 80028fa:	4613      	mov	r3, r2
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	4413      	add	r3, r2
 8002900:	3b1e      	subs	r3, #30
 8002902:	051b      	lsls	r3, r3, #20
 8002904:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002908:	e01e      	b.n	8002948 <HAL_ADC_ConfigChannel+0x698>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	613b      	str	r3, [r7, #16]
  return result;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d104      	bne.n	800292c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002922:	2320      	movs	r3, #32
 8002924:	e006      	b.n	8002934 <HAL_ADC_ConfigChannel+0x684>
 8002926:	bf00      	nop
 8002928:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	3301      	adds	r3, #1
 8002936:	f003 021f 	and.w	r2, r3, #31
 800293a:	4613      	mov	r3, r2
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	4413      	add	r3, r2
 8002940:	3b1e      	subs	r3, #30
 8002942:	051b      	lsls	r3, r3, #20
 8002944:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002948:	430b      	orrs	r3, r1
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	6892      	ldr	r2, [r2, #8]
 800294e:	4619      	mov	r1, r3
 8002950:	f7ff f81a 	bl	8001988 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4b44      	ldr	r3, [pc, #272]	; (8002a6c <HAL_ADC_ConfigChannel+0x7bc>)
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d07a      	beq.n	8002a56 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002960:	4843      	ldr	r0, [pc, #268]	; (8002a70 <HAL_ADC_ConfigChannel+0x7c0>)
 8002962:	f7fe ff6f 	bl	8001844 <LL_ADC_GetCommonPathInternalCh>
 8002966:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a41      	ldr	r2, [pc, #260]	; (8002a74 <HAL_ADC_ConfigChannel+0x7c4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d12c      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002974:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002978:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d126      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a3c      	ldr	r2, [pc, #240]	; (8002a78 <HAL_ADC_ConfigChannel+0x7c8>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d004      	beq.n	8002994 <HAL_ADC_ConfigChannel+0x6e4>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a3b      	ldr	r2, [pc, #236]	; (8002a7c <HAL_ADC_ConfigChannel+0x7cc>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d15d      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002994:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002998:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800299c:	4619      	mov	r1, r3
 800299e:	4834      	ldr	r0, [pc, #208]	; (8002a70 <HAL_ADC_ConfigChannel+0x7c0>)
 80029a0:	f7fe ff3d 	bl	800181e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029a4:	4b36      	ldr	r3, [pc, #216]	; (8002a80 <HAL_ADC_ConfigChannel+0x7d0>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	099b      	lsrs	r3, r3, #6
 80029aa:	4a36      	ldr	r2, [pc, #216]	; (8002a84 <HAL_ADC_ConfigChannel+0x7d4>)
 80029ac:	fba2 2303 	umull	r2, r3, r2, r3
 80029b0:	099b      	lsrs	r3, r3, #6
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	4613      	mov	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029be:	e002      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f9      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029cc:	e040      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a2d      	ldr	r2, [pc, #180]	; (8002a88 <HAL_ADC_ConfigChannel+0x7d8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d118      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x75a>
 80029d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d112      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a23      	ldr	r2, [pc, #140]	; (8002a78 <HAL_ADC_ConfigChannel+0x7c8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d004      	beq.n	80029f8 <HAL_ADC_ConfigChannel+0x748>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a22      	ldr	r2, [pc, #136]	; (8002a7c <HAL_ADC_ConfigChannel+0x7cc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d12d      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a00:	4619      	mov	r1, r3
 8002a02:	481b      	ldr	r0, [pc, #108]	; (8002a70 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a04:	f7fe ff0b 	bl	800181e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a08:	e024      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a1f      	ldr	r2, [pc, #124]	; (8002a8c <HAL_ADC_ConfigChannel+0x7dc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d120      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d11a      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a14      	ldr	r2, [pc, #80]	; (8002a78 <HAL_ADC_ConfigChannel+0x7c8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d115      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a32:	4619      	mov	r1, r3
 8002a34:	480e      	ldr	r0, [pc, #56]	; (8002a70 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a36:	f7fe fef2 	bl	800181e <LL_ADC_SetCommonPathInternalCh>
 8002a3a:	e00c      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a40:	f043 0220 	orr.w	r2, r3, #32
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002a4e:	e002      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a50:	bf00      	nop
 8002a52:	e000      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a54:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a5e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	37d8      	adds	r7, #216	; 0xd8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	80080000 	.word	0x80080000
 8002a70:	50040300 	.word	0x50040300
 8002a74:	c7520000 	.word	0xc7520000
 8002a78:	50040000 	.word	0x50040000
 8002a7c:	50040200 	.word	0x50040200
 8002a80:	20000000 	.word	0x20000000
 8002a84:	053e2d63 	.word	0x053e2d63
 8002a88:	cb840000 	.word	0xcb840000
 8002a8c:	80000001 	.word	0x80000001

08002a90 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff f89e 	bl	8001be8 <LL_ADC_REG_IsConversionOngoing>
 8002aac:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff f8bf 	bl	8001c36 <LL_ADC_INJ_IsConversionOngoing>
 8002ab8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d103      	bne.n	8002ac8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 8098 	beq.w	8002bf8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d02a      	beq.n	8002b2c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	7e5b      	ldrb	r3, [r3, #25]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d126      	bne.n	8002b2c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	7e1b      	ldrb	r3, [r3, #24]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d122      	bne.n	8002b2c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002aea:	e014      	b.n	8002b16 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	4a45      	ldr	r2, [pc, #276]	; (8002c04 <ADC_ConversionStop+0x174>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d90d      	bls.n	8002b10 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af8:	f043 0210 	orr.w	r2, r3, #16
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b04:	f043 0201 	orr.w	r2, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e074      	b.n	8002bfa <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	3301      	adds	r3, #1
 8002b14:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b20:	2b40      	cmp	r3, #64	; 0x40
 8002b22:	d1e3      	bne.n	8002aec <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2240      	movs	r2, #64	; 0x40
 8002b2a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d014      	beq.n	8002b5c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff f856 	bl	8001be8 <LL_ADC_REG_IsConversionOngoing>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00c      	beq.n	8002b5c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff f813 	bl	8001b72 <LL_ADC_IsDisableOngoing>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d104      	bne.n	8002b5c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff f832 	bl	8001bc0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d014      	beq.n	8002b8c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff f865 	bl	8001c36 <LL_ADC_INJ_IsConversionOngoing>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00c      	beq.n	8002b8c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fffb 	bl	8001b72 <LL_ADC_IsDisableOngoing>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d104      	bne.n	8002b8c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff f841 	bl	8001c0e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d005      	beq.n	8002b9e <ADC_ConversionStop+0x10e>
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d105      	bne.n	8002ba4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002b98:	230c      	movs	r3, #12
 8002b9a:	617b      	str	r3, [r7, #20]
        break;
 8002b9c:	e005      	b.n	8002baa <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002b9e:	2308      	movs	r3, #8
 8002ba0:	617b      	str	r3, [r7, #20]
        break;
 8002ba2:	e002      	b.n	8002baa <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002ba4:	2304      	movs	r3, #4
 8002ba6:	617b      	str	r3, [r7, #20]
        break;
 8002ba8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002baa:	f7fe fe19 	bl	80017e0 <HAL_GetTick>
 8002bae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002bb0:	e01b      	b.n	8002bea <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002bb2:	f7fe fe15 	bl	80017e0 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b05      	cmp	r3, #5
 8002bbe:	d914      	bls.n	8002bea <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00d      	beq.n	8002bea <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd2:	f043 0210 	orr.w	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bde:	f043 0201 	orr.w	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e007      	b.n	8002bfa <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1dc      	bne.n	8002bb2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3720      	adds	r7, #32
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	a33fffff 	.word	0xa33fffff

08002c08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe ff97 	bl	8001b4c <LL_ADC_IsEnabled>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d169      	bne.n	8002cf8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	4b36      	ldr	r3, [pc, #216]	; (8002d04 <ADC_Enable+0xfc>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00d      	beq.n	8002c4e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c36:	f043 0210 	orr.w	r2, r3, #16
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c42:	f043 0201 	orr.w	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e055      	b.n	8002cfa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fe ff52 	bl	8001afc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002c58:	482b      	ldr	r0, [pc, #172]	; (8002d08 <ADC_Enable+0x100>)
 8002c5a:	f7fe fdf3 	bl	8001844 <LL_ADC_GetCommonPathInternalCh>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d013      	beq.n	8002c90 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c68:	4b28      	ldr	r3, [pc, #160]	; (8002d0c <ADC_Enable+0x104>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	099b      	lsrs	r3, r3, #6
 8002c6e:	4a28      	ldr	r2, [pc, #160]	; (8002d10 <ADC_Enable+0x108>)
 8002c70:	fba2 2303 	umull	r2, r3, r2, r3
 8002c74:	099b      	lsrs	r3, r3, #6
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	4613      	mov	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002c82:	e002      	b.n	8002c8a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1f9      	bne.n	8002c84 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c90:	f7fe fda6 	bl	80017e0 <HAL_GetTick>
 8002c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c96:	e028      	b.n	8002cea <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fe ff55 	bl	8001b4c <LL_ADC_IsEnabled>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d104      	bne.n	8002cb2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fe ff25 	bl	8001afc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cb2:	f7fe fd95 	bl	80017e0 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d914      	bls.n	8002cea <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d00d      	beq.n	8002cea <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd2:	f043 0210 	orr.w	r2, r3, #16
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cde:	f043 0201 	orr.w	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e007      	b.n	8002cfa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d1cf      	bne.n	8002c98 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	8000003f 	.word	0x8000003f
 8002d08:	50040300 	.word	0x50040300
 8002d0c:	20000000 	.word	0x20000000
 8002d10:	053e2d63 	.word	0x053e2d63

08002d14 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fe ff26 	bl	8001b72 <LL_ADC_IsDisableOngoing>
 8002d26:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fe ff0d 	bl	8001b4c <LL_ADC_IsEnabled>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d047      	beq.n	8002dc8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d144      	bne.n	8002dc8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 030d 	and.w	r3, r3, #13
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d10c      	bne.n	8002d66 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fe fee7 	bl	8001b24 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d5e:	f7fe fd3f 	bl	80017e0 <HAL_GetTick>
 8002d62:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d64:	e029      	b.n	8002dba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6a:	f043 0210 	orr.w	r2, r3, #16
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d76:	f043 0201 	orr.w	r2, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e023      	b.n	8002dca <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d82:	f7fe fd2d 	bl	80017e0 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d914      	bls.n	8002dba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00d      	beq.n	8002dba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da2:	f043 0210 	orr.w	r2, r3, #16
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dae:	f043 0201 	orr.w	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e007      	b.n	8002dca <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1dc      	bne.n	8002d82 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <LL_ADC_IsEnabled>:
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <LL_ADC_IsEnabled+0x18>
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <LL_ADC_IsEnabled+0x1a>
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <LL_ADC_REG_IsConversionOngoing>:
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d101      	bne.n	8002e10 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e20:	b590      	push	{r4, r7, lr}
 8002e22:	b09f      	sub	sp, #124	; 0x7c
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e093      	b.n	8002f66 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002e46:	2300      	movs	r3, #0
 8002e48:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a47      	ldr	r2, [pc, #284]	; (8002f70 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d102      	bne.n	8002e5e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e58:	4b46      	ldr	r3, [pc, #280]	; (8002f74 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	e001      	b.n	8002e62 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10b      	bne.n	8002e80 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6c:	f043 0220 	orr.w	r2, r3, #32
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e072      	b.n	8002f66 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff ffb8 	bl	8002df8 <LL_ADC_REG_IsConversionOngoing>
 8002e88:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff ffb2 	bl	8002df8 <LL_ADC_REG_IsConversionOngoing>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d154      	bne.n	8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002e9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d151      	bne.n	8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ea0:	4b35      	ldr	r3, [pc, #212]	; (8002f78 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002ea2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d02c      	beq.n	8002f06 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	6859      	ldr	r1, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ebe:	035b      	lsls	r3, r3, #13
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ec6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ec8:	4829      	ldr	r0, [pc, #164]	; (8002f70 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002eca:	f7ff ff82 	bl	8002dd2 <LL_ADC_IsEnabled>
 8002ece:	4604      	mov	r4, r0
 8002ed0:	4828      	ldr	r0, [pc, #160]	; (8002f74 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ed2:	f7ff ff7e 	bl	8002dd2 <LL_ADC_IsEnabled>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	431c      	orrs	r4, r3
 8002eda:	4828      	ldr	r0, [pc, #160]	; (8002f7c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002edc:	f7ff ff79 	bl	8002dd2 <LL_ADC_IsEnabled>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	4323      	orrs	r3, r4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d137      	bne.n	8002f58 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ef0:	f023 030f 	bic.w	r3, r3, #15
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	6811      	ldr	r1, [r2, #0]
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	6892      	ldr	r2, [r2, #8]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	431a      	orrs	r2, r3
 8002f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f02:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f04:	e028      	b.n	8002f58 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f10:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f12:	4817      	ldr	r0, [pc, #92]	; (8002f70 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f14:	f7ff ff5d 	bl	8002dd2 <LL_ADC_IsEnabled>
 8002f18:	4604      	mov	r4, r0
 8002f1a:	4816      	ldr	r0, [pc, #88]	; (8002f74 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f1c:	f7ff ff59 	bl	8002dd2 <LL_ADC_IsEnabled>
 8002f20:	4603      	mov	r3, r0
 8002f22:	431c      	orrs	r4, r3
 8002f24:	4815      	ldr	r0, [pc, #84]	; (8002f7c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002f26:	f7ff ff54 	bl	8002dd2 <LL_ADC_IsEnabled>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	4323      	orrs	r3, r4
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d112      	bne.n	8002f58 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f3a:	f023 030f 	bic.w	r3, r3, #15
 8002f3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f40:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f42:	e009      	b.n	8002f58 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f48:	f043 0220 	orr.w	r2, r3, #32
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002f56:	e000      	b.n	8002f5a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f58:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f62:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	377c      	adds	r7, #124	; 0x7c
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd90      	pop	{r4, r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	50040000 	.word	0x50040000
 8002f74:	50040100 	.word	0x50040100
 8002f78:	50040300 	.word	0x50040300
 8002f7c:	50040200 	.word	0x50040200

08002f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f90:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fb2:	4a04      	ldr	r2, [pc, #16]	; (8002fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	60d3      	str	r3, [r2, #12]
}
 8002fb8:	bf00      	nop
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	e000ed00 	.word	0xe000ed00

08002fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fcc:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	0a1b      	lsrs	r3, r3, #8
 8002fd2:	f003 0307 	and.w	r3, r3, #7
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	db0b      	blt.n	800300e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	f003 021f 	and.w	r2, r3, #31
 8002ffc:	4907      	ldr	r1, [pc, #28]	; (800301c <__NVIC_EnableIRQ+0x38>)
 8002ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	2001      	movs	r0, #1
 8003006:	fa00 f202 	lsl.w	r2, r0, r2
 800300a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	e000e100 	.word	0xe000e100

08003020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	6039      	str	r1, [r7, #0]
 800302a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800302c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003030:	2b00      	cmp	r3, #0
 8003032:	db0a      	blt.n	800304a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	b2da      	uxtb	r2, r3
 8003038:	490c      	ldr	r1, [pc, #48]	; (800306c <__NVIC_SetPriority+0x4c>)
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	0112      	lsls	r2, r2, #4
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	440b      	add	r3, r1
 8003044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003048:	e00a      	b.n	8003060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	b2da      	uxtb	r2, r3
 800304e:	4908      	ldr	r1, [pc, #32]	; (8003070 <__NVIC_SetPriority+0x50>)
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	3b04      	subs	r3, #4
 8003058:	0112      	lsls	r2, r2, #4
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	440b      	add	r3, r1
 800305e:	761a      	strb	r2, [r3, #24]
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	e000e100 	.word	0xe000e100
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003074:	b480      	push	{r7}
 8003076:	b089      	sub	sp, #36	; 0x24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f1c3 0307 	rsb	r3, r3, #7
 800308e:	2b04      	cmp	r3, #4
 8003090:	bf28      	it	cs
 8003092:	2304      	movcs	r3, #4
 8003094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3304      	adds	r3, #4
 800309a:	2b06      	cmp	r3, #6
 800309c:	d902      	bls.n	80030a4 <NVIC_EncodePriority+0x30>
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3b03      	subs	r3, #3
 80030a2:	e000      	b.n	80030a6 <NVIC_EncodePriority+0x32>
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a8:	f04f 32ff 	mov.w	r2, #4294967295
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43da      	mvns	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	401a      	ands	r2, r3
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030bc:	f04f 31ff 	mov.w	r1, #4294967295
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	fa01 f303 	lsl.w	r3, r1, r3
 80030c6:	43d9      	mvns	r1, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030cc:	4313      	orrs	r3, r2
         );
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3724      	adds	r7, #36	; 0x24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff ff4c 	bl	8002f80 <__NVIC_SetPriorityGrouping>
}
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003102:	f7ff ff61 	bl	8002fc8 <__NVIC_GetPriorityGrouping>
 8003106:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	68b9      	ldr	r1, [r7, #8]
 800310c:	6978      	ldr	r0, [r7, #20]
 800310e:	f7ff ffb1 	bl	8003074 <NVIC_EncodePriority>
 8003112:	4602      	mov	r2, r0
 8003114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003118:	4611      	mov	r1, r2
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff ff80 	bl	8003020 <__NVIC_SetPriority>
}
 8003120:	bf00      	nop
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff ff54 	bl	8002fe4 <__NVIC_EnableIRQ>
}
 800313c:	bf00      	nop
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003144:	b480      	push	{r7}
 8003146:	b087      	sub	sp, #28
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003152:	e17f      	b.n	8003454 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	2101      	movs	r1, #1
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	fa01 f303 	lsl.w	r3, r1, r3
 8003160:	4013      	ands	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 8171 	beq.w	800344e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	2b01      	cmp	r3, #1
 8003176:	d005      	beq.n	8003184 <HAL_GPIO_Init+0x40>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 0303 	and.w	r3, r3, #3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d130      	bne.n	80031e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	2203      	movs	r2, #3
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4013      	ands	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031ba:	2201      	movs	r2, #1
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	4013      	ands	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	091b      	lsrs	r3, r3, #4
 80031d0:	f003 0201 	and.w	r2, r3, #1
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	d118      	bne.n	8003224 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80031f8:	2201      	movs	r2, #1
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4013      	ands	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	08db      	lsrs	r3, r3, #3
 800320e:	f003 0201 	and.w	r2, r3, #1
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	2b03      	cmp	r3, #3
 800322e:	d017      	beq.n	8003260 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	2203      	movs	r2, #3
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4013      	ands	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d123      	bne.n	80032b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	08da      	lsrs	r2, r3, #3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3208      	adds	r2, #8
 8003274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003278:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	220f      	movs	r2, #15
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4013      	ands	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	691a      	ldr	r2, [r3, #16]
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	08da      	lsrs	r2, r3, #3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3208      	adds	r2, #8
 80032ae:	6939      	ldr	r1, [r7, #16]
 80032b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	2203      	movs	r2, #3
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4013      	ands	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 0203 	and.w	r2, r3, #3
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 80ac 	beq.w	800344e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032f6:	4b5f      	ldr	r3, [pc, #380]	; (8003474 <HAL_GPIO_Init+0x330>)
 80032f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032fa:	4a5e      	ldr	r2, [pc, #376]	; (8003474 <HAL_GPIO_Init+0x330>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	6613      	str	r3, [r2, #96]	; 0x60
 8003302:	4b5c      	ldr	r3, [pc, #368]	; (8003474 <HAL_GPIO_Init+0x330>)
 8003304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800330e:	4a5a      	ldr	r2, [pc, #360]	; (8003478 <HAL_GPIO_Init+0x334>)
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	089b      	lsrs	r3, r3, #2
 8003314:	3302      	adds	r3, #2
 8003316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800331a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	220f      	movs	r2, #15
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003338:	d025      	beq.n	8003386 <HAL_GPIO_Init+0x242>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a4f      	ldr	r2, [pc, #316]	; (800347c <HAL_GPIO_Init+0x338>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01f      	beq.n	8003382 <HAL_GPIO_Init+0x23e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a4e      	ldr	r2, [pc, #312]	; (8003480 <HAL_GPIO_Init+0x33c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d019      	beq.n	800337e <HAL_GPIO_Init+0x23a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a4d      	ldr	r2, [pc, #308]	; (8003484 <HAL_GPIO_Init+0x340>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d013      	beq.n	800337a <HAL_GPIO_Init+0x236>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a4c      	ldr	r2, [pc, #304]	; (8003488 <HAL_GPIO_Init+0x344>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00d      	beq.n	8003376 <HAL_GPIO_Init+0x232>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a4b      	ldr	r2, [pc, #300]	; (800348c <HAL_GPIO_Init+0x348>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d007      	beq.n	8003372 <HAL_GPIO_Init+0x22e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a4a      	ldr	r2, [pc, #296]	; (8003490 <HAL_GPIO_Init+0x34c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d101      	bne.n	800336e <HAL_GPIO_Init+0x22a>
 800336a:	2306      	movs	r3, #6
 800336c:	e00c      	b.n	8003388 <HAL_GPIO_Init+0x244>
 800336e:	2307      	movs	r3, #7
 8003370:	e00a      	b.n	8003388 <HAL_GPIO_Init+0x244>
 8003372:	2305      	movs	r3, #5
 8003374:	e008      	b.n	8003388 <HAL_GPIO_Init+0x244>
 8003376:	2304      	movs	r3, #4
 8003378:	e006      	b.n	8003388 <HAL_GPIO_Init+0x244>
 800337a:	2303      	movs	r3, #3
 800337c:	e004      	b.n	8003388 <HAL_GPIO_Init+0x244>
 800337e:	2302      	movs	r3, #2
 8003380:	e002      	b.n	8003388 <HAL_GPIO_Init+0x244>
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <HAL_GPIO_Init+0x244>
 8003386:	2300      	movs	r3, #0
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	f002 0203 	and.w	r2, r2, #3
 800338e:	0092      	lsls	r2, r2, #2
 8003390:	4093      	lsls	r3, r2
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003398:	4937      	ldr	r1, [pc, #220]	; (8003478 <HAL_GPIO_Init+0x334>)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	089b      	lsrs	r3, r3, #2
 800339e:	3302      	adds	r3, #2
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033a6:	4b3b      	ldr	r3, [pc, #236]	; (8003494 <HAL_GPIO_Init+0x350>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	43db      	mvns	r3, r3
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4013      	ands	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033ca:	4a32      	ldr	r2, [pc, #200]	; (8003494 <HAL_GPIO_Init+0x350>)
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033d0:	4b30      	ldr	r3, [pc, #192]	; (8003494 <HAL_GPIO_Init+0x350>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	43db      	mvns	r3, r3
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4013      	ands	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033f4:	4a27      	ldr	r2, [pc, #156]	; (8003494 <HAL_GPIO_Init+0x350>)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80033fa:	4b26      	ldr	r3, [pc, #152]	; (8003494 <HAL_GPIO_Init+0x350>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	43db      	mvns	r3, r3
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4013      	ands	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800341e:	4a1d      	ldr	r2, [pc, #116]	; (8003494 <HAL_GPIO_Init+0x350>)
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003424:	4b1b      	ldr	r3, [pc, #108]	; (8003494 <HAL_GPIO_Init+0x350>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	43db      	mvns	r3, r3
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4013      	ands	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003448:	4a12      	ldr	r2, [pc, #72]	; (8003494 <HAL_GPIO_Init+0x350>)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	3301      	adds	r3, #1
 8003452:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	fa22 f303 	lsr.w	r3, r2, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	f47f ae78 	bne.w	8003154 <HAL_GPIO_Init+0x10>
  }
}
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	371c      	adds	r7, #28
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	40021000 	.word	0x40021000
 8003478:	40010000 	.word	0x40010000
 800347c:	48000400 	.word	0x48000400
 8003480:	48000800 	.word	0x48000800
 8003484:	48000c00 	.word	0x48000c00
 8003488:	48001000 	.word	0x48001000
 800348c:	48001400 	.word	0x48001400
 8003490:	48001800 	.word	0x48001800
 8003494:	40010400 	.word	0x40010400

08003498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	807b      	strh	r3, [r7, #2]
 80034a4:	4613      	mov	r3, r2
 80034a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034a8:	787b      	ldrb	r3, [r7, #1]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034ae:	887a      	ldrh	r2, [r7, #2]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034b4:	e002      	b.n	80034bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034b6:	887a      	ldrh	r2, [r7, #2]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034cc:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40007000 	.word	0x40007000

080034e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f2:	d130      	bne.n	8003556 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80034f4:	4b23      	ldr	r3, [pc, #140]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003500:	d038      	beq.n	8003574 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003502:	4b20      	ldr	r3, [pc, #128]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800350a:	4a1e      	ldr	r2, [pc, #120]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800350c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003510:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003512:	4b1d      	ldr	r3, [pc, #116]	; (8003588 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2232      	movs	r2, #50	; 0x32
 8003518:	fb02 f303 	mul.w	r3, r2, r3
 800351c:	4a1b      	ldr	r2, [pc, #108]	; (800358c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800351e:	fba2 2303 	umull	r2, r3, r2, r3
 8003522:	0c9b      	lsrs	r3, r3, #18
 8003524:	3301      	adds	r3, #1
 8003526:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003528:	e002      	b.n	8003530 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	3b01      	subs	r3, #1
 800352e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003530:	4b14      	ldr	r3, [pc, #80]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800353c:	d102      	bne.n	8003544 <HAL_PWREx_ControlVoltageScaling+0x60>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1f2      	bne.n	800352a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003544:	4b0f      	ldr	r3, [pc, #60]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800354c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003550:	d110      	bne.n	8003574 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e00f      	b.n	8003576 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003556:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800355e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003562:	d007      	beq.n	8003574 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003564:	4b07      	ldr	r3, [pc, #28]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800356c:	4a05      	ldr	r2, [pc, #20]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800356e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003572:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40007000 	.word	0x40007000
 8003588:	20000000 	.word	0x20000000
 800358c:	431bde83 	.word	0x431bde83

08003590 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e3ca      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035a2:	4b97      	ldr	r3, [pc, #604]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035ac:	4b94      	ldr	r3, [pc, #592]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0310 	and.w	r3, r3, #16
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 80e4 	beq.w	800378c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d007      	beq.n	80035da <HAL_RCC_OscConfig+0x4a>
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	2b0c      	cmp	r3, #12
 80035ce:	f040 808b 	bne.w	80036e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	f040 8087 	bne.w	80036e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035da:	4b89      	ldr	r3, [pc, #548]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d005      	beq.n	80035f2 <HAL_RCC_OscConfig+0x62>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e3a2      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1a      	ldr	r2, [r3, #32]
 80035f6:	4b82      	ldr	r3, [pc, #520]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d004      	beq.n	800360c <HAL_RCC_OscConfig+0x7c>
 8003602:	4b7f      	ldr	r3, [pc, #508]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800360a:	e005      	b.n	8003618 <HAL_RCC_OscConfig+0x88>
 800360c:	4b7c      	ldr	r3, [pc, #496]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 800360e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003612:	091b      	lsrs	r3, r3, #4
 8003614:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003618:	4293      	cmp	r3, r2
 800361a:	d223      	bcs.n	8003664 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	4618      	mov	r0, r3
 8003622:	f000 fd87 	bl	8004134 <RCC_SetFlashLatencyFromMSIRange>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e383      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003630:	4b73      	ldr	r3, [pc, #460]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a72      	ldr	r2, [pc, #456]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 8003636:	f043 0308 	orr.w	r3, r3, #8
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	4b70      	ldr	r3, [pc, #448]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	496d      	ldr	r1, [pc, #436]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 800364a:	4313      	orrs	r3, r2
 800364c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800364e:	4b6c      	ldr	r3, [pc, #432]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	021b      	lsls	r3, r3, #8
 800365c:	4968      	ldr	r1, [pc, #416]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 800365e:	4313      	orrs	r3, r2
 8003660:	604b      	str	r3, [r1, #4]
 8003662:	e025      	b.n	80036b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003664:	4b66      	ldr	r3, [pc, #408]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a65      	ldr	r2, [pc, #404]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 800366a:	f043 0308 	orr.w	r3, r3, #8
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	4b63      	ldr	r3, [pc, #396]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	4960      	ldr	r1, [pc, #384]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003682:	4b5f      	ldr	r3, [pc, #380]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	021b      	lsls	r3, r3, #8
 8003690:	495b      	ldr	r1, [pc, #364]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 8003692:	4313      	orrs	r3, r2
 8003694:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d109      	bne.n	80036b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 fd47 	bl	8004134 <RCC_SetFlashLatencyFromMSIRange>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e343      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036b0:	f000 fc4a 	bl	8003f48 <HAL_RCC_GetSysClockFreq>
 80036b4:	4602      	mov	r2, r0
 80036b6:	4b52      	ldr	r3, [pc, #328]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	091b      	lsrs	r3, r3, #4
 80036bc:	f003 030f 	and.w	r3, r3, #15
 80036c0:	4950      	ldr	r1, [pc, #320]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 80036c2:	5ccb      	ldrb	r3, [r1, r3]
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	fa22 f303 	lsr.w	r3, r2, r3
 80036cc:	4a4e      	ldr	r2, [pc, #312]	; (8003808 <HAL_RCC_OscConfig+0x278>)
 80036ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036d0:	4b4e      	ldr	r3, [pc, #312]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fd febf 	bl	8001458 <HAL_InitTick>
 80036da:	4603      	mov	r3, r0
 80036dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d052      	beq.n	800378a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	e327      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d032      	beq.n	8003756 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036f0:	4b43      	ldr	r3, [pc, #268]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a42      	ldr	r2, [pc, #264]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 80036f6:	f043 0301 	orr.w	r3, r3, #1
 80036fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036fc:	f7fe f870 	bl	80017e0 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003704:	f7fe f86c 	bl	80017e0 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e310      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003716:	4b3a      	ldr	r3, [pc, #232]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f0      	beq.n	8003704 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003722:	4b37      	ldr	r3, [pc, #220]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a36      	ldr	r2, [pc, #216]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 8003728:	f043 0308 	orr.w	r3, r3, #8
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	4b34      	ldr	r3, [pc, #208]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	4931      	ldr	r1, [pc, #196]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 800373c:	4313      	orrs	r3, r2
 800373e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003740:	4b2f      	ldr	r3, [pc, #188]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	021b      	lsls	r3, r3, #8
 800374e:	492c      	ldr	r1, [pc, #176]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 8003750:	4313      	orrs	r3, r2
 8003752:	604b      	str	r3, [r1, #4]
 8003754:	e01a      	b.n	800378c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003756:	4b2a      	ldr	r3, [pc, #168]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a29      	ldr	r2, [pc, #164]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 800375c:	f023 0301 	bic.w	r3, r3, #1
 8003760:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003762:	f7fe f83d 	bl	80017e0 <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800376a:	f7fe f839 	bl	80017e0 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e2dd      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800377c:	4b20      	ldr	r3, [pc, #128]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1f0      	bne.n	800376a <HAL_RCC_OscConfig+0x1da>
 8003788:	e000      	b.n	800378c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800378a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d074      	beq.n	8003882 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	2b08      	cmp	r3, #8
 800379c:	d005      	beq.n	80037aa <HAL_RCC_OscConfig+0x21a>
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	2b0c      	cmp	r3, #12
 80037a2:	d10e      	bne.n	80037c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d10b      	bne.n	80037c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037aa:	4b15      	ldr	r3, [pc, #84]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d064      	beq.n	8003880 <HAL_RCC_OscConfig+0x2f0>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d160      	bne.n	8003880 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e2ba      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ca:	d106      	bne.n	80037da <HAL_RCC_OscConfig+0x24a>
 80037cc:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a0b      	ldr	r2, [pc, #44]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 80037d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	e026      	b.n	8003828 <HAL_RCC_OscConfig+0x298>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037e2:	d115      	bne.n	8003810 <HAL_RCC_OscConfig+0x280>
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a05      	ldr	r2, [pc, #20]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 80037ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	4b03      	ldr	r3, [pc, #12]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a02      	ldr	r2, [pc, #8]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 80037f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	e014      	b.n	8003828 <HAL_RCC_OscConfig+0x298>
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000
 8003804:	0800b090 	.word	0x0800b090
 8003808:	20000000 	.word	0x20000000
 800380c:	20000004 	.word	0x20000004
 8003810:	4ba0      	ldr	r3, [pc, #640]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a9f      	ldr	r2, [pc, #636]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	4b9d      	ldr	r3, [pc, #628]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a9c      	ldr	r2, [pc, #624]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d013      	beq.n	8003858 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003830:	f7fd ffd6 	bl	80017e0 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003838:	f7fd ffd2 	bl	80017e0 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b64      	cmp	r3, #100	; 0x64
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e276      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800384a:	4b92      	ldr	r3, [pc, #584]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCC_OscConfig+0x2a8>
 8003856:	e014      	b.n	8003882 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003858:	f7fd ffc2 	bl	80017e0 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003860:	f7fd ffbe 	bl	80017e0 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b64      	cmp	r3, #100	; 0x64
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e262      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003872:	4b88      	ldr	r3, [pc, #544]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f0      	bne.n	8003860 <HAL_RCC_OscConfig+0x2d0>
 800387e:	e000      	b.n	8003882 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d060      	beq.n	8003950 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	2b04      	cmp	r3, #4
 8003892:	d005      	beq.n	80038a0 <HAL_RCC_OscConfig+0x310>
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	2b0c      	cmp	r3, #12
 8003898:	d119      	bne.n	80038ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2b02      	cmp	r3, #2
 800389e:	d116      	bne.n	80038ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038a0:	4b7c      	ldr	r3, [pc, #496]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_RCC_OscConfig+0x328>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e23f      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b8:	4b76      	ldr	r3, [pc, #472]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	061b      	lsls	r3, r3, #24
 80038c6:	4973      	ldr	r1, [pc, #460]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038cc:	e040      	b.n	8003950 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d023      	beq.n	800391e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d6:	4b6f      	ldr	r3, [pc, #444]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a6e      	ldr	r2, [pc, #440]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 80038dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e2:	f7fd ff7d 	bl	80017e0 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ea:	f7fd ff79 	bl	80017e0 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e21d      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038fc:	4b65      	ldr	r3, [pc, #404]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0f0      	beq.n	80038ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003908:	4b62      	ldr	r3, [pc, #392]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	061b      	lsls	r3, r3, #24
 8003916:	495f      	ldr	r1, [pc, #380]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003918:	4313      	orrs	r3, r2
 800391a:	604b      	str	r3, [r1, #4]
 800391c:	e018      	b.n	8003950 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800391e:	4b5d      	ldr	r3, [pc, #372]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a5c      	ldr	r2, [pc, #368]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392a:	f7fd ff59 	bl	80017e0 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003932:	f7fd ff55 	bl	80017e0 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e1f9      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003944:	4b53      	ldr	r3, [pc, #332]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1f0      	bne.n	8003932 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b00      	cmp	r3, #0
 800395a:	d03c      	beq.n	80039d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d01c      	beq.n	800399e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003964:	4b4b      	ldr	r3, [pc, #300]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800396a:	4a4a      	ldr	r2, [pc, #296]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003974:	f7fd ff34 	bl	80017e0 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800397c:	f7fd ff30 	bl	80017e0 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e1d4      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800398e:	4b41      	ldr	r3, [pc, #260]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0ef      	beq.n	800397c <HAL_RCC_OscConfig+0x3ec>
 800399c:	e01b      	b.n	80039d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800399e:	4b3d      	ldr	r3, [pc, #244]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 80039a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039a4:	4a3b      	ldr	r2, [pc, #236]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 80039a6:	f023 0301 	bic.w	r3, r3, #1
 80039aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ae:	f7fd ff17 	bl	80017e0 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b6:	f7fd ff13 	bl	80017e0 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e1b7      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039c8:	4b32      	ldr	r3, [pc, #200]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 80039ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1ef      	bne.n	80039b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 80a6 	beq.w	8003b30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e4:	2300      	movs	r3, #0
 80039e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039e8:	4b2a      	ldr	r3, [pc, #168]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 80039ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10d      	bne.n	8003a10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f4:	4b27      	ldr	r3, [pc, #156]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 80039f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f8:	4a26      	ldr	r2, [pc, #152]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 80039fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003a00:	4b24      	ldr	r3, [pc, #144]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a08:	60bb      	str	r3, [r7, #8]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a10:	4b21      	ldr	r3, [pc, #132]	; (8003a98 <HAL_RCC_OscConfig+0x508>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d118      	bne.n	8003a4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a1c:	4b1e      	ldr	r3, [pc, #120]	; (8003a98 <HAL_RCC_OscConfig+0x508>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1d      	ldr	r2, [pc, #116]	; (8003a98 <HAL_RCC_OscConfig+0x508>)
 8003a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a28:	f7fd feda 	bl	80017e0 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a30:	f7fd fed6 	bl	80017e0 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e17a      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a42:	4b15      	ldr	r3, [pc, #84]	; (8003a98 <HAL_RCC_OscConfig+0x508>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d108      	bne.n	8003a68 <HAL_RCC_OscConfig+0x4d8>
 8003a56:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5c:	4a0d      	ldr	r2, [pc, #52]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a66:	e029      	b.n	8003abc <HAL_RCC_OscConfig+0x52c>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2b05      	cmp	r3, #5
 8003a6e:	d115      	bne.n	8003a9c <HAL_RCC_OscConfig+0x50c>
 8003a70:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a76:	4a07      	ldr	r2, [pc, #28]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003a78:	f043 0304 	orr.w	r3, r3, #4
 8003a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a80:	4b04      	ldr	r3, [pc, #16]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a86:	4a03      	ldr	r2, [pc, #12]	; (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a90:	e014      	b.n	8003abc <HAL_RCC_OscConfig+0x52c>
 8003a92:	bf00      	nop
 8003a94:	40021000 	.word	0x40021000
 8003a98:	40007000 	.word	0x40007000
 8003a9c:	4b9c      	ldr	r3, [pc, #624]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa2:	4a9b      	ldr	r2, [pc, #620]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003aa4:	f023 0301 	bic.w	r3, r3, #1
 8003aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aac:	4b98      	ldr	r3, [pc, #608]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab2:	4a97      	ldr	r2, [pc, #604]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003ab4:	f023 0304 	bic.w	r3, r3, #4
 8003ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d016      	beq.n	8003af2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac4:	f7fd fe8c 	bl	80017e0 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aca:	e00a      	b.n	8003ae2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003acc:	f7fd fe88 	bl	80017e0 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e12a      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae2:	4b8b      	ldr	r3, [pc, #556]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0ed      	beq.n	8003acc <HAL_RCC_OscConfig+0x53c>
 8003af0:	e015      	b.n	8003b1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af2:	f7fd fe75 	bl	80017e0 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003af8:	e00a      	b.n	8003b10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afa:	f7fd fe71 	bl	80017e0 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e113      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b10:	4b7f      	ldr	r3, [pc, #508]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1ed      	bne.n	8003afa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b1e:	7ffb      	ldrb	r3, [r7, #31]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d105      	bne.n	8003b30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b24:	4b7a      	ldr	r3, [pc, #488]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b28:	4a79      	ldr	r2, [pc, #484]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003b2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 80fe 	beq.w	8003d36 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	f040 80d0 	bne.w	8003ce4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b44:	4b72      	ldr	r3, [pc, #456]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f003 0203 	and.w	r2, r3, #3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d130      	bne.n	8003bba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	3b01      	subs	r3, #1
 8003b64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d127      	bne.n	8003bba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b74:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d11f      	bne.n	8003bba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b84:	2a07      	cmp	r2, #7
 8003b86:	bf14      	ite	ne
 8003b88:	2201      	movne	r2, #1
 8003b8a:	2200      	moveq	r2, #0
 8003b8c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d113      	bne.n	8003bba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9c:	085b      	lsrs	r3, r3, #1
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d109      	bne.n	8003bba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	085b      	lsrs	r3, r3, #1
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d06e      	beq.n	8003c98 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	2b0c      	cmp	r3, #12
 8003bbe:	d069      	beq.n	8003c94 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bc0:	4b53      	ldr	r3, [pc, #332]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d105      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003bcc:	4b50      	ldr	r3, [pc, #320]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0ad      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003bdc:	4b4c      	ldr	r3, [pc, #304]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a4b      	ldr	r2, [pc, #300]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003be2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003be6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003be8:	f7fd fdfa 	bl	80017e0 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf0:	f7fd fdf6 	bl	80017e0 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e09a      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c02:	4b43      	ldr	r3, [pc, #268]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f0      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c0e:	4b40      	ldr	r3, [pc, #256]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	4b40      	ldr	r3, [pc, #256]	; (8003d14 <HAL_RCC_OscConfig+0x784>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c1e:	3a01      	subs	r2, #1
 8003c20:	0112      	lsls	r2, r2, #4
 8003c22:	4311      	orrs	r1, r2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c28:	0212      	lsls	r2, r2, #8
 8003c2a:	4311      	orrs	r1, r2
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c30:	0852      	lsrs	r2, r2, #1
 8003c32:	3a01      	subs	r2, #1
 8003c34:	0552      	lsls	r2, r2, #21
 8003c36:	4311      	orrs	r1, r2
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c3c:	0852      	lsrs	r2, r2, #1
 8003c3e:	3a01      	subs	r2, #1
 8003c40:	0652      	lsls	r2, r2, #25
 8003c42:	4311      	orrs	r1, r2
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c48:	0912      	lsrs	r2, r2, #4
 8003c4a:	0452      	lsls	r2, r2, #17
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	4930      	ldr	r1, [pc, #192]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c54:	4b2e      	ldr	r3, [pc, #184]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a2d      	ldr	r2, [pc, #180]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c60:	4b2b      	ldr	r3, [pc, #172]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	4a2a      	ldr	r2, [pc, #168]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c6c:	f7fd fdb8 	bl	80017e0 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c74:	f7fd fdb4 	bl	80017e0 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e058      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c86:	4b22      	ldr	r3, [pc, #136]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f0      	beq.n	8003c74 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c92:	e050      	b.n	8003d36 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e04f      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c98:	4b1d      	ldr	r3, [pc, #116]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d148      	bne.n	8003d36 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ca4:	4b1a      	ldr	r3, [pc, #104]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a19      	ldr	r2, [pc, #100]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cb0:	4b17      	ldr	r3, [pc, #92]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	4a16      	ldr	r2, [pc, #88]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cbc:	f7fd fd90 	bl	80017e0 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc4:	f7fd fd8c 	bl	80017e0 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e030      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cd6:	4b0e      	ldr	r3, [pc, #56]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x734>
 8003ce2:	e028      	b.n	8003d36 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	2b0c      	cmp	r3, #12
 8003ce8:	d023      	beq.n	8003d32 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cea:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a08      	ldr	r2, [pc, #32]	; (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003cf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf6:	f7fd fd73 	bl	80017e0 <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cfc:	e00c      	b.n	8003d18 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfe:	f7fd fd6f 	bl	80017e0 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d905      	bls.n	8003d18 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e013      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
 8003d10:	40021000 	.word	0x40021000
 8003d14:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d18:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <HAL_RCC_OscConfig+0x7b0>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1ec      	bne.n	8003cfe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d24:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <HAL_RCC_OscConfig+0x7b0>)
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	4905      	ldr	r1, [pc, #20]	; (8003d40 <HAL_RCC_OscConfig+0x7b0>)
 8003d2a:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <HAL_RCC_OscConfig+0x7b4>)
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	60cb      	str	r3, [r1, #12]
 8003d30:	e001      	b.n	8003d36 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3720      	adds	r7, #32
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40021000 	.word	0x40021000
 8003d44:	feeefffc 	.word	0xfeeefffc

08003d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0e7      	b.n	8003f2c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d5c:	4b75      	ldr	r3, [pc, #468]	; (8003f34 <HAL_RCC_ClockConfig+0x1ec>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d910      	bls.n	8003d8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6a:	4b72      	ldr	r3, [pc, #456]	; (8003f34 <HAL_RCC_ClockConfig+0x1ec>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f023 0207 	bic.w	r2, r3, #7
 8003d72:	4970      	ldr	r1, [pc, #448]	; (8003f34 <HAL_RCC_ClockConfig+0x1ec>)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7a:	4b6e      	ldr	r3, [pc, #440]	; (8003f34 <HAL_RCC_ClockConfig+0x1ec>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0307 	and.w	r3, r3, #7
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d001      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0cf      	b.n	8003f2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d010      	beq.n	8003dba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	4b66      	ldr	r3, [pc, #408]	; (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d908      	bls.n	8003dba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da8:	4b63      	ldr	r3, [pc, #396]	; (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	4960      	ldr	r1, [pc, #384]	; (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d04c      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d107      	bne.n	8003dde <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dce:	4b5a      	ldr	r3, [pc, #360]	; (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d121      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e0a6      	b.n	8003f2c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d107      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003de6:	4b54      	ldr	r3, [pc, #336]	; (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d115      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e09a      	b.n	8003f2c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d107      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dfe:	4b4e      	ldr	r3, [pc, #312]	; (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d109      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e08e      	b.n	8003f2c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e0e:	4b4a      	ldr	r3, [pc, #296]	; (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e086      	b.n	8003f2c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e1e:	4b46      	ldr	r3, [pc, #280]	; (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f023 0203 	bic.w	r2, r3, #3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	4943      	ldr	r1, [pc, #268]	; (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e30:	f7fd fcd6 	bl	80017e0 <HAL_GetTick>
 8003e34:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e36:	e00a      	b.n	8003e4e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e38:	f7fd fcd2 	bl	80017e0 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e06e      	b.n	8003f2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4e:	4b3a      	ldr	r3, [pc, #232]	; (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 020c 	and.w	r2, r3, #12
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d1eb      	bne.n	8003e38 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d010      	beq.n	8003e8e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	4b31      	ldr	r3, [pc, #196]	; (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d208      	bcs.n	8003e8e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e7c:	4b2e      	ldr	r3, [pc, #184]	; (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	492b      	ldr	r1, [pc, #172]	; (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e8e:	4b29      	ldr	r3, [pc, #164]	; (8003f34 <HAL_RCC_ClockConfig+0x1ec>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d210      	bcs.n	8003ebe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e9c:	4b25      	ldr	r3, [pc, #148]	; (8003f34 <HAL_RCC_ClockConfig+0x1ec>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f023 0207 	bic.w	r2, r3, #7
 8003ea4:	4923      	ldr	r1, [pc, #140]	; (8003f34 <HAL_RCC_ClockConfig+0x1ec>)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eac:	4b21      	ldr	r3, [pc, #132]	; (8003f34 <HAL_RCC_ClockConfig+0x1ec>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d001      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e036      	b.n	8003f2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d008      	beq.n	8003edc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eca:	4b1b      	ldr	r3, [pc, #108]	; (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	4918      	ldr	r1, [pc, #96]	; (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d009      	beq.n	8003efc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ee8:	4b13      	ldr	r3, [pc, #76]	; (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	4910      	ldr	r1, [pc, #64]	; (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003efc:	f000 f824 	bl	8003f48 <HAL_RCC_GetSysClockFreq>
 8003f00:	4602      	mov	r2, r0
 8003f02:	4b0d      	ldr	r3, [pc, #52]	; (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	091b      	lsrs	r3, r3, #4
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	490b      	ldr	r1, [pc, #44]	; (8003f3c <HAL_RCC_ClockConfig+0x1f4>)
 8003f0e:	5ccb      	ldrb	r3, [r1, r3]
 8003f10:	f003 031f 	and.w	r3, r3, #31
 8003f14:	fa22 f303 	lsr.w	r3, r2, r3
 8003f18:	4a09      	ldr	r2, [pc, #36]	; (8003f40 <HAL_RCC_ClockConfig+0x1f8>)
 8003f1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f1c:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <HAL_RCC_ClockConfig+0x1fc>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fd fa99 	bl	8001458 <HAL_InitTick>
 8003f26:	4603      	mov	r3, r0
 8003f28:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f2a:	7afb      	ldrb	r3, [r7, #11]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40022000 	.word	0x40022000
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	0800b090 	.word	0x0800b090
 8003f40:	20000000 	.word	0x20000000
 8003f44:	20000004 	.word	0x20000004

08003f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b089      	sub	sp, #36	; 0x24
 8003f4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61fb      	str	r3, [r7, #28]
 8003f52:	2300      	movs	r3, #0
 8003f54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f56:	4b3e      	ldr	r3, [pc, #248]	; (8004050 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 030c 	and.w	r3, r3, #12
 8003f5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f60:	4b3b      	ldr	r3, [pc, #236]	; (8004050 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d005      	beq.n	8003f7c <HAL_RCC_GetSysClockFreq+0x34>
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	2b0c      	cmp	r3, #12
 8003f74:	d121      	bne.n	8003fba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d11e      	bne.n	8003fba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f7c:	4b34      	ldr	r3, [pc, #208]	; (8004050 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d107      	bne.n	8003f98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f88:	4b31      	ldr	r3, [pc, #196]	; (8004050 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f8e:	0a1b      	lsrs	r3, r3, #8
 8003f90:	f003 030f 	and.w	r3, r3, #15
 8003f94:	61fb      	str	r3, [r7, #28]
 8003f96:	e005      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f98:	4b2d      	ldr	r3, [pc, #180]	; (8004050 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	091b      	lsrs	r3, r3, #4
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fa4:	4a2b      	ldr	r2, [pc, #172]	; (8004054 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10d      	bne.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fb8:	e00a      	b.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d102      	bne.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fc0:	4b25      	ldr	r3, [pc, #148]	; (8004058 <HAL_RCC_GetSysClockFreq+0x110>)
 8003fc2:	61bb      	str	r3, [r7, #24]
 8003fc4:	e004      	b.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d101      	bne.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fcc:	4b23      	ldr	r3, [pc, #140]	; (800405c <HAL_RCC_GetSysClockFreq+0x114>)
 8003fce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	2b0c      	cmp	r3, #12
 8003fd4:	d134      	bne.n	8004040 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fd6:	4b1e      	ldr	r3, [pc, #120]	; (8004050 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d003      	beq.n	8003fee <HAL_RCC_GetSysClockFreq+0xa6>
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b03      	cmp	r3, #3
 8003fea:	d003      	beq.n	8003ff4 <HAL_RCC_GetSysClockFreq+0xac>
 8003fec:	e005      	b.n	8003ffa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003fee:	4b1a      	ldr	r3, [pc, #104]	; (8004058 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ff0:	617b      	str	r3, [r7, #20]
      break;
 8003ff2:	e005      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ff4:	4b19      	ldr	r3, [pc, #100]	; (800405c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ff6:	617b      	str	r3, [r7, #20]
      break;
 8003ff8:	e002      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	617b      	str	r3, [r7, #20]
      break;
 8003ffe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004000:	4b13      	ldr	r3, [pc, #76]	; (8004050 <HAL_RCC_GetSysClockFreq+0x108>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	091b      	lsrs	r3, r3, #4
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	3301      	adds	r3, #1
 800400c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800400e:	4b10      	ldr	r3, [pc, #64]	; (8004050 <HAL_RCC_GetSysClockFreq+0x108>)
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	0a1b      	lsrs	r3, r3, #8
 8004014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	fb03 f202 	mul.w	r2, r3, r2
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	fbb2 f3f3 	udiv	r3, r2, r3
 8004024:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004026:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <HAL_RCC_GetSysClockFreq+0x108>)
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	0e5b      	lsrs	r3, r3, #25
 800402c:	f003 0303 	and.w	r3, r3, #3
 8004030:	3301      	adds	r3, #1
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	fbb2 f3f3 	udiv	r3, r2, r3
 800403e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004040:	69bb      	ldr	r3, [r7, #24]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3724      	adds	r7, #36	; 0x24
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	40021000 	.word	0x40021000
 8004054:	0800b0a8 	.word	0x0800b0a8
 8004058:	00f42400 	.word	0x00f42400
 800405c:	007a1200 	.word	0x007a1200

08004060 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004064:	4b03      	ldr	r3, [pc, #12]	; (8004074 <HAL_RCC_GetHCLKFreq+0x14>)
 8004066:	681b      	ldr	r3, [r3, #0]
}
 8004068:	4618      	mov	r0, r3
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	20000000 	.word	0x20000000

08004078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800407c:	f7ff fff0 	bl	8004060 <HAL_RCC_GetHCLKFreq>
 8004080:	4602      	mov	r2, r0
 8004082:	4b06      	ldr	r3, [pc, #24]	; (800409c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	0a1b      	lsrs	r3, r3, #8
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	4904      	ldr	r1, [pc, #16]	; (80040a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800408e:	5ccb      	ldrb	r3, [r1, r3]
 8004090:	f003 031f 	and.w	r3, r3, #31
 8004094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004098:	4618      	mov	r0, r3
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40021000 	.word	0x40021000
 80040a0:	0800b0a0 	.word	0x0800b0a0

080040a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040a8:	f7ff ffda 	bl	8004060 <HAL_RCC_GetHCLKFreq>
 80040ac:	4602      	mov	r2, r0
 80040ae:	4b06      	ldr	r3, [pc, #24]	; (80040c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	0adb      	lsrs	r3, r3, #11
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	4904      	ldr	r1, [pc, #16]	; (80040cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80040ba:	5ccb      	ldrb	r3, [r1, r3]
 80040bc:	f003 031f 	and.w	r3, r3, #31
 80040c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40021000 	.word	0x40021000
 80040cc:	0800b0a0 	.word	0x0800b0a0

080040d0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	220f      	movs	r2, #15
 80040de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80040e0:	4b12      	ldr	r3, [pc, #72]	; (800412c <HAL_RCC_GetClockConfig+0x5c>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 0203 	and.w	r2, r3, #3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80040ec:	4b0f      	ldr	r3, [pc, #60]	; (800412c <HAL_RCC_GetClockConfig+0x5c>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80040f8:	4b0c      	ldr	r3, [pc, #48]	; (800412c <HAL_RCC_GetClockConfig+0x5c>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004104:	4b09      	ldr	r3, [pc, #36]	; (800412c <HAL_RCC_GetClockConfig+0x5c>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	08db      	lsrs	r3, r3, #3
 800410a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004112:	4b07      	ldr	r3, [pc, #28]	; (8004130 <HAL_RCC_GetClockConfig+0x60>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0207 	and.w	r2, r3, #7
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	601a      	str	r2, [r3, #0]
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40021000 	.word	0x40021000
 8004130:	40022000 	.word	0x40022000

08004134 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800413c:	2300      	movs	r3, #0
 800413e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004140:	4b2a      	ldr	r3, [pc, #168]	; (80041ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800414c:	f7ff f9bc 	bl	80034c8 <HAL_PWREx_GetVoltageRange>
 8004150:	6178      	str	r0, [r7, #20]
 8004152:	e014      	b.n	800417e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004154:	4b25      	ldr	r3, [pc, #148]	; (80041ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004158:	4a24      	ldr	r2, [pc, #144]	; (80041ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800415a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800415e:	6593      	str	r3, [r2, #88]	; 0x58
 8004160:	4b22      	ldr	r3, [pc, #136]	; (80041ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800416c:	f7ff f9ac 	bl	80034c8 <HAL_PWREx_GetVoltageRange>
 8004170:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004172:	4b1e      	ldr	r3, [pc, #120]	; (80041ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004176:	4a1d      	ldr	r2, [pc, #116]	; (80041ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800417c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004184:	d10b      	bne.n	800419e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b80      	cmp	r3, #128	; 0x80
 800418a:	d919      	bls.n	80041c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2ba0      	cmp	r3, #160	; 0xa0
 8004190:	d902      	bls.n	8004198 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004192:	2302      	movs	r3, #2
 8004194:	613b      	str	r3, [r7, #16]
 8004196:	e013      	b.n	80041c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004198:	2301      	movs	r3, #1
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	e010      	b.n	80041c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b80      	cmp	r3, #128	; 0x80
 80041a2:	d902      	bls.n	80041aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041a4:	2303      	movs	r3, #3
 80041a6:	613b      	str	r3, [r7, #16]
 80041a8:	e00a      	b.n	80041c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b80      	cmp	r3, #128	; 0x80
 80041ae:	d102      	bne.n	80041b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041b0:	2302      	movs	r3, #2
 80041b2:	613b      	str	r3, [r7, #16]
 80041b4:	e004      	b.n	80041c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b70      	cmp	r3, #112	; 0x70
 80041ba:	d101      	bne.n	80041c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041bc:	2301      	movs	r3, #1
 80041be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041c0:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f023 0207 	bic.w	r2, r3, #7
 80041c8:	4909      	ldr	r1, [pc, #36]	; (80041f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041d0:	4b07      	ldr	r3, [pc, #28]	; (80041f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d001      	beq.n	80041e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40021000 	.word	0x40021000
 80041f0:	40022000 	.word	0x40022000

080041f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041fc:	2300      	movs	r3, #0
 80041fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004200:	2300      	movs	r3, #0
 8004202:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800420c:	2b00      	cmp	r3, #0
 800420e:	d041      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004214:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004218:	d02a      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800421a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800421e:	d824      	bhi.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004220:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004224:	d008      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004226:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800422a:	d81e      	bhi.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004234:	d010      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004236:	e018      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004238:	4b86      	ldr	r3, [pc, #536]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	4a85      	ldr	r2, [pc, #532]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800423e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004242:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004244:	e015      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3304      	adds	r3, #4
 800424a:	2100      	movs	r1, #0
 800424c:	4618      	mov	r0, r3
 800424e:	f000 fabb 	bl	80047c8 <RCCEx_PLLSAI1_Config>
 8004252:	4603      	mov	r3, r0
 8004254:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004256:	e00c      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3320      	adds	r3, #32
 800425c:	2100      	movs	r1, #0
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fba6 	bl	80049b0 <RCCEx_PLLSAI2_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004268:	e003      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	74fb      	strb	r3, [r7, #19]
      break;
 800426e:	e000      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004270:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004272:	7cfb      	ldrb	r3, [r7, #19]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10b      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004278:	4b76      	ldr	r3, [pc, #472]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800427a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004286:	4973      	ldr	r1, [pc, #460]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800428e:	e001      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004290:	7cfb      	ldrb	r3, [r7, #19]
 8004292:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d041      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042a8:	d02a      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80042aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042ae:	d824      	bhi.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042b4:	d008      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042ba:	d81e      	bhi.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80042c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042c4:	d010      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042c6:	e018      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042c8:	4b62      	ldr	r3, [pc, #392]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4a61      	ldr	r2, [pc, #388]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042d4:	e015      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3304      	adds	r3, #4
 80042da:	2100      	movs	r1, #0
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 fa73 	bl	80047c8 <RCCEx_PLLSAI1_Config>
 80042e2:	4603      	mov	r3, r0
 80042e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042e6:	e00c      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3320      	adds	r3, #32
 80042ec:	2100      	movs	r1, #0
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fb5e 	bl	80049b0 <RCCEx_PLLSAI2_Config>
 80042f4:	4603      	mov	r3, r0
 80042f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042f8:	e003      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	74fb      	strb	r3, [r7, #19]
      break;
 80042fe:	e000      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004300:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004302:	7cfb      	ldrb	r3, [r7, #19]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10b      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004308:	4b52      	ldr	r3, [pc, #328]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004316:	494f      	ldr	r1, [pc, #316]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800431e:	e001      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004320:	7cfb      	ldrb	r3, [r7, #19]
 8004322:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 80a0 	beq.w	8004472 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004332:	2300      	movs	r3, #0
 8004334:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004336:	4b47      	ldr	r3, [pc, #284]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004342:	2301      	movs	r3, #1
 8004344:	e000      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004346:	2300      	movs	r3, #0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00d      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800434c:	4b41      	ldr	r3, [pc, #260]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800434e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004350:	4a40      	ldr	r2, [pc, #256]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004356:	6593      	str	r3, [r2, #88]	; 0x58
 8004358:	4b3e      	ldr	r3, [pc, #248]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800435a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004360:	60bb      	str	r3, [r7, #8]
 8004362:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004364:	2301      	movs	r3, #1
 8004366:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004368:	4b3b      	ldr	r3, [pc, #236]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a3a      	ldr	r2, [pc, #232]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800436e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004372:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004374:	f7fd fa34 	bl	80017e0 <HAL_GetTick>
 8004378:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800437a:	e009      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800437c:	f7fd fa30 	bl	80017e0 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d902      	bls.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	74fb      	strb	r3, [r7, #19]
        break;
 800438e:	e005      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004390:	4b31      	ldr	r3, [pc, #196]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0ef      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800439c:	7cfb      	ldrb	r3, [r7, #19]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d15c      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043a2:	4b2c      	ldr	r3, [pc, #176]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d01f      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d019      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043c0:	4b24      	ldr	r3, [pc, #144]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043cc:	4b21      	ldr	r3, [pc, #132]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d2:	4a20      	ldr	r2, [pc, #128]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043dc:	4b1d      	ldr	r3, [pc, #116]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e2:	4a1c      	ldr	r2, [pc, #112]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043ec:	4a19      	ldr	r2, [pc, #100]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d016      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fe:	f7fd f9ef 	bl	80017e0 <HAL_GetTick>
 8004402:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004404:	e00b      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004406:	f7fd f9eb 	bl	80017e0 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	f241 3288 	movw	r2, #5000	; 0x1388
 8004414:	4293      	cmp	r3, r2
 8004416:	d902      	bls.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	74fb      	strb	r3, [r7, #19]
            break;
 800441c:	e006      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800441e:	4b0d      	ldr	r3, [pc, #52]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0ec      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800442c:	7cfb      	ldrb	r3, [r7, #19]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10c      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004432:	4b08      	ldr	r3, [pc, #32]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004438:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004442:	4904      	ldr	r1, [pc, #16]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004444:	4313      	orrs	r3, r2
 8004446:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800444a:	e009      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800444c:	7cfb      	ldrb	r3, [r7, #19]
 800444e:	74bb      	strb	r3, [r7, #18]
 8004450:	e006      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004452:	bf00      	nop
 8004454:	40021000 	.word	0x40021000
 8004458:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800445c:	7cfb      	ldrb	r3, [r7, #19]
 800445e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004460:	7c7b      	ldrb	r3, [r7, #17]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d105      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004466:	4b9e      	ldr	r3, [pc, #632]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446a:	4a9d      	ldr	r2, [pc, #628]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004470:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800447e:	4b98      	ldr	r3, [pc, #608]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004484:	f023 0203 	bic.w	r2, r3, #3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	4994      	ldr	r1, [pc, #592]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044a0:	4b8f      	ldr	r3, [pc, #572]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a6:	f023 020c 	bic.w	r2, r3, #12
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ae:	498c      	ldr	r1, [pc, #560]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0304 	and.w	r3, r3, #4
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044c2:	4b87      	ldr	r3, [pc, #540]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	4983      	ldr	r1, [pc, #524]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0308 	and.w	r3, r3, #8
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044e4:	4b7e      	ldr	r3, [pc, #504]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f2:	497b      	ldr	r1, [pc, #492]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0310 	and.w	r3, r3, #16
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004506:	4b76      	ldr	r3, [pc, #472]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004514:	4972      	ldr	r1, [pc, #456]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0320 	and.w	r3, r3, #32
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004528:	4b6d      	ldr	r3, [pc, #436]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004536:	496a      	ldr	r1, [pc, #424]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004538:	4313      	orrs	r3, r2
 800453a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800454a:	4b65      	ldr	r3, [pc, #404]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004550:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004558:	4961      	ldr	r1, [pc, #388]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800456c:	4b5c      	ldr	r3, [pc, #368]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004572:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457a:	4959      	ldr	r1, [pc, #356]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800458e:	4b54      	ldr	r3, [pc, #336]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004594:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800459c:	4950      	ldr	r1, [pc, #320]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045b0:	4b4b      	ldr	r3, [pc, #300]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045be:	4948      	ldr	r1, [pc, #288]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045d2:	4b43      	ldr	r3, [pc, #268]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e0:	493f      	ldr	r1, [pc, #252]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d028      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045f4:	4b3a      	ldr	r3, [pc, #232]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004602:	4937      	ldr	r1, [pc, #220]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800460e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004612:	d106      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004614:	4b32      	ldr	r3, [pc, #200]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	4a31      	ldr	r2, [pc, #196]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800461e:	60d3      	str	r3, [r2, #12]
 8004620:	e011      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004626:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800462a:	d10c      	bne.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3304      	adds	r3, #4
 8004630:	2101      	movs	r1, #1
 8004632:	4618      	mov	r0, r3
 8004634:	f000 f8c8 	bl	80047c8 <RCCEx_PLLSAI1_Config>
 8004638:	4603      	mov	r3, r0
 800463a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800463c:	7cfb      	ldrb	r3, [r7, #19]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004642:	7cfb      	ldrb	r3, [r7, #19]
 8004644:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d028      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004652:	4b23      	ldr	r3, [pc, #140]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004658:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004660:	491f      	ldr	r1, [pc, #124]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004670:	d106      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004672:	4b1b      	ldr	r3, [pc, #108]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	4a1a      	ldr	r2, [pc, #104]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800467c:	60d3      	str	r3, [r2, #12]
 800467e:	e011      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004684:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004688:	d10c      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	3304      	adds	r3, #4
 800468e:	2101      	movs	r1, #1
 8004690:	4618      	mov	r0, r3
 8004692:	f000 f899 	bl	80047c8 <RCCEx_PLLSAI1_Config>
 8004696:	4603      	mov	r3, r0
 8004698:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800469a:	7cfb      	ldrb	r3, [r7, #19]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80046a0:	7cfb      	ldrb	r3, [r7, #19]
 80046a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d02b      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046be:	4908      	ldr	r1, [pc, #32]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046ce:	d109      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046d0:	4b03      	ldr	r3, [pc, #12]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	4a02      	ldr	r2, [pc, #8]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046da:	60d3      	str	r3, [r2, #12]
 80046dc:	e014      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80046de:	bf00      	nop
 80046e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046ec:	d10c      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	3304      	adds	r3, #4
 80046f2:	2101      	movs	r1, #1
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 f867 	bl	80047c8 <RCCEx_PLLSAI1_Config>
 80046fa:	4603      	mov	r3, r0
 80046fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046fe:	7cfb      	ldrb	r3, [r7, #19]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004704:	7cfb      	ldrb	r3, [r7, #19]
 8004706:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d02f      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004714:	4b2b      	ldr	r3, [pc, #172]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004722:	4928      	ldr	r1, [pc, #160]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004724:	4313      	orrs	r3, r2
 8004726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800472e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004732:	d10d      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3304      	adds	r3, #4
 8004738:	2102      	movs	r1, #2
 800473a:	4618      	mov	r0, r3
 800473c:	f000 f844 	bl	80047c8 <RCCEx_PLLSAI1_Config>
 8004740:	4603      	mov	r3, r0
 8004742:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004744:	7cfb      	ldrb	r3, [r7, #19]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d014      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800474a:	7cfb      	ldrb	r3, [r7, #19]
 800474c:	74bb      	strb	r3, [r7, #18]
 800474e:	e011      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004758:	d10c      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3320      	adds	r3, #32
 800475e:	2102      	movs	r1, #2
 8004760:	4618      	mov	r0, r3
 8004762:	f000 f925 	bl	80049b0 <RCCEx_PLLSAI2_Config>
 8004766:	4603      	mov	r3, r0
 8004768:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800476a:	7cfb      	ldrb	r3, [r7, #19]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004770:	7cfb      	ldrb	r3, [r7, #19]
 8004772:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00a      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004780:	4b10      	ldr	r3, [pc, #64]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004786:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800478e:	490d      	ldr	r1, [pc, #52]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00b      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047a2:	4b08      	ldr	r3, [pc, #32]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047b2:	4904      	ldr	r1, [pc, #16]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40021000 	.word	0x40021000

080047c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047d6:	4b75      	ldr	r3, [pc, #468]	; (80049ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d018      	beq.n	8004814 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047e2:	4b72      	ldr	r3, [pc, #456]	; (80049ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f003 0203 	and.w	r2, r3, #3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d10d      	bne.n	800480e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
       ||
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d009      	beq.n	800480e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047fa:	4b6c      	ldr	r3, [pc, #432]	; (80049ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	091b      	lsrs	r3, r3, #4
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
       ||
 800480a:	429a      	cmp	r2, r3
 800480c:	d047      	beq.n	800489e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	73fb      	strb	r3, [r7, #15]
 8004812:	e044      	b.n	800489e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b03      	cmp	r3, #3
 800481a:	d018      	beq.n	800484e <RCCEx_PLLSAI1_Config+0x86>
 800481c:	2b03      	cmp	r3, #3
 800481e:	d825      	bhi.n	800486c <RCCEx_PLLSAI1_Config+0xa4>
 8004820:	2b01      	cmp	r3, #1
 8004822:	d002      	beq.n	800482a <RCCEx_PLLSAI1_Config+0x62>
 8004824:	2b02      	cmp	r3, #2
 8004826:	d009      	beq.n	800483c <RCCEx_PLLSAI1_Config+0x74>
 8004828:	e020      	b.n	800486c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800482a:	4b60      	ldr	r3, [pc, #384]	; (80049ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d11d      	bne.n	8004872 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800483a:	e01a      	b.n	8004872 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800483c:	4b5b      	ldr	r3, [pc, #364]	; (80049ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004844:	2b00      	cmp	r3, #0
 8004846:	d116      	bne.n	8004876 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800484c:	e013      	b.n	8004876 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800484e:	4b57      	ldr	r3, [pc, #348]	; (80049ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10f      	bne.n	800487a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800485a:	4b54      	ldr	r3, [pc, #336]	; (80049ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d109      	bne.n	800487a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800486a:	e006      	b.n	800487a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	73fb      	strb	r3, [r7, #15]
      break;
 8004870:	e004      	b.n	800487c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004872:	bf00      	nop
 8004874:	e002      	b.n	800487c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004876:	bf00      	nop
 8004878:	e000      	b.n	800487c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800487a:	bf00      	nop
    }

    if(status == HAL_OK)
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10d      	bne.n	800489e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004882:	4b4a      	ldr	r3, [pc, #296]	; (80049ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6819      	ldr	r1, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	3b01      	subs	r3, #1
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	430b      	orrs	r3, r1
 8004898:	4944      	ldr	r1, [pc, #272]	; (80049ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800489a:	4313      	orrs	r3, r2
 800489c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d17d      	bne.n	80049a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048a4:	4b41      	ldr	r3, [pc, #260]	; (80049ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a40      	ldr	r2, [pc, #256]	; (80049ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80048aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b0:	f7fc ff96 	bl	80017e0 <HAL_GetTick>
 80048b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048b6:	e009      	b.n	80048cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048b8:	f7fc ff92 	bl	80017e0 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d902      	bls.n	80048cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	73fb      	strb	r3, [r7, #15]
        break;
 80048ca:	e005      	b.n	80048d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048cc:	4b37      	ldr	r3, [pc, #220]	; (80049ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1ef      	bne.n	80048b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d160      	bne.n	80049a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d111      	bne.n	8004908 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048e4:	4b31      	ldr	r3, [pc, #196]	; (80049ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80048ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6892      	ldr	r2, [r2, #8]
 80048f4:	0211      	lsls	r1, r2, #8
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	68d2      	ldr	r2, [r2, #12]
 80048fa:	0912      	lsrs	r2, r2, #4
 80048fc:	0452      	lsls	r2, r2, #17
 80048fe:	430a      	orrs	r2, r1
 8004900:	492a      	ldr	r1, [pc, #168]	; (80049ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004902:	4313      	orrs	r3, r2
 8004904:	610b      	str	r3, [r1, #16]
 8004906:	e027      	b.n	8004958 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d112      	bne.n	8004934 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800490e:	4b27      	ldr	r3, [pc, #156]	; (80049ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004916:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6892      	ldr	r2, [r2, #8]
 800491e:	0211      	lsls	r1, r2, #8
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6912      	ldr	r2, [r2, #16]
 8004924:	0852      	lsrs	r2, r2, #1
 8004926:	3a01      	subs	r2, #1
 8004928:	0552      	lsls	r2, r2, #21
 800492a:	430a      	orrs	r2, r1
 800492c:	491f      	ldr	r1, [pc, #124]	; (80049ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800492e:	4313      	orrs	r3, r2
 8004930:	610b      	str	r3, [r1, #16]
 8004932:	e011      	b.n	8004958 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004934:	4b1d      	ldr	r3, [pc, #116]	; (80049ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800493c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6892      	ldr	r2, [r2, #8]
 8004944:	0211      	lsls	r1, r2, #8
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6952      	ldr	r2, [r2, #20]
 800494a:	0852      	lsrs	r2, r2, #1
 800494c:	3a01      	subs	r2, #1
 800494e:	0652      	lsls	r2, r2, #25
 8004950:	430a      	orrs	r2, r1
 8004952:	4916      	ldr	r1, [pc, #88]	; (80049ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004954:	4313      	orrs	r3, r2
 8004956:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004958:	4b14      	ldr	r3, [pc, #80]	; (80049ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a13      	ldr	r2, [pc, #76]	; (80049ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800495e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004962:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004964:	f7fc ff3c 	bl	80017e0 <HAL_GetTick>
 8004968:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800496a:	e009      	b.n	8004980 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800496c:	f7fc ff38 	bl	80017e0 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d902      	bls.n	8004980 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	73fb      	strb	r3, [r7, #15]
          break;
 800497e:	e005      	b.n	800498c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004980:	4b0a      	ldr	r3, [pc, #40]	; (80049ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0ef      	beq.n	800496c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004992:	4b06      	ldr	r3, [pc, #24]	; (80049ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	4904      	ldr	r1, [pc, #16]	; (80049ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800499c:	4313      	orrs	r3, r2
 800499e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	40021000 	.word	0x40021000

080049b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049be:	4b6a      	ldr	r3, [pc, #424]	; (8004b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d018      	beq.n	80049fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80049ca:	4b67      	ldr	r3, [pc, #412]	; (8004b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f003 0203 	and.w	r2, r3, #3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d10d      	bne.n	80049f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
       ||
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d009      	beq.n	80049f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80049e2:	4b61      	ldr	r3, [pc, #388]	; (8004b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	091b      	lsrs	r3, r3, #4
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
       ||
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d047      	beq.n	8004a86 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	73fb      	strb	r3, [r7, #15]
 80049fa:	e044      	b.n	8004a86 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d018      	beq.n	8004a36 <RCCEx_PLLSAI2_Config+0x86>
 8004a04:	2b03      	cmp	r3, #3
 8004a06:	d825      	bhi.n	8004a54 <RCCEx_PLLSAI2_Config+0xa4>
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d002      	beq.n	8004a12 <RCCEx_PLLSAI2_Config+0x62>
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d009      	beq.n	8004a24 <RCCEx_PLLSAI2_Config+0x74>
 8004a10:	e020      	b.n	8004a54 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a12:	4b55      	ldr	r3, [pc, #340]	; (8004b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d11d      	bne.n	8004a5a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a22:	e01a      	b.n	8004a5a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a24:	4b50      	ldr	r3, [pc, #320]	; (8004b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d116      	bne.n	8004a5e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a34:	e013      	b.n	8004a5e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a36:	4b4c      	ldr	r3, [pc, #304]	; (8004b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10f      	bne.n	8004a62 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a42:	4b49      	ldr	r3, [pc, #292]	; (8004b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d109      	bne.n	8004a62 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a52:	e006      	b.n	8004a62 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	73fb      	strb	r3, [r7, #15]
      break;
 8004a58:	e004      	b.n	8004a64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a5a:	bf00      	nop
 8004a5c:	e002      	b.n	8004a64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a5e:	bf00      	nop
 8004a60:	e000      	b.n	8004a64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a62:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10d      	bne.n	8004a86 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a6a:	4b3f      	ldr	r3, [pc, #252]	; (8004b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6819      	ldr	r1, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	430b      	orrs	r3, r1
 8004a80:	4939      	ldr	r1, [pc, #228]	; (8004b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a86:	7bfb      	ldrb	r3, [r7, #15]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d167      	bne.n	8004b5c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a8c:	4b36      	ldr	r3, [pc, #216]	; (8004b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a35      	ldr	r2, [pc, #212]	; (8004b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a98:	f7fc fea2 	bl	80017e0 <HAL_GetTick>
 8004a9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a9e:	e009      	b.n	8004ab4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004aa0:	f7fc fe9e 	bl	80017e0 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d902      	bls.n	8004ab4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	73fb      	strb	r3, [r7, #15]
        break;
 8004ab2:	e005      	b.n	8004ac0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ab4:	4b2c      	ldr	r3, [pc, #176]	; (8004b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1ef      	bne.n	8004aa0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d14a      	bne.n	8004b5c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d111      	bne.n	8004af0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004acc:	4b26      	ldr	r3, [pc, #152]	; (8004b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6892      	ldr	r2, [r2, #8]
 8004adc:	0211      	lsls	r1, r2, #8
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	68d2      	ldr	r2, [r2, #12]
 8004ae2:	0912      	lsrs	r2, r2, #4
 8004ae4:	0452      	lsls	r2, r2, #17
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	491f      	ldr	r1, [pc, #124]	; (8004b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	614b      	str	r3, [r1, #20]
 8004aee:	e011      	b.n	8004b14 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004af0:	4b1d      	ldr	r3, [pc, #116]	; (8004b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004af8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6892      	ldr	r2, [r2, #8]
 8004b00:	0211      	lsls	r1, r2, #8
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	6912      	ldr	r2, [r2, #16]
 8004b06:	0852      	lsrs	r2, r2, #1
 8004b08:	3a01      	subs	r2, #1
 8004b0a:	0652      	lsls	r2, r2, #25
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	4916      	ldr	r1, [pc, #88]	; (8004b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b14:	4b14      	ldr	r3, [pc, #80]	; (8004b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a13      	ldr	r2, [pc, #76]	; (8004b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b20:	f7fc fe5e 	bl	80017e0 <HAL_GetTick>
 8004b24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b26:	e009      	b.n	8004b3c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b28:	f7fc fe5a 	bl	80017e0 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d902      	bls.n	8004b3c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	73fb      	strb	r3, [r7, #15]
          break;
 8004b3a:	e005      	b.n	8004b48 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b3c:	4b0a      	ldr	r3, [pc, #40]	; (8004b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0ef      	beq.n	8004b28 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d106      	bne.n	8004b5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b4e:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b50:	695a      	ldr	r2, [r3, #20]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	4904      	ldr	r1, [pc, #16]	; (8004b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	40021000 	.word	0x40021000

08004b6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e049      	b.n	8004c12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d106      	bne.n	8004b98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f841 	bl	8004c1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4610      	mov	r0, r2
 8004bac:	f000 f9f8 	bl	8004fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b083      	sub	sp, #12
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
	...

08004c30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d001      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e04f      	b.n	8004ce8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0201 	orr.w	r2, r2, #1
 8004c5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a23      	ldr	r2, [pc, #140]	; (8004cf4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d01d      	beq.n	8004ca6 <HAL_TIM_Base_Start_IT+0x76>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c72:	d018      	beq.n	8004ca6 <HAL_TIM_Base_Start_IT+0x76>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a1f      	ldr	r2, [pc, #124]	; (8004cf8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d013      	beq.n	8004ca6 <HAL_TIM_Base_Start_IT+0x76>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a1e      	ldr	r2, [pc, #120]	; (8004cfc <HAL_TIM_Base_Start_IT+0xcc>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d00e      	beq.n	8004ca6 <HAL_TIM_Base_Start_IT+0x76>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a1c      	ldr	r2, [pc, #112]	; (8004d00 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d009      	beq.n	8004ca6 <HAL_TIM_Base_Start_IT+0x76>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a1b      	ldr	r2, [pc, #108]	; (8004d04 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d004      	beq.n	8004ca6 <HAL_TIM_Base_Start_IT+0x76>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a19      	ldr	r2, [pc, #100]	; (8004d08 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d115      	bne.n	8004cd2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689a      	ldr	r2, [r3, #8]
 8004cac:	4b17      	ldr	r3, [pc, #92]	; (8004d0c <HAL_TIM_Base_Start_IT+0xdc>)
 8004cae:	4013      	ands	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2b06      	cmp	r3, #6
 8004cb6:	d015      	beq.n	8004ce4 <HAL_TIM_Base_Start_IT+0xb4>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cbe:	d011      	beq.n	8004ce4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0201 	orr.w	r2, r2, #1
 8004cce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd0:	e008      	b.n	8004ce4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f042 0201 	orr.w	r2, r2, #1
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	e000      	b.n	8004ce6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	40012c00 	.word	0x40012c00
 8004cf8:	40000400 	.word	0x40000400
 8004cfc:	40000800 	.word	0x40000800
 8004d00:	40000c00 	.word	0x40000c00
 8004d04:	40013400 	.word	0x40013400
 8004d08:	40014000 	.word	0x40014000
 8004d0c:	00010007 	.word	0x00010007

08004d10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d122      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d11b      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0202 	mvn.w	r2, #2
 8004d3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f905 	bl	8004f62 <HAL_TIM_IC_CaptureCallback>
 8004d58:	e005      	b.n	8004d66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f8f7 	bl	8004f4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f908 	bl	8004f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d122      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d11b      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f06f 0204 	mvn.w	r2, #4
 8004d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2202      	movs	r2, #2
 8004d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f8db 	bl	8004f62 <HAL_TIM_IC_CaptureCallback>
 8004dac:	e005      	b.n	8004dba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f8cd 	bl	8004f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f8de 	bl	8004f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	f003 0308 	and.w	r3, r3, #8
 8004dca:	2b08      	cmp	r3, #8
 8004dcc:	d122      	bne.n	8004e14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d11b      	bne.n	8004e14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0208 	mvn.w	r2, #8
 8004de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2204      	movs	r2, #4
 8004dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f8b1 	bl	8004f62 <HAL_TIM_IC_CaptureCallback>
 8004e00:	e005      	b.n	8004e0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f8a3 	bl	8004f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f8b4 	bl	8004f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	f003 0310 	and.w	r3, r3, #16
 8004e1e:	2b10      	cmp	r3, #16
 8004e20:	d122      	bne.n	8004e68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f003 0310 	and.w	r3, r3, #16
 8004e2c:	2b10      	cmp	r3, #16
 8004e2e:	d11b      	bne.n	8004e68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f06f 0210 	mvn.w	r2, #16
 8004e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2208      	movs	r2, #8
 8004e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f887 	bl	8004f62 <HAL_TIM_IC_CaptureCallback>
 8004e54:	e005      	b.n	8004e62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f879 	bl	8004f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f88a 	bl	8004f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d10e      	bne.n	8004e94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d107      	bne.n	8004e94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0201 	mvn.w	r2, #1
 8004e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7fc f9dc 	bl	800124c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9e:	2b80      	cmp	r3, #128	; 0x80
 8004ea0:	d10e      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eac:	2b80      	cmp	r3, #128	; 0x80
 8004eae:	d107      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f914 	bl	80050e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ece:	d10e      	bne.n	8004eee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eda:	2b80      	cmp	r3, #128	; 0x80
 8004edc:	d107      	bne.n	8004eee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f907 	bl	80050fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef8:	2b40      	cmp	r3, #64	; 0x40
 8004efa:	d10e      	bne.n	8004f1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f06:	2b40      	cmp	r3, #64	; 0x40
 8004f08:	d107      	bne.n	8004f1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f838 	bl	8004f8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	f003 0320 	and.w	r3, r3, #32
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	d10e      	bne.n	8004f46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f003 0320 	and.w	r3, r3, #32
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	d107      	bne.n	8004f46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f06f 0220 	mvn.w	r2, #32
 8004f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f8c7 	bl	80050d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f46:	bf00      	nop
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
	...

08004fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a40      	ldr	r2, [pc, #256]	; (80050b4 <TIM_Base_SetConfig+0x114>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d013      	beq.n	8004fe0 <TIM_Base_SetConfig+0x40>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fbe:	d00f      	beq.n	8004fe0 <TIM_Base_SetConfig+0x40>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a3d      	ldr	r2, [pc, #244]	; (80050b8 <TIM_Base_SetConfig+0x118>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d00b      	beq.n	8004fe0 <TIM_Base_SetConfig+0x40>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a3c      	ldr	r2, [pc, #240]	; (80050bc <TIM_Base_SetConfig+0x11c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d007      	beq.n	8004fe0 <TIM_Base_SetConfig+0x40>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a3b      	ldr	r2, [pc, #236]	; (80050c0 <TIM_Base_SetConfig+0x120>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d003      	beq.n	8004fe0 <TIM_Base_SetConfig+0x40>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a3a      	ldr	r2, [pc, #232]	; (80050c4 <TIM_Base_SetConfig+0x124>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d108      	bne.n	8004ff2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a2f      	ldr	r2, [pc, #188]	; (80050b4 <TIM_Base_SetConfig+0x114>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d01f      	beq.n	800503a <TIM_Base_SetConfig+0x9a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005000:	d01b      	beq.n	800503a <TIM_Base_SetConfig+0x9a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a2c      	ldr	r2, [pc, #176]	; (80050b8 <TIM_Base_SetConfig+0x118>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d017      	beq.n	800503a <TIM_Base_SetConfig+0x9a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a2b      	ldr	r2, [pc, #172]	; (80050bc <TIM_Base_SetConfig+0x11c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d013      	beq.n	800503a <TIM_Base_SetConfig+0x9a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a2a      	ldr	r2, [pc, #168]	; (80050c0 <TIM_Base_SetConfig+0x120>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00f      	beq.n	800503a <TIM_Base_SetConfig+0x9a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a29      	ldr	r2, [pc, #164]	; (80050c4 <TIM_Base_SetConfig+0x124>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d00b      	beq.n	800503a <TIM_Base_SetConfig+0x9a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a28      	ldr	r2, [pc, #160]	; (80050c8 <TIM_Base_SetConfig+0x128>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d007      	beq.n	800503a <TIM_Base_SetConfig+0x9a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a27      	ldr	r2, [pc, #156]	; (80050cc <TIM_Base_SetConfig+0x12c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d003      	beq.n	800503a <TIM_Base_SetConfig+0x9a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a26      	ldr	r2, [pc, #152]	; (80050d0 <TIM_Base_SetConfig+0x130>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d108      	bne.n	800504c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4313      	orrs	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a10      	ldr	r2, [pc, #64]	; (80050b4 <TIM_Base_SetConfig+0x114>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d00f      	beq.n	8005098 <TIM_Base_SetConfig+0xf8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a12      	ldr	r2, [pc, #72]	; (80050c4 <TIM_Base_SetConfig+0x124>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00b      	beq.n	8005098 <TIM_Base_SetConfig+0xf8>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a11      	ldr	r2, [pc, #68]	; (80050c8 <TIM_Base_SetConfig+0x128>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d007      	beq.n	8005098 <TIM_Base_SetConfig+0xf8>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a10      	ldr	r2, [pc, #64]	; (80050cc <TIM_Base_SetConfig+0x12c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d003      	beq.n	8005098 <TIM_Base_SetConfig+0xf8>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a0f      	ldr	r2, [pc, #60]	; (80050d0 <TIM_Base_SetConfig+0x130>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d103      	bne.n	80050a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	691a      	ldr	r2, [r3, #16]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	615a      	str	r2, [r3, #20]
}
 80050a6:	bf00      	nop
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	40012c00 	.word	0x40012c00
 80050b8:	40000400 	.word	0x40000400
 80050bc:	40000800 	.word	0x40000800
 80050c0:	40000c00 	.word	0x40000c00
 80050c4:	40013400 	.word	0x40013400
 80050c8:	40014000 	.word	0x40014000
 80050cc:	40014400 	.word	0x40014400
 80050d0:	40014800 	.word	0x40014800

080050d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e040      	b.n	80051a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7fc f934 	bl	80013a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2224      	movs	r2, #36	; 0x24
 800513c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0201 	bic.w	r2, r2, #1
 800514c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f82c 	bl	80051ac <UART_SetConfig>
 8005154:	4603      	mov	r3, r0
 8005156:	2b01      	cmp	r3, #1
 8005158:	d101      	bne.n	800515e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e022      	b.n	80051a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	2b00      	cmp	r3, #0
 8005164:	d002      	beq.n	800516c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fad8 	bl	800571c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800517a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689a      	ldr	r2, [r3, #8]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800518a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0201 	orr.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 fb5f 	bl	8005860 <UART_CheckIdleState>
 80051a2:	4603      	mov	r3, r0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051b0:	b08a      	sub	sp, #40	; 0x28
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	431a      	orrs	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	431a      	orrs	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	4ba4      	ldr	r3, [pc, #656]	; (800546c <UART_SetConfig+0x2c0>)
 80051dc:	4013      	ands	r3, r2
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	6812      	ldr	r2, [r2, #0]
 80051e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051e4:	430b      	orrs	r3, r1
 80051e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a99      	ldr	r2, [pc, #612]	; (8005470 <UART_SetConfig+0x2c4>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d004      	beq.n	8005218 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005214:	4313      	orrs	r3, r2
 8005216:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005228:	430a      	orrs	r2, r1
 800522a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a90      	ldr	r2, [pc, #576]	; (8005474 <UART_SetConfig+0x2c8>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d126      	bne.n	8005284 <UART_SetConfig+0xd8>
 8005236:	4b90      	ldr	r3, [pc, #576]	; (8005478 <UART_SetConfig+0x2cc>)
 8005238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523c:	f003 0303 	and.w	r3, r3, #3
 8005240:	2b03      	cmp	r3, #3
 8005242:	d81b      	bhi.n	800527c <UART_SetConfig+0xd0>
 8005244:	a201      	add	r2, pc, #4	; (adr r2, 800524c <UART_SetConfig+0xa0>)
 8005246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524a:	bf00      	nop
 800524c:	0800525d 	.word	0x0800525d
 8005250:	0800526d 	.word	0x0800526d
 8005254:	08005265 	.word	0x08005265
 8005258:	08005275 	.word	0x08005275
 800525c:	2301      	movs	r3, #1
 800525e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005262:	e116      	b.n	8005492 <UART_SetConfig+0x2e6>
 8005264:	2302      	movs	r3, #2
 8005266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800526a:	e112      	b.n	8005492 <UART_SetConfig+0x2e6>
 800526c:	2304      	movs	r3, #4
 800526e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005272:	e10e      	b.n	8005492 <UART_SetConfig+0x2e6>
 8005274:	2308      	movs	r3, #8
 8005276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800527a:	e10a      	b.n	8005492 <UART_SetConfig+0x2e6>
 800527c:	2310      	movs	r3, #16
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005282:	e106      	b.n	8005492 <UART_SetConfig+0x2e6>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a7c      	ldr	r2, [pc, #496]	; (800547c <UART_SetConfig+0x2d0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d138      	bne.n	8005300 <UART_SetConfig+0x154>
 800528e:	4b7a      	ldr	r3, [pc, #488]	; (8005478 <UART_SetConfig+0x2cc>)
 8005290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005294:	f003 030c 	and.w	r3, r3, #12
 8005298:	2b0c      	cmp	r3, #12
 800529a:	d82d      	bhi.n	80052f8 <UART_SetConfig+0x14c>
 800529c:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <UART_SetConfig+0xf8>)
 800529e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a2:	bf00      	nop
 80052a4:	080052d9 	.word	0x080052d9
 80052a8:	080052f9 	.word	0x080052f9
 80052ac:	080052f9 	.word	0x080052f9
 80052b0:	080052f9 	.word	0x080052f9
 80052b4:	080052e9 	.word	0x080052e9
 80052b8:	080052f9 	.word	0x080052f9
 80052bc:	080052f9 	.word	0x080052f9
 80052c0:	080052f9 	.word	0x080052f9
 80052c4:	080052e1 	.word	0x080052e1
 80052c8:	080052f9 	.word	0x080052f9
 80052cc:	080052f9 	.word	0x080052f9
 80052d0:	080052f9 	.word	0x080052f9
 80052d4:	080052f1 	.word	0x080052f1
 80052d8:	2300      	movs	r3, #0
 80052da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052de:	e0d8      	b.n	8005492 <UART_SetConfig+0x2e6>
 80052e0:	2302      	movs	r3, #2
 80052e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e6:	e0d4      	b.n	8005492 <UART_SetConfig+0x2e6>
 80052e8:	2304      	movs	r3, #4
 80052ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ee:	e0d0      	b.n	8005492 <UART_SetConfig+0x2e6>
 80052f0:	2308      	movs	r3, #8
 80052f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052f6:	e0cc      	b.n	8005492 <UART_SetConfig+0x2e6>
 80052f8:	2310      	movs	r3, #16
 80052fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052fe:	e0c8      	b.n	8005492 <UART_SetConfig+0x2e6>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a5e      	ldr	r2, [pc, #376]	; (8005480 <UART_SetConfig+0x2d4>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d125      	bne.n	8005356 <UART_SetConfig+0x1aa>
 800530a:	4b5b      	ldr	r3, [pc, #364]	; (8005478 <UART_SetConfig+0x2cc>)
 800530c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005310:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005314:	2b30      	cmp	r3, #48	; 0x30
 8005316:	d016      	beq.n	8005346 <UART_SetConfig+0x19a>
 8005318:	2b30      	cmp	r3, #48	; 0x30
 800531a:	d818      	bhi.n	800534e <UART_SetConfig+0x1a2>
 800531c:	2b20      	cmp	r3, #32
 800531e:	d00a      	beq.n	8005336 <UART_SetConfig+0x18a>
 8005320:	2b20      	cmp	r3, #32
 8005322:	d814      	bhi.n	800534e <UART_SetConfig+0x1a2>
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <UART_SetConfig+0x182>
 8005328:	2b10      	cmp	r3, #16
 800532a:	d008      	beq.n	800533e <UART_SetConfig+0x192>
 800532c:	e00f      	b.n	800534e <UART_SetConfig+0x1a2>
 800532e:	2300      	movs	r3, #0
 8005330:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005334:	e0ad      	b.n	8005492 <UART_SetConfig+0x2e6>
 8005336:	2302      	movs	r3, #2
 8005338:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800533c:	e0a9      	b.n	8005492 <UART_SetConfig+0x2e6>
 800533e:	2304      	movs	r3, #4
 8005340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005344:	e0a5      	b.n	8005492 <UART_SetConfig+0x2e6>
 8005346:	2308      	movs	r3, #8
 8005348:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800534c:	e0a1      	b.n	8005492 <UART_SetConfig+0x2e6>
 800534e:	2310      	movs	r3, #16
 8005350:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005354:	e09d      	b.n	8005492 <UART_SetConfig+0x2e6>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a4a      	ldr	r2, [pc, #296]	; (8005484 <UART_SetConfig+0x2d8>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d125      	bne.n	80053ac <UART_SetConfig+0x200>
 8005360:	4b45      	ldr	r3, [pc, #276]	; (8005478 <UART_SetConfig+0x2cc>)
 8005362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005366:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800536a:	2bc0      	cmp	r3, #192	; 0xc0
 800536c:	d016      	beq.n	800539c <UART_SetConfig+0x1f0>
 800536e:	2bc0      	cmp	r3, #192	; 0xc0
 8005370:	d818      	bhi.n	80053a4 <UART_SetConfig+0x1f8>
 8005372:	2b80      	cmp	r3, #128	; 0x80
 8005374:	d00a      	beq.n	800538c <UART_SetConfig+0x1e0>
 8005376:	2b80      	cmp	r3, #128	; 0x80
 8005378:	d814      	bhi.n	80053a4 <UART_SetConfig+0x1f8>
 800537a:	2b00      	cmp	r3, #0
 800537c:	d002      	beq.n	8005384 <UART_SetConfig+0x1d8>
 800537e:	2b40      	cmp	r3, #64	; 0x40
 8005380:	d008      	beq.n	8005394 <UART_SetConfig+0x1e8>
 8005382:	e00f      	b.n	80053a4 <UART_SetConfig+0x1f8>
 8005384:	2300      	movs	r3, #0
 8005386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800538a:	e082      	b.n	8005492 <UART_SetConfig+0x2e6>
 800538c:	2302      	movs	r3, #2
 800538e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005392:	e07e      	b.n	8005492 <UART_SetConfig+0x2e6>
 8005394:	2304      	movs	r3, #4
 8005396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800539a:	e07a      	b.n	8005492 <UART_SetConfig+0x2e6>
 800539c:	2308      	movs	r3, #8
 800539e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053a2:	e076      	b.n	8005492 <UART_SetConfig+0x2e6>
 80053a4:	2310      	movs	r3, #16
 80053a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053aa:	e072      	b.n	8005492 <UART_SetConfig+0x2e6>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a35      	ldr	r2, [pc, #212]	; (8005488 <UART_SetConfig+0x2dc>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d12a      	bne.n	800540c <UART_SetConfig+0x260>
 80053b6:	4b30      	ldr	r3, [pc, #192]	; (8005478 <UART_SetConfig+0x2cc>)
 80053b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053c4:	d01a      	beq.n	80053fc <UART_SetConfig+0x250>
 80053c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053ca:	d81b      	bhi.n	8005404 <UART_SetConfig+0x258>
 80053cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053d0:	d00c      	beq.n	80053ec <UART_SetConfig+0x240>
 80053d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053d6:	d815      	bhi.n	8005404 <UART_SetConfig+0x258>
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <UART_SetConfig+0x238>
 80053dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053e0:	d008      	beq.n	80053f4 <UART_SetConfig+0x248>
 80053e2:	e00f      	b.n	8005404 <UART_SetConfig+0x258>
 80053e4:	2300      	movs	r3, #0
 80053e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ea:	e052      	b.n	8005492 <UART_SetConfig+0x2e6>
 80053ec:	2302      	movs	r3, #2
 80053ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053f2:	e04e      	b.n	8005492 <UART_SetConfig+0x2e6>
 80053f4:	2304      	movs	r3, #4
 80053f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053fa:	e04a      	b.n	8005492 <UART_SetConfig+0x2e6>
 80053fc:	2308      	movs	r3, #8
 80053fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005402:	e046      	b.n	8005492 <UART_SetConfig+0x2e6>
 8005404:	2310      	movs	r3, #16
 8005406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800540a:	e042      	b.n	8005492 <UART_SetConfig+0x2e6>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a17      	ldr	r2, [pc, #92]	; (8005470 <UART_SetConfig+0x2c4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d13a      	bne.n	800548c <UART_SetConfig+0x2e0>
 8005416:	4b18      	ldr	r3, [pc, #96]	; (8005478 <UART_SetConfig+0x2cc>)
 8005418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005420:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005424:	d01a      	beq.n	800545c <UART_SetConfig+0x2b0>
 8005426:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800542a:	d81b      	bhi.n	8005464 <UART_SetConfig+0x2b8>
 800542c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005430:	d00c      	beq.n	800544c <UART_SetConfig+0x2a0>
 8005432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005436:	d815      	bhi.n	8005464 <UART_SetConfig+0x2b8>
 8005438:	2b00      	cmp	r3, #0
 800543a:	d003      	beq.n	8005444 <UART_SetConfig+0x298>
 800543c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005440:	d008      	beq.n	8005454 <UART_SetConfig+0x2a8>
 8005442:	e00f      	b.n	8005464 <UART_SetConfig+0x2b8>
 8005444:	2300      	movs	r3, #0
 8005446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800544a:	e022      	b.n	8005492 <UART_SetConfig+0x2e6>
 800544c:	2302      	movs	r3, #2
 800544e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005452:	e01e      	b.n	8005492 <UART_SetConfig+0x2e6>
 8005454:	2304      	movs	r3, #4
 8005456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800545a:	e01a      	b.n	8005492 <UART_SetConfig+0x2e6>
 800545c:	2308      	movs	r3, #8
 800545e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005462:	e016      	b.n	8005492 <UART_SetConfig+0x2e6>
 8005464:	2310      	movs	r3, #16
 8005466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800546a:	e012      	b.n	8005492 <UART_SetConfig+0x2e6>
 800546c:	efff69f3 	.word	0xefff69f3
 8005470:	40008000 	.word	0x40008000
 8005474:	40013800 	.word	0x40013800
 8005478:	40021000 	.word	0x40021000
 800547c:	40004400 	.word	0x40004400
 8005480:	40004800 	.word	0x40004800
 8005484:	40004c00 	.word	0x40004c00
 8005488:	40005000 	.word	0x40005000
 800548c:	2310      	movs	r3, #16
 800548e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a9f      	ldr	r2, [pc, #636]	; (8005714 <UART_SetConfig+0x568>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d17a      	bne.n	8005592 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800549c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d824      	bhi.n	80054ee <UART_SetConfig+0x342>
 80054a4:	a201      	add	r2, pc, #4	; (adr r2, 80054ac <UART_SetConfig+0x300>)
 80054a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054aa:	bf00      	nop
 80054ac:	080054d1 	.word	0x080054d1
 80054b0:	080054ef 	.word	0x080054ef
 80054b4:	080054d9 	.word	0x080054d9
 80054b8:	080054ef 	.word	0x080054ef
 80054bc:	080054df 	.word	0x080054df
 80054c0:	080054ef 	.word	0x080054ef
 80054c4:	080054ef 	.word	0x080054ef
 80054c8:	080054ef 	.word	0x080054ef
 80054cc:	080054e7 	.word	0x080054e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054d0:	f7fe fdd2 	bl	8004078 <HAL_RCC_GetPCLK1Freq>
 80054d4:	61f8      	str	r0, [r7, #28]
        break;
 80054d6:	e010      	b.n	80054fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054d8:	4b8f      	ldr	r3, [pc, #572]	; (8005718 <UART_SetConfig+0x56c>)
 80054da:	61fb      	str	r3, [r7, #28]
        break;
 80054dc:	e00d      	b.n	80054fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054de:	f7fe fd33 	bl	8003f48 <HAL_RCC_GetSysClockFreq>
 80054e2:	61f8      	str	r0, [r7, #28]
        break;
 80054e4:	e009      	b.n	80054fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ea:	61fb      	str	r3, [r7, #28]
        break;
 80054ec:	e005      	b.n	80054fa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80054f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 80fb 	beq.w	80056f8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	4613      	mov	r3, r2
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	4413      	add	r3, r2
 800550c:	69fa      	ldr	r2, [r7, #28]
 800550e:	429a      	cmp	r2, r3
 8005510:	d305      	bcc.n	800551e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005518:	69fa      	ldr	r2, [r7, #28]
 800551a:	429a      	cmp	r2, r3
 800551c:	d903      	bls.n	8005526 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005524:	e0e8      	b.n	80056f8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	2200      	movs	r2, #0
 800552a:	461c      	mov	r4, r3
 800552c:	4615      	mov	r5, r2
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	f04f 0300 	mov.w	r3, #0
 8005536:	022b      	lsls	r3, r5, #8
 8005538:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800553c:	0222      	lsls	r2, r4, #8
 800553e:	68f9      	ldr	r1, [r7, #12]
 8005540:	6849      	ldr	r1, [r1, #4]
 8005542:	0849      	lsrs	r1, r1, #1
 8005544:	2000      	movs	r0, #0
 8005546:	4688      	mov	r8, r1
 8005548:	4681      	mov	r9, r0
 800554a:	eb12 0a08 	adds.w	sl, r2, r8
 800554e:	eb43 0b09 	adc.w	fp, r3, r9
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	603b      	str	r3, [r7, #0]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005560:	4650      	mov	r0, sl
 8005562:	4659      	mov	r1, fp
 8005564:	f7fb fb20 	bl	8000ba8 <__aeabi_uldivmod>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	4613      	mov	r3, r2
 800556e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005576:	d308      	bcc.n	800558a <UART_SetConfig+0x3de>
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800557e:	d204      	bcs.n	800558a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	60da      	str	r2, [r3, #12]
 8005588:	e0b6      	b.n	80056f8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005590:	e0b2      	b.n	80056f8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800559a:	d15e      	bne.n	800565a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800559c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d828      	bhi.n	80055f6 <UART_SetConfig+0x44a>
 80055a4:	a201      	add	r2, pc, #4	; (adr r2, 80055ac <UART_SetConfig+0x400>)
 80055a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055aa:	bf00      	nop
 80055ac:	080055d1 	.word	0x080055d1
 80055b0:	080055d9 	.word	0x080055d9
 80055b4:	080055e1 	.word	0x080055e1
 80055b8:	080055f7 	.word	0x080055f7
 80055bc:	080055e7 	.word	0x080055e7
 80055c0:	080055f7 	.word	0x080055f7
 80055c4:	080055f7 	.word	0x080055f7
 80055c8:	080055f7 	.word	0x080055f7
 80055cc:	080055ef 	.word	0x080055ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055d0:	f7fe fd52 	bl	8004078 <HAL_RCC_GetPCLK1Freq>
 80055d4:	61f8      	str	r0, [r7, #28]
        break;
 80055d6:	e014      	b.n	8005602 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055d8:	f7fe fd64 	bl	80040a4 <HAL_RCC_GetPCLK2Freq>
 80055dc:	61f8      	str	r0, [r7, #28]
        break;
 80055de:	e010      	b.n	8005602 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055e0:	4b4d      	ldr	r3, [pc, #308]	; (8005718 <UART_SetConfig+0x56c>)
 80055e2:	61fb      	str	r3, [r7, #28]
        break;
 80055e4:	e00d      	b.n	8005602 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055e6:	f7fe fcaf 	bl	8003f48 <HAL_RCC_GetSysClockFreq>
 80055ea:	61f8      	str	r0, [r7, #28]
        break;
 80055ec:	e009      	b.n	8005602 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055f2:	61fb      	str	r3, [r7, #28]
        break;
 80055f4:	e005      	b.n	8005602 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80055f6:	2300      	movs	r3, #0
 80055f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005600:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d077      	beq.n	80056f8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	005a      	lsls	r2, r3, #1
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	085b      	lsrs	r3, r3, #1
 8005612:	441a      	add	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	fbb2 f3f3 	udiv	r3, r2, r3
 800561c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	2b0f      	cmp	r3, #15
 8005622:	d916      	bls.n	8005652 <UART_SetConfig+0x4a6>
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800562a:	d212      	bcs.n	8005652 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	b29b      	uxth	r3, r3
 8005630:	f023 030f 	bic.w	r3, r3, #15
 8005634:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	085b      	lsrs	r3, r3, #1
 800563a:	b29b      	uxth	r3, r3
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	b29a      	uxth	r2, r3
 8005642:	8afb      	ldrh	r3, [r7, #22]
 8005644:	4313      	orrs	r3, r2
 8005646:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	8afa      	ldrh	r2, [r7, #22]
 800564e:	60da      	str	r2, [r3, #12]
 8005650:	e052      	b.n	80056f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005658:	e04e      	b.n	80056f8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800565a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800565e:	2b08      	cmp	r3, #8
 8005660:	d827      	bhi.n	80056b2 <UART_SetConfig+0x506>
 8005662:	a201      	add	r2, pc, #4	; (adr r2, 8005668 <UART_SetConfig+0x4bc>)
 8005664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005668:	0800568d 	.word	0x0800568d
 800566c:	08005695 	.word	0x08005695
 8005670:	0800569d 	.word	0x0800569d
 8005674:	080056b3 	.word	0x080056b3
 8005678:	080056a3 	.word	0x080056a3
 800567c:	080056b3 	.word	0x080056b3
 8005680:	080056b3 	.word	0x080056b3
 8005684:	080056b3 	.word	0x080056b3
 8005688:	080056ab 	.word	0x080056ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800568c:	f7fe fcf4 	bl	8004078 <HAL_RCC_GetPCLK1Freq>
 8005690:	61f8      	str	r0, [r7, #28]
        break;
 8005692:	e014      	b.n	80056be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005694:	f7fe fd06 	bl	80040a4 <HAL_RCC_GetPCLK2Freq>
 8005698:	61f8      	str	r0, [r7, #28]
        break;
 800569a:	e010      	b.n	80056be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800569c:	4b1e      	ldr	r3, [pc, #120]	; (8005718 <UART_SetConfig+0x56c>)
 800569e:	61fb      	str	r3, [r7, #28]
        break;
 80056a0:	e00d      	b.n	80056be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056a2:	f7fe fc51 	bl	8003f48 <HAL_RCC_GetSysClockFreq>
 80056a6:	61f8      	str	r0, [r7, #28]
        break;
 80056a8:	e009      	b.n	80056be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ae:	61fb      	str	r3, [r7, #28]
        break;
 80056b0:	e005      	b.n	80056be <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056bc:	bf00      	nop
    }

    if (pclk != 0U)
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d019      	beq.n	80056f8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	085a      	lsrs	r2, r3, #1
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	441a      	add	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	2b0f      	cmp	r3, #15
 80056dc:	d909      	bls.n	80056f2 <UART_SetConfig+0x546>
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e4:	d205      	bcs.n	80056f2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	60da      	str	r2, [r3, #12]
 80056f0:	e002      	b.n	80056f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005704:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005708:	4618      	mov	r0, r3
 800570a:	3728      	adds	r7, #40	; 0x28
 800570c:	46bd      	mov	sp, r7
 800570e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005712:	bf00      	nop
 8005714:	40008000 	.word	0x40008000
 8005718:	00f42400 	.word	0x00f42400

0800571c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00a      	beq.n	8005746 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00a      	beq.n	8005768 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	f003 0304 	and.w	r3, r3, #4
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00a      	beq.n	800578a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00a      	beq.n	80057ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00a      	beq.n	80057ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d01a      	beq.n	8005832 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800581a:	d10a      	bne.n	8005832 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00a      	beq.n	8005854 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	605a      	str	r2, [r3, #4]
  }
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af02      	add	r7, sp, #8
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005870:	f7fb ffb6 	bl	80017e0 <HAL_GetTick>
 8005874:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0308 	and.w	r3, r3, #8
 8005880:	2b08      	cmp	r3, #8
 8005882:	d10e      	bne.n	80058a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005884:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f82d 	bl	80058f2 <UART_WaitOnFlagUntilTimeout>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e023      	b.n	80058ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d10e      	bne.n	80058ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f817 	bl	80058f2 <UART_WaitOnFlagUntilTimeout>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e00d      	b.n	80058ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2220      	movs	r2, #32
 80058d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2220      	movs	r2, #32
 80058d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b09c      	sub	sp, #112	; 0x70
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	603b      	str	r3, [r7, #0]
 80058fe:	4613      	mov	r3, r2
 8005900:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005902:	e0a5      	b.n	8005a50 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590a:	f000 80a1 	beq.w	8005a50 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800590e:	f7fb ff67 	bl	80017e0 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800591a:	429a      	cmp	r2, r3
 800591c:	d302      	bcc.n	8005924 <UART_WaitOnFlagUntilTimeout+0x32>
 800591e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005920:	2b00      	cmp	r3, #0
 8005922:	d13e      	bne.n	80059a2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005934:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005938:	667b      	str	r3, [r7, #100]	; 0x64
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	461a      	mov	r2, r3
 8005940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005942:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005944:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005946:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005948:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e6      	bne.n	8005924 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3308      	adds	r3, #8
 800595c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005960:	e853 3f00 	ldrex	r3, [r3]
 8005964:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005968:	f023 0301 	bic.w	r3, r3, #1
 800596c:	663b      	str	r3, [r7, #96]	; 0x60
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3308      	adds	r3, #8
 8005974:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005976:	64ba      	str	r2, [r7, #72]	; 0x48
 8005978:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800597c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800597e:	e841 2300 	strex	r3, r2, [r1]
 8005982:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1e5      	bne.n	8005956 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2220      	movs	r2, #32
 800598e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2220      	movs	r2, #32
 8005994:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e067      	b.n	8005a72 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d04f      	beq.n	8005a50 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059be:	d147      	bne.n	8005a50 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059c8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	e853 3f00 	ldrex	r3, [r3]
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	461a      	mov	r2, r3
 80059e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e8:	637b      	str	r3, [r7, #52]	; 0x34
 80059ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059f0:	e841 2300 	strex	r3, r2, [r1]
 80059f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e6      	bne.n	80059ca <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3308      	adds	r3, #8
 8005a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f023 0301 	bic.w	r3, r3, #1
 8005a12:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3308      	adds	r3, #8
 8005a1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a1c:	623a      	str	r2, [r7, #32]
 8005a1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a20:	69f9      	ldr	r1, [r7, #28]
 8005a22:	6a3a      	ldr	r2, [r7, #32]
 8005a24:	e841 2300 	strex	r3, r2, [r1]
 8005a28:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e5      	bne.n	80059fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2220      	movs	r2, #32
 8005a34:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e010      	b.n	8005a72 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	69da      	ldr	r2, [r3, #28]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	4013      	ands	r3, r2
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	bf0c      	ite	eq
 8005a60:	2301      	moveq	r3, #1
 8005a62:	2300      	movne	r3, #0
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	461a      	mov	r2, r3
 8005a68:	79fb      	ldrb	r3, [r7, #7]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	f43f af4a 	beq.w	8005904 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3770      	adds	r7, #112	; 0x70
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
	...

08005a7c <__NVIC_SetPriority>:
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	4603      	mov	r3, r0
 8005a84:	6039      	str	r1, [r7, #0]
 8005a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	db0a      	blt.n	8005aa6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	490c      	ldr	r1, [pc, #48]	; (8005ac8 <__NVIC_SetPriority+0x4c>)
 8005a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a9a:	0112      	lsls	r2, r2, #4
 8005a9c:	b2d2      	uxtb	r2, r2
 8005a9e:	440b      	add	r3, r1
 8005aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005aa4:	e00a      	b.n	8005abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	4908      	ldr	r1, [pc, #32]	; (8005acc <__NVIC_SetPriority+0x50>)
 8005aac:	79fb      	ldrb	r3, [r7, #7]
 8005aae:	f003 030f 	and.w	r3, r3, #15
 8005ab2:	3b04      	subs	r3, #4
 8005ab4:	0112      	lsls	r2, r2, #4
 8005ab6:	b2d2      	uxtb	r2, r2
 8005ab8:	440b      	add	r3, r1
 8005aba:	761a      	strb	r2, [r3, #24]
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	e000e100 	.word	0xe000e100
 8005acc:	e000ed00 	.word	0xe000ed00

08005ad0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005ad4:	4b05      	ldr	r3, [pc, #20]	; (8005aec <SysTick_Handler+0x1c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005ad8:	f001 fd28 	bl	800752c <xTaskGetSchedulerState>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d001      	beq.n	8005ae6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005ae2:	f002 fb11 	bl	8008108 <xPortSysTickHandler>
  }
}
 8005ae6:	bf00      	nop
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	e000e010 	.word	0xe000e010

08005af0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005af4:	2100      	movs	r1, #0
 8005af6:	f06f 0004 	mvn.w	r0, #4
 8005afa:	f7ff ffbf 	bl	8005a7c <__NVIC_SetPriority>
#endif
}
 8005afe:	bf00      	nop
 8005b00:	bd80      	pop	{r7, pc}
	...

08005b04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b0a:	f3ef 8305 	mrs	r3, IPSR
 8005b0e:	603b      	str	r3, [r7, #0]
  return(result);
 8005b10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005b16:	f06f 0305 	mvn.w	r3, #5
 8005b1a:	607b      	str	r3, [r7, #4]
 8005b1c:	e00c      	b.n	8005b38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005b1e:	4b0a      	ldr	r3, [pc, #40]	; (8005b48 <osKernelInitialize+0x44>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d105      	bne.n	8005b32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005b26:	4b08      	ldr	r3, [pc, #32]	; (8005b48 <osKernelInitialize+0x44>)
 8005b28:	2201      	movs	r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	607b      	str	r3, [r7, #4]
 8005b30:	e002      	b.n	8005b38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005b32:	f04f 33ff 	mov.w	r3, #4294967295
 8005b36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005b38:	687b      	ldr	r3, [r7, #4]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	20000340 	.word	0x20000340

08005b4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b52:	f3ef 8305 	mrs	r3, IPSR
 8005b56:	603b      	str	r3, [r7, #0]
  return(result);
 8005b58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005b5e:	f06f 0305 	mvn.w	r3, #5
 8005b62:	607b      	str	r3, [r7, #4]
 8005b64:	e010      	b.n	8005b88 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005b66:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <osKernelStart+0x48>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d109      	bne.n	8005b82 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005b6e:	f7ff ffbf 	bl	8005af0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005b72:	4b08      	ldr	r3, [pc, #32]	; (8005b94 <osKernelStart+0x48>)
 8005b74:	2202      	movs	r2, #2
 8005b76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005b78:	f001 f87c 	bl	8006c74 <vTaskStartScheduler>
      stat = osOK;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	607b      	str	r3, [r7, #4]
 8005b80:	e002      	b.n	8005b88 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005b82:	f04f 33ff 	mov.w	r3, #4294967295
 8005b86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005b88:	687b      	ldr	r3, [r7, #4]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	20000340 	.word	0x20000340

08005b98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b08e      	sub	sp, #56	; 0x38
 8005b9c:	af04      	add	r7, sp, #16
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ba8:	f3ef 8305 	mrs	r3, IPSR
 8005bac:	617b      	str	r3, [r7, #20]
  return(result);
 8005bae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d17e      	bne.n	8005cb2 <osThreadNew+0x11a>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d07b      	beq.n	8005cb2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005bba:	2380      	movs	r3, #128	; 0x80
 8005bbc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005bbe:	2318      	movs	r3, #24
 8005bc0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d045      	beq.n	8005c5e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <osThreadNew+0x48>
        name = attr->name;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d008      	beq.n	8005c06 <osThreadNew+0x6e>
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	2b38      	cmp	r3, #56	; 0x38
 8005bf8:	d805      	bhi.n	8005c06 <osThreadNew+0x6e>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <osThreadNew+0x72>
        return (NULL);
 8005c06:	2300      	movs	r3, #0
 8005c08:	e054      	b.n	8005cb4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	089b      	lsrs	r3, r3, #2
 8005c18:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00e      	beq.n	8005c40 <osThreadNew+0xa8>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	2ba7      	cmp	r3, #167	; 0xa7
 8005c28:	d90a      	bls.n	8005c40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d006      	beq.n	8005c40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d002      	beq.n	8005c40 <osThreadNew+0xa8>
        mem = 1;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	61bb      	str	r3, [r7, #24]
 8005c3e:	e010      	b.n	8005c62 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10c      	bne.n	8005c62 <osThreadNew+0xca>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d108      	bne.n	8005c62 <osThreadNew+0xca>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d104      	bne.n	8005c62 <osThreadNew+0xca>
          mem = 0;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	61bb      	str	r3, [r7, #24]
 8005c5c:	e001      	b.n	8005c62 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d110      	bne.n	8005c8a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c70:	9202      	str	r2, [sp, #8]
 8005c72:	9301      	str	r3, [sp, #4]
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	6a3a      	ldr	r2, [r7, #32]
 8005c7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 fe0c 	bl	800689c <xTaskCreateStatic>
 8005c84:	4603      	mov	r3, r0
 8005c86:	613b      	str	r3, [r7, #16]
 8005c88:	e013      	b.n	8005cb2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d110      	bne.n	8005cb2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	f107 0310 	add.w	r3, r7, #16
 8005c98:	9301      	str	r3, [sp, #4]
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 fe57 	bl	8006956 <xTaskCreate>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d001      	beq.n	8005cb2 <osThreadNew+0x11a>
            hTask = NULL;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005cb2:	693b      	ldr	r3, [r7, #16]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3728      	adds	r7, #40	; 0x28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cc4:	f3ef 8305 	mrs	r3, IPSR
 8005cc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d003      	beq.n	8005cd8 <osDelay+0x1c>
    stat = osErrorISR;
 8005cd0:	f06f 0305 	mvn.w	r3, #5
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	e007      	b.n	8005ce8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 ff92 	bl	8006c0c <vTaskDelay>
    }
  }

  return (stat);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
	...

08005cf4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4a07      	ldr	r2, [pc, #28]	; (8005d20 <vApplicationGetIdleTaskMemory+0x2c>)
 8005d04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	4a06      	ldr	r2, [pc, #24]	; (8005d24 <vApplicationGetIdleTaskMemory+0x30>)
 8005d0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2280      	movs	r2, #128	; 0x80
 8005d10:	601a      	str	r2, [r3, #0]
}
 8005d12:	bf00      	nop
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	20000344 	.word	0x20000344
 8005d24:	200003ec 	.word	0x200003ec

08005d28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	4a07      	ldr	r2, [pc, #28]	; (8005d54 <vApplicationGetTimerTaskMemory+0x2c>)
 8005d38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	4a06      	ldr	r2, [pc, #24]	; (8005d58 <vApplicationGetTimerTaskMemory+0x30>)
 8005d3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d46:	601a      	str	r2, [r3, #0]
}
 8005d48:	bf00      	nop
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	200005ec 	.word	0x200005ec
 8005d58:	20000694 	.word	0x20000694

08005d5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f103 0208 	add.w	r2, r3, #8
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f04f 32ff 	mov.w	r2, #4294967295
 8005d74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f103 0208 	add.w	r2, r3, #8
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f103 0208 	add.w	r2, r3, #8
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005db6:	b480      	push	{r7}
 8005db8:	b085      	sub	sp, #20
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	601a      	str	r2, [r3, #0]
}
 8005df2:	bf00      	nop
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b085      	sub	sp, #20
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e14:	d103      	bne.n	8005e1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	e00c      	b.n	8005e38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	3308      	adds	r3, #8
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	e002      	b.n	8005e2c <vListInsert+0x2e>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	60fb      	str	r3, [r7, #12]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d2f6      	bcs.n	8005e26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	601a      	str	r2, [r3, #0]
}
 8005e64:	bf00      	nop
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6892      	ldr	r2, [r2, #8]
 8005e86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6852      	ldr	r2, [r2, #4]
 8005e90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d103      	bne.n	8005ea4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	1e5a      	subs	r2, r3, #1
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10a      	bne.n	8005eee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005eea:	bf00      	nop
 8005eec:	e7fe      	b.n	8005eec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005eee:	f002 f879 	bl	8007fe4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efa:	68f9      	ldr	r1, [r7, #12]
 8005efc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005efe:	fb01 f303 	mul.w	r3, r1, r3
 8005f02:	441a      	add	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	68f9      	ldr	r1, [r7, #12]
 8005f22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f24:	fb01 f303 	mul.w	r3, r1, r3
 8005f28:	441a      	add	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	22ff      	movs	r2, #255	; 0xff
 8005f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	22ff      	movs	r2, #255	; 0xff
 8005f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d114      	bne.n	8005f6e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d01a      	beq.n	8005f82 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	3310      	adds	r3, #16
 8005f50:	4618      	mov	r0, r3
 8005f52:	f001 f929 	bl	80071a8 <xTaskRemoveFromEventList>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d012      	beq.n	8005f82 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f5c:	4b0c      	ldr	r3, [pc, #48]	; (8005f90 <xQueueGenericReset+0xcc>)
 8005f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	e009      	b.n	8005f82 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	3310      	adds	r3, #16
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7ff fef2 	bl	8005d5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	3324      	adds	r3, #36	; 0x24
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7ff feed 	bl	8005d5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f82:	f002 f85f 	bl	8008044 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f86:	2301      	movs	r3, #1
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	e000ed04 	.word	0xe000ed04

08005f94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b08e      	sub	sp, #56	; 0x38
 8005f98:	af02      	add	r7, sp, #8
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10a      	bne.n	8005fbe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005fba:	bf00      	nop
 8005fbc:	e7fe      	b.n	8005fbc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10a      	bne.n	8005fda <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fd6:	bf00      	nop
 8005fd8:	e7fe      	b.n	8005fd8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <xQueueGenericCreateStatic+0x52>
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <xQueueGenericCreateStatic+0x56>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e000      	b.n	8005fec <xQueueGenericCreateStatic+0x58>
 8005fea:	2300      	movs	r3, #0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10a      	bne.n	8006006 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff4:	f383 8811 	msr	BASEPRI, r3
 8005ff8:	f3bf 8f6f 	isb	sy
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	623b      	str	r3, [r7, #32]
}
 8006002:	bf00      	nop
 8006004:	e7fe      	b.n	8006004 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d102      	bne.n	8006012 <xQueueGenericCreateStatic+0x7e>
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <xQueueGenericCreateStatic+0x82>
 8006012:	2301      	movs	r3, #1
 8006014:	e000      	b.n	8006018 <xQueueGenericCreateStatic+0x84>
 8006016:	2300      	movs	r3, #0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10a      	bne.n	8006032 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	61fb      	str	r3, [r7, #28]
}
 800602e:	bf00      	nop
 8006030:	e7fe      	b.n	8006030 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006032:	2350      	movs	r3, #80	; 0x50
 8006034:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	2b50      	cmp	r3, #80	; 0x50
 800603a:	d00a      	beq.n	8006052 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	61bb      	str	r3, [r7, #24]
}
 800604e:	bf00      	nop
 8006050:	e7fe      	b.n	8006050 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006052:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00d      	beq.n	800607a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800605e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006066:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800606a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	4613      	mov	r3, r2
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	68b9      	ldr	r1, [r7, #8]
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f000 f805 	bl	8006084 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800607a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800607c:	4618      	mov	r0, r3
 800607e:	3730      	adds	r7, #48	; 0x30
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
 8006090:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d103      	bne.n	80060a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	e002      	b.n	80060a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80060b2:	2101      	movs	r1, #1
 80060b4:	69b8      	ldr	r0, [r7, #24]
 80060b6:	f7ff ff05 	bl	8005ec4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	78fa      	ldrb	r2, [r7, #3]
 80060be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80060c2:	bf00      	nop
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
	...

080060cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08e      	sub	sp, #56	; 0x38
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
 80060d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80060da:	2300      	movs	r3, #0
 80060dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10a      	bne.n	80060fe <xQueueGenericSend+0x32>
	__asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060fa:	bf00      	nop
 80060fc:	e7fe      	b.n	80060fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d103      	bne.n	800610c <xQueueGenericSend+0x40>
 8006104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006108:	2b00      	cmp	r3, #0
 800610a:	d101      	bne.n	8006110 <xQueueGenericSend+0x44>
 800610c:	2301      	movs	r3, #1
 800610e:	e000      	b.n	8006112 <xQueueGenericSend+0x46>
 8006110:	2300      	movs	r3, #0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10a      	bne.n	800612c <xQueueGenericSend+0x60>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006128:	bf00      	nop
 800612a:	e7fe      	b.n	800612a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	2b02      	cmp	r3, #2
 8006130:	d103      	bne.n	800613a <xQueueGenericSend+0x6e>
 8006132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006136:	2b01      	cmp	r3, #1
 8006138:	d101      	bne.n	800613e <xQueueGenericSend+0x72>
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <xQueueGenericSend+0x74>
 800613e:	2300      	movs	r3, #0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10a      	bne.n	800615a <xQueueGenericSend+0x8e>
	__asm volatile
 8006144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	623b      	str	r3, [r7, #32]
}
 8006156:	bf00      	nop
 8006158:	e7fe      	b.n	8006158 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800615a:	f001 f9e7 	bl	800752c <xTaskGetSchedulerState>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d102      	bne.n	800616a <xQueueGenericSend+0x9e>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <xQueueGenericSend+0xa2>
 800616a:	2301      	movs	r3, #1
 800616c:	e000      	b.n	8006170 <xQueueGenericSend+0xa4>
 800616e:	2300      	movs	r3, #0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10a      	bne.n	800618a <xQueueGenericSend+0xbe>
	__asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	61fb      	str	r3, [r7, #28]
}
 8006186:	bf00      	nop
 8006188:	e7fe      	b.n	8006188 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800618a:	f001 ff2b 	bl	8007fe4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800618e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006196:	429a      	cmp	r2, r3
 8006198:	d302      	bcc.n	80061a0 <xQueueGenericSend+0xd4>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b02      	cmp	r3, #2
 800619e:	d129      	bne.n	80061f4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	68b9      	ldr	r1, [r7, #8]
 80061a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061a6:	f000 fa0b 	bl	80065c0 <prvCopyDataToQueue>
 80061aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d010      	beq.n	80061d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	3324      	adds	r3, #36	; 0x24
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 fff5 	bl	80071a8 <xTaskRemoveFromEventList>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d013      	beq.n	80061ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80061c4:	4b3f      	ldr	r3, [pc, #252]	; (80062c4 <xQueueGenericSend+0x1f8>)
 80061c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	e00a      	b.n	80061ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80061d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d007      	beq.n	80061ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80061dc:	4b39      	ldr	r3, [pc, #228]	; (80062c4 <xQueueGenericSend+0x1f8>)
 80061de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80061ec:	f001 ff2a 	bl	8008044 <vPortExitCritical>
				return pdPASS;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e063      	b.n	80062bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d103      	bne.n	8006202 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061fa:	f001 ff23 	bl	8008044 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	e05c      	b.n	80062bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006204:	2b00      	cmp	r3, #0
 8006206:	d106      	bne.n	8006216 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006208:	f107 0314 	add.w	r3, r7, #20
 800620c:	4618      	mov	r0, r3
 800620e:	f001 f82f 	bl	8007270 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006212:	2301      	movs	r3, #1
 8006214:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006216:	f001 ff15 	bl	8008044 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800621a:	f000 fd9b 	bl	8006d54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800621e:	f001 fee1 	bl	8007fe4 <vPortEnterCritical>
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006228:	b25b      	sxtb	r3, r3
 800622a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622e:	d103      	bne.n	8006238 <xQueueGenericSend+0x16c>
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	2200      	movs	r2, #0
 8006234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800623e:	b25b      	sxtb	r3, r3
 8006240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006244:	d103      	bne.n	800624e <xQueueGenericSend+0x182>
 8006246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800624e:	f001 fef9 	bl	8008044 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006252:	1d3a      	adds	r2, r7, #4
 8006254:	f107 0314 	add.w	r3, r7, #20
 8006258:	4611      	mov	r1, r2
 800625a:	4618      	mov	r0, r3
 800625c:	f001 f81e 	bl	800729c <xTaskCheckForTimeOut>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d124      	bne.n	80062b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006266:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006268:	f000 faa2 	bl	80067b0 <prvIsQueueFull>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d018      	beq.n	80062a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	3310      	adds	r3, #16
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	4611      	mov	r1, r2
 800627a:	4618      	mov	r0, r3
 800627c:	f000 ff44 	bl	8007108 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006282:	f000 fa2d 	bl	80066e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006286:	f000 fd73 	bl	8006d70 <xTaskResumeAll>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	f47f af7c 	bne.w	800618a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006292:	4b0c      	ldr	r3, [pc, #48]	; (80062c4 <xQueueGenericSend+0x1f8>)
 8006294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	e772      	b.n	800618a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80062a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062a6:	f000 fa1b 	bl	80066e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062aa:	f000 fd61 	bl	8006d70 <xTaskResumeAll>
 80062ae:	e76c      	b.n	800618a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80062b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062b2:	f000 fa15 	bl	80066e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062b6:	f000 fd5b 	bl	8006d70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80062ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3738      	adds	r7, #56	; 0x38
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	e000ed04 	.word	0xe000ed04

080062c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b090      	sub	sp, #64	; 0x40
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80062da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10a      	bne.n	80062f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80062f2:	bf00      	nop
 80062f4:	e7fe      	b.n	80062f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d103      	bne.n	8006304 <xQueueGenericSendFromISR+0x3c>
 80062fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <xQueueGenericSendFromISR+0x40>
 8006304:	2301      	movs	r3, #1
 8006306:	e000      	b.n	800630a <xQueueGenericSendFromISR+0x42>
 8006308:	2300      	movs	r3, #0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10a      	bne.n	8006324 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006320:	bf00      	nop
 8006322:	e7fe      	b.n	8006322 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	2b02      	cmp	r3, #2
 8006328:	d103      	bne.n	8006332 <xQueueGenericSendFromISR+0x6a>
 800632a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632e:	2b01      	cmp	r3, #1
 8006330:	d101      	bne.n	8006336 <xQueueGenericSendFromISR+0x6e>
 8006332:	2301      	movs	r3, #1
 8006334:	e000      	b.n	8006338 <xQueueGenericSendFromISR+0x70>
 8006336:	2300      	movs	r3, #0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10a      	bne.n	8006352 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800633c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006340:	f383 8811 	msr	BASEPRI, r3
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	623b      	str	r3, [r7, #32]
}
 800634e:	bf00      	nop
 8006350:	e7fe      	b.n	8006350 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006352:	f001 ff29 	bl	80081a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006356:	f3ef 8211 	mrs	r2, BASEPRI
 800635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	61fa      	str	r2, [r7, #28]
 800636c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800636e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006370:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637a:	429a      	cmp	r2, r3
 800637c:	d302      	bcc.n	8006384 <xQueueGenericSendFromISR+0xbc>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b02      	cmp	r3, #2
 8006382:	d12f      	bne.n	80063e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006386:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800638a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800638e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006392:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006394:	683a      	ldr	r2, [r7, #0]
 8006396:	68b9      	ldr	r1, [r7, #8]
 8006398:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800639a:	f000 f911 	bl	80065c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800639e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80063a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a6:	d112      	bne.n	80063ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d016      	beq.n	80063de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b2:	3324      	adds	r3, #36	; 0x24
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 fef7 	bl	80071a8 <xTaskRemoveFromEventList>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00e      	beq.n	80063de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00b      	beq.n	80063de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	601a      	str	r2, [r3, #0]
 80063cc:	e007      	b.n	80063de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063d2:	3301      	adds	r3, #1
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	b25a      	sxtb	r2, r3
 80063d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80063de:	2301      	movs	r3, #1
 80063e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80063e2:	e001      	b.n	80063e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063e4:	2300      	movs	r3, #0
 80063e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3740      	adds	r7, #64	; 0x40
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b08c      	sub	sp, #48	; 0x30
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800640c:	2300      	movs	r3, #0
 800640e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10a      	bne.n	8006430 <xQueueReceive+0x30>
	__asm volatile
 800641a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	623b      	str	r3, [r7, #32]
}
 800642c:	bf00      	nop
 800642e:	e7fe      	b.n	800642e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d103      	bne.n	800643e <xQueueReceive+0x3e>
 8006436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <xQueueReceive+0x42>
 800643e:	2301      	movs	r3, #1
 8006440:	e000      	b.n	8006444 <xQueueReceive+0x44>
 8006442:	2300      	movs	r3, #0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10a      	bne.n	800645e <xQueueReceive+0x5e>
	__asm volatile
 8006448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	61fb      	str	r3, [r7, #28]
}
 800645a:	bf00      	nop
 800645c:	e7fe      	b.n	800645c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800645e:	f001 f865 	bl	800752c <xTaskGetSchedulerState>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d102      	bne.n	800646e <xQueueReceive+0x6e>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <xQueueReceive+0x72>
 800646e:	2301      	movs	r3, #1
 8006470:	e000      	b.n	8006474 <xQueueReceive+0x74>
 8006472:	2300      	movs	r3, #0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10a      	bne.n	800648e <xQueueReceive+0x8e>
	__asm volatile
 8006478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647c:	f383 8811 	msr	BASEPRI, r3
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	61bb      	str	r3, [r7, #24]
}
 800648a:	bf00      	nop
 800648c:	e7fe      	b.n	800648c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800648e:	f001 fda9 	bl	8007fe4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006496:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	2b00      	cmp	r3, #0
 800649c:	d01f      	beq.n	80064de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800649e:	68b9      	ldr	r1, [r7, #8]
 80064a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064a2:	f000 f8f7 	bl	8006694 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	1e5a      	subs	r2, r3, #1
 80064aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00f      	beq.n	80064d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	3310      	adds	r3, #16
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 fe74 	bl	80071a8 <xTaskRemoveFromEventList>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d007      	beq.n	80064d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80064c6:	4b3d      	ldr	r3, [pc, #244]	; (80065bc <xQueueReceive+0x1bc>)
 80064c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80064d6:	f001 fdb5 	bl	8008044 <vPortExitCritical>
				return pdPASS;
 80064da:	2301      	movs	r3, #1
 80064dc:	e069      	b.n	80065b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d103      	bne.n	80064ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064e4:	f001 fdae 	bl	8008044 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064e8:	2300      	movs	r3, #0
 80064ea:	e062      	b.n	80065b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d106      	bne.n	8006500 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064f2:	f107 0310 	add.w	r3, r7, #16
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 feba 	bl	8007270 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064fc:	2301      	movs	r3, #1
 80064fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006500:	f001 fda0 	bl	8008044 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006504:	f000 fc26 	bl	8006d54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006508:	f001 fd6c 	bl	8007fe4 <vPortEnterCritical>
 800650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006512:	b25b      	sxtb	r3, r3
 8006514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006518:	d103      	bne.n	8006522 <xQueueReceive+0x122>
 800651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006524:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006528:	b25b      	sxtb	r3, r3
 800652a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652e:	d103      	bne.n	8006538 <xQueueReceive+0x138>
 8006530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006538:	f001 fd84 	bl	8008044 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800653c:	1d3a      	adds	r2, r7, #4
 800653e:	f107 0310 	add.w	r3, r7, #16
 8006542:	4611      	mov	r1, r2
 8006544:	4618      	mov	r0, r3
 8006546:	f000 fea9 	bl	800729c <xTaskCheckForTimeOut>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d123      	bne.n	8006598 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006552:	f000 f917 	bl	8006784 <prvIsQueueEmpty>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d017      	beq.n	800658c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800655c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655e:	3324      	adds	r3, #36	; 0x24
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	4611      	mov	r1, r2
 8006564:	4618      	mov	r0, r3
 8006566:	f000 fdcf 	bl	8007108 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800656a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800656c:	f000 f8b8 	bl	80066e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006570:	f000 fbfe 	bl	8006d70 <xTaskResumeAll>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d189      	bne.n	800648e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800657a:	4b10      	ldr	r3, [pc, #64]	; (80065bc <xQueueReceive+0x1bc>)
 800657c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	f3bf 8f4f 	dsb	sy
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	e780      	b.n	800648e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800658c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800658e:	f000 f8a7 	bl	80066e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006592:	f000 fbed 	bl	8006d70 <xTaskResumeAll>
 8006596:	e77a      	b.n	800648e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800659a:	f000 f8a1 	bl	80066e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800659e:	f000 fbe7 	bl	8006d70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065a4:	f000 f8ee 	bl	8006784 <prvIsQueueEmpty>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f43f af6f 	beq.w	800648e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3730      	adds	r7, #48	; 0x30
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	e000ed04 	.word	0xe000ed04

080065c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80065cc:	2300      	movs	r3, #0
 80065ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10d      	bne.n	80065fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d14d      	bne.n	8006682 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 ffbc 	bl	8007568 <xTaskPriorityDisinherit>
 80065f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	609a      	str	r2, [r3, #8]
 80065f8:	e043      	b.n	8006682 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d119      	bne.n	8006634 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6858      	ldr	r0, [r3, #4]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006608:	461a      	mov	r2, r3
 800660a:	68b9      	ldr	r1, [r7, #8]
 800660c:	f002 fe24 	bl	8009258 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006618:	441a      	add	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	429a      	cmp	r2, r3
 8006628:	d32b      	bcc.n	8006682 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	605a      	str	r2, [r3, #4]
 8006632:	e026      	b.n	8006682 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	68d8      	ldr	r0, [r3, #12]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663c:	461a      	mov	r2, r3
 800663e:	68b9      	ldr	r1, [r7, #8]
 8006640:	f002 fe0a 	bl	8009258 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664c:	425b      	negs	r3, r3
 800664e:	441a      	add	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	68da      	ldr	r2, [r3, #12]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	429a      	cmp	r2, r3
 800665e:	d207      	bcs.n	8006670 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006668:	425b      	negs	r3, r3
 800666a:	441a      	add	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b02      	cmp	r3, #2
 8006674:	d105      	bne.n	8006682 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d002      	beq.n	8006682 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	3b01      	subs	r3, #1
 8006680:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	1c5a      	adds	r2, r3, #1
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800668a:	697b      	ldr	r3, [r7, #20]
}
 800668c:	4618      	mov	r0, r3
 800668e:	3718      	adds	r7, #24
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d018      	beq.n	80066d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	441a      	add	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68da      	ldr	r2, [r3, #12]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d303      	bcc.n	80066c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	68d9      	ldr	r1, [r3, #12]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d0:	461a      	mov	r2, r3
 80066d2:	6838      	ldr	r0, [r7, #0]
 80066d4:	f002 fdc0 	bl	8009258 <memcpy>
	}
}
 80066d8:	bf00      	nop
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80066e8:	f001 fc7c 	bl	8007fe4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066f4:	e011      	b.n	800671a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d012      	beq.n	8006724 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3324      	adds	r3, #36	; 0x24
 8006702:	4618      	mov	r0, r3
 8006704:	f000 fd50 	bl	80071a8 <xTaskRemoveFromEventList>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d001      	beq.n	8006712 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800670e:	f000 fe27 	bl	8007360 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006712:	7bfb      	ldrb	r3, [r7, #15]
 8006714:	3b01      	subs	r3, #1
 8006716:	b2db      	uxtb	r3, r3
 8006718:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800671a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800671e:	2b00      	cmp	r3, #0
 8006720:	dce9      	bgt.n	80066f6 <prvUnlockQueue+0x16>
 8006722:	e000      	b.n	8006726 <prvUnlockQueue+0x46>
					break;
 8006724:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	22ff      	movs	r2, #255	; 0xff
 800672a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800672e:	f001 fc89 	bl	8008044 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006732:	f001 fc57 	bl	8007fe4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800673c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800673e:	e011      	b.n	8006764 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d012      	beq.n	800676e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	3310      	adds	r3, #16
 800674c:	4618      	mov	r0, r3
 800674e:	f000 fd2b 	bl	80071a8 <xTaskRemoveFromEventList>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006758:	f000 fe02 	bl	8007360 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800675c:	7bbb      	ldrb	r3, [r7, #14]
 800675e:	3b01      	subs	r3, #1
 8006760:	b2db      	uxtb	r3, r3
 8006762:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006764:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006768:	2b00      	cmp	r3, #0
 800676a:	dce9      	bgt.n	8006740 <prvUnlockQueue+0x60>
 800676c:	e000      	b.n	8006770 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800676e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	22ff      	movs	r2, #255	; 0xff
 8006774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006778:	f001 fc64 	bl	8008044 <vPortExitCritical>
}
 800677c:	bf00      	nop
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800678c:	f001 fc2a 	bl	8007fe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006794:	2b00      	cmp	r3, #0
 8006796:	d102      	bne.n	800679e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006798:	2301      	movs	r3, #1
 800679a:	60fb      	str	r3, [r7, #12]
 800679c:	e001      	b.n	80067a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800679e:	2300      	movs	r3, #0
 80067a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067a2:	f001 fc4f 	bl	8008044 <vPortExitCritical>

	return xReturn;
 80067a6:	68fb      	ldr	r3, [r7, #12]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067b8:	f001 fc14 	bl	8007fe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d102      	bne.n	80067ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80067c8:	2301      	movs	r3, #1
 80067ca:	60fb      	str	r3, [r7, #12]
 80067cc:	e001      	b.n	80067d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80067ce:	2300      	movs	r3, #0
 80067d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067d2:	f001 fc37 	bl	8008044 <vPortExitCritical>

	return xReturn;
 80067d6:	68fb      	ldr	r3, [r7, #12]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067ea:	2300      	movs	r3, #0
 80067ec:	60fb      	str	r3, [r7, #12]
 80067ee:	e014      	b.n	800681a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80067f0:	4a0f      	ldr	r2, [pc, #60]	; (8006830 <vQueueAddToRegistry+0x50>)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10b      	bne.n	8006814 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80067fc:	490c      	ldr	r1, [pc, #48]	; (8006830 <vQueueAddToRegistry+0x50>)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006806:	4a0a      	ldr	r2, [pc, #40]	; (8006830 <vQueueAddToRegistry+0x50>)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	00db      	lsls	r3, r3, #3
 800680c:	4413      	add	r3, r2
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006812:	e006      	b.n	8006822 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	3301      	adds	r3, #1
 8006818:	60fb      	str	r3, [r7, #12]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2b07      	cmp	r3, #7
 800681e:	d9e7      	bls.n	80067f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006820:	bf00      	nop
 8006822:	bf00      	nop
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	20000a94 	.word	0x20000a94

08006834 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006844:	f001 fbce 	bl	8007fe4 <vPortEnterCritical>
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800684e:	b25b      	sxtb	r3, r3
 8006850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006854:	d103      	bne.n	800685e <vQueueWaitForMessageRestricted+0x2a>
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006864:	b25b      	sxtb	r3, r3
 8006866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686a:	d103      	bne.n	8006874 <vQueueWaitForMessageRestricted+0x40>
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006874:	f001 fbe6 	bl	8008044 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687c:	2b00      	cmp	r3, #0
 800687e:	d106      	bne.n	800688e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	3324      	adds	r3, #36	; 0x24
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	68b9      	ldr	r1, [r7, #8]
 8006888:	4618      	mov	r0, r3
 800688a:	f000 fc61 	bl	8007150 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800688e:	6978      	ldr	r0, [r7, #20]
 8006890:	f7ff ff26 	bl	80066e0 <prvUnlockQueue>
	}
 8006894:	bf00      	nop
 8006896:	3718      	adds	r7, #24
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800689c:	b580      	push	{r7, lr}
 800689e:	b08e      	sub	sp, #56	; 0x38
 80068a0:	af04      	add	r7, sp, #16
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
 80068a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80068aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10a      	bne.n	80068c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80068b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	623b      	str	r3, [r7, #32]
}
 80068c2:	bf00      	nop
 80068c4:	e7fe      	b.n	80068c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80068c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10a      	bne.n	80068e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80068cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d0:	f383 8811 	msr	BASEPRI, r3
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	61fb      	str	r3, [r7, #28]
}
 80068de:	bf00      	nop
 80068e0:	e7fe      	b.n	80068e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80068e2:	23a8      	movs	r3, #168	; 0xa8
 80068e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	2ba8      	cmp	r3, #168	; 0xa8
 80068ea:	d00a      	beq.n	8006902 <xTaskCreateStatic+0x66>
	__asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	61bb      	str	r3, [r7, #24]
}
 80068fe:	bf00      	nop
 8006900:	e7fe      	b.n	8006900 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006902:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006906:	2b00      	cmp	r3, #0
 8006908:	d01e      	beq.n	8006948 <xTaskCreateStatic+0xac>
 800690a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01b      	beq.n	8006948 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006912:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006918:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691c:	2202      	movs	r2, #2
 800691e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006922:	2300      	movs	r3, #0
 8006924:	9303      	str	r3, [sp, #12]
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	9302      	str	r3, [sp, #8]
 800692a:	f107 0314 	add.w	r3, r7, #20
 800692e:	9301      	str	r3, [sp, #4]
 8006930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	68b9      	ldr	r1, [r7, #8]
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f000 f850 	bl	80069e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006940:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006942:	f000 f8f3 	bl	8006b2c <prvAddNewTaskToReadyList>
 8006946:	e001      	b.n	800694c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006948:	2300      	movs	r3, #0
 800694a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800694c:	697b      	ldr	r3, [r7, #20]
	}
 800694e:	4618      	mov	r0, r3
 8006950:	3728      	adds	r7, #40	; 0x28
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006956:	b580      	push	{r7, lr}
 8006958:	b08c      	sub	sp, #48	; 0x30
 800695a:	af04      	add	r7, sp, #16
 800695c:	60f8      	str	r0, [r7, #12]
 800695e:	60b9      	str	r1, [r7, #8]
 8006960:	603b      	str	r3, [r7, #0]
 8006962:	4613      	mov	r3, r2
 8006964:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006966:	88fb      	ldrh	r3, [r7, #6]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4618      	mov	r0, r3
 800696c:	f001 fc5c 	bl	8008228 <pvPortMalloc>
 8006970:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00e      	beq.n	8006996 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006978:	20a8      	movs	r0, #168	; 0xa8
 800697a:	f001 fc55 	bl	8008228 <pvPortMalloc>
 800697e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	631a      	str	r2, [r3, #48]	; 0x30
 800698c:	e005      	b.n	800699a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800698e:	6978      	ldr	r0, [r7, #20]
 8006990:	f001 fd16 	bl	80083c0 <vPortFree>
 8006994:	e001      	b.n	800699a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006996:	2300      	movs	r3, #0
 8006998:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d017      	beq.n	80069d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80069a8:	88fa      	ldrh	r2, [r7, #6]
 80069aa:	2300      	movs	r3, #0
 80069ac:	9303      	str	r3, [sp, #12]
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	9302      	str	r3, [sp, #8]
 80069b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b4:	9301      	str	r3, [sp, #4]
 80069b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	68b9      	ldr	r1, [r7, #8]
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f000 f80e 	bl	80069e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069c4:	69f8      	ldr	r0, [r7, #28]
 80069c6:	f000 f8b1 	bl	8006b2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80069ca:	2301      	movs	r3, #1
 80069cc:	61bb      	str	r3, [r7, #24]
 80069ce:	e002      	b.n	80069d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80069d0:	f04f 33ff 	mov.w	r3, #4294967295
 80069d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80069d6:	69bb      	ldr	r3, [r7, #24]
	}
 80069d8:	4618      	mov	r0, r3
 80069da:	3720      	adds	r7, #32
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b088      	sub	sp, #32
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
 80069ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	461a      	mov	r2, r3
 80069f8:	21a5      	movs	r1, #165	; 0xa5
 80069fa:	f002 fb58 	bl	80090ae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80069fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	f023 0307 	bic.w	r3, r3, #7
 8006a16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	f003 0307 	and.w	r3, r3, #7
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00a      	beq.n	8006a38 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	617b      	str	r3, [r7, #20]
}
 8006a34:	bf00      	nop
 8006a36:	e7fe      	b.n	8006a36 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d01f      	beq.n	8006a7e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a3e:	2300      	movs	r3, #0
 8006a40:	61fb      	str	r3, [r7, #28]
 8006a42:	e012      	b.n	8006a6a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	4413      	add	r3, r2
 8006a4a:	7819      	ldrb	r1, [r3, #0]
 8006a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	4413      	add	r3, r2
 8006a52:	3334      	adds	r3, #52	; 0x34
 8006a54:	460a      	mov	r2, r1
 8006a56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d006      	beq.n	8006a72 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	3301      	adds	r3, #1
 8006a68:	61fb      	str	r3, [r7, #28]
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	2b0f      	cmp	r3, #15
 8006a6e:	d9e9      	bls.n	8006a44 <prvInitialiseNewTask+0x64>
 8006a70:	e000      	b.n	8006a74 <prvInitialiseNewTask+0x94>
			{
				break;
 8006a72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a7c:	e003      	b.n	8006a86 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a88:	2b37      	cmp	r3, #55	; 0x37
 8006a8a:	d901      	bls.n	8006a90 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a8c:	2337      	movs	r3, #55	; 0x37
 8006a8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a9a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7ff f978 	bl	8005d9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	3318      	adds	r3, #24
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7ff f973 	bl	8005d9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	3354      	adds	r3, #84	; 0x54
 8006ae0:	224c      	movs	r2, #76	; 0x4c
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f002 fae2 	bl	80090ae <memset>
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	4a0c      	ldr	r2, [pc, #48]	; (8006b20 <prvInitialiseNewTask+0x140>)
 8006aee:	659a      	str	r2, [r3, #88]	; 0x58
 8006af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af2:	4a0c      	ldr	r2, [pc, #48]	; (8006b24 <prvInitialiseNewTask+0x144>)
 8006af4:	65da      	str	r2, [r3, #92]	; 0x5c
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	4a0b      	ldr	r2, [pc, #44]	; (8006b28 <prvInitialiseNewTask+0x148>)
 8006afa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	68f9      	ldr	r1, [r7, #12]
 8006b00:	69b8      	ldr	r0, [r7, #24]
 8006b02:	f001 f941 	bl	8007d88 <pxPortInitialiseStack>
 8006b06:	4602      	mov	r2, r0
 8006b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d002      	beq.n	8006b18 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b16:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b18:	bf00      	nop
 8006b1a:	3720      	adds	r7, #32
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	20001ce0 	.word	0x20001ce0
 8006b24:	20001d48 	.word	0x20001d48
 8006b28:	20001db0 	.word	0x20001db0

08006b2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b34:	f001 fa56 	bl	8007fe4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b38:	4b2d      	ldr	r3, [pc, #180]	; (8006bf0 <prvAddNewTaskToReadyList+0xc4>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	4a2c      	ldr	r2, [pc, #176]	; (8006bf0 <prvAddNewTaskToReadyList+0xc4>)
 8006b40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b42:	4b2c      	ldr	r3, [pc, #176]	; (8006bf4 <prvAddNewTaskToReadyList+0xc8>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d109      	bne.n	8006b5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b4a:	4a2a      	ldr	r2, [pc, #168]	; (8006bf4 <prvAddNewTaskToReadyList+0xc8>)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b50:	4b27      	ldr	r3, [pc, #156]	; (8006bf0 <prvAddNewTaskToReadyList+0xc4>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d110      	bne.n	8006b7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b58:	f000 fc26 	bl	80073a8 <prvInitialiseTaskLists>
 8006b5c:	e00d      	b.n	8006b7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b5e:	4b26      	ldr	r3, [pc, #152]	; (8006bf8 <prvAddNewTaskToReadyList+0xcc>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d109      	bne.n	8006b7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b66:	4b23      	ldr	r3, [pc, #140]	; (8006bf4 <prvAddNewTaskToReadyList+0xc8>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d802      	bhi.n	8006b7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b74:	4a1f      	ldr	r2, [pc, #124]	; (8006bf4 <prvAddNewTaskToReadyList+0xc8>)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b7a:	4b20      	ldr	r3, [pc, #128]	; (8006bfc <prvAddNewTaskToReadyList+0xd0>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	4a1e      	ldr	r2, [pc, #120]	; (8006bfc <prvAddNewTaskToReadyList+0xd0>)
 8006b82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006b84:	4b1d      	ldr	r3, [pc, #116]	; (8006bfc <prvAddNewTaskToReadyList+0xd0>)
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b90:	4b1b      	ldr	r3, [pc, #108]	; (8006c00 <prvAddNewTaskToReadyList+0xd4>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d903      	bls.n	8006ba0 <prvAddNewTaskToReadyList+0x74>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9c:	4a18      	ldr	r2, [pc, #96]	; (8006c00 <prvAddNewTaskToReadyList+0xd4>)
 8006b9e:	6013      	str	r3, [r2, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4a15      	ldr	r2, [pc, #84]	; (8006c04 <prvAddNewTaskToReadyList+0xd8>)
 8006bae:	441a      	add	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	4610      	mov	r0, r2
 8006bb8:	f7ff f8fd 	bl	8005db6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006bbc:	f001 fa42 	bl	8008044 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006bc0:	4b0d      	ldr	r3, [pc, #52]	; (8006bf8 <prvAddNewTaskToReadyList+0xcc>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00e      	beq.n	8006be6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006bc8:	4b0a      	ldr	r3, [pc, #40]	; (8006bf4 <prvAddNewTaskToReadyList+0xc8>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d207      	bcs.n	8006be6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006bd6:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <prvAddNewTaskToReadyList+0xdc>)
 8006bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006be6:	bf00      	nop
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20000fa8 	.word	0x20000fa8
 8006bf4:	20000ad4 	.word	0x20000ad4
 8006bf8:	20000fb4 	.word	0x20000fb4
 8006bfc:	20000fc4 	.word	0x20000fc4
 8006c00:	20000fb0 	.word	0x20000fb0
 8006c04:	20000ad8 	.word	0x20000ad8
 8006c08:	e000ed04 	.word	0xe000ed04

08006c0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c14:	2300      	movs	r3, #0
 8006c16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d017      	beq.n	8006c4e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c1e:	4b13      	ldr	r3, [pc, #76]	; (8006c6c <vTaskDelay+0x60>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00a      	beq.n	8006c3c <vTaskDelay+0x30>
	__asm volatile
 8006c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	60bb      	str	r3, [r7, #8]
}
 8006c38:	bf00      	nop
 8006c3a:	e7fe      	b.n	8006c3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006c3c:	f000 f88a 	bl	8006d54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c40:	2100      	movs	r1, #0
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fcfe 	bl	8007644 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c48:	f000 f892 	bl	8006d70 <xTaskResumeAll>
 8006c4c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d107      	bne.n	8006c64 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006c54:	4b06      	ldr	r3, [pc, #24]	; (8006c70 <vTaskDelay+0x64>)
 8006c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c5a:	601a      	str	r2, [r3, #0]
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c64:	bf00      	nop
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	20000fd0 	.word	0x20000fd0
 8006c70:	e000ed04 	.word	0xe000ed04

08006c74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b08a      	sub	sp, #40	; 0x28
 8006c78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c82:	463a      	mov	r2, r7
 8006c84:	1d39      	adds	r1, r7, #4
 8006c86:	f107 0308 	add.w	r3, r7, #8
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7ff f832 	bl	8005cf4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	9202      	str	r2, [sp, #8]
 8006c98:	9301      	str	r3, [sp, #4]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	460a      	mov	r2, r1
 8006ca2:	4924      	ldr	r1, [pc, #144]	; (8006d34 <vTaskStartScheduler+0xc0>)
 8006ca4:	4824      	ldr	r0, [pc, #144]	; (8006d38 <vTaskStartScheduler+0xc4>)
 8006ca6:	f7ff fdf9 	bl	800689c <xTaskCreateStatic>
 8006caa:	4603      	mov	r3, r0
 8006cac:	4a23      	ldr	r2, [pc, #140]	; (8006d3c <vTaskStartScheduler+0xc8>)
 8006cae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006cb0:	4b22      	ldr	r3, [pc, #136]	; (8006d3c <vTaskStartScheduler+0xc8>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d002      	beq.n	8006cbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	617b      	str	r3, [r7, #20]
 8006cbc:	e001      	b.n	8006cc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d102      	bne.n	8006cce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006cc8:	f000 fd10 	bl	80076ec <xTimerCreateTimerTask>
 8006ccc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d11b      	bne.n	8006d0c <vTaskStartScheduler+0x98>
	__asm volatile
 8006cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd8:	f383 8811 	msr	BASEPRI, r3
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	613b      	str	r3, [r7, #16]
}
 8006ce6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ce8:	4b15      	ldr	r3, [pc, #84]	; (8006d40 <vTaskStartScheduler+0xcc>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3354      	adds	r3, #84	; 0x54
 8006cee:	4a15      	ldr	r2, [pc, #84]	; (8006d44 <vTaskStartScheduler+0xd0>)
 8006cf0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006cf2:	4b15      	ldr	r3, [pc, #84]	; (8006d48 <vTaskStartScheduler+0xd4>)
 8006cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006cfa:	4b14      	ldr	r3, [pc, #80]	; (8006d4c <vTaskStartScheduler+0xd8>)
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d00:	4b13      	ldr	r3, [pc, #76]	; (8006d50 <vTaskStartScheduler+0xdc>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d06:	f001 f8cb 	bl	8007ea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d0a:	e00e      	b.n	8006d2a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d12:	d10a      	bne.n	8006d2a <vTaskStartScheduler+0xb6>
	__asm volatile
 8006d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d18:	f383 8811 	msr	BASEPRI, r3
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	60fb      	str	r3, [r7, #12]
}
 8006d26:	bf00      	nop
 8006d28:	e7fe      	b.n	8006d28 <vTaskStartScheduler+0xb4>
}
 8006d2a:	bf00      	nop
 8006d2c:	3718      	adds	r7, #24
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	0800b030 	.word	0x0800b030
 8006d38:	08007379 	.word	0x08007379
 8006d3c:	20000fcc 	.word	0x20000fcc
 8006d40:	20000ad4 	.word	0x20000ad4
 8006d44:	20000068 	.word	0x20000068
 8006d48:	20000fc8 	.word	0x20000fc8
 8006d4c:	20000fb4 	.word	0x20000fb4
 8006d50:	20000fac 	.word	0x20000fac

08006d54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d54:	b480      	push	{r7}
 8006d56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006d58:	4b04      	ldr	r3, [pc, #16]	; (8006d6c <vTaskSuspendAll+0x18>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	4a03      	ldr	r2, [pc, #12]	; (8006d6c <vTaskSuspendAll+0x18>)
 8006d60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006d62:	bf00      	nop
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	20000fd0 	.word	0x20000fd0

08006d70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d76:	2300      	movs	r3, #0
 8006d78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d7e:	4b42      	ldr	r3, [pc, #264]	; (8006e88 <xTaskResumeAll+0x118>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10a      	bne.n	8006d9c <xTaskResumeAll+0x2c>
	__asm volatile
 8006d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	603b      	str	r3, [r7, #0]
}
 8006d98:	bf00      	nop
 8006d9a:	e7fe      	b.n	8006d9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d9c:	f001 f922 	bl	8007fe4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006da0:	4b39      	ldr	r3, [pc, #228]	; (8006e88 <xTaskResumeAll+0x118>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3b01      	subs	r3, #1
 8006da6:	4a38      	ldr	r2, [pc, #224]	; (8006e88 <xTaskResumeAll+0x118>)
 8006da8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006daa:	4b37      	ldr	r3, [pc, #220]	; (8006e88 <xTaskResumeAll+0x118>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d162      	bne.n	8006e78 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006db2:	4b36      	ldr	r3, [pc, #216]	; (8006e8c <xTaskResumeAll+0x11c>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d05e      	beq.n	8006e78 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006dba:	e02f      	b.n	8006e1c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dbc:	4b34      	ldr	r3, [pc, #208]	; (8006e90 <xTaskResumeAll+0x120>)
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	3318      	adds	r3, #24
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7ff f851 	bl	8005e70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	3304      	adds	r3, #4
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7ff f84c 	bl	8005e70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ddc:	4b2d      	ldr	r3, [pc, #180]	; (8006e94 <xTaskResumeAll+0x124>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d903      	bls.n	8006dec <xTaskResumeAll+0x7c>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de8:	4a2a      	ldr	r2, [pc, #168]	; (8006e94 <xTaskResumeAll+0x124>)
 8006dea:	6013      	str	r3, [r2, #0]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df0:	4613      	mov	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4a27      	ldr	r2, [pc, #156]	; (8006e98 <xTaskResumeAll+0x128>)
 8006dfa:	441a      	add	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	3304      	adds	r3, #4
 8006e00:	4619      	mov	r1, r3
 8006e02:	4610      	mov	r0, r2
 8006e04:	f7fe ffd7 	bl	8005db6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e0c:	4b23      	ldr	r3, [pc, #140]	; (8006e9c <xTaskResumeAll+0x12c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d302      	bcc.n	8006e1c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006e16:	4b22      	ldr	r3, [pc, #136]	; (8006ea0 <xTaskResumeAll+0x130>)
 8006e18:	2201      	movs	r2, #1
 8006e1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e1c:	4b1c      	ldr	r3, [pc, #112]	; (8006e90 <xTaskResumeAll+0x120>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1cb      	bne.n	8006dbc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e2a:	f000 fb5f 	bl	80074ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006e2e:	4b1d      	ldr	r3, [pc, #116]	; (8006ea4 <xTaskResumeAll+0x134>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d010      	beq.n	8006e5c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e3a:	f000 f847 	bl	8006ecc <xTaskIncrementTick>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d002      	beq.n	8006e4a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006e44:	4b16      	ldr	r3, [pc, #88]	; (8006ea0 <xTaskResumeAll+0x130>)
 8006e46:	2201      	movs	r2, #1
 8006e48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1f1      	bne.n	8006e3a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006e56:	4b13      	ldr	r3, [pc, #76]	; (8006ea4 <xTaskResumeAll+0x134>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e5c:	4b10      	ldr	r3, [pc, #64]	; (8006ea0 <xTaskResumeAll+0x130>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d009      	beq.n	8006e78 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e64:	2301      	movs	r3, #1
 8006e66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e68:	4b0f      	ldr	r3, [pc, #60]	; (8006ea8 <xTaskResumeAll+0x138>)
 8006e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e78:	f001 f8e4 	bl	8008044 <vPortExitCritical>

	return xAlreadyYielded;
 8006e7c:	68bb      	ldr	r3, [r7, #8]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	20000fd0 	.word	0x20000fd0
 8006e8c:	20000fa8 	.word	0x20000fa8
 8006e90:	20000f68 	.word	0x20000f68
 8006e94:	20000fb0 	.word	0x20000fb0
 8006e98:	20000ad8 	.word	0x20000ad8
 8006e9c:	20000ad4 	.word	0x20000ad4
 8006ea0:	20000fbc 	.word	0x20000fbc
 8006ea4:	20000fb8 	.word	0x20000fb8
 8006ea8:	e000ed04 	.word	0xe000ed04

08006eac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006eb2:	4b05      	ldr	r3, [pc, #20]	; (8006ec8 <xTaskGetTickCount+0x1c>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006eb8:	687b      	ldr	r3, [r7, #4]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	20000fac 	.word	0x20000fac

08006ecc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ed6:	4b4f      	ldr	r3, [pc, #316]	; (8007014 <xTaskIncrementTick+0x148>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f040 808f 	bne.w	8006ffe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ee0:	4b4d      	ldr	r3, [pc, #308]	; (8007018 <xTaskIncrementTick+0x14c>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ee8:	4a4b      	ldr	r2, [pc, #300]	; (8007018 <xTaskIncrementTick+0x14c>)
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d120      	bne.n	8006f36 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ef4:	4b49      	ldr	r3, [pc, #292]	; (800701c <xTaskIncrementTick+0x150>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00a      	beq.n	8006f14 <xTaskIncrementTick+0x48>
	__asm volatile
 8006efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f02:	f383 8811 	msr	BASEPRI, r3
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	603b      	str	r3, [r7, #0]
}
 8006f10:	bf00      	nop
 8006f12:	e7fe      	b.n	8006f12 <xTaskIncrementTick+0x46>
 8006f14:	4b41      	ldr	r3, [pc, #260]	; (800701c <xTaskIncrementTick+0x150>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	60fb      	str	r3, [r7, #12]
 8006f1a:	4b41      	ldr	r3, [pc, #260]	; (8007020 <xTaskIncrementTick+0x154>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a3f      	ldr	r2, [pc, #252]	; (800701c <xTaskIncrementTick+0x150>)
 8006f20:	6013      	str	r3, [r2, #0]
 8006f22:	4a3f      	ldr	r2, [pc, #252]	; (8007020 <xTaskIncrementTick+0x154>)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6013      	str	r3, [r2, #0]
 8006f28:	4b3e      	ldr	r3, [pc, #248]	; (8007024 <xTaskIncrementTick+0x158>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	4a3d      	ldr	r2, [pc, #244]	; (8007024 <xTaskIncrementTick+0x158>)
 8006f30:	6013      	str	r3, [r2, #0]
 8006f32:	f000 fadb 	bl	80074ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f36:	4b3c      	ldr	r3, [pc, #240]	; (8007028 <xTaskIncrementTick+0x15c>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d349      	bcc.n	8006fd4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f40:	4b36      	ldr	r3, [pc, #216]	; (800701c <xTaskIncrementTick+0x150>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d104      	bne.n	8006f54 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f4a:	4b37      	ldr	r3, [pc, #220]	; (8007028 <xTaskIncrementTick+0x15c>)
 8006f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f50:	601a      	str	r2, [r3, #0]
					break;
 8006f52:	e03f      	b.n	8006fd4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f54:	4b31      	ldr	r3, [pc, #196]	; (800701c <xTaskIncrementTick+0x150>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d203      	bcs.n	8006f74 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f6c:	4a2e      	ldr	r2, [pc, #184]	; (8007028 <xTaskIncrementTick+0x15c>)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f72:	e02f      	b.n	8006fd4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	3304      	adds	r3, #4
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7fe ff79 	bl	8005e70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d004      	beq.n	8006f90 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	3318      	adds	r3, #24
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fe ff70 	bl	8005e70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f94:	4b25      	ldr	r3, [pc, #148]	; (800702c <xTaskIncrementTick+0x160>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d903      	bls.n	8006fa4 <xTaskIncrementTick+0xd8>
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa0:	4a22      	ldr	r2, [pc, #136]	; (800702c <xTaskIncrementTick+0x160>)
 8006fa2:	6013      	str	r3, [r2, #0]
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa8:	4613      	mov	r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4a1f      	ldr	r2, [pc, #124]	; (8007030 <xTaskIncrementTick+0x164>)
 8006fb2:	441a      	add	r2, r3
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	4619      	mov	r1, r3
 8006fba:	4610      	mov	r0, r2
 8006fbc:	f7fe fefb 	bl	8005db6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc4:	4b1b      	ldr	r3, [pc, #108]	; (8007034 <xTaskIncrementTick+0x168>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d3b8      	bcc.n	8006f40 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fd2:	e7b5      	b.n	8006f40 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006fd4:	4b17      	ldr	r3, [pc, #92]	; (8007034 <xTaskIncrementTick+0x168>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fda:	4915      	ldr	r1, [pc, #84]	; (8007030 <xTaskIncrementTick+0x164>)
 8006fdc:	4613      	mov	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	440b      	add	r3, r1
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d901      	bls.n	8006ff0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006fec:	2301      	movs	r3, #1
 8006fee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006ff0:	4b11      	ldr	r3, [pc, #68]	; (8007038 <xTaskIncrementTick+0x16c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d007      	beq.n	8007008 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	617b      	str	r3, [r7, #20]
 8006ffc:	e004      	b.n	8007008 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006ffe:	4b0f      	ldr	r3, [pc, #60]	; (800703c <xTaskIncrementTick+0x170>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3301      	adds	r3, #1
 8007004:	4a0d      	ldr	r2, [pc, #52]	; (800703c <xTaskIncrementTick+0x170>)
 8007006:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007008:	697b      	ldr	r3, [r7, #20]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20000fd0 	.word	0x20000fd0
 8007018:	20000fac 	.word	0x20000fac
 800701c:	20000f60 	.word	0x20000f60
 8007020:	20000f64 	.word	0x20000f64
 8007024:	20000fc0 	.word	0x20000fc0
 8007028:	20000fc8 	.word	0x20000fc8
 800702c:	20000fb0 	.word	0x20000fb0
 8007030:	20000ad8 	.word	0x20000ad8
 8007034:	20000ad4 	.word	0x20000ad4
 8007038:	20000fbc 	.word	0x20000fbc
 800703c:	20000fb8 	.word	0x20000fb8

08007040 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007046:	4b2a      	ldr	r3, [pc, #168]	; (80070f0 <vTaskSwitchContext+0xb0>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d003      	beq.n	8007056 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800704e:	4b29      	ldr	r3, [pc, #164]	; (80070f4 <vTaskSwitchContext+0xb4>)
 8007050:	2201      	movs	r2, #1
 8007052:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007054:	e046      	b.n	80070e4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007056:	4b27      	ldr	r3, [pc, #156]	; (80070f4 <vTaskSwitchContext+0xb4>)
 8007058:	2200      	movs	r2, #0
 800705a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800705c:	4b26      	ldr	r3, [pc, #152]	; (80070f8 <vTaskSwitchContext+0xb8>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	60fb      	str	r3, [r7, #12]
 8007062:	e010      	b.n	8007086 <vTaskSwitchContext+0x46>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10a      	bne.n	8007080 <vTaskSwitchContext+0x40>
	__asm volatile
 800706a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706e:	f383 8811 	msr	BASEPRI, r3
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	607b      	str	r3, [r7, #4]
}
 800707c:	bf00      	nop
 800707e:	e7fe      	b.n	800707e <vTaskSwitchContext+0x3e>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	3b01      	subs	r3, #1
 8007084:	60fb      	str	r3, [r7, #12]
 8007086:	491d      	ldr	r1, [pc, #116]	; (80070fc <vTaskSwitchContext+0xbc>)
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	4613      	mov	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	440b      	add	r3, r1
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d0e4      	beq.n	8007064 <vTaskSwitchContext+0x24>
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	4613      	mov	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	4a15      	ldr	r2, [pc, #84]	; (80070fc <vTaskSwitchContext+0xbc>)
 80070a6:	4413      	add	r3, r2
 80070a8:	60bb      	str	r3, [r7, #8]
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	605a      	str	r2, [r3, #4]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	3308      	adds	r3, #8
 80070bc:	429a      	cmp	r2, r3
 80070be:	d104      	bne.n	80070ca <vTaskSwitchContext+0x8a>
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	605a      	str	r2, [r3, #4]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	4a0b      	ldr	r2, [pc, #44]	; (8007100 <vTaskSwitchContext+0xc0>)
 80070d2:	6013      	str	r3, [r2, #0]
 80070d4:	4a08      	ldr	r2, [pc, #32]	; (80070f8 <vTaskSwitchContext+0xb8>)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80070da:	4b09      	ldr	r3, [pc, #36]	; (8007100 <vTaskSwitchContext+0xc0>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	3354      	adds	r3, #84	; 0x54
 80070e0:	4a08      	ldr	r2, [pc, #32]	; (8007104 <vTaskSwitchContext+0xc4>)
 80070e2:	6013      	str	r3, [r2, #0]
}
 80070e4:	bf00      	nop
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	20000fd0 	.word	0x20000fd0
 80070f4:	20000fbc 	.word	0x20000fbc
 80070f8:	20000fb0 	.word	0x20000fb0
 80070fc:	20000ad8 	.word	0x20000ad8
 8007100:	20000ad4 	.word	0x20000ad4
 8007104:	20000068 	.word	0x20000068

08007108 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10a      	bne.n	800712e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	60fb      	str	r3, [r7, #12]
}
 800712a:	bf00      	nop
 800712c:	e7fe      	b.n	800712c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800712e:	4b07      	ldr	r3, [pc, #28]	; (800714c <vTaskPlaceOnEventList+0x44>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3318      	adds	r3, #24
 8007134:	4619      	mov	r1, r3
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7fe fe61 	bl	8005dfe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800713c:	2101      	movs	r1, #1
 800713e:	6838      	ldr	r0, [r7, #0]
 8007140:	f000 fa80 	bl	8007644 <prvAddCurrentTaskToDelayedList>
}
 8007144:	bf00      	nop
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	20000ad4 	.word	0x20000ad4

08007150 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10a      	bne.n	8007178 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	617b      	str	r3, [r7, #20]
}
 8007174:	bf00      	nop
 8007176:	e7fe      	b.n	8007176 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007178:	4b0a      	ldr	r3, [pc, #40]	; (80071a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3318      	adds	r3, #24
 800717e:	4619      	mov	r1, r3
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f7fe fe18 	bl	8005db6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d002      	beq.n	8007192 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800718c:	f04f 33ff 	mov.w	r3, #4294967295
 8007190:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007192:	6879      	ldr	r1, [r7, #4]
 8007194:	68b8      	ldr	r0, [r7, #8]
 8007196:	f000 fa55 	bl	8007644 <prvAddCurrentTaskToDelayedList>
	}
 800719a:	bf00      	nop
 800719c:	3718      	adds	r7, #24
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	20000ad4 	.word	0x20000ad4

080071a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10a      	bne.n	80071d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80071be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	60fb      	str	r3, [r7, #12]
}
 80071d0:	bf00      	nop
 80071d2:	e7fe      	b.n	80071d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	3318      	adds	r3, #24
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fe fe49 	bl	8005e70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071de:	4b1e      	ldr	r3, [pc, #120]	; (8007258 <xTaskRemoveFromEventList+0xb0>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d11d      	bne.n	8007222 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	3304      	adds	r3, #4
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fe fe40 	bl	8005e70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f4:	4b19      	ldr	r3, [pc, #100]	; (800725c <xTaskRemoveFromEventList+0xb4>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d903      	bls.n	8007204 <xTaskRemoveFromEventList+0x5c>
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007200:	4a16      	ldr	r2, [pc, #88]	; (800725c <xTaskRemoveFromEventList+0xb4>)
 8007202:	6013      	str	r3, [r2, #0]
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007208:	4613      	mov	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4413      	add	r3, r2
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4a13      	ldr	r2, [pc, #76]	; (8007260 <xTaskRemoveFromEventList+0xb8>)
 8007212:	441a      	add	r2, r3
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	3304      	adds	r3, #4
 8007218:	4619      	mov	r1, r3
 800721a:	4610      	mov	r0, r2
 800721c:	f7fe fdcb 	bl	8005db6 <vListInsertEnd>
 8007220:	e005      	b.n	800722e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	3318      	adds	r3, #24
 8007226:	4619      	mov	r1, r3
 8007228:	480e      	ldr	r0, [pc, #56]	; (8007264 <xTaskRemoveFromEventList+0xbc>)
 800722a:	f7fe fdc4 	bl	8005db6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007232:	4b0d      	ldr	r3, [pc, #52]	; (8007268 <xTaskRemoveFromEventList+0xc0>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007238:	429a      	cmp	r2, r3
 800723a:	d905      	bls.n	8007248 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800723c:	2301      	movs	r3, #1
 800723e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007240:	4b0a      	ldr	r3, [pc, #40]	; (800726c <xTaskRemoveFromEventList+0xc4>)
 8007242:	2201      	movs	r2, #1
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	e001      	b.n	800724c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007248:	2300      	movs	r3, #0
 800724a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800724c:	697b      	ldr	r3, [r7, #20]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3718      	adds	r7, #24
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	20000fd0 	.word	0x20000fd0
 800725c:	20000fb0 	.word	0x20000fb0
 8007260:	20000ad8 	.word	0x20000ad8
 8007264:	20000f68 	.word	0x20000f68
 8007268:	20000ad4 	.word	0x20000ad4
 800726c:	20000fbc 	.word	0x20000fbc

08007270 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007278:	4b06      	ldr	r3, [pc, #24]	; (8007294 <vTaskInternalSetTimeOutState+0x24>)
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007280:	4b05      	ldr	r3, [pc, #20]	; (8007298 <vTaskInternalSetTimeOutState+0x28>)
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	605a      	str	r2, [r3, #4]
}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	20000fc0 	.word	0x20000fc0
 8007298:	20000fac 	.word	0x20000fac

0800729c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b088      	sub	sp, #32
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10a      	bne.n	80072c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80072ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b0:	f383 8811 	msr	BASEPRI, r3
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	613b      	str	r3, [r7, #16]
}
 80072be:	bf00      	nop
 80072c0:	e7fe      	b.n	80072c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10a      	bne.n	80072de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80072c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072cc:	f383 8811 	msr	BASEPRI, r3
 80072d0:	f3bf 8f6f 	isb	sy
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	60fb      	str	r3, [r7, #12]
}
 80072da:	bf00      	nop
 80072dc:	e7fe      	b.n	80072dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80072de:	f000 fe81 	bl	8007fe4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80072e2:	4b1d      	ldr	r3, [pc, #116]	; (8007358 <xTaskCheckForTimeOut+0xbc>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	69ba      	ldr	r2, [r7, #24]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fa:	d102      	bne.n	8007302 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80072fc:	2300      	movs	r3, #0
 80072fe:	61fb      	str	r3, [r7, #28]
 8007300:	e023      	b.n	800734a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	4b15      	ldr	r3, [pc, #84]	; (800735c <xTaskCheckForTimeOut+0xc0>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	429a      	cmp	r2, r3
 800730c:	d007      	beq.n	800731e <xTaskCheckForTimeOut+0x82>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	69ba      	ldr	r2, [r7, #24]
 8007314:	429a      	cmp	r2, r3
 8007316:	d302      	bcc.n	800731e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007318:	2301      	movs	r3, #1
 800731a:	61fb      	str	r3, [r7, #28]
 800731c:	e015      	b.n	800734a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	429a      	cmp	r2, r3
 8007326:	d20b      	bcs.n	8007340 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	1ad2      	subs	r2, r2, r3
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7ff ff9b 	bl	8007270 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800733a:	2300      	movs	r3, #0
 800733c:	61fb      	str	r3, [r7, #28]
 800733e:	e004      	b.n	800734a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	2200      	movs	r2, #0
 8007344:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007346:	2301      	movs	r3, #1
 8007348:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800734a:	f000 fe7b 	bl	8008044 <vPortExitCritical>

	return xReturn;
 800734e:	69fb      	ldr	r3, [r7, #28]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3720      	adds	r7, #32
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	20000fac 	.word	0x20000fac
 800735c:	20000fc0 	.word	0x20000fc0

08007360 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007360:	b480      	push	{r7}
 8007362:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007364:	4b03      	ldr	r3, [pc, #12]	; (8007374 <vTaskMissedYield+0x14>)
 8007366:	2201      	movs	r2, #1
 8007368:	601a      	str	r2, [r3, #0]
}
 800736a:	bf00      	nop
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	20000fbc 	.word	0x20000fbc

08007378 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007380:	f000 f852 	bl	8007428 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007384:	4b06      	ldr	r3, [pc, #24]	; (80073a0 <prvIdleTask+0x28>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d9f9      	bls.n	8007380 <prvIdleTask+0x8>
			{
				taskYIELD();
 800738c:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <prvIdleTask+0x2c>)
 800738e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007392:	601a      	str	r2, [r3, #0]
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800739c:	e7f0      	b.n	8007380 <prvIdleTask+0x8>
 800739e:	bf00      	nop
 80073a0:	20000ad8 	.word	0x20000ad8
 80073a4:	e000ed04 	.word	0xe000ed04

080073a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073ae:	2300      	movs	r3, #0
 80073b0:	607b      	str	r3, [r7, #4]
 80073b2:	e00c      	b.n	80073ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	4613      	mov	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4a12      	ldr	r2, [pc, #72]	; (8007408 <prvInitialiseTaskLists+0x60>)
 80073c0:	4413      	add	r3, r2
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fe fcca 	bl	8005d5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3301      	adds	r3, #1
 80073cc:	607b      	str	r3, [r7, #4]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2b37      	cmp	r3, #55	; 0x37
 80073d2:	d9ef      	bls.n	80073b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80073d4:	480d      	ldr	r0, [pc, #52]	; (800740c <prvInitialiseTaskLists+0x64>)
 80073d6:	f7fe fcc1 	bl	8005d5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80073da:	480d      	ldr	r0, [pc, #52]	; (8007410 <prvInitialiseTaskLists+0x68>)
 80073dc:	f7fe fcbe 	bl	8005d5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80073e0:	480c      	ldr	r0, [pc, #48]	; (8007414 <prvInitialiseTaskLists+0x6c>)
 80073e2:	f7fe fcbb 	bl	8005d5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80073e6:	480c      	ldr	r0, [pc, #48]	; (8007418 <prvInitialiseTaskLists+0x70>)
 80073e8:	f7fe fcb8 	bl	8005d5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80073ec:	480b      	ldr	r0, [pc, #44]	; (800741c <prvInitialiseTaskLists+0x74>)
 80073ee:	f7fe fcb5 	bl	8005d5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80073f2:	4b0b      	ldr	r3, [pc, #44]	; (8007420 <prvInitialiseTaskLists+0x78>)
 80073f4:	4a05      	ldr	r2, [pc, #20]	; (800740c <prvInitialiseTaskLists+0x64>)
 80073f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80073f8:	4b0a      	ldr	r3, [pc, #40]	; (8007424 <prvInitialiseTaskLists+0x7c>)
 80073fa:	4a05      	ldr	r2, [pc, #20]	; (8007410 <prvInitialiseTaskLists+0x68>)
 80073fc:	601a      	str	r2, [r3, #0]
}
 80073fe:	bf00      	nop
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	20000ad8 	.word	0x20000ad8
 800740c:	20000f38 	.word	0x20000f38
 8007410:	20000f4c 	.word	0x20000f4c
 8007414:	20000f68 	.word	0x20000f68
 8007418:	20000f7c 	.word	0x20000f7c
 800741c:	20000f94 	.word	0x20000f94
 8007420:	20000f60 	.word	0x20000f60
 8007424:	20000f64 	.word	0x20000f64

08007428 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800742e:	e019      	b.n	8007464 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007430:	f000 fdd8 	bl	8007fe4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007434:	4b10      	ldr	r3, [pc, #64]	; (8007478 <prvCheckTasksWaitingTermination+0x50>)
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	3304      	adds	r3, #4
 8007440:	4618      	mov	r0, r3
 8007442:	f7fe fd15 	bl	8005e70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007446:	4b0d      	ldr	r3, [pc, #52]	; (800747c <prvCheckTasksWaitingTermination+0x54>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	3b01      	subs	r3, #1
 800744c:	4a0b      	ldr	r2, [pc, #44]	; (800747c <prvCheckTasksWaitingTermination+0x54>)
 800744e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007450:	4b0b      	ldr	r3, [pc, #44]	; (8007480 <prvCheckTasksWaitingTermination+0x58>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	3b01      	subs	r3, #1
 8007456:	4a0a      	ldr	r2, [pc, #40]	; (8007480 <prvCheckTasksWaitingTermination+0x58>)
 8007458:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800745a:	f000 fdf3 	bl	8008044 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f810 	bl	8007484 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007464:	4b06      	ldr	r3, [pc, #24]	; (8007480 <prvCheckTasksWaitingTermination+0x58>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1e1      	bne.n	8007430 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800746c:	bf00      	nop
 800746e:	bf00      	nop
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	20000f7c 	.word	0x20000f7c
 800747c:	20000fa8 	.word	0x20000fa8
 8007480:	20000f90 	.word	0x20000f90

08007484 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	3354      	adds	r3, #84	; 0x54
 8007490:	4618      	mov	r0, r3
 8007492:	f001 fe29 	bl	80090e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800749c:	2b00      	cmp	r3, #0
 800749e:	d108      	bne.n	80074b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 ff8b 	bl	80083c0 <vPortFree>
				vPortFree( pxTCB );
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 ff88 	bl	80083c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80074b0:	e018      	b.n	80074e4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d103      	bne.n	80074c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 ff7f 	bl	80083c0 <vPortFree>
	}
 80074c2:	e00f      	b.n	80074e4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d00a      	beq.n	80074e4 <prvDeleteTCB+0x60>
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	60fb      	str	r3, [r7, #12]
}
 80074e0:	bf00      	nop
 80074e2:	e7fe      	b.n	80074e2 <prvDeleteTCB+0x5e>
	}
 80074e4:	bf00      	nop
 80074e6:	3710      	adds	r7, #16
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074f2:	4b0c      	ldr	r3, [pc, #48]	; (8007524 <prvResetNextTaskUnblockTime+0x38>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d104      	bne.n	8007506 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80074fc:	4b0a      	ldr	r3, [pc, #40]	; (8007528 <prvResetNextTaskUnblockTime+0x3c>)
 80074fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007502:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007504:	e008      	b.n	8007518 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007506:	4b07      	ldr	r3, [pc, #28]	; (8007524 <prvResetNextTaskUnblockTime+0x38>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	4a04      	ldr	r2, [pc, #16]	; (8007528 <prvResetNextTaskUnblockTime+0x3c>)
 8007516:	6013      	str	r3, [r2, #0]
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	20000f60 	.word	0x20000f60
 8007528:	20000fc8 	.word	0x20000fc8

0800752c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007532:	4b0b      	ldr	r3, [pc, #44]	; (8007560 <xTaskGetSchedulerState+0x34>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d102      	bne.n	8007540 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800753a:	2301      	movs	r3, #1
 800753c:	607b      	str	r3, [r7, #4]
 800753e:	e008      	b.n	8007552 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007540:	4b08      	ldr	r3, [pc, #32]	; (8007564 <xTaskGetSchedulerState+0x38>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d102      	bne.n	800754e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007548:	2302      	movs	r3, #2
 800754a:	607b      	str	r3, [r7, #4]
 800754c:	e001      	b.n	8007552 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800754e:	2300      	movs	r3, #0
 8007550:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007552:	687b      	ldr	r3, [r7, #4]
	}
 8007554:	4618      	mov	r0, r3
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	20000fb4 	.word	0x20000fb4
 8007564:	20000fd0 	.word	0x20000fd0

08007568 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007574:	2300      	movs	r3, #0
 8007576:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d056      	beq.n	800762c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800757e:	4b2e      	ldr	r3, [pc, #184]	; (8007638 <xTaskPriorityDisinherit+0xd0>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	429a      	cmp	r2, r3
 8007586:	d00a      	beq.n	800759e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758c:	f383 8811 	msr	BASEPRI, r3
 8007590:	f3bf 8f6f 	isb	sy
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	60fb      	str	r3, [r7, #12]
}
 800759a:	bf00      	nop
 800759c:	e7fe      	b.n	800759c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10a      	bne.n	80075bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80075a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075aa:	f383 8811 	msr	BASEPRI, r3
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	60bb      	str	r3, [r7, #8]
}
 80075b8:	bf00      	nop
 80075ba:	e7fe      	b.n	80075ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c0:	1e5a      	subs	r2, r3, #1
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d02c      	beq.n	800762c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d128      	bne.n	800762c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	3304      	adds	r3, #4
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fe fc46 	bl	8005e70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075fc:	4b0f      	ldr	r3, [pc, #60]	; (800763c <xTaskPriorityDisinherit+0xd4>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	429a      	cmp	r2, r3
 8007602:	d903      	bls.n	800760c <xTaskPriorityDisinherit+0xa4>
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007608:	4a0c      	ldr	r2, [pc, #48]	; (800763c <xTaskPriorityDisinherit+0xd4>)
 800760a:	6013      	str	r3, [r2, #0]
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007610:	4613      	mov	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4a09      	ldr	r2, [pc, #36]	; (8007640 <xTaskPriorityDisinherit+0xd8>)
 800761a:	441a      	add	r2, r3
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	3304      	adds	r3, #4
 8007620:	4619      	mov	r1, r3
 8007622:	4610      	mov	r0, r2
 8007624:	f7fe fbc7 	bl	8005db6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007628:	2301      	movs	r3, #1
 800762a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800762c:	697b      	ldr	r3, [r7, #20]
	}
 800762e:	4618      	mov	r0, r3
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	20000ad4 	.word	0x20000ad4
 800763c:	20000fb0 	.word	0x20000fb0
 8007640:	20000ad8 	.word	0x20000ad8

08007644 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800764e:	4b21      	ldr	r3, [pc, #132]	; (80076d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007654:	4b20      	ldr	r3, [pc, #128]	; (80076d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	3304      	adds	r3, #4
 800765a:	4618      	mov	r0, r3
 800765c:	f7fe fc08 	bl	8005e70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007666:	d10a      	bne.n	800767e <prvAddCurrentTaskToDelayedList+0x3a>
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d007      	beq.n	800767e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800766e:	4b1a      	ldr	r3, [pc, #104]	; (80076d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	3304      	adds	r3, #4
 8007674:	4619      	mov	r1, r3
 8007676:	4819      	ldr	r0, [pc, #100]	; (80076dc <prvAddCurrentTaskToDelayedList+0x98>)
 8007678:	f7fe fb9d 	bl	8005db6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800767c:	e026      	b.n	80076cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4413      	add	r3, r2
 8007684:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007686:	4b14      	ldr	r3, [pc, #80]	; (80076d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	429a      	cmp	r2, r3
 8007694:	d209      	bcs.n	80076aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007696:	4b12      	ldr	r3, [pc, #72]	; (80076e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	4b0f      	ldr	r3, [pc, #60]	; (80076d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	3304      	adds	r3, #4
 80076a0:	4619      	mov	r1, r3
 80076a2:	4610      	mov	r0, r2
 80076a4:	f7fe fbab 	bl	8005dfe <vListInsert>
}
 80076a8:	e010      	b.n	80076cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076aa:	4b0e      	ldr	r3, [pc, #56]	; (80076e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	4b0a      	ldr	r3, [pc, #40]	; (80076d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	3304      	adds	r3, #4
 80076b4:	4619      	mov	r1, r3
 80076b6:	4610      	mov	r0, r2
 80076b8:	f7fe fba1 	bl	8005dfe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80076bc:	4b0a      	ldr	r3, [pc, #40]	; (80076e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d202      	bcs.n	80076cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80076c6:	4a08      	ldr	r2, [pc, #32]	; (80076e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	6013      	str	r3, [r2, #0]
}
 80076cc:	bf00      	nop
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	20000fac 	.word	0x20000fac
 80076d8:	20000ad4 	.word	0x20000ad4
 80076dc:	20000f94 	.word	0x20000f94
 80076e0:	20000f64 	.word	0x20000f64
 80076e4:	20000f60 	.word	0x20000f60
 80076e8:	20000fc8 	.word	0x20000fc8

080076ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b08a      	sub	sp, #40	; 0x28
 80076f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80076f2:	2300      	movs	r3, #0
 80076f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80076f6:	f000 fb07 	bl	8007d08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80076fa:	4b1c      	ldr	r3, [pc, #112]	; (800776c <xTimerCreateTimerTask+0x80>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d021      	beq.n	8007746 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007702:	2300      	movs	r3, #0
 8007704:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007706:	2300      	movs	r3, #0
 8007708:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800770a:	1d3a      	adds	r2, r7, #4
 800770c:	f107 0108 	add.w	r1, r7, #8
 8007710:	f107 030c 	add.w	r3, r7, #12
 8007714:	4618      	mov	r0, r3
 8007716:	f7fe fb07 	bl	8005d28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800771a:	6879      	ldr	r1, [r7, #4]
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	9202      	str	r2, [sp, #8]
 8007722:	9301      	str	r3, [sp, #4]
 8007724:	2302      	movs	r3, #2
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	2300      	movs	r3, #0
 800772a:	460a      	mov	r2, r1
 800772c:	4910      	ldr	r1, [pc, #64]	; (8007770 <xTimerCreateTimerTask+0x84>)
 800772e:	4811      	ldr	r0, [pc, #68]	; (8007774 <xTimerCreateTimerTask+0x88>)
 8007730:	f7ff f8b4 	bl	800689c <xTaskCreateStatic>
 8007734:	4603      	mov	r3, r0
 8007736:	4a10      	ldr	r2, [pc, #64]	; (8007778 <xTimerCreateTimerTask+0x8c>)
 8007738:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800773a:	4b0f      	ldr	r3, [pc, #60]	; (8007778 <xTimerCreateTimerTask+0x8c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007742:	2301      	movs	r3, #1
 8007744:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10a      	bne.n	8007762 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800774c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007750:	f383 8811 	msr	BASEPRI, r3
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	613b      	str	r3, [r7, #16]
}
 800775e:	bf00      	nop
 8007760:	e7fe      	b.n	8007760 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007762:	697b      	ldr	r3, [r7, #20]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3718      	adds	r7, #24
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	20001004 	.word	0x20001004
 8007770:	0800b038 	.word	0x0800b038
 8007774:	080078b1 	.word	0x080078b1
 8007778:	20001008 	.word	0x20001008

0800777c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b08a      	sub	sp, #40	; 0x28
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
 8007788:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800778a:	2300      	movs	r3, #0
 800778c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10a      	bne.n	80077aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	623b      	str	r3, [r7, #32]
}
 80077a6:	bf00      	nop
 80077a8:	e7fe      	b.n	80077a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80077aa:	4b1a      	ldr	r3, [pc, #104]	; (8007814 <xTimerGenericCommand+0x98>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d02a      	beq.n	8007808 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2b05      	cmp	r3, #5
 80077c2:	dc18      	bgt.n	80077f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80077c4:	f7ff feb2 	bl	800752c <xTaskGetSchedulerState>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d109      	bne.n	80077e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80077ce:	4b11      	ldr	r3, [pc, #68]	; (8007814 <xTimerGenericCommand+0x98>)
 80077d0:	6818      	ldr	r0, [r3, #0]
 80077d2:	f107 0110 	add.w	r1, r7, #16
 80077d6:	2300      	movs	r3, #0
 80077d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077da:	f7fe fc77 	bl	80060cc <xQueueGenericSend>
 80077de:	6278      	str	r0, [r7, #36]	; 0x24
 80077e0:	e012      	b.n	8007808 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80077e2:	4b0c      	ldr	r3, [pc, #48]	; (8007814 <xTimerGenericCommand+0x98>)
 80077e4:	6818      	ldr	r0, [r3, #0]
 80077e6:	f107 0110 	add.w	r1, r7, #16
 80077ea:	2300      	movs	r3, #0
 80077ec:	2200      	movs	r2, #0
 80077ee:	f7fe fc6d 	bl	80060cc <xQueueGenericSend>
 80077f2:	6278      	str	r0, [r7, #36]	; 0x24
 80077f4:	e008      	b.n	8007808 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80077f6:	4b07      	ldr	r3, [pc, #28]	; (8007814 <xTimerGenericCommand+0x98>)
 80077f8:	6818      	ldr	r0, [r3, #0]
 80077fa:	f107 0110 	add.w	r1, r7, #16
 80077fe:	2300      	movs	r3, #0
 8007800:	683a      	ldr	r2, [r7, #0]
 8007802:	f7fe fd61 	bl	80062c8 <xQueueGenericSendFromISR>
 8007806:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800780a:	4618      	mov	r0, r3
 800780c:	3728      	adds	r7, #40	; 0x28
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	20001004 	.word	0x20001004

08007818 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b088      	sub	sp, #32
 800781c:	af02      	add	r7, sp, #8
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007822:	4b22      	ldr	r3, [pc, #136]	; (80078ac <prvProcessExpiredTimer+0x94>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	3304      	adds	r3, #4
 8007830:	4618      	mov	r0, r3
 8007832:	f7fe fb1d 	bl	8005e70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800783c:	f003 0304 	and.w	r3, r3, #4
 8007840:	2b00      	cmp	r3, #0
 8007842:	d022      	beq.n	800788a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	699a      	ldr	r2, [r3, #24]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	18d1      	adds	r1, r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	6978      	ldr	r0, [r7, #20]
 8007852:	f000 f8d1 	bl	80079f8 <prvInsertTimerInActiveList>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d01f      	beq.n	800789c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800785c:	2300      	movs	r3, #0
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	2300      	movs	r3, #0
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	2100      	movs	r1, #0
 8007866:	6978      	ldr	r0, [r7, #20]
 8007868:	f7ff ff88 	bl	800777c <xTimerGenericCommand>
 800786c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d113      	bne.n	800789c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	60fb      	str	r3, [r7, #12]
}
 8007886:	bf00      	nop
 8007888:	e7fe      	b.n	8007888 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007890:	f023 0301 	bic.w	r3, r3, #1
 8007894:	b2da      	uxtb	r2, r3
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	6a1b      	ldr	r3, [r3, #32]
 80078a0:	6978      	ldr	r0, [r7, #20]
 80078a2:	4798      	blx	r3
}
 80078a4:	bf00      	nop
 80078a6:	3718      	adds	r7, #24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	20000ffc 	.word	0x20000ffc

080078b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078b8:	f107 0308 	add.w	r3, r7, #8
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 f857 	bl	8007970 <prvGetNextExpireTime>
 80078c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	4619      	mov	r1, r3
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 f803 	bl	80078d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80078ce:	f000 f8d5 	bl	8007a7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078d2:	e7f1      	b.n	80078b8 <prvTimerTask+0x8>

080078d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80078de:	f7ff fa39 	bl	8006d54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078e2:	f107 0308 	add.w	r3, r7, #8
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 f866 	bl	80079b8 <prvSampleTimeNow>
 80078ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d130      	bne.n	8007956 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10a      	bne.n	8007910 <prvProcessTimerOrBlockTask+0x3c>
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d806      	bhi.n	8007910 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007902:	f7ff fa35 	bl	8006d70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007906:	68f9      	ldr	r1, [r7, #12]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f7ff ff85 	bl	8007818 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800790e:	e024      	b.n	800795a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d008      	beq.n	8007928 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007916:	4b13      	ldr	r3, [pc, #76]	; (8007964 <prvProcessTimerOrBlockTask+0x90>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <prvProcessTimerOrBlockTask+0x50>
 8007920:	2301      	movs	r3, #1
 8007922:	e000      	b.n	8007926 <prvProcessTimerOrBlockTask+0x52>
 8007924:	2300      	movs	r3, #0
 8007926:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007928:	4b0f      	ldr	r3, [pc, #60]	; (8007968 <prvProcessTimerOrBlockTask+0x94>)
 800792a:	6818      	ldr	r0, [r3, #0]
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	683a      	ldr	r2, [r7, #0]
 8007934:	4619      	mov	r1, r3
 8007936:	f7fe ff7d 	bl	8006834 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800793a:	f7ff fa19 	bl	8006d70 <xTaskResumeAll>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10a      	bne.n	800795a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007944:	4b09      	ldr	r3, [pc, #36]	; (800796c <prvProcessTimerOrBlockTask+0x98>)
 8007946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800794a:	601a      	str	r2, [r3, #0]
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	f3bf 8f6f 	isb	sy
}
 8007954:	e001      	b.n	800795a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007956:	f7ff fa0b 	bl	8006d70 <xTaskResumeAll>
}
 800795a:	bf00      	nop
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	20001000 	.word	0x20001000
 8007968:	20001004 	.word	0x20001004
 800796c:	e000ed04 	.word	0xe000ed04

08007970 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007978:	4b0e      	ldr	r3, [pc, #56]	; (80079b4 <prvGetNextExpireTime+0x44>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d101      	bne.n	8007986 <prvGetNextExpireTime+0x16>
 8007982:	2201      	movs	r2, #1
 8007984:	e000      	b.n	8007988 <prvGetNextExpireTime+0x18>
 8007986:	2200      	movs	r2, #0
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d105      	bne.n	80079a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007994:	4b07      	ldr	r3, [pc, #28]	; (80079b4 <prvGetNextExpireTime+0x44>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	60fb      	str	r3, [r7, #12]
 800799e:	e001      	b.n	80079a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80079a0:	2300      	movs	r3, #0
 80079a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80079a4:	68fb      	ldr	r3, [r7, #12]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3714      	adds	r7, #20
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	20000ffc 	.word	0x20000ffc

080079b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80079c0:	f7ff fa74 	bl	8006eac <xTaskGetTickCount>
 80079c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80079c6:	4b0b      	ldr	r3, [pc, #44]	; (80079f4 <prvSampleTimeNow+0x3c>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d205      	bcs.n	80079dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80079d0:	f000 f936 	bl	8007c40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	601a      	str	r2, [r3, #0]
 80079da:	e002      	b.n	80079e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80079e2:	4a04      	ldr	r2, [pc, #16]	; (80079f4 <prvSampleTimeNow+0x3c>)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80079e8:	68fb      	ldr	r3, [r7, #12]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	2000100c 	.word	0x2000100c

080079f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
 8007a04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007a06:	2300      	movs	r3, #0
 8007a08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	68ba      	ldr	r2, [r7, #8]
 8007a0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d812      	bhi.n	8007a44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	1ad2      	subs	r2, r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d302      	bcc.n	8007a32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	617b      	str	r3, [r7, #20]
 8007a30:	e01b      	b.n	8007a6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a32:	4b10      	ldr	r3, [pc, #64]	; (8007a74 <prvInsertTimerInActiveList+0x7c>)
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	3304      	adds	r3, #4
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	f7fe f9de 	bl	8005dfe <vListInsert>
 8007a42:	e012      	b.n	8007a6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d206      	bcs.n	8007a5a <prvInsertTimerInActiveList+0x62>
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d302      	bcc.n	8007a5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a54:	2301      	movs	r3, #1
 8007a56:	617b      	str	r3, [r7, #20]
 8007a58:	e007      	b.n	8007a6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a5a:	4b07      	ldr	r3, [pc, #28]	; (8007a78 <prvInsertTimerInActiveList+0x80>)
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	3304      	adds	r3, #4
 8007a62:	4619      	mov	r1, r3
 8007a64:	4610      	mov	r0, r2
 8007a66:	f7fe f9ca 	bl	8005dfe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a6a:	697b      	ldr	r3, [r7, #20]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3718      	adds	r7, #24
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	20001000 	.word	0x20001000
 8007a78:	20000ffc 	.word	0x20000ffc

08007a7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b08e      	sub	sp, #56	; 0x38
 8007a80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a82:	e0ca      	b.n	8007c1a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	da18      	bge.n	8007abc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007a8a:	1d3b      	adds	r3, r7, #4
 8007a8c:	3304      	adds	r3, #4
 8007a8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10a      	bne.n	8007aac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9a:	f383 8811 	msr	BASEPRI, r3
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	f3bf 8f4f 	dsb	sy
 8007aa6:	61fb      	str	r3, [r7, #28]
}
 8007aa8:	bf00      	nop
 8007aaa:	e7fe      	b.n	8007aaa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ab2:	6850      	ldr	r0, [r2, #4]
 8007ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ab6:	6892      	ldr	r2, [r2, #8]
 8007ab8:	4611      	mov	r1, r2
 8007aba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f2c0 80ab 	blt.w	8007c1a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d004      	beq.n	8007ada <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad2:	3304      	adds	r3, #4
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7fe f9cb 	bl	8005e70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ada:	463b      	mov	r3, r7
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7ff ff6b 	bl	80079b8 <prvSampleTimeNow>
 8007ae2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b09      	cmp	r3, #9
 8007ae8:	f200 8096 	bhi.w	8007c18 <prvProcessReceivedCommands+0x19c>
 8007aec:	a201      	add	r2, pc, #4	; (adr r2, 8007af4 <prvProcessReceivedCommands+0x78>)
 8007aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af2:	bf00      	nop
 8007af4:	08007b1d 	.word	0x08007b1d
 8007af8:	08007b1d 	.word	0x08007b1d
 8007afc:	08007b1d 	.word	0x08007b1d
 8007b00:	08007b91 	.word	0x08007b91
 8007b04:	08007ba5 	.word	0x08007ba5
 8007b08:	08007bef 	.word	0x08007bef
 8007b0c:	08007b1d 	.word	0x08007b1d
 8007b10:	08007b1d 	.word	0x08007b1d
 8007b14:	08007b91 	.word	0x08007b91
 8007b18:	08007ba5 	.word	0x08007ba5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b22:	f043 0301 	orr.w	r3, r3, #1
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	18d1      	adds	r1, r2, r3
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b3c:	f7ff ff5c 	bl	80079f8 <prvInsertTimerInActiveList>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d069      	beq.n	8007c1a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b54:	f003 0304 	and.w	r3, r3, #4
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d05e      	beq.n	8007c1a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	441a      	add	r2, r3
 8007b64:	2300      	movs	r3, #0
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	2300      	movs	r3, #0
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b6e:	f7ff fe05 	bl	800777c <xTimerGenericCommand>
 8007b72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007b74:	6a3b      	ldr	r3, [r7, #32]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d14f      	bne.n	8007c1a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7e:	f383 8811 	msr	BASEPRI, r3
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	61bb      	str	r3, [r7, #24]
}
 8007b8c:	bf00      	nop
 8007b8e:	e7fe      	b.n	8007b8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b96:	f023 0301 	bic.w	r3, r3, #1
 8007b9a:	b2da      	uxtb	r2, r3
 8007b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007ba2:	e03a      	b.n	8007c1a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007baa:	f043 0301 	orr.w	r3, r3, #1
 8007bae:	b2da      	uxtb	r2, r3
 8007bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10a      	bne.n	8007bda <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	617b      	str	r3, [r7, #20]
}
 8007bd6:	bf00      	nop
 8007bd8:	e7fe      	b.n	8007bd8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bdc:	699a      	ldr	r2, [r3, #24]
 8007bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be0:	18d1      	adds	r1, r2, r3
 8007be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007be6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007be8:	f7ff ff06 	bl	80079f8 <prvInsertTimerInActiveList>
					break;
 8007bec:	e015      	b.n	8007c1a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bf4:	f003 0302 	and.w	r3, r3, #2
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d103      	bne.n	8007c04 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bfe:	f000 fbdf 	bl	80083c0 <vPortFree>
 8007c02:	e00a      	b.n	8007c1a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c0a:	f023 0301 	bic.w	r3, r3, #1
 8007c0e:	b2da      	uxtb	r2, r3
 8007c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007c16:	e000      	b.n	8007c1a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007c18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c1a:	4b08      	ldr	r3, [pc, #32]	; (8007c3c <prvProcessReceivedCommands+0x1c0>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	1d39      	adds	r1, r7, #4
 8007c20:	2200      	movs	r2, #0
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7fe fbec 	bl	8006400 <xQueueReceive>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f47f af2a 	bne.w	8007a84 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007c30:	bf00      	nop
 8007c32:	bf00      	nop
 8007c34:	3730      	adds	r7, #48	; 0x30
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	20001004 	.word	0x20001004

08007c40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b088      	sub	sp, #32
 8007c44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c46:	e048      	b.n	8007cda <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c48:	4b2d      	ldr	r3, [pc, #180]	; (8007d00 <prvSwitchTimerLists+0xc0>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c52:	4b2b      	ldr	r3, [pc, #172]	; (8007d00 <prvSwitchTimerLists+0xc0>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3304      	adds	r3, #4
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fe f905 	bl	8005e70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d02e      	beq.n	8007cda <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	4413      	add	r3, r2
 8007c84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d90e      	bls.n	8007cac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c9a:	4b19      	ldr	r3, [pc, #100]	; (8007d00 <prvSwitchTimerLists+0xc0>)
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	3304      	adds	r3, #4
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	4610      	mov	r0, r2
 8007ca6:	f7fe f8aa 	bl	8005dfe <vListInsert>
 8007caa:	e016      	b.n	8007cda <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007cac:	2300      	movs	r3, #0
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	693a      	ldr	r2, [r7, #16]
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f7ff fd60 	bl	800777c <xTimerGenericCommand>
 8007cbc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10a      	bne.n	8007cda <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc8:	f383 8811 	msr	BASEPRI, r3
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	603b      	str	r3, [r7, #0]
}
 8007cd6:	bf00      	nop
 8007cd8:	e7fe      	b.n	8007cd8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cda:	4b09      	ldr	r3, [pc, #36]	; (8007d00 <prvSwitchTimerLists+0xc0>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1b1      	bne.n	8007c48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007ce4:	4b06      	ldr	r3, [pc, #24]	; (8007d00 <prvSwitchTimerLists+0xc0>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007cea:	4b06      	ldr	r3, [pc, #24]	; (8007d04 <prvSwitchTimerLists+0xc4>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a04      	ldr	r2, [pc, #16]	; (8007d00 <prvSwitchTimerLists+0xc0>)
 8007cf0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007cf2:	4a04      	ldr	r2, [pc, #16]	; (8007d04 <prvSwitchTimerLists+0xc4>)
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	6013      	str	r3, [r2, #0]
}
 8007cf8:	bf00      	nop
 8007cfa:	3718      	adds	r7, #24
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	20000ffc 	.word	0x20000ffc
 8007d04:	20001000 	.word	0x20001000

08007d08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007d0e:	f000 f969 	bl	8007fe4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007d12:	4b15      	ldr	r3, [pc, #84]	; (8007d68 <prvCheckForValidListAndQueue+0x60>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d120      	bne.n	8007d5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007d1a:	4814      	ldr	r0, [pc, #80]	; (8007d6c <prvCheckForValidListAndQueue+0x64>)
 8007d1c:	f7fe f81e 	bl	8005d5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007d20:	4813      	ldr	r0, [pc, #76]	; (8007d70 <prvCheckForValidListAndQueue+0x68>)
 8007d22:	f7fe f81b 	bl	8005d5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007d26:	4b13      	ldr	r3, [pc, #76]	; (8007d74 <prvCheckForValidListAndQueue+0x6c>)
 8007d28:	4a10      	ldr	r2, [pc, #64]	; (8007d6c <prvCheckForValidListAndQueue+0x64>)
 8007d2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007d2c:	4b12      	ldr	r3, [pc, #72]	; (8007d78 <prvCheckForValidListAndQueue+0x70>)
 8007d2e:	4a10      	ldr	r2, [pc, #64]	; (8007d70 <prvCheckForValidListAndQueue+0x68>)
 8007d30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d32:	2300      	movs	r3, #0
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	4b11      	ldr	r3, [pc, #68]	; (8007d7c <prvCheckForValidListAndQueue+0x74>)
 8007d38:	4a11      	ldr	r2, [pc, #68]	; (8007d80 <prvCheckForValidListAndQueue+0x78>)
 8007d3a:	2110      	movs	r1, #16
 8007d3c:	200a      	movs	r0, #10
 8007d3e:	f7fe f929 	bl	8005f94 <xQueueGenericCreateStatic>
 8007d42:	4603      	mov	r3, r0
 8007d44:	4a08      	ldr	r2, [pc, #32]	; (8007d68 <prvCheckForValidListAndQueue+0x60>)
 8007d46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007d48:	4b07      	ldr	r3, [pc, #28]	; (8007d68 <prvCheckForValidListAndQueue+0x60>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d005      	beq.n	8007d5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007d50:	4b05      	ldr	r3, [pc, #20]	; (8007d68 <prvCheckForValidListAndQueue+0x60>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	490b      	ldr	r1, [pc, #44]	; (8007d84 <prvCheckForValidListAndQueue+0x7c>)
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7fe fd42 	bl	80067e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d5c:	f000 f972 	bl	8008044 <vPortExitCritical>
}
 8007d60:	bf00      	nop
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	20001004 	.word	0x20001004
 8007d6c:	20000fd4 	.word	0x20000fd4
 8007d70:	20000fe8 	.word	0x20000fe8
 8007d74:	20000ffc 	.word	0x20000ffc
 8007d78:	20001000 	.word	0x20001000
 8007d7c:	200010b0 	.word	0x200010b0
 8007d80:	20001010 	.word	0x20001010
 8007d84:	0800b040 	.word	0x0800b040

08007d88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	3b04      	subs	r3, #4
 8007d98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007da0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	3b04      	subs	r3, #4
 8007da6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	f023 0201 	bic.w	r2, r3, #1
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	3b04      	subs	r3, #4
 8007db6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007db8:	4a0c      	ldr	r2, [pc, #48]	; (8007dec <pxPortInitialiseStack+0x64>)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	3b14      	subs	r3, #20
 8007dc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	3b04      	subs	r3, #4
 8007dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f06f 0202 	mvn.w	r2, #2
 8007dd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	3b20      	subs	r3, #32
 8007ddc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007dde:	68fb      	ldr	r3, [r7, #12]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr
 8007dec:	08007df1 	.word	0x08007df1

08007df0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007df6:	2300      	movs	r3, #0
 8007df8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007dfa:	4b12      	ldr	r3, [pc, #72]	; (8007e44 <prvTaskExitError+0x54>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e02:	d00a      	beq.n	8007e1a <prvTaskExitError+0x2a>
	__asm volatile
 8007e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e08:	f383 8811 	msr	BASEPRI, r3
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	60fb      	str	r3, [r7, #12]
}
 8007e16:	bf00      	nop
 8007e18:	e7fe      	b.n	8007e18 <prvTaskExitError+0x28>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	60bb      	str	r3, [r7, #8]
}
 8007e2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e2e:	bf00      	nop
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d0fc      	beq.n	8007e30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e36:	bf00      	nop
 8007e38:	bf00      	nop
 8007e3a:	3714      	adds	r7, #20
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr
 8007e44:	2000000c 	.word	0x2000000c
	...

08007e50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e50:	4b07      	ldr	r3, [pc, #28]	; (8007e70 <pxCurrentTCBConst2>)
 8007e52:	6819      	ldr	r1, [r3, #0]
 8007e54:	6808      	ldr	r0, [r1, #0]
 8007e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e5a:	f380 8809 	msr	PSP, r0
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f04f 0000 	mov.w	r0, #0
 8007e66:	f380 8811 	msr	BASEPRI, r0
 8007e6a:	4770      	bx	lr
 8007e6c:	f3af 8000 	nop.w

08007e70 <pxCurrentTCBConst2>:
 8007e70:	20000ad4 	.word	0x20000ad4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e74:	bf00      	nop
 8007e76:	bf00      	nop

08007e78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e78:	4808      	ldr	r0, [pc, #32]	; (8007e9c <prvPortStartFirstTask+0x24>)
 8007e7a:	6800      	ldr	r0, [r0, #0]
 8007e7c:	6800      	ldr	r0, [r0, #0]
 8007e7e:	f380 8808 	msr	MSP, r0
 8007e82:	f04f 0000 	mov.w	r0, #0
 8007e86:	f380 8814 	msr	CONTROL, r0
 8007e8a:	b662      	cpsie	i
 8007e8c:	b661      	cpsie	f
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	df00      	svc	0
 8007e98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e9a:	bf00      	nop
 8007e9c:	e000ed08 	.word	0xe000ed08

08007ea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ea6:	4b46      	ldr	r3, [pc, #280]	; (8007fc0 <xPortStartScheduler+0x120>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a46      	ldr	r2, [pc, #280]	; (8007fc4 <xPortStartScheduler+0x124>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d10a      	bne.n	8007ec6 <xPortStartScheduler+0x26>
	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb4:	f383 8811 	msr	BASEPRI, r3
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	613b      	str	r3, [r7, #16]
}
 8007ec2:	bf00      	nop
 8007ec4:	e7fe      	b.n	8007ec4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ec6:	4b3e      	ldr	r3, [pc, #248]	; (8007fc0 <xPortStartScheduler+0x120>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a3f      	ldr	r2, [pc, #252]	; (8007fc8 <xPortStartScheduler+0x128>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d10a      	bne.n	8007ee6 <xPortStartScheduler+0x46>
	__asm volatile
 8007ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	60fb      	str	r3, [r7, #12]
}
 8007ee2:	bf00      	nop
 8007ee4:	e7fe      	b.n	8007ee4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ee6:	4b39      	ldr	r3, [pc, #228]	; (8007fcc <xPortStartScheduler+0x12c>)
 8007ee8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	22ff      	movs	r2, #255	; 0xff
 8007ef6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f00:	78fb      	ldrb	r3, [r7, #3]
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	4b31      	ldr	r3, [pc, #196]	; (8007fd0 <xPortStartScheduler+0x130>)
 8007f0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f0e:	4b31      	ldr	r3, [pc, #196]	; (8007fd4 <xPortStartScheduler+0x134>)
 8007f10:	2207      	movs	r2, #7
 8007f12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f14:	e009      	b.n	8007f2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007f16:	4b2f      	ldr	r3, [pc, #188]	; (8007fd4 <xPortStartScheduler+0x134>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	4a2d      	ldr	r2, [pc, #180]	; (8007fd4 <xPortStartScheduler+0x134>)
 8007f1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f20:	78fb      	ldrb	r3, [r7, #3]
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	005b      	lsls	r3, r3, #1
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f2a:	78fb      	ldrb	r3, [r7, #3]
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f32:	2b80      	cmp	r3, #128	; 0x80
 8007f34:	d0ef      	beq.n	8007f16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f36:	4b27      	ldr	r3, [pc, #156]	; (8007fd4 <xPortStartScheduler+0x134>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f1c3 0307 	rsb	r3, r3, #7
 8007f3e:	2b04      	cmp	r3, #4
 8007f40:	d00a      	beq.n	8007f58 <xPortStartScheduler+0xb8>
	__asm volatile
 8007f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f46:	f383 8811 	msr	BASEPRI, r3
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	60bb      	str	r3, [r7, #8]
}
 8007f54:	bf00      	nop
 8007f56:	e7fe      	b.n	8007f56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f58:	4b1e      	ldr	r3, [pc, #120]	; (8007fd4 <xPortStartScheduler+0x134>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	021b      	lsls	r3, r3, #8
 8007f5e:	4a1d      	ldr	r2, [pc, #116]	; (8007fd4 <xPortStartScheduler+0x134>)
 8007f60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f62:	4b1c      	ldr	r3, [pc, #112]	; (8007fd4 <xPortStartScheduler+0x134>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f6a:	4a1a      	ldr	r2, [pc, #104]	; (8007fd4 <xPortStartScheduler+0x134>)
 8007f6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	b2da      	uxtb	r2, r3
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f76:	4b18      	ldr	r3, [pc, #96]	; (8007fd8 <xPortStartScheduler+0x138>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a17      	ldr	r2, [pc, #92]	; (8007fd8 <xPortStartScheduler+0x138>)
 8007f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f82:	4b15      	ldr	r3, [pc, #84]	; (8007fd8 <xPortStartScheduler+0x138>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a14      	ldr	r2, [pc, #80]	; (8007fd8 <xPortStartScheduler+0x138>)
 8007f88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f8e:	f000 f8dd 	bl	800814c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f92:	4b12      	ldr	r3, [pc, #72]	; (8007fdc <xPortStartScheduler+0x13c>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f98:	f000 f8fc 	bl	8008194 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f9c:	4b10      	ldr	r3, [pc, #64]	; (8007fe0 <xPortStartScheduler+0x140>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a0f      	ldr	r2, [pc, #60]	; (8007fe0 <xPortStartScheduler+0x140>)
 8007fa2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007fa6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007fa8:	f7ff ff66 	bl	8007e78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007fac:	f7ff f848 	bl	8007040 <vTaskSwitchContext>
	prvTaskExitError();
 8007fb0:	f7ff ff1e 	bl	8007df0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3718      	adds	r7, #24
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	e000ed00 	.word	0xe000ed00
 8007fc4:	410fc271 	.word	0x410fc271
 8007fc8:	410fc270 	.word	0x410fc270
 8007fcc:	e000e400 	.word	0xe000e400
 8007fd0:	20001100 	.word	0x20001100
 8007fd4:	20001104 	.word	0x20001104
 8007fd8:	e000ed20 	.word	0xe000ed20
 8007fdc:	2000000c 	.word	0x2000000c
 8007fe0:	e000ef34 	.word	0xe000ef34

08007fe4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
	__asm volatile
 8007fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fee:	f383 8811 	msr	BASEPRI, r3
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	607b      	str	r3, [r7, #4]
}
 8007ffc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ffe:	4b0f      	ldr	r3, [pc, #60]	; (800803c <vPortEnterCritical+0x58>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3301      	adds	r3, #1
 8008004:	4a0d      	ldr	r2, [pc, #52]	; (800803c <vPortEnterCritical+0x58>)
 8008006:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008008:	4b0c      	ldr	r3, [pc, #48]	; (800803c <vPortEnterCritical+0x58>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d10f      	bne.n	8008030 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008010:	4b0b      	ldr	r3, [pc, #44]	; (8008040 <vPortEnterCritical+0x5c>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00a      	beq.n	8008030 <vPortEnterCritical+0x4c>
	__asm volatile
 800801a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	603b      	str	r3, [r7, #0]
}
 800802c:	bf00      	nop
 800802e:	e7fe      	b.n	800802e <vPortEnterCritical+0x4a>
	}
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr
 800803c:	2000000c 	.word	0x2000000c
 8008040:	e000ed04 	.word	0xe000ed04

08008044 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800804a:	4b12      	ldr	r3, [pc, #72]	; (8008094 <vPortExitCritical+0x50>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10a      	bne.n	8008068 <vPortExitCritical+0x24>
	__asm volatile
 8008052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	607b      	str	r3, [r7, #4]
}
 8008064:	bf00      	nop
 8008066:	e7fe      	b.n	8008066 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008068:	4b0a      	ldr	r3, [pc, #40]	; (8008094 <vPortExitCritical+0x50>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	3b01      	subs	r3, #1
 800806e:	4a09      	ldr	r2, [pc, #36]	; (8008094 <vPortExitCritical+0x50>)
 8008070:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008072:	4b08      	ldr	r3, [pc, #32]	; (8008094 <vPortExitCritical+0x50>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d105      	bne.n	8008086 <vPortExitCritical+0x42>
 800807a:	2300      	movs	r3, #0
 800807c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	f383 8811 	msr	BASEPRI, r3
}
 8008084:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008086:	bf00      	nop
 8008088:	370c      	adds	r7, #12
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	2000000c 	.word	0x2000000c
	...

080080a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80080a0:	f3ef 8009 	mrs	r0, PSP
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	4b15      	ldr	r3, [pc, #84]	; (8008100 <pxCurrentTCBConst>)
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	f01e 0f10 	tst.w	lr, #16
 80080b0:	bf08      	it	eq
 80080b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80080b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ba:	6010      	str	r0, [r2, #0]
 80080bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80080c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80080c4:	f380 8811 	msr	BASEPRI, r0
 80080c8:	f3bf 8f4f 	dsb	sy
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f7fe ffb6 	bl	8007040 <vTaskSwitchContext>
 80080d4:	f04f 0000 	mov.w	r0, #0
 80080d8:	f380 8811 	msr	BASEPRI, r0
 80080dc:	bc09      	pop	{r0, r3}
 80080de:	6819      	ldr	r1, [r3, #0]
 80080e0:	6808      	ldr	r0, [r1, #0]
 80080e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e6:	f01e 0f10 	tst.w	lr, #16
 80080ea:	bf08      	it	eq
 80080ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80080f0:	f380 8809 	msr	PSP, r0
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	f3af 8000 	nop.w

08008100 <pxCurrentTCBConst>:
 8008100:	20000ad4 	.word	0x20000ad4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008104:	bf00      	nop
 8008106:	bf00      	nop

08008108 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	607b      	str	r3, [r7, #4]
}
 8008120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008122:	f7fe fed3 	bl	8006ecc <xTaskIncrementTick>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d003      	beq.n	8008134 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800812c:	4b06      	ldr	r3, [pc, #24]	; (8008148 <xPortSysTickHandler+0x40>)
 800812e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008132:	601a      	str	r2, [r3, #0]
 8008134:	2300      	movs	r3, #0
 8008136:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	f383 8811 	msr	BASEPRI, r3
}
 800813e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008140:	bf00      	nop
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	e000ed04 	.word	0xe000ed04

0800814c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800814c:	b480      	push	{r7}
 800814e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008150:	4b0b      	ldr	r3, [pc, #44]	; (8008180 <vPortSetupTimerInterrupt+0x34>)
 8008152:	2200      	movs	r2, #0
 8008154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008156:	4b0b      	ldr	r3, [pc, #44]	; (8008184 <vPortSetupTimerInterrupt+0x38>)
 8008158:	2200      	movs	r2, #0
 800815a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800815c:	4b0a      	ldr	r3, [pc, #40]	; (8008188 <vPortSetupTimerInterrupt+0x3c>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a0a      	ldr	r2, [pc, #40]	; (800818c <vPortSetupTimerInterrupt+0x40>)
 8008162:	fba2 2303 	umull	r2, r3, r2, r3
 8008166:	099b      	lsrs	r3, r3, #6
 8008168:	4a09      	ldr	r2, [pc, #36]	; (8008190 <vPortSetupTimerInterrupt+0x44>)
 800816a:	3b01      	subs	r3, #1
 800816c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800816e:	4b04      	ldr	r3, [pc, #16]	; (8008180 <vPortSetupTimerInterrupt+0x34>)
 8008170:	2207      	movs	r2, #7
 8008172:	601a      	str	r2, [r3, #0]
}
 8008174:	bf00      	nop
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	e000e010 	.word	0xe000e010
 8008184:	e000e018 	.word	0xe000e018
 8008188:	20000000 	.word	0x20000000
 800818c:	10624dd3 	.word	0x10624dd3
 8008190:	e000e014 	.word	0xe000e014

08008194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008194:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80081a4 <vPortEnableVFP+0x10>
 8008198:	6801      	ldr	r1, [r0, #0]
 800819a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800819e:	6001      	str	r1, [r0, #0]
 80081a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80081a2:	bf00      	nop
 80081a4:	e000ed88 	.word	0xe000ed88

080081a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80081ae:	f3ef 8305 	mrs	r3, IPSR
 80081b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2b0f      	cmp	r3, #15
 80081b8:	d914      	bls.n	80081e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80081ba:	4a17      	ldr	r2, [pc, #92]	; (8008218 <vPortValidateInterruptPriority+0x70>)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	4413      	add	r3, r2
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80081c4:	4b15      	ldr	r3, [pc, #84]	; (800821c <vPortValidateInterruptPriority+0x74>)
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	7afa      	ldrb	r2, [r7, #11]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d20a      	bcs.n	80081e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	607b      	str	r3, [r7, #4]
}
 80081e0:	bf00      	nop
 80081e2:	e7fe      	b.n	80081e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80081e4:	4b0e      	ldr	r3, [pc, #56]	; (8008220 <vPortValidateInterruptPriority+0x78>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80081ec:	4b0d      	ldr	r3, [pc, #52]	; (8008224 <vPortValidateInterruptPriority+0x7c>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d90a      	bls.n	800820a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80081f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	603b      	str	r3, [r7, #0]
}
 8008206:	bf00      	nop
 8008208:	e7fe      	b.n	8008208 <vPortValidateInterruptPriority+0x60>
	}
 800820a:	bf00      	nop
 800820c:	3714      	adds	r7, #20
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	e000e3f0 	.word	0xe000e3f0
 800821c:	20001100 	.word	0x20001100
 8008220:	e000ed0c 	.word	0xe000ed0c
 8008224:	20001104 	.word	0x20001104

08008228 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b08a      	sub	sp, #40	; 0x28
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008230:	2300      	movs	r3, #0
 8008232:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008234:	f7fe fd8e 	bl	8006d54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008238:	4b5b      	ldr	r3, [pc, #364]	; (80083a8 <pvPortMalloc+0x180>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d101      	bne.n	8008244 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008240:	f000 f920 	bl	8008484 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008244:	4b59      	ldr	r3, [pc, #356]	; (80083ac <pvPortMalloc+0x184>)
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4013      	ands	r3, r2
 800824c:	2b00      	cmp	r3, #0
 800824e:	f040 8093 	bne.w	8008378 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d01d      	beq.n	8008294 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008258:	2208      	movs	r2, #8
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4413      	add	r3, r2
 800825e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f003 0307 	and.w	r3, r3, #7
 8008266:	2b00      	cmp	r3, #0
 8008268:	d014      	beq.n	8008294 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f023 0307 	bic.w	r3, r3, #7
 8008270:	3308      	adds	r3, #8
 8008272:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f003 0307 	and.w	r3, r3, #7
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00a      	beq.n	8008294 <pvPortMalloc+0x6c>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	617b      	str	r3, [r7, #20]
}
 8008290:	bf00      	nop
 8008292:	e7fe      	b.n	8008292 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d06e      	beq.n	8008378 <pvPortMalloc+0x150>
 800829a:	4b45      	ldr	r3, [pc, #276]	; (80083b0 <pvPortMalloc+0x188>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d869      	bhi.n	8008378 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80082a4:	4b43      	ldr	r3, [pc, #268]	; (80083b4 <pvPortMalloc+0x18c>)
 80082a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80082a8:	4b42      	ldr	r3, [pc, #264]	; (80083b4 <pvPortMalloc+0x18c>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082ae:	e004      	b.n	80082ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80082b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80082b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d903      	bls.n	80082cc <pvPortMalloc+0xa4>
 80082c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1f1      	bne.n	80082b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80082cc:	4b36      	ldr	r3, [pc, #216]	; (80083a8 <pvPortMalloc+0x180>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d050      	beq.n	8008378 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80082d6:	6a3b      	ldr	r3, [r7, #32]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2208      	movs	r2, #8
 80082dc:	4413      	add	r3, r2
 80082de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	6a3b      	ldr	r3, [r7, #32]
 80082e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80082e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ea:	685a      	ldr	r2, [r3, #4]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	1ad2      	subs	r2, r2, r3
 80082f0:	2308      	movs	r3, #8
 80082f2:	005b      	lsls	r3, r3, #1
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d91f      	bls.n	8008338 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80082f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4413      	add	r3, r2
 80082fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	f003 0307 	and.w	r3, r3, #7
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00a      	beq.n	8008320 <pvPortMalloc+0xf8>
	__asm volatile
 800830a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830e:	f383 8811 	msr	BASEPRI, r3
 8008312:	f3bf 8f6f 	isb	sy
 8008316:	f3bf 8f4f 	dsb	sy
 800831a:	613b      	str	r3, [r7, #16]
}
 800831c:	bf00      	nop
 800831e:	e7fe      	b.n	800831e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008322:	685a      	ldr	r2, [r3, #4]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	1ad2      	subs	r2, r2, r3
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008332:	69b8      	ldr	r0, [r7, #24]
 8008334:	f000 f908 	bl	8008548 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008338:	4b1d      	ldr	r3, [pc, #116]	; (80083b0 <pvPortMalloc+0x188>)
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	4a1b      	ldr	r2, [pc, #108]	; (80083b0 <pvPortMalloc+0x188>)
 8008344:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008346:	4b1a      	ldr	r3, [pc, #104]	; (80083b0 <pvPortMalloc+0x188>)
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	4b1b      	ldr	r3, [pc, #108]	; (80083b8 <pvPortMalloc+0x190>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	429a      	cmp	r2, r3
 8008350:	d203      	bcs.n	800835a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008352:	4b17      	ldr	r3, [pc, #92]	; (80083b0 <pvPortMalloc+0x188>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a18      	ldr	r2, [pc, #96]	; (80083b8 <pvPortMalloc+0x190>)
 8008358:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	4b13      	ldr	r3, [pc, #76]	; (80083ac <pvPortMalloc+0x184>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	431a      	orrs	r2, r3
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836a:	2200      	movs	r2, #0
 800836c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800836e:	4b13      	ldr	r3, [pc, #76]	; (80083bc <pvPortMalloc+0x194>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	3301      	adds	r3, #1
 8008374:	4a11      	ldr	r2, [pc, #68]	; (80083bc <pvPortMalloc+0x194>)
 8008376:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008378:	f7fe fcfa 	bl	8006d70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	f003 0307 	and.w	r3, r3, #7
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00a      	beq.n	800839c <pvPortMalloc+0x174>
	__asm volatile
 8008386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	60fb      	str	r3, [r7, #12]
}
 8008398:	bf00      	nop
 800839a:	e7fe      	b.n	800839a <pvPortMalloc+0x172>
	return pvReturn;
 800839c:	69fb      	ldr	r3, [r7, #28]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3728      	adds	r7, #40	; 0x28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	20001cc8 	.word	0x20001cc8
 80083ac:	20001cdc 	.word	0x20001cdc
 80083b0:	20001ccc 	.word	0x20001ccc
 80083b4:	20001cc0 	.word	0x20001cc0
 80083b8:	20001cd0 	.word	0x20001cd0
 80083bc:	20001cd4 	.word	0x20001cd4

080083c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d04d      	beq.n	800846e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80083d2:	2308      	movs	r3, #8
 80083d4:	425b      	negs	r3, r3
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	4413      	add	r3, r2
 80083da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	4b24      	ldr	r3, [pc, #144]	; (8008478 <vPortFree+0xb8>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4013      	ands	r3, r2
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10a      	bne.n	8008404 <vPortFree+0x44>
	__asm volatile
 80083ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f2:	f383 8811 	msr	BASEPRI, r3
 80083f6:	f3bf 8f6f 	isb	sy
 80083fa:	f3bf 8f4f 	dsb	sy
 80083fe:	60fb      	str	r3, [r7, #12]
}
 8008400:	bf00      	nop
 8008402:	e7fe      	b.n	8008402 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00a      	beq.n	8008422 <vPortFree+0x62>
	__asm volatile
 800840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	60bb      	str	r3, [r7, #8]
}
 800841e:	bf00      	nop
 8008420:	e7fe      	b.n	8008420 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	685a      	ldr	r2, [r3, #4]
 8008426:	4b14      	ldr	r3, [pc, #80]	; (8008478 <vPortFree+0xb8>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4013      	ands	r3, r2
 800842c:	2b00      	cmp	r3, #0
 800842e:	d01e      	beq.n	800846e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d11a      	bne.n	800846e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	4b0e      	ldr	r3, [pc, #56]	; (8008478 <vPortFree+0xb8>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	43db      	mvns	r3, r3
 8008442:	401a      	ands	r2, r3
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008448:	f7fe fc84 	bl	8006d54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	685a      	ldr	r2, [r3, #4]
 8008450:	4b0a      	ldr	r3, [pc, #40]	; (800847c <vPortFree+0xbc>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4413      	add	r3, r2
 8008456:	4a09      	ldr	r2, [pc, #36]	; (800847c <vPortFree+0xbc>)
 8008458:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800845a:	6938      	ldr	r0, [r7, #16]
 800845c:	f000 f874 	bl	8008548 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008460:	4b07      	ldr	r3, [pc, #28]	; (8008480 <vPortFree+0xc0>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	3301      	adds	r3, #1
 8008466:	4a06      	ldr	r2, [pc, #24]	; (8008480 <vPortFree+0xc0>)
 8008468:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800846a:	f7fe fc81 	bl	8006d70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800846e:	bf00      	nop
 8008470:	3718      	adds	r7, #24
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	20001cdc 	.word	0x20001cdc
 800847c:	20001ccc 	.word	0x20001ccc
 8008480:	20001cd8 	.word	0x20001cd8

08008484 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800848a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800848e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008490:	4b27      	ldr	r3, [pc, #156]	; (8008530 <prvHeapInit+0xac>)
 8008492:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f003 0307 	and.w	r3, r3, #7
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00c      	beq.n	80084b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	3307      	adds	r3, #7
 80084a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f023 0307 	bic.w	r3, r3, #7
 80084aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	4a1f      	ldr	r2, [pc, #124]	; (8008530 <prvHeapInit+0xac>)
 80084b4:	4413      	add	r3, r2
 80084b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80084bc:	4a1d      	ldr	r2, [pc, #116]	; (8008534 <prvHeapInit+0xb0>)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80084c2:	4b1c      	ldr	r3, [pc, #112]	; (8008534 <prvHeapInit+0xb0>)
 80084c4:	2200      	movs	r2, #0
 80084c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	4413      	add	r3, r2
 80084ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80084d0:	2208      	movs	r2, #8
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	1a9b      	subs	r3, r3, r2
 80084d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f023 0307 	bic.w	r3, r3, #7
 80084de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	4a15      	ldr	r2, [pc, #84]	; (8008538 <prvHeapInit+0xb4>)
 80084e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80084e6:	4b14      	ldr	r3, [pc, #80]	; (8008538 <prvHeapInit+0xb4>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2200      	movs	r2, #0
 80084ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80084ee:	4b12      	ldr	r3, [pc, #72]	; (8008538 <prvHeapInit+0xb4>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2200      	movs	r2, #0
 80084f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	1ad2      	subs	r2, r2, r3
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008504:	4b0c      	ldr	r3, [pc, #48]	; (8008538 <prvHeapInit+0xb4>)
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	4a0a      	ldr	r2, [pc, #40]	; (800853c <prvHeapInit+0xb8>)
 8008512:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	4a09      	ldr	r2, [pc, #36]	; (8008540 <prvHeapInit+0xbc>)
 800851a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800851c:	4b09      	ldr	r3, [pc, #36]	; (8008544 <prvHeapInit+0xc0>)
 800851e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008522:	601a      	str	r2, [r3, #0]
}
 8008524:	bf00      	nop
 8008526:	3714      	adds	r7, #20
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr
 8008530:	20001108 	.word	0x20001108
 8008534:	20001cc0 	.word	0x20001cc0
 8008538:	20001cc8 	.word	0x20001cc8
 800853c:	20001cd0 	.word	0x20001cd0
 8008540:	20001ccc 	.word	0x20001ccc
 8008544:	20001cdc 	.word	0x20001cdc

08008548 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008550:	4b28      	ldr	r3, [pc, #160]	; (80085f4 <prvInsertBlockIntoFreeList+0xac>)
 8008552:	60fb      	str	r3, [r7, #12]
 8008554:	e002      	b.n	800855c <prvInsertBlockIntoFreeList+0x14>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	60fb      	str	r3, [r7, #12]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	429a      	cmp	r2, r3
 8008564:	d8f7      	bhi.n	8008556 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	4413      	add	r3, r2
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	429a      	cmp	r2, r3
 8008576:	d108      	bne.n	800858a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	441a      	add	r2, r3
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	441a      	add	r2, r3
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	429a      	cmp	r2, r3
 800859c:	d118      	bne.n	80085d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	4b15      	ldr	r3, [pc, #84]	; (80085f8 <prvInsertBlockIntoFreeList+0xb0>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d00d      	beq.n	80085c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685a      	ldr	r2, [r3, #4]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	441a      	add	r2, r3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	601a      	str	r2, [r3, #0]
 80085c4:	e008      	b.n	80085d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80085c6:	4b0c      	ldr	r3, [pc, #48]	; (80085f8 <prvInsertBlockIntoFreeList+0xb0>)
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	601a      	str	r2, [r3, #0]
 80085ce:	e003      	b.n	80085d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80085d8:	68fa      	ldr	r2, [r7, #12]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d002      	beq.n	80085e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085e6:	bf00      	nop
 80085e8:	3714      	adds	r7, #20
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	20001cc0 	.word	0x20001cc0
 80085f8:	20001cc8 	.word	0x20001cc8

080085fc <__cvt>:
 80085fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008600:	ec55 4b10 	vmov	r4, r5, d0
 8008604:	2d00      	cmp	r5, #0
 8008606:	460e      	mov	r6, r1
 8008608:	4619      	mov	r1, r3
 800860a:	462b      	mov	r3, r5
 800860c:	bfbb      	ittet	lt
 800860e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008612:	461d      	movlt	r5, r3
 8008614:	2300      	movge	r3, #0
 8008616:	232d      	movlt	r3, #45	; 0x2d
 8008618:	700b      	strb	r3, [r1, #0]
 800861a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800861c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008620:	4691      	mov	r9, r2
 8008622:	f023 0820 	bic.w	r8, r3, #32
 8008626:	bfbc      	itt	lt
 8008628:	4622      	movlt	r2, r4
 800862a:	4614      	movlt	r4, r2
 800862c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008630:	d005      	beq.n	800863e <__cvt+0x42>
 8008632:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008636:	d100      	bne.n	800863a <__cvt+0x3e>
 8008638:	3601      	adds	r6, #1
 800863a:	2102      	movs	r1, #2
 800863c:	e000      	b.n	8008640 <__cvt+0x44>
 800863e:	2103      	movs	r1, #3
 8008640:	ab03      	add	r3, sp, #12
 8008642:	9301      	str	r3, [sp, #4]
 8008644:	ab02      	add	r3, sp, #8
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	ec45 4b10 	vmov	d0, r4, r5
 800864c:	4653      	mov	r3, sl
 800864e:	4632      	mov	r2, r6
 8008650:	f000 fe9a 	bl	8009388 <_dtoa_r>
 8008654:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008658:	4607      	mov	r7, r0
 800865a:	d102      	bne.n	8008662 <__cvt+0x66>
 800865c:	f019 0f01 	tst.w	r9, #1
 8008660:	d022      	beq.n	80086a8 <__cvt+0xac>
 8008662:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008666:	eb07 0906 	add.w	r9, r7, r6
 800866a:	d110      	bne.n	800868e <__cvt+0x92>
 800866c:	783b      	ldrb	r3, [r7, #0]
 800866e:	2b30      	cmp	r3, #48	; 0x30
 8008670:	d10a      	bne.n	8008688 <__cvt+0x8c>
 8008672:	2200      	movs	r2, #0
 8008674:	2300      	movs	r3, #0
 8008676:	4620      	mov	r0, r4
 8008678:	4629      	mov	r1, r5
 800867a:	f7f8 fa25 	bl	8000ac8 <__aeabi_dcmpeq>
 800867e:	b918      	cbnz	r0, 8008688 <__cvt+0x8c>
 8008680:	f1c6 0601 	rsb	r6, r6, #1
 8008684:	f8ca 6000 	str.w	r6, [sl]
 8008688:	f8da 3000 	ldr.w	r3, [sl]
 800868c:	4499      	add	r9, r3
 800868e:	2200      	movs	r2, #0
 8008690:	2300      	movs	r3, #0
 8008692:	4620      	mov	r0, r4
 8008694:	4629      	mov	r1, r5
 8008696:	f7f8 fa17 	bl	8000ac8 <__aeabi_dcmpeq>
 800869a:	b108      	cbz	r0, 80086a0 <__cvt+0xa4>
 800869c:	f8cd 900c 	str.w	r9, [sp, #12]
 80086a0:	2230      	movs	r2, #48	; 0x30
 80086a2:	9b03      	ldr	r3, [sp, #12]
 80086a4:	454b      	cmp	r3, r9
 80086a6:	d307      	bcc.n	80086b8 <__cvt+0xbc>
 80086a8:	9b03      	ldr	r3, [sp, #12]
 80086aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086ac:	1bdb      	subs	r3, r3, r7
 80086ae:	4638      	mov	r0, r7
 80086b0:	6013      	str	r3, [r2, #0]
 80086b2:	b004      	add	sp, #16
 80086b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086b8:	1c59      	adds	r1, r3, #1
 80086ba:	9103      	str	r1, [sp, #12]
 80086bc:	701a      	strb	r2, [r3, #0]
 80086be:	e7f0      	b.n	80086a2 <__cvt+0xa6>

080086c0 <__exponent>:
 80086c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086c2:	4603      	mov	r3, r0
 80086c4:	2900      	cmp	r1, #0
 80086c6:	bfb8      	it	lt
 80086c8:	4249      	neglt	r1, r1
 80086ca:	f803 2b02 	strb.w	r2, [r3], #2
 80086ce:	bfb4      	ite	lt
 80086d0:	222d      	movlt	r2, #45	; 0x2d
 80086d2:	222b      	movge	r2, #43	; 0x2b
 80086d4:	2909      	cmp	r1, #9
 80086d6:	7042      	strb	r2, [r0, #1]
 80086d8:	dd2a      	ble.n	8008730 <__exponent+0x70>
 80086da:	f10d 0207 	add.w	r2, sp, #7
 80086de:	4617      	mov	r7, r2
 80086e0:	260a      	movs	r6, #10
 80086e2:	4694      	mov	ip, r2
 80086e4:	fb91 f5f6 	sdiv	r5, r1, r6
 80086e8:	fb06 1415 	mls	r4, r6, r5, r1
 80086ec:	3430      	adds	r4, #48	; 0x30
 80086ee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80086f2:	460c      	mov	r4, r1
 80086f4:	2c63      	cmp	r4, #99	; 0x63
 80086f6:	f102 32ff 	add.w	r2, r2, #4294967295
 80086fa:	4629      	mov	r1, r5
 80086fc:	dcf1      	bgt.n	80086e2 <__exponent+0x22>
 80086fe:	3130      	adds	r1, #48	; 0x30
 8008700:	f1ac 0402 	sub.w	r4, ip, #2
 8008704:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008708:	1c41      	adds	r1, r0, #1
 800870a:	4622      	mov	r2, r4
 800870c:	42ba      	cmp	r2, r7
 800870e:	d30a      	bcc.n	8008726 <__exponent+0x66>
 8008710:	f10d 0209 	add.w	r2, sp, #9
 8008714:	eba2 020c 	sub.w	r2, r2, ip
 8008718:	42bc      	cmp	r4, r7
 800871a:	bf88      	it	hi
 800871c:	2200      	movhi	r2, #0
 800871e:	4413      	add	r3, r2
 8008720:	1a18      	subs	r0, r3, r0
 8008722:	b003      	add	sp, #12
 8008724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008726:	f812 5b01 	ldrb.w	r5, [r2], #1
 800872a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800872e:	e7ed      	b.n	800870c <__exponent+0x4c>
 8008730:	2330      	movs	r3, #48	; 0x30
 8008732:	3130      	adds	r1, #48	; 0x30
 8008734:	7083      	strb	r3, [r0, #2]
 8008736:	70c1      	strb	r1, [r0, #3]
 8008738:	1d03      	adds	r3, r0, #4
 800873a:	e7f1      	b.n	8008720 <__exponent+0x60>

0800873c <_printf_float>:
 800873c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008740:	ed2d 8b02 	vpush	{d8}
 8008744:	b08d      	sub	sp, #52	; 0x34
 8008746:	460c      	mov	r4, r1
 8008748:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800874c:	4616      	mov	r6, r2
 800874e:	461f      	mov	r7, r3
 8008750:	4605      	mov	r5, r0
 8008752:	f000 fcb5 	bl	80090c0 <_localeconv_r>
 8008756:	f8d0 a000 	ldr.w	sl, [r0]
 800875a:	4650      	mov	r0, sl
 800875c:	f7f7 fd88 	bl	8000270 <strlen>
 8008760:	2300      	movs	r3, #0
 8008762:	930a      	str	r3, [sp, #40]	; 0x28
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	9305      	str	r3, [sp, #20]
 8008768:	f8d8 3000 	ldr.w	r3, [r8]
 800876c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008770:	3307      	adds	r3, #7
 8008772:	f023 0307 	bic.w	r3, r3, #7
 8008776:	f103 0208 	add.w	r2, r3, #8
 800877a:	f8c8 2000 	str.w	r2, [r8]
 800877e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008782:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008786:	9307      	str	r3, [sp, #28]
 8008788:	f8cd 8018 	str.w	r8, [sp, #24]
 800878c:	ee08 0a10 	vmov	s16, r0
 8008790:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008794:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008798:	4b9e      	ldr	r3, [pc, #632]	; (8008a14 <_printf_float+0x2d8>)
 800879a:	f04f 32ff 	mov.w	r2, #4294967295
 800879e:	f7f8 f9c5 	bl	8000b2c <__aeabi_dcmpun>
 80087a2:	bb88      	cbnz	r0, 8008808 <_printf_float+0xcc>
 80087a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087a8:	4b9a      	ldr	r3, [pc, #616]	; (8008a14 <_printf_float+0x2d8>)
 80087aa:	f04f 32ff 	mov.w	r2, #4294967295
 80087ae:	f7f8 f99f 	bl	8000af0 <__aeabi_dcmple>
 80087b2:	bb48      	cbnz	r0, 8008808 <_printf_float+0xcc>
 80087b4:	2200      	movs	r2, #0
 80087b6:	2300      	movs	r3, #0
 80087b8:	4640      	mov	r0, r8
 80087ba:	4649      	mov	r1, r9
 80087bc:	f7f8 f98e 	bl	8000adc <__aeabi_dcmplt>
 80087c0:	b110      	cbz	r0, 80087c8 <_printf_float+0x8c>
 80087c2:	232d      	movs	r3, #45	; 0x2d
 80087c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087c8:	4a93      	ldr	r2, [pc, #588]	; (8008a18 <_printf_float+0x2dc>)
 80087ca:	4b94      	ldr	r3, [pc, #592]	; (8008a1c <_printf_float+0x2e0>)
 80087cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80087d0:	bf94      	ite	ls
 80087d2:	4690      	movls	r8, r2
 80087d4:	4698      	movhi	r8, r3
 80087d6:	2303      	movs	r3, #3
 80087d8:	6123      	str	r3, [r4, #16]
 80087da:	9b05      	ldr	r3, [sp, #20]
 80087dc:	f023 0304 	bic.w	r3, r3, #4
 80087e0:	6023      	str	r3, [r4, #0]
 80087e2:	f04f 0900 	mov.w	r9, #0
 80087e6:	9700      	str	r7, [sp, #0]
 80087e8:	4633      	mov	r3, r6
 80087ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80087ec:	4621      	mov	r1, r4
 80087ee:	4628      	mov	r0, r5
 80087f0:	f000 f9da 	bl	8008ba8 <_printf_common>
 80087f4:	3001      	adds	r0, #1
 80087f6:	f040 8090 	bne.w	800891a <_printf_float+0x1de>
 80087fa:	f04f 30ff 	mov.w	r0, #4294967295
 80087fe:	b00d      	add	sp, #52	; 0x34
 8008800:	ecbd 8b02 	vpop	{d8}
 8008804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008808:	4642      	mov	r2, r8
 800880a:	464b      	mov	r3, r9
 800880c:	4640      	mov	r0, r8
 800880e:	4649      	mov	r1, r9
 8008810:	f7f8 f98c 	bl	8000b2c <__aeabi_dcmpun>
 8008814:	b140      	cbz	r0, 8008828 <_printf_float+0xec>
 8008816:	464b      	mov	r3, r9
 8008818:	2b00      	cmp	r3, #0
 800881a:	bfbc      	itt	lt
 800881c:	232d      	movlt	r3, #45	; 0x2d
 800881e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008822:	4a7f      	ldr	r2, [pc, #508]	; (8008a20 <_printf_float+0x2e4>)
 8008824:	4b7f      	ldr	r3, [pc, #508]	; (8008a24 <_printf_float+0x2e8>)
 8008826:	e7d1      	b.n	80087cc <_printf_float+0x90>
 8008828:	6863      	ldr	r3, [r4, #4]
 800882a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800882e:	9206      	str	r2, [sp, #24]
 8008830:	1c5a      	adds	r2, r3, #1
 8008832:	d13f      	bne.n	80088b4 <_printf_float+0x178>
 8008834:	2306      	movs	r3, #6
 8008836:	6063      	str	r3, [r4, #4]
 8008838:	9b05      	ldr	r3, [sp, #20]
 800883a:	6861      	ldr	r1, [r4, #4]
 800883c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008840:	2300      	movs	r3, #0
 8008842:	9303      	str	r3, [sp, #12]
 8008844:	ab0a      	add	r3, sp, #40	; 0x28
 8008846:	e9cd b301 	strd	fp, r3, [sp, #4]
 800884a:	ab09      	add	r3, sp, #36	; 0x24
 800884c:	ec49 8b10 	vmov	d0, r8, r9
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	6022      	str	r2, [r4, #0]
 8008854:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008858:	4628      	mov	r0, r5
 800885a:	f7ff fecf 	bl	80085fc <__cvt>
 800885e:	9b06      	ldr	r3, [sp, #24]
 8008860:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008862:	2b47      	cmp	r3, #71	; 0x47
 8008864:	4680      	mov	r8, r0
 8008866:	d108      	bne.n	800887a <_printf_float+0x13e>
 8008868:	1cc8      	adds	r0, r1, #3
 800886a:	db02      	blt.n	8008872 <_printf_float+0x136>
 800886c:	6863      	ldr	r3, [r4, #4]
 800886e:	4299      	cmp	r1, r3
 8008870:	dd41      	ble.n	80088f6 <_printf_float+0x1ba>
 8008872:	f1ab 0302 	sub.w	r3, fp, #2
 8008876:	fa5f fb83 	uxtb.w	fp, r3
 800887a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800887e:	d820      	bhi.n	80088c2 <_printf_float+0x186>
 8008880:	3901      	subs	r1, #1
 8008882:	465a      	mov	r2, fp
 8008884:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008888:	9109      	str	r1, [sp, #36]	; 0x24
 800888a:	f7ff ff19 	bl	80086c0 <__exponent>
 800888e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008890:	1813      	adds	r3, r2, r0
 8008892:	2a01      	cmp	r2, #1
 8008894:	4681      	mov	r9, r0
 8008896:	6123      	str	r3, [r4, #16]
 8008898:	dc02      	bgt.n	80088a0 <_printf_float+0x164>
 800889a:	6822      	ldr	r2, [r4, #0]
 800889c:	07d2      	lsls	r2, r2, #31
 800889e:	d501      	bpl.n	80088a4 <_printf_float+0x168>
 80088a0:	3301      	adds	r3, #1
 80088a2:	6123      	str	r3, [r4, #16]
 80088a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d09c      	beq.n	80087e6 <_printf_float+0xaa>
 80088ac:	232d      	movs	r3, #45	; 0x2d
 80088ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088b2:	e798      	b.n	80087e6 <_printf_float+0xaa>
 80088b4:	9a06      	ldr	r2, [sp, #24]
 80088b6:	2a47      	cmp	r2, #71	; 0x47
 80088b8:	d1be      	bne.n	8008838 <_printf_float+0xfc>
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1bc      	bne.n	8008838 <_printf_float+0xfc>
 80088be:	2301      	movs	r3, #1
 80088c0:	e7b9      	b.n	8008836 <_printf_float+0xfa>
 80088c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80088c6:	d118      	bne.n	80088fa <_printf_float+0x1be>
 80088c8:	2900      	cmp	r1, #0
 80088ca:	6863      	ldr	r3, [r4, #4]
 80088cc:	dd0b      	ble.n	80088e6 <_printf_float+0x1aa>
 80088ce:	6121      	str	r1, [r4, #16]
 80088d0:	b913      	cbnz	r3, 80088d8 <_printf_float+0x19c>
 80088d2:	6822      	ldr	r2, [r4, #0]
 80088d4:	07d0      	lsls	r0, r2, #31
 80088d6:	d502      	bpl.n	80088de <_printf_float+0x1a2>
 80088d8:	3301      	adds	r3, #1
 80088da:	440b      	add	r3, r1
 80088dc:	6123      	str	r3, [r4, #16]
 80088de:	65a1      	str	r1, [r4, #88]	; 0x58
 80088e0:	f04f 0900 	mov.w	r9, #0
 80088e4:	e7de      	b.n	80088a4 <_printf_float+0x168>
 80088e6:	b913      	cbnz	r3, 80088ee <_printf_float+0x1b2>
 80088e8:	6822      	ldr	r2, [r4, #0]
 80088ea:	07d2      	lsls	r2, r2, #31
 80088ec:	d501      	bpl.n	80088f2 <_printf_float+0x1b6>
 80088ee:	3302      	adds	r3, #2
 80088f0:	e7f4      	b.n	80088dc <_printf_float+0x1a0>
 80088f2:	2301      	movs	r3, #1
 80088f4:	e7f2      	b.n	80088dc <_printf_float+0x1a0>
 80088f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80088fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088fc:	4299      	cmp	r1, r3
 80088fe:	db05      	blt.n	800890c <_printf_float+0x1d0>
 8008900:	6823      	ldr	r3, [r4, #0]
 8008902:	6121      	str	r1, [r4, #16]
 8008904:	07d8      	lsls	r0, r3, #31
 8008906:	d5ea      	bpl.n	80088de <_printf_float+0x1a2>
 8008908:	1c4b      	adds	r3, r1, #1
 800890a:	e7e7      	b.n	80088dc <_printf_float+0x1a0>
 800890c:	2900      	cmp	r1, #0
 800890e:	bfd4      	ite	le
 8008910:	f1c1 0202 	rsble	r2, r1, #2
 8008914:	2201      	movgt	r2, #1
 8008916:	4413      	add	r3, r2
 8008918:	e7e0      	b.n	80088dc <_printf_float+0x1a0>
 800891a:	6823      	ldr	r3, [r4, #0]
 800891c:	055a      	lsls	r2, r3, #21
 800891e:	d407      	bmi.n	8008930 <_printf_float+0x1f4>
 8008920:	6923      	ldr	r3, [r4, #16]
 8008922:	4642      	mov	r2, r8
 8008924:	4631      	mov	r1, r6
 8008926:	4628      	mov	r0, r5
 8008928:	47b8      	blx	r7
 800892a:	3001      	adds	r0, #1
 800892c:	d12c      	bne.n	8008988 <_printf_float+0x24c>
 800892e:	e764      	b.n	80087fa <_printf_float+0xbe>
 8008930:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008934:	f240 80e0 	bls.w	8008af8 <_printf_float+0x3bc>
 8008938:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800893c:	2200      	movs	r2, #0
 800893e:	2300      	movs	r3, #0
 8008940:	f7f8 f8c2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008944:	2800      	cmp	r0, #0
 8008946:	d034      	beq.n	80089b2 <_printf_float+0x276>
 8008948:	4a37      	ldr	r2, [pc, #220]	; (8008a28 <_printf_float+0x2ec>)
 800894a:	2301      	movs	r3, #1
 800894c:	4631      	mov	r1, r6
 800894e:	4628      	mov	r0, r5
 8008950:	47b8      	blx	r7
 8008952:	3001      	adds	r0, #1
 8008954:	f43f af51 	beq.w	80087fa <_printf_float+0xbe>
 8008958:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800895c:	429a      	cmp	r2, r3
 800895e:	db02      	blt.n	8008966 <_printf_float+0x22a>
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	07d8      	lsls	r0, r3, #31
 8008964:	d510      	bpl.n	8008988 <_printf_float+0x24c>
 8008966:	ee18 3a10 	vmov	r3, s16
 800896a:	4652      	mov	r2, sl
 800896c:	4631      	mov	r1, r6
 800896e:	4628      	mov	r0, r5
 8008970:	47b8      	blx	r7
 8008972:	3001      	adds	r0, #1
 8008974:	f43f af41 	beq.w	80087fa <_printf_float+0xbe>
 8008978:	f04f 0800 	mov.w	r8, #0
 800897c:	f104 091a 	add.w	r9, r4, #26
 8008980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008982:	3b01      	subs	r3, #1
 8008984:	4543      	cmp	r3, r8
 8008986:	dc09      	bgt.n	800899c <_printf_float+0x260>
 8008988:	6823      	ldr	r3, [r4, #0]
 800898a:	079b      	lsls	r3, r3, #30
 800898c:	f100 8107 	bmi.w	8008b9e <_printf_float+0x462>
 8008990:	68e0      	ldr	r0, [r4, #12]
 8008992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008994:	4298      	cmp	r0, r3
 8008996:	bfb8      	it	lt
 8008998:	4618      	movlt	r0, r3
 800899a:	e730      	b.n	80087fe <_printf_float+0xc2>
 800899c:	2301      	movs	r3, #1
 800899e:	464a      	mov	r2, r9
 80089a0:	4631      	mov	r1, r6
 80089a2:	4628      	mov	r0, r5
 80089a4:	47b8      	blx	r7
 80089a6:	3001      	adds	r0, #1
 80089a8:	f43f af27 	beq.w	80087fa <_printf_float+0xbe>
 80089ac:	f108 0801 	add.w	r8, r8, #1
 80089b0:	e7e6      	b.n	8008980 <_printf_float+0x244>
 80089b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	dc39      	bgt.n	8008a2c <_printf_float+0x2f0>
 80089b8:	4a1b      	ldr	r2, [pc, #108]	; (8008a28 <_printf_float+0x2ec>)
 80089ba:	2301      	movs	r3, #1
 80089bc:	4631      	mov	r1, r6
 80089be:	4628      	mov	r0, r5
 80089c0:	47b8      	blx	r7
 80089c2:	3001      	adds	r0, #1
 80089c4:	f43f af19 	beq.w	80087fa <_printf_float+0xbe>
 80089c8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80089cc:	4313      	orrs	r3, r2
 80089ce:	d102      	bne.n	80089d6 <_printf_float+0x29a>
 80089d0:	6823      	ldr	r3, [r4, #0]
 80089d2:	07d9      	lsls	r1, r3, #31
 80089d4:	d5d8      	bpl.n	8008988 <_printf_float+0x24c>
 80089d6:	ee18 3a10 	vmov	r3, s16
 80089da:	4652      	mov	r2, sl
 80089dc:	4631      	mov	r1, r6
 80089de:	4628      	mov	r0, r5
 80089e0:	47b8      	blx	r7
 80089e2:	3001      	adds	r0, #1
 80089e4:	f43f af09 	beq.w	80087fa <_printf_float+0xbe>
 80089e8:	f04f 0900 	mov.w	r9, #0
 80089ec:	f104 0a1a 	add.w	sl, r4, #26
 80089f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f2:	425b      	negs	r3, r3
 80089f4:	454b      	cmp	r3, r9
 80089f6:	dc01      	bgt.n	80089fc <_printf_float+0x2c0>
 80089f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089fa:	e792      	b.n	8008922 <_printf_float+0x1e6>
 80089fc:	2301      	movs	r3, #1
 80089fe:	4652      	mov	r2, sl
 8008a00:	4631      	mov	r1, r6
 8008a02:	4628      	mov	r0, r5
 8008a04:	47b8      	blx	r7
 8008a06:	3001      	adds	r0, #1
 8008a08:	f43f aef7 	beq.w	80087fa <_printf_float+0xbe>
 8008a0c:	f109 0901 	add.w	r9, r9, #1
 8008a10:	e7ee      	b.n	80089f0 <_printf_float+0x2b4>
 8008a12:	bf00      	nop
 8008a14:	7fefffff 	.word	0x7fefffff
 8008a18:	0800b0d8 	.word	0x0800b0d8
 8008a1c:	0800b0dc 	.word	0x0800b0dc
 8008a20:	0800b0e0 	.word	0x0800b0e0
 8008a24:	0800b0e4 	.word	0x0800b0e4
 8008a28:	0800b0e8 	.word	0x0800b0e8
 8008a2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a30:	429a      	cmp	r2, r3
 8008a32:	bfa8      	it	ge
 8008a34:	461a      	movge	r2, r3
 8008a36:	2a00      	cmp	r2, #0
 8008a38:	4691      	mov	r9, r2
 8008a3a:	dc37      	bgt.n	8008aac <_printf_float+0x370>
 8008a3c:	f04f 0b00 	mov.w	fp, #0
 8008a40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a44:	f104 021a 	add.w	r2, r4, #26
 8008a48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a4a:	9305      	str	r3, [sp, #20]
 8008a4c:	eba3 0309 	sub.w	r3, r3, r9
 8008a50:	455b      	cmp	r3, fp
 8008a52:	dc33      	bgt.n	8008abc <_printf_float+0x380>
 8008a54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	db3b      	blt.n	8008ad4 <_printf_float+0x398>
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	07da      	lsls	r2, r3, #31
 8008a60:	d438      	bmi.n	8008ad4 <_printf_float+0x398>
 8008a62:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008a66:	eba2 0903 	sub.w	r9, r2, r3
 8008a6a:	9b05      	ldr	r3, [sp, #20]
 8008a6c:	1ad2      	subs	r2, r2, r3
 8008a6e:	4591      	cmp	r9, r2
 8008a70:	bfa8      	it	ge
 8008a72:	4691      	movge	r9, r2
 8008a74:	f1b9 0f00 	cmp.w	r9, #0
 8008a78:	dc35      	bgt.n	8008ae6 <_printf_float+0x3aa>
 8008a7a:	f04f 0800 	mov.w	r8, #0
 8008a7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a82:	f104 0a1a 	add.w	sl, r4, #26
 8008a86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a8a:	1a9b      	subs	r3, r3, r2
 8008a8c:	eba3 0309 	sub.w	r3, r3, r9
 8008a90:	4543      	cmp	r3, r8
 8008a92:	f77f af79 	ble.w	8008988 <_printf_float+0x24c>
 8008a96:	2301      	movs	r3, #1
 8008a98:	4652      	mov	r2, sl
 8008a9a:	4631      	mov	r1, r6
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	47b8      	blx	r7
 8008aa0:	3001      	adds	r0, #1
 8008aa2:	f43f aeaa 	beq.w	80087fa <_printf_float+0xbe>
 8008aa6:	f108 0801 	add.w	r8, r8, #1
 8008aaa:	e7ec      	b.n	8008a86 <_printf_float+0x34a>
 8008aac:	4613      	mov	r3, r2
 8008aae:	4631      	mov	r1, r6
 8008ab0:	4642      	mov	r2, r8
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	47b8      	blx	r7
 8008ab6:	3001      	adds	r0, #1
 8008ab8:	d1c0      	bne.n	8008a3c <_printf_float+0x300>
 8008aba:	e69e      	b.n	80087fa <_printf_float+0xbe>
 8008abc:	2301      	movs	r3, #1
 8008abe:	4631      	mov	r1, r6
 8008ac0:	4628      	mov	r0, r5
 8008ac2:	9205      	str	r2, [sp, #20]
 8008ac4:	47b8      	blx	r7
 8008ac6:	3001      	adds	r0, #1
 8008ac8:	f43f ae97 	beq.w	80087fa <_printf_float+0xbe>
 8008acc:	9a05      	ldr	r2, [sp, #20]
 8008ace:	f10b 0b01 	add.w	fp, fp, #1
 8008ad2:	e7b9      	b.n	8008a48 <_printf_float+0x30c>
 8008ad4:	ee18 3a10 	vmov	r3, s16
 8008ad8:	4652      	mov	r2, sl
 8008ada:	4631      	mov	r1, r6
 8008adc:	4628      	mov	r0, r5
 8008ade:	47b8      	blx	r7
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	d1be      	bne.n	8008a62 <_printf_float+0x326>
 8008ae4:	e689      	b.n	80087fa <_printf_float+0xbe>
 8008ae6:	9a05      	ldr	r2, [sp, #20]
 8008ae8:	464b      	mov	r3, r9
 8008aea:	4442      	add	r2, r8
 8008aec:	4631      	mov	r1, r6
 8008aee:	4628      	mov	r0, r5
 8008af0:	47b8      	blx	r7
 8008af2:	3001      	adds	r0, #1
 8008af4:	d1c1      	bne.n	8008a7a <_printf_float+0x33e>
 8008af6:	e680      	b.n	80087fa <_printf_float+0xbe>
 8008af8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008afa:	2a01      	cmp	r2, #1
 8008afc:	dc01      	bgt.n	8008b02 <_printf_float+0x3c6>
 8008afe:	07db      	lsls	r3, r3, #31
 8008b00:	d53a      	bpl.n	8008b78 <_printf_float+0x43c>
 8008b02:	2301      	movs	r3, #1
 8008b04:	4642      	mov	r2, r8
 8008b06:	4631      	mov	r1, r6
 8008b08:	4628      	mov	r0, r5
 8008b0a:	47b8      	blx	r7
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	f43f ae74 	beq.w	80087fa <_printf_float+0xbe>
 8008b12:	ee18 3a10 	vmov	r3, s16
 8008b16:	4652      	mov	r2, sl
 8008b18:	4631      	mov	r1, r6
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	47b8      	blx	r7
 8008b1e:	3001      	adds	r0, #1
 8008b20:	f43f ae6b 	beq.w	80087fa <_printf_float+0xbe>
 8008b24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b28:	2200      	movs	r2, #0
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008b30:	f7f7 ffca 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b34:	b9d8      	cbnz	r0, 8008b6e <_printf_float+0x432>
 8008b36:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008b3a:	f108 0201 	add.w	r2, r8, #1
 8008b3e:	4631      	mov	r1, r6
 8008b40:	4628      	mov	r0, r5
 8008b42:	47b8      	blx	r7
 8008b44:	3001      	adds	r0, #1
 8008b46:	d10e      	bne.n	8008b66 <_printf_float+0x42a>
 8008b48:	e657      	b.n	80087fa <_printf_float+0xbe>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	4652      	mov	r2, sl
 8008b4e:	4631      	mov	r1, r6
 8008b50:	4628      	mov	r0, r5
 8008b52:	47b8      	blx	r7
 8008b54:	3001      	adds	r0, #1
 8008b56:	f43f ae50 	beq.w	80087fa <_printf_float+0xbe>
 8008b5a:	f108 0801 	add.w	r8, r8, #1
 8008b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b60:	3b01      	subs	r3, #1
 8008b62:	4543      	cmp	r3, r8
 8008b64:	dcf1      	bgt.n	8008b4a <_printf_float+0x40e>
 8008b66:	464b      	mov	r3, r9
 8008b68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b6c:	e6da      	b.n	8008924 <_printf_float+0x1e8>
 8008b6e:	f04f 0800 	mov.w	r8, #0
 8008b72:	f104 0a1a 	add.w	sl, r4, #26
 8008b76:	e7f2      	b.n	8008b5e <_printf_float+0x422>
 8008b78:	2301      	movs	r3, #1
 8008b7a:	4642      	mov	r2, r8
 8008b7c:	e7df      	b.n	8008b3e <_printf_float+0x402>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	464a      	mov	r2, r9
 8008b82:	4631      	mov	r1, r6
 8008b84:	4628      	mov	r0, r5
 8008b86:	47b8      	blx	r7
 8008b88:	3001      	adds	r0, #1
 8008b8a:	f43f ae36 	beq.w	80087fa <_printf_float+0xbe>
 8008b8e:	f108 0801 	add.w	r8, r8, #1
 8008b92:	68e3      	ldr	r3, [r4, #12]
 8008b94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b96:	1a5b      	subs	r3, r3, r1
 8008b98:	4543      	cmp	r3, r8
 8008b9a:	dcf0      	bgt.n	8008b7e <_printf_float+0x442>
 8008b9c:	e6f8      	b.n	8008990 <_printf_float+0x254>
 8008b9e:	f04f 0800 	mov.w	r8, #0
 8008ba2:	f104 0919 	add.w	r9, r4, #25
 8008ba6:	e7f4      	b.n	8008b92 <_printf_float+0x456>

08008ba8 <_printf_common>:
 8008ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bac:	4616      	mov	r6, r2
 8008bae:	4699      	mov	r9, r3
 8008bb0:	688a      	ldr	r2, [r1, #8]
 8008bb2:	690b      	ldr	r3, [r1, #16]
 8008bb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	bfb8      	it	lt
 8008bbc:	4613      	movlt	r3, r2
 8008bbe:	6033      	str	r3, [r6, #0]
 8008bc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bc4:	4607      	mov	r7, r0
 8008bc6:	460c      	mov	r4, r1
 8008bc8:	b10a      	cbz	r2, 8008bce <_printf_common+0x26>
 8008bca:	3301      	adds	r3, #1
 8008bcc:	6033      	str	r3, [r6, #0]
 8008bce:	6823      	ldr	r3, [r4, #0]
 8008bd0:	0699      	lsls	r1, r3, #26
 8008bd2:	bf42      	ittt	mi
 8008bd4:	6833      	ldrmi	r3, [r6, #0]
 8008bd6:	3302      	addmi	r3, #2
 8008bd8:	6033      	strmi	r3, [r6, #0]
 8008bda:	6825      	ldr	r5, [r4, #0]
 8008bdc:	f015 0506 	ands.w	r5, r5, #6
 8008be0:	d106      	bne.n	8008bf0 <_printf_common+0x48>
 8008be2:	f104 0a19 	add.w	sl, r4, #25
 8008be6:	68e3      	ldr	r3, [r4, #12]
 8008be8:	6832      	ldr	r2, [r6, #0]
 8008bea:	1a9b      	subs	r3, r3, r2
 8008bec:	42ab      	cmp	r3, r5
 8008bee:	dc26      	bgt.n	8008c3e <_printf_common+0x96>
 8008bf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008bf4:	1e13      	subs	r3, r2, #0
 8008bf6:	6822      	ldr	r2, [r4, #0]
 8008bf8:	bf18      	it	ne
 8008bfa:	2301      	movne	r3, #1
 8008bfc:	0692      	lsls	r2, r2, #26
 8008bfe:	d42b      	bmi.n	8008c58 <_printf_common+0xb0>
 8008c00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c04:	4649      	mov	r1, r9
 8008c06:	4638      	mov	r0, r7
 8008c08:	47c0      	blx	r8
 8008c0a:	3001      	adds	r0, #1
 8008c0c:	d01e      	beq.n	8008c4c <_printf_common+0xa4>
 8008c0e:	6823      	ldr	r3, [r4, #0]
 8008c10:	6922      	ldr	r2, [r4, #16]
 8008c12:	f003 0306 	and.w	r3, r3, #6
 8008c16:	2b04      	cmp	r3, #4
 8008c18:	bf02      	ittt	eq
 8008c1a:	68e5      	ldreq	r5, [r4, #12]
 8008c1c:	6833      	ldreq	r3, [r6, #0]
 8008c1e:	1aed      	subeq	r5, r5, r3
 8008c20:	68a3      	ldr	r3, [r4, #8]
 8008c22:	bf0c      	ite	eq
 8008c24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c28:	2500      	movne	r5, #0
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	bfc4      	itt	gt
 8008c2e:	1a9b      	subgt	r3, r3, r2
 8008c30:	18ed      	addgt	r5, r5, r3
 8008c32:	2600      	movs	r6, #0
 8008c34:	341a      	adds	r4, #26
 8008c36:	42b5      	cmp	r5, r6
 8008c38:	d11a      	bne.n	8008c70 <_printf_common+0xc8>
 8008c3a:	2000      	movs	r0, #0
 8008c3c:	e008      	b.n	8008c50 <_printf_common+0xa8>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	4652      	mov	r2, sl
 8008c42:	4649      	mov	r1, r9
 8008c44:	4638      	mov	r0, r7
 8008c46:	47c0      	blx	r8
 8008c48:	3001      	adds	r0, #1
 8008c4a:	d103      	bne.n	8008c54 <_printf_common+0xac>
 8008c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c54:	3501      	adds	r5, #1
 8008c56:	e7c6      	b.n	8008be6 <_printf_common+0x3e>
 8008c58:	18e1      	adds	r1, r4, r3
 8008c5a:	1c5a      	adds	r2, r3, #1
 8008c5c:	2030      	movs	r0, #48	; 0x30
 8008c5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c62:	4422      	add	r2, r4
 8008c64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c6c:	3302      	adds	r3, #2
 8008c6e:	e7c7      	b.n	8008c00 <_printf_common+0x58>
 8008c70:	2301      	movs	r3, #1
 8008c72:	4622      	mov	r2, r4
 8008c74:	4649      	mov	r1, r9
 8008c76:	4638      	mov	r0, r7
 8008c78:	47c0      	blx	r8
 8008c7a:	3001      	adds	r0, #1
 8008c7c:	d0e6      	beq.n	8008c4c <_printf_common+0xa4>
 8008c7e:	3601      	adds	r6, #1
 8008c80:	e7d9      	b.n	8008c36 <_printf_common+0x8e>
	...

08008c84 <_printf_i>:
 8008c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c88:	7e0f      	ldrb	r7, [r1, #24]
 8008c8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c8c:	2f78      	cmp	r7, #120	; 0x78
 8008c8e:	4691      	mov	r9, r2
 8008c90:	4680      	mov	r8, r0
 8008c92:	460c      	mov	r4, r1
 8008c94:	469a      	mov	sl, r3
 8008c96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c9a:	d807      	bhi.n	8008cac <_printf_i+0x28>
 8008c9c:	2f62      	cmp	r7, #98	; 0x62
 8008c9e:	d80a      	bhi.n	8008cb6 <_printf_i+0x32>
 8008ca0:	2f00      	cmp	r7, #0
 8008ca2:	f000 80d4 	beq.w	8008e4e <_printf_i+0x1ca>
 8008ca6:	2f58      	cmp	r7, #88	; 0x58
 8008ca8:	f000 80c0 	beq.w	8008e2c <_printf_i+0x1a8>
 8008cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cb4:	e03a      	b.n	8008d2c <_printf_i+0xa8>
 8008cb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cba:	2b15      	cmp	r3, #21
 8008cbc:	d8f6      	bhi.n	8008cac <_printf_i+0x28>
 8008cbe:	a101      	add	r1, pc, #4	; (adr r1, 8008cc4 <_printf_i+0x40>)
 8008cc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cc4:	08008d1d 	.word	0x08008d1d
 8008cc8:	08008d31 	.word	0x08008d31
 8008ccc:	08008cad 	.word	0x08008cad
 8008cd0:	08008cad 	.word	0x08008cad
 8008cd4:	08008cad 	.word	0x08008cad
 8008cd8:	08008cad 	.word	0x08008cad
 8008cdc:	08008d31 	.word	0x08008d31
 8008ce0:	08008cad 	.word	0x08008cad
 8008ce4:	08008cad 	.word	0x08008cad
 8008ce8:	08008cad 	.word	0x08008cad
 8008cec:	08008cad 	.word	0x08008cad
 8008cf0:	08008e35 	.word	0x08008e35
 8008cf4:	08008d5d 	.word	0x08008d5d
 8008cf8:	08008def 	.word	0x08008def
 8008cfc:	08008cad 	.word	0x08008cad
 8008d00:	08008cad 	.word	0x08008cad
 8008d04:	08008e57 	.word	0x08008e57
 8008d08:	08008cad 	.word	0x08008cad
 8008d0c:	08008d5d 	.word	0x08008d5d
 8008d10:	08008cad 	.word	0x08008cad
 8008d14:	08008cad 	.word	0x08008cad
 8008d18:	08008df7 	.word	0x08008df7
 8008d1c:	682b      	ldr	r3, [r5, #0]
 8008d1e:	1d1a      	adds	r2, r3, #4
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	602a      	str	r2, [r5, #0]
 8008d24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e09f      	b.n	8008e70 <_printf_i+0x1ec>
 8008d30:	6820      	ldr	r0, [r4, #0]
 8008d32:	682b      	ldr	r3, [r5, #0]
 8008d34:	0607      	lsls	r7, r0, #24
 8008d36:	f103 0104 	add.w	r1, r3, #4
 8008d3a:	6029      	str	r1, [r5, #0]
 8008d3c:	d501      	bpl.n	8008d42 <_printf_i+0xbe>
 8008d3e:	681e      	ldr	r6, [r3, #0]
 8008d40:	e003      	b.n	8008d4a <_printf_i+0xc6>
 8008d42:	0646      	lsls	r6, r0, #25
 8008d44:	d5fb      	bpl.n	8008d3e <_printf_i+0xba>
 8008d46:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008d4a:	2e00      	cmp	r6, #0
 8008d4c:	da03      	bge.n	8008d56 <_printf_i+0xd2>
 8008d4e:	232d      	movs	r3, #45	; 0x2d
 8008d50:	4276      	negs	r6, r6
 8008d52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d56:	485a      	ldr	r0, [pc, #360]	; (8008ec0 <_printf_i+0x23c>)
 8008d58:	230a      	movs	r3, #10
 8008d5a:	e012      	b.n	8008d82 <_printf_i+0xfe>
 8008d5c:	682b      	ldr	r3, [r5, #0]
 8008d5e:	6820      	ldr	r0, [r4, #0]
 8008d60:	1d19      	adds	r1, r3, #4
 8008d62:	6029      	str	r1, [r5, #0]
 8008d64:	0605      	lsls	r5, r0, #24
 8008d66:	d501      	bpl.n	8008d6c <_printf_i+0xe8>
 8008d68:	681e      	ldr	r6, [r3, #0]
 8008d6a:	e002      	b.n	8008d72 <_printf_i+0xee>
 8008d6c:	0641      	lsls	r1, r0, #25
 8008d6e:	d5fb      	bpl.n	8008d68 <_printf_i+0xe4>
 8008d70:	881e      	ldrh	r6, [r3, #0]
 8008d72:	4853      	ldr	r0, [pc, #332]	; (8008ec0 <_printf_i+0x23c>)
 8008d74:	2f6f      	cmp	r7, #111	; 0x6f
 8008d76:	bf0c      	ite	eq
 8008d78:	2308      	moveq	r3, #8
 8008d7a:	230a      	movne	r3, #10
 8008d7c:	2100      	movs	r1, #0
 8008d7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d82:	6865      	ldr	r5, [r4, #4]
 8008d84:	60a5      	str	r5, [r4, #8]
 8008d86:	2d00      	cmp	r5, #0
 8008d88:	bfa2      	ittt	ge
 8008d8a:	6821      	ldrge	r1, [r4, #0]
 8008d8c:	f021 0104 	bicge.w	r1, r1, #4
 8008d90:	6021      	strge	r1, [r4, #0]
 8008d92:	b90e      	cbnz	r6, 8008d98 <_printf_i+0x114>
 8008d94:	2d00      	cmp	r5, #0
 8008d96:	d04b      	beq.n	8008e30 <_printf_i+0x1ac>
 8008d98:	4615      	mov	r5, r2
 8008d9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d9e:	fb03 6711 	mls	r7, r3, r1, r6
 8008da2:	5dc7      	ldrb	r7, [r0, r7]
 8008da4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008da8:	4637      	mov	r7, r6
 8008daa:	42bb      	cmp	r3, r7
 8008dac:	460e      	mov	r6, r1
 8008dae:	d9f4      	bls.n	8008d9a <_printf_i+0x116>
 8008db0:	2b08      	cmp	r3, #8
 8008db2:	d10b      	bne.n	8008dcc <_printf_i+0x148>
 8008db4:	6823      	ldr	r3, [r4, #0]
 8008db6:	07de      	lsls	r6, r3, #31
 8008db8:	d508      	bpl.n	8008dcc <_printf_i+0x148>
 8008dba:	6923      	ldr	r3, [r4, #16]
 8008dbc:	6861      	ldr	r1, [r4, #4]
 8008dbe:	4299      	cmp	r1, r3
 8008dc0:	bfde      	ittt	le
 8008dc2:	2330      	movle	r3, #48	; 0x30
 8008dc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008dc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008dcc:	1b52      	subs	r2, r2, r5
 8008dce:	6122      	str	r2, [r4, #16]
 8008dd0:	f8cd a000 	str.w	sl, [sp]
 8008dd4:	464b      	mov	r3, r9
 8008dd6:	aa03      	add	r2, sp, #12
 8008dd8:	4621      	mov	r1, r4
 8008dda:	4640      	mov	r0, r8
 8008ddc:	f7ff fee4 	bl	8008ba8 <_printf_common>
 8008de0:	3001      	adds	r0, #1
 8008de2:	d14a      	bne.n	8008e7a <_printf_i+0x1f6>
 8008de4:	f04f 30ff 	mov.w	r0, #4294967295
 8008de8:	b004      	add	sp, #16
 8008dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dee:	6823      	ldr	r3, [r4, #0]
 8008df0:	f043 0320 	orr.w	r3, r3, #32
 8008df4:	6023      	str	r3, [r4, #0]
 8008df6:	4833      	ldr	r0, [pc, #204]	; (8008ec4 <_printf_i+0x240>)
 8008df8:	2778      	movs	r7, #120	; 0x78
 8008dfa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008dfe:	6823      	ldr	r3, [r4, #0]
 8008e00:	6829      	ldr	r1, [r5, #0]
 8008e02:	061f      	lsls	r7, r3, #24
 8008e04:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e08:	d402      	bmi.n	8008e10 <_printf_i+0x18c>
 8008e0a:	065f      	lsls	r7, r3, #25
 8008e0c:	bf48      	it	mi
 8008e0e:	b2b6      	uxthmi	r6, r6
 8008e10:	07df      	lsls	r7, r3, #31
 8008e12:	bf48      	it	mi
 8008e14:	f043 0320 	orrmi.w	r3, r3, #32
 8008e18:	6029      	str	r1, [r5, #0]
 8008e1a:	bf48      	it	mi
 8008e1c:	6023      	strmi	r3, [r4, #0]
 8008e1e:	b91e      	cbnz	r6, 8008e28 <_printf_i+0x1a4>
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	f023 0320 	bic.w	r3, r3, #32
 8008e26:	6023      	str	r3, [r4, #0]
 8008e28:	2310      	movs	r3, #16
 8008e2a:	e7a7      	b.n	8008d7c <_printf_i+0xf8>
 8008e2c:	4824      	ldr	r0, [pc, #144]	; (8008ec0 <_printf_i+0x23c>)
 8008e2e:	e7e4      	b.n	8008dfa <_printf_i+0x176>
 8008e30:	4615      	mov	r5, r2
 8008e32:	e7bd      	b.n	8008db0 <_printf_i+0x12c>
 8008e34:	682b      	ldr	r3, [r5, #0]
 8008e36:	6826      	ldr	r6, [r4, #0]
 8008e38:	6961      	ldr	r1, [r4, #20]
 8008e3a:	1d18      	adds	r0, r3, #4
 8008e3c:	6028      	str	r0, [r5, #0]
 8008e3e:	0635      	lsls	r5, r6, #24
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	d501      	bpl.n	8008e48 <_printf_i+0x1c4>
 8008e44:	6019      	str	r1, [r3, #0]
 8008e46:	e002      	b.n	8008e4e <_printf_i+0x1ca>
 8008e48:	0670      	lsls	r0, r6, #25
 8008e4a:	d5fb      	bpl.n	8008e44 <_printf_i+0x1c0>
 8008e4c:	8019      	strh	r1, [r3, #0]
 8008e4e:	2300      	movs	r3, #0
 8008e50:	6123      	str	r3, [r4, #16]
 8008e52:	4615      	mov	r5, r2
 8008e54:	e7bc      	b.n	8008dd0 <_printf_i+0x14c>
 8008e56:	682b      	ldr	r3, [r5, #0]
 8008e58:	1d1a      	adds	r2, r3, #4
 8008e5a:	602a      	str	r2, [r5, #0]
 8008e5c:	681d      	ldr	r5, [r3, #0]
 8008e5e:	6862      	ldr	r2, [r4, #4]
 8008e60:	2100      	movs	r1, #0
 8008e62:	4628      	mov	r0, r5
 8008e64:	f7f7 f9b4 	bl	80001d0 <memchr>
 8008e68:	b108      	cbz	r0, 8008e6e <_printf_i+0x1ea>
 8008e6a:	1b40      	subs	r0, r0, r5
 8008e6c:	6060      	str	r0, [r4, #4]
 8008e6e:	6863      	ldr	r3, [r4, #4]
 8008e70:	6123      	str	r3, [r4, #16]
 8008e72:	2300      	movs	r3, #0
 8008e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e78:	e7aa      	b.n	8008dd0 <_printf_i+0x14c>
 8008e7a:	6923      	ldr	r3, [r4, #16]
 8008e7c:	462a      	mov	r2, r5
 8008e7e:	4649      	mov	r1, r9
 8008e80:	4640      	mov	r0, r8
 8008e82:	47d0      	blx	sl
 8008e84:	3001      	adds	r0, #1
 8008e86:	d0ad      	beq.n	8008de4 <_printf_i+0x160>
 8008e88:	6823      	ldr	r3, [r4, #0]
 8008e8a:	079b      	lsls	r3, r3, #30
 8008e8c:	d413      	bmi.n	8008eb6 <_printf_i+0x232>
 8008e8e:	68e0      	ldr	r0, [r4, #12]
 8008e90:	9b03      	ldr	r3, [sp, #12]
 8008e92:	4298      	cmp	r0, r3
 8008e94:	bfb8      	it	lt
 8008e96:	4618      	movlt	r0, r3
 8008e98:	e7a6      	b.n	8008de8 <_printf_i+0x164>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	4632      	mov	r2, r6
 8008e9e:	4649      	mov	r1, r9
 8008ea0:	4640      	mov	r0, r8
 8008ea2:	47d0      	blx	sl
 8008ea4:	3001      	adds	r0, #1
 8008ea6:	d09d      	beq.n	8008de4 <_printf_i+0x160>
 8008ea8:	3501      	adds	r5, #1
 8008eaa:	68e3      	ldr	r3, [r4, #12]
 8008eac:	9903      	ldr	r1, [sp, #12]
 8008eae:	1a5b      	subs	r3, r3, r1
 8008eb0:	42ab      	cmp	r3, r5
 8008eb2:	dcf2      	bgt.n	8008e9a <_printf_i+0x216>
 8008eb4:	e7eb      	b.n	8008e8e <_printf_i+0x20a>
 8008eb6:	2500      	movs	r5, #0
 8008eb8:	f104 0619 	add.w	r6, r4, #25
 8008ebc:	e7f5      	b.n	8008eaa <_printf_i+0x226>
 8008ebe:	bf00      	nop
 8008ec0:	0800b0ea 	.word	0x0800b0ea
 8008ec4:	0800b0fb 	.word	0x0800b0fb

08008ec8 <std>:
 8008ec8:	2300      	movs	r3, #0
 8008eca:	b510      	push	{r4, lr}
 8008ecc:	4604      	mov	r4, r0
 8008ece:	e9c0 3300 	strd	r3, r3, [r0]
 8008ed2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ed6:	6083      	str	r3, [r0, #8]
 8008ed8:	8181      	strh	r1, [r0, #12]
 8008eda:	6643      	str	r3, [r0, #100]	; 0x64
 8008edc:	81c2      	strh	r2, [r0, #14]
 8008ede:	6183      	str	r3, [r0, #24]
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	2208      	movs	r2, #8
 8008ee4:	305c      	adds	r0, #92	; 0x5c
 8008ee6:	f000 f8e2 	bl	80090ae <memset>
 8008eea:	4b05      	ldr	r3, [pc, #20]	; (8008f00 <std+0x38>)
 8008eec:	6263      	str	r3, [r4, #36]	; 0x24
 8008eee:	4b05      	ldr	r3, [pc, #20]	; (8008f04 <std+0x3c>)
 8008ef0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ef2:	4b05      	ldr	r3, [pc, #20]	; (8008f08 <std+0x40>)
 8008ef4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ef6:	4b05      	ldr	r3, [pc, #20]	; (8008f0c <std+0x44>)
 8008ef8:	6224      	str	r4, [r4, #32]
 8008efa:	6323      	str	r3, [r4, #48]	; 0x30
 8008efc:	bd10      	pop	{r4, pc}
 8008efe:	bf00      	nop
 8008f00:	08009029 	.word	0x08009029
 8008f04:	0800904b 	.word	0x0800904b
 8008f08:	08009083 	.word	0x08009083
 8008f0c:	080090a7 	.word	0x080090a7

08008f10 <stdio_exit_handler>:
 8008f10:	4a02      	ldr	r2, [pc, #8]	; (8008f1c <stdio_exit_handler+0xc>)
 8008f12:	4903      	ldr	r1, [pc, #12]	; (8008f20 <stdio_exit_handler+0x10>)
 8008f14:	4803      	ldr	r0, [pc, #12]	; (8008f24 <stdio_exit_handler+0x14>)
 8008f16:	f000 b869 	b.w	8008fec <_fwalk_sglue>
 8008f1a:	bf00      	nop
 8008f1c:	20000010 	.word	0x20000010
 8008f20:	0800a971 	.word	0x0800a971
 8008f24:	2000001c 	.word	0x2000001c

08008f28 <cleanup_stdio>:
 8008f28:	6841      	ldr	r1, [r0, #4]
 8008f2a:	4b0c      	ldr	r3, [pc, #48]	; (8008f5c <cleanup_stdio+0x34>)
 8008f2c:	4299      	cmp	r1, r3
 8008f2e:	b510      	push	{r4, lr}
 8008f30:	4604      	mov	r4, r0
 8008f32:	d001      	beq.n	8008f38 <cleanup_stdio+0x10>
 8008f34:	f001 fd1c 	bl	800a970 <_fflush_r>
 8008f38:	68a1      	ldr	r1, [r4, #8]
 8008f3a:	4b09      	ldr	r3, [pc, #36]	; (8008f60 <cleanup_stdio+0x38>)
 8008f3c:	4299      	cmp	r1, r3
 8008f3e:	d002      	beq.n	8008f46 <cleanup_stdio+0x1e>
 8008f40:	4620      	mov	r0, r4
 8008f42:	f001 fd15 	bl	800a970 <_fflush_r>
 8008f46:	68e1      	ldr	r1, [r4, #12]
 8008f48:	4b06      	ldr	r3, [pc, #24]	; (8008f64 <cleanup_stdio+0x3c>)
 8008f4a:	4299      	cmp	r1, r3
 8008f4c:	d004      	beq.n	8008f58 <cleanup_stdio+0x30>
 8008f4e:	4620      	mov	r0, r4
 8008f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f54:	f001 bd0c 	b.w	800a970 <_fflush_r>
 8008f58:	bd10      	pop	{r4, pc}
 8008f5a:	bf00      	nop
 8008f5c:	20001ce0 	.word	0x20001ce0
 8008f60:	20001d48 	.word	0x20001d48
 8008f64:	20001db0 	.word	0x20001db0

08008f68 <global_stdio_init.part.0>:
 8008f68:	b510      	push	{r4, lr}
 8008f6a:	4b0b      	ldr	r3, [pc, #44]	; (8008f98 <global_stdio_init.part.0+0x30>)
 8008f6c:	4c0b      	ldr	r4, [pc, #44]	; (8008f9c <global_stdio_init.part.0+0x34>)
 8008f6e:	4a0c      	ldr	r2, [pc, #48]	; (8008fa0 <global_stdio_init.part.0+0x38>)
 8008f70:	601a      	str	r2, [r3, #0]
 8008f72:	4620      	mov	r0, r4
 8008f74:	2200      	movs	r2, #0
 8008f76:	2104      	movs	r1, #4
 8008f78:	f7ff ffa6 	bl	8008ec8 <std>
 8008f7c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008f80:	2201      	movs	r2, #1
 8008f82:	2109      	movs	r1, #9
 8008f84:	f7ff ffa0 	bl	8008ec8 <std>
 8008f88:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008f8c:	2202      	movs	r2, #2
 8008f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f92:	2112      	movs	r1, #18
 8008f94:	f7ff bf98 	b.w	8008ec8 <std>
 8008f98:	20001e18 	.word	0x20001e18
 8008f9c:	20001ce0 	.word	0x20001ce0
 8008fa0:	08008f11 	.word	0x08008f11

08008fa4 <__sfp_lock_acquire>:
 8008fa4:	4801      	ldr	r0, [pc, #4]	; (8008fac <__sfp_lock_acquire+0x8>)
 8008fa6:	f000 b955 	b.w	8009254 <__retarget_lock_acquire_recursive>
 8008faa:	bf00      	nop
 8008fac:	20001e21 	.word	0x20001e21

08008fb0 <__sfp_lock_release>:
 8008fb0:	4801      	ldr	r0, [pc, #4]	; (8008fb8 <__sfp_lock_release+0x8>)
 8008fb2:	f000 b950 	b.w	8009256 <__retarget_lock_release_recursive>
 8008fb6:	bf00      	nop
 8008fb8:	20001e21 	.word	0x20001e21

08008fbc <__sinit>:
 8008fbc:	b510      	push	{r4, lr}
 8008fbe:	4604      	mov	r4, r0
 8008fc0:	f7ff fff0 	bl	8008fa4 <__sfp_lock_acquire>
 8008fc4:	6a23      	ldr	r3, [r4, #32]
 8008fc6:	b11b      	cbz	r3, 8008fd0 <__sinit+0x14>
 8008fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fcc:	f7ff bff0 	b.w	8008fb0 <__sfp_lock_release>
 8008fd0:	4b04      	ldr	r3, [pc, #16]	; (8008fe4 <__sinit+0x28>)
 8008fd2:	6223      	str	r3, [r4, #32]
 8008fd4:	4b04      	ldr	r3, [pc, #16]	; (8008fe8 <__sinit+0x2c>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1f5      	bne.n	8008fc8 <__sinit+0xc>
 8008fdc:	f7ff ffc4 	bl	8008f68 <global_stdio_init.part.0>
 8008fe0:	e7f2      	b.n	8008fc8 <__sinit+0xc>
 8008fe2:	bf00      	nop
 8008fe4:	08008f29 	.word	0x08008f29
 8008fe8:	20001e18 	.word	0x20001e18

08008fec <_fwalk_sglue>:
 8008fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ff0:	4607      	mov	r7, r0
 8008ff2:	4688      	mov	r8, r1
 8008ff4:	4614      	mov	r4, r2
 8008ff6:	2600      	movs	r6, #0
 8008ff8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ffc:	f1b9 0901 	subs.w	r9, r9, #1
 8009000:	d505      	bpl.n	800900e <_fwalk_sglue+0x22>
 8009002:	6824      	ldr	r4, [r4, #0]
 8009004:	2c00      	cmp	r4, #0
 8009006:	d1f7      	bne.n	8008ff8 <_fwalk_sglue+0xc>
 8009008:	4630      	mov	r0, r6
 800900a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800900e:	89ab      	ldrh	r3, [r5, #12]
 8009010:	2b01      	cmp	r3, #1
 8009012:	d907      	bls.n	8009024 <_fwalk_sglue+0x38>
 8009014:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009018:	3301      	adds	r3, #1
 800901a:	d003      	beq.n	8009024 <_fwalk_sglue+0x38>
 800901c:	4629      	mov	r1, r5
 800901e:	4638      	mov	r0, r7
 8009020:	47c0      	blx	r8
 8009022:	4306      	orrs	r6, r0
 8009024:	3568      	adds	r5, #104	; 0x68
 8009026:	e7e9      	b.n	8008ffc <_fwalk_sglue+0x10>

08009028 <__sread>:
 8009028:	b510      	push	{r4, lr}
 800902a:	460c      	mov	r4, r1
 800902c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009030:	f000 f8c2 	bl	80091b8 <_read_r>
 8009034:	2800      	cmp	r0, #0
 8009036:	bfab      	itete	ge
 8009038:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800903a:	89a3      	ldrhlt	r3, [r4, #12]
 800903c:	181b      	addge	r3, r3, r0
 800903e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009042:	bfac      	ite	ge
 8009044:	6563      	strge	r3, [r4, #84]	; 0x54
 8009046:	81a3      	strhlt	r3, [r4, #12]
 8009048:	bd10      	pop	{r4, pc}

0800904a <__swrite>:
 800904a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800904e:	461f      	mov	r7, r3
 8009050:	898b      	ldrh	r3, [r1, #12]
 8009052:	05db      	lsls	r3, r3, #23
 8009054:	4605      	mov	r5, r0
 8009056:	460c      	mov	r4, r1
 8009058:	4616      	mov	r6, r2
 800905a:	d505      	bpl.n	8009068 <__swrite+0x1e>
 800905c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009060:	2302      	movs	r3, #2
 8009062:	2200      	movs	r2, #0
 8009064:	f000 f896 	bl	8009194 <_lseek_r>
 8009068:	89a3      	ldrh	r3, [r4, #12]
 800906a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800906e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009072:	81a3      	strh	r3, [r4, #12]
 8009074:	4632      	mov	r2, r6
 8009076:	463b      	mov	r3, r7
 8009078:	4628      	mov	r0, r5
 800907a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800907e:	f000 b8ad 	b.w	80091dc <_write_r>

08009082 <__sseek>:
 8009082:	b510      	push	{r4, lr}
 8009084:	460c      	mov	r4, r1
 8009086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800908a:	f000 f883 	bl	8009194 <_lseek_r>
 800908e:	1c43      	adds	r3, r0, #1
 8009090:	89a3      	ldrh	r3, [r4, #12]
 8009092:	bf15      	itete	ne
 8009094:	6560      	strne	r0, [r4, #84]	; 0x54
 8009096:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800909a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800909e:	81a3      	strheq	r3, [r4, #12]
 80090a0:	bf18      	it	ne
 80090a2:	81a3      	strhne	r3, [r4, #12]
 80090a4:	bd10      	pop	{r4, pc}

080090a6 <__sclose>:
 80090a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090aa:	f000 b80d 	b.w	80090c8 <_close_r>

080090ae <memset>:
 80090ae:	4402      	add	r2, r0
 80090b0:	4603      	mov	r3, r0
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d100      	bne.n	80090b8 <memset+0xa>
 80090b6:	4770      	bx	lr
 80090b8:	f803 1b01 	strb.w	r1, [r3], #1
 80090bc:	e7f9      	b.n	80090b2 <memset+0x4>
	...

080090c0 <_localeconv_r>:
 80090c0:	4800      	ldr	r0, [pc, #0]	; (80090c4 <_localeconv_r+0x4>)
 80090c2:	4770      	bx	lr
 80090c4:	2000015c 	.word	0x2000015c

080090c8 <_close_r>:
 80090c8:	b538      	push	{r3, r4, r5, lr}
 80090ca:	4d06      	ldr	r5, [pc, #24]	; (80090e4 <_close_r+0x1c>)
 80090cc:	2300      	movs	r3, #0
 80090ce:	4604      	mov	r4, r0
 80090d0:	4608      	mov	r0, r1
 80090d2:	602b      	str	r3, [r5, #0]
 80090d4:	f7f8 faa9 	bl	800162a <_close>
 80090d8:	1c43      	adds	r3, r0, #1
 80090da:	d102      	bne.n	80090e2 <_close_r+0x1a>
 80090dc:	682b      	ldr	r3, [r5, #0]
 80090de:	b103      	cbz	r3, 80090e2 <_close_r+0x1a>
 80090e0:	6023      	str	r3, [r4, #0]
 80090e2:	bd38      	pop	{r3, r4, r5, pc}
 80090e4:	20001e1c 	.word	0x20001e1c

080090e8 <_reclaim_reent>:
 80090e8:	4b29      	ldr	r3, [pc, #164]	; (8009190 <_reclaim_reent+0xa8>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4283      	cmp	r3, r0
 80090ee:	b570      	push	{r4, r5, r6, lr}
 80090f0:	4604      	mov	r4, r0
 80090f2:	d04b      	beq.n	800918c <_reclaim_reent+0xa4>
 80090f4:	69c3      	ldr	r3, [r0, #28]
 80090f6:	b143      	cbz	r3, 800910a <_reclaim_reent+0x22>
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d144      	bne.n	8009188 <_reclaim_reent+0xa0>
 80090fe:	69e3      	ldr	r3, [r4, #28]
 8009100:	6819      	ldr	r1, [r3, #0]
 8009102:	b111      	cbz	r1, 800910a <_reclaim_reent+0x22>
 8009104:	4620      	mov	r0, r4
 8009106:	f000 ff31 	bl	8009f6c <_free_r>
 800910a:	6961      	ldr	r1, [r4, #20]
 800910c:	b111      	cbz	r1, 8009114 <_reclaim_reent+0x2c>
 800910e:	4620      	mov	r0, r4
 8009110:	f000 ff2c 	bl	8009f6c <_free_r>
 8009114:	69e1      	ldr	r1, [r4, #28]
 8009116:	b111      	cbz	r1, 800911e <_reclaim_reent+0x36>
 8009118:	4620      	mov	r0, r4
 800911a:	f000 ff27 	bl	8009f6c <_free_r>
 800911e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009120:	b111      	cbz	r1, 8009128 <_reclaim_reent+0x40>
 8009122:	4620      	mov	r0, r4
 8009124:	f000 ff22 	bl	8009f6c <_free_r>
 8009128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800912a:	b111      	cbz	r1, 8009132 <_reclaim_reent+0x4a>
 800912c:	4620      	mov	r0, r4
 800912e:	f000 ff1d 	bl	8009f6c <_free_r>
 8009132:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009134:	b111      	cbz	r1, 800913c <_reclaim_reent+0x54>
 8009136:	4620      	mov	r0, r4
 8009138:	f000 ff18 	bl	8009f6c <_free_r>
 800913c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800913e:	b111      	cbz	r1, 8009146 <_reclaim_reent+0x5e>
 8009140:	4620      	mov	r0, r4
 8009142:	f000 ff13 	bl	8009f6c <_free_r>
 8009146:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009148:	b111      	cbz	r1, 8009150 <_reclaim_reent+0x68>
 800914a:	4620      	mov	r0, r4
 800914c:	f000 ff0e 	bl	8009f6c <_free_r>
 8009150:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009152:	b111      	cbz	r1, 800915a <_reclaim_reent+0x72>
 8009154:	4620      	mov	r0, r4
 8009156:	f000 ff09 	bl	8009f6c <_free_r>
 800915a:	6a23      	ldr	r3, [r4, #32]
 800915c:	b1b3      	cbz	r3, 800918c <_reclaim_reent+0xa4>
 800915e:	4620      	mov	r0, r4
 8009160:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009164:	4718      	bx	r3
 8009166:	5949      	ldr	r1, [r1, r5]
 8009168:	b941      	cbnz	r1, 800917c <_reclaim_reent+0x94>
 800916a:	3504      	adds	r5, #4
 800916c:	69e3      	ldr	r3, [r4, #28]
 800916e:	2d80      	cmp	r5, #128	; 0x80
 8009170:	68d9      	ldr	r1, [r3, #12]
 8009172:	d1f8      	bne.n	8009166 <_reclaim_reent+0x7e>
 8009174:	4620      	mov	r0, r4
 8009176:	f000 fef9 	bl	8009f6c <_free_r>
 800917a:	e7c0      	b.n	80090fe <_reclaim_reent+0x16>
 800917c:	680e      	ldr	r6, [r1, #0]
 800917e:	4620      	mov	r0, r4
 8009180:	f000 fef4 	bl	8009f6c <_free_r>
 8009184:	4631      	mov	r1, r6
 8009186:	e7ef      	b.n	8009168 <_reclaim_reent+0x80>
 8009188:	2500      	movs	r5, #0
 800918a:	e7ef      	b.n	800916c <_reclaim_reent+0x84>
 800918c:	bd70      	pop	{r4, r5, r6, pc}
 800918e:	bf00      	nop
 8009190:	20000068 	.word	0x20000068

08009194 <_lseek_r>:
 8009194:	b538      	push	{r3, r4, r5, lr}
 8009196:	4d07      	ldr	r5, [pc, #28]	; (80091b4 <_lseek_r+0x20>)
 8009198:	4604      	mov	r4, r0
 800919a:	4608      	mov	r0, r1
 800919c:	4611      	mov	r1, r2
 800919e:	2200      	movs	r2, #0
 80091a0:	602a      	str	r2, [r5, #0]
 80091a2:	461a      	mov	r2, r3
 80091a4:	f7f8 fa68 	bl	8001678 <_lseek>
 80091a8:	1c43      	adds	r3, r0, #1
 80091aa:	d102      	bne.n	80091b2 <_lseek_r+0x1e>
 80091ac:	682b      	ldr	r3, [r5, #0]
 80091ae:	b103      	cbz	r3, 80091b2 <_lseek_r+0x1e>
 80091b0:	6023      	str	r3, [r4, #0]
 80091b2:	bd38      	pop	{r3, r4, r5, pc}
 80091b4:	20001e1c 	.word	0x20001e1c

080091b8 <_read_r>:
 80091b8:	b538      	push	{r3, r4, r5, lr}
 80091ba:	4d07      	ldr	r5, [pc, #28]	; (80091d8 <_read_r+0x20>)
 80091bc:	4604      	mov	r4, r0
 80091be:	4608      	mov	r0, r1
 80091c0:	4611      	mov	r1, r2
 80091c2:	2200      	movs	r2, #0
 80091c4:	602a      	str	r2, [r5, #0]
 80091c6:	461a      	mov	r2, r3
 80091c8:	f7f8 f9f6 	bl	80015b8 <_read>
 80091cc:	1c43      	adds	r3, r0, #1
 80091ce:	d102      	bne.n	80091d6 <_read_r+0x1e>
 80091d0:	682b      	ldr	r3, [r5, #0]
 80091d2:	b103      	cbz	r3, 80091d6 <_read_r+0x1e>
 80091d4:	6023      	str	r3, [r4, #0]
 80091d6:	bd38      	pop	{r3, r4, r5, pc}
 80091d8:	20001e1c 	.word	0x20001e1c

080091dc <_write_r>:
 80091dc:	b538      	push	{r3, r4, r5, lr}
 80091de:	4d07      	ldr	r5, [pc, #28]	; (80091fc <_write_r+0x20>)
 80091e0:	4604      	mov	r4, r0
 80091e2:	4608      	mov	r0, r1
 80091e4:	4611      	mov	r1, r2
 80091e6:	2200      	movs	r2, #0
 80091e8:	602a      	str	r2, [r5, #0]
 80091ea:	461a      	mov	r2, r3
 80091ec:	f7f8 fa01 	bl	80015f2 <_write>
 80091f0:	1c43      	adds	r3, r0, #1
 80091f2:	d102      	bne.n	80091fa <_write_r+0x1e>
 80091f4:	682b      	ldr	r3, [r5, #0]
 80091f6:	b103      	cbz	r3, 80091fa <_write_r+0x1e>
 80091f8:	6023      	str	r3, [r4, #0]
 80091fa:	bd38      	pop	{r3, r4, r5, pc}
 80091fc:	20001e1c 	.word	0x20001e1c

08009200 <__errno>:
 8009200:	4b01      	ldr	r3, [pc, #4]	; (8009208 <__errno+0x8>)
 8009202:	6818      	ldr	r0, [r3, #0]
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	20000068 	.word	0x20000068

0800920c <__libc_init_array>:
 800920c:	b570      	push	{r4, r5, r6, lr}
 800920e:	4d0d      	ldr	r5, [pc, #52]	; (8009244 <__libc_init_array+0x38>)
 8009210:	4c0d      	ldr	r4, [pc, #52]	; (8009248 <__libc_init_array+0x3c>)
 8009212:	1b64      	subs	r4, r4, r5
 8009214:	10a4      	asrs	r4, r4, #2
 8009216:	2600      	movs	r6, #0
 8009218:	42a6      	cmp	r6, r4
 800921a:	d109      	bne.n	8009230 <__libc_init_array+0x24>
 800921c:	4d0b      	ldr	r5, [pc, #44]	; (800924c <__libc_init_array+0x40>)
 800921e:	4c0c      	ldr	r4, [pc, #48]	; (8009250 <__libc_init_array+0x44>)
 8009220:	f001 feec 	bl	800affc <_init>
 8009224:	1b64      	subs	r4, r4, r5
 8009226:	10a4      	asrs	r4, r4, #2
 8009228:	2600      	movs	r6, #0
 800922a:	42a6      	cmp	r6, r4
 800922c:	d105      	bne.n	800923a <__libc_init_array+0x2e>
 800922e:	bd70      	pop	{r4, r5, r6, pc}
 8009230:	f855 3b04 	ldr.w	r3, [r5], #4
 8009234:	4798      	blx	r3
 8009236:	3601      	adds	r6, #1
 8009238:	e7ee      	b.n	8009218 <__libc_init_array+0xc>
 800923a:	f855 3b04 	ldr.w	r3, [r5], #4
 800923e:	4798      	blx	r3
 8009240:	3601      	adds	r6, #1
 8009242:	e7f2      	b.n	800922a <__libc_init_array+0x1e>
 8009244:	0800b454 	.word	0x0800b454
 8009248:	0800b454 	.word	0x0800b454
 800924c:	0800b454 	.word	0x0800b454
 8009250:	0800b458 	.word	0x0800b458

08009254 <__retarget_lock_acquire_recursive>:
 8009254:	4770      	bx	lr

08009256 <__retarget_lock_release_recursive>:
 8009256:	4770      	bx	lr

08009258 <memcpy>:
 8009258:	440a      	add	r2, r1
 800925a:	4291      	cmp	r1, r2
 800925c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009260:	d100      	bne.n	8009264 <memcpy+0xc>
 8009262:	4770      	bx	lr
 8009264:	b510      	push	{r4, lr}
 8009266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800926a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800926e:	4291      	cmp	r1, r2
 8009270:	d1f9      	bne.n	8009266 <memcpy+0xe>
 8009272:	bd10      	pop	{r4, pc}

08009274 <quorem>:
 8009274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009278:	6903      	ldr	r3, [r0, #16]
 800927a:	690c      	ldr	r4, [r1, #16]
 800927c:	42a3      	cmp	r3, r4
 800927e:	4607      	mov	r7, r0
 8009280:	db7e      	blt.n	8009380 <quorem+0x10c>
 8009282:	3c01      	subs	r4, #1
 8009284:	f101 0814 	add.w	r8, r1, #20
 8009288:	f100 0514 	add.w	r5, r0, #20
 800928c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009290:	9301      	str	r3, [sp, #4]
 8009292:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009296:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800929a:	3301      	adds	r3, #1
 800929c:	429a      	cmp	r2, r3
 800929e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80092a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80092a6:	fbb2 f6f3 	udiv	r6, r2, r3
 80092aa:	d331      	bcc.n	8009310 <quorem+0x9c>
 80092ac:	f04f 0e00 	mov.w	lr, #0
 80092b0:	4640      	mov	r0, r8
 80092b2:	46ac      	mov	ip, r5
 80092b4:	46f2      	mov	sl, lr
 80092b6:	f850 2b04 	ldr.w	r2, [r0], #4
 80092ba:	b293      	uxth	r3, r2
 80092bc:	fb06 e303 	mla	r3, r6, r3, lr
 80092c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80092c4:	0c1a      	lsrs	r2, r3, #16
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	ebaa 0303 	sub.w	r3, sl, r3
 80092cc:	f8dc a000 	ldr.w	sl, [ip]
 80092d0:	fa13 f38a 	uxtah	r3, r3, sl
 80092d4:	fb06 220e 	mla	r2, r6, lr, r2
 80092d8:	9300      	str	r3, [sp, #0]
 80092da:	9b00      	ldr	r3, [sp, #0]
 80092dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80092e0:	b292      	uxth	r2, r2
 80092e2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80092e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092ea:	f8bd 3000 	ldrh.w	r3, [sp]
 80092ee:	4581      	cmp	r9, r0
 80092f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092f4:	f84c 3b04 	str.w	r3, [ip], #4
 80092f8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80092fc:	d2db      	bcs.n	80092b6 <quorem+0x42>
 80092fe:	f855 300b 	ldr.w	r3, [r5, fp]
 8009302:	b92b      	cbnz	r3, 8009310 <quorem+0x9c>
 8009304:	9b01      	ldr	r3, [sp, #4]
 8009306:	3b04      	subs	r3, #4
 8009308:	429d      	cmp	r5, r3
 800930a:	461a      	mov	r2, r3
 800930c:	d32c      	bcc.n	8009368 <quorem+0xf4>
 800930e:	613c      	str	r4, [r7, #16]
 8009310:	4638      	mov	r0, r7
 8009312:	f001 f9a7 	bl	800a664 <__mcmp>
 8009316:	2800      	cmp	r0, #0
 8009318:	db22      	blt.n	8009360 <quorem+0xec>
 800931a:	3601      	adds	r6, #1
 800931c:	4629      	mov	r1, r5
 800931e:	2000      	movs	r0, #0
 8009320:	f858 2b04 	ldr.w	r2, [r8], #4
 8009324:	f8d1 c000 	ldr.w	ip, [r1]
 8009328:	b293      	uxth	r3, r2
 800932a:	1ac3      	subs	r3, r0, r3
 800932c:	0c12      	lsrs	r2, r2, #16
 800932e:	fa13 f38c 	uxtah	r3, r3, ip
 8009332:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009336:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800933a:	b29b      	uxth	r3, r3
 800933c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009340:	45c1      	cmp	r9, r8
 8009342:	f841 3b04 	str.w	r3, [r1], #4
 8009346:	ea4f 4022 	mov.w	r0, r2, asr #16
 800934a:	d2e9      	bcs.n	8009320 <quorem+0xac>
 800934c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009350:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009354:	b922      	cbnz	r2, 8009360 <quorem+0xec>
 8009356:	3b04      	subs	r3, #4
 8009358:	429d      	cmp	r5, r3
 800935a:	461a      	mov	r2, r3
 800935c:	d30a      	bcc.n	8009374 <quorem+0x100>
 800935e:	613c      	str	r4, [r7, #16]
 8009360:	4630      	mov	r0, r6
 8009362:	b003      	add	sp, #12
 8009364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009368:	6812      	ldr	r2, [r2, #0]
 800936a:	3b04      	subs	r3, #4
 800936c:	2a00      	cmp	r2, #0
 800936e:	d1ce      	bne.n	800930e <quorem+0x9a>
 8009370:	3c01      	subs	r4, #1
 8009372:	e7c9      	b.n	8009308 <quorem+0x94>
 8009374:	6812      	ldr	r2, [r2, #0]
 8009376:	3b04      	subs	r3, #4
 8009378:	2a00      	cmp	r2, #0
 800937a:	d1f0      	bne.n	800935e <quorem+0xea>
 800937c:	3c01      	subs	r4, #1
 800937e:	e7eb      	b.n	8009358 <quorem+0xe4>
 8009380:	2000      	movs	r0, #0
 8009382:	e7ee      	b.n	8009362 <quorem+0xee>
 8009384:	0000      	movs	r0, r0
	...

08009388 <_dtoa_r>:
 8009388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800938c:	ed2d 8b04 	vpush	{d8-d9}
 8009390:	69c5      	ldr	r5, [r0, #28]
 8009392:	b093      	sub	sp, #76	; 0x4c
 8009394:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009398:	ec57 6b10 	vmov	r6, r7, d0
 800939c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80093a0:	9107      	str	r1, [sp, #28]
 80093a2:	4604      	mov	r4, r0
 80093a4:	920a      	str	r2, [sp, #40]	; 0x28
 80093a6:	930d      	str	r3, [sp, #52]	; 0x34
 80093a8:	b975      	cbnz	r5, 80093c8 <_dtoa_r+0x40>
 80093aa:	2010      	movs	r0, #16
 80093ac:	f000 fe2a 	bl	800a004 <malloc>
 80093b0:	4602      	mov	r2, r0
 80093b2:	61e0      	str	r0, [r4, #28]
 80093b4:	b920      	cbnz	r0, 80093c0 <_dtoa_r+0x38>
 80093b6:	4bae      	ldr	r3, [pc, #696]	; (8009670 <_dtoa_r+0x2e8>)
 80093b8:	21ef      	movs	r1, #239	; 0xef
 80093ba:	48ae      	ldr	r0, [pc, #696]	; (8009674 <_dtoa_r+0x2ec>)
 80093bc:	f001 fb10 	bl	800a9e0 <__assert_func>
 80093c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80093c4:	6005      	str	r5, [r0, #0]
 80093c6:	60c5      	str	r5, [r0, #12]
 80093c8:	69e3      	ldr	r3, [r4, #28]
 80093ca:	6819      	ldr	r1, [r3, #0]
 80093cc:	b151      	cbz	r1, 80093e4 <_dtoa_r+0x5c>
 80093ce:	685a      	ldr	r2, [r3, #4]
 80093d0:	604a      	str	r2, [r1, #4]
 80093d2:	2301      	movs	r3, #1
 80093d4:	4093      	lsls	r3, r2
 80093d6:	608b      	str	r3, [r1, #8]
 80093d8:	4620      	mov	r0, r4
 80093da:	f000 ff07 	bl	800a1ec <_Bfree>
 80093de:	69e3      	ldr	r3, [r4, #28]
 80093e0:	2200      	movs	r2, #0
 80093e2:	601a      	str	r2, [r3, #0]
 80093e4:	1e3b      	subs	r3, r7, #0
 80093e6:	bfbb      	ittet	lt
 80093e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80093ec:	9303      	strlt	r3, [sp, #12]
 80093ee:	2300      	movge	r3, #0
 80093f0:	2201      	movlt	r2, #1
 80093f2:	bfac      	ite	ge
 80093f4:	f8c8 3000 	strge.w	r3, [r8]
 80093f8:	f8c8 2000 	strlt.w	r2, [r8]
 80093fc:	4b9e      	ldr	r3, [pc, #632]	; (8009678 <_dtoa_r+0x2f0>)
 80093fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009402:	ea33 0308 	bics.w	r3, r3, r8
 8009406:	d11b      	bne.n	8009440 <_dtoa_r+0xb8>
 8009408:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800940a:	f242 730f 	movw	r3, #9999	; 0x270f
 800940e:	6013      	str	r3, [r2, #0]
 8009410:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009414:	4333      	orrs	r3, r6
 8009416:	f000 8593 	beq.w	8009f40 <_dtoa_r+0xbb8>
 800941a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800941c:	b963      	cbnz	r3, 8009438 <_dtoa_r+0xb0>
 800941e:	4b97      	ldr	r3, [pc, #604]	; (800967c <_dtoa_r+0x2f4>)
 8009420:	e027      	b.n	8009472 <_dtoa_r+0xea>
 8009422:	4b97      	ldr	r3, [pc, #604]	; (8009680 <_dtoa_r+0x2f8>)
 8009424:	9300      	str	r3, [sp, #0]
 8009426:	3308      	adds	r3, #8
 8009428:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800942a:	6013      	str	r3, [r2, #0]
 800942c:	9800      	ldr	r0, [sp, #0]
 800942e:	b013      	add	sp, #76	; 0x4c
 8009430:	ecbd 8b04 	vpop	{d8-d9}
 8009434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009438:	4b90      	ldr	r3, [pc, #576]	; (800967c <_dtoa_r+0x2f4>)
 800943a:	9300      	str	r3, [sp, #0]
 800943c:	3303      	adds	r3, #3
 800943e:	e7f3      	b.n	8009428 <_dtoa_r+0xa0>
 8009440:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009444:	2200      	movs	r2, #0
 8009446:	ec51 0b17 	vmov	r0, r1, d7
 800944a:	eeb0 8a47 	vmov.f32	s16, s14
 800944e:	eef0 8a67 	vmov.f32	s17, s15
 8009452:	2300      	movs	r3, #0
 8009454:	f7f7 fb38 	bl	8000ac8 <__aeabi_dcmpeq>
 8009458:	4681      	mov	r9, r0
 800945a:	b160      	cbz	r0, 8009476 <_dtoa_r+0xee>
 800945c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800945e:	2301      	movs	r3, #1
 8009460:	6013      	str	r3, [r2, #0]
 8009462:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009464:	2b00      	cmp	r3, #0
 8009466:	f000 8568 	beq.w	8009f3a <_dtoa_r+0xbb2>
 800946a:	4b86      	ldr	r3, [pc, #536]	; (8009684 <_dtoa_r+0x2fc>)
 800946c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800946e:	6013      	str	r3, [r2, #0]
 8009470:	3b01      	subs	r3, #1
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	e7da      	b.n	800942c <_dtoa_r+0xa4>
 8009476:	aa10      	add	r2, sp, #64	; 0x40
 8009478:	a911      	add	r1, sp, #68	; 0x44
 800947a:	4620      	mov	r0, r4
 800947c:	eeb0 0a48 	vmov.f32	s0, s16
 8009480:	eef0 0a68 	vmov.f32	s1, s17
 8009484:	f001 f994 	bl	800a7b0 <__d2b>
 8009488:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800948c:	4682      	mov	sl, r0
 800948e:	2d00      	cmp	r5, #0
 8009490:	d07f      	beq.n	8009592 <_dtoa_r+0x20a>
 8009492:	ee18 3a90 	vmov	r3, s17
 8009496:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800949a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800949e:	ec51 0b18 	vmov	r0, r1, d8
 80094a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80094a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80094aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80094ae:	4619      	mov	r1, r3
 80094b0:	2200      	movs	r2, #0
 80094b2:	4b75      	ldr	r3, [pc, #468]	; (8009688 <_dtoa_r+0x300>)
 80094b4:	f7f6 fee8 	bl	8000288 <__aeabi_dsub>
 80094b8:	a367      	add	r3, pc, #412	; (adr r3, 8009658 <_dtoa_r+0x2d0>)
 80094ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094be:	f7f7 f89b 	bl	80005f8 <__aeabi_dmul>
 80094c2:	a367      	add	r3, pc, #412	; (adr r3, 8009660 <_dtoa_r+0x2d8>)
 80094c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c8:	f7f6 fee0 	bl	800028c <__adddf3>
 80094cc:	4606      	mov	r6, r0
 80094ce:	4628      	mov	r0, r5
 80094d0:	460f      	mov	r7, r1
 80094d2:	f7f7 f827 	bl	8000524 <__aeabi_i2d>
 80094d6:	a364      	add	r3, pc, #400	; (adr r3, 8009668 <_dtoa_r+0x2e0>)
 80094d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094dc:	f7f7 f88c 	bl	80005f8 <__aeabi_dmul>
 80094e0:	4602      	mov	r2, r0
 80094e2:	460b      	mov	r3, r1
 80094e4:	4630      	mov	r0, r6
 80094e6:	4639      	mov	r1, r7
 80094e8:	f7f6 fed0 	bl	800028c <__adddf3>
 80094ec:	4606      	mov	r6, r0
 80094ee:	460f      	mov	r7, r1
 80094f0:	f7f7 fb32 	bl	8000b58 <__aeabi_d2iz>
 80094f4:	2200      	movs	r2, #0
 80094f6:	4683      	mov	fp, r0
 80094f8:	2300      	movs	r3, #0
 80094fa:	4630      	mov	r0, r6
 80094fc:	4639      	mov	r1, r7
 80094fe:	f7f7 faed 	bl	8000adc <__aeabi_dcmplt>
 8009502:	b148      	cbz	r0, 8009518 <_dtoa_r+0x190>
 8009504:	4658      	mov	r0, fp
 8009506:	f7f7 f80d 	bl	8000524 <__aeabi_i2d>
 800950a:	4632      	mov	r2, r6
 800950c:	463b      	mov	r3, r7
 800950e:	f7f7 fadb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009512:	b908      	cbnz	r0, 8009518 <_dtoa_r+0x190>
 8009514:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009518:	f1bb 0f16 	cmp.w	fp, #22
 800951c:	d857      	bhi.n	80095ce <_dtoa_r+0x246>
 800951e:	4b5b      	ldr	r3, [pc, #364]	; (800968c <_dtoa_r+0x304>)
 8009520:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009528:	ec51 0b18 	vmov	r0, r1, d8
 800952c:	f7f7 fad6 	bl	8000adc <__aeabi_dcmplt>
 8009530:	2800      	cmp	r0, #0
 8009532:	d04e      	beq.n	80095d2 <_dtoa_r+0x24a>
 8009534:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009538:	2300      	movs	r3, #0
 800953a:	930c      	str	r3, [sp, #48]	; 0x30
 800953c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800953e:	1b5b      	subs	r3, r3, r5
 8009540:	1e5a      	subs	r2, r3, #1
 8009542:	bf45      	ittet	mi
 8009544:	f1c3 0301 	rsbmi	r3, r3, #1
 8009548:	9305      	strmi	r3, [sp, #20]
 800954a:	2300      	movpl	r3, #0
 800954c:	2300      	movmi	r3, #0
 800954e:	9206      	str	r2, [sp, #24]
 8009550:	bf54      	ite	pl
 8009552:	9305      	strpl	r3, [sp, #20]
 8009554:	9306      	strmi	r3, [sp, #24]
 8009556:	f1bb 0f00 	cmp.w	fp, #0
 800955a:	db3c      	blt.n	80095d6 <_dtoa_r+0x24e>
 800955c:	9b06      	ldr	r3, [sp, #24]
 800955e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009562:	445b      	add	r3, fp
 8009564:	9306      	str	r3, [sp, #24]
 8009566:	2300      	movs	r3, #0
 8009568:	9308      	str	r3, [sp, #32]
 800956a:	9b07      	ldr	r3, [sp, #28]
 800956c:	2b09      	cmp	r3, #9
 800956e:	d868      	bhi.n	8009642 <_dtoa_r+0x2ba>
 8009570:	2b05      	cmp	r3, #5
 8009572:	bfc4      	itt	gt
 8009574:	3b04      	subgt	r3, #4
 8009576:	9307      	strgt	r3, [sp, #28]
 8009578:	9b07      	ldr	r3, [sp, #28]
 800957a:	f1a3 0302 	sub.w	r3, r3, #2
 800957e:	bfcc      	ite	gt
 8009580:	2500      	movgt	r5, #0
 8009582:	2501      	movle	r5, #1
 8009584:	2b03      	cmp	r3, #3
 8009586:	f200 8085 	bhi.w	8009694 <_dtoa_r+0x30c>
 800958a:	e8df f003 	tbb	[pc, r3]
 800958e:	3b2e      	.short	0x3b2e
 8009590:	5839      	.short	0x5839
 8009592:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009596:	441d      	add	r5, r3
 8009598:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800959c:	2b20      	cmp	r3, #32
 800959e:	bfc1      	itttt	gt
 80095a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80095a4:	fa08 f803 	lslgt.w	r8, r8, r3
 80095a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80095ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 80095b0:	bfd6      	itet	le
 80095b2:	f1c3 0320 	rsble	r3, r3, #32
 80095b6:	ea48 0003 	orrgt.w	r0, r8, r3
 80095ba:	fa06 f003 	lslle.w	r0, r6, r3
 80095be:	f7f6 ffa1 	bl	8000504 <__aeabi_ui2d>
 80095c2:	2201      	movs	r2, #1
 80095c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80095c8:	3d01      	subs	r5, #1
 80095ca:	920e      	str	r2, [sp, #56]	; 0x38
 80095cc:	e76f      	b.n	80094ae <_dtoa_r+0x126>
 80095ce:	2301      	movs	r3, #1
 80095d0:	e7b3      	b.n	800953a <_dtoa_r+0x1b2>
 80095d2:	900c      	str	r0, [sp, #48]	; 0x30
 80095d4:	e7b2      	b.n	800953c <_dtoa_r+0x1b4>
 80095d6:	9b05      	ldr	r3, [sp, #20]
 80095d8:	eba3 030b 	sub.w	r3, r3, fp
 80095dc:	9305      	str	r3, [sp, #20]
 80095de:	f1cb 0300 	rsb	r3, fp, #0
 80095e2:	9308      	str	r3, [sp, #32]
 80095e4:	2300      	movs	r3, #0
 80095e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80095e8:	e7bf      	b.n	800956a <_dtoa_r+0x1e2>
 80095ea:	2300      	movs	r3, #0
 80095ec:	9309      	str	r3, [sp, #36]	; 0x24
 80095ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	dc52      	bgt.n	800969a <_dtoa_r+0x312>
 80095f4:	2301      	movs	r3, #1
 80095f6:	9301      	str	r3, [sp, #4]
 80095f8:	9304      	str	r3, [sp, #16]
 80095fa:	461a      	mov	r2, r3
 80095fc:	920a      	str	r2, [sp, #40]	; 0x28
 80095fe:	e00b      	b.n	8009618 <_dtoa_r+0x290>
 8009600:	2301      	movs	r3, #1
 8009602:	e7f3      	b.n	80095ec <_dtoa_r+0x264>
 8009604:	2300      	movs	r3, #0
 8009606:	9309      	str	r3, [sp, #36]	; 0x24
 8009608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800960a:	445b      	add	r3, fp
 800960c:	9301      	str	r3, [sp, #4]
 800960e:	3301      	adds	r3, #1
 8009610:	2b01      	cmp	r3, #1
 8009612:	9304      	str	r3, [sp, #16]
 8009614:	bfb8      	it	lt
 8009616:	2301      	movlt	r3, #1
 8009618:	69e0      	ldr	r0, [r4, #28]
 800961a:	2100      	movs	r1, #0
 800961c:	2204      	movs	r2, #4
 800961e:	f102 0614 	add.w	r6, r2, #20
 8009622:	429e      	cmp	r6, r3
 8009624:	d93d      	bls.n	80096a2 <_dtoa_r+0x31a>
 8009626:	6041      	str	r1, [r0, #4]
 8009628:	4620      	mov	r0, r4
 800962a:	f000 fd9f 	bl	800a16c <_Balloc>
 800962e:	9000      	str	r0, [sp, #0]
 8009630:	2800      	cmp	r0, #0
 8009632:	d139      	bne.n	80096a8 <_dtoa_r+0x320>
 8009634:	4b16      	ldr	r3, [pc, #88]	; (8009690 <_dtoa_r+0x308>)
 8009636:	4602      	mov	r2, r0
 8009638:	f240 11af 	movw	r1, #431	; 0x1af
 800963c:	e6bd      	b.n	80093ba <_dtoa_r+0x32>
 800963e:	2301      	movs	r3, #1
 8009640:	e7e1      	b.n	8009606 <_dtoa_r+0x27e>
 8009642:	2501      	movs	r5, #1
 8009644:	2300      	movs	r3, #0
 8009646:	9307      	str	r3, [sp, #28]
 8009648:	9509      	str	r5, [sp, #36]	; 0x24
 800964a:	f04f 33ff 	mov.w	r3, #4294967295
 800964e:	9301      	str	r3, [sp, #4]
 8009650:	9304      	str	r3, [sp, #16]
 8009652:	2200      	movs	r2, #0
 8009654:	2312      	movs	r3, #18
 8009656:	e7d1      	b.n	80095fc <_dtoa_r+0x274>
 8009658:	636f4361 	.word	0x636f4361
 800965c:	3fd287a7 	.word	0x3fd287a7
 8009660:	8b60c8b3 	.word	0x8b60c8b3
 8009664:	3fc68a28 	.word	0x3fc68a28
 8009668:	509f79fb 	.word	0x509f79fb
 800966c:	3fd34413 	.word	0x3fd34413
 8009670:	0800b119 	.word	0x0800b119
 8009674:	0800b130 	.word	0x0800b130
 8009678:	7ff00000 	.word	0x7ff00000
 800967c:	0800b115 	.word	0x0800b115
 8009680:	0800b10c 	.word	0x0800b10c
 8009684:	0800b0e9 	.word	0x0800b0e9
 8009688:	3ff80000 	.word	0x3ff80000
 800968c:	0800b220 	.word	0x0800b220
 8009690:	0800b188 	.word	0x0800b188
 8009694:	2301      	movs	r3, #1
 8009696:	9309      	str	r3, [sp, #36]	; 0x24
 8009698:	e7d7      	b.n	800964a <_dtoa_r+0x2c2>
 800969a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800969c:	9301      	str	r3, [sp, #4]
 800969e:	9304      	str	r3, [sp, #16]
 80096a0:	e7ba      	b.n	8009618 <_dtoa_r+0x290>
 80096a2:	3101      	adds	r1, #1
 80096a4:	0052      	lsls	r2, r2, #1
 80096a6:	e7ba      	b.n	800961e <_dtoa_r+0x296>
 80096a8:	69e3      	ldr	r3, [r4, #28]
 80096aa:	9a00      	ldr	r2, [sp, #0]
 80096ac:	601a      	str	r2, [r3, #0]
 80096ae:	9b04      	ldr	r3, [sp, #16]
 80096b0:	2b0e      	cmp	r3, #14
 80096b2:	f200 80a8 	bhi.w	8009806 <_dtoa_r+0x47e>
 80096b6:	2d00      	cmp	r5, #0
 80096b8:	f000 80a5 	beq.w	8009806 <_dtoa_r+0x47e>
 80096bc:	f1bb 0f00 	cmp.w	fp, #0
 80096c0:	dd38      	ble.n	8009734 <_dtoa_r+0x3ac>
 80096c2:	4bc0      	ldr	r3, [pc, #768]	; (80099c4 <_dtoa_r+0x63c>)
 80096c4:	f00b 020f 	and.w	r2, fp, #15
 80096c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80096d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80096d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80096d8:	d019      	beq.n	800970e <_dtoa_r+0x386>
 80096da:	4bbb      	ldr	r3, [pc, #748]	; (80099c8 <_dtoa_r+0x640>)
 80096dc:	ec51 0b18 	vmov	r0, r1, d8
 80096e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80096e4:	f7f7 f8b2 	bl	800084c <__aeabi_ddiv>
 80096e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096ec:	f008 080f 	and.w	r8, r8, #15
 80096f0:	2503      	movs	r5, #3
 80096f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80099c8 <_dtoa_r+0x640>
 80096f6:	f1b8 0f00 	cmp.w	r8, #0
 80096fa:	d10a      	bne.n	8009712 <_dtoa_r+0x38a>
 80096fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009700:	4632      	mov	r2, r6
 8009702:	463b      	mov	r3, r7
 8009704:	f7f7 f8a2 	bl	800084c <__aeabi_ddiv>
 8009708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800970c:	e02b      	b.n	8009766 <_dtoa_r+0x3de>
 800970e:	2502      	movs	r5, #2
 8009710:	e7ef      	b.n	80096f2 <_dtoa_r+0x36a>
 8009712:	f018 0f01 	tst.w	r8, #1
 8009716:	d008      	beq.n	800972a <_dtoa_r+0x3a2>
 8009718:	4630      	mov	r0, r6
 800971a:	4639      	mov	r1, r7
 800971c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009720:	f7f6 ff6a 	bl	80005f8 <__aeabi_dmul>
 8009724:	3501      	adds	r5, #1
 8009726:	4606      	mov	r6, r0
 8009728:	460f      	mov	r7, r1
 800972a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800972e:	f109 0908 	add.w	r9, r9, #8
 8009732:	e7e0      	b.n	80096f6 <_dtoa_r+0x36e>
 8009734:	f000 809f 	beq.w	8009876 <_dtoa_r+0x4ee>
 8009738:	f1cb 0600 	rsb	r6, fp, #0
 800973c:	4ba1      	ldr	r3, [pc, #644]	; (80099c4 <_dtoa_r+0x63c>)
 800973e:	4fa2      	ldr	r7, [pc, #648]	; (80099c8 <_dtoa_r+0x640>)
 8009740:	f006 020f 	and.w	r2, r6, #15
 8009744:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974c:	ec51 0b18 	vmov	r0, r1, d8
 8009750:	f7f6 ff52 	bl	80005f8 <__aeabi_dmul>
 8009754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009758:	1136      	asrs	r6, r6, #4
 800975a:	2300      	movs	r3, #0
 800975c:	2502      	movs	r5, #2
 800975e:	2e00      	cmp	r6, #0
 8009760:	d17e      	bne.n	8009860 <_dtoa_r+0x4d8>
 8009762:	2b00      	cmp	r3, #0
 8009764:	d1d0      	bne.n	8009708 <_dtoa_r+0x380>
 8009766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009768:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	f000 8084 	beq.w	800987a <_dtoa_r+0x4f2>
 8009772:	4b96      	ldr	r3, [pc, #600]	; (80099cc <_dtoa_r+0x644>)
 8009774:	2200      	movs	r2, #0
 8009776:	4640      	mov	r0, r8
 8009778:	4649      	mov	r1, r9
 800977a:	f7f7 f9af 	bl	8000adc <__aeabi_dcmplt>
 800977e:	2800      	cmp	r0, #0
 8009780:	d07b      	beq.n	800987a <_dtoa_r+0x4f2>
 8009782:	9b04      	ldr	r3, [sp, #16]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d078      	beq.n	800987a <_dtoa_r+0x4f2>
 8009788:	9b01      	ldr	r3, [sp, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	dd39      	ble.n	8009802 <_dtoa_r+0x47a>
 800978e:	4b90      	ldr	r3, [pc, #576]	; (80099d0 <_dtoa_r+0x648>)
 8009790:	2200      	movs	r2, #0
 8009792:	4640      	mov	r0, r8
 8009794:	4649      	mov	r1, r9
 8009796:	f7f6 ff2f 	bl	80005f8 <__aeabi_dmul>
 800979a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800979e:	9e01      	ldr	r6, [sp, #4]
 80097a0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80097a4:	3501      	adds	r5, #1
 80097a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80097aa:	4628      	mov	r0, r5
 80097ac:	f7f6 feba 	bl	8000524 <__aeabi_i2d>
 80097b0:	4642      	mov	r2, r8
 80097b2:	464b      	mov	r3, r9
 80097b4:	f7f6 ff20 	bl	80005f8 <__aeabi_dmul>
 80097b8:	4b86      	ldr	r3, [pc, #536]	; (80099d4 <_dtoa_r+0x64c>)
 80097ba:	2200      	movs	r2, #0
 80097bc:	f7f6 fd66 	bl	800028c <__adddf3>
 80097c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80097c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097c8:	9303      	str	r3, [sp, #12]
 80097ca:	2e00      	cmp	r6, #0
 80097cc:	d158      	bne.n	8009880 <_dtoa_r+0x4f8>
 80097ce:	4b82      	ldr	r3, [pc, #520]	; (80099d8 <_dtoa_r+0x650>)
 80097d0:	2200      	movs	r2, #0
 80097d2:	4640      	mov	r0, r8
 80097d4:	4649      	mov	r1, r9
 80097d6:	f7f6 fd57 	bl	8000288 <__aeabi_dsub>
 80097da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097de:	4680      	mov	r8, r0
 80097e0:	4689      	mov	r9, r1
 80097e2:	f7f7 f999 	bl	8000b18 <__aeabi_dcmpgt>
 80097e6:	2800      	cmp	r0, #0
 80097e8:	f040 8296 	bne.w	8009d18 <_dtoa_r+0x990>
 80097ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80097f0:	4640      	mov	r0, r8
 80097f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097f6:	4649      	mov	r1, r9
 80097f8:	f7f7 f970 	bl	8000adc <__aeabi_dcmplt>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	f040 8289 	bne.w	8009d14 <_dtoa_r+0x98c>
 8009802:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009806:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009808:	2b00      	cmp	r3, #0
 800980a:	f2c0 814e 	blt.w	8009aaa <_dtoa_r+0x722>
 800980e:	f1bb 0f0e 	cmp.w	fp, #14
 8009812:	f300 814a 	bgt.w	8009aaa <_dtoa_r+0x722>
 8009816:	4b6b      	ldr	r3, [pc, #428]	; (80099c4 <_dtoa_r+0x63c>)
 8009818:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800981c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009822:	2b00      	cmp	r3, #0
 8009824:	f280 80dc 	bge.w	80099e0 <_dtoa_r+0x658>
 8009828:	9b04      	ldr	r3, [sp, #16]
 800982a:	2b00      	cmp	r3, #0
 800982c:	f300 80d8 	bgt.w	80099e0 <_dtoa_r+0x658>
 8009830:	f040 826f 	bne.w	8009d12 <_dtoa_r+0x98a>
 8009834:	4b68      	ldr	r3, [pc, #416]	; (80099d8 <_dtoa_r+0x650>)
 8009836:	2200      	movs	r2, #0
 8009838:	4640      	mov	r0, r8
 800983a:	4649      	mov	r1, r9
 800983c:	f7f6 fedc 	bl	80005f8 <__aeabi_dmul>
 8009840:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009844:	f7f7 f95e 	bl	8000b04 <__aeabi_dcmpge>
 8009848:	9e04      	ldr	r6, [sp, #16]
 800984a:	4637      	mov	r7, r6
 800984c:	2800      	cmp	r0, #0
 800984e:	f040 8245 	bne.w	8009cdc <_dtoa_r+0x954>
 8009852:	9d00      	ldr	r5, [sp, #0]
 8009854:	2331      	movs	r3, #49	; 0x31
 8009856:	f805 3b01 	strb.w	r3, [r5], #1
 800985a:	f10b 0b01 	add.w	fp, fp, #1
 800985e:	e241      	b.n	8009ce4 <_dtoa_r+0x95c>
 8009860:	07f2      	lsls	r2, r6, #31
 8009862:	d505      	bpl.n	8009870 <_dtoa_r+0x4e8>
 8009864:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009868:	f7f6 fec6 	bl	80005f8 <__aeabi_dmul>
 800986c:	3501      	adds	r5, #1
 800986e:	2301      	movs	r3, #1
 8009870:	1076      	asrs	r6, r6, #1
 8009872:	3708      	adds	r7, #8
 8009874:	e773      	b.n	800975e <_dtoa_r+0x3d6>
 8009876:	2502      	movs	r5, #2
 8009878:	e775      	b.n	8009766 <_dtoa_r+0x3de>
 800987a:	9e04      	ldr	r6, [sp, #16]
 800987c:	465f      	mov	r7, fp
 800987e:	e792      	b.n	80097a6 <_dtoa_r+0x41e>
 8009880:	9900      	ldr	r1, [sp, #0]
 8009882:	4b50      	ldr	r3, [pc, #320]	; (80099c4 <_dtoa_r+0x63c>)
 8009884:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009888:	4431      	add	r1, r6
 800988a:	9102      	str	r1, [sp, #8]
 800988c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800988e:	eeb0 9a47 	vmov.f32	s18, s14
 8009892:	eef0 9a67 	vmov.f32	s19, s15
 8009896:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800989a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800989e:	2900      	cmp	r1, #0
 80098a0:	d044      	beq.n	800992c <_dtoa_r+0x5a4>
 80098a2:	494e      	ldr	r1, [pc, #312]	; (80099dc <_dtoa_r+0x654>)
 80098a4:	2000      	movs	r0, #0
 80098a6:	f7f6 ffd1 	bl	800084c <__aeabi_ddiv>
 80098aa:	ec53 2b19 	vmov	r2, r3, d9
 80098ae:	f7f6 fceb 	bl	8000288 <__aeabi_dsub>
 80098b2:	9d00      	ldr	r5, [sp, #0]
 80098b4:	ec41 0b19 	vmov	d9, r0, r1
 80098b8:	4649      	mov	r1, r9
 80098ba:	4640      	mov	r0, r8
 80098bc:	f7f7 f94c 	bl	8000b58 <__aeabi_d2iz>
 80098c0:	4606      	mov	r6, r0
 80098c2:	f7f6 fe2f 	bl	8000524 <__aeabi_i2d>
 80098c6:	4602      	mov	r2, r0
 80098c8:	460b      	mov	r3, r1
 80098ca:	4640      	mov	r0, r8
 80098cc:	4649      	mov	r1, r9
 80098ce:	f7f6 fcdb 	bl	8000288 <__aeabi_dsub>
 80098d2:	3630      	adds	r6, #48	; 0x30
 80098d4:	f805 6b01 	strb.w	r6, [r5], #1
 80098d8:	ec53 2b19 	vmov	r2, r3, d9
 80098dc:	4680      	mov	r8, r0
 80098de:	4689      	mov	r9, r1
 80098e0:	f7f7 f8fc 	bl	8000adc <__aeabi_dcmplt>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	d164      	bne.n	80099b2 <_dtoa_r+0x62a>
 80098e8:	4642      	mov	r2, r8
 80098ea:	464b      	mov	r3, r9
 80098ec:	4937      	ldr	r1, [pc, #220]	; (80099cc <_dtoa_r+0x644>)
 80098ee:	2000      	movs	r0, #0
 80098f0:	f7f6 fcca 	bl	8000288 <__aeabi_dsub>
 80098f4:	ec53 2b19 	vmov	r2, r3, d9
 80098f8:	f7f7 f8f0 	bl	8000adc <__aeabi_dcmplt>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	f040 80b6 	bne.w	8009a6e <_dtoa_r+0x6e6>
 8009902:	9b02      	ldr	r3, [sp, #8]
 8009904:	429d      	cmp	r5, r3
 8009906:	f43f af7c 	beq.w	8009802 <_dtoa_r+0x47a>
 800990a:	4b31      	ldr	r3, [pc, #196]	; (80099d0 <_dtoa_r+0x648>)
 800990c:	ec51 0b19 	vmov	r0, r1, d9
 8009910:	2200      	movs	r2, #0
 8009912:	f7f6 fe71 	bl	80005f8 <__aeabi_dmul>
 8009916:	4b2e      	ldr	r3, [pc, #184]	; (80099d0 <_dtoa_r+0x648>)
 8009918:	ec41 0b19 	vmov	d9, r0, r1
 800991c:	2200      	movs	r2, #0
 800991e:	4640      	mov	r0, r8
 8009920:	4649      	mov	r1, r9
 8009922:	f7f6 fe69 	bl	80005f8 <__aeabi_dmul>
 8009926:	4680      	mov	r8, r0
 8009928:	4689      	mov	r9, r1
 800992a:	e7c5      	b.n	80098b8 <_dtoa_r+0x530>
 800992c:	ec51 0b17 	vmov	r0, r1, d7
 8009930:	f7f6 fe62 	bl	80005f8 <__aeabi_dmul>
 8009934:	9b02      	ldr	r3, [sp, #8]
 8009936:	9d00      	ldr	r5, [sp, #0]
 8009938:	930f      	str	r3, [sp, #60]	; 0x3c
 800993a:	ec41 0b19 	vmov	d9, r0, r1
 800993e:	4649      	mov	r1, r9
 8009940:	4640      	mov	r0, r8
 8009942:	f7f7 f909 	bl	8000b58 <__aeabi_d2iz>
 8009946:	4606      	mov	r6, r0
 8009948:	f7f6 fdec 	bl	8000524 <__aeabi_i2d>
 800994c:	3630      	adds	r6, #48	; 0x30
 800994e:	4602      	mov	r2, r0
 8009950:	460b      	mov	r3, r1
 8009952:	4640      	mov	r0, r8
 8009954:	4649      	mov	r1, r9
 8009956:	f7f6 fc97 	bl	8000288 <__aeabi_dsub>
 800995a:	f805 6b01 	strb.w	r6, [r5], #1
 800995e:	9b02      	ldr	r3, [sp, #8]
 8009960:	429d      	cmp	r5, r3
 8009962:	4680      	mov	r8, r0
 8009964:	4689      	mov	r9, r1
 8009966:	f04f 0200 	mov.w	r2, #0
 800996a:	d124      	bne.n	80099b6 <_dtoa_r+0x62e>
 800996c:	4b1b      	ldr	r3, [pc, #108]	; (80099dc <_dtoa_r+0x654>)
 800996e:	ec51 0b19 	vmov	r0, r1, d9
 8009972:	f7f6 fc8b 	bl	800028c <__adddf3>
 8009976:	4602      	mov	r2, r0
 8009978:	460b      	mov	r3, r1
 800997a:	4640      	mov	r0, r8
 800997c:	4649      	mov	r1, r9
 800997e:	f7f7 f8cb 	bl	8000b18 <__aeabi_dcmpgt>
 8009982:	2800      	cmp	r0, #0
 8009984:	d173      	bne.n	8009a6e <_dtoa_r+0x6e6>
 8009986:	ec53 2b19 	vmov	r2, r3, d9
 800998a:	4914      	ldr	r1, [pc, #80]	; (80099dc <_dtoa_r+0x654>)
 800998c:	2000      	movs	r0, #0
 800998e:	f7f6 fc7b 	bl	8000288 <__aeabi_dsub>
 8009992:	4602      	mov	r2, r0
 8009994:	460b      	mov	r3, r1
 8009996:	4640      	mov	r0, r8
 8009998:	4649      	mov	r1, r9
 800999a:	f7f7 f89f 	bl	8000adc <__aeabi_dcmplt>
 800999e:	2800      	cmp	r0, #0
 80099a0:	f43f af2f 	beq.w	8009802 <_dtoa_r+0x47a>
 80099a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80099a6:	1e6b      	subs	r3, r5, #1
 80099a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80099aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80099ae:	2b30      	cmp	r3, #48	; 0x30
 80099b0:	d0f8      	beq.n	80099a4 <_dtoa_r+0x61c>
 80099b2:	46bb      	mov	fp, r7
 80099b4:	e04a      	b.n	8009a4c <_dtoa_r+0x6c4>
 80099b6:	4b06      	ldr	r3, [pc, #24]	; (80099d0 <_dtoa_r+0x648>)
 80099b8:	f7f6 fe1e 	bl	80005f8 <__aeabi_dmul>
 80099bc:	4680      	mov	r8, r0
 80099be:	4689      	mov	r9, r1
 80099c0:	e7bd      	b.n	800993e <_dtoa_r+0x5b6>
 80099c2:	bf00      	nop
 80099c4:	0800b220 	.word	0x0800b220
 80099c8:	0800b1f8 	.word	0x0800b1f8
 80099cc:	3ff00000 	.word	0x3ff00000
 80099d0:	40240000 	.word	0x40240000
 80099d4:	401c0000 	.word	0x401c0000
 80099d8:	40140000 	.word	0x40140000
 80099dc:	3fe00000 	.word	0x3fe00000
 80099e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80099e4:	9d00      	ldr	r5, [sp, #0]
 80099e6:	4642      	mov	r2, r8
 80099e8:	464b      	mov	r3, r9
 80099ea:	4630      	mov	r0, r6
 80099ec:	4639      	mov	r1, r7
 80099ee:	f7f6 ff2d 	bl	800084c <__aeabi_ddiv>
 80099f2:	f7f7 f8b1 	bl	8000b58 <__aeabi_d2iz>
 80099f6:	9001      	str	r0, [sp, #4]
 80099f8:	f7f6 fd94 	bl	8000524 <__aeabi_i2d>
 80099fc:	4642      	mov	r2, r8
 80099fe:	464b      	mov	r3, r9
 8009a00:	f7f6 fdfa 	bl	80005f8 <__aeabi_dmul>
 8009a04:	4602      	mov	r2, r0
 8009a06:	460b      	mov	r3, r1
 8009a08:	4630      	mov	r0, r6
 8009a0a:	4639      	mov	r1, r7
 8009a0c:	f7f6 fc3c 	bl	8000288 <__aeabi_dsub>
 8009a10:	9e01      	ldr	r6, [sp, #4]
 8009a12:	9f04      	ldr	r7, [sp, #16]
 8009a14:	3630      	adds	r6, #48	; 0x30
 8009a16:	f805 6b01 	strb.w	r6, [r5], #1
 8009a1a:	9e00      	ldr	r6, [sp, #0]
 8009a1c:	1bae      	subs	r6, r5, r6
 8009a1e:	42b7      	cmp	r7, r6
 8009a20:	4602      	mov	r2, r0
 8009a22:	460b      	mov	r3, r1
 8009a24:	d134      	bne.n	8009a90 <_dtoa_r+0x708>
 8009a26:	f7f6 fc31 	bl	800028c <__adddf3>
 8009a2a:	4642      	mov	r2, r8
 8009a2c:	464b      	mov	r3, r9
 8009a2e:	4606      	mov	r6, r0
 8009a30:	460f      	mov	r7, r1
 8009a32:	f7f7 f871 	bl	8000b18 <__aeabi_dcmpgt>
 8009a36:	b9c8      	cbnz	r0, 8009a6c <_dtoa_r+0x6e4>
 8009a38:	4642      	mov	r2, r8
 8009a3a:	464b      	mov	r3, r9
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	4639      	mov	r1, r7
 8009a40:	f7f7 f842 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a44:	b110      	cbz	r0, 8009a4c <_dtoa_r+0x6c4>
 8009a46:	9b01      	ldr	r3, [sp, #4]
 8009a48:	07db      	lsls	r3, r3, #31
 8009a4a:	d40f      	bmi.n	8009a6c <_dtoa_r+0x6e4>
 8009a4c:	4651      	mov	r1, sl
 8009a4e:	4620      	mov	r0, r4
 8009a50:	f000 fbcc 	bl	800a1ec <_Bfree>
 8009a54:	2300      	movs	r3, #0
 8009a56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a58:	702b      	strb	r3, [r5, #0]
 8009a5a:	f10b 0301 	add.w	r3, fp, #1
 8009a5e:	6013      	str	r3, [r2, #0]
 8009a60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f43f ace2 	beq.w	800942c <_dtoa_r+0xa4>
 8009a68:	601d      	str	r5, [r3, #0]
 8009a6a:	e4df      	b.n	800942c <_dtoa_r+0xa4>
 8009a6c:	465f      	mov	r7, fp
 8009a6e:	462b      	mov	r3, r5
 8009a70:	461d      	mov	r5, r3
 8009a72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a76:	2a39      	cmp	r2, #57	; 0x39
 8009a78:	d106      	bne.n	8009a88 <_dtoa_r+0x700>
 8009a7a:	9a00      	ldr	r2, [sp, #0]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d1f7      	bne.n	8009a70 <_dtoa_r+0x6e8>
 8009a80:	9900      	ldr	r1, [sp, #0]
 8009a82:	2230      	movs	r2, #48	; 0x30
 8009a84:	3701      	adds	r7, #1
 8009a86:	700a      	strb	r2, [r1, #0]
 8009a88:	781a      	ldrb	r2, [r3, #0]
 8009a8a:	3201      	adds	r2, #1
 8009a8c:	701a      	strb	r2, [r3, #0]
 8009a8e:	e790      	b.n	80099b2 <_dtoa_r+0x62a>
 8009a90:	4ba3      	ldr	r3, [pc, #652]	; (8009d20 <_dtoa_r+0x998>)
 8009a92:	2200      	movs	r2, #0
 8009a94:	f7f6 fdb0 	bl	80005f8 <__aeabi_dmul>
 8009a98:	2200      	movs	r2, #0
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	4606      	mov	r6, r0
 8009a9e:	460f      	mov	r7, r1
 8009aa0:	f7f7 f812 	bl	8000ac8 <__aeabi_dcmpeq>
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	d09e      	beq.n	80099e6 <_dtoa_r+0x65e>
 8009aa8:	e7d0      	b.n	8009a4c <_dtoa_r+0x6c4>
 8009aaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009aac:	2a00      	cmp	r2, #0
 8009aae:	f000 80ca 	beq.w	8009c46 <_dtoa_r+0x8be>
 8009ab2:	9a07      	ldr	r2, [sp, #28]
 8009ab4:	2a01      	cmp	r2, #1
 8009ab6:	f300 80ad 	bgt.w	8009c14 <_dtoa_r+0x88c>
 8009aba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009abc:	2a00      	cmp	r2, #0
 8009abe:	f000 80a5 	beq.w	8009c0c <_dtoa_r+0x884>
 8009ac2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009ac6:	9e08      	ldr	r6, [sp, #32]
 8009ac8:	9d05      	ldr	r5, [sp, #20]
 8009aca:	9a05      	ldr	r2, [sp, #20]
 8009acc:	441a      	add	r2, r3
 8009ace:	9205      	str	r2, [sp, #20]
 8009ad0:	9a06      	ldr	r2, [sp, #24]
 8009ad2:	2101      	movs	r1, #1
 8009ad4:	441a      	add	r2, r3
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	9206      	str	r2, [sp, #24]
 8009ada:	f000 fc3d 	bl	800a358 <__i2b>
 8009ade:	4607      	mov	r7, r0
 8009ae0:	b165      	cbz	r5, 8009afc <_dtoa_r+0x774>
 8009ae2:	9b06      	ldr	r3, [sp, #24]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	dd09      	ble.n	8009afc <_dtoa_r+0x774>
 8009ae8:	42ab      	cmp	r3, r5
 8009aea:	9a05      	ldr	r2, [sp, #20]
 8009aec:	bfa8      	it	ge
 8009aee:	462b      	movge	r3, r5
 8009af0:	1ad2      	subs	r2, r2, r3
 8009af2:	9205      	str	r2, [sp, #20]
 8009af4:	9a06      	ldr	r2, [sp, #24]
 8009af6:	1aed      	subs	r5, r5, r3
 8009af8:	1ad3      	subs	r3, r2, r3
 8009afa:	9306      	str	r3, [sp, #24]
 8009afc:	9b08      	ldr	r3, [sp, #32]
 8009afe:	b1f3      	cbz	r3, 8009b3e <_dtoa_r+0x7b6>
 8009b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f000 80a3 	beq.w	8009c4e <_dtoa_r+0x8c6>
 8009b08:	2e00      	cmp	r6, #0
 8009b0a:	dd10      	ble.n	8009b2e <_dtoa_r+0x7a6>
 8009b0c:	4639      	mov	r1, r7
 8009b0e:	4632      	mov	r2, r6
 8009b10:	4620      	mov	r0, r4
 8009b12:	f000 fce1 	bl	800a4d8 <__pow5mult>
 8009b16:	4652      	mov	r2, sl
 8009b18:	4601      	mov	r1, r0
 8009b1a:	4607      	mov	r7, r0
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	f000 fc31 	bl	800a384 <__multiply>
 8009b22:	4651      	mov	r1, sl
 8009b24:	4680      	mov	r8, r0
 8009b26:	4620      	mov	r0, r4
 8009b28:	f000 fb60 	bl	800a1ec <_Bfree>
 8009b2c:	46c2      	mov	sl, r8
 8009b2e:	9b08      	ldr	r3, [sp, #32]
 8009b30:	1b9a      	subs	r2, r3, r6
 8009b32:	d004      	beq.n	8009b3e <_dtoa_r+0x7b6>
 8009b34:	4651      	mov	r1, sl
 8009b36:	4620      	mov	r0, r4
 8009b38:	f000 fcce 	bl	800a4d8 <__pow5mult>
 8009b3c:	4682      	mov	sl, r0
 8009b3e:	2101      	movs	r1, #1
 8009b40:	4620      	mov	r0, r4
 8009b42:	f000 fc09 	bl	800a358 <__i2b>
 8009b46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	4606      	mov	r6, r0
 8009b4c:	f340 8081 	ble.w	8009c52 <_dtoa_r+0x8ca>
 8009b50:	461a      	mov	r2, r3
 8009b52:	4601      	mov	r1, r0
 8009b54:	4620      	mov	r0, r4
 8009b56:	f000 fcbf 	bl	800a4d8 <__pow5mult>
 8009b5a:	9b07      	ldr	r3, [sp, #28]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	4606      	mov	r6, r0
 8009b60:	dd7a      	ble.n	8009c58 <_dtoa_r+0x8d0>
 8009b62:	f04f 0800 	mov.w	r8, #0
 8009b66:	6933      	ldr	r3, [r6, #16]
 8009b68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009b6c:	6918      	ldr	r0, [r3, #16]
 8009b6e:	f000 fba5 	bl	800a2bc <__hi0bits>
 8009b72:	f1c0 0020 	rsb	r0, r0, #32
 8009b76:	9b06      	ldr	r3, [sp, #24]
 8009b78:	4418      	add	r0, r3
 8009b7a:	f010 001f 	ands.w	r0, r0, #31
 8009b7e:	f000 8094 	beq.w	8009caa <_dtoa_r+0x922>
 8009b82:	f1c0 0320 	rsb	r3, r0, #32
 8009b86:	2b04      	cmp	r3, #4
 8009b88:	f340 8085 	ble.w	8009c96 <_dtoa_r+0x90e>
 8009b8c:	9b05      	ldr	r3, [sp, #20]
 8009b8e:	f1c0 001c 	rsb	r0, r0, #28
 8009b92:	4403      	add	r3, r0
 8009b94:	9305      	str	r3, [sp, #20]
 8009b96:	9b06      	ldr	r3, [sp, #24]
 8009b98:	4403      	add	r3, r0
 8009b9a:	4405      	add	r5, r0
 8009b9c:	9306      	str	r3, [sp, #24]
 8009b9e:	9b05      	ldr	r3, [sp, #20]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	dd05      	ble.n	8009bb0 <_dtoa_r+0x828>
 8009ba4:	4651      	mov	r1, sl
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	4620      	mov	r0, r4
 8009baa:	f000 fcef 	bl	800a58c <__lshift>
 8009bae:	4682      	mov	sl, r0
 8009bb0:	9b06      	ldr	r3, [sp, #24]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	dd05      	ble.n	8009bc2 <_dtoa_r+0x83a>
 8009bb6:	4631      	mov	r1, r6
 8009bb8:	461a      	mov	r2, r3
 8009bba:	4620      	mov	r0, r4
 8009bbc:	f000 fce6 	bl	800a58c <__lshift>
 8009bc0:	4606      	mov	r6, r0
 8009bc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d072      	beq.n	8009cae <_dtoa_r+0x926>
 8009bc8:	4631      	mov	r1, r6
 8009bca:	4650      	mov	r0, sl
 8009bcc:	f000 fd4a 	bl	800a664 <__mcmp>
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	da6c      	bge.n	8009cae <_dtoa_r+0x926>
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	4651      	mov	r1, sl
 8009bd8:	220a      	movs	r2, #10
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f000 fb28 	bl	800a230 <__multadd>
 8009be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009be6:	4682      	mov	sl, r0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 81b0 	beq.w	8009f4e <_dtoa_r+0xbc6>
 8009bee:	2300      	movs	r3, #0
 8009bf0:	4639      	mov	r1, r7
 8009bf2:	220a      	movs	r2, #10
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	f000 fb1b 	bl	800a230 <__multadd>
 8009bfa:	9b01      	ldr	r3, [sp, #4]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	4607      	mov	r7, r0
 8009c00:	f300 8096 	bgt.w	8009d30 <_dtoa_r+0x9a8>
 8009c04:	9b07      	ldr	r3, [sp, #28]
 8009c06:	2b02      	cmp	r3, #2
 8009c08:	dc59      	bgt.n	8009cbe <_dtoa_r+0x936>
 8009c0a:	e091      	b.n	8009d30 <_dtoa_r+0x9a8>
 8009c0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009c12:	e758      	b.n	8009ac6 <_dtoa_r+0x73e>
 8009c14:	9b04      	ldr	r3, [sp, #16]
 8009c16:	1e5e      	subs	r6, r3, #1
 8009c18:	9b08      	ldr	r3, [sp, #32]
 8009c1a:	42b3      	cmp	r3, r6
 8009c1c:	bfbf      	itttt	lt
 8009c1e:	9b08      	ldrlt	r3, [sp, #32]
 8009c20:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009c22:	9608      	strlt	r6, [sp, #32]
 8009c24:	1af3      	sublt	r3, r6, r3
 8009c26:	bfb4      	ite	lt
 8009c28:	18d2      	addlt	r2, r2, r3
 8009c2a:	1b9e      	subge	r6, r3, r6
 8009c2c:	9b04      	ldr	r3, [sp, #16]
 8009c2e:	bfbc      	itt	lt
 8009c30:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009c32:	2600      	movlt	r6, #0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	bfb7      	itett	lt
 8009c38:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009c3c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009c40:	1a9d      	sublt	r5, r3, r2
 8009c42:	2300      	movlt	r3, #0
 8009c44:	e741      	b.n	8009aca <_dtoa_r+0x742>
 8009c46:	9e08      	ldr	r6, [sp, #32]
 8009c48:	9d05      	ldr	r5, [sp, #20]
 8009c4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009c4c:	e748      	b.n	8009ae0 <_dtoa_r+0x758>
 8009c4e:	9a08      	ldr	r2, [sp, #32]
 8009c50:	e770      	b.n	8009b34 <_dtoa_r+0x7ac>
 8009c52:	9b07      	ldr	r3, [sp, #28]
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	dc19      	bgt.n	8009c8c <_dtoa_r+0x904>
 8009c58:	9b02      	ldr	r3, [sp, #8]
 8009c5a:	b9bb      	cbnz	r3, 8009c8c <_dtoa_r+0x904>
 8009c5c:	9b03      	ldr	r3, [sp, #12]
 8009c5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c62:	b99b      	cbnz	r3, 8009c8c <_dtoa_r+0x904>
 8009c64:	9b03      	ldr	r3, [sp, #12]
 8009c66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c6a:	0d1b      	lsrs	r3, r3, #20
 8009c6c:	051b      	lsls	r3, r3, #20
 8009c6e:	b183      	cbz	r3, 8009c92 <_dtoa_r+0x90a>
 8009c70:	9b05      	ldr	r3, [sp, #20]
 8009c72:	3301      	adds	r3, #1
 8009c74:	9305      	str	r3, [sp, #20]
 8009c76:	9b06      	ldr	r3, [sp, #24]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	9306      	str	r3, [sp, #24]
 8009c7c:	f04f 0801 	mov.w	r8, #1
 8009c80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	f47f af6f 	bne.w	8009b66 <_dtoa_r+0x7de>
 8009c88:	2001      	movs	r0, #1
 8009c8a:	e774      	b.n	8009b76 <_dtoa_r+0x7ee>
 8009c8c:	f04f 0800 	mov.w	r8, #0
 8009c90:	e7f6      	b.n	8009c80 <_dtoa_r+0x8f8>
 8009c92:	4698      	mov	r8, r3
 8009c94:	e7f4      	b.n	8009c80 <_dtoa_r+0x8f8>
 8009c96:	d082      	beq.n	8009b9e <_dtoa_r+0x816>
 8009c98:	9a05      	ldr	r2, [sp, #20]
 8009c9a:	331c      	adds	r3, #28
 8009c9c:	441a      	add	r2, r3
 8009c9e:	9205      	str	r2, [sp, #20]
 8009ca0:	9a06      	ldr	r2, [sp, #24]
 8009ca2:	441a      	add	r2, r3
 8009ca4:	441d      	add	r5, r3
 8009ca6:	9206      	str	r2, [sp, #24]
 8009ca8:	e779      	b.n	8009b9e <_dtoa_r+0x816>
 8009caa:	4603      	mov	r3, r0
 8009cac:	e7f4      	b.n	8009c98 <_dtoa_r+0x910>
 8009cae:	9b04      	ldr	r3, [sp, #16]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	dc37      	bgt.n	8009d24 <_dtoa_r+0x99c>
 8009cb4:	9b07      	ldr	r3, [sp, #28]
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	dd34      	ble.n	8009d24 <_dtoa_r+0x99c>
 8009cba:	9b04      	ldr	r3, [sp, #16]
 8009cbc:	9301      	str	r3, [sp, #4]
 8009cbe:	9b01      	ldr	r3, [sp, #4]
 8009cc0:	b963      	cbnz	r3, 8009cdc <_dtoa_r+0x954>
 8009cc2:	4631      	mov	r1, r6
 8009cc4:	2205      	movs	r2, #5
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f000 fab2 	bl	800a230 <__multadd>
 8009ccc:	4601      	mov	r1, r0
 8009cce:	4606      	mov	r6, r0
 8009cd0:	4650      	mov	r0, sl
 8009cd2:	f000 fcc7 	bl	800a664 <__mcmp>
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	f73f adbb 	bgt.w	8009852 <_dtoa_r+0x4ca>
 8009cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cde:	9d00      	ldr	r5, [sp, #0]
 8009ce0:	ea6f 0b03 	mvn.w	fp, r3
 8009ce4:	f04f 0800 	mov.w	r8, #0
 8009ce8:	4631      	mov	r1, r6
 8009cea:	4620      	mov	r0, r4
 8009cec:	f000 fa7e 	bl	800a1ec <_Bfree>
 8009cf0:	2f00      	cmp	r7, #0
 8009cf2:	f43f aeab 	beq.w	8009a4c <_dtoa_r+0x6c4>
 8009cf6:	f1b8 0f00 	cmp.w	r8, #0
 8009cfa:	d005      	beq.n	8009d08 <_dtoa_r+0x980>
 8009cfc:	45b8      	cmp	r8, r7
 8009cfe:	d003      	beq.n	8009d08 <_dtoa_r+0x980>
 8009d00:	4641      	mov	r1, r8
 8009d02:	4620      	mov	r0, r4
 8009d04:	f000 fa72 	bl	800a1ec <_Bfree>
 8009d08:	4639      	mov	r1, r7
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f000 fa6e 	bl	800a1ec <_Bfree>
 8009d10:	e69c      	b.n	8009a4c <_dtoa_r+0x6c4>
 8009d12:	2600      	movs	r6, #0
 8009d14:	4637      	mov	r7, r6
 8009d16:	e7e1      	b.n	8009cdc <_dtoa_r+0x954>
 8009d18:	46bb      	mov	fp, r7
 8009d1a:	4637      	mov	r7, r6
 8009d1c:	e599      	b.n	8009852 <_dtoa_r+0x4ca>
 8009d1e:	bf00      	nop
 8009d20:	40240000 	.word	0x40240000
 8009d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	f000 80c8 	beq.w	8009ebc <_dtoa_r+0xb34>
 8009d2c:	9b04      	ldr	r3, [sp, #16]
 8009d2e:	9301      	str	r3, [sp, #4]
 8009d30:	2d00      	cmp	r5, #0
 8009d32:	dd05      	ble.n	8009d40 <_dtoa_r+0x9b8>
 8009d34:	4639      	mov	r1, r7
 8009d36:	462a      	mov	r2, r5
 8009d38:	4620      	mov	r0, r4
 8009d3a:	f000 fc27 	bl	800a58c <__lshift>
 8009d3e:	4607      	mov	r7, r0
 8009d40:	f1b8 0f00 	cmp.w	r8, #0
 8009d44:	d05b      	beq.n	8009dfe <_dtoa_r+0xa76>
 8009d46:	6879      	ldr	r1, [r7, #4]
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f000 fa0f 	bl	800a16c <_Balloc>
 8009d4e:	4605      	mov	r5, r0
 8009d50:	b928      	cbnz	r0, 8009d5e <_dtoa_r+0x9d6>
 8009d52:	4b83      	ldr	r3, [pc, #524]	; (8009f60 <_dtoa_r+0xbd8>)
 8009d54:	4602      	mov	r2, r0
 8009d56:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009d5a:	f7ff bb2e 	b.w	80093ba <_dtoa_r+0x32>
 8009d5e:	693a      	ldr	r2, [r7, #16]
 8009d60:	3202      	adds	r2, #2
 8009d62:	0092      	lsls	r2, r2, #2
 8009d64:	f107 010c 	add.w	r1, r7, #12
 8009d68:	300c      	adds	r0, #12
 8009d6a:	f7ff fa75 	bl	8009258 <memcpy>
 8009d6e:	2201      	movs	r2, #1
 8009d70:	4629      	mov	r1, r5
 8009d72:	4620      	mov	r0, r4
 8009d74:	f000 fc0a 	bl	800a58c <__lshift>
 8009d78:	9b00      	ldr	r3, [sp, #0]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	9304      	str	r3, [sp, #16]
 8009d7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d82:	4413      	add	r3, r2
 8009d84:	9308      	str	r3, [sp, #32]
 8009d86:	9b02      	ldr	r3, [sp, #8]
 8009d88:	f003 0301 	and.w	r3, r3, #1
 8009d8c:	46b8      	mov	r8, r7
 8009d8e:	9306      	str	r3, [sp, #24]
 8009d90:	4607      	mov	r7, r0
 8009d92:	9b04      	ldr	r3, [sp, #16]
 8009d94:	4631      	mov	r1, r6
 8009d96:	3b01      	subs	r3, #1
 8009d98:	4650      	mov	r0, sl
 8009d9a:	9301      	str	r3, [sp, #4]
 8009d9c:	f7ff fa6a 	bl	8009274 <quorem>
 8009da0:	4641      	mov	r1, r8
 8009da2:	9002      	str	r0, [sp, #8]
 8009da4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009da8:	4650      	mov	r0, sl
 8009daa:	f000 fc5b 	bl	800a664 <__mcmp>
 8009dae:	463a      	mov	r2, r7
 8009db0:	9005      	str	r0, [sp, #20]
 8009db2:	4631      	mov	r1, r6
 8009db4:	4620      	mov	r0, r4
 8009db6:	f000 fc71 	bl	800a69c <__mdiff>
 8009dba:	68c2      	ldr	r2, [r0, #12]
 8009dbc:	4605      	mov	r5, r0
 8009dbe:	bb02      	cbnz	r2, 8009e02 <_dtoa_r+0xa7a>
 8009dc0:	4601      	mov	r1, r0
 8009dc2:	4650      	mov	r0, sl
 8009dc4:	f000 fc4e 	bl	800a664 <__mcmp>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	4629      	mov	r1, r5
 8009dcc:	4620      	mov	r0, r4
 8009dce:	9209      	str	r2, [sp, #36]	; 0x24
 8009dd0:	f000 fa0c 	bl	800a1ec <_Bfree>
 8009dd4:	9b07      	ldr	r3, [sp, #28]
 8009dd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dd8:	9d04      	ldr	r5, [sp, #16]
 8009dda:	ea43 0102 	orr.w	r1, r3, r2
 8009dde:	9b06      	ldr	r3, [sp, #24]
 8009de0:	4319      	orrs	r1, r3
 8009de2:	d110      	bne.n	8009e06 <_dtoa_r+0xa7e>
 8009de4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009de8:	d029      	beq.n	8009e3e <_dtoa_r+0xab6>
 8009dea:	9b05      	ldr	r3, [sp, #20]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	dd02      	ble.n	8009df6 <_dtoa_r+0xa6e>
 8009df0:	9b02      	ldr	r3, [sp, #8]
 8009df2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009df6:	9b01      	ldr	r3, [sp, #4]
 8009df8:	f883 9000 	strb.w	r9, [r3]
 8009dfc:	e774      	b.n	8009ce8 <_dtoa_r+0x960>
 8009dfe:	4638      	mov	r0, r7
 8009e00:	e7ba      	b.n	8009d78 <_dtoa_r+0x9f0>
 8009e02:	2201      	movs	r2, #1
 8009e04:	e7e1      	b.n	8009dca <_dtoa_r+0xa42>
 8009e06:	9b05      	ldr	r3, [sp, #20]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	db04      	blt.n	8009e16 <_dtoa_r+0xa8e>
 8009e0c:	9907      	ldr	r1, [sp, #28]
 8009e0e:	430b      	orrs	r3, r1
 8009e10:	9906      	ldr	r1, [sp, #24]
 8009e12:	430b      	orrs	r3, r1
 8009e14:	d120      	bne.n	8009e58 <_dtoa_r+0xad0>
 8009e16:	2a00      	cmp	r2, #0
 8009e18:	dded      	ble.n	8009df6 <_dtoa_r+0xa6e>
 8009e1a:	4651      	mov	r1, sl
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	4620      	mov	r0, r4
 8009e20:	f000 fbb4 	bl	800a58c <__lshift>
 8009e24:	4631      	mov	r1, r6
 8009e26:	4682      	mov	sl, r0
 8009e28:	f000 fc1c 	bl	800a664 <__mcmp>
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	dc03      	bgt.n	8009e38 <_dtoa_r+0xab0>
 8009e30:	d1e1      	bne.n	8009df6 <_dtoa_r+0xa6e>
 8009e32:	f019 0f01 	tst.w	r9, #1
 8009e36:	d0de      	beq.n	8009df6 <_dtoa_r+0xa6e>
 8009e38:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009e3c:	d1d8      	bne.n	8009df0 <_dtoa_r+0xa68>
 8009e3e:	9a01      	ldr	r2, [sp, #4]
 8009e40:	2339      	movs	r3, #57	; 0x39
 8009e42:	7013      	strb	r3, [r2, #0]
 8009e44:	462b      	mov	r3, r5
 8009e46:	461d      	mov	r5, r3
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009e4e:	2a39      	cmp	r2, #57	; 0x39
 8009e50:	d06c      	beq.n	8009f2c <_dtoa_r+0xba4>
 8009e52:	3201      	adds	r2, #1
 8009e54:	701a      	strb	r2, [r3, #0]
 8009e56:	e747      	b.n	8009ce8 <_dtoa_r+0x960>
 8009e58:	2a00      	cmp	r2, #0
 8009e5a:	dd07      	ble.n	8009e6c <_dtoa_r+0xae4>
 8009e5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009e60:	d0ed      	beq.n	8009e3e <_dtoa_r+0xab6>
 8009e62:	9a01      	ldr	r2, [sp, #4]
 8009e64:	f109 0301 	add.w	r3, r9, #1
 8009e68:	7013      	strb	r3, [r2, #0]
 8009e6a:	e73d      	b.n	8009ce8 <_dtoa_r+0x960>
 8009e6c:	9b04      	ldr	r3, [sp, #16]
 8009e6e:	9a08      	ldr	r2, [sp, #32]
 8009e70:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d043      	beq.n	8009f00 <_dtoa_r+0xb78>
 8009e78:	4651      	mov	r1, sl
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	220a      	movs	r2, #10
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f000 f9d6 	bl	800a230 <__multadd>
 8009e84:	45b8      	cmp	r8, r7
 8009e86:	4682      	mov	sl, r0
 8009e88:	f04f 0300 	mov.w	r3, #0
 8009e8c:	f04f 020a 	mov.w	r2, #10
 8009e90:	4641      	mov	r1, r8
 8009e92:	4620      	mov	r0, r4
 8009e94:	d107      	bne.n	8009ea6 <_dtoa_r+0xb1e>
 8009e96:	f000 f9cb 	bl	800a230 <__multadd>
 8009e9a:	4680      	mov	r8, r0
 8009e9c:	4607      	mov	r7, r0
 8009e9e:	9b04      	ldr	r3, [sp, #16]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	9304      	str	r3, [sp, #16]
 8009ea4:	e775      	b.n	8009d92 <_dtoa_r+0xa0a>
 8009ea6:	f000 f9c3 	bl	800a230 <__multadd>
 8009eaa:	4639      	mov	r1, r7
 8009eac:	4680      	mov	r8, r0
 8009eae:	2300      	movs	r3, #0
 8009eb0:	220a      	movs	r2, #10
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f000 f9bc 	bl	800a230 <__multadd>
 8009eb8:	4607      	mov	r7, r0
 8009eba:	e7f0      	b.n	8009e9e <_dtoa_r+0xb16>
 8009ebc:	9b04      	ldr	r3, [sp, #16]
 8009ebe:	9301      	str	r3, [sp, #4]
 8009ec0:	9d00      	ldr	r5, [sp, #0]
 8009ec2:	4631      	mov	r1, r6
 8009ec4:	4650      	mov	r0, sl
 8009ec6:	f7ff f9d5 	bl	8009274 <quorem>
 8009eca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009ece:	9b00      	ldr	r3, [sp, #0]
 8009ed0:	f805 9b01 	strb.w	r9, [r5], #1
 8009ed4:	1aea      	subs	r2, r5, r3
 8009ed6:	9b01      	ldr	r3, [sp, #4]
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	dd07      	ble.n	8009eec <_dtoa_r+0xb64>
 8009edc:	4651      	mov	r1, sl
 8009ede:	2300      	movs	r3, #0
 8009ee0:	220a      	movs	r2, #10
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	f000 f9a4 	bl	800a230 <__multadd>
 8009ee8:	4682      	mov	sl, r0
 8009eea:	e7ea      	b.n	8009ec2 <_dtoa_r+0xb3a>
 8009eec:	9b01      	ldr	r3, [sp, #4]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	bfc8      	it	gt
 8009ef2:	461d      	movgt	r5, r3
 8009ef4:	9b00      	ldr	r3, [sp, #0]
 8009ef6:	bfd8      	it	le
 8009ef8:	2501      	movle	r5, #1
 8009efa:	441d      	add	r5, r3
 8009efc:	f04f 0800 	mov.w	r8, #0
 8009f00:	4651      	mov	r1, sl
 8009f02:	2201      	movs	r2, #1
 8009f04:	4620      	mov	r0, r4
 8009f06:	f000 fb41 	bl	800a58c <__lshift>
 8009f0a:	4631      	mov	r1, r6
 8009f0c:	4682      	mov	sl, r0
 8009f0e:	f000 fba9 	bl	800a664 <__mcmp>
 8009f12:	2800      	cmp	r0, #0
 8009f14:	dc96      	bgt.n	8009e44 <_dtoa_r+0xabc>
 8009f16:	d102      	bne.n	8009f1e <_dtoa_r+0xb96>
 8009f18:	f019 0f01 	tst.w	r9, #1
 8009f1c:	d192      	bne.n	8009e44 <_dtoa_r+0xabc>
 8009f1e:	462b      	mov	r3, r5
 8009f20:	461d      	mov	r5, r3
 8009f22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f26:	2a30      	cmp	r2, #48	; 0x30
 8009f28:	d0fa      	beq.n	8009f20 <_dtoa_r+0xb98>
 8009f2a:	e6dd      	b.n	8009ce8 <_dtoa_r+0x960>
 8009f2c:	9a00      	ldr	r2, [sp, #0]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d189      	bne.n	8009e46 <_dtoa_r+0xabe>
 8009f32:	f10b 0b01 	add.w	fp, fp, #1
 8009f36:	2331      	movs	r3, #49	; 0x31
 8009f38:	e796      	b.n	8009e68 <_dtoa_r+0xae0>
 8009f3a:	4b0a      	ldr	r3, [pc, #40]	; (8009f64 <_dtoa_r+0xbdc>)
 8009f3c:	f7ff ba99 	b.w	8009472 <_dtoa_r+0xea>
 8009f40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	f47f aa6d 	bne.w	8009422 <_dtoa_r+0x9a>
 8009f48:	4b07      	ldr	r3, [pc, #28]	; (8009f68 <_dtoa_r+0xbe0>)
 8009f4a:	f7ff ba92 	b.w	8009472 <_dtoa_r+0xea>
 8009f4e:	9b01      	ldr	r3, [sp, #4]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	dcb5      	bgt.n	8009ec0 <_dtoa_r+0xb38>
 8009f54:	9b07      	ldr	r3, [sp, #28]
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	f73f aeb1 	bgt.w	8009cbe <_dtoa_r+0x936>
 8009f5c:	e7b0      	b.n	8009ec0 <_dtoa_r+0xb38>
 8009f5e:	bf00      	nop
 8009f60:	0800b188 	.word	0x0800b188
 8009f64:	0800b0e8 	.word	0x0800b0e8
 8009f68:	0800b10c 	.word	0x0800b10c

08009f6c <_free_r>:
 8009f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f6e:	2900      	cmp	r1, #0
 8009f70:	d044      	beq.n	8009ffc <_free_r+0x90>
 8009f72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f76:	9001      	str	r0, [sp, #4]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f1a1 0404 	sub.w	r4, r1, #4
 8009f7e:	bfb8      	it	lt
 8009f80:	18e4      	addlt	r4, r4, r3
 8009f82:	f000 f8e7 	bl	800a154 <__malloc_lock>
 8009f86:	4a1e      	ldr	r2, [pc, #120]	; (800a000 <_free_r+0x94>)
 8009f88:	9801      	ldr	r0, [sp, #4]
 8009f8a:	6813      	ldr	r3, [r2, #0]
 8009f8c:	b933      	cbnz	r3, 8009f9c <_free_r+0x30>
 8009f8e:	6063      	str	r3, [r4, #4]
 8009f90:	6014      	str	r4, [r2, #0]
 8009f92:	b003      	add	sp, #12
 8009f94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f98:	f000 b8e2 	b.w	800a160 <__malloc_unlock>
 8009f9c:	42a3      	cmp	r3, r4
 8009f9e:	d908      	bls.n	8009fb2 <_free_r+0x46>
 8009fa0:	6825      	ldr	r5, [r4, #0]
 8009fa2:	1961      	adds	r1, r4, r5
 8009fa4:	428b      	cmp	r3, r1
 8009fa6:	bf01      	itttt	eq
 8009fa8:	6819      	ldreq	r1, [r3, #0]
 8009faa:	685b      	ldreq	r3, [r3, #4]
 8009fac:	1949      	addeq	r1, r1, r5
 8009fae:	6021      	streq	r1, [r4, #0]
 8009fb0:	e7ed      	b.n	8009f8e <_free_r+0x22>
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	b10b      	cbz	r3, 8009fbc <_free_r+0x50>
 8009fb8:	42a3      	cmp	r3, r4
 8009fba:	d9fa      	bls.n	8009fb2 <_free_r+0x46>
 8009fbc:	6811      	ldr	r1, [r2, #0]
 8009fbe:	1855      	adds	r5, r2, r1
 8009fc0:	42a5      	cmp	r5, r4
 8009fc2:	d10b      	bne.n	8009fdc <_free_r+0x70>
 8009fc4:	6824      	ldr	r4, [r4, #0]
 8009fc6:	4421      	add	r1, r4
 8009fc8:	1854      	adds	r4, r2, r1
 8009fca:	42a3      	cmp	r3, r4
 8009fcc:	6011      	str	r1, [r2, #0]
 8009fce:	d1e0      	bne.n	8009f92 <_free_r+0x26>
 8009fd0:	681c      	ldr	r4, [r3, #0]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	6053      	str	r3, [r2, #4]
 8009fd6:	440c      	add	r4, r1
 8009fd8:	6014      	str	r4, [r2, #0]
 8009fda:	e7da      	b.n	8009f92 <_free_r+0x26>
 8009fdc:	d902      	bls.n	8009fe4 <_free_r+0x78>
 8009fde:	230c      	movs	r3, #12
 8009fe0:	6003      	str	r3, [r0, #0]
 8009fe2:	e7d6      	b.n	8009f92 <_free_r+0x26>
 8009fe4:	6825      	ldr	r5, [r4, #0]
 8009fe6:	1961      	adds	r1, r4, r5
 8009fe8:	428b      	cmp	r3, r1
 8009fea:	bf04      	itt	eq
 8009fec:	6819      	ldreq	r1, [r3, #0]
 8009fee:	685b      	ldreq	r3, [r3, #4]
 8009ff0:	6063      	str	r3, [r4, #4]
 8009ff2:	bf04      	itt	eq
 8009ff4:	1949      	addeq	r1, r1, r5
 8009ff6:	6021      	streq	r1, [r4, #0]
 8009ff8:	6054      	str	r4, [r2, #4]
 8009ffa:	e7ca      	b.n	8009f92 <_free_r+0x26>
 8009ffc:	b003      	add	sp, #12
 8009ffe:	bd30      	pop	{r4, r5, pc}
 800a000:	20001e24 	.word	0x20001e24

0800a004 <malloc>:
 800a004:	4b02      	ldr	r3, [pc, #8]	; (800a010 <malloc+0xc>)
 800a006:	4601      	mov	r1, r0
 800a008:	6818      	ldr	r0, [r3, #0]
 800a00a:	f000 b823 	b.w	800a054 <_malloc_r>
 800a00e:	bf00      	nop
 800a010:	20000068 	.word	0x20000068

0800a014 <sbrk_aligned>:
 800a014:	b570      	push	{r4, r5, r6, lr}
 800a016:	4e0e      	ldr	r6, [pc, #56]	; (800a050 <sbrk_aligned+0x3c>)
 800a018:	460c      	mov	r4, r1
 800a01a:	6831      	ldr	r1, [r6, #0]
 800a01c:	4605      	mov	r5, r0
 800a01e:	b911      	cbnz	r1, 800a026 <sbrk_aligned+0x12>
 800a020:	f000 fcce 	bl	800a9c0 <_sbrk_r>
 800a024:	6030      	str	r0, [r6, #0]
 800a026:	4621      	mov	r1, r4
 800a028:	4628      	mov	r0, r5
 800a02a:	f000 fcc9 	bl	800a9c0 <_sbrk_r>
 800a02e:	1c43      	adds	r3, r0, #1
 800a030:	d00a      	beq.n	800a048 <sbrk_aligned+0x34>
 800a032:	1cc4      	adds	r4, r0, #3
 800a034:	f024 0403 	bic.w	r4, r4, #3
 800a038:	42a0      	cmp	r0, r4
 800a03a:	d007      	beq.n	800a04c <sbrk_aligned+0x38>
 800a03c:	1a21      	subs	r1, r4, r0
 800a03e:	4628      	mov	r0, r5
 800a040:	f000 fcbe 	bl	800a9c0 <_sbrk_r>
 800a044:	3001      	adds	r0, #1
 800a046:	d101      	bne.n	800a04c <sbrk_aligned+0x38>
 800a048:	f04f 34ff 	mov.w	r4, #4294967295
 800a04c:	4620      	mov	r0, r4
 800a04e:	bd70      	pop	{r4, r5, r6, pc}
 800a050:	20001e28 	.word	0x20001e28

0800a054 <_malloc_r>:
 800a054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a058:	1ccd      	adds	r5, r1, #3
 800a05a:	f025 0503 	bic.w	r5, r5, #3
 800a05e:	3508      	adds	r5, #8
 800a060:	2d0c      	cmp	r5, #12
 800a062:	bf38      	it	cc
 800a064:	250c      	movcc	r5, #12
 800a066:	2d00      	cmp	r5, #0
 800a068:	4607      	mov	r7, r0
 800a06a:	db01      	blt.n	800a070 <_malloc_r+0x1c>
 800a06c:	42a9      	cmp	r1, r5
 800a06e:	d905      	bls.n	800a07c <_malloc_r+0x28>
 800a070:	230c      	movs	r3, #12
 800a072:	603b      	str	r3, [r7, #0]
 800a074:	2600      	movs	r6, #0
 800a076:	4630      	mov	r0, r6
 800a078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a07c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a150 <_malloc_r+0xfc>
 800a080:	f000 f868 	bl	800a154 <__malloc_lock>
 800a084:	f8d8 3000 	ldr.w	r3, [r8]
 800a088:	461c      	mov	r4, r3
 800a08a:	bb5c      	cbnz	r4, 800a0e4 <_malloc_r+0x90>
 800a08c:	4629      	mov	r1, r5
 800a08e:	4638      	mov	r0, r7
 800a090:	f7ff ffc0 	bl	800a014 <sbrk_aligned>
 800a094:	1c43      	adds	r3, r0, #1
 800a096:	4604      	mov	r4, r0
 800a098:	d155      	bne.n	800a146 <_malloc_r+0xf2>
 800a09a:	f8d8 4000 	ldr.w	r4, [r8]
 800a09e:	4626      	mov	r6, r4
 800a0a0:	2e00      	cmp	r6, #0
 800a0a2:	d145      	bne.n	800a130 <_malloc_r+0xdc>
 800a0a4:	2c00      	cmp	r4, #0
 800a0a6:	d048      	beq.n	800a13a <_malloc_r+0xe6>
 800a0a8:	6823      	ldr	r3, [r4, #0]
 800a0aa:	4631      	mov	r1, r6
 800a0ac:	4638      	mov	r0, r7
 800a0ae:	eb04 0903 	add.w	r9, r4, r3
 800a0b2:	f000 fc85 	bl	800a9c0 <_sbrk_r>
 800a0b6:	4581      	cmp	r9, r0
 800a0b8:	d13f      	bne.n	800a13a <_malloc_r+0xe6>
 800a0ba:	6821      	ldr	r1, [r4, #0]
 800a0bc:	1a6d      	subs	r5, r5, r1
 800a0be:	4629      	mov	r1, r5
 800a0c0:	4638      	mov	r0, r7
 800a0c2:	f7ff ffa7 	bl	800a014 <sbrk_aligned>
 800a0c6:	3001      	adds	r0, #1
 800a0c8:	d037      	beq.n	800a13a <_malloc_r+0xe6>
 800a0ca:	6823      	ldr	r3, [r4, #0]
 800a0cc:	442b      	add	r3, r5
 800a0ce:	6023      	str	r3, [r4, #0]
 800a0d0:	f8d8 3000 	ldr.w	r3, [r8]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d038      	beq.n	800a14a <_malloc_r+0xf6>
 800a0d8:	685a      	ldr	r2, [r3, #4]
 800a0da:	42a2      	cmp	r2, r4
 800a0dc:	d12b      	bne.n	800a136 <_malloc_r+0xe2>
 800a0de:	2200      	movs	r2, #0
 800a0e0:	605a      	str	r2, [r3, #4]
 800a0e2:	e00f      	b.n	800a104 <_malloc_r+0xb0>
 800a0e4:	6822      	ldr	r2, [r4, #0]
 800a0e6:	1b52      	subs	r2, r2, r5
 800a0e8:	d41f      	bmi.n	800a12a <_malloc_r+0xd6>
 800a0ea:	2a0b      	cmp	r2, #11
 800a0ec:	d917      	bls.n	800a11e <_malloc_r+0xca>
 800a0ee:	1961      	adds	r1, r4, r5
 800a0f0:	42a3      	cmp	r3, r4
 800a0f2:	6025      	str	r5, [r4, #0]
 800a0f4:	bf18      	it	ne
 800a0f6:	6059      	strne	r1, [r3, #4]
 800a0f8:	6863      	ldr	r3, [r4, #4]
 800a0fa:	bf08      	it	eq
 800a0fc:	f8c8 1000 	streq.w	r1, [r8]
 800a100:	5162      	str	r2, [r4, r5]
 800a102:	604b      	str	r3, [r1, #4]
 800a104:	4638      	mov	r0, r7
 800a106:	f104 060b 	add.w	r6, r4, #11
 800a10a:	f000 f829 	bl	800a160 <__malloc_unlock>
 800a10e:	f026 0607 	bic.w	r6, r6, #7
 800a112:	1d23      	adds	r3, r4, #4
 800a114:	1af2      	subs	r2, r6, r3
 800a116:	d0ae      	beq.n	800a076 <_malloc_r+0x22>
 800a118:	1b9b      	subs	r3, r3, r6
 800a11a:	50a3      	str	r3, [r4, r2]
 800a11c:	e7ab      	b.n	800a076 <_malloc_r+0x22>
 800a11e:	42a3      	cmp	r3, r4
 800a120:	6862      	ldr	r2, [r4, #4]
 800a122:	d1dd      	bne.n	800a0e0 <_malloc_r+0x8c>
 800a124:	f8c8 2000 	str.w	r2, [r8]
 800a128:	e7ec      	b.n	800a104 <_malloc_r+0xb0>
 800a12a:	4623      	mov	r3, r4
 800a12c:	6864      	ldr	r4, [r4, #4]
 800a12e:	e7ac      	b.n	800a08a <_malloc_r+0x36>
 800a130:	4634      	mov	r4, r6
 800a132:	6876      	ldr	r6, [r6, #4]
 800a134:	e7b4      	b.n	800a0a0 <_malloc_r+0x4c>
 800a136:	4613      	mov	r3, r2
 800a138:	e7cc      	b.n	800a0d4 <_malloc_r+0x80>
 800a13a:	230c      	movs	r3, #12
 800a13c:	603b      	str	r3, [r7, #0]
 800a13e:	4638      	mov	r0, r7
 800a140:	f000 f80e 	bl	800a160 <__malloc_unlock>
 800a144:	e797      	b.n	800a076 <_malloc_r+0x22>
 800a146:	6025      	str	r5, [r4, #0]
 800a148:	e7dc      	b.n	800a104 <_malloc_r+0xb0>
 800a14a:	605b      	str	r3, [r3, #4]
 800a14c:	deff      	udf	#255	; 0xff
 800a14e:	bf00      	nop
 800a150:	20001e24 	.word	0x20001e24

0800a154 <__malloc_lock>:
 800a154:	4801      	ldr	r0, [pc, #4]	; (800a15c <__malloc_lock+0x8>)
 800a156:	f7ff b87d 	b.w	8009254 <__retarget_lock_acquire_recursive>
 800a15a:	bf00      	nop
 800a15c:	20001e20 	.word	0x20001e20

0800a160 <__malloc_unlock>:
 800a160:	4801      	ldr	r0, [pc, #4]	; (800a168 <__malloc_unlock+0x8>)
 800a162:	f7ff b878 	b.w	8009256 <__retarget_lock_release_recursive>
 800a166:	bf00      	nop
 800a168:	20001e20 	.word	0x20001e20

0800a16c <_Balloc>:
 800a16c:	b570      	push	{r4, r5, r6, lr}
 800a16e:	69c6      	ldr	r6, [r0, #28]
 800a170:	4604      	mov	r4, r0
 800a172:	460d      	mov	r5, r1
 800a174:	b976      	cbnz	r6, 800a194 <_Balloc+0x28>
 800a176:	2010      	movs	r0, #16
 800a178:	f7ff ff44 	bl	800a004 <malloc>
 800a17c:	4602      	mov	r2, r0
 800a17e:	61e0      	str	r0, [r4, #28]
 800a180:	b920      	cbnz	r0, 800a18c <_Balloc+0x20>
 800a182:	4b18      	ldr	r3, [pc, #96]	; (800a1e4 <_Balloc+0x78>)
 800a184:	4818      	ldr	r0, [pc, #96]	; (800a1e8 <_Balloc+0x7c>)
 800a186:	216b      	movs	r1, #107	; 0x6b
 800a188:	f000 fc2a 	bl	800a9e0 <__assert_func>
 800a18c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a190:	6006      	str	r6, [r0, #0]
 800a192:	60c6      	str	r6, [r0, #12]
 800a194:	69e6      	ldr	r6, [r4, #28]
 800a196:	68f3      	ldr	r3, [r6, #12]
 800a198:	b183      	cbz	r3, 800a1bc <_Balloc+0x50>
 800a19a:	69e3      	ldr	r3, [r4, #28]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1a2:	b9b8      	cbnz	r0, 800a1d4 <_Balloc+0x68>
 800a1a4:	2101      	movs	r1, #1
 800a1a6:	fa01 f605 	lsl.w	r6, r1, r5
 800a1aa:	1d72      	adds	r2, r6, #5
 800a1ac:	0092      	lsls	r2, r2, #2
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	f000 fc34 	bl	800aa1c <_calloc_r>
 800a1b4:	b160      	cbz	r0, 800a1d0 <_Balloc+0x64>
 800a1b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a1ba:	e00e      	b.n	800a1da <_Balloc+0x6e>
 800a1bc:	2221      	movs	r2, #33	; 0x21
 800a1be:	2104      	movs	r1, #4
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	f000 fc2b 	bl	800aa1c <_calloc_r>
 800a1c6:	69e3      	ldr	r3, [r4, #28]
 800a1c8:	60f0      	str	r0, [r6, #12]
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1e4      	bne.n	800a19a <_Balloc+0x2e>
 800a1d0:	2000      	movs	r0, #0
 800a1d2:	bd70      	pop	{r4, r5, r6, pc}
 800a1d4:	6802      	ldr	r2, [r0, #0]
 800a1d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1da:	2300      	movs	r3, #0
 800a1dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1e0:	e7f7      	b.n	800a1d2 <_Balloc+0x66>
 800a1e2:	bf00      	nop
 800a1e4:	0800b119 	.word	0x0800b119
 800a1e8:	0800b199 	.word	0x0800b199

0800a1ec <_Bfree>:
 800a1ec:	b570      	push	{r4, r5, r6, lr}
 800a1ee:	69c6      	ldr	r6, [r0, #28]
 800a1f0:	4605      	mov	r5, r0
 800a1f2:	460c      	mov	r4, r1
 800a1f4:	b976      	cbnz	r6, 800a214 <_Bfree+0x28>
 800a1f6:	2010      	movs	r0, #16
 800a1f8:	f7ff ff04 	bl	800a004 <malloc>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	61e8      	str	r0, [r5, #28]
 800a200:	b920      	cbnz	r0, 800a20c <_Bfree+0x20>
 800a202:	4b09      	ldr	r3, [pc, #36]	; (800a228 <_Bfree+0x3c>)
 800a204:	4809      	ldr	r0, [pc, #36]	; (800a22c <_Bfree+0x40>)
 800a206:	218f      	movs	r1, #143	; 0x8f
 800a208:	f000 fbea 	bl	800a9e0 <__assert_func>
 800a20c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a210:	6006      	str	r6, [r0, #0]
 800a212:	60c6      	str	r6, [r0, #12]
 800a214:	b13c      	cbz	r4, 800a226 <_Bfree+0x3a>
 800a216:	69eb      	ldr	r3, [r5, #28]
 800a218:	6862      	ldr	r2, [r4, #4]
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a220:	6021      	str	r1, [r4, #0]
 800a222:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a226:	bd70      	pop	{r4, r5, r6, pc}
 800a228:	0800b119 	.word	0x0800b119
 800a22c:	0800b199 	.word	0x0800b199

0800a230 <__multadd>:
 800a230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a234:	690d      	ldr	r5, [r1, #16]
 800a236:	4607      	mov	r7, r0
 800a238:	460c      	mov	r4, r1
 800a23a:	461e      	mov	r6, r3
 800a23c:	f101 0c14 	add.w	ip, r1, #20
 800a240:	2000      	movs	r0, #0
 800a242:	f8dc 3000 	ldr.w	r3, [ip]
 800a246:	b299      	uxth	r1, r3
 800a248:	fb02 6101 	mla	r1, r2, r1, r6
 800a24c:	0c1e      	lsrs	r6, r3, #16
 800a24e:	0c0b      	lsrs	r3, r1, #16
 800a250:	fb02 3306 	mla	r3, r2, r6, r3
 800a254:	b289      	uxth	r1, r1
 800a256:	3001      	adds	r0, #1
 800a258:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a25c:	4285      	cmp	r5, r0
 800a25e:	f84c 1b04 	str.w	r1, [ip], #4
 800a262:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a266:	dcec      	bgt.n	800a242 <__multadd+0x12>
 800a268:	b30e      	cbz	r6, 800a2ae <__multadd+0x7e>
 800a26a:	68a3      	ldr	r3, [r4, #8]
 800a26c:	42ab      	cmp	r3, r5
 800a26e:	dc19      	bgt.n	800a2a4 <__multadd+0x74>
 800a270:	6861      	ldr	r1, [r4, #4]
 800a272:	4638      	mov	r0, r7
 800a274:	3101      	adds	r1, #1
 800a276:	f7ff ff79 	bl	800a16c <_Balloc>
 800a27a:	4680      	mov	r8, r0
 800a27c:	b928      	cbnz	r0, 800a28a <__multadd+0x5a>
 800a27e:	4602      	mov	r2, r0
 800a280:	4b0c      	ldr	r3, [pc, #48]	; (800a2b4 <__multadd+0x84>)
 800a282:	480d      	ldr	r0, [pc, #52]	; (800a2b8 <__multadd+0x88>)
 800a284:	21ba      	movs	r1, #186	; 0xba
 800a286:	f000 fbab 	bl	800a9e0 <__assert_func>
 800a28a:	6922      	ldr	r2, [r4, #16]
 800a28c:	3202      	adds	r2, #2
 800a28e:	f104 010c 	add.w	r1, r4, #12
 800a292:	0092      	lsls	r2, r2, #2
 800a294:	300c      	adds	r0, #12
 800a296:	f7fe ffdf 	bl	8009258 <memcpy>
 800a29a:	4621      	mov	r1, r4
 800a29c:	4638      	mov	r0, r7
 800a29e:	f7ff ffa5 	bl	800a1ec <_Bfree>
 800a2a2:	4644      	mov	r4, r8
 800a2a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2a8:	3501      	adds	r5, #1
 800a2aa:	615e      	str	r6, [r3, #20]
 800a2ac:	6125      	str	r5, [r4, #16]
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2b4:	0800b188 	.word	0x0800b188
 800a2b8:	0800b199 	.word	0x0800b199

0800a2bc <__hi0bits>:
 800a2bc:	0c03      	lsrs	r3, r0, #16
 800a2be:	041b      	lsls	r3, r3, #16
 800a2c0:	b9d3      	cbnz	r3, 800a2f8 <__hi0bits+0x3c>
 800a2c2:	0400      	lsls	r0, r0, #16
 800a2c4:	2310      	movs	r3, #16
 800a2c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a2ca:	bf04      	itt	eq
 800a2cc:	0200      	lsleq	r0, r0, #8
 800a2ce:	3308      	addeq	r3, #8
 800a2d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a2d4:	bf04      	itt	eq
 800a2d6:	0100      	lsleq	r0, r0, #4
 800a2d8:	3304      	addeq	r3, #4
 800a2da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a2de:	bf04      	itt	eq
 800a2e0:	0080      	lsleq	r0, r0, #2
 800a2e2:	3302      	addeq	r3, #2
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	db05      	blt.n	800a2f4 <__hi0bits+0x38>
 800a2e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a2ec:	f103 0301 	add.w	r3, r3, #1
 800a2f0:	bf08      	it	eq
 800a2f2:	2320      	moveq	r3, #32
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	4770      	bx	lr
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	e7e4      	b.n	800a2c6 <__hi0bits+0xa>

0800a2fc <__lo0bits>:
 800a2fc:	6803      	ldr	r3, [r0, #0]
 800a2fe:	f013 0207 	ands.w	r2, r3, #7
 800a302:	d00c      	beq.n	800a31e <__lo0bits+0x22>
 800a304:	07d9      	lsls	r1, r3, #31
 800a306:	d422      	bmi.n	800a34e <__lo0bits+0x52>
 800a308:	079a      	lsls	r2, r3, #30
 800a30a:	bf49      	itett	mi
 800a30c:	085b      	lsrmi	r3, r3, #1
 800a30e:	089b      	lsrpl	r3, r3, #2
 800a310:	6003      	strmi	r3, [r0, #0]
 800a312:	2201      	movmi	r2, #1
 800a314:	bf5c      	itt	pl
 800a316:	6003      	strpl	r3, [r0, #0]
 800a318:	2202      	movpl	r2, #2
 800a31a:	4610      	mov	r0, r2
 800a31c:	4770      	bx	lr
 800a31e:	b299      	uxth	r1, r3
 800a320:	b909      	cbnz	r1, 800a326 <__lo0bits+0x2a>
 800a322:	0c1b      	lsrs	r3, r3, #16
 800a324:	2210      	movs	r2, #16
 800a326:	b2d9      	uxtb	r1, r3
 800a328:	b909      	cbnz	r1, 800a32e <__lo0bits+0x32>
 800a32a:	3208      	adds	r2, #8
 800a32c:	0a1b      	lsrs	r3, r3, #8
 800a32e:	0719      	lsls	r1, r3, #28
 800a330:	bf04      	itt	eq
 800a332:	091b      	lsreq	r3, r3, #4
 800a334:	3204      	addeq	r2, #4
 800a336:	0799      	lsls	r1, r3, #30
 800a338:	bf04      	itt	eq
 800a33a:	089b      	lsreq	r3, r3, #2
 800a33c:	3202      	addeq	r2, #2
 800a33e:	07d9      	lsls	r1, r3, #31
 800a340:	d403      	bmi.n	800a34a <__lo0bits+0x4e>
 800a342:	085b      	lsrs	r3, r3, #1
 800a344:	f102 0201 	add.w	r2, r2, #1
 800a348:	d003      	beq.n	800a352 <__lo0bits+0x56>
 800a34a:	6003      	str	r3, [r0, #0]
 800a34c:	e7e5      	b.n	800a31a <__lo0bits+0x1e>
 800a34e:	2200      	movs	r2, #0
 800a350:	e7e3      	b.n	800a31a <__lo0bits+0x1e>
 800a352:	2220      	movs	r2, #32
 800a354:	e7e1      	b.n	800a31a <__lo0bits+0x1e>
	...

0800a358 <__i2b>:
 800a358:	b510      	push	{r4, lr}
 800a35a:	460c      	mov	r4, r1
 800a35c:	2101      	movs	r1, #1
 800a35e:	f7ff ff05 	bl	800a16c <_Balloc>
 800a362:	4602      	mov	r2, r0
 800a364:	b928      	cbnz	r0, 800a372 <__i2b+0x1a>
 800a366:	4b05      	ldr	r3, [pc, #20]	; (800a37c <__i2b+0x24>)
 800a368:	4805      	ldr	r0, [pc, #20]	; (800a380 <__i2b+0x28>)
 800a36a:	f240 1145 	movw	r1, #325	; 0x145
 800a36e:	f000 fb37 	bl	800a9e0 <__assert_func>
 800a372:	2301      	movs	r3, #1
 800a374:	6144      	str	r4, [r0, #20]
 800a376:	6103      	str	r3, [r0, #16]
 800a378:	bd10      	pop	{r4, pc}
 800a37a:	bf00      	nop
 800a37c:	0800b188 	.word	0x0800b188
 800a380:	0800b199 	.word	0x0800b199

0800a384 <__multiply>:
 800a384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a388:	4691      	mov	r9, r2
 800a38a:	690a      	ldr	r2, [r1, #16]
 800a38c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a390:	429a      	cmp	r2, r3
 800a392:	bfb8      	it	lt
 800a394:	460b      	movlt	r3, r1
 800a396:	460c      	mov	r4, r1
 800a398:	bfbc      	itt	lt
 800a39a:	464c      	movlt	r4, r9
 800a39c:	4699      	movlt	r9, r3
 800a39e:	6927      	ldr	r7, [r4, #16]
 800a3a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a3a4:	68a3      	ldr	r3, [r4, #8]
 800a3a6:	6861      	ldr	r1, [r4, #4]
 800a3a8:	eb07 060a 	add.w	r6, r7, sl
 800a3ac:	42b3      	cmp	r3, r6
 800a3ae:	b085      	sub	sp, #20
 800a3b0:	bfb8      	it	lt
 800a3b2:	3101      	addlt	r1, #1
 800a3b4:	f7ff feda 	bl	800a16c <_Balloc>
 800a3b8:	b930      	cbnz	r0, 800a3c8 <__multiply+0x44>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	4b44      	ldr	r3, [pc, #272]	; (800a4d0 <__multiply+0x14c>)
 800a3be:	4845      	ldr	r0, [pc, #276]	; (800a4d4 <__multiply+0x150>)
 800a3c0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a3c4:	f000 fb0c 	bl	800a9e0 <__assert_func>
 800a3c8:	f100 0514 	add.w	r5, r0, #20
 800a3cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a3d0:	462b      	mov	r3, r5
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	4543      	cmp	r3, r8
 800a3d6:	d321      	bcc.n	800a41c <__multiply+0x98>
 800a3d8:	f104 0314 	add.w	r3, r4, #20
 800a3dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a3e0:	f109 0314 	add.w	r3, r9, #20
 800a3e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a3e8:	9202      	str	r2, [sp, #8]
 800a3ea:	1b3a      	subs	r2, r7, r4
 800a3ec:	3a15      	subs	r2, #21
 800a3ee:	f022 0203 	bic.w	r2, r2, #3
 800a3f2:	3204      	adds	r2, #4
 800a3f4:	f104 0115 	add.w	r1, r4, #21
 800a3f8:	428f      	cmp	r7, r1
 800a3fa:	bf38      	it	cc
 800a3fc:	2204      	movcc	r2, #4
 800a3fe:	9201      	str	r2, [sp, #4]
 800a400:	9a02      	ldr	r2, [sp, #8]
 800a402:	9303      	str	r3, [sp, #12]
 800a404:	429a      	cmp	r2, r3
 800a406:	d80c      	bhi.n	800a422 <__multiply+0x9e>
 800a408:	2e00      	cmp	r6, #0
 800a40a:	dd03      	ble.n	800a414 <__multiply+0x90>
 800a40c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a410:	2b00      	cmp	r3, #0
 800a412:	d05b      	beq.n	800a4cc <__multiply+0x148>
 800a414:	6106      	str	r6, [r0, #16]
 800a416:	b005      	add	sp, #20
 800a418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a41c:	f843 2b04 	str.w	r2, [r3], #4
 800a420:	e7d8      	b.n	800a3d4 <__multiply+0x50>
 800a422:	f8b3 a000 	ldrh.w	sl, [r3]
 800a426:	f1ba 0f00 	cmp.w	sl, #0
 800a42a:	d024      	beq.n	800a476 <__multiply+0xf2>
 800a42c:	f104 0e14 	add.w	lr, r4, #20
 800a430:	46a9      	mov	r9, r5
 800a432:	f04f 0c00 	mov.w	ip, #0
 800a436:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a43a:	f8d9 1000 	ldr.w	r1, [r9]
 800a43e:	fa1f fb82 	uxth.w	fp, r2
 800a442:	b289      	uxth	r1, r1
 800a444:	fb0a 110b 	mla	r1, sl, fp, r1
 800a448:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a44c:	f8d9 2000 	ldr.w	r2, [r9]
 800a450:	4461      	add	r1, ip
 800a452:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a456:	fb0a c20b 	mla	r2, sl, fp, ip
 800a45a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a45e:	b289      	uxth	r1, r1
 800a460:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a464:	4577      	cmp	r7, lr
 800a466:	f849 1b04 	str.w	r1, [r9], #4
 800a46a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a46e:	d8e2      	bhi.n	800a436 <__multiply+0xb2>
 800a470:	9a01      	ldr	r2, [sp, #4]
 800a472:	f845 c002 	str.w	ip, [r5, r2]
 800a476:	9a03      	ldr	r2, [sp, #12]
 800a478:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a47c:	3304      	adds	r3, #4
 800a47e:	f1b9 0f00 	cmp.w	r9, #0
 800a482:	d021      	beq.n	800a4c8 <__multiply+0x144>
 800a484:	6829      	ldr	r1, [r5, #0]
 800a486:	f104 0c14 	add.w	ip, r4, #20
 800a48a:	46ae      	mov	lr, r5
 800a48c:	f04f 0a00 	mov.w	sl, #0
 800a490:	f8bc b000 	ldrh.w	fp, [ip]
 800a494:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a498:	fb09 220b 	mla	r2, r9, fp, r2
 800a49c:	4452      	add	r2, sl
 800a49e:	b289      	uxth	r1, r1
 800a4a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a4a4:	f84e 1b04 	str.w	r1, [lr], #4
 800a4a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a4ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a4b0:	f8be 1000 	ldrh.w	r1, [lr]
 800a4b4:	fb09 110a 	mla	r1, r9, sl, r1
 800a4b8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a4bc:	4567      	cmp	r7, ip
 800a4be:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a4c2:	d8e5      	bhi.n	800a490 <__multiply+0x10c>
 800a4c4:	9a01      	ldr	r2, [sp, #4]
 800a4c6:	50a9      	str	r1, [r5, r2]
 800a4c8:	3504      	adds	r5, #4
 800a4ca:	e799      	b.n	800a400 <__multiply+0x7c>
 800a4cc:	3e01      	subs	r6, #1
 800a4ce:	e79b      	b.n	800a408 <__multiply+0x84>
 800a4d0:	0800b188 	.word	0x0800b188
 800a4d4:	0800b199 	.word	0x0800b199

0800a4d8 <__pow5mult>:
 800a4d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4dc:	4615      	mov	r5, r2
 800a4de:	f012 0203 	ands.w	r2, r2, #3
 800a4e2:	4606      	mov	r6, r0
 800a4e4:	460f      	mov	r7, r1
 800a4e6:	d007      	beq.n	800a4f8 <__pow5mult+0x20>
 800a4e8:	4c25      	ldr	r4, [pc, #148]	; (800a580 <__pow5mult+0xa8>)
 800a4ea:	3a01      	subs	r2, #1
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4f2:	f7ff fe9d 	bl	800a230 <__multadd>
 800a4f6:	4607      	mov	r7, r0
 800a4f8:	10ad      	asrs	r5, r5, #2
 800a4fa:	d03d      	beq.n	800a578 <__pow5mult+0xa0>
 800a4fc:	69f4      	ldr	r4, [r6, #28]
 800a4fe:	b97c      	cbnz	r4, 800a520 <__pow5mult+0x48>
 800a500:	2010      	movs	r0, #16
 800a502:	f7ff fd7f 	bl	800a004 <malloc>
 800a506:	4602      	mov	r2, r0
 800a508:	61f0      	str	r0, [r6, #28]
 800a50a:	b928      	cbnz	r0, 800a518 <__pow5mult+0x40>
 800a50c:	4b1d      	ldr	r3, [pc, #116]	; (800a584 <__pow5mult+0xac>)
 800a50e:	481e      	ldr	r0, [pc, #120]	; (800a588 <__pow5mult+0xb0>)
 800a510:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a514:	f000 fa64 	bl	800a9e0 <__assert_func>
 800a518:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a51c:	6004      	str	r4, [r0, #0]
 800a51e:	60c4      	str	r4, [r0, #12]
 800a520:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a524:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a528:	b94c      	cbnz	r4, 800a53e <__pow5mult+0x66>
 800a52a:	f240 2171 	movw	r1, #625	; 0x271
 800a52e:	4630      	mov	r0, r6
 800a530:	f7ff ff12 	bl	800a358 <__i2b>
 800a534:	2300      	movs	r3, #0
 800a536:	f8c8 0008 	str.w	r0, [r8, #8]
 800a53a:	4604      	mov	r4, r0
 800a53c:	6003      	str	r3, [r0, #0]
 800a53e:	f04f 0900 	mov.w	r9, #0
 800a542:	07eb      	lsls	r3, r5, #31
 800a544:	d50a      	bpl.n	800a55c <__pow5mult+0x84>
 800a546:	4639      	mov	r1, r7
 800a548:	4622      	mov	r2, r4
 800a54a:	4630      	mov	r0, r6
 800a54c:	f7ff ff1a 	bl	800a384 <__multiply>
 800a550:	4639      	mov	r1, r7
 800a552:	4680      	mov	r8, r0
 800a554:	4630      	mov	r0, r6
 800a556:	f7ff fe49 	bl	800a1ec <_Bfree>
 800a55a:	4647      	mov	r7, r8
 800a55c:	106d      	asrs	r5, r5, #1
 800a55e:	d00b      	beq.n	800a578 <__pow5mult+0xa0>
 800a560:	6820      	ldr	r0, [r4, #0]
 800a562:	b938      	cbnz	r0, 800a574 <__pow5mult+0x9c>
 800a564:	4622      	mov	r2, r4
 800a566:	4621      	mov	r1, r4
 800a568:	4630      	mov	r0, r6
 800a56a:	f7ff ff0b 	bl	800a384 <__multiply>
 800a56e:	6020      	str	r0, [r4, #0]
 800a570:	f8c0 9000 	str.w	r9, [r0]
 800a574:	4604      	mov	r4, r0
 800a576:	e7e4      	b.n	800a542 <__pow5mult+0x6a>
 800a578:	4638      	mov	r0, r7
 800a57a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a57e:	bf00      	nop
 800a580:	0800b2e8 	.word	0x0800b2e8
 800a584:	0800b119 	.word	0x0800b119
 800a588:	0800b199 	.word	0x0800b199

0800a58c <__lshift>:
 800a58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a590:	460c      	mov	r4, r1
 800a592:	6849      	ldr	r1, [r1, #4]
 800a594:	6923      	ldr	r3, [r4, #16]
 800a596:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a59a:	68a3      	ldr	r3, [r4, #8]
 800a59c:	4607      	mov	r7, r0
 800a59e:	4691      	mov	r9, r2
 800a5a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5a4:	f108 0601 	add.w	r6, r8, #1
 800a5a8:	42b3      	cmp	r3, r6
 800a5aa:	db0b      	blt.n	800a5c4 <__lshift+0x38>
 800a5ac:	4638      	mov	r0, r7
 800a5ae:	f7ff fddd 	bl	800a16c <_Balloc>
 800a5b2:	4605      	mov	r5, r0
 800a5b4:	b948      	cbnz	r0, 800a5ca <__lshift+0x3e>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	4b28      	ldr	r3, [pc, #160]	; (800a65c <__lshift+0xd0>)
 800a5ba:	4829      	ldr	r0, [pc, #164]	; (800a660 <__lshift+0xd4>)
 800a5bc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a5c0:	f000 fa0e 	bl	800a9e0 <__assert_func>
 800a5c4:	3101      	adds	r1, #1
 800a5c6:	005b      	lsls	r3, r3, #1
 800a5c8:	e7ee      	b.n	800a5a8 <__lshift+0x1c>
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	f100 0114 	add.w	r1, r0, #20
 800a5d0:	f100 0210 	add.w	r2, r0, #16
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	4553      	cmp	r3, sl
 800a5d8:	db33      	blt.n	800a642 <__lshift+0xb6>
 800a5da:	6920      	ldr	r0, [r4, #16]
 800a5dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5e0:	f104 0314 	add.w	r3, r4, #20
 800a5e4:	f019 091f 	ands.w	r9, r9, #31
 800a5e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a5f0:	d02b      	beq.n	800a64a <__lshift+0xbe>
 800a5f2:	f1c9 0e20 	rsb	lr, r9, #32
 800a5f6:	468a      	mov	sl, r1
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	6818      	ldr	r0, [r3, #0]
 800a5fc:	fa00 f009 	lsl.w	r0, r0, r9
 800a600:	4310      	orrs	r0, r2
 800a602:	f84a 0b04 	str.w	r0, [sl], #4
 800a606:	f853 2b04 	ldr.w	r2, [r3], #4
 800a60a:	459c      	cmp	ip, r3
 800a60c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a610:	d8f3      	bhi.n	800a5fa <__lshift+0x6e>
 800a612:	ebac 0304 	sub.w	r3, ip, r4
 800a616:	3b15      	subs	r3, #21
 800a618:	f023 0303 	bic.w	r3, r3, #3
 800a61c:	3304      	adds	r3, #4
 800a61e:	f104 0015 	add.w	r0, r4, #21
 800a622:	4584      	cmp	ip, r0
 800a624:	bf38      	it	cc
 800a626:	2304      	movcc	r3, #4
 800a628:	50ca      	str	r2, [r1, r3]
 800a62a:	b10a      	cbz	r2, 800a630 <__lshift+0xa4>
 800a62c:	f108 0602 	add.w	r6, r8, #2
 800a630:	3e01      	subs	r6, #1
 800a632:	4638      	mov	r0, r7
 800a634:	612e      	str	r6, [r5, #16]
 800a636:	4621      	mov	r1, r4
 800a638:	f7ff fdd8 	bl	800a1ec <_Bfree>
 800a63c:	4628      	mov	r0, r5
 800a63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a642:	f842 0f04 	str.w	r0, [r2, #4]!
 800a646:	3301      	adds	r3, #1
 800a648:	e7c5      	b.n	800a5d6 <__lshift+0x4a>
 800a64a:	3904      	subs	r1, #4
 800a64c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a650:	f841 2f04 	str.w	r2, [r1, #4]!
 800a654:	459c      	cmp	ip, r3
 800a656:	d8f9      	bhi.n	800a64c <__lshift+0xc0>
 800a658:	e7ea      	b.n	800a630 <__lshift+0xa4>
 800a65a:	bf00      	nop
 800a65c:	0800b188 	.word	0x0800b188
 800a660:	0800b199 	.word	0x0800b199

0800a664 <__mcmp>:
 800a664:	b530      	push	{r4, r5, lr}
 800a666:	6902      	ldr	r2, [r0, #16]
 800a668:	690c      	ldr	r4, [r1, #16]
 800a66a:	1b12      	subs	r2, r2, r4
 800a66c:	d10e      	bne.n	800a68c <__mcmp+0x28>
 800a66e:	f100 0314 	add.w	r3, r0, #20
 800a672:	3114      	adds	r1, #20
 800a674:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a678:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a67c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a680:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a684:	42a5      	cmp	r5, r4
 800a686:	d003      	beq.n	800a690 <__mcmp+0x2c>
 800a688:	d305      	bcc.n	800a696 <__mcmp+0x32>
 800a68a:	2201      	movs	r2, #1
 800a68c:	4610      	mov	r0, r2
 800a68e:	bd30      	pop	{r4, r5, pc}
 800a690:	4283      	cmp	r3, r0
 800a692:	d3f3      	bcc.n	800a67c <__mcmp+0x18>
 800a694:	e7fa      	b.n	800a68c <__mcmp+0x28>
 800a696:	f04f 32ff 	mov.w	r2, #4294967295
 800a69a:	e7f7      	b.n	800a68c <__mcmp+0x28>

0800a69c <__mdiff>:
 800a69c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a0:	460c      	mov	r4, r1
 800a6a2:	4606      	mov	r6, r0
 800a6a4:	4611      	mov	r1, r2
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	4690      	mov	r8, r2
 800a6aa:	f7ff ffdb 	bl	800a664 <__mcmp>
 800a6ae:	1e05      	subs	r5, r0, #0
 800a6b0:	d110      	bne.n	800a6d4 <__mdiff+0x38>
 800a6b2:	4629      	mov	r1, r5
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	f7ff fd59 	bl	800a16c <_Balloc>
 800a6ba:	b930      	cbnz	r0, 800a6ca <__mdiff+0x2e>
 800a6bc:	4b3a      	ldr	r3, [pc, #232]	; (800a7a8 <__mdiff+0x10c>)
 800a6be:	4602      	mov	r2, r0
 800a6c0:	f240 2137 	movw	r1, #567	; 0x237
 800a6c4:	4839      	ldr	r0, [pc, #228]	; (800a7ac <__mdiff+0x110>)
 800a6c6:	f000 f98b 	bl	800a9e0 <__assert_func>
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d4:	bfa4      	itt	ge
 800a6d6:	4643      	movge	r3, r8
 800a6d8:	46a0      	movge	r8, r4
 800a6da:	4630      	mov	r0, r6
 800a6dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a6e0:	bfa6      	itte	ge
 800a6e2:	461c      	movge	r4, r3
 800a6e4:	2500      	movge	r5, #0
 800a6e6:	2501      	movlt	r5, #1
 800a6e8:	f7ff fd40 	bl	800a16c <_Balloc>
 800a6ec:	b920      	cbnz	r0, 800a6f8 <__mdiff+0x5c>
 800a6ee:	4b2e      	ldr	r3, [pc, #184]	; (800a7a8 <__mdiff+0x10c>)
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	f240 2145 	movw	r1, #581	; 0x245
 800a6f6:	e7e5      	b.n	800a6c4 <__mdiff+0x28>
 800a6f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a6fc:	6926      	ldr	r6, [r4, #16]
 800a6fe:	60c5      	str	r5, [r0, #12]
 800a700:	f104 0914 	add.w	r9, r4, #20
 800a704:	f108 0514 	add.w	r5, r8, #20
 800a708:	f100 0e14 	add.w	lr, r0, #20
 800a70c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a710:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a714:	f108 0210 	add.w	r2, r8, #16
 800a718:	46f2      	mov	sl, lr
 800a71a:	2100      	movs	r1, #0
 800a71c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a720:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a724:	fa11 f88b 	uxtah	r8, r1, fp
 800a728:	b299      	uxth	r1, r3
 800a72a:	0c1b      	lsrs	r3, r3, #16
 800a72c:	eba8 0801 	sub.w	r8, r8, r1
 800a730:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a734:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a738:	fa1f f888 	uxth.w	r8, r8
 800a73c:	1419      	asrs	r1, r3, #16
 800a73e:	454e      	cmp	r6, r9
 800a740:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a744:	f84a 3b04 	str.w	r3, [sl], #4
 800a748:	d8e8      	bhi.n	800a71c <__mdiff+0x80>
 800a74a:	1b33      	subs	r3, r6, r4
 800a74c:	3b15      	subs	r3, #21
 800a74e:	f023 0303 	bic.w	r3, r3, #3
 800a752:	3304      	adds	r3, #4
 800a754:	3415      	adds	r4, #21
 800a756:	42a6      	cmp	r6, r4
 800a758:	bf38      	it	cc
 800a75a:	2304      	movcc	r3, #4
 800a75c:	441d      	add	r5, r3
 800a75e:	4473      	add	r3, lr
 800a760:	469e      	mov	lr, r3
 800a762:	462e      	mov	r6, r5
 800a764:	4566      	cmp	r6, ip
 800a766:	d30e      	bcc.n	800a786 <__mdiff+0xea>
 800a768:	f10c 0203 	add.w	r2, ip, #3
 800a76c:	1b52      	subs	r2, r2, r5
 800a76e:	f022 0203 	bic.w	r2, r2, #3
 800a772:	3d03      	subs	r5, #3
 800a774:	45ac      	cmp	ip, r5
 800a776:	bf38      	it	cc
 800a778:	2200      	movcc	r2, #0
 800a77a:	4413      	add	r3, r2
 800a77c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a780:	b17a      	cbz	r2, 800a7a2 <__mdiff+0x106>
 800a782:	6107      	str	r7, [r0, #16]
 800a784:	e7a4      	b.n	800a6d0 <__mdiff+0x34>
 800a786:	f856 8b04 	ldr.w	r8, [r6], #4
 800a78a:	fa11 f288 	uxtah	r2, r1, r8
 800a78e:	1414      	asrs	r4, r2, #16
 800a790:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a794:	b292      	uxth	r2, r2
 800a796:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a79a:	f84e 2b04 	str.w	r2, [lr], #4
 800a79e:	1421      	asrs	r1, r4, #16
 800a7a0:	e7e0      	b.n	800a764 <__mdiff+0xc8>
 800a7a2:	3f01      	subs	r7, #1
 800a7a4:	e7ea      	b.n	800a77c <__mdiff+0xe0>
 800a7a6:	bf00      	nop
 800a7a8:	0800b188 	.word	0x0800b188
 800a7ac:	0800b199 	.word	0x0800b199

0800a7b0 <__d2b>:
 800a7b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7b4:	460f      	mov	r7, r1
 800a7b6:	2101      	movs	r1, #1
 800a7b8:	ec59 8b10 	vmov	r8, r9, d0
 800a7bc:	4616      	mov	r6, r2
 800a7be:	f7ff fcd5 	bl	800a16c <_Balloc>
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	b930      	cbnz	r0, 800a7d4 <__d2b+0x24>
 800a7c6:	4602      	mov	r2, r0
 800a7c8:	4b24      	ldr	r3, [pc, #144]	; (800a85c <__d2b+0xac>)
 800a7ca:	4825      	ldr	r0, [pc, #148]	; (800a860 <__d2b+0xb0>)
 800a7cc:	f240 310f 	movw	r1, #783	; 0x30f
 800a7d0:	f000 f906 	bl	800a9e0 <__assert_func>
 800a7d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a7d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7dc:	bb2d      	cbnz	r5, 800a82a <__d2b+0x7a>
 800a7de:	9301      	str	r3, [sp, #4]
 800a7e0:	f1b8 0300 	subs.w	r3, r8, #0
 800a7e4:	d026      	beq.n	800a834 <__d2b+0x84>
 800a7e6:	4668      	mov	r0, sp
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	f7ff fd87 	bl	800a2fc <__lo0bits>
 800a7ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a7f2:	b1e8      	cbz	r0, 800a830 <__d2b+0x80>
 800a7f4:	f1c0 0320 	rsb	r3, r0, #32
 800a7f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a7fc:	430b      	orrs	r3, r1
 800a7fe:	40c2      	lsrs	r2, r0
 800a800:	6163      	str	r3, [r4, #20]
 800a802:	9201      	str	r2, [sp, #4]
 800a804:	9b01      	ldr	r3, [sp, #4]
 800a806:	61a3      	str	r3, [r4, #24]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	bf14      	ite	ne
 800a80c:	2202      	movne	r2, #2
 800a80e:	2201      	moveq	r2, #1
 800a810:	6122      	str	r2, [r4, #16]
 800a812:	b1bd      	cbz	r5, 800a844 <__d2b+0x94>
 800a814:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a818:	4405      	add	r5, r0
 800a81a:	603d      	str	r5, [r7, #0]
 800a81c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a820:	6030      	str	r0, [r6, #0]
 800a822:	4620      	mov	r0, r4
 800a824:	b003      	add	sp, #12
 800a826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a82a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a82e:	e7d6      	b.n	800a7de <__d2b+0x2e>
 800a830:	6161      	str	r1, [r4, #20]
 800a832:	e7e7      	b.n	800a804 <__d2b+0x54>
 800a834:	a801      	add	r0, sp, #4
 800a836:	f7ff fd61 	bl	800a2fc <__lo0bits>
 800a83a:	9b01      	ldr	r3, [sp, #4]
 800a83c:	6163      	str	r3, [r4, #20]
 800a83e:	3020      	adds	r0, #32
 800a840:	2201      	movs	r2, #1
 800a842:	e7e5      	b.n	800a810 <__d2b+0x60>
 800a844:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a848:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a84c:	6038      	str	r0, [r7, #0]
 800a84e:	6918      	ldr	r0, [r3, #16]
 800a850:	f7ff fd34 	bl	800a2bc <__hi0bits>
 800a854:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a858:	e7e2      	b.n	800a820 <__d2b+0x70>
 800a85a:	bf00      	nop
 800a85c:	0800b188 	.word	0x0800b188
 800a860:	0800b199 	.word	0x0800b199

0800a864 <__sflush_r>:
 800a864:	898a      	ldrh	r2, [r1, #12]
 800a866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a86a:	4605      	mov	r5, r0
 800a86c:	0710      	lsls	r0, r2, #28
 800a86e:	460c      	mov	r4, r1
 800a870:	d458      	bmi.n	800a924 <__sflush_r+0xc0>
 800a872:	684b      	ldr	r3, [r1, #4]
 800a874:	2b00      	cmp	r3, #0
 800a876:	dc05      	bgt.n	800a884 <__sflush_r+0x20>
 800a878:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	dc02      	bgt.n	800a884 <__sflush_r+0x20>
 800a87e:	2000      	movs	r0, #0
 800a880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a884:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a886:	2e00      	cmp	r6, #0
 800a888:	d0f9      	beq.n	800a87e <__sflush_r+0x1a>
 800a88a:	2300      	movs	r3, #0
 800a88c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a890:	682f      	ldr	r7, [r5, #0]
 800a892:	6a21      	ldr	r1, [r4, #32]
 800a894:	602b      	str	r3, [r5, #0]
 800a896:	d032      	beq.n	800a8fe <__sflush_r+0x9a>
 800a898:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a89a:	89a3      	ldrh	r3, [r4, #12]
 800a89c:	075a      	lsls	r2, r3, #29
 800a89e:	d505      	bpl.n	800a8ac <__sflush_r+0x48>
 800a8a0:	6863      	ldr	r3, [r4, #4]
 800a8a2:	1ac0      	subs	r0, r0, r3
 800a8a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8a6:	b10b      	cbz	r3, 800a8ac <__sflush_r+0x48>
 800a8a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a8aa:	1ac0      	subs	r0, r0, r3
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8b2:	6a21      	ldr	r1, [r4, #32]
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	47b0      	blx	r6
 800a8b8:	1c43      	adds	r3, r0, #1
 800a8ba:	89a3      	ldrh	r3, [r4, #12]
 800a8bc:	d106      	bne.n	800a8cc <__sflush_r+0x68>
 800a8be:	6829      	ldr	r1, [r5, #0]
 800a8c0:	291d      	cmp	r1, #29
 800a8c2:	d82b      	bhi.n	800a91c <__sflush_r+0xb8>
 800a8c4:	4a29      	ldr	r2, [pc, #164]	; (800a96c <__sflush_r+0x108>)
 800a8c6:	410a      	asrs	r2, r1
 800a8c8:	07d6      	lsls	r6, r2, #31
 800a8ca:	d427      	bmi.n	800a91c <__sflush_r+0xb8>
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	6062      	str	r2, [r4, #4]
 800a8d0:	04d9      	lsls	r1, r3, #19
 800a8d2:	6922      	ldr	r2, [r4, #16]
 800a8d4:	6022      	str	r2, [r4, #0]
 800a8d6:	d504      	bpl.n	800a8e2 <__sflush_r+0x7e>
 800a8d8:	1c42      	adds	r2, r0, #1
 800a8da:	d101      	bne.n	800a8e0 <__sflush_r+0x7c>
 800a8dc:	682b      	ldr	r3, [r5, #0]
 800a8de:	b903      	cbnz	r3, 800a8e2 <__sflush_r+0x7e>
 800a8e0:	6560      	str	r0, [r4, #84]	; 0x54
 800a8e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8e4:	602f      	str	r7, [r5, #0]
 800a8e6:	2900      	cmp	r1, #0
 800a8e8:	d0c9      	beq.n	800a87e <__sflush_r+0x1a>
 800a8ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8ee:	4299      	cmp	r1, r3
 800a8f0:	d002      	beq.n	800a8f8 <__sflush_r+0x94>
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	f7ff fb3a 	bl	8009f6c <_free_r>
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	6360      	str	r0, [r4, #52]	; 0x34
 800a8fc:	e7c0      	b.n	800a880 <__sflush_r+0x1c>
 800a8fe:	2301      	movs	r3, #1
 800a900:	4628      	mov	r0, r5
 800a902:	47b0      	blx	r6
 800a904:	1c41      	adds	r1, r0, #1
 800a906:	d1c8      	bne.n	800a89a <__sflush_r+0x36>
 800a908:	682b      	ldr	r3, [r5, #0]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d0c5      	beq.n	800a89a <__sflush_r+0x36>
 800a90e:	2b1d      	cmp	r3, #29
 800a910:	d001      	beq.n	800a916 <__sflush_r+0xb2>
 800a912:	2b16      	cmp	r3, #22
 800a914:	d101      	bne.n	800a91a <__sflush_r+0xb6>
 800a916:	602f      	str	r7, [r5, #0]
 800a918:	e7b1      	b.n	800a87e <__sflush_r+0x1a>
 800a91a:	89a3      	ldrh	r3, [r4, #12]
 800a91c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a920:	81a3      	strh	r3, [r4, #12]
 800a922:	e7ad      	b.n	800a880 <__sflush_r+0x1c>
 800a924:	690f      	ldr	r7, [r1, #16]
 800a926:	2f00      	cmp	r7, #0
 800a928:	d0a9      	beq.n	800a87e <__sflush_r+0x1a>
 800a92a:	0793      	lsls	r3, r2, #30
 800a92c:	680e      	ldr	r6, [r1, #0]
 800a92e:	bf08      	it	eq
 800a930:	694b      	ldreq	r3, [r1, #20]
 800a932:	600f      	str	r7, [r1, #0]
 800a934:	bf18      	it	ne
 800a936:	2300      	movne	r3, #0
 800a938:	eba6 0807 	sub.w	r8, r6, r7
 800a93c:	608b      	str	r3, [r1, #8]
 800a93e:	f1b8 0f00 	cmp.w	r8, #0
 800a942:	dd9c      	ble.n	800a87e <__sflush_r+0x1a>
 800a944:	6a21      	ldr	r1, [r4, #32]
 800a946:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a948:	4643      	mov	r3, r8
 800a94a:	463a      	mov	r2, r7
 800a94c:	4628      	mov	r0, r5
 800a94e:	47b0      	blx	r6
 800a950:	2800      	cmp	r0, #0
 800a952:	dc06      	bgt.n	800a962 <__sflush_r+0xfe>
 800a954:	89a3      	ldrh	r3, [r4, #12]
 800a956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a95a:	81a3      	strh	r3, [r4, #12]
 800a95c:	f04f 30ff 	mov.w	r0, #4294967295
 800a960:	e78e      	b.n	800a880 <__sflush_r+0x1c>
 800a962:	4407      	add	r7, r0
 800a964:	eba8 0800 	sub.w	r8, r8, r0
 800a968:	e7e9      	b.n	800a93e <__sflush_r+0xda>
 800a96a:	bf00      	nop
 800a96c:	dfbffffe 	.word	0xdfbffffe

0800a970 <_fflush_r>:
 800a970:	b538      	push	{r3, r4, r5, lr}
 800a972:	690b      	ldr	r3, [r1, #16]
 800a974:	4605      	mov	r5, r0
 800a976:	460c      	mov	r4, r1
 800a978:	b913      	cbnz	r3, 800a980 <_fflush_r+0x10>
 800a97a:	2500      	movs	r5, #0
 800a97c:	4628      	mov	r0, r5
 800a97e:	bd38      	pop	{r3, r4, r5, pc}
 800a980:	b118      	cbz	r0, 800a98a <_fflush_r+0x1a>
 800a982:	6a03      	ldr	r3, [r0, #32]
 800a984:	b90b      	cbnz	r3, 800a98a <_fflush_r+0x1a>
 800a986:	f7fe fb19 	bl	8008fbc <__sinit>
 800a98a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d0f3      	beq.n	800a97a <_fflush_r+0xa>
 800a992:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a994:	07d0      	lsls	r0, r2, #31
 800a996:	d404      	bmi.n	800a9a2 <_fflush_r+0x32>
 800a998:	0599      	lsls	r1, r3, #22
 800a99a:	d402      	bmi.n	800a9a2 <_fflush_r+0x32>
 800a99c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a99e:	f7fe fc59 	bl	8009254 <__retarget_lock_acquire_recursive>
 800a9a2:	4628      	mov	r0, r5
 800a9a4:	4621      	mov	r1, r4
 800a9a6:	f7ff ff5d 	bl	800a864 <__sflush_r>
 800a9aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9ac:	07da      	lsls	r2, r3, #31
 800a9ae:	4605      	mov	r5, r0
 800a9b0:	d4e4      	bmi.n	800a97c <_fflush_r+0xc>
 800a9b2:	89a3      	ldrh	r3, [r4, #12]
 800a9b4:	059b      	lsls	r3, r3, #22
 800a9b6:	d4e1      	bmi.n	800a97c <_fflush_r+0xc>
 800a9b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9ba:	f7fe fc4c 	bl	8009256 <__retarget_lock_release_recursive>
 800a9be:	e7dd      	b.n	800a97c <_fflush_r+0xc>

0800a9c0 <_sbrk_r>:
 800a9c0:	b538      	push	{r3, r4, r5, lr}
 800a9c2:	4d06      	ldr	r5, [pc, #24]	; (800a9dc <_sbrk_r+0x1c>)
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	4604      	mov	r4, r0
 800a9c8:	4608      	mov	r0, r1
 800a9ca:	602b      	str	r3, [r5, #0]
 800a9cc:	f7f6 fe62 	bl	8001694 <_sbrk>
 800a9d0:	1c43      	adds	r3, r0, #1
 800a9d2:	d102      	bne.n	800a9da <_sbrk_r+0x1a>
 800a9d4:	682b      	ldr	r3, [r5, #0]
 800a9d6:	b103      	cbz	r3, 800a9da <_sbrk_r+0x1a>
 800a9d8:	6023      	str	r3, [r4, #0]
 800a9da:	bd38      	pop	{r3, r4, r5, pc}
 800a9dc:	20001e1c 	.word	0x20001e1c

0800a9e0 <__assert_func>:
 800a9e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9e2:	4614      	mov	r4, r2
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	4b09      	ldr	r3, [pc, #36]	; (800aa0c <__assert_func+0x2c>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4605      	mov	r5, r0
 800a9ec:	68d8      	ldr	r0, [r3, #12]
 800a9ee:	b14c      	cbz	r4, 800aa04 <__assert_func+0x24>
 800a9f0:	4b07      	ldr	r3, [pc, #28]	; (800aa10 <__assert_func+0x30>)
 800a9f2:	9100      	str	r1, [sp, #0]
 800a9f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9f8:	4906      	ldr	r1, [pc, #24]	; (800aa14 <__assert_func+0x34>)
 800a9fa:	462b      	mov	r3, r5
 800a9fc:	f000 f844 	bl	800aa88 <fiprintf>
 800aa00:	f000 f854 	bl	800aaac <abort>
 800aa04:	4b04      	ldr	r3, [pc, #16]	; (800aa18 <__assert_func+0x38>)
 800aa06:	461c      	mov	r4, r3
 800aa08:	e7f3      	b.n	800a9f2 <__assert_func+0x12>
 800aa0a:	bf00      	nop
 800aa0c:	20000068 	.word	0x20000068
 800aa10:	0800b2fe 	.word	0x0800b2fe
 800aa14:	0800b30b 	.word	0x0800b30b
 800aa18:	0800b339 	.word	0x0800b339

0800aa1c <_calloc_r>:
 800aa1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa1e:	fba1 2402 	umull	r2, r4, r1, r2
 800aa22:	b94c      	cbnz	r4, 800aa38 <_calloc_r+0x1c>
 800aa24:	4611      	mov	r1, r2
 800aa26:	9201      	str	r2, [sp, #4]
 800aa28:	f7ff fb14 	bl	800a054 <_malloc_r>
 800aa2c:	9a01      	ldr	r2, [sp, #4]
 800aa2e:	4605      	mov	r5, r0
 800aa30:	b930      	cbnz	r0, 800aa40 <_calloc_r+0x24>
 800aa32:	4628      	mov	r0, r5
 800aa34:	b003      	add	sp, #12
 800aa36:	bd30      	pop	{r4, r5, pc}
 800aa38:	220c      	movs	r2, #12
 800aa3a:	6002      	str	r2, [r0, #0]
 800aa3c:	2500      	movs	r5, #0
 800aa3e:	e7f8      	b.n	800aa32 <_calloc_r+0x16>
 800aa40:	4621      	mov	r1, r4
 800aa42:	f7fe fb34 	bl	80090ae <memset>
 800aa46:	e7f4      	b.n	800aa32 <_calloc_r+0x16>

0800aa48 <__ascii_mbtowc>:
 800aa48:	b082      	sub	sp, #8
 800aa4a:	b901      	cbnz	r1, 800aa4e <__ascii_mbtowc+0x6>
 800aa4c:	a901      	add	r1, sp, #4
 800aa4e:	b142      	cbz	r2, 800aa62 <__ascii_mbtowc+0x1a>
 800aa50:	b14b      	cbz	r3, 800aa66 <__ascii_mbtowc+0x1e>
 800aa52:	7813      	ldrb	r3, [r2, #0]
 800aa54:	600b      	str	r3, [r1, #0]
 800aa56:	7812      	ldrb	r2, [r2, #0]
 800aa58:	1e10      	subs	r0, r2, #0
 800aa5a:	bf18      	it	ne
 800aa5c:	2001      	movne	r0, #1
 800aa5e:	b002      	add	sp, #8
 800aa60:	4770      	bx	lr
 800aa62:	4610      	mov	r0, r2
 800aa64:	e7fb      	b.n	800aa5e <__ascii_mbtowc+0x16>
 800aa66:	f06f 0001 	mvn.w	r0, #1
 800aa6a:	e7f8      	b.n	800aa5e <__ascii_mbtowc+0x16>

0800aa6c <__ascii_wctomb>:
 800aa6c:	b149      	cbz	r1, 800aa82 <__ascii_wctomb+0x16>
 800aa6e:	2aff      	cmp	r2, #255	; 0xff
 800aa70:	bf85      	ittet	hi
 800aa72:	238a      	movhi	r3, #138	; 0x8a
 800aa74:	6003      	strhi	r3, [r0, #0]
 800aa76:	700a      	strbls	r2, [r1, #0]
 800aa78:	f04f 30ff 	movhi.w	r0, #4294967295
 800aa7c:	bf98      	it	ls
 800aa7e:	2001      	movls	r0, #1
 800aa80:	4770      	bx	lr
 800aa82:	4608      	mov	r0, r1
 800aa84:	4770      	bx	lr
	...

0800aa88 <fiprintf>:
 800aa88:	b40e      	push	{r1, r2, r3}
 800aa8a:	b503      	push	{r0, r1, lr}
 800aa8c:	4601      	mov	r1, r0
 800aa8e:	ab03      	add	r3, sp, #12
 800aa90:	4805      	ldr	r0, [pc, #20]	; (800aaa8 <fiprintf+0x20>)
 800aa92:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa96:	6800      	ldr	r0, [r0, #0]
 800aa98:	9301      	str	r3, [sp, #4]
 800aa9a:	f000 f837 	bl	800ab0c <_vfiprintf_r>
 800aa9e:	b002      	add	sp, #8
 800aaa0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aaa4:	b003      	add	sp, #12
 800aaa6:	4770      	bx	lr
 800aaa8:	20000068 	.word	0x20000068

0800aaac <abort>:
 800aaac:	b508      	push	{r3, lr}
 800aaae:	2006      	movs	r0, #6
 800aab0:	f000 fa04 	bl	800aebc <raise>
 800aab4:	2001      	movs	r0, #1
 800aab6:	f7f6 fd75 	bl	80015a4 <_exit>

0800aaba <__sfputc_r>:
 800aaba:	6893      	ldr	r3, [r2, #8]
 800aabc:	3b01      	subs	r3, #1
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	b410      	push	{r4}
 800aac2:	6093      	str	r3, [r2, #8]
 800aac4:	da08      	bge.n	800aad8 <__sfputc_r+0x1e>
 800aac6:	6994      	ldr	r4, [r2, #24]
 800aac8:	42a3      	cmp	r3, r4
 800aaca:	db01      	blt.n	800aad0 <__sfputc_r+0x16>
 800aacc:	290a      	cmp	r1, #10
 800aace:	d103      	bne.n	800aad8 <__sfputc_r+0x1e>
 800aad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aad4:	f000 b934 	b.w	800ad40 <__swbuf_r>
 800aad8:	6813      	ldr	r3, [r2, #0]
 800aada:	1c58      	adds	r0, r3, #1
 800aadc:	6010      	str	r0, [r2, #0]
 800aade:	7019      	strb	r1, [r3, #0]
 800aae0:	4608      	mov	r0, r1
 800aae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <__sfputs_r>:
 800aae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaea:	4606      	mov	r6, r0
 800aaec:	460f      	mov	r7, r1
 800aaee:	4614      	mov	r4, r2
 800aaf0:	18d5      	adds	r5, r2, r3
 800aaf2:	42ac      	cmp	r4, r5
 800aaf4:	d101      	bne.n	800aafa <__sfputs_r+0x12>
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	e007      	b.n	800ab0a <__sfputs_r+0x22>
 800aafa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aafe:	463a      	mov	r2, r7
 800ab00:	4630      	mov	r0, r6
 800ab02:	f7ff ffda 	bl	800aaba <__sfputc_r>
 800ab06:	1c43      	adds	r3, r0, #1
 800ab08:	d1f3      	bne.n	800aaf2 <__sfputs_r+0xa>
 800ab0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab0c <_vfiprintf_r>:
 800ab0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab10:	460d      	mov	r5, r1
 800ab12:	b09d      	sub	sp, #116	; 0x74
 800ab14:	4614      	mov	r4, r2
 800ab16:	4698      	mov	r8, r3
 800ab18:	4606      	mov	r6, r0
 800ab1a:	b118      	cbz	r0, 800ab24 <_vfiprintf_r+0x18>
 800ab1c:	6a03      	ldr	r3, [r0, #32]
 800ab1e:	b90b      	cbnz	r3, 800ab24 <_vfiprintf_r+0x18>
 800ab20:	f7fe fa4c 	bl	8008fbc <__sinit>
 800ab24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab26:	07d9      	lsls	r1, r3, #31
 800ab28:	d405      	bmi.n	800ab36 <_vfiprintf_r+0x2a>
 800ab2a:	89ab      	ldrh	r3, [r5, #12]
 800ab2c:	059a      	lsls	r2, r3, #22
 800ab2e:	d402      	bmi.n	800ab36 <_vfiprintf_r+0x2a>
 800ab30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab32:	f7fe fb8f 	bl	8009254 <__retarget_lock_acquire_recursive>
 800ab36:	89ab      	ldrh	r3, [r5, #12]
 800ab38:	071b      	lsls	r3, r3, #28
 800ab3a:	d501      	bpl.n	800ab40 <_vfiprintf_r+0x34>
 800ab3c:	692b      	ldr	r3, [r5, #16]
 800ab3e:	b99b      	cbnz	r3, 800ab68 <_vfiprintf_r+0x5c>
 800ab40:	4629      	mov	r1, r5
 800ab42:	4630      	mov	r0, r6
 800ab44:	f000 f93a 	bl	800adbc <__swsetup_r>
 800ab48:	b170      	cbz	r0, 800ab68 <_vfiprintf_r+0x5c>
 800ab4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab4c:	07dc      	lsls	r4, r3, #31
 800ab4e:	d504      	bpl.n	800ab5a <_vfiprintf_r+0x4e>
 800ab50:	f04f 30ff 	mov.w	r0, #4294967295
 800ab54:	b01d      	add	sp, #116	; 0x74
 800ab56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab5a:	89ab      	ldrh	r3, [r5, #12]
 800ab5c:	0598      	lsls	r0, r3, #22
 800ab5e:	d4f7      	bmi.n	800ab50 <_vfiprintf_r+0x44>
 800ab60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab62:	f7fe fb78 	bl	8009256 <__retarget_lock_release_recursive>
 800ab66:	e7f3      	b.n	800ab50 <_vfiprintf_r+0x44>
 800ab68:	2300      	movs	r3, #0
 800ab6a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab6c:	2320      	movs	r3, #32
 800ab6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab72:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab76:	2330      	movs	r3, #48	; 0x30
 800ab78:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ad2c <_vfiprintf_r+0x220>
 800ab7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab80:	f04f 0901 	mov.w	r9, #1
 800ab84:	4623      	mov	r3, r4
 800ab86:	469a      	mov	sl, r3
 800ab88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab8c:	b10a      	cbz	r2, 800ab92 <_vfiprintf_r+0x86>
 800ab8e:	2a25      	cmp	r2, #37	; 0x25
 800ab90:	d1f9      	bne.n	800ab86 <_vfiprintf_r+0x7a>
 800ab92:	ebba 0b04 	subs.w	fp, sl, r4
 800ab96:	d00b      	beq.n	800abb0 <_vfiprintf_r+0xa4>
 800ab98:	465b      	mov	r3, fp
 800ab9a:	4622      	mov	r2, r4
 800ab9c:	4629      	mov	r1, r5
 800ab9e:	4630      	mov	r0, r6
 800aba0:	f7ff ffa2 	bl	800aae8 <__sfputs_r>
 800aba4:	3001      	adds	r0, #1
 800aba6:	f000 80a9 	beq.w	800acfc <_vfiprintf_r+0x1f0>
 800abaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abac:	445a      	add	r2, fp
 800abae:	9209      	str	r2, [sp, #36]	; 0x24
 800abb0:	f89a 3000 	ldrb.w	r3, [sl]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	f000 80a1 	beq.w	800acfc <_vfiprintf_r+0x1f0>
 800abba:	2300      	movs	r3, #0
 800abbc:	f04f 32ff 	mov.w	r2, #4294967295
 800abc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abc4:	f10a 0a01 	add.w	sl, sl, #1
 800abc8:	9304      	str	r3, [sp, #16]
 800abca:	9307      	str	r3, [sp, #28]
 800abcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abd0:	931a      	str	r3, [sp, #104]	; 0x68
 800abd2:	4654      	mov	r4, sl
 800abd4:	2205      	movs	r2, #5
 800abd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abda:	4854      	ldr	r0, [pc, #336]	; (800ad2c <_vfiprintf_r+0x220>)
 800abdc:	f7f5 faf8 	bl	80001d0 <memchr>
 800abe0:	9a04      	ldr	r2, [sp, #16]
 800abe2:	b9d8      	cbnz	r0, 800ac1c <_vfiprintf_r+0x110>
 800abe4:	06d1      	lsls	r1, r2, #27
 800abe6:	bf44      	itt	mi
 800abe8:	2320      	movmi	r3, #32
 800abea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abee:	0713      	lsls	r3, r2, #28
 800abf0:	bf44      	itt	mi
 800abf2:	232b      	movmi	r3, #43	; 0x2b
 800abf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abf8:	f89a 3000 	ldrb.w	r3, [sl]
 800abfc:	2b2a      	cmp	r3, #42	; 0x2a
 800abfe:	d015      	beq.n	800ac2c <_vfiprintf_r+0x120>
 800ac00:	9a07      	ldr	r2, [sp, #28]
 800ac02:	4654      	mov	r4, sl
 800ac04:	2000      	movs	r0, #0
 800ac06:	f04f 0c0a 	mov.w	ip, #10
 800ac0a:	4621      	mov	r1, r4
 800ac0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac10:	3b30      	subs	r3, #48	; 0x30
 800ac12:	2b09      	cmp	r3, #9
 800ac14:	d94d      	bls.n	800acb2 <_vfiprintf_r+0x1a6>
 800ac16:	b1b0      	cbz	r0, 800ac46 <_vfiprintf_r+0x13a>
 800ac18:	9207      	str	r2, [sp, #28]
 800ac1a:	e014      	b.n	800ac46 <_vfiprintf_r+0x13a>
 800ac1c:	eba0 0308 	sub.w	r3, r0, r8
 800ac20:	fa09 f303 	lsl.w	r3, r9, r3
 800ac24:	4313      	orrs	r3, r2
 800ac26:	9304      	str	r3, [sp, #16]
 800ac28:	46a2      	mov	sl, r4
 800ac2a:	e7d2      	b.n	800abd2 <_vfiprintf_r+0xc6>
 800ac2c:	9b03      	ldr	r3, [sp, #12]
 800ac2e:	1d19      	adds	r1, r3, #4
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	9103      	str	r1, [sp, #12]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	bfbb      	ittet	lt
 800ac38:	425b      	neglt	r3, r3
 800ac3a:	f042 0202 	orrlt.w	r2, r2, #2
 800ac3e:	9307      	strge	r3, [sp, #28]
 800ac40:	9307      	strlt	r3, [sp, #28]
 800ac42:	bfb8      	it	lt
 800ac44:	9204      	strlt	r2, [sp, #16]
 800ac46:	7823      	ldrb	r3, [r4, #0]
 800ac48:	2b2e      	cmp	r3, #46	; 0x2e
 800ac4a:	d10c      	bne.n	800ac66 <_vfiprintf_r+0x15a>
 800ac4c:	7863      	ldrb	r3, [r4, #1]
 800ac4e:	2b2a      	cmp	r3, #42	; 0x2a
 800ac50:	d134      	bne.n	800acbc <_vfiprintf_r+0x1b0>
 800ac52:	9b03      	ldr	r3, [sp, #12]
 800ac54:	1d1a      	adds	r2, r3, #4
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	9203      	str	r2, [sp, #12]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	bfb8      	it	lt
 800ac5e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac62:	3402      	adds	r4, #2
 800ac64:	9305      	str	r3, [sp, #20]
 800ac66:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ad3c <_vfiprintf_r+0x230>
 800ac6a:	7821      	ldrb	r1, [r4, #0]
 800ac6c:	2203      	movs	r2, #3
 800ac6e:	4650      	mov	r0, sl
 800ac70:	f7f5 faae 	bl	80001d0 <memchr>
 800ac74:	b138      	cbz	r0, 800ac86 <_vfiprintf_r+0x17a>
 800ac76:	9b04      	ldr	r3, [sp, #16]
 800ac78:	eba0 000a 	sub.w	r0, r0, sl
 800ac7c:	2240      	movs	r2, #64	; 0x40
 800ac7e:	4082      	lsls	r2, r0
 800ac80:	4313      	orrs	r3, r2
 800ac82:	3401      	adds	r4, #1
 800ac84:	9304      	str	r3, [sp, #16]
 800ac86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac8a:	4829      	ldr	r0, [pc, #164]	; (800ad30 <_vfiprintf_r+0x224>)
 800ac8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac90:	2206      	movs	r2, #6
 800ac92:	f7f5 fa9d 	bl	80001d0 <memchr>
 800ac96:	2800      	cmp	r0, #0
 800ac98:	d03f      	beq.n	800ad1a <_vfiprintf_r+0x20e>
 800ac9a:	4b26      	ldr	r3, [pc, #152]	; (800ad34 <_vfiprintf_r+0x228>)
 800ac9c:	bb1b      	cbnz	r3, 800ace6 <_vfiprintf_r+0x1da>
 800ac9e:	9b03      	ldr	r3, [sp, #12]
 800aca0:	3307      	adds	r3, #7
 800aca2:	f023 0307 	bic.w	r3, r3, #7
 800aca6:	3308      	adds	r3, #8
 800aca8:	9303      	str	r3, [sp, #12]
 800acaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acac:	443b      	add	r3, r7
 800acae:	9309      	str	r3, [sp, #36]	; 0x24
 800acb0:	e768      	b.n	800ab84 <_vfiprintf_r+0x78>
 800acb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800acb6:	460c      	mov	r4, r1
 800acb8:	2001      	movs	r0, #1
 800acba:	e7a6      	b.n	800ac0a <_vfiprintf_r+0xfe>
 800acbc:	2300      	movs	r3, #0
 800acbe:	3401      	adds	r4, #1
 800acc0:	9305      	str	r3, [sp, #20]
 800acc2:	4619      	mov	r1, r3
 800acc4:	f04f 0c0a 	mov.w	ip, #10
 800acc8:	4620      	mov	r0, r4
 800acca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acce:	3a30      	subs	r2, #48	; 0x30
 800acd0:	2a09      	cmp	r2, #9
 800acd2:	d903      	bls.n	800acdc <_vfiprintf_r+0x1d0>
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d0c6      	beq.n	800ac66 <_vfiprintf_r+0x15a>
 800acd8:	9105      	str	r1, [sp, #20]
 800acda:	e7c4      	b.n	800ac66 <_vfiprintf_r+0x15a>
 800acdc:	fb0c 2101 	mla	r1, ip, r1, r2
 800ace0:	4604      	mov	r4, r0
 800ace2:	2301      	movs	r3, #1
 800ace4:	e7f0      	b.n	800acc8 <_vfiprintf_r+0x1bc>
 800ace6:	ab03      	add	r3, sp, #12
 800ace8:	9300      	str	r3, [sp, #0]
 800acea:	462a      	mov	r2, r5
 800acec:	4b12      	ldr	r3, [pc, #72]	; (800ad38 <_vfiprintf_r+0x22c>)
 800acee:	a904      	add	r1, sp, #16
 800acf0:	4630      	mov	r0, r6
 800acf2:	f7fd fd23 	bl	800873c <_printf_float>
 800acf6:	4607      	mov	r7, r0
 800acf8:	1c78      	adds	r0, r7, #1
 800acfa:	d1d6      	bne.n	800acaa <_vfiprintf_r+0x19e>
 800acfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acfe:	07d9      	lsls	r1, r3, #31
 800ad00:	d405      	bmi.n	800ad0e <_vfiprintf_r+0x202>
 800ad02:	89ab      	ldrh	r3, [r5, #12]
 800ad04:	059a      	lsls	r2, r3, #22
 800ad06:	d402      	bmi.n	800ad0e <_vfiprintf_r+0x202>
 800ad08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad0a:	f7fe faa4 	bl	8009256 <__retarget_lock_release_recursive>
 800ad0e:	89ab      	ldrh	r3, [r5, #12]
 800ad10:	065b      	lsls	r3, r3, #25
 800ad12:	f53f af1d 	bmi.w	800ab50 <_vfiprintf_r+0x44>
 800ad16:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad18:	e71c      	b.n	800ab54 <_vfiprintf_r+0x48>
 800ad1a:	ab03      	add	r3, sp, #12
 800ad1c:	9300      	str	r3, [sp, #0]
 800ad1e:	462a      	mov	r2, r5
 800ad20:	4b05      	ldr	r3, [pc, #20]	; (800ad38 <_vfiprintf_r+0x22c>)
 800ad22:	a904      	add	r1, sp, #16
 800ad24:	4630      	mov	r0, r6
 800ad26:	f7fd ffad 	bl	8008c84 <_printf_i>
 800ad2a:	e7e4      	b.n	800acf6 <_vfiprintf_r+0x1ea>
 800ad2c:	0800b43b 	.word	0x0800b43b
 800ad30:	0800b445 	.word	0x0800b445
 800ad34:	0800873d 	.word	0x0800873d
 800ad38:	0800aae9 	.word	0x0800aae9
 800ad3c:	0800b441 	.word	0x0800b441

0800ad40 <__swbuf_r>:
 800ad40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad42:	460e      	mov	r6, r1
 800ad44:	4614      	mov	r4, r2
 800ad46:	4605      	mov	r5, r0
 800ad48:	b118      	cbz	r0, 800ad52 <__swbuf_r+0x12>
 800ad4a:	6a03      	ldr	r3, [r0, #32]
 800ad4c:	b90b      	cbnz	r3, 800ad52 <__swbuf_r+0x12>
 800ad4e:	f7fe f935 	bl	8008fbc <__sinit>
 800ad52:	69a3      	ldr	r3, [r4, #24]
 800ad54:	60a3      	str	r3, [r4, #8]
 800ad56:	89a3      	ldrh	r3, [r4, #12]
 800ad58:	071a      	lsls	r2, r3, #28
 800ad5a:	d525      	bpl.n	800ada8 <__swbuf_r+0x68>
 800ad5c:	6923      	ldr	r3, [r4, #16]
 800ad5e:	b31b      	cbz	r3, 800ada8 <__swbuf_r+0x68>
 800ad60:	6823      	ldr	r3, [r4, #0]
 800ad62:	6922      	ldr	r2, [r4, #16]
 800ad64:	1a98      	subs	r0, r3, r2
 800ad66:	6963      	ldr	r3, [r4, #20]
 800ad68:	b2f6      	uxtb	r6, r6
 800ad6a:	4283      	cmp	r3, r0
 800ad6c:	4637      	mov	r7, r6
 800ad6e:	dc04      	bgt.n	800ad7a <__swbuf_r+0x3a>
 800ad70:	4621      	mov	r1, r4
 800ad72:	4628      	mov	r0, r5
 800ad74:	f7ff fdfc 	bl	800a970 <_fflush_r>
 800ad78:	b9e0      	cbnz	r0, 800adb4 <__swbuf_r+0x74>
 800ad7a:	68a3      	ldr	r3, [r4, #8]
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	60a3      	str	r3, [r4, #8]
 800ad80:	6823      	ldr	r3, [r4, #0]
 800ad82:	1c5a      	adds	r2, r3, #1
 800ad84:	6022      	str	r2, [r4, #0]
 800ad86:	701e      	strb	r6, [r3, #0]
 800ad88:	6962      	ldr	r2, [r4, #20]
 800ad8a:	1c43      	adds	r3, r0, #1
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d004      	beq.n	800ad9a <__swbuf_r+0x5a>
 800ad90:	89a3      	ldrh	r3, [r4, #12]
 800ad92:	07db      	lsls	r3, r3, #31
 800ad94:	d506      	bpl.n	800ada4 <__swbuf_r+0x64>
 800ad96:	2e0a      	cmp	r6, #10
 800ad98:	d104      	bne.n	800ada4 <__swbuf_r+0x64>
 800ad9a:	4621      	mov	r1, r4
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	f7ff fde7 	bl	800a970 <_fflush_r>
 800ada2:	b938      	cbnz	r0, 800adb4 <__swbuf_r+0x74>
 800ada4:	4638      	mov	r0, r7
 800ada6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ada8:	4621      	mov	r1, r4
 800adaa:	4628      	mov	r0, r5
 800adac:	f000 f806 	bl	800adbc <__swsetup_r>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d0d5      	beq.n	800ad60 <__swbuf_r+0x20>
 800adb4:	f04f 37ff 	mov.w	r7, #4294967295
 800adb8:	e7f4      	b.n	800ada4 <__swbuf_r+0x64>
	...

0800adbc <__swsetup_r>:
 800adbc:	b538      	push	{r3, r4, r5, lr}
 800adbe:	4b2a      	ldr	r3, [pc, #168]	; (800ae68 <__swsetup_r+0xac>)
 800adc0:	4605      	mov	r5, r0
 800adc2:	6818      	ldr	r0, [r3, #0]
 800adc4:	460c      	mov	r4, r1
 800adc6:	b118      	cbz	r0, 800add0 <__swsetup_r+0x14>
 800adc8:	6a03      	ldr	r3, [r0, #32]
 800adca:	b90b      	cbnz	r3, 800add0 <__swsetup_r+0x14>
 800adcc:	f7fe f8f6 	bl	8008fbc <__sinit>
 800add0:	89a3      	ldrh	r3, [r4, #12]
 800add2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800add6:	0718      	lsls	r0, r3, #28
 800add8:	d422      	bmi.n	800ae20 <__swsetup_r+0x64>
 800adda:	06d9      	lsls	r1, r3, #27
 800addc:	d407      	bmi.n	800adee <__swsetup_r+0x32>
 800adde:	2309      	movs	r3, #9
 800ade0:	602b      	str	r3, [r5, #0]
 800ade2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ade6:	81a3      	strh	r3, [r4, #12]
 800ade8:	f04f 30ff 	mov.w	r0, #4294967295
 800adec:	e034      	b.n	800ae58 <__swsetup_r+0x9c>
 800adee:	0758      	lsls	r0, r3, #29
 800adf0:	d512      	bpl.n	800ae18 <__swsetup_r+0x5c>
 800adf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adf4:	b141      	cbz	r1, 800ae08 <__swsetup_r+0x4c>
 800adf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adfa:	4299      	cmp	r1, r3
 800adfc:	d002      	beq.n	800ae04 <__swsetup_r+0x48>
 800adfe:	4628      	mov	r0, r5
 800ae00:	f7ff f8b4 	bl	8009f6c <_free_r>
 800ae04:	2300      	movs	r3, #0
 800ae06:	6363      	str	r3, [r4, #52]	; 0x34
 800ae08:	89a3      	ldrh	r3, [r4, #12]
 800ae0a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae0e:	81a3      	strh	r3, [r4, #12]
 800ae10:	2300      	movs	r3, #0
 800ae12:	6063      	str	r3, [r4, #4]
 800ae14:	6923      	ldr	r3, [r4, #16]
 800ae16:	6023      	str	r3, [r4, #0]
 800ae18:	89a3      	ldrh	r3, [r4, #12]
 800ae1a:	f043 0308 	orr.w	r3, r3, #8
 800ae1e:	81a3      	strh	r3, [r4, #12]
 800ae20:	6923      	ldr	r3, [r4, #16]
 800ae22:	b94b      	cbnz	r3, 800ae38 <__swsetup_r+0x7c>
 800ae24:	89a3      	ldrh	r3, [r4, #12]
 800ae26:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae2e:	d003      	beq.n	800ae38 <__swsetup_r+0x7c>
 800ae30:	4621      	mov	r1, r4
 800ae32:	4628      	mov	r0, r5
 800ae34:	f000 f884 	bl	800af40 <__smakebuf_r>
 800ae38:	89a0      	ldrh	r0, [r4, #12]
 800ae3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae3e:	f010 0301 	ands.w	r3, r0, #1
 800ae42:	d00a      	beq.n	800ae5a <__swsetup_r+0x9e>
 800ae44:	2300      	movs	r3, #0
 800ae46:	60a3      	str	r3, [r4, #8]
 800ae48:	6963      	ldr	r3, [r4, #20]
 800ae4a:	425b      	negs	r3, r3
 800ae4c:	61a3      	str	r3, [r4, #24]
 800ae4e:	6923      	ldr	r3, [r4, #16]
 800ae50:	b943      	cbnz	r3, 800ae64 <__swsetup_r+0xa8>
 800ae52:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae56:	d1c4      	bne.n	800ade2 <__swsetup_r+0x26>
 800ae58:	bd38      	pop	{r3, r4, r5, pc}
 800ae5a:	0781      	lsls	r1, r0, #30
 800ae5c:	bf58      	it	pl
 800ae5e:	6963      	ldrpl	r3, [r4, #20]
 800ae60:	60a3      	str	r3, [r4, #8]
 800ae62:	e7f4      	b.n	800ae4e <__swsetup_r+0x92>
 800ae64:	2000      	movs	r0, #0
 800ae66:	e7f7      	b.n	800ae58 <__swsetup_r+0x9c>
 800ae68:	20000068 	.word	0x20000068

0800ae6c <_raise_r>:
 800ae6c:	291f      	cmp	r1, #31
 800ae6e:	b538      	push	{r3, r4, r5, lr}
 800ae70:	4604      	mov	r4, r0
 800ae72:	460d      	mov	r5, r1
 800ae74:	d904      	bls.n	800ae80 <_raise_r+0x14>
 800ae76:	2316      	movs	r3, #22
 800ae78:	6003      	str	r3, [r0, #0]
 800ae7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae7e:	bd38      	pop	{r3, r4, r5, pc}
 800ae80:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ae82:	b112      	cbz	r2, 800ae8a <_raise_r+0x1e>
 800ae84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae88:	b94b      	cbnz	r3, 800ae9e <_raise_r+0x32>
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	f000 f830 	bl	800aef0 <_getpid_r>
 800ae90:	462a      	mov	r2, r5
 800ae92:	4601      	mov	r1, r0
 800ae94:	4620      	mov	r0, r4
 800ae96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae9a:	f000 b817 	b.w	800aecc <_kill_r>
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d00a      	beq.n	800aeb8 <_raise_r+0x4c>
 800aea2:	1c59      	adds	r1, r3, #1
 800aea4:	d103      	bne.n	800aeae <_raise_r+0x42>
 800aea6:	2316      	movs	r3, #22
 800aea8:	6003      	str	r3, [r0, #0]
 800aeaa:	2001      	movs	r0, #1
 800aeac:	e7e7      	b.n	800ae7e <_raise_r+0x12>
 800aeae:	2400      	movs	r4, #0
 800aeb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aeb4:	4628      	mov	r0, r5
 800aeb6:	4798      	blx	r3
 800aeb8:	2000      	movs	r0, #0
 800aeba:	e7e0      	b.n	800ae7e <_raise_r+0x12>

0800aebc <raise>:
 800aebc:	4b02      	ldr	r3, [pc, #8]	; (800aec8 <raise+0xc>)
 800aebe:	4601      	mov	r1, r0
 800aec0:	6818      	ldr	r0, [r3, #0]
 800aec2:	f7ff bfd3 	b.w	800ae6c <_raise_r>
 800aec6:	bf00      	nop
 800aec8:	20000068 	.word	0x20000068

0800aecc <_kill_r>:
 800aecc:	b538      	push	{r3, r4, r5, lr}
 800aece:	4d07      	ldr	r5, [pc, #28]	; (800aeec <_kill_r+0x20>)
 800aed0:	2300      	movs	r3, #0
 800aed2:	4604      	mov	r4, r0
 800aed4:	4608      	mov	r0, r1
 800aed6:	4611      	mov	r1, r2
 800aed8:	602b      	str	r3, [r5, #0]
 800aeda:	f7f6 fb53 	bl	8001584 <_kill>
 800aede:	1c43      	adds	r3, r0, #1
 800aee0:	d102      	bne.n	800aee8 <_kill_r+0x1c>
 800aee2:	682b      	ldr	r3, [r5, #0]
 800aee4:	b103      	cbz	r3, 800aee8 <_kill_r+0x1c>
 800aee6:	6023      	str	r3, [r4, #0]
 800aee8:	bd38      	pop	{r3, r4, r5, pc}
 800aeea:	bf00      	nop
 800aeec:	20001e1c 	.word	0x20001e1c

0800aef0 <_getpid_r>:
 800aef0:	f7f6 bb40 	b.w	8001574 <_getpid>

0800aef4 <__swhatbuf_r>:
 800aef4:	b570      	push	{r4, r5, r6, lr}
 800aef6:	460c      	mov	r4, r1
 800aef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aefc:	2900      	cmp	r1, #0
 800aefe:	b096      	sub	sp, #88	; 0x58
 800af00:	4615      	mov	r5, r2
 800af02:	461e      	mov	r6, r3
 800af04:	da0d      	bge.n	800af22 <__swhatbuf_r+0x2e>
 800af06:	89a3      	ldrh	r3, [r4, #12]
 800af08:	f013 0f80 	tst.w	r3, #128	; 0x80
 800af0c:	f04f 0100 	mov.w	r1, #0
 800af10:	bf0c      	ite	eq
 800af12:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800af16:	2340      	movne	r3, #64	; 0x40
 800af18:	2000      	movs	r0, #0
 800af1a:	6031      	str	r1, [r6, #0]
 800af1c:	602b      	str	r3, [r5, #0]
 800af1e:	b016      	add	sp, #88	; 0x58
 800af20:	bd70      	pop	{r4, r5, r6, pc}
 800af22:	466a      	mov	r2, sp
 800af24:	f000 f848 	bl	800afb8 <_fstat_r>
 800af28:	2800      	cmp	r0, #0
 800af2a:	dbec      	blt.n	800af06 <__swhatbuf_r+0x12>
 800af2c:	9901      	ldr	r1, [sp, #4]
 800af2e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800af32:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800af36:	4259      	negs	r1, r3
 800af38:	4159      	adcs	r1, r3
 800af3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af3e:	e7eb      	b.n	800af18 <__swhatbuf_r+0x24>

0800af40 <__smakebuf_r>:
 800af40:	898b      	ldrh	r3, [r1, #12]
 800af42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af44:	079d      	lsls	r5, r3, #30
 800af46:	4606      	mov	r6, r0
 800af48:	460c      	mov	r4, r1
 800af4a:	d507      	bpl.n	800af5c <__smakebuf_r+0x1c>
 800af4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af50:	6023      	str	r3, [r4, #0]
 800af52:	6123      	str	r3, [r4, #16]
 800af54:	2301      	movs	r3, #1
 800af56:	6163      	str	r3, [r4, #20]
 800af58:	b002      	add	sp, #8
 800af5a:	bd70      	pop	{r4, r5, r6, pc}
 800af5c:	ab01      	add	r3, sp, #4
 800af5e:	466a      	mov	r2, sp
 800af60:	f7ff ffc8 	bl	800aef4 <__swhatbuf_r>
 800af64:	9900      	ldr	r1, [sp, #0]
 800af66:	4605      	mov	r5, r0
 800af68:	4630      	mov	r0, r6
 800af6a:	f7ff f873 	bl	800a054 <_malloc_r>
 800af6e:	b948      	cbnz	r0, 800af84 <__smakebuf_r+0x44>
 800af70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af74:	059a      	lsls	r2, r3, #22
 800af76:	d4ef      	bmi.n	800af58 <__smakebuf_r+0x18>
 800af78:	f023 0303 	bic.w	r3, r3, #3
 800af7c:	f043 0302 	orr.w	r3, r3, #2
 800af80:	81a3      	strh	r3, [r4, #12]
 800af82:	e7e3      	b.n	800af4c <__smakebuf_r+0xc>
 800af84:	89a3      	ldrh	r3, [r4, #12]
 800af86:	6020      	str	r0, [r4, #0]
 800af88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af8c:	81a3      	strh	r3, [r4, #12]
 800af8e:	9b00      	ldr	r3, [sp, #0]
 800af90:	6163      	str	r3, [r4, #20]
 800af92:	9b01      	ldr	r3, [sp, #4]
 800af94:	6120      	str	r0, [r4, #16]
 800af96:	b15b      	cbz	r3, 800afb0 <__smakebuf_r+0x70>
 800af98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af9c:	4630      	mov	r0, r6
 800af9e:	f000 f81d 	bl	800afdc <_isatty_r>
 800afa2:	b128      	cbz	r0, 800afb0 <__smakebuf_r+0x70>
 800afa4:	89a3      	ldrh	r3, [r4, #12]
 800afa6:	f023 0303 	bic.w	r3, r3, #3
 800afaa:	f043 0301 	orr.w	r3, r3, #1
 800afae:	81a3      	strh	r3, [r4, #12]
 800afb0:	89a3      	ldrh	r3, [r4, #12]
 800afb2:	431d      	orrs	r5, r3
 800afb4:	81a5      	strh	r5, [r4, #12]
 800afb6:	e7cf      	b.n	800af58 <__smakebuf_r+0x18>

0800afb8 <_fstat_r>:
 800afb8:	b538      	push	{r3, r4, r5, lr}
 800afba:	4d07      	ldr	r5, [pc, #28]	; (800afd8 <_fstat_r+0x20>)
 800afbc:	2300      	movs	r3, #0
 800afbe:	4604      	mov	r4, r0
 800afc0:	4608      	mov	r0, r1
 800afc2:	4611      	mov	r1, r2
 800afc4:	602b      	str	r3, [r5, #0]
 800afc6:	f7f6 fb3c 	bl	8001642 <_fstat>
 800afca:	1c43      	adds	r3, r0, #1
 800afcc:	d102      	bne.n	800afd4 <_fstat_r+0x1c>
 800afce:	682b      	ldr	r3, [r5, #0]
 800afd0:	b103      	cbz	r3, 800afd4 <_fstat_r+0x1c>
 800afd2:	6023      	str	r3, [r4, #0]
 800afd4:	bd38      	pop	{r3, r4, r5, pc}
 800afd6:	bf00      	nop
 800afd8:	20001e1c 	.word	0x20001e1c

0800afdc <_isatty_r>:
 800afdc:	b538      	push	{r3, r4, r5, lr}
 800afde:	4d06      	ldr	r5, [pc, #24]	; (800aff8 <_isatty_r+0x1c>)
 800afe0:	2300      	movs	r3, #0
 800afe2:	4604      	mov	r4, r0
 800afe4:	4608      	mov	r0, r1
 800afe6:	602b      	str	r3, [r5, #0]
 800afe8:	f7f6 fb3b 	bl	8001662 <_isatty>
 800afec:	1c43      	adds	r3, r0, #1
 800afee:	d102      	bne.n	800aff6 <_isatty_r+0x1a>
 800aff0:	682b      	ldr	r3, [r5, #0]
 800aff2:	b103      	cbz	r3, 800aff6 <_isatty_r+0x1a>
 800aff4:	6023      	str	r3, [r4, #0]
 800aff6:	bd38      	pop	{r3, r4, r5, pc}
 800aff8:	20001e1c 	.word	0x20001e1c

0800affc <_init>:
 800affc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800affe:	bf00      	nop
 800b000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b002:	bc08      	pop	{r3}
 800b004:	469e      	mov	lr, r3
 800b006:	4770      	bx	lr

0800b008 <_fini>:
 800b008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00a:	bf00      	nop
 800b00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b00e:	bc08      	pop	{r3}
 800b010:	469e      	mov	lr, r3
 800b012:	4770      	bx	lr
